
ex3_ucosii_tasks.elf:     file format elf32-littlenios2
ex3_ucosii_tasks.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0000023c

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0000e2c8 memsz 0x0000e2c8 flags r-x
    LOAD off    0x0000f2e8 vaddr 0x0000e2e8 paddr 0x0000fcf0 align 2**12
         filesz 0x00001a08 memsz 0x00001a08 flags rw-
    LOAD off    0x000116f8 vaddr 0x000116f8 paddr 0x000116f8 align 2**12
         filesz 0x00000000 memsz 0x0000942c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000021c  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000dd14  0000023c  0000023c  0000123c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000398  0000df50  0000df50  0000ef50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a08  0000e2e8  0000fcf0  0000f2e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000942c  000116f8  000116f8  000116f8  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  0001ab24  0001ab24  00010cf0  2**0
                  CONTENTS
  7 .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM 00000000  09000000  09000000  00010cf0  2**0
                  CONTENTS
  8 .comment      0000002d  00000000  00000000  00010cf0  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000008f0  00000000  00000000  00010d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_info   0001523d  00000000  00000000  00011610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005b4d  00000000  00000000  0002684d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line   00009e48  00000000  00000000  0002c39a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_frame  000024cc  00000000  00000000  000361e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    0000401e  00000000  00000000  000386b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00004684  00000000  00000000  0003c6ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_alt_sim_info 00000020  00000000  00000000  00040d54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000009b8  00000000  00000000  00040d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .thread_model 00000006  00000000  00000000  00045cdd  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  00045ce3  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00045ce8  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00045ce9  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00045cea  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00045cee  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00045cf2  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  00045cf6  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  00045cff  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  00045d08  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000f  00000000  00000000  00045d11  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000005a  00000000  00000000  00045d20  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     001d2080  00000000  00000000  00045d7a  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
0000023c l    d  .text	00000000 .text
0000df50 l    d  .rodata	00000000 .rodata
0000e2e8 l    d  .rwdata	00000000 .rwdata
000116f8 l    d  .bss	00000000 .bss
0001ab24 l    d  .SDRAM	00000000 .SDRAM
09000000 l    d  .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM	00000000 .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 /home/xix277/engr-ece/Winter_Sem_2022/CME332/cme332_ex3_usosii_tasks/ex3_ucosii_tasks_bsp//obj/HAL/src/crt0.o
00000274 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 ex3_ucosii_tasks.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_load.c
0000203c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_env_lock.c
0000fc48 l     O .rwdata	00000004 lockid
00011794 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
0000fc4c l     O .rwdata	00000004 lockid
0001179c l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
00003b18 l     F .text	00000048 OS_InitMisc
00003b60 l     F .text	0000006c OS_InitRdyList
00003cd4 l     F .text	000000e4 OS_InitTCBList
00003a38 l     F .text	000000e0 OS_InitEventList
00003bcc l     F .text	00000084 OS_InitTaskIdle
00003c50 l     F .text	00000084 OS_InitTaskStat
00003f48 l     F .text	0000006c OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
00005d00 l     F .text	000000f4 OS_FlagTaskRdy
00005abc l     F .text	00000164 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00009e54 l     F .text	00000034 alt_dev_reg
0000e2e8 l     O .rwdata	0000106c JTAG_UART
0000f354 l     O .rwdata	00000030 AV_Config
0000f384 l     O .rwdata	00000030 Audio_Subsystem_Audio
0000f3b4 l     O .rwdata	0000002c Char_LCD_16x2
0000f3e0 l     O .rwdata	0000002c IrDA
0000f40c l     O .rwdata	00000038 PS2_Port
0000f444 l     O .rwdata	00000038 PS2_Port_Dual
0000f47c l     O .rwdata	0000002c Serial_Port
0000f4a8 l     O .rwdata	00000034 USB
0000f4dc l     O .rwdata	0000005c VGA_Subsystem_Char_Buf_Subsystem_Char_Buf_DMA
0000f538 l     O .rwdata	0000005c VGA_Subsystem_VGA_Pixel_DMA
0000f594 l     O .rwdata	0000005c Video_In_Subsystem_Video_In_DMA
0000f5f0 l     O .rwdata	00000044 VGA_Subsystem_VGA_Pixel_RGB_Resampler
0000f634 l     O .rwdata	0000002c SD_Card
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000a940 l     F .text	000002b0 altera_avalon_jtag_uart_irq
0000abf0 l     F .text	0000010c altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000b3f0 l     F .text	00000080 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_irda.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
0000c8ec l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0000ca18 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000ca44 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000ccb4 l     F .text	000000b0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0000cf60 l     F .text	0000003c alt_get_errno
0000cf9c l     F .text	000000b8 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
0000f808 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
000117f8 g     O .bss	00000004 alt_instruction_exception_handler
0000fc9a g     O .rwdata	00000002 OSTaskNameSize
00002128 g     F .text	000000c0 alt_main
0001aa24 g     O .bss	00000100 alt_irq
0000bfc0 g     F .text	00000060 alt_up_ps2_disable_read_interrupt
00006544 g     F .text	000000cc OS_MemInit
00011704 g     O .bss	00000008 old_time
0000fcf0 g       *ABS*	00000000 __flash_rwdata_start
00009df0 g     F .text	00000064 OSTimeSet
0000b560 g     F .text	00000040 alt_up_character_lcd_send_cmd
00001690 g     F .text	00000080 .hidden __eqdf2
0001171c g     O .bss	00000004 engine
00002770 g     F .text	00000638 OSEventPendMulti
0000d5ec g     F .text	00000024 OSTaskCreateHook
00011800 g     O .bss	00002000 task1_stk
0000fc72 g     O .rwdata	00000002 OSMboxEn
00002e00 g     F .text	0000004c OSIntEnter
0000bdd8 g     F .text	00000034 read_CE_bit
0000fc82 g     O .rwdata	00000002 OSQEn
00002430 g     F .text	000000d4 __malloc_unlock
0000d654 g     F .text	00000020 OSTaskStatHook
0000c160 g     F .text	0000009c alt_up_ps2_read_data_byte_timeout
0000c658 g     F .text	00000090 alt_up_rs232_read_fd
000117ba g     O .bss	00000001 OSLockNesting
0000fcc0 g     O .rwdata	00000002 OSDataSize
000117c1 g     O .bss	00000001 OSRunning
0000d694 g     F .text	00000020 OSInitHookBegin
0000fcb8 g     O .rwdata	00000002 OSTmrSize
000117c4 g     O .bss	00000004 OSIdleCtr
0000d3ac g     F .text	00000024 altera_nios2_gen2_irq_init
0000d47c g       .text	00000000 OSStartTsk
0000b4ec g     F .text	00000074 get_DDRAM_addr
00004264 g     F .text	000002e0 OS_TCBInit
00000000 g     F .entry	0000001c __reset
0000fcbe g     O .rwdata	00000002 OSTmrWheelTblSize
00000020 g       *ABS*	00000000 __flash_exceptions_start
0000fc5e g     O .rwdata	00000002 OSEventSize
000117bc g     O .bss	00000001 OSPrioHighRdy
0000d610 g     F .text	00000024 OSTaskDelHook
000117fc g     O .bss	00000004 errno
0000d45c g       .text	00000000 OSStartHighRdy
0000886c g     F .text	000001dc OSTaskCreateExt
000055e4 g     F .text	00000064 OSFlagPendGetFlagsRdy
0000fc9e g     O .rwdata	00000002 OSTaskStatStkSize
000046d4 g     F .text	00000324 OSFlagAccept
00006b94 g     F .text	000000bc OSQFlush
00006610 g     F .text	00000144 OSQAccept
00011788 g     O .bss	00000004 alt_argv
00017c2c g       *ABS*	00000000 _gp
000086c8 g     F .text	000001a4 OSTaskCreate
00008204 g     F .text	000004c4 OSTaskChangePrio
00011798 g     O .bss	00000004 alt_heapsem
00004544 g     F .text	00000190 OSDebugInit
00008a48 g     F .text	00000344 OSTaskDel
0000f688 g     O .rwdata	00000180 alt_fd_list
00018340 g     O .bss	00000370 OSFlagTbl
0001172c g     O .bss	00000004 park
00003820 g     F .text	000000b0 OS_EventTaskRemove
0000cbf0 g     F .text	00000090 alt_find_dev
0000dae0 g     F .text	00000100 memcpy
0000fc88 g     O .rwdata	00000002 OSRdyTblSize
0000b710 g     F .text	00000050 alt_up_character_lcd_write_fd
0001174c g     O .bss	00000004 key_value
0000cd64 g     F .text	0000007c alt_io_redirect
00001710 g     F .text	000000e8 .hidden __ltdf2
0000df50 g       *ABS*	00000000 __DTOR_END__
0000bca8 g     F .text	00000090 alt_up_irda_write_fd
0000c5e4 g     F .text	00000074 alt_up_rs232_read_data
00011780 g     O .bss	00000004 Drive_Neutral_Sem
0000d988 g     F .text	00000098 alt_exception_cause_generated_bad_addr
00002504 g     F .text	00000124 OSEventNameGet
0000fc6c g     O .rwdata	00000002 OSFlagMax
0000fc2c g     O .rwdata	00000004 red_LED_ptr
00002e4c g     F .text	000000f4 OSIntExit
000003d0 g     F .text	0000008c digit_separator
0000fca6 g     O .rwdata	00000002 OSTCBSize
000117bb g     O .bss	00000001 OSPrioCur
0000baa4 g     F .text	00000040 alt_up_irda_get_used_space_in_read_FIFO
0000ae58 g     F .text	000002c8 altera_avalon_jtag_uart_read
0000fc44 g     O .rwdata	00000004 calculate
0000fc8c g     O .rwdata	00000002 OSStkWidth
0000fc80 g     O .rwdata	00000002 OSPtrSize
0000fc60 g     O .rwdata	00000002 OSEventTblSize
0000ba44 g     F .text	00000060 alt_up_irda_disable_read_interrupt
0000d3d0 g       .text	00000000 OSCtxSw
0000d8f8 g     F .text	00000090 alt_icache_flush
000117d4 g     O .bss	00000004 OSTCBList
000117e8 g     O .bss	00000004 alt_fd_list_lock
00019c14 g     O .bss	00000c30 OSMemTbl
000117d8 g     O .bss	00000001 OSTickStepState
0000fc34 g     O .rwdata	00000004 hex3_0_ptr
0000fc84 g     O .rwdata	00000002 OSQMax
000186b0 g     O .bss	00000800 OSTaskStatStk
00006168 g     F .text	000000f4 OSMemNameGet
0000fc64 g     O .rwdata	00000002 OSFlagEn
0000fcaa g     O .rwdata	00000002 OSTimeTickHookEn
0000705c g     F .text	00000174 OSQPost
00005df4 g     F .text	000000a4 OS_FlagUnlink
0000fcd4 g     O .rwdata	00000004 alt_max_fd
0000c560 g     F .text	00000044 alt_up_rs232_check_parity
00003e10 g     F .text	0000006c OS_MemCopy
00003e7c g     F .text	000000cc OS_Sched
00006070 g     F .text	000000f8 OSMemGet
00011740 g     O .bss	00000004 sw9
00009080 g     F .text	000001bc OSTaskNameSet
0000be0c g     F .text	00000030 read_num_bytes_available
000117a0 g     O .bss	00000004 OSCtxSwCtr
0000d674 g     F .text	00000020 OSTimeTickHook
0000cde0 g     F .text	00000180 alt_irq_register
0000fc6e g     O .rwdata	00000002 OSFlagNameSize
0000bd74 g     F .text	00000034 read_RI_bit
00001eec g     F .text	000000fc .hidden __extendsfdf2
000038d0 g     F .text	000000fc OS_EventTaskRemoveMulti
00000da0 g     F .text	000008f0 .hidden __adddf3
000036d8 g     F .text	00000148 OS_EventTaskWaitMulti
00011718 g     O .bss	00000004 throttle
0000fc86 g     O .rwdata	00000002 OSQSize
00007b4c g     F .text	00000214 OSSemPend
0000fce8 g     O .rwdata	00000004 _global_impure_ptr
00011778 g     O .bss	00000004 Throttle_Sem
0000fc70 g     O .rwdata	00000002 OSLowestPrio
0001ab24 g       *ABS*	00000000 __bss_end
0000d6f4 g     F .text	00000024 OSTCBInitHook
0000fcb6 g     O .rwdata	00000002 OSTmrCfgTicksPerSec
0000d2a4 g     F .text	00000108 alt_tick
0000fc58 g     O .rwdata	00000002 OSEventEn
0000fcb2 g     O .rwdata	00000002 OSTmrCfgNameSize
0000be70 g     F .text	0000002c read_data_byte
00005c20 g     F .text	000000e0 OS_FlagInit
0000d200 g     F .text	000000a4 alt_alarm_stop
0000fc40 g     O .rwdata	00000004 KEY_ptr
0000bda8 g     F .text	00000030 read_RE_bit
0000fc94 g     O .rwdata	00000002 OSTaskIdleStkSize
00011728 g     O .bss	00000004 drive_neutral
000117ec g     O .bss	00000004 alt_irq_active
0000776c g     F .text	000000b4 OSSemAccept
00006378 g     F .text	000000e0 OSMemPut
00005e98 g     F .text	000001d8 OSMemCreate
00011738 g     O .bss	00000004 eng_start_stop
000117b0 g     O .bss	00000004 OSIdleCtrMax
0000bae4 g     F .text	0000003c alt_up_irda_get_available_space_in_write_FIFO
000000fc g     F .exceptions	000000cc alt_irq_handler
0000f660 g     O .rwdata	00000028 alt_dev_null
0000fca8 g     O .rwdata	00000002 OSTicksPerSec
0000b9b0 g     F .text	00000038 alt_up_character_lcd_cursor_blink_on
0000d3d0 g       .text	00000000 OSIntCtxSw
0000c020 g     F .text	00000074 alt_up_ps2_write_data_byte
0000c9f8 g     F .text	00000020 alt_dcache_flush_all
00001e6c g     F .text	00000080 .hidden __fixdfsi
000117cc g     O .bss	00000004 OSTCBFreeList
0000fcf0 g       *ABS*	00000000 __ram_rwdata_end
00007d60 g     F .text	00000174 OSSemPendAbort
0000fccc g     O .rwdata	00000008 alt_dev_list
00011714 g     O .bss	00000004 speed_in_km
0000fcac g     O .rwdata	00000002 OSVersionNbr
0000e2e8 g       *ABS*	00000000 __ram_rodata_end
0000c6e8 g     F .text	00000094 alt_up_rs232_write_fd
00011764 g     O .bss	00000004 Brake_Pedal_Sem
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
00001710 g     F .text	000000e8 .hidden __ledf2
0000fc54 g     O .rwdata	00000004 OSEndiannessTest
0000fc66 g     O .rwdata	00000002 OSFlagGrpSize
0001ab24 g       *ABS*	00000000 end
0000c354 g     F .text	00000098 alt_up_ps2_write_fd
0000bb20 g     F .text	00000044 alt_up_irda_check_parity
00011758 g     O .bss	00000004 key0
0000a7fc g     F .text	00000144 altera_avalon_jtag_uart_init
000040dc g     F .text	000000c4 OS_TaskStat
000001c8 g     F .exceptions	00000074 alt_instruction_exception_entry
0000df50 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
0000b470 g     F .text	0000007c alt_avalon_timer_sc_init
0001177c g     O .bss	00000004 Speed_Sem
00001fe8 g     F .text	00000054 .hidden __clzsi2
0000b120 g     F .text	000002d0 altera_avalon_jtag_uart_write
00003db8 g     F .text	00000058 OS_MemClr
0000b614 g     F .text	00000080 alt_up_character_lcd_write
0000d4a0 g     F .text	0000014c OSTaskStkInit
00003448 g     F .text	00000188 OS_EventTaskRdy
0000ddf8 g     F .text	00000120 __call_exitprocs
000117ac g     O .bss	00000001 OSCPUUsage
0000023c g     F .text	0000003c _start
000117f0 g     O .bss	00000004 _alt_tick_rate
00006c50 g     F .text	00000298 OSQPend
00009954 g     F .text	00000108 OSTimeDly
000117f4 g     O .bss	00000004 _alt_nticks
00009ec4 g     F .text	000007d4 alt_sys_init
0000b860 g     F .text	0000008c alt_up_character_lcd_shift_display
00000c7c g     F .text	00000124 .hidden __floatsisf
0000dd68 g     F .text	00000090 __register_exitproc
000117c2 g     O .bss	00000001 OSTaskCtr
0000c26c g     F .text	0000005c alt_up_ps2_clear_fifo
0000c524 g     F .text	0000003c alt_up_rs232_get_available_space_in_write_FIFO
00009a5c g     F .text	00000154 OSTimeDlyHMSM
0000b8ec g     F .text	0000008c alt_up_character_lcd_erase_pos
0000fc30 g     O .rwdata	00000004 switch_ptr
0000acfc g     F .text	00000068 altera_avalon_jtag_uart_close
0000e2e8 g       *ABS*	00000000 __ram_rwdata_start
0000df50 g       *ABS*	00000000 __ram_rodata_start
0000fc5a g     O .rwdata	00000002 OSEventMax
00007ed4 g     F .text	0000011c OSSemPost
0001173c g     O .bss	00000004 sw_value
00002fd0 g     F .text	000000e4 OSSchedUnlock
0000a698 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000d820 g     F .text	000000d8 alt_get_fd
000117dc g     O .bss	00000004 OSMemFreeList
0000311c g     F .text	000000b8 OSStatInit
000059f4 g     F .text	000000c8 OSFlagQuery
0000fc90 g     O .rwdata	00000002 OSTaskCreateExtEn
00011770 g     O .bss	00000004 Park_Sem
0000da68 g     F .text	00000078 memcmp
00003428 g     F .text	00000020 OS_Dummy
0000a758 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00000514 g     F .text	00000394 IO_task
0001ab24 g       *ABS*	00000000 __alt_stack_base
0000a7a8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0000b9e8 g     F .text	0000005c alt_up_irda_enable_read_interrupt
0001a844 g     O .bss	000001e0 OSQTbl
0000045c g     F .text	000000b8 hex_display_cnvtr
00011720 g     O .bss	00000004 eng_timer
00011730 g     O .bss	00000004 brake_pedal
00000a68 g     F .text	00000214 vehicle_task
000117d0 g     O .bss	00000004 OSTCBHighRdy
000017f8 g     F .text	00000674 .hidden __muldf3
00011760 g     O .bss	00000004 Key_Fob_Sem
000117e0 g     O .bss	00000004 OSQFreeList
0000c484 g     F .text	00000060 alt_up_rs232_disable_read_interrupt
0000d718 g     F .text	00000108 alt_find_file
00011774 g     O .bss	00000004 Accel_Pedal_Sem
0000ca80 g     F .text	000000a8 alt_dev_llist_insert
00002308 g     F .text	00000128 __malloc_lock
00002628 g     F .text	00000148 OSEventNameSet
000117bd g     O .bss	00000001 OSRdyGrp
000116f8 g       *ABS*	00000000 __bss_start
00011724 g     O .bss	00000004 key_fob
00011768 g     O .bss	00000004 Eng_Start_Stop_Sem
0000dbe0 g     F .text	000000f0 memset
00000278 g     F .text	00000158 main
0001178c g     O .bss	00000004 alt_envp
0000a6f8 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000e060 g     O .rodata	00000100 OSUnMapTbl
0000fc8a g     O .rwdata	00000002 OSSemEn
0000b7d4 g     F .text	0000008c alt_up_character_lcd_shift_cursor
00005648 g     F .text	000003ac OSFlagPost
000035d0 g     F .text	00000108 OS_EventTaskWait
00013800 g     O .bss	00002000 task2_stk
0000c1fc g     F .text	00000070 alt_up_ps2_read_data_byte
000041a0 g     F .text	000000c4 OS_TaskStatStkChk
00008d8c g     F .text	00000158 OSTaskDelReq
0000fcd8 g     O .rwdata	00000004 alt_errno
000030b4 g     F .text	00000068 OSStart
00015800 g     O .bss	00002000 task3_stk
000022a8 g     F .text	00000060 __env_unlock
0000923c g     F .text	000001e0 OSTaskResume
00006458 g     F .text	000000ec OSMemQuery
0000fc9c g     O .rwdata	00000002 OSTaskStatEn
0000bb64 g     F .text	00000040 alt_up_irda_write_data
0000fc76 g     O .rwdata	00000002 OSMemMax
000071d0 g     F .text	0000017c OSQPostFront
0000c3ec g     F .text	0000003c alt_up_ps2_open_dev
000117be g     O .bss	00000003 OSRdyTbl
0000fc50 g     O .rwdata	00000002 OSDebugEn
0000b5d8 g     F .text	0000003c alt_up_character_lcd_open_dev
0000bf64 g     F .text	0000005c alt_up_ps2_enable_read_interrupt
0000df50 g       *ABS*	00000000 __CTOR_END__
0000fc68 g     O .rwdata	00000002 OSFlagNodeSize
0001176c g     O .bss	00000004 Engine_Sem
0000fcb0 g     O .rwdata	00000002 OSTmrCfgMax
0000b5a0 g     F .text	00000038 alt_up_character_lcd_init
00006754 g     F .text	000001b0 OSQCreate
00008ee4 g     F .text	0000019c OSTaskNameGet
0000df50 g       *ABS*	00000000 __flash_rodata_start
0000734c g     F .text	00000218 OSQPostOpt
000031d4 g     F .text	00000234 OSTimeTick
0000fc98 g     O .rwdata	00000002 OSTaskMax
0000df50 g       *ABS*	00000000 __DTOR_LIST__
00007820 g     F .text	000000dc OSSemCreate
0000fcbc g     O .rwdata	00000002 OSTmrWheelSize
00011750 g     O .bss	00000004 key3
0000c77c g     F .text	0000003c alt_up_rs232_open_dev
00001690 g     F .text	00000080 .hidden __nedf2
0000fc92 g     O .rwdata	00000002 OSTaskDelEn
00007ff0 g     F .text	00000114 OSSemQuery
00006904 g     F .text	00000290 OSQDel
00006ee8 g     F .text	00000174 OSQPendAbort
00009e88 g     F .text	0000003c alt_irq_init
0000d1a8 g     F .text	00000058 alt_release_fd
0000be3c g     F .text	00000034 read_data_valid
0000b978 g     F .text	00000038 alt_up_character_lcd_cursor_off
0000df50 g     O .rodata	00000100 .hidden __clz_tab
0000c0fc g     F .text	00000064 alt_up_ps2_write_data_byte_with_ack
0000da20 g     F .text	00000014 atexit
000116f8 g     O .bss	00000004 speed_timer
00002f40 g     F .text	00000090 OSSchedLock
000049f8 g     F .text	00000110 OSFlagCreate
0000fcec g     O .rwdata	00000004 _impure_ptr
00011784 g     O .bss	00000004 alt_argc
0000cb8c g     F .text	00000064 _do_dtors
0000fc62 g     O .rwdata	00000002 OSEventMultiEn
09000000 g       *ABS*	00000000 __alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM
00004b08 g     F .text	00000258 OSFlagDel
000117a4 g     O .bss	00000004 OSEventFreeList
00000020 g       .exceptions	00000000 alt_irq_entry
000116fc g     O .bss	00000008 speed
00004fe4 g     F .text	00000600 OSFlagPend
0000fcae g     O .rwdata	00000002 OSTmrEn
0000fcc4 g     O .rwdata	00000008 alt_fs_list
00011734 g     O .bss	00000004 accel_pedal
00003fb4 g     F .text	00000074 OS_StrCopy
0000c428 g     F .text	0000005c alt_up_rs232_enable_read_interrupt
0000c5a4 g     F .text	00000040 alt_up_rs232_write_data
0000fc78 g     O .rwdata	00000002 OSMemNameSize
0000d6b4 g     F .text	00000020 OSInitHookEnd
00000020 g       *ABS*	00000000 __ram_exceptions_start
0000fca4 g     O .rwdata	00000002 OSTCBPrioTblMax
000008a8 g     F .text	000001c0 engine_task
0000fca0 g     O .rwdata	00000002 OSTaskStatStkChkEn
0000fc74 g     O .rwdata	00000002 OSMemEn
0000fc7e g     O .rwdata	00000002 OSMutexEn
0000fcf0 g       *ABS*	00000000 _edata
0000fc3c g     O .rwdata	00000004 interval_timer_ptr
0001ab24 g       *ABS*	00000000 _end
000117b9 g     O .bss	00000001 OSIntNesting
0000023c g       *ABS*	00000000 __ram_exceptions_end
0000ad64 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00011754 g     O .bss	00000004 key2
00009bb0 g     F .text	000001e0 OSTimeDlyResume
00004e90 g     F .text	00000154 OSFlagNameSet
0000941c g     F .text	000001b8 OSTaskStkChk
0000fc7a g     O .rwdata	00000002 OSMemSize
000117c8 g     O .bss	00000004 OSTCBCur
0000da34 g     F .text	00000034 exit
0000bba4 g     F .text	00000074 alt_up_irda_read_data
0000fc7c g     O .rwdata	00000002 OSMemTblSize
0000be9c g     F .text	000000c8 alt_up_ps2_init
04000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00002da8 g     F .text	00000058 OSInit
000097bc g     F .text	00000128 OSTaskQuery
0000b694 g     F .text	0000007c alt_up_character_lcd_string
000076c4 g     F .text	000000a8 OS_QInit
00004028 g     F .text	00000054 OS_StrLen
0000bd38 g     F .text	0000003c alt_up_irda_open_dev
0000625c g     F .text	0000011c OSMemNameSet
0000fc96 g     O .rwdata	00000002 OSTaskProfileEn
000117e4 g     O .bss	00000004 OSTime
00018eb0 g     O .bss	00000800 OSTaskIdleStk
0000df18 g     F .text	00000038 _exit
0000c7b8 g     F .text	00000134 alt_alarm_start
00004d60 g     F .text	00000130 OSFlagNameGet
00011744 g     O .bss	00000004 sw1
00009d90 g     F .text	00000060 OSTimeGet
0000c094 g     F .text	00000068 alt_up_ps2_wait_for_ack
0000dcd0 g     F .text	00000098 strlen
0000d634 g     F .text	00000020 OSTaskSwHook
0000d054 g     F .text	00000154 open
00017800 g     O .bss	00000b40 OSEventTbl
00019704 g     O .bss	00000510 OSTCBTbl
00008104 g     F .text	00000100 OSSemSet
0000cc80 g     F .text	00000034 alt_icache_flush_all
0000fc38 g     O .rwdata	00000004 green_LED_ptr
0000b760 g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
0000fcdc g     O .rwdata	00000004 alt_priority_mask
000078fc g     F .text	00000250 OSSemDel
000117a8 g     O .bss	00000004 OSFlagFreeList
0000fc5c g     O .rwdata	00000002 OSEventNameSize
000117b8 g     O .bss	00000001 OSStatRdy
000196b0 g     O .bss	00000054 OSTCBPrioTbl
000021e8 g     F .text	000000c0 __env_lock
0000c2c8 g     F .text	0000008c alt_up_ps2_read_fd
0000fca2 g     O .rwdata	00000002 OSTaskSwHookEn
0000bc18 g     F .text	00000090 alt_up_irda_read_fd
0001175c g     O .bss	00000004 hex_array
0001170c g     O .bss	00000008 acceleration
0000fce0 g     O .rwdata	00000008 alt_alarm_list
0000fc6a g     O .rwdata	00000002 OSFlagWidth
0000cb28 g     F .text	00000064 _do_ctors
0000c4e4 g     F .text	00000040 alt_up_rs232_get_used_space_in_read_FIFO
0000c928 g     F .text	000000d0 close
00011790 g     O .bss	00000004 alt_envsem
000117b4 g     O .bss	00000004 OSIdleCtrRun
00003408 g     F .text	00000020 OSVersion
0000fcb4 g     O .rwdata	00000002 OSTmrCfgWheelSize
000020a4 g     F .text	00000084 alt_load
000098e4 g     F .text	00000070 OS_TaskStkClr
0000fc8e g     O .rwdata	00000002 OSTaskCreateEn
000039cc g     F .text	0000006c OS_EventWaitListInit
0000d6d4 g     F .text	00000020 OSTaskIdleHook
000095d4 g     F .text	000001e8 OSTaskSuspend
00011748 g     O .bss	00000004 sw0
0000407c g     F .text	00000060 OS_TaskIdle
0000fcba g     O .rwdata	00000002 OSTmrTblSize
00007564 g     F .text	00000160 OSQQuery



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08408f14 	ori	at,at,572
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <OSCtxSw_SWITCH_PC+0x68>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001c80 	call	1c8 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <OSCtxSw_SWITCH_PC+0x68>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0002e000 	call	2e00 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffc15 	stw	r2,-16(fp)

  return active;
 118:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0ffff17 	ldw	r3,-4(fp)
 130:	e0bffe17 	ldw	r2,-8(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001226 	beq	r2,zero,184 <alt_irq_handler+0x88>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 13c:	e0bffd17 	ldw	r2,-12(fp)
 140:	100690fa 	slli	r3,r2,3
 144:	008000b4 	movhi	r2,2
 148:	1885883a 	add	r2,r3,r2
 14c:	10ea8917 	ldw	r3,-21980(r2)
 150:	e0bffd17 	ldw	r2,-12(fp)
 154:	100890fa 	slli	r4,r2,3
 158:	008000b4 	movhi	r2,2
 15c:	2085883a 	add	r2,r4,r2
 160:	10aa8a17 	ldw	r2,-21976(r2)
 164:	e17ffd17 	ldw	r5,-12(fp)
 168:	1009883a 	mov	r4,r2
 16c:	183ee83a 	callr	r3
#endif
        break;
 170:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
 174:	0005313a 	rdctl	r2,ipending
 178:	e0bffb15 	stw	r2,-20(fp)
  return active;
 17c:	e0bffb17 	ldw	r2,-20(fp)
 180:	00000706 	br	1a0 <alt_irq_handler+0xa4>
      }
      mask <<= 1;
 184:	e0bffe17 	ldw	r2,-8(fp)
 188:	1085883a 	add	r2,r2,r2
 18c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 190:	e0bffd17 	ldw	r2,-12(fp)
 194:	10800044 	addi	r2,r2,1
 198:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
 19c:	003fe306 	br	12c <alt_irq_handler+0x30>

    } while (1);

    active = alt_irq_pending ();
 1a0:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 1a4:	e0bfff17 	ldw	r2,-4(fp)
 1a8:	103fdd1e 	bne	r2,zero,120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1ac:	0002e4c0 	call	2e4c <OSIntExit>
}
 1b0:	0001883a 	nop
 1b4:	e037883a 	mov	sp,fp
 1b8:	dfc00117 	ldw	ra,4(sp)
 1bc:	df000017 	ldw	fp,0(sp)
 1c0:	dec00204 	addi	sp,sp,8
 1c4:	f800283a 	ret

000001c8 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1c8:	defffb04 	addi	sp,sp,-20
 1cc:	dfc00415 	stw	ra,16(sp)
 1d0:	df000315 	stw	fp,12(sp)
 1d4:	df000304 	addi	fp,sp,12
 1d8:	e13ffd15 	stw	r4,-12(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1dc:	000531fa 	rdctl	r2,exception
 1e0:	e0bfff15 	stw	r2,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1e4:	e0bfff17 	ldw	r2,-4(fp)
 1e8:	1004d0ba 	srli	r2,r2,2
 1ec:	108007cc 	andi	r2,r2,31
 1f0:	e0bfff15 	stw	r2,-4(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1f4:	0005333a 	rdctl	r2,badaddr
 1f8:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1fc:	d0a6f317 	ldw	r2,-25652(gp)
 200:	10000726 	beq	r2,zero,220 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 204:	d0a6f317 	ldw	r2,-25652(gp)
 208:	e0ffff17 	ldw	r3,-4(fp)
 20c:	e1bffe17 	ldw	r6,-8(fp)
 210:	e17ffd17 	ldw	r5,-12(fp)
 214:	1809883a 	mov	r4,r3
 218:	103ee83a 	callr	r2
 21c:	00000206 	br	228 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 220:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 224:	0005883a 	mov	r2,zero
}
 228:	e037883a 	mov	sp,fp
 22c:	dfc00117 	ldw	ra,4(sp)
 230:	df000017 	ldw	fp,0(sp)
 234:	dec00204 	addi	sp,sp,8
 238:	f800283a 	ret

Disassembly of section .text:

0000023c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     23c:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     240:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     244:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     248:	d69f0b14 	ori	gp,gp,31788
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     24c:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     250:	1085be14 	ori	r2,r2,5880

    movhi r3, %hi(__bss_end)
     254:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     258:	18eac914 	ori	r3,r3,43812

    beq r2, r3, 1f
     25c:	10c00326 	beq	r2,r3,26c <_start+0x30>

0:
    stw zero, (r2)
     260:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     264:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     268:	10fffd36 	bltu	r2,r3,260 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     26c:	00020a40 	call	20a4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     270:	00021280 	call	2128 <alt_main>

00000274 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     274:	003fff06 	br	274 <alt_after_alt_main>

00000278 <main>:
void IO_task(void* pdata);
void vehicle_task(void* pdata);

/* The main function creates two task and starts multi-tasking */
int main(void)
{
     278:	defff904 	addi	sp,sp,-28
     27c:	dfc00615 	stw	ra,24(sp)
     280:	df000515 	stw	fp,20(sp)
     284:	df000504 	addi	fp,sp,20
	Key_Fob_Sem = OSSemCreate(1);
     288:	01000044 	movi	r4,1
     28c:	00078200 	call	7820 <OSSemCreate>
     290:	d0a6cd15 	stw	r2,-25804(gp)
	Brake_Pedal_Sem = OSSemCreate(1);
     294:	01000044 	movi	r4,1
     298:	00078200 	call	7820 <OSSemCreate>
     29c:	d0a6ce15 	stw	r2,-25800(gp)
	Eng_Start_Stop_Sem = OSSemCreate(1);
     2a0:	01000044 	movi	r4,1
     2a4:	00078200 	call	7820 <OSSemCreate>
     2a8:	d0a6cf15 	stw	r2,-25796(gp)
	Engine_Sem = OSSemCreate(1);
     2ac:	01000044 	movi	r4,1
     2b0:	00078200 	call	7820 <OSSemCreate>
     2b4:	d0a6d015 	stw	r2,-25792(gp)
	Park_Sem = OSSemCreate(1);
     2b8:	01000044 	movi	r4,1
     2bc:	00078200 	call	7820 <OSSemCreate>
     2c0:	d0a6d115 	stw	r2,-25788(gp)
	Accel_Pedal_Sem = OSSemCreate(1);
     2c4:	01000044 	movi	r4,1
     2c8:	00078200 	call	7820 <OSSemCreate>
     2cc:	d0a6d215 	stw	r2,-25784(gp)
	Throttle_Sem = OSSemCreate(1);
     2d0:	01000044 	movi	r4,1
     2d4:	00078200 	call	7820 <OSSemCreate>
     2d8:	d0a6d315 	stw	r2,-25780(gp)
	Speed_Sem = OSSemCreate(1);
     2dc:	01000044 	movi	r4,1
     2e0:	00078200 	call	7820 <OSSemCreate>
     2e4:	d0a6d415 	stw	r2,-25776(gp)
	Drive_Neutral_Sem = OSSemCreate(1);
     2e8:	01000044 	movi	r4,1
     2ec:	00078200 	call	7820 <OSSemCreate>
     2f0:	d0a6d515 	stw	r2,-25772(gp)

	OSTaskCreateExt(IO_task,
     2f4:	d8000415 	stw	zero,16(sp)
     2f8:	d8000315 	stw	zero,12(sp)
     2fc:	00820004 	movi	r2,2048
     300:	d8800215 	stw	r2,8(sp)
     304:	00800074 	movhi	r2,1
     308:	10860004 	addi	r2,r2,6144
     30c:	d8800115 	stw	r2,4(sp)
     310:	00800044 	movi	r2,1
     314:	d8800015 	stw	r2,0(sp)
     318:	01c00044 	movi	r7,1
     31c:	01800074 	movhi	r6,1
     320:	318dff04 	addi	r6,r6,14332
     324:	000b883a 	mov	r5,zero
     328:	01000034 	movhi	r4,0
     32c:	21014504 	addi	r4,r4,1300
     330:	000886c0 	call	886c <OSTaskCreateExt>
                  TASK1_PRIORITY,
                  task1_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);
	OSTaskCreateExt(engine_task,
     334:	d8000415 	stw	zero,16(sp)
     338:	d8000315 	stw	zero,12(sp)
     33c:	00820004 	movi	r2,2048
     340:	d8800215 	stw	r2,8(sp)
     344:	00800074 	movhi	r2,1
     348:	108e0004 	addi	r2,r2,14336
     34c:	d8800115 	stw	r2,4(sp)
     350:	00800084 	movi	r2,2
     354:	d8800015 	stw	r2,0(sp)
     358:	01c00084 	movi	r7,2
     35c:	01800074 	movhi	r6,1
     360:	3195ff04 	addi	r6,r6,22524
     364:	000b883a 	mov	r5,zero
     368:	01000034 	movhi	r4,0
     36c:	21022a04 	addi	r4,r4,2216
     370:	000886c0 	call	886c <OSTaskCreateExt>
                  TASK2_PRIORITY,
                  task2_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);
	OSTaskCreateExt(vehicle_task,
     374:	d8000415 	stw	zero,16(sp)
     378:	d8000315 	stw	zero,12(sp)
     37c:	00820004 	movi	r2,2048
     380:	d8800215 	stw	r2,8(sp)
     384:	00800074 	movhi	r2,1
     388:	10960004 	addi	r2,r2,22528
     38c:	d8800115 	stw	r2,4(sp)
     390:	008000c4 	movi	r2,3
     394:	d8800015 	stw	r2,0(sp)
     398:	01c000c4 	movi	r7,3
     39c:	01800074 	movhi	r6,1
     3a0:	319dff04 	addi	r6,r6,30716
     3a4:	000b883a 	mov	r5,zero
     3a8:	01000034 	movhi	r4,0
     3ac:	21029a04 	addi	r4,r4,2664
     3b0:	000886c0 	call	886c <OSTaskCreateExt>
                  TASK3_PRIORITY,
                  task3_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);
	OSStart();
     3b4:	00030b40 	call	30b4 <OSStart>
	return 0;
     3b8:	0005883a 	mov	r2,zero
}
     3bc:	e037883a 	mov	sp,fp
     3c0:	dfc00117 	ldw	ra,4(sp)
     3c4:	df000017 	ldw	fp,0(sp)
     3c8:	dec00204 	addi	sp,sp,8
     3cc:	f800283a 	ret

000003d0 <digit_separator>:

/**
 * takes in a pointer to an array, and an integer of 3 digits and appends them into a 3 digit array
 *
 */
void digit_separator(int* array, int numbers){
     3d0:	defffb04 	addi	sp,sp,-20
     3d4:	df000415 	stw	fp,16(sp)
     3d8:	df000404 	addi	fp,sp,16
     3dc:	e13ffd15 	stw	r4,-12(fp)
     3e0:	e17ffc15 	stw	r5,-16(fp)
    int dig = numbers;
     3e4:	e0bffc17 	ldw	r2,-16(fp)
     3e8:	e0bfff15 	stw	r2,-4(fp)
    for(int i=2; i >= 0; i--){
     3ec:	00800084 	movi	r2,2
     3f0:	e0bffe15 	stw	r2,-8(fp)
     3f4:	00001106 	br	43c <digit_separator+0x6c>

        array[i] = dig%10;
     3f8:	e0bffe17 	ldw	r2,-8(fp)
     3fc:	100490ba 	slli	r2,r2,2
     400:	e0fffd17 	ldw	r3,-12(fp)
     404:	1887883a 	add	r3,r3,r2
     408:	e0bfff17 	ldw	r2,-4(fp)
     40c:	01000284 	movi	r4,10
     410:	1109283a 	div	r4,r2,r4
     414:	210002a4 	muli	r4,r4,10
     418:	1105c83a 	sub	r2,r2,r4
     41c:	18800015 	stw	r2,0(r3)
        dig/=10;
     420:	e0ffff17 	ldw	r3,-4(fp)
     424:	00800284 	movi	r2,10
     428:	1885283a 	div	r2,r3,r2
     42c:	e0bfff15 	stw	r2,-4(fp)
    for(int i=2; i >= 0; i--){
     430:	e0bffe17 	ldw	r2,-8(fp)
     434:	10bfffc4 	addi	r2,r2,-1
     438:	e0bffe15 	stw	r2,-8(fp)
     43c:	e0bffe17 	ldw	r2,-8(fp)
     440:	103fed0e 	bge	r2,zero,3f8 <digit_separator+0x28>
    }
}
     444:	0001883a 	nop
     448:	0001883a 	nop
     44c:	e037883a 	mov	sp,fp
     450:	df000017 	ldw	fp,0(sp)
     454:	dec00104 	addi	sp,sp,4
     458:	f800283a 	ret

0000045c <hex_display_cnvtr>:

/**
 * converts integer value to the corresponding hex segments value.
 *
 */
int hex_display_cnvtr(int value){
     45c:	defffe04 	addi	sp,sp,-8
     460:	df000115 	stw	fp,4(sp)
     464:	df000104 	addi	fp,sp,4
     468:	e13fff15 	stw	r4,-4(fp)
     46c:	e0bfff17 	ldw	r2,-4(fp)
     470:	108002a8 	cmpgeui	r2,r2,10
     474:	1000221e 	bne	r2,zero,500 <hex_display_cnvtr+0xa4>
     478:	e0bfff17 	ldw	r2,-4(fp)
     47c:	100690ba 	slli	r3,r2,2
     480:	00800034 	movhi	r2,0
     484:	1885883a 	add	r2,r3,r2
     488:	10812417 	ldw	r2,1168(r2)
     48c:	1000683a 	jmp	r2
     490:	00000500 	call	50 <OSCtxSw_SWITCH_PC+0x10>
     494:	000004b8 	rdprs	zero,zero,18
     498:	000004c0 	call	4c <OSCtxSw_SWITCH_PC+0xc>
     49c:	000004c8 	cmpgei	zero,zero,19
     4a0:	000004d0 	cmplti	zero,zero,19
     4a4:	000004d8 	cmpnei	zero,zero,19
     4a8:	000004e0 	cmpeqi	zero,zero,19
     4ac:	000004e8 	cmpgeui	zero,zero,19
     4b0:	000004f0 	cmpltui	zero,zero,19
     4b4:	000004f8 	rdprs	zero,zero,19
    switch(value){
        case 1:
            return 0x06;
     4b8:	00800184 	movi	r2,6
     4bc:	00001106 	br	504 <hex_display_cnvtr+0xa8>
        case 2:
            return 0x5b;
     4c0:	008016c4 	movi	r2,91
     4c4:	00000f06 	br	504 <hex_display_cnvtr+0xa8>
        case 3:
            return 0x4f;
     4c8:	008013c4 	movi	r2,79
     4cc:	00000d06 	br	504 <hex_display_cnvtr+0xa8>

        case 4:
            return 0x66;
     4d0:	00801984 	movi	r2,102
     4d4:	00000b06 	br	504 <hex_display_cnvtr+0xa8>

        case 5:
            return 0x6d;
     4d8:	00801b44 	movi	r2,109
     4dc:	00000906 	br	504 <hex_display_cnvtr+0xa8>
        case 6:
            return 0x7d;
     4e0:	00801f44 	movi	r2,125
     4e4:	00000706 	br	504 <hex_display_cnvtr+0xa8>
        case 7:
            return 0x07;
     4e8:	008001c4 	movi	r2,7
     4ec:	00000506 	br	504 <hex_display_cnvtr+0xa8>
        case 8:
            return 0x7f;
     4f0:	00801fc4 	movi	r2,127
     4f4:	00000306 	br	504 <hex_display_cnvtr+0xa8>
        case 9:
            return 0x6f;
     4f8:	00801bc4 	movi	r2,111
     4fc:	00000106 	br	504 <hex_display_cnvtr+0xa8>
        default:
            // this is for 0
            return 0x3f;
     500:	00800fc4 	movi	r2,63

    }

}
     504:	e037883a 	mov	sp,fp
     508:	df000017 	ldw	fp,0(sp)
     50c:	dec00104 	addi	sp,sp,4
     510:	f800283a 	ret

00000514 <IO_task>:

/* Prints "Hello World" and sleeps for three seconds */
void IO_task(void* pdata)
{
     514:	defffb04 	addi	sp,sp,-20
     518:	dfc00415 	stw	ra,16(sp)
     51c:	df000315 	stw	fp,12(sp)
     520:	dc000215 	stw	r16,8(sp)
     524:	df000304 	addi	fp,sp,12
     528:	e13ffd15 	stw	r4,-12(fp)

	while (1)
	{
		/* do IO tasks */
		//T1_flag = 1;
		sw9 = *switch_ptr & 0x200; //sw9
     52c:	d0a00117 	ldw	r2,-32764(gp)
     530:	10800017 	ldw	r2,0(r2)
     534:	1080800c 	andi	r2,r2,512
     538:	d0a6c515 	stw	r2,-25836(gp)
		sw1 = *switch_ptr & 0x2; //sw1
     53c:	d0a00117 	ldw	r2,-32764(gp)
     540:	10800017 	ldw	r2,0(r2)
     544:	1080008c 	andi	r2,r2,2
     548:	d0a6c615 	stw	r2,-25832(gp)
		sw0 = *switch_ptr & 0x1; // sw0
     54c:	d0a00117 	ldw	r2,-32764(gp)
     550:	10800017 	ldw	r2,0(r2)
     554:	1080004c 	andi	r2,r2,1
     558:	d0a6c715 	stw	r2,-25828(gp)
		key3 = *KEY_ptr & 0x8;
     55c:	d0a00517 	ldw	r2,-32748(gp)
     560:	10800017 	ldw	r2,0(r2)
     564:	1080020c 	andi	r2,r2,8
     568:	d0a6c915 	stw	r2,-25820(gp)
		key2 = *KEY_ptr & 0x4;
     56c:	d0a00517 	ldw	r2,-32748(gp)
     570:	10800017 	ldw	r2,0(r2)
     574:	1080010c 	andi	r2,r2,4
     578:	d0a6ca15 	stw	r2,-25816(gp)
		key0 = *KEY_ptr & 0x1;
     57c:	d0a00517 	ldw	r2,-32748(gp)
     580:	10800017 	ldw	r2,0(r2)
     584:	1080004c 	andi	r2,r2,1
     588:	d0a6cb15 	stw	r2,-25812(gp)
		*red_LED_ptr = sw9 + sw1 + sw0;
     58c:	d0e6c517 	ldw	r3,-25836(gp)
     590:	d0a6c617 	ldw	r2,-25832(gp)
     594:	1889883a 	add	r4,r3,r2
     598:	d0e6c717 	ldw	r3,-25828(gp)
     59c:	d0a00017 	ldw	r2,-32768(gp)
     5a0:	20c7883a 	add	r3,r4,r3
     5a4:	10c00015 	stw	r3,0(r2)
		*green_LED_ptr = key0 + key2 + key3;
     5a8:	d0e6cb17 	ldw	r3,-25812(gp)
     5ac:	d0a6ca17 	ldw	r2,-25816(gp)
     5b0:	1889883a 	add	r4,r3,r2
     5b4:	d0e6c917 	ldw	r3,-25820(gp)
     5b8:	d0a00317 	ldw	r2,-32756(gp)
     5bc:	20c7883a 	add	r3,r4,r3
     5c0:	10c00015 	stw	r3,0(r2)

		OSSemPend(Key_Fob_Sem, 0, &err);
     5c4:	d0a6cd17 	ldw	r2,-25804(gp)
     5c8:	e0fffec4 	addi	r3,fp,-5
     5cc:	180d883a 	mov	r6,r3
     5d0:	000b883a 	mov	r5,zero
     5d4:	1009883a 	mov	r4,r2
     5d8:	0007b4c0 	call	7b4c <OSSemPend>
		//key fob
		if (sw9 == 0x200){
     5dc:	d0a6c517 	ldw	r2,-25836(gp)
     5e0:	10808018 	cmpnei	r2,r2,512
     5e4:	1000031e 	bne	r2,zero,5f4 <IO_task+0xe0>
		   key_fob = ON;
     5e8:	00800044 	movi	r2,1
     5ec:	d0a6be15 	stw	r2,-25864(gp)
     5f0:	00000106 	br	5f8 <IO_task+0xe4>
		}
		else{
			key_fob = OFF;
     5f4:	d026be15 	stw	zero,-25864(gp)
		}
		OSSemPost(Key_Fob_Sem);
     5f8:	d0a6cd17 	ldw	r2,-25804(gp)
     5fc:	1009883a 	mov	r4,r2
     600:	0007ed40 	call	7ed4 <OSSemPost>

		OSSemPend(Drive_Neutral_Sem, 0, &err);
     604:	d0a6d517 	ldw	r2,-25772(gp)
     608:	e0fffec4 	addi	r3,fp,-5
     60c:	180d883a 	mov	r6,r3
     610:	000b883a 	mov	r5,zero
     614:	1009883a 	mov	r4,r2
     618:	0007b4c0 	call	7b4c <OSSemPend>
		//drive or neutral
		if (sw1 == 0x2){
     61c:	d0a6c617 	ldw	r2,-25832(gp)
     620:	10800098 	cmpnei	r2,r2,2
     624:	1000031e 	bne	r2,zero,634 <IO_task+0x120>
			drive_neutral = ON;
     628:	00800044 	movi	r2,1
     62c:	d0a6bf15 	stw	r2,-25860(gp)
     630:	00000106 	br	638 <IO_task+0x124>
		}
		else{
			drive_neutral = OFF;
     634:	d026bf15 	stw	zero,-25860(gp)
		}
		OSSemPost(Drive_Neutral_Sem);
     638:	d0a6d517 	ldw	r2,-25772(gp)
     63c:	1009883a 	mov	r4,r2
     640:	0007ed40 	call	7ed4 <OSSemPost>

		OSSemPend(Park_Sem, 0, &err);
     644:	d0a6d117 	ldw	r2,-25788(gp)
     648:	e0fffec4 	addi	r3,fp,-5
     64c:	180d883a 	mov	r6,r3
     650:	000b883a 	mov	r5,zero
     654:	1009883a 	mov	r4,r2
     658:	0007b4c0 	call	7b4c <OSSemPend>
		OSSemPend(Speed_Sem,0, &err);
     65c:	d0a6d417 	ldw	r2,-25776(gp)
     660:	e0fffec4 	addi	r3,fp,-5
     664:	180d883a 	mov	r6,r3
     668:	000b883a 	mov	r5,zero
     66c:	1009883a 	mov	r4,r2
     670:	0007b4c0 	call	7b4c <OSSemPend>
		// park on/off
		if(sw0 == 0x1 && speed == 0){
     674:	d0a6c717 	ldw	r2,-25828(gp)
     678:	10800058 	cmpnei	r2,r2,1
     67c:	10000b1e 	bne	r2,zero,6ac <IO_task+0x198>
     680:	d0a6b417 	ldw	r2,-25904(gp)
     684:	d0e6b517 	ldw	r3,-25900(gp)
     688:	000d883a 	mov	r6,zero
     68c:	000f883a 	mov	r7,zero
     690:	1009883a 	mov	r4,r2
     694:	180b883a 	mov	r5,r3
     698:	00016900 	call	1690 <__eqdf2>
     69c:	1000031e 	bne	r2,zero,6ac <IO_task+0x198>
			park = ON;
     6a0:	00800044 	movi	r2,1
     6a4:	d0a6c015 	stw	r2,-25856(gp)
     6a8:	00000106 	br	6b0 <IO_task+0x19c>
		}
		else{
			park = OFF;
     6ac:	d026c015 	stw	zero,-25856(gp)
		}
		OSSemPost(Park_Sem);
     6b0:	d0a6d117 	ldw	r2,-25788(gp)
     6b4:	1009883a 	mov	r4,r2
     6b8:	0007ed40 	call	7ed4 <OSSemPost>

		OSSemPend(Brake_Pedal_Sem, 0, &err);
     6bc:	d0a6ce17 	ldw	r2,-25800(gp)
     6c0:	e0fffec4 	addi	r3,fp,-5
     6c4:	180d883a 	mov	r6,r3
     6c8:	000b883a 	mov	r5,zero
     6cc:	1009883a 	mov	r4,r2
     6d0:	0007b4c0 	call	7b4c <OSSemPend>
		// brake pedal
		if(key3 == 0x8){
     6d4:	d0a6c917 	ldw	r2,-25820(gp)
     6d8:	10800218 	cmpnei	r2,r2,8
     6dc:	1000031e 	bne	r2,zero,6ec <IO_task+0x1d8>
		   brake_pedal = ON;
     6e0:	00800044 	movi	r2,1
     6e4:	d0a6c115 	stw	r2,-25852(gp)
     6e8:	00000106 	br	6f0 <IO_task+0x1dc>
		}
		else{
			brake_pedal = OFF;
     6ec:	d026c115 	stw	zero,-25852(gp)
		}
		OSSemPost(Brake_Pedal_Sem);
     6f0:	d0a6ce17 	ldw	r2,-25800(gp)
     6f4:	1009883a 	mov	r4,r2
     6f8:	0007ed40 	call	7ed4 <OSSemPost>

		OSSemPend(Accel_Pedal_Sem, 0, &err);
     6fc:	d0a6d217 	ldw	r2,-25784(gp)
     700:	e0fffec4 	addi	r3,fp,-5
     704:	180d883a 	mov	r6,r3
     708:	000b883a 	mov	r5,zero
     70c:	1009883a 	mov	r4,r2
     710:	0007b4c0 	call	7b4c <OSSemPend>
		// accel_pedal
		if(key2 == 0x4){
     714:	d0a6ca17 	ldw	r2,-25816(gp)
     718:	10800118 	cmpnei	r2,r2,4
     71c:	1000031e 	bne	r2,zero,72c <IO_task+0x218>
		   accel_pedal = ON;
     720:	00800044 	movi	r2,1
     724:	d0a6c215 	stw	r2,-25848(gp)
     728:	00000106 	br	730 <IO_task+0x21c>
		}
		else{
			accel_pedal = OFF;
     72c:	d026c215 	stw	zero,-25848(gp)
		}
		OSSemPost(Accel_Pedal_Sem);
     730:	d0a6d217 	ldw	r2,-25784(gp)
     734:	1009883a 	mov	r4,r2
     738:	0007ed40 	call	7ed4 <OSSemPost>

		OSSemPend(Eng_Start_Stop_Sem, 0, &err);
     73c:	d0a6cf17 	ldw	r2,-25796(gp)
     740:	e0fffec4 	addi	r3,fp,-5
     744:	180d883a 	mov	r6,r3
     748:	000b883a 	mov	r5,zero
     74c:	1009883a 	mov	r4,r2
     750:	0007b4c0 	call	7b4c <OSSemPend>
		// eng_start_stop
		if(key0 == 0x1){
     754:	d0a6cb17 	ldw	r2,-25812(gp)
     758:	10800058 	cmpnei	r2,r2,1
     75c:	1000031e 	bne	r2,zero,76c <IO_task+0x258>
			eng_start_stop = ON;
     760:	00800044 	movi	r2,1
     764:	d0a6c315 	stw	r2,-25844(gp)
     768:	00000106 	br	770 <IO_task+0x25c>
		}
		else{
			eng_start_stop = OFF;
     76c:	d026c315 	stw	zero,-25844(gp)
		}
		OSSemPost(Eng_Start_Stop_Sem);
     770:	d0a6cf17 	ldw	r2,-25796(gp)
     774:	1009883a 	mov	r4,r2
     778:	0007ed40 	call	7ed4 <OSSemPost>


		speed_in_km = speed*3.6;
     77c:	d0a6b417 	ldw	r2,-25904(gp)
     780:	d0e6b517 	ldw	r3,-25900(gp)
     784:	01b00034 	movhi	r6,49152
     788:	01d00374 	movhi	r7,16397
     78c:	39f33304 	addi	r7,r7,-13108
     790:	1009883a 	mov	r4,r2
     794:	180b883a 	mov	r5,r3
     798:	00017f80 	call	17f8 <__muldf3>
     79c:	1009883a 	mov	r4,r2
     7a0:	180b883a 	mov	r5,r3
     7a4:	2005883a 	mov	r2,r4
     7a8:	2807883a 	mov	r3,r5
     7ac:	1009883a 	mov	r4,r2
     7b0:	180b883a 	mov	r5,r3
     7b4:	0001e6c0 	call	1e6c <__fixdfsi>
     7b8:	d0a6ba15 	stw	r2,-25880(gp)
		OSSemPost(Speed_Sem);
     7bc:	d0a6d417 	ldw	r2,-25776(gp)
     7c0:	1009883a 	mov	r4,r2
     7c4:	0007ed40 	call	7ed4 <OSSemPost>
		//check for if speed is over 999 or < 000. ie set a cap
		if (speed_in_km > 999){
     7c8:	d0a6ba17 	ldw	r2,-25880(gp)
     7cc:	1080fa10 	cmplti	r2,r2,1000
     7d0:	1000031e 	bne	r2,zero,7e0 <IO_task+0x2cc>
			speed_in_km = 999;
     7d4:	0080f9c4 	movi	r2,999
     7d8:	d0a6ba15 	stw	r2,-25880(gp)
     7dc:	00000306 	br	7ec <IO_task+0x2d8>
		}
		else if (speed_in_km < 0){
     7e0:	d0a6ba17 	ldw	r2,-25880(gp)
     7e4:	1000010e 	bge	r2,zero,7ec <IO_task+0x2d8>
			speed_in_km = 0;
     7e8:	d026ba15 	stw	zero,-25880(gp)
		}

		OSSemPend(Engine_Sem, 0, &err);
     7ec:	d0a6d017 	ldw	r2,-25792(gp)
     7f0:	e0fffec4 	addi	r3,fp,-5
     7f4:	180d883a 	mov	r6,r3
     7f8:	000b883a 	mov	r5,zero
     7fc:	1009883a 	mov	r4,r2
     800:	0007b4c0 	call	7b4c <OSSemPend>
		if(engine == ON){
     804:	d0a6bc17 	ldw	r2,-25872(gp)
     808:	10800058 	cmpnei	r2,r2,1
     80c:	10001b1e 	bne	r2,zero,87c <IO_task+0x368>
		  digit_separator(hex_array, speed_in_km);
     810:	d0a6cc17 	ldw	r2,-25808(gp)
     814:	d0e6ba17 	ldw	r3,-25880(gp)
     818:	180b883a 	mov	r5,r3
     81c:	1009883a 	mov	r4,r2
     820:	00003d00 	call	3d0 <digit_separator>
			*(hex3_0_ptr) = (hex_display_cnvtr(hex_array[0])<<16) + (hex_display_cnvtr(hex_array[1])<<8)+ hex_display_cnvtr(hex_array[2]);
     824:	d0a6cc17 	ldw	r2,-25808(gp)
     828:	10800017 	ldw	r2,0(r2)
     82c:	1009883a 	mov	r4,r2
     830:	000045c0 	call	45c <hex_display_cnvtr>
     834:	1020943a 	slli	r16,r2,16
     838:	d0a6cc17 	ldw	r2,-25808(gp)
     83c:	10800104 	addi	r2,r2,4
     840:	10800017 	ldw	r2,0(r2)
     844:	1009883a 	mov	r4,r2
     848:	000045c0 	call	45c <hex_display_cnvtr>
     84c:	1004923a 	slli	r2,r2,8
     850:	80a1883a 	add	r16,r16,r2
     854:	d0a6cc17 	ldw	r2,-25808(gp)
     858:	10800204 	addi	r2,r2,8
     85c:	10800017 	ldw	r2,0(r2)
     860:	1009883a 	mov	r4,r2
     864:	000045c0 	call	45c <hex_display_cnvtr>
     868:	1007883a 	mov	r3,r2
     86c:	d0a00217 	ldw	r2,-32760(gp)
     870:	80c7883a 	add	r3,r16,r3
     874:	10c00015 	stw	r3,0(r2)
     878:	00000206 	br	884 <IO_task+0x370>
		}
		else{
			*(hex3_0_ptr) = 0;
     87c:	d0a00217 	ldw	r2,-32760(gp)
     880:	10000015 	stw	zero,0(r2)
		}
		OSSemPost(Engine_Sem);
     884:	d0a6d017 	ldw	r2,-25792(gp)
     888:	1009883a 	mov	r4,r2
     88c:	0007ed40 	call	7ed4 <OSSemPost>

		//printf("Hello from task1\n");
		OSTimeDlyHMSM(0,0,0,125);
     890:	01c01f44 	movi	r7,125
     894:	000d883a 	mov	r6,zero
     898:	000b883a 	mov	r5,zero
     89c:	0009883a 	mov	r4,zero
     8a0:	0009a5c0 	call	9a5c <OSTimeDlyHMSM>
		sw9 = *switch_ptr & 0x200; //sw9
     8a4:	003f2106 	br	52c <IO_task+0x18>

000008a8 <engine_task>:
	  }
}
/* Prints "Hello World" and sleeps for three seconds */
void engine_task(void* pdata)
{
     8a8:	defffc04 	addi	sp,sp,-16
     8ac:	dfc00315 	stw	ra,12(sp)
     8b0:	df000215 	stw	fp,8(sp)
     8b4:	df000204 	addi	fp,sp,8
     8b8:	e13ffe15 	stw	r4,-8(fp)
	INT8U err;
	while (1)
	{
	// do engine tasks
	// remember to put in the 1 second counter
		OSSemPend(Engine_Sem, 0, &err);
     8bc:	d0a6d017 	ldw	r2,-25792(gp)
     8c0:	e0ffffc4 	addi	r3,fp,-1
     8c4:	180d883a 	mov	r6,r3
     8c8:	000b883a 	mov	r5,zero
     8cc:	1009883a 	mov	r4,r2
     8d0:	0007b4c0 	call	7b4c <OSSemPend>
		OSSemPend(Accel_Pedal_Sem, 0, &err);
     8d4:	d0a6d217 	ldw	r2,-25784(gp)
     8d8:	e0ffffc4 	addi	r3,fp,-1
     8dc:	180d883a 	mov	r6,r3
     8e0:	000b883a 	mov	r5,zero
     8e4:	1009883a 	mov	r4,r2
     8e8:	0007b4c0 	call	7b4c <OSSemPend>
		OSSemPend(Key_Fob_Sem, 0, &err);
     8ec:	d0a6cd17 	ldw	r2,-25804(gp)
     8f0:	e0ffffc4 	addi	r3,fp,-1
     8f4:	180d883a 	mov	r6,r3
     8f8:	000b883a 	mov	r5,zero
     8fc:	1009883a 	mov	r4,r2
     900:	0007b4c0 	call	7b4c <OSSemPend>
		OSSemPend(Eng_Start_Stop_Sem, 0, &err);
     904:	d0a6cf17 	ldw	r2,-25796(gp)
     908:	e0ffffc4 	addi	r3,fp,-1
     90c:	180d883a 	mov	r6,r3
     910:	000b883a 	mov	r5,zero
     914:	1009883a 	mov	r4,r2
     918:	0007b4c0 	call	7b4c <OSSemPend>
		OSSemPend(Throttle_Sem, 0, &err);
     91c:	d0a6d317 	ldw	r2,-25780(gp)
     920:	e0ffffc4 	addi	r3,fp,-1
     924:	180d883a 	mov	r6,r3
     928:	000b883a 	mov	r5,zero
     92c:	1009883a 	mov	r4,r2
     930:	0007b4c0 	call	7b4c <OSSemPend>
		OSSemPend(Park_Sem, 0, &err);
     934:	d0a6d117 	ldw	r2,-25788(gp)
     938:	e0ffffc4 	addi	r3,fp,-1
     93c:	180d883a 	mov	r6,r3
     940:	000b883a 	mov	r5,zero
     944:	1009883a 	mov	r4,r2
     948:	0007b4c0 	call	7b4c <OSSemPend>
		OSSemPend(Brake_Pedal_Sem, 0, &err);
     94c:	d0a6ce17 	ldw	r2,-25800(gp)
     950:	e0ffffc4 	addi	r3,fp,-1
     954:	180d883a 	mov	r6,r3
     958:	000b883a 	mov	r5,zero
     95c:	1009883a 	mov	r4,r2
     960:	0007b4c0 	call	7b4c <OSSemPend>
		if((key_fob == ON) && (brake_pedal == ON) && (eng_start_stop == ON)){
     964:	d0a6be17 	ldw	r2,-25864(gp)
     968:	10800058 	cmpnei	r2,r2,1
     96c:	10000f1e 	bne	r2,zero,9ac <engine_task+0x104>
     970:	d0a6c117 	ldw	r2,-25852(gp)
     974:	10800058 	cmpnei	r2,r2,1
     978:	10000c1e 	bne	r2,zero,9ac <engine_task+0x104>
     97c:	d0a6c317 	ldw	r2,-25844(gp)
     980:	10800058 	cmpnei	r2,r2,1
     984:	1000091e 	bne	r2,zero,9ac <engine_task+0x104>
		//OSTimeDlyHMSM(0,0,1,0);
		// check that its been held for longer than 1 second. still in the works
			eng_timer ++;
     988:	d0a6bd17 	ldw	r2,-25868(gp)
     98c:	10800044 	addi	r2,r2,1
     990:	d0a6bd15 	stw	r2,-25868(gp)
			if(eng_timer > 8){
     994:	d0a6bd17 	ldw	r2,-25868(gp)
     998:	10800250 	cmplti	r2,r2,9
     99c:	1000031e 	bne	r2,zero,9ac <engine_task+0x104>
				engine = ON;
     9a0:	00800044 	movi	r2,1
     9a4:	d0a6bc15 	stw	r2,-25872(gp)
				eng_timer = 0;
     9a8:	d026bd15 	stw	zero,-25868(gp)
			}
		}

	// turn off the engine
		if ((park == ON) && (eng_start_stop == ON) && (engine == ON)){
     9ac:	d0a6c017 	ldw	r2,-25856(gp)
     9b0:	10800058 	cmpnei	r2,r2,1
     9b4:	1000071e 	bne	r2,zero,9d4 <engine_task+0x12c>
     9b8:	d0a6c317 	ldw	r2,-25844(gp)
     9bc:	10800058 	cmpnei	r2,r2,1
     9c0:	1000041e 	bne	r2,zero,9d4 <engine_task+0x12c>
     9c4:	d0a6bc17 	ldw	r2,-25872(gp)
     9c8:	10800058 	cmpnei	r2,r2,1
     9cc:	1000011e 	bne	r2,zero,9d4 <engine_task+0x12c>
			engine = OFF;
     9d0:	d026bc15 	stw	zero,-25872(gp)
		}

		if((accel_pedal == ON) && (engine == ON) ){
     9d4:	d0a6c217 	ldw	r2,-25848(gp)
     9d8:	10800058 	cmpnei	r2,r2,1
     9dc:	1000061e 	bne	r2,zero,9f8 <engine_task+0x150>
     9e0:	d0a6bc17 	ldw	r2,-25872(gp)
     9e4:	10800058 	cmpnei	r2,r2,1
     9e8:	1000031e 	bne	r2,zero,9f8 <engine_task+0x150>
			throttle = 6;
     9ec:	00800184 	movi	r2,6
     9f0:	d0a6bb15 	stw	r2,-25876(gp)
     9f4:	00000106 	br	9fc <engine_task+0x154>
		}
		else{
			throttle = 0;
     9f8:	d026bb15 	stw	zero,-25876(gp)
		}

		OSSemPost(Engine_Sem);
     9fc:	d0a6d017 	ldw	r2,-25792(gp)
     a00:	1009883a 	mov	r4,r2
     a04:	0007ed40 	call	7ed4 <OSSemPost>
		OSSemPost(Accel_Pedal_Sem);
     a08:	d0a6d217 	ldw	r2,-25784(gp)
     a0c:	1009883a 	mov	r4,r2
     a10:	0007ed40 	call	7ed4 <OSSemPost>
		OSSemPost(Key_Fob_Sem);
     a14:	d0a6cd17 	ldw	r2,-25804(gp)
     a18:	1009883a 	mov	r4,r2
     a1c:	0007ed40 	call	7ed4 <OSSemPost>
		OSSemPost(Eng_Start_Stop_Sem);
     a20:	d0a6cf17 	ldw	r2,-25796(gp)
     a24:	1009883a 	mov	r4,r2
     a28:	0007ed40 	call	7ed4 <OSSemPost>
		OSSemPost(Throttle_Sem);
     a2c:	d0a6d317 	ldw	r2,-25780(gp)
     a30:	1009883a 	mov	r4,r2
     a34:	0007ed40 	call	7ed4 <OSSemPost>
		OSSemPost(Park_Sem);
     a38:	d0a6d117 	ldw	r2,-25788(gp)
     a3c:	1009883a 	mov	r4,r2
     a40:	0007ed40 	call	7ed4 <OSSemPost>
		OSSemPost(Brake_Pedal_Sem);
     a44:	d0a6ce17 	ldw	r2,-25800(gp)
     a48:	1009883a 	mov	r4,r2
     a4c:	0007ed40 	call	7ed4 <OSSemPost>


		//printf("Hello from task2\n");
		OSTimeDlyHMSM(0,0,0,125);
     a50:	01c01f44 	movi	r7,125
     a54:	000d883a 	mov	r6,zero
     a58:	000b883a 	mov	r5,zero
     a5c:	0009883a 	mov	r4,zero
     a60:	0009a5c0 	call	9a5c <OSTimeDlyHMSM>
		OSSemPend(Engine_Sem, 0, &err);
     a64:	003f9506 	br	8bc <engine_task+0x14>

00000a68 <vehicle_task>:
	}
}

void vehicle_task(void *pdata)
{
     a68:	defffc04 	addi	sp,sp,-16
     a6c:	dfc00315 	stw	ra,12(sp)
     a70:	df000215 	stw	fp,8(sp)
     a74:	df000204 	addi	fp,sp,8
     a78:	e13ffe15 	stw	r4,-8(fp)
	INT8U err;
	while(1)
	{
		OSSemPend(Engine_Sem, 0, &err);
     a7c:	d0a6d017 	ldw	r2,-25792(gp)
     a80:	e0ffffc4 	addi	r3,fp,-1
     a84:	180d883a 	mov	r6,r3
     a88:	000b883a 	mov	r5,zero
     a8c:	1009883a 	mov	r4,r2
     a90:	0007b4c0 	call	7b4c <OSSemPend>
		OSSemPend(Brake_Pedal_Sem, 0, &err);
     a94:	d0a6ce17 	ldw	r2,-25800(gp)
     a98:	e0ffffc4 	addi	r3,fp,-1
     a9c:	180d883a 	mov	r6,r3
     aa0:	000b883a 	mov	r5,zero
     aa4:	1009883a 	mov	r4,r2
     aa8:	0007b4c0 	call	7b4c <OSSemPend>
		OSSemPend(Speed_Sem,0, &err);
     aac:	d0a6d417 	ldw	r2,-25776(gp)
     ab0:	e0ffffc4 	addi	r3,fp,-1
     ab4:	180d883a 	mov	r6,r3
     ab8:	000b883a 	mov	r5,zero
     abc:	1009883a 	mov	r4,r2
     ac0:	0007b4c0 	call	7b4c <OSSemPend>
		OSSemPend(Accel_Pedal_Sem, 0, &err);
     ac4:	d0a6d217 	ldw	r2,-25784(gp)
     ac8:	e0ffffc4 	addi	r3,fp,-1
     acc:	180d883a 	mov	r6,r3
     ad0:	000b883a 	mov	r5,zero
     ad4:	1009883a 	mov	r4,r2
     ad8:	0007b4c0 	call	7b4c <OSSemPend>
		OSSemPend(Drive_Neutral_Sem, 0, &err);
     adc:	d0a6d517 	ldw	r2,-25772(gp)
     ae0:	e0ffffc4 	addi	r3,fp,-1
     ae4:	180d883a 	mov	r6,r3
     ae8:	000b883a 	mov	r5,zero
     aec:	1009883a 	mov	r4,r2
     af0:	0007b4c0 	call	7b4c <OSSemPend>

		if (engine == ON){
     af4:	d0a6bc17 	ldw	r2,-25872(gp)
     af8:	10800058 	cmpnei	r2,r2,1
     afc:	10004a1e 	bne	r2,zero,c28 <vehicle_task+0x1c0>

			//do vehicle task
			if((brake_pedal == ON)){
     b00:	d0a6c117 	ldw	r2,-25852(gp)
     b04:	10800058 	cmpnei	r2,r2,1
     b08:	10000e1e 	bne	r2,zero,b44 <vehicle_task+0xdc>
				acceleration = -6;
     b0c:	d026b815 	stw	zero,-25888(gp)
     b10:	00b00634 	movhi	r2,49176
     b14:	d0a6b915 	stw	r2,-25884(gp)
				if(speed <= 0){
     b18:	d0a6b417 	ldw	r2,-25904(gp)
     b1c:	d0e6b517 	ldw	r3,-25900(gp)
     b20:	000d883a 	mov	r6,zero
     b24:	000f883a 	mov	r7,zero
     b28:	1009883a 	mov	r4,r2
     b2c:	180b883a 	mov	r5,r3
     b30:	00017100 	call	1710 <__ledf2>
     b34:	00801716 	blt	zero,r2,b94 <vehicle_task+0x12c>
					acceleration = 0;
     b38:	d026b815 	stw	zero,-25888(gp)
     b3c:	d026b915 	stw	zero,-25884(gp)
     b40:	00001406 	br	b94 <vehicle_task+0x12c>
				}

			}
			else if((accel_pedal == ON) && (brake_pedal == OFF)){
     b44:	d0a6c217 	ldw	r2,-25848(gp)
     b48:	10800058 	cmpnei	r2,r2,1
     b4c:	10000f1e 	bne	r2,zero,b8c <vehicle_task+0x124>
     b50:	d0a6c117 	ldw	r2,-25852(gp)
     b54:	10000d1e 	bne	r2,zero,b8c <vehicle_task+0x124>
				acceleration = 0.5*throttle;
     b58:	d0a6bb17 	ldw	r2,-25876(gp)
     b5c:	1009883a 	mov	r4,r2
     b60:	0000c7c0 	call	c7c <__floatsisf>
     b64:	1007883a 	mov	r3,r2
     b68:	008fc034 	movhi	r2,16128
     b6c:	1885ff32 	custom	252,r2,r3,r2
     b70:	1009883a 	mov	r4,r2
     b74:	0001eec0 	call	1eec <__extendsfdf2>
     b78:	1009883a 	mov	r4,r2
     b7c:	180b883a 	mov	r5,r3
     b80:	d126b815 	stw	r4,-25888(gp)
     b84:	d166b915 	stw	r5,-25884(gp)
     b88:	00000206 	br	b94 <vehicle_task+0x12c>
			}
			else{
				acceleration = 0;
     b8c:	d026b815 	stw	zero,-25888(gp)
     b90:	d026b915 	stw	zero,-25884(gp)
			}
			// calculate speed
			if (drive_neutral == ON){// && (engine == ON)){
     b94:	d0a6bf17 	ldw	r2,-25860(gp)
     b98:	10800058 	cmpnei	r2,r2,1
     b9c:	1000181e 	bne	r2,zero,c00 <vehicle_task+0x198>

			   speed = speed + acceleration *0.125; // 0.0015 because it updates every 1.5 ms
     ba0:	d0a6b817 	ldw	r2,-25888(gp)
     ba4:	d0e6b917 	ldw	r3,-25884(gp)
     ba8:	000d883a 	mov	r6,zero
     bac:	01cff034 	movhi	r7,16320
     bb0:	1009883a 	mov	r4,r2
     bb4:	180b883a 	mov	r5,r3
     bb8:	00017f80 	call	17f8 <__muldf3>
     bbc:	1009883a 	mov	r4,r2
     bc0:	180b883a 	mov	r5,r3
     bc4:	2011883a 	mov	r8,r4
     bc8:	2813883a 	mov	r9,r5
     bcc:	d0a6b417 	ldw	r2,-25904(gp)
     bd0:	d0e6b517 	ldw	r3,-25900(gp)
     bd4:	100d883a 	mov	r6,r2
     bd8:	180f883a 	mov	r7,r3
     bdc:	4009883a 	mov	r4,r8
     be0:	480b883a 	mov	r5,r9
     be4:	0000da00 	call	da0 <__adddf3>
     be8:	1009883a 	mov	r4,r2
     bec:	180b883a 	mov	r5,r3
     bf0:	2005883a 	mov	r2,r4
     bf4:	2807883a 	mov	r3,r5
     bf8:	d0a6b415 	stw	r2,-25904(gp)
     bfc:	d0e6b515 	stw	r3,-25900(gp)
			   //printf("%f\n", speed);
			   //calculate = OFF;
			   //speed_timer = 0;
			}

			if (speed < 0){
     c00:	d0a6b417 	ldw	r2,-25904(gp)
     c04:	d0e6b517 	ldw	r3,-25900(gp)
     c08:	000d883a 	mov	r6,zero
     c0c:	000f883a 	mov	r7,zero
     c10:	1009883a 	mov	r4,r2
     c14:	180b883a 	mov	r5,r3
     c18:	00017100 	call	1710 <__ledf2>
     c1c:	1000020e 	bge	r2,zero,c28 <vehicle_task+0x1c0>
				speed = 0;
     c20:	d026b415 	stw	zero,-25904(gp)
     c24:	d026b515 	stw	zero,-25900(gp)
			}
		}

		OSSemPost(Engine_Sem);
     c28:	d0a6d017 	ldw	r2,-25792(gp)
     c2c:	1009883a 	mov	r4,r2
     c30:	0007ed40 	call	7ed4 <OSSemPost>
		OSSemPost(Brake_Pedal_Sem);
     c34:	d0a6ce17 	ldw	r2,-25800(gp)
     c38:	1009883a 	mov	r4,r2
     c3c:	0007ed40 	call	7ed4 <OSSemPost>
		OSSemPost(Speed_Sem);
     c40:	d0a6d417 	ldw	r2,-25776(gp)
     c44:	1009883a 	mov	r4,r2
     c48:	0007ed40 	call	7ed4 <OSSemPost>
		OSSemPost(Accel_Pedal_Sem);
     c4c:	d0a6d217 	ldw	r2,-25784(gp)
     c50:	1009883a 	mov	r4,r2
     c54:	0007ed40 	call	7ed4 <OSSemPost>
		OSSemPost(Drive_Neutral_Sem);
     c58:	d0a6d517 	ldw	r2,-25772(gp)
     c5c:	1009883a 	mov	r4,r2
     c60:	0007ed40 	call	7ed4 <OSSemPost>
	    //printf("Hello from task3\n");
		OSTimeDlyHMSM(0,0,0,125);
     c64:	01c01f44 	movi	r7,125
     c68:	000d883a 	mov	r6,zero
     c6c:	000b883a 	mov	r5,zero
     c70:	0009883a 	mov	r4,zero
     c74:	0009a5c0 	call	9a5c <OSTimeDlyHMSM>
		OSSemPend(Engine_Sem, 0, &err);
     c78:	003f8006 	br	a7c <vehicle_task+0x14>

00000c7c <__floatsisf>:
     c7c:	defffd04 	addi	sp,sp,-12
     c80:	dfc00215 	stw	ra,8(sp)
     c84:	dc400115 	stw	r17,4(sp)
     c88:	dc000015 	stw	r16,0(sp)
     c8c:	20001226 	beq	r4,zero,cd8 <__floatsisf+0x5c>
     c90:	2022d7fa 	srli	r17,r4,31
     c94:	2021883a 	mov	r16,r4
     c98:	20003816 	blt	r4,zero,d7c <__floatsisf+0x100>
     c9c:	8009883a 	mov	r4,r16
     ca0:	0001fe80 	call	1fe8 <__clzsi2>
     ca4:	1009883a 	mov	r4,r2
     ca8:	00802784 	movi	r2,158
     cac:	1105c83a 	sub	r2,r2,r4
     cb0:	10c025c8 	cmpgei	r3,r2,151
     cb4:	1800151e 	bne	r3,zero,d0c <__floatsisf+0x90>
     cb8:	20c00248 	cmpgei	r3,r4,9
     cbc:	18003126 	beq	r3,zero,d84 <__floatsisf+0x108>
     cc0:	213ffe04 	addi	r4,r4,-8
     cc4:	8120983a 	sll	r16,r16,r4
     cc8:	00c02034 	movhi	r3,128
     ccc:	18ffffc4 	addi	r3,r3,-1
     cd0:	80e0703a 	and	r16,r16,r3
     cd4:	00000306 	br	ce4 <__floatsisf+0x68>
     cd8:	0023883a 	mov	r17,zero
     cdc:	0005883a 	mov	r2,zero
     ce0:	0021883a 	mov	r16,zero
     ce4:	10803fcc 	andi	r2,r2,255
     ce8:	100495fa 	slli	r2,r2,23
     cec:	882297fa 	slli	r17,r17,31
     cf0:	1404b03a 	or	r2,r2,r16
     cf4:	1444b03a 	or	r2,r2,r17
     cf8:	dfc00217 	ldw	ra,8(sp)
     cfc:	dc400117 	ldw	r17,4(sp)
     d00:	dc000017 	ldw	r16,0(sp)
     d04:	dec00304 	addi	sp,sp,12
     d08:	f800283a 	ret
     d0c:	10c02690 	cmplti	r3,r2,154
     d10:	1800071e 	bne	r3,zero,d30 <__floatsisf+0xb4>
     d14:	20c006c4 	addi	r3,r4,27
     d18:	01400144 	movi	r5,5
     d1c:	80c6983a 	sll	r3,r16,r3
     d20:	290bc83a 	sub	r5,r5,r4
     d24:	814ad83a 	srl	r5,r16,r5
     d28:	1806c03a 	cmpne	r3,r3,zero
     d2c:	28e0b03a 	or	r16,r5,r3
     d30:	20c00188 	cmpgei	r3,r4,6
     d34:	1800171e 	bne	r3,zero,d94 <__floatsisf+0x118>
     d38:	00ff0034 	movhi	r3,64512
     d3c:	18ffffc4 	addi	r3,r3,-1
     d40:	818001cc 	andi	r6,r16,7
     d44:	80ca703a 	and	r5,r16,r3
     d48:	30000926 	beq	r6,zero,d70 <__floatsisf+0xf4>
     d4c:	818003cc 	andi	r6,r16,15
     d50:	31800120 	cmpeqi	r6,r6,4
     d54:	3000061e 	bne	r6,zero,d70 <__floatsisf+0xf4>
     d58:	29400104 	addi	r5,r5,4
     d5c:	2981002c 	andhi	r6,r5,1024
     d60:	30000326 	beq	r6,zero,d70 <__floatsisf+0xf4>
     d64:	28ca703a 	and	r5,r5,r3
     d68:	00c027c4 	movi	r3,159
     d6c:	1905c83a 	sub	r2,r3,r4
     d70:	282091ba 	slli	r16,r5,6
     d74:	8020d27a 	srli	r16,r16,9
     d78:	003fda06 	br	ce4 <__floatsisf+0x68>
     d7c:	0121c83a 	sub	r16,zero,r4
     d80:	003fc606 	br	c9c <__floatsisf+0x20>
     d84:	01002034 	movhi	r4,128
     d88:	213fffc4 	addi	r4,r4,-1
     d8c:	8120703a 	and	r16,r16,r4
     d90:	003fd406 	br	ce4 <__floatsisf+0x68>
     d94:	20fffec4 	addi	r3,r4,-5
     d98:	80e0983a 	sll	r16,r16,r3
     d9c:	003fe606 	br	d38 <__floatsisf+0xbc>

00000da0 <__adddf3>:
     da0:	02000434 	movhi	r8,16
     da4:	423fffc4 	addi	r8,r8,-1
     da8:	2806d53a 	srli	r3,r5,20
     dac:	3804d53a 	srli	r2,r7,20
     db0:	2a14703a 	and	r10,r5,r8
     db4:	3a12703a 	and	r9,r7,r8
     db8:	280ad7fa 	srli	r5,r5,31
     dbc:	501490fa 	slli	r10,r10,3
     dc0:	2018d77a 	srli	r12,r4,29
     dc4:	481290fa 	slli	r9,r9,3
     dc8:	3016d77a 	srli	r11,r6,29
     dcc:	380ed7fa 	srli	r7,r7,31
     dd0:	defffb04 	addi	sp,sp,-20
     dd4:	dc800215 	stw	r18,8(sp)
     dd8:	dc000015 	stw	r16,0(sp)
     ddc:	1c81ffcc 	andi	r18,r3,2047
     de0:	1081ffcc 	andi	r2,r2,2047
     de4:	dfc00415 	stw	ra,16(sp)
     de8:	dcc00315 	stw	r19,12(sp)
     dec:	dc400115 	stw	r17,4(sp)
     df0:	201c90fa 	slli	r14,r4,3
     df4:	301a90fa 	slli	r13,r6,3
     df8:	2821883a 	mov	r16,r5
     dfc:	6294b03a 	or	r10,r12,r10
     e00:	5a52b03a 	or	r9,r11,r9
     e04:	9087c83a 	sub	r3,r18,r2
     e08:	29c06126 	beq	r5,r7,f90 <__adddf3+0x1f0>
     e0c:	00c0550e 	bge	zero,r3,f64 <__adddf3+0x1c4>
     e10:	10007326 	beq	r2,zero,fe0 <__adddf3+0x240>
     e14:	9081ffd8 	cmpnei	r2,r18,2047
     e18:	1000bd26 	beq	r2,zero,1110 <__adddf3+0x370>
     e1c:	4a402034 	orhi	r9,r9,128
     e20:	18800e48 	cmpgei	r2,r3,57
     e24:	1000ef1e 	bne	r2,zero,11e4 <__adddf3+0x444>
     e28:	18800808 	cmpgei	r2,r3,32
     e2c:	1001321e 	bne	r2,zero,12f8 <__adddf3+0x558>
     e30:	00800804 	movi	r2,32
     e34:	10c5c83a 	sub	r2,r2,r3
     e38:	68c8d83a 	srl	r4,r13,r3
     e3c:	48a2983a 	sll	r17,r9,r2
     e40:	689a983a 	sll	r13,r13,r2
     e44:	48c6d83a 	srl	r3,r9,r3
     e48:	8922b03a 	or	r17,r17,r4
     e4c:	681ac03a 	cmpne	r13,r13,zero
     e50:	8b62b03a 	or	r17,r17,r13
     e54:	50d5c83a 	sub	r10,r10,r3
     e58:	7463c83a 	sub	r17,r14,r17
     e5c:	7451803a 	cmpltu	r8,r14,r17
     e60:	5211c83a 	sub	r8,r10,r8
     e64:	4080202c 	andhi	r2,r8,128
     e68:	10008d26 	beq	r2,zero,10a0 <__adddf3+0x300>
     e6c:	02402034 	movhi	r9,128
     e70:	4a7fffc4 	addi	r9,r9,-1
     e74:	4266703a 	and	r19,r8,r9
     e78:	9800b326 	beq	r19,zero,1148 <__adddf3+0x3a8>
     e7c:	9809883a 	mov	r4,r19
     e80:	0001fe80 	call	1fe8 <__clzsi2>
     e84:	10fffe04 	addi	r3,r2,-8
     e88:	02000804 	movi	r8,32
     e8c:	40d1c83a 	sub	r8,r8,r3
     e90:	8a10d83a 	srl	r8,r17,r8
     e94:	98d2983a 	sll	r9,r19,r3
     e98:	88e2983a 	sll	r17,r17,r3
     e9c:	4250b03a 	or	r8,r8,r9
     ea0:	1c80b216 	blt	r3,r18,116c <__adddf3+0x3cc>
     ea4:	1c87c83a 	sub	r3,r3,r18
     ea8:	19000044 	addi	r4,r3,1
     eac:	20800808 	cmpgei	r2,r4,32
     eb0:	10006f1e 	bne	r2,zero,1070 <__adddf3+0x2d0>
     eb4:	00800804 	movi	r2,32
     eb8:	1105c83a 	sub	r2,r2,r4
     ebc:	8906d83a 	srl	r3,r17,r4
     ec0:	88a2983a 	sll	r17,r17,r2
     ec4:	4084983a 	sll	r2,r8,r2
     ec8:	4110d83a 	srl	r8,r8,r4
     ecc:	8822c03a 	cmpne	r17,r17,zero
     ed0:	10c4b03a 	or	r2,r2,r3
     ed4:	1462b03a 	or	r17,r2,r17
     ed8:	0025883a 	mov	r18,zero
     edc:	888001cc 	andi	r2,r17,7
     ee0:	10000726 	beq	r2,zero,f00 <__adddf3+0x160>
     ee4:	888003cc 	andi	r2,r17,15
     ee8:	10800120 	cmpeqi	r2,r2,4
     eec:	1000041e 	bne	r2,zero,f00 <__adddf3+0x160>
     ef0:	88c00104 	addi	r3,r17,4
     ef4:	1c63803a 	cmpltu	r17,r3,r17
     ef8:	4451883a 	add	r8,r8,r17
     efc:	1823883a 	mov	r17,r3
     f00:	4080202c 	andhi	r2,r8,128
     f04:	10006826 	beq	r2,zero,10a8 <__adddf3+0x308>
     f08:	90c00044 	addi	r3,r18,1
     f0c:	1881ffe0 	cmpeqi	r2,r3,2047
     f10:	18c1ffcc 	andi	r3,r3,2047
     f14:	10007a1e 	bne	r2,zero,1100 <__adddf3+0x360>
     f18:	00bfe034 	movhi	r2,65408
     f1c:	10bfffc4 	addi	r2,r2,-1
     f20:	4090703a 	and	r8,r8,r2
     f24:	4004977a 	slli	r2,r8,29
     f28:	4010927a 	slli	r8,r8,9
     f2c:	8822d0fa 	srli	r17,r17,3
     f30:	4010d33a 	srli	r8,r8,12
     f34:	1444b03a 	or	r2,r2,r17
     f38:	1806953a 	slli	r3,r3,20
     f3c:	802097fa 	slli	r16,r16,31
     f40:	1a06b03a 	or	r3,r3,r8
     f44:	1c06b03a 	or	r3,r3,r16
     f48:	dfc00417 	ldw	ra,16(sp)
     f4c:	dcc00317 	ldw	r19,12(sp)
     f50:	dc800217 	ldw	r18,8(sp)
     f54:	dc400117 	ldw	r17,4(sp)
     f58:	dc000017 	ldw	r16,0(sp)
     f5c:	dec00504 	addi	sp,sp,20
     f60:	f800283a 	ret
     f64:	18002626 	beq	r3,zero,1000 <__adddf3+0x260>
     f68:	1487c83a 	sub	r3,r2,r18
     f6c:	9000ba1e 	bne	r18,zero,1258 <__adddf3+0x4b8>
     f70:	5388b03a 	or	r4,r10,r14
     f74:	20011826 	beq	r4,zero,13d8 <__adddf3+0x638>
     f78:	193fffc4 	addi	r4,r3,-1
     f7c:	20015726 	beq	r4,zero,14dc <__adddf3+0x73c>
     f80:	18c1ffd8 	cmpnei	r3,r3,2047
     f84:	18013026 	beq	r3,zero,1448 <__adddf3+0x6a8>
     f88:	2007883a 	mov	r3,r4
     f8c:	0000b506 	br	1264 <__adddf3+0x4c4>
     f90:	00c07b0e 	bge	zero,r3,1180 <__adddf3+0x3e0>
     f94:	10002e26 	beq	r2,zero,1050 <__adddf3+0x2b0>
     f98:	9081ffd8 	cmpnei	r2,r18,2047
     f9c:	10005c26 	beq	r2,zero,1110 <__adddf3+0x370>
     fa0:	4a402034 	orhi	r9,r9,128
     fa4:	18800e48 	cmpgei	r2,r3,57
     fa8:	10004b1e 	bne	r2,zero,10d8 <__adddf3+0x338>
     fac:	18800808 	cmpgei	r2,r3,32
     fb0:	1000ec26 	beq	r2,zero,1364 <__adddf3+0x5c4>
     fb4:	1c7ff804 	addi	r17,r3,-32
     fb8:	19000820 	cmpeqi	r4,r3,32
     fbc:	4c44d83a 	srl	r2,r9,r17
     fc0:	2000041e 	bne	r4,zero,fd4 <__adddf3+0x234>
     fc4:	01001004 	movi	r4,64
     fc8:	20c7c83a 	sub	r3,r4,r3
     fcc:	48d2983a 	sll	r9,r9,r3
     fd0:	6a5ab03a 	or	r13,r13,r9
     fd4:	6822c03a 	cmpne	r17,r13,zero
     fd8:	88a2b03a 	or	r17,r17,r2
     fdc:	00004006 	br	10e0 <__adddf3+0x340>
     fe0:	4b44b03a 	or	r2,r9,r13
     fe4:	10008226 	beq	r2,zero,11f0 <__adddf3+0x450>
     fe8:	18bfffc4 	addi	r2,r3,-1
     fec:	10011026 	beq	r2,zero,1430 <__adddf3+0x690>
     ff0:	18c1ffd8 	cmpnei	r3,r3,2047
     ff4:	18004626 	beq	r3,zero,1110 <__adddf3+0x370>
     ff8:	1007883a 	mov	r3,r2
     ffc:	003f8806 	br	e20 <__adddf3+0x80>
    1000:	90800044 	addi	r2,r18,1
    1004:	1081ff8c 	andi	r2,r2,2046
    1008:	1000a51e 	bne	r2,zero,12a0 <__adddf3+0x500>
    100c:	538ab03a 	or	r5,r10,r14
    1010:	4b44b03a 	or	r2,r9,r13
    1014:	9000f81e 	bne	r18,zero,13f8 <__adddf3+0x658>
    1018:	28013726 	beq	r5,zero,14f8 <__adddf3+0x758>
    101c:	10011226 	beq	r2,zero,1468 <__adddf3+0x6c8>
    1020:	7363c83a 	sub	r17,r14,r13
    1024:	7445803a 	cmpltu	r2,r14,r17
    1028:	5251c83a 	sub	r8,r10,r9
    102c:	4091c83a 	sub	r8,r8,r2
    1030:	4080202c 	andhi	r2,r8,128
    1034:	10018f26 	beq	r2,zero,1674 <__adddf3+0x8d4>
    1038:	6ba3c83a 	sub	r17,r13,r14
    103c:	4a95c83a 	sub	r10,r9,r10
    1040:	6c51803a 	cmpltu	r8,r13,r17
    1044:	5211c83a 	sub	r8,r10,r8
    1048:	3821883a 	mov	r16,r7
    104c:	003fa306 	br	edc <__adddf3+0x13c>
    1050:	4b44b03a 	or	r2,r9,r13
    1054:	10006626 	beq	r2,zero,11f0 <__adddf3+0x450>
    1058:	18bfffc4 	addi	r2,r3,-1
    105c:	1000ec26 	beq	r2,zero,1410 <__adddf3+0x670>
    1060:	18c1ffd8 	cmpnei	r3,r3,2047
    1064:	18012d26 	beq	r3,zero,151c <__adddf3+0x77c>
    1068:	1007883a 	mov	r3,r2
    106c:	003fcd06 	br	fa4 <__adddf3+0x204>
    1070:	18fff844 	addi	r3,r3,-31
    1074:	20800820 	cmpeqi	r2,r4,32
    1078:	40c6d83a 	srl	r3,r8,r3
    107c:	1000041e 	bne	r2,zero,1090 <__adddf3+0x2f0>
    1080:	00801004 	movi	r2,64
    1084:	1109c83a 	sub	r4,r2,r4
    1088:	4110983a 	sll	r8,r8,r4
    108c:	8a22b03a 	or	r17,r17,r8
    1090:	8822c03a 	cmpne	r17,r17,zero
    1094:	88e2b03a 	or	r17,r17,r3
    1098:	0011883a 	mov	r8,zero
    109c:	0025883a 	mov	r18,zero
    10a0:	888001cc 	andi	r2,r17,7
    10a4:	103f8f1e 	bne	r2,zero,ee4 <__adddf3+0x144>
    10a8:	8822d0fa 	srli	r17,r17,3
    10ac:	4004977a 	slli	r2,r8,29
    10b0:	4014d0fa 	srli	r10,r8,3
    10b4:	9007883a 	mov	r3,r18
    10b8:	8884b03a 	or	r2,r17,r2
    10bc:	1901ffe0 	cmpeqi	r4,r3,2047
    10c0:	2000191e 	bne	r4,zero,1128 <__adddf3+0x388>
    10c4:	02000434 	movhi	r8,16
    10c8:	423fffc4 	addi	r8,r8,-1
    10cc:	5210703a 	and	r8,r10,r8
    10d0:	18c1ffcc 	andi	r3,r3,2047
    10d4:	003f9806 	br	f38 <__adddf3+0x198>
    10d8:	4b62b03a 	or	r17,r9,r13
    10dc:	8822c03a 	cmpne	r17,r17,zero
    10e0:	8ba3883a 	add	r17,r17,r14
    10e4:	8b91803a 	cmpltu	r8,r17,r14
    10e8:	4291883a 	add	r8,r8,r10
    10ec:	4080202c 	andhi	r2,r8,128
    10f0:	103feb26 	beq	r2,zero,10a0 <__adddf3+0x300>
    10f4:	94800044 	addi	r18,r18,1
    10f8:	9081ffe0 	cmpeqi	r2,r18,2047
    10fc:	10007426 	beq	r2,zero,12d0 <__adddf3+0x530>
    1100:	00c1ffc4 	movi	r3,2047
    1104:	0011883a 	mov	r8,zero
    1108:	0005883a 	mov	r2,zero
    110c:	003f8a06 	br	f38 <__adddf3+0x198>
    1110:	500a977a 	slli	r5,r10,29
    1114:	00c80034 	movhi	r3,8192
    1118:	18ffffc4 	addi	r3,r3,-1
    111c:	5014d0fa 	srli	r10,r10,3
    1120:	20c4703a 	and	r2,r4,r3
    1124:	1144b03a 	or	r2,r2,r5
    1128:	1286b03a 	or	r3,r2,r10
    112c:	18015426 	beq	r3,zero,1680 <__adddf3+0x8e0>
    1130:	00c00434 	movhi	r3,16
    1134:	18ffffc4 	addi	r3,r3,-1
    1138:	52000234 	orhi	r8,r10,8
    113c:	40d0703a 	and	r8,r8,r3
    1140:	00c1ffc4 	movi	r3,2047
    1144:	003f7c06 	br	f38 <__adddf3+0x198>
    1148:	8809883a 	mov	r4,r17
    114c:	0001fe80 	call	1fe8 <__clzsi2>
    1150:	10c00604 	addi	r3,r2,24
    1154:	19000808 	cmpgei	r4,r3,32
    1158:	203f4b26 	beq	r4,zero,e88 <__adddf3+0xe8>
    115c:	123ffe04 	addi	r8,r2,-8
    1160:	8a10983a 	sll	r8,r17,r8
    1164:	0023883a 	mov	r17,zero
    1168:	1cbf4e0e 	bge	r3,r18,ea4 <__adddf3+0x104>
    116c:	00bfe034 	movhi	r2,65408
    1170:	10bfffc4 	addi	r2,r2,-1
    1174:	90e5c83a 	sub	r18,r18,r3
    1178:	4090703a 	and	r8,r8,r2
    117c:	003f5706 	br	edc <__adddf3+0x13c>
    1180:	18002226 	beq	r3,zero,120c <__adddf3+0x46c>
    1184:	1487c83a 	sub	r3,r2,r18
    1188:	90006e26 	beq	r18,zero,1344 <__adddf3+0x5a4>
    118c:	1101ffd8 	cmpnei	r4,r2,2047
    1190:	2000e926 	beq	r4,zero,1538 <__adddf3+0x798>
    1194:	52802034 	orhi	r10,r10,128
    1198:	19000e48 	cmpgei	r4,r3,57
    119c:	2000b91e 	bne	r4,zero,1484 <__adddf3+0x6e4>
    11a0:	19000808 	cmpgei	r4,r3,32
    11a4:	2001101e 	bne	r4,zero,15e8 <__adddf3+0x848>
    11a8:	01000804 	movi	r4,32
    11ac:	20c9c83a 	sub	r4,r4,r3
    11b0:	5122983a 	sll	r17,r10,r4
    11b4:	70cad83a 	srl	r5,r14,r3
    11b8:	7108983a 	sll	r4,r14,r4
    11bc:	50d4d83a 	srl	r10,r10,r3
    11c0:	8962b03a 	or	r17,r17,r5
    11c4:	2008c03a 	cmpne	r4,r4,zero
    11c8:	8922b03a 	or	r17,r17,r4
    11cc:	4a93883a 	add	r9,r9,r10
    11d0:	8b63883a 	add	r17,r17,r13
    11d4:	8b51803a 	cmpltu	r8,r17,r13
    11d8:	4251883a 	add	r8,r8,r9
    11dc:	1025883a 	mov	r18,r2
    11e0:	003fc206 	br	10ec <__adddf3+0x34c>
    11e4:	4b62b03a 	or	r17,r9,r13
    11e8:	8822c03a 	cmpne	r17,r17,zero
    11ec:	003f1a06 	br	e58 <__adddf3+0xb8>
    11f0:	500c977a 	slli	r6,r10,29
    11f4:	01480034 	movhi	r5,8192
    11f8:	297fffc4 	addi	r5,r5,-1
    11fc:	2144703a 	and	r2,r4,r5
    1200:	5014d0fa 	srli	r10,r10,3
    1204:	1184b03a 	or	r2,r2,r6
    1208:	003fac06 	br	10bc <__adddf3+0x31c>
    120c:	90800044 	addi	r2,r18,1
    1210:	1141ff8c 	andi	r5,r2,2046
    1214:	28005e1e 	bne	r5,zero,1390 <__adddf3+0x5f0>
    1218:	5384b03a 	or	r2,r10,r14
    121c:	9000a71e 	bne	r18,zero,14bc <__adddf3+0x71c>
    1220:	1000e526 	beq	r2,zero,15b8 <__adddf3+0x818>
    1224:	4b44b03a 	or	r2,r9,r13
    1228:	10008f26 	beq	r2,zero,1468 <__adddf3+0x6c8>
    122c:	7363883a 	add	r17,r14,r13
    1230:	5255883a 	add	r10,r10,r9
    1234:	8b91803a 	cmpltu	r8,r17,r14
    1238:	5211883a 	add	r8,r10,r8
    123c:	4080202c 	andhi	r2,r8,128
    1240:	103f9726 	beq	r2,zero,10a0 <__adddf3+0x300>
    1244:	00bfe034 	movhi	r2,65408
    1248:	10bfffc4 	addi	r2,r2,-1
    124c:	4090703a 	and	r8,r8,r2
    1250:	04800044 	movi	r18,1
    1254:	003f9206 	br	10a0 <__adddf3+0x300>
    1258:	1101ffd8 	cmpnei	r4,r2,2047
    125c:	20007a26 	beq	r4,zero,1448 <__adddf3+0x6a8>
    1260:	52802034 	orhi	r10,r10,128
    1264:	19000e48 	cmpgei	r4,r3,57
    1268:	20002e1e 	bne	r4,zero,1324 <__adddf3+0x584>
    126c:	19000808 	cmpgei	r4,r3,32
    1270:	2000871e 	bne	r4,zero,1490 <__adddf3+0x6f0>
    1274:	01000804 	movi	r4,32
    1278:	20c9c83a 	sub	r4,r4,r3
    127c:	5122983a 	sll	r17,r10,r4
    1280:	70cad83a 	srl	r5,r14,r3
    1284:	711c983a 	sll	r14,r14,r4
    1288:	50d4d83a 	srl	r10,r10,r3
    128c:	8962b03a 	or	r17,r17,r5
    1290:	701cc03a 	cmpne	r14,r14,zero
    1294:	8ba2b03a 	or	r17,r17,r14
    1298:	4a93c83a 	sub	r9,r9,r10
    129c:	00002306 	br	132c <__adddf3+0x58c>
    12a0:	7363c83a 	sub	r17,r14,r13
    12a4:	5267c83a 	sub	r19,r10,r9
    12a8:	7451803a 	cmpltu	r8,r14,r17
    12ac:	9a27c83a 	sub	r19,r19,r8
    12b0:	9880202c 	andhi	r2,r19,128
    12b4:	1000421e 	bne	r2,zero,13c0 <__adddf3+0x620>
    12b8:	8cc4b03a 	or	r2,r17,r19
    12bc:	103eee1e 	bne	r2,zero,e78 <__adddf3+0xd8>
    12c0:	0015883a 	mov	r10,zero
    12c4:	0021883a 	mov	r16,zero
    12c8:	003f7e06 	br	10c4 <__adddf3+0x324>
    12cc:	04800084 	movi	r18,2
    12d0:	00bfe034 	movhi	r2,65408
    12d4:	10bfffc4 	addi	r2,r2,-1
    12d8:	8806d07a 	srli	r3,r17,1
    12dc:	4090703a 	and	r8,r8,r2
    12e0:	400497fa 	slli	r2,r8,31
    12e4:	8c40004c 	andi	r17,r17,1
    12e8:	1c62b03a 	or	r17,r3,r17
    12ec:	4010d07a 	srli	r8,r8,1
    12f0:	1462b03a 	or	r17,r2,r17
    12f4:	003ef906 	br	edc <__adddf3+0x13c>
    12f8:	1c7ff804 	addi	r17,r3,-32
    12fc:	19000820 	cmpeqi	r4,r3,32
    1300:	4c44d83a 	srl	r2,r9,r17
    1304:	2000041e 	bne	r4,zero,1318 <__adddf3+0x578>
    1308:	01001004 	movi	r4,64
    130c:	20c7c83a 	sub	r3,r4,r3
    1310:	48d2983a 	sll	r9,r9,r3
    1314:	6a5ab03a 	or	r13,r13,r9
    1318:	6822c03a 	cmpne	r17,r13,zero
    131c:	88a2b03a 	or	r17,r17,r2
    1320:	003ecd06 	br	e58 <__adddf3+0xb8>
    1324:	5394b03a 	or	r10,r10,r14
    1328:	5022c03a 	cmpne	r17,r10,zero
    132c:	6c63c83a 	sub	r17,r13,r17
    1330:	6c51803a 	cmpltu	r8,r13,r17
    1334:	4a11c83a 	sub	r8,r9,r8
    1338:	3821883a 	mov	r16,r7
    133c:	1025883a 	mov	r18,r2
    1340:	003ec806 	br	e64 <__adddf3+0xc4>
    1344:	5388b03a 	or	r4,r10,r14
    1348:	20008226 	beq	r4,zero,1554 <__adddf3+0x7b4>
    134c:	193fffc4 	addi	r4,r3,-1
    1350:	2000b026 	beq	r4,zero,1614 <__adddf3+0x874>
    1354:	18c1ffd8 	cmpnei	r3,r3,2047
    1358:	18007726 	beq	r3,zero,1538 <__adddf3+0x798>
    135c:	2007883a 	mov	r3,r4
    1360:	003f8d06 	br	1198 <__adddf3+0x3f8>
    1364:	00800804 	movi	r2,32
    1368:	10c5c83a 	sub	r2,r2,r3
    136c:	68c8d83a 	srl	r4,r13,r3
    1370:	48a2983a 	sll	r17,r9,r2
    1374:	689a983a 	sll	r13,r13,r2
    1378:	48c6d83a 	srl	r3,r9,r3
    137c:	8922b03a 	or	r17,r17,r4
    1380:	681ac03a 	cmpne	r13,r13,zero
    1384:	8b62b03a 	or	r17,r17,r13
    1388:	50d5883a 	add	r10,r10,r3
    138c:	003f5406 	br	10e0 <__adddf3+0x340>
    1390:	10c1ffe0 	cmpeqi	r3,r2,2047
    1394:	183f5a1e 	bne	r3,zero,1100 <__adddf3+0x360>
    1398:	7351883a 	add	r8,r14,r13
    139c:	4387803a 	cmpltu	r3,r8,r14
    13a0:	5255883a 	add	r10,r10,r9
    13a4:	50c7883a 	add	r3,r10,r3
    13a8:	401ad07a 	srli	r13,r8,1
    13ac:	182297fa 	slli	r17,r3,31
    13b0:	1810d07a 	srli	r8,r3,1
    13b4:	1025883a 	mov	r18,r2
    13b8:	8b62b03a 	or	r17,r17,r13
    13bc:	003f3806 	br	10a0 <__adddf3+0x300>
    13c0:	6ba3c83a 	sub	r17,r13,r14
    13c4:	4a93c83a 	sub	r9,r9,r10
    13c8:	6c51803a 	cmpltu	r8,r13,r17
    13cc:	4a27c83a 	sub	r19,r9,r8
    13d0:	3821883a 	mov	r16,r7
    13d4:	003ea806 	br	e78 <__adddf3+0xd8>
    13d8:	480a977a 	slli	r5,r9,29
    13dc:	01080034 	movhi	r4,8192
    13e0:	213fffc4 	addi	r4,r4,-1
    13e4:	3104703a 	and	r2,r6,r4
    13e8:	4814d0fa 	srli	r10,r9,3
    13ec:	1144b03a 	or	r2,r2,r5
    13f0:	3821883a 	mov	r16,r7
    13f4:	003f3106 	br	10bc <__adddf3+0x31c>
    13f8:	28005d1e 	bne	r5,zero,1570 <__adddf3+0x7d0>
    13fc:	1000121e 	bne	r2,zero,1448 <__adddf3+0x6a8>
    1400:	0021883a 	mov	r16,zero
    1404:	4015883a 	mov	r10,r8
    1408:	00bfffc4 	movi	r2,-1
    140c:	003f4806 	br	1130 <__adddf3+0x390>
    1410:	7363883a 	add	r17,r14,r13
    1414:	5255883a 	add	r10,r10,r9
    1418:	8b91803a 	cmpltu	r8,r17,r14
    141c:	5211883a 	add	r8,r10,r8
    1420:	4080202c 	andhi	r2,r8,128
    1424:	103fa91e 	bne	r2,zero,12cc <__adddf3+0x52c>
    1428:	04800044 	movi	r18,1
    142c:	003f1c06 	br	10a0 <__adddf3+0x300>
    1430:	7363c83a 	sub	r17,r14,r13
    1434:	5255c83a 	sub	r10,r10,r9
    1438:	7451803a 	cmpltu	r8,r14,r17
    143c:	5211c83a 	sub	r8,r10,r8
    1440:	04800044 	movi	r18,1
    1444:	003e8706 	br	e64 <__adddf3+0xc4>
    1448:	4806977a 	slli	r3,r9,29
    144c:	00880034 	movhi	r2,8192
    1450:	10bfffc4 	addi	r2,r2,-1
    1454:	3084703a 	and	r2,r6,r2
    1458:	4814d0fa 	srli	r10,r9,3
    145c:	10c4b03a 	or	r2,r2,r3
    1460:	3821883a 	mov	r16,r7
    1464:	003f3006 	br	1128 <__adddf3+0x388>
    1468:	500a977a 	slli	r5,r10,29
    146c:	00880034 	movhi	r2,8192
    1470:	10bfffc4 	addi	r2,r2,-1
    1474:	2084703a 	and	r2,r4,r2
    1478:	5014d0fa 	srli	r10,r10,3
    147c:	1144b03a 	or	r2,r2,r5
    1480:	003f1006 	br	10c4 <__adddf3+0x324>
    1484:	5394b03a 	or	r10,r10,r14
    1488:	5022c03a 	cmpne	r17,r10,zero
    148c:	003f5006 	br	11d0 <__adddf3+0x430>
    1490:	1c7ff804 	addi	r17,r3,-32
    1494:	19400820 	cmpeqi	r5,r3,32
    1498:	5448d83a 	srl	r4,r10,r17
    149c:	2800041e 	bne	r5,zero,14b0 <__adddf3+0x710>
    14a0:	01401004 	movi	r5,64
    14a4:	28c7c83a 	sub	r3,r5,r3
    14a8:	50d4983a 	sll	r10,r10,r3
    14ac:	729cb03a 	or	r14,r14,r10
    14b0:	7022c03a 	cmpne	r17,r14,zero
    14b4:	8922b03a 	or	r17,r17,r4
    14b8:	003f9c06 	br	132c <__adddf3+0x58c>
    14bc:	10005a1e 	bne	r2,zero,1628 <__adddf3+0x888>
    14c0:	4804977a 	slli	r2,r9,29
    14c4:	00c80034 	movhi	r3,8192
    14c8:	18ffffc4 	addi	r3,r3,-1
    14cc:	30cc703a 	and	r6,r6,r3
    14d0:	4814d0fa 	srli	r10,r9,3
    14d4:	1184b03a 	or	r2,r2,r6
    14d8:	003f1306 	br	1128 <__adddf3+0x388>
    14dc:	6ba3c83a 	sub	r17,r13,r14
    14e0:	4a95c83a 	sub	r10,r9,r10
    14e4:	6c51803a 	cmpltu	r8,r13,r17
    14e8:	5211c83a 	sub	r8,r10,r8
    14ec:	3821883a 	mov	r16,r7
    14f0:	04800044 	movi	r18,1
    14f4:	003e5b06 	br	e64 <__adddf3+0xc4>
    14f8:	103f7126 	beq	r2,zero,12c0 <__adddf3+0x520>
    14fc:	4808977a 	slli	r4,r9,29
    1500:	00880034 	movhi	r2,8192
    1504:	10bfffc4 	addi	r2,r2,-1
    1508:	3084703a 	and	r2,r6,r2
    150c:	4814d0fa 	srli	r10,r9,3
    1510:	1104b03a 	or	r2,r2,r4
    1514:	3821883a 	mov	r16,r7
    1518:	003eea06 	br	10c4 <__adddf3+0x324>
    151c:	5006977a 	slli	r3,r10,29
    1520:	00880034 	movhi	r2,8192
    1524:	10bfffc4 	addi	r2,r2,-1
    1528:	2084703a 	and	r2,r4,r2
    152c:	5014d0fa 	srli	r10,r10,3
    1530:	10c4b03a 	or	r2,r2,r3
    1534:	003efc06 	br	1128 <__adddf3+0x388>
    1538:	4806977a 	slli	r3,r9,29
    153c:	00880034 	movhi	r2,8192
    1540:	10bfffc4 	addi	r2,r2,-1
    1544:	3084703a 	and	r2,r6,r2
    1548:	4814d0fa 	srli	r10,r9,3
    154c:	10c4b03a 	or	r2,r2,r3
    1550:	003ef506 	br	1128 <__adddf3+0x388>
    1554:	4808977a 	slli	r4,r9,29
    1558:	00880034 	movhi	r2,8192
    155c:	10bfffc4 	addi	r2,r2,-1
    1560:	3084703a 	and	r2,r6,r2
    1564:	4814d0fa 	srli	r10,r9,3
    1568:	1104b03a 	or	r2,r2,r4
    156c:	003ed306 	br	10bc <__adddf3+0x31c>
    1570:	500a977a 	slli	r5,r10,29
    1574:	5014d0fa 	srli	r10,r10,3
    1578:	10001626 	beq	r2,zero,15d4 <__adddf3+0x834>
    157c:	00c80034 	movhi	r3,8192
    1580:	18ffffc4 	addi	r3,r3,-1
    1584:	20c4703a 	and	r2,r4,r3
    1588:	5100022c 	andhi	r4,r10,8
    158c:	1144b03a 	or	r2,r2,r5
    1590:	203ee526 	beq	r4,zero,1128 <__adddf3+0x388>
    1594:	4808d0fa 	srli	r4,r9,3
    1598:	2140022c 	andhi	r5,r4,8
    159c:	283ee21e 	bne	r5,zero,1128 <__adddf3+0x388>
    15a0:	4812977a 	slli	r9,r9,29
    15a4:	30c4703a 	and	r2,r6,r3
    15a8:	3821883a 	mov	r16,r7
    15ac:	1244b03a 	or	r2,r2,r9
    15b0:	2015883a 	mov	r10,r4
    15b4:	003edc06 	br	1128 <__adddf3+0x388>
    15b8:	4804977a 	slli	r2,r9,29
    15bc:	01080034 	movhi	r4,8192
    15c0:	213fffc4 	addi	r4,r4,-1
    15c4:	310c703a 	and	r6,r6,r4
    15c8:	4814d0fa 	srli	r10,r9,3
    15cc:	1184b03a 	or	r2,r2,r6
    15d0:	003ebc06 	br	10c4 <__adddf3+0x324>
    15d4:	00880034 	movhi	r2,8192
    15d8:	10bfffc4 	addi	r2,r2,-1
    15dc:	2084703a 	and	r2,r4,r2
    15e0:	1144b03a 	or	r2,r2,r5
    15e4:	003ed006 	br	1128 <__adddf3+0x388>
    15e8:	193ff804 	addi	r4,r3,-32
    15ec:	19400820 	cmpeqi	r5,r3,32
    15f0:	5108d83a 	srl	r4,r10,r4
    15f4:	2800041e 	bne	r5,zero,1608 <__adddf3+0x868>
    15f8:	01401004 	movi	r5,64
    15fc:	28c7c83a 	sub	r3,r5,r3
    1600:	50d4983a 	sll	r10,r10,r3
    1604:	729cb03a 	or	r14,r14,r10
    1608:	7022c03a 	cmpne	r17,r14,zero
    160c:	8922b03a 	or	r17,r17,r4
    1610:	003eef06 	br	11d0 <__adddf3+0x430>
    1614:	7363883a 	add	r17,r14,r13
    1618:	5255883a 	add	r10,r10,r9
    161c:	8b51803a 	cmpltu	r8,r17,r13
    1620:	5211883a 	add	r8,r10,r8
    1624:	003f7e06 	br	1420 <__adddf3+0x680>
    1628:	4b50b03a 	or	r8,r9,r13
    162c:	500a977a 	slli	r5,r10,29
    1630:	5014d0fa 	srli	r10,r10,3
    1634:	403fe726 	beq	r8,zero,15d4 <__adddf3+0x834>
    1638:	00c80034 	movhi	r3,8192
    163c:	18ffffc4 	addi	r3,r3,-1
    1640:	20c4703a 	and	r2,r4,r3
    1644:	5100022c 	andhi	r4,r10,8
    1648:	1144b03a 	or	r2,r2,r5
    164c:	203eb626 	beq	r4,zero,1128 <__adddf3+0x388>
    1650:	4808d0fa 	srli	r4,r9,3
    1654:	2140022c 	andhi	r5,r4,8
    1658:	283eb31e 	bne	r5,zero,1128 <__adddf3+0x388>
    165c:	4804977a 	slli	r2,r9,29
    1660:	30cc703a 	and	r6,r6,r3
    1664:	3821883a 	mov	r16,r7
    1668:	3084b03a 	or	r2,r6,r2
    166c:	2015883a 	mov	r10,r4
    1670:	003ead06 	br	1128 <__adddf3+0x388>
    1674:	8a04b03a 	or	r2,r17,r8
    1678:	103f1126 	beq	r2,zero,12c0 <__adddf3+0x520>
    167c:	003e8806 	br	10a0 <__adddf3+0x300>
    1680:	0005883a 	mov	r2,zero
    1684:	00c1ffc4 	movi	r3,2047
    1688:	0011883a 	mov	r8,zero
    168c:	003e2a06 	br	f38 <__adddf3+0x198>

00001690 <__eqdf2>:
    1690:	2810d53a 	srli	r8,r5,20
    1694:	3806d53a 	srli	r3,r7,20
    1698:	00800434 	movhi	r2,16
    169c:	4201ffcc 	andi	r8,r8,2047
    16a0:	10bfffc4 	addi	r2,r2,-1
    16a4:	4241ffd8 	cmpnei	r9,r8,2047
    16a8:	2814d7fa 	srli	r10,r5,31
    16ac:	3816d7fa 	srli	r11,r7,31
    16b0:	288a703a 	and	r5,r5,r2
    16b4:	388e703a 	and	r7,r7,r2
    16b8:	1881ffcc 	andi	r2,r3,2047
    16bc:	48000626 	beq	r9,zero,16d8 <__eqdf2+0x48>
    16c0:	10c1ffe0 	cmpeqi	r3,r2,2047
    16c4:	1800021e 	bne	r3,zero,16d0 <__eqdf2+0x40>
    16c8:	4080011e 	bne	r8,r2,16d0 <__eqdf2+0x40>
    16cc:	29c00826 	beq	r5,r7,16f0 <__eqdf2+0x60>
    16d0:	00800044 	movi	r2,1
    16d4:	f800283a 	ret
    16d8:	2906b03a 	or	r3,r5,r4
    16dc:	183ffc1e 	bne	r3,zero,16d0 <__eqdf2+0x40>
    16e0:	1081ffd8 	cmpnei	r2,r2,2047
    16e4:	103ffa1e 	bne	r2,zero,16d0 <__eqdf2+0x40>
    16e8:	398eb03a 	or	r7,r7,r6
    16ec:	383ff81e 	bne	r7,zero,16d0 <__eqdf2+0x40>
    16f0:	21bff71e 	bne	r4,r6,16d0 <__eqdf2+0x40>
    16f4:	52c00426 	beq	r10,r11,1708 <__eqdf2+0x78>
    16f8:	403ff51e 	bne	r8,zero,16d0 <__eqdf2+0x40>
    16fc:	290ab03a 	or	r5,r5,r4
    1700:	2804c03a 	cmpne	r2,r5,zero
    1704:	f800283a 	ret
    1708:	0005883a 	mov	r2,zero
    170c:	f800283a 	ret

00001710 <__ledf2>:
    1710:	2810d53a 	srli	r8,r5,20
    1714:	3812d53a 	srli	r9,r7,20
    1718:	00c00434 	movhi	r3,16
    171c:	4201ffcc 	andi	r8,r8,2047
    1720:	18ffffc4 	addi	r3,r3,-1
    1724:	4281ffd8 	cmpnei	r10,r8,2047
    1728:	2816d7fa 	srli	r11,r5,31
    172c:	3804d7fa 	srli	r2,r7,31
    1730:	28ca703a 	and	r5,r5,r3
    1734:	38ce703a 	and	r7,r7,r3
    1738:	48c1ffcc 	andi	r3,r9,2047
    173c:	50000a26 	beq	r10,zero,1768 <__ledf2+0x58>
    1740:	1a41ffd8 	cmpnei	r9,r3,2047
    1744:	48000c26 	beq	r9,zero,1778 <__ledf2+0x68>
    1748:	4000191e 	bne	r8,zero,17b0 <__ledf2+0xa0>
    174c:	2912b03a 	or	r9,r5,r4
    1750:	18000d1e 	bne	r3,zero,1788 <__ledf2+0x78>
    1754:	3994b03a 	or	r10,r7,r6
    1758:	50000b1e 	bne	r10,zero,1788 <__ledf2+0x78>
    175c:	48000c1e 	bne	r9,zero,1790 <__ledf2+0x80>
    1760:	0005883a 	mov	r2,zero
    1764:	f800283a 	ret
    1768:	2912b03a 	or	r9,r5,r4
    176c:	48000c1e 	bne	r9,zero,17a0 <__ledf2+0x90>
    1770:	1a41ffe0 	cmpeqi	r9,r3,2047
    1774:	48000e26 	beq	r9,zero,17b0 <__ledf2+0xa0>
    1778:	3992b03a 	or	r9,r7,r6
    177c:	4800081e 	bne	r9,zero,17a0 <__ledf2+0x90>
    1780:	4000021e 	bne	r8,zero,178c <__ledf2+0x7c>
    1784:	2912b03a 	or	r9,r5,r4
    1788:	48000726 	beq	r9,zero,17a8 <__ledf2+0x98>
    178c:	58800c26 	beq	r11,r2,17c0 <__ledf2+0xb0>
    1790:	00800044 	movi	r2,1
    1794:	58000526 	beq	r11,zero,17ac <__ledf2+0x9c>
    1798:	00bfffc4 	movi	r2,-1
    179c:	f800283a 	ret
    17a0:	00800084 	movi	r2,2
    17a4:	f800283a 	ret
    17a8:	103ffb26 	beq	r2,zero,1798 <__ledf2+0x88>
    17ac:	f800283a 	ret
    17b0:	183ff61e 	bne	r3,zero,178c <__ledf2+0x7c>
    17b4:	3992b03a 	or	r9,r7,r6
    17b8:	483ff41e 	bne	r9,zero,178c <__ledf2+0x7c>
    17bc:	003ff406 	br	1790 <__ledf2+0x80>
    17c0:	1a00030e 	bge	r3,r8,17d0 <__ledf2+0xc0>
    17c4:	103ff41e 	bne	r2,zero,1798 <__ledf2+0x88>
    17c8:	00800044 	movi	r2,1
    17cc:	f800283a 	ret
    17d0:	40fff516 	blt	r8,r3,17a8 <__ledf2+0x98>
    17d4:	397fee36 	bltu	r7,r5,1790 <__ledf2+0x80>
    17d8:	29c00426 	beq	r5,r7,17ec <__ledf2+0xdc>
    17dc:	29ffe02e 	bgeu	r5,r7,1760 <__ledf2+0x50>
    17e0:	583fed26 	beq	r11,zero,1798 <__ledf2+0x88>
    17e4:	5805883a 	mov	r2,r11
    17e8:	f800283a 	ret
    17ec:	313fe836 	bltu	r6,r4,1790 <__ledf2+0x80>
    17f0:	21bfdb2e 	bgeu	r4,r6,1760 <__ledf2+0x50>
    17f4:	003ffa06 	br	17e0 <__ledf2+0xd0>

000017f8 <__muldf3>:
    17f8:	2804d53a 	srli	r2,r5,20
    17fc:	defff504 	addi	sp,sp,-44
    1800:	02000434 	movhi	r8,16
    1804:	df000915 	stw	fp,36(sp)
    1808:	dd000515 	stw	r20,20(sp)
    180c:	dcc00415 	stw	r19,16(sp)
    1810:	dc000115 	stw	r16,4(sp)
    1814:	423fffc4 	addi	r8,r8,-1
    1818:	dfc00a15 	stw	ra,40(sp)
    181c:	ddc00815 	stw	r23,32(sp)
    1820:	dd800715 	stw	r22,28(sp)
    1824:	dd400615 	stw	r21,24(sp)
    1828:	dc800315 	stw	r18,12(sp)
    182c:	dc400215 	stw	r17,8(sp)
    1830:	1081ffcc 	andi	r2,r2,2047
    1834:	2828d7fa 	srli	r20,r5,31
    1838:	2027883a 	mov	r19,r4
    183c:	3039883a 	mov	fp,r6
    1840:	2a20703a 	and	r16,r5,r8
    1844:	1000e726 	beq	r2,zero,1be4 <__muldf3+0x3ec>
    1848:	10c1ffe0 	cmpeqi	r3,r2,2047
    184c:	1800f91e 	bne	r3,zero,1c34 <__muldf3+0x43c>
    1850:	800a90fa 	slli	r5,r16,3
    1854:	2020d77a 	srli	r16,r4,29
    1858:	202490fa 	slli	r18,r4,3
    185c:	14ff0044 	addi	r19,r2,-1023
    1860:	8160b03a 	or	r16,r16,r5
    1864:	84002034 	orhi	r16,r16,128
    1868:	002b883a 	mov	r21,zero
    186c:	002d883a 	mov	r22,zero
    1870:	3804d53a 	srli	r2,r7,20
    1874:	00c00434 	movhi	r3,16
    1878:	18ffffc4 	addi	r3,r3,-1
    187c:	1081ffcc 	andi	r2,r2,2047
    1880:	382ed7fa 	srli	r23,r7,31
    1884:	38e2703a 	and	r17,r7,r3
    1888:	1000c526 	beq	r2,zero,1ba0 <__muldf3+0x3a8>
    188c:	10c1ffe0 	cmpeqi	r3,r2,2047
    1890:	1800ef1e 	bne	r3,zero,1c50 <__muldf3+0x458>
    1894:	880690fa 	slli	r3,r17,3
    1898:	e022d77a 	srli	r17,fp,29
    189c:	e00a90fa 	slli	r5,fp,3
    18a0:	10bf0044 	addi	r2,r2,-1023
    18a4:	88e2b03a 	or	r17,r17,r3
    18a8:	8c402034 	orhi	r17,r17,128
    18ac:	98a7883a 	add	r19,r19,r2
    18b0:	0007883a 	mov	r3,zero
    18b4:	a8800428 	cmpgeui	r2,r21,16
    18b8:	a5ccf03a 	xor	r6,r20,r23
    18bc:	9a000044 	addi	r8,r19,1
    18c0:	1000371e 	bne	r2,zero,19a0 <__muldf3+0x1a8>
    18c4:	a80490ba 	slli	r2,r21,2
    18c8:	01000034 	movhi	r4,0
    18cc:	1109883a 	add	r4,r2,r4
    18d0:	20863617 	ldw	r2,6360(r4)
    18d4:	1000683a 	jmp	r2
    18d8:	000019a0 	cmpeqi	zero,zero,102
    18dc:	0000191c 	xori	zero,zero,100
    18e0:	0000191c 	xori	zero,zero,100
    18e4:	00001918 	cmpnei	zero,zero,100
    18e8:	00001928 	cmpgeui	zero,zero,100
    18ec:	00001928 	cmpgeui	zero,zero,100
    18f0:	00001cc4 	movi	zero,115
    18f4:	00001918 	cmpnei	zero,zero,100
    18f8:	00001928 	cmpgeui	zero,zero,100
    18fc:	00001cc4 	movi	zero,115
    1900:	00001928 	cmpgeui	zero,zero,100
    1904:	00001918 	cmpnei	zero,zero,100
    1908:	00001c6c 	andhi	zero,zero,113
    190c:	00001c6c 	andhi	zero,zero,113
    1910:	00001c6c 	andhi	zero,zero,113
    1914:	00001d50 	cmplti	zero,zero,117
    1918:	b80d883a 	mov	r6,r23
    191c:	8821883a 	mov	r16,r17
    1920:	2825883a 	mov	r18,r5
    1924:	182d883a 	mov	r22,r3
    1928:	b08000a0 	cmpeqi	r2,r22,2
    192c:	1000181e 	bne	r2,zero,1990 <__muldf3+0x198>
    1930:	b08000e0 	cmpeqi	r2,r22,3
    1934:	1001481e 	bne	r2,zero,1e58 <__muldf3+0x660>
    1938:	b0800060 	cmpeqi	r2,r22,1
    193c:	10007e26 	beq	r2,zero,1b38 <__muldf3+0x340>
    1940:	0007883a 	mov	r3,zero
    1944:	0021883a 	mov	r16,zero
    1948:	0025883a 	mov	r18,zero
    194c:	1806953a 	slli	r3,r3,20
    1950:	300c97fa 	slli	r6,r6,31
    1954:	9005883a 	mov	r2,r18
    1958:	1c06b03a 	or	r3,r3,r16
    195c:	1986b03a 	or	r3,r3,r6
    1960:	dfc00a17 	ldw	ra,40(sp)
    1964:	df000917 	ldw	fp,36(sp)
    1968:	ddc00817 	ldw	r23,32(sp)
    196c:	dd800717 	ldw	r22,28(sp)
    1970:	dd400617 	ldw	r21,24(sp)
    1974:	dd000517 	ldw	r20,20(sp)
    1978:	dcc00417 	ldw	r19,16(sp)
    197c:	dc800317 	ldw	r18,12(sp)
    1980:	dc400217 	ldw	r17,8(sp)
    1984:	dc000117 	ldw	r16,4(sp)
    1988:	dec00b04 	addi	sp,sp,44
    198c:	f800283a 	ret
    1990:	00c1ffc4 	movi	r3,2047
    1994:	0021883a 	mov	r16,zero
    1998:	0025883a 	mov	r18,zero
    199c:	003feb06 	br	194c <__muldf3+0x154>
    19a0:	9004d43a 	srli	r2,r18,16
    19a4:	281ed43a 	srli	r15,r5,16
    19a8:	94bfffcc 	andi	r18,r18,65535
    19ac:	297fffcc 	andi	r5,r5,65535
    19b0:	2c89383a 	mul	r4,r5,r18
    19b4:	114f383a 	mul	r7,r2,r5
    19b8:	7c87383a 	mul	r3,r15,r18
    19bc:	2012d43a 	srli	r9,r4,16
    19c0:	13dd383a 	mul	r14,r2,r15
    19c4:	19c7883a 	add	r3,r3,r7
    19c8:	48d3883a 	add	r9,r9,r3
    19cc:	49c0022e 	bgeu	r9,r7,19d8 <__muldf3+0x1e0>
    19d0:	00c00074 	movhi	r3,1
    19d4:	70dd883a 	add	r14,r14,r3
    19d8:	881ad43a 	srli	r13,r17,16
    19dc:	8c7fffcc 	andi	r17,r17,65535
    19e0:	8c87383a 	mul	r3,r17,r18
    19e4:	144f383a 	mul	r7,r2,r17
    19e8:	6ca5383a 	mul	r18,r13,r18
    19ec:	1816d43a 	srli	r11,r3,16
    19f0:	4814943a 	slli	r10,r9,16
    19f4:	91e5883a 	add	r18,r18,r7
    19f8:	213fffcc 	andi	r4,r4,65535
    19fc:	5c97883a 	add	r11,r11,r18
    1a00:	4818d43a 	srli	r12,r9,16
    1a04:	1345383a 	mul	r2,r2,r13
    1a08:	5115883a 	add	r10,r10,r4
    1a0c:	59c0022e 	bgeu	r11,r7,1a18 <__muldf3+0x220>
    1a10:	01000074 	movhi	r4,1
    1a14:	1105883a 	add	r2,r2,r4
    1a18:	8028d43a 	srli	r20,r16,16
    1a1c:	827fffcc 	andi	r9,r16,65535
    1a20:	2a6b383a 	mul	r21,r5,r9
    1a24:	7a49383a 	mul	r4,r15,r9
    1a28:	a14b383a 	mul	r5,r20,r5
    1a2c:	580e943a 	slli	r7,r11,16
    1a30:	a82cd43a 	srli	r22,r21,16
    1a34:	5824d43a 	srli	r18,r11,16
    1a38:	18ffffcc 	andi	r3,r3,65535
    1a3c:	2149883a 	add	r4,r4,r5
    1a40:	38cf883a 	add	r7,r7,r3
    1a44:	b109883a 	add	r4,r22,r4
    1a48:	7d1f383a 	mul	r15,r15,r20
    1a4c:	9097883a 	add	r11,r18,r2
    1a50:	61c7883a 	add	r3,r12,r7
    1a54:	2140022e 	bgeu	r4,r5,1a60 <__muldf3+0x268>
    1a58:	00800074 	movhi	r2,1
    1a5c:	789f883a 	add	r15,r15,r2
    1a60:	8a65383a 	mul	r18,r17,r9
    1a64:	6a53383a 	mul	r9,r13,r9
    1a68:	a463383a 	mul	r17,r20,r17
    1a6c:	9020d43a 	srli	r16,r18,16
    1a70:	200ad43a 	srli	r5,r4,16
    1a74:	2008943a 	slli	r4,r4,16
    1a78:	4c53883a 	add	r9,r9,r17
    1a7c:	ab3fffcc 	andi	r12,r21,65535
    1a80:	8253883a 	add	r9,r16,r9
    1a84:	6d1b383a 	mul	r13,r13,r20
    1a88:	2bdf883a 	add	r15,r5,r15
    1a8c:	2309883a 	add	r4,r4,r12
    1a90:	4c40022e 	bgeu	r9,r17,1a9c <__muldf3+0x2a4>
    1a94:	00800074 	movhi	r2,1
    1a98:	689b883a 	add	r13,r13,r2
    1a9c:	4804943a 	slli	r2,r9,16
    1aa0:	917fffcc 	andi	r5,r18,65535
    1aa4:	1b87883a 	add	r3,r3,r14
    1aa8:	1145883a 	add	r2,r2,r5
    1aac:	19cf803a 	cmpltu	r7,r3,r7
    1ab0:	12c5883a 	add	r2,r2,r11
    1ab4:	1907883a 	add	r3,r3,r4
    1ab8:	11dd883a 	add	r14,r2,r7
    1abc:	1909803a 	cmpltu	r4,r3,r4
    1ac0:	73cb883a 	add	r5,r14,r15
    1ac4:	4812d43a 	srli	r9,r9,16
    1ac8:	2919883a 	add	r12,r5,r4
    1acc:	12c5803a 	cmpltu	r2,r2,r11
    1ad0:	71e1803a 	cmpltu	r16,r14,r7
    1ad4:	1420b03a 	or	r16,r2,r16
    1ad8:	2bcb803a 	cmpltu	r5,r5,r15
    1adc:	6109803a 	cmpltu	r4,r12,r4
    1ae0:	2908b03a 	or	r4,r5,r4
    1ae4:	8261883a 	add	r16,r16,r9
    1ae8:	1824927a 	slli	r18,r3,9
    1aec:	8121883a 	add	r16,r16,r4
    1af0:	8361883a 	add	r16,r16,r13
    1af4:	8020927a 	slli	r16,r16,9
    1af8:	1806d5fa 	srli	r3,r3,23
    1afc:	600ad5fa 	srli	r5,r12,23
    1b00:	6004927a 	slli	r2,r12,9
    1b04:	92a4b03a 	or	r18,r18,r10
    1b08:	9024c03a 	cmpne	r18,r18,zero
    1b0c:	90e4b03a 	or	r18,r18,r3
    1b10:	80c0402c 	andhi	r3,r16,256
    1b14:	90a4b03a 	or	r18,r18,r2
    1b18:	8160b03a 	or	r16,r16,r5
    1b1c:	1800b326 	beq	r3,zero,1dec <__muldf3+0x5f4>
    1b20:	9006d07a 	srli	r3,r18,1
    1b24:	800497fa 	slli	r2,r16,31
    1b28:	9480004c 	andi	r18,r18,1
    1b2c:	8020d07a 	srli	r16,r16,1
    1b30:	1c86b03a 	or	r3,r3,r18
    1b34:	18a4b03a 	or	r18,r3,r2
    1b38:	4100ffc4 	addi	r4,r8,1023
    1b3c:	0100670e 	bge	zero,r4,1cdc <__muldf3+0x4e4>
    1b40:	908001cc 	andi	r2,r18,7
    1b44:	10000726 	beq	r2,zero,1b64 <__muldf3+0x36c>
    1b48:	908003cc 	andi	r2,r18,15
    1b4c:	10800120 	cmpeqi	r2,r2,4
    1b50:	1000041e 	bne	r2,zero,1b64 <__muldf3+0x36c>
    1b54:	90800104 	addi	r2,r18,4
    1b58:	14a5803a 	cmpltu	r18,r2,r18
    1b5c:	84a1883a 	add	r16,r16,r18
    1b60:	1025883a 	mov	r18,r2
    1b64:	8080402c 	andhi	r2,r16,256
    1b68:	10000426 	beq	r2,zero,1b7c <__muldf3+0x384>
    1b6c:	00bfc034 	movhi	r2,65280
    1b70:	10bfffc4 	addi	r2,r2,-1
    1b74:	80a0703a 	and	r16,r16,r2
    1b78:	41010004 	addi	r4,r8,1024
    1b7c:	2081ffc8 	cmpgei	r2,r4,2047
    1b80:	103f831e 	bne	r2,zero,1990 <__muldf3+0x198>
    1b84:	8004977a 	slli	r2,r16,29
    1b88:	9024d0fa 	srli	r18,r18,3
    1b8c:	8020927a 	slli	r16,r16,9
    1b90:	20c1ffcc 	andi	r3,r4,2047
    1b94:	14a4b03a 	or	r18,r2,r18
    1b98:	8020d33a 	srli	r16,r16,12
    1b9c:	003f6b06 	br	194c <__muldf3+0x154>
    1ba0:	8f0ab03a 	or	r5,r17,fp
    1ba4:	28004326 	beq	r5,zero,1cb4 <__muldf3+0x4bc>
    1ba8:	88008526 	beq	r17,zero,1dc0 <__muldf3+0x5c8>
    1bac:	8809883a 	mov	r4,r17
    1bb0:	0001fe80 	call	1fe8 <__clzsi2>
    1bb4:	11bffd44 	addi	r6,r2,-11
    1bb8:	01000744 	movi	r4,29
    1bbc:	117ffe04 	addi	r5,r2,-8
    1bc0:	2189c83a 	sub	r4,r4,r6
    1bc4:	8962983a 	sll	r17,r17,r5
    1bc8:	e108d83a 	srl	r4,fp,r4
    1bcc:	e14a983a 	sll	r5,fp,r5
    1bd0:	2462b03a 	or	r17,r4,r17
    1bd4:	9885c83a 	sub	r2,r19,r2
    1bd8:	14ff0344 	addi	r19,r2,-1011
    1bdc:	0007883a 	mov	r3,zero
    1be0:	003f3406 	br	18b4 <__muldf3+0xbc>
    1be4:	8124b03a 	or	r18,r16,r4
    1be8:	90002d26 	beq	r18,zero,1ca0 <__muldf3+0x4a8>
    1bec:	d9c00015 	stw	r7,0(sp)
    1bf0:	80006826 	beq	r16,zero,1d94 <__muldf3+0x59c>
    1bf4:	8009883a 	mov	r4,r16
    1bf8:	0001fe80 	call	1fe8 <__clzsi2>
    1bfc:	d9c00017 	ldw	r7,0(sp)
    1c00:	113ffd44 	addi	r4,r2,-11
    1c04:	00c00744 	movi	r3,29
    1c08:	14bffe04 	addi	r18,r2,-8
    1c0c:	1907c83a 	sub	r3,r3,r4
    1c10:	84a0983a 	sll	r16,r16,r18
    1c14:	98c6d83a 	srl	r3,r19,r3
    1c18:	9ca4983a 	sll	r18,r19,r18
    1c1c:	1c20b03a 	or	r16,r3,r16
    1c20:	04ff0344 	movi	r19,-1011
    1c24:	98a7c83a 	sub	r19,r19,r2
    1c28:	002b883a 	mov	r21,zero
    1c2c:	002d883a 	mov	r22,zero
    1c30:	003f0f06 	br	1870 <__muldf3+0x78>
    1c34:	8124b03a 	or	r18,r16,r4
    1c38:	9000141e 	bne	r18,zero,1c8c <__muldf3+0x494>
    1c3c:	0021883a 	mov	r16,zero
    1c40:	05400204 	movi	r21,8
    1c44:	04c1ffc4 	movi	r19,2047
    1c48:	05800084 	movi	r22,2
    1c4c:	003f0806 	br	1870 <__muldf3+0x78>
    1c50:	8f0ab03a 	or	r5,r17,fp
    1c54:	9cc1ffc4 	addi	r19,r19,2047
    1c58:	2800081e 	bne	r5,zero,1c7c <__muldf3+0x484>
    1c5c:	ad400094 	ori	r21,r21,2
    1c60:	0023883a 	mov	r17,zero
    1c64:	00c00084 	movi	r3,2
    1c68:	003f1206 	br	18b4 <__muldf3+0xbc>
    1c6c:	b08000a0 	cmpeqi	r2,r22,2
    1c70:	a00d883a 	mov	r6,r20
    1c74:	103f2e26 	beq	r2,zero,1930 <__muldf3+0x138>
    1c78:	003f4506 	br	1990 <__muldf3+0x198>
    1c7c:	ad4000d4 	ori	r21,r21,3
    1c80:	e00b883a 	mov	r5,fp
    1c84:	00c000c4 	movi	r3,3
    1c88:	003f0a06 	br	18b4 <__muldf3+0xbc>
    1c8c:	2025883a 	mov	r18,r4
    1c90:	05400304 	movi	r21,12
    1c94:	04c1ffc4 	movi	r19,2047
    1c98:	058000c4 	movi	r22,3
    1c9c:	003ef406 	br	1870 <__muldf3+0x78>
    1ca0:	0021883a 	mov	r16,zero
    1ca4:	05400104 	movi	r21,4
    1ca8:	0027883a 	mov	r19,zero
    1cac:	05800044 	movi	r22,1
    1cb0:	003eef06 	br	1870 <__muldf3+0x78>
    1cb4:	ad400054 	ori	r21,r21,1
    1cb8:	0023883a 	mov	r17,zero
    1cbc:	00c00044 	movi	r3,1
    1cc0:	003efc06 	br	18b4 <__muldf3+0xbc>
    1cc4:	04000434 	movhi	r16,16
    1cc8:	000d883a 	mov	r6,zero
    1ccc:	843fffc4 	addi	r16,r16,-1
    1cd0:	04bfffc4 	movi	r18,-1
    1cd4:	00c1ffc4 	movi	r3,2047
    1cd8:	003f1c06 	br	194c <__muldf3+0x154>
    1cdc:	00800044 	movi	r2,1
    1ce0:	1105c83a 	sub	r2,r2,r4
    1ce4:	10c00e48 	cmpgei	r3,r2,57
    1ce8:	183f151e 	bne	r3,zero,1940 <__muldf3+0x148>
    1cec:	10c00808 	cmpgei	r3,r2,32
    1cf0:	1800401e 	bne	r3,zero,1df4 <__muldf3+0x5fc>
    1cf4:	42010784 	addi	r8,r8,1054
    1cf8:	8206983a 	sll	r3,r16,r8
    1cfc:	9088d83a 	srl	r4,r18,r2
    1d00:	9210983a 	sll	r8,r18,r8
    1d04:	80a0d83a 	srl	r16,r16,r2
    1d08:	1904b03a 	or	r2,r3,r4
    1d0c:	4024c03a 	cmpne	r18,r8,zero
    1d10:	1484b03a 	or	r2,r2,r18
    1d14:	10c001cc 	andi	r3,r2,7
    1d18:	18000726 	beq	r3,zero,1d38 <__muldf3+0x540>
    1d1c:	10c003cc 	andi	r3,r2,15
    1d20:	18c00120 	cmpeqi	r3,r3,4
    1d24:	1800041e 	bne	r3,zero,1d38 <__muldf3+0x540>
    1d28:	10c00104 	addi	r3,r2,4
    1d2c:	1885803a 	cmpltu	r2,r3,r2
    1d30:	80a1883a 	add	r16,r16,r2
    1d34:	1805883a 	mov	r2,r3
    1d38:	80c0202c 	andhi	r3,r16,128
    1d3c:	18004226 	beq	r3,zero,1e48 <__muldf3+0x650>
    1d40:	00c00044 	movi	r3,1
    1d44:	0021883a 	mov	r16,zero
    1d48:	0025883a 	mov	r18,zero
    1d4c:	003eff06 	br	194c <__muldf3+0x154>
    1d50:	8080022c 	andhi	r2,r16,8
    1d54:	10000926 	beq	r2,zero,1d7c <__muldf3+0x584>
    1d58:	8880022c 	andhi	r2,r17,8
    1d5c:	1000071e 	bne	r2,zero,1d7c <__muldf3+0x584>
    1d60:	00800434 	movhi	r2,16
    1d64:	8c000234 	orhi	r16,r17,8
    1d68:	10bfffc4 	addi	r2,r2,-1
    1d6c:	80a0703a 	and	r16,r16,r2
    1d70:	b80d883a 	mov	r6,r23
    1d74:	2825883a 	mov	r18,r5
    1d78:	003fd606 	br	1cd4 <__muldf3+0x4dc>
    1d7c:	00800434 	movhi	r2,16
    1d80:	84000234 	orhi	r16,r16,8
    1d84:	10bfffc4 	addi	r2,r2,-1
    1d88:	80a0703a 	and	r16,r16,r2
    1d8c:	a00d883a 	mov	r6,r20
    1d90:	003fd006 	br	1cd4 <__muldf3+0x4dc>
    1d94:	0001fe80 	call	1fe8 <__clzsi2>
    1d98:	11000544 	addi	r4,r2,21
    1d9c:	21400748 	cmpgei	r5,r4,29
    1da0:	1007883a 	mov	r3,r2
    1da4:	d9c00017 	ldw	r7,0(sp)
    1da8:	10800804 	addi	r2,r2,32
    1dac:	283f9526 	beq	r5,zero,1c04 <__muldf3+0x40c>
    1db0:	18fffe04 	addi	r3,r3,-8
    1db4:	98e0983a 	sll	r16,r19,r3
    1db8:	0025883a 	mov	r18,zero
    1dbc:	003f9806 	br	1c20 <__muldf3+0x428>
    1dc0:	e009883a 	mov	r4,fp
    1dc4:	0001fe80 	call	1fe8 <__clzsi2>
    1dc8:	11800544 	addi	r6,r2,21
    1dcc:	31000748 	cmpgei	r4,r6,29
    1dd0:	1007883a 	mov	r3,r2
    1dd4:	10800804 	addi	r2,r2,32
    1dd8:	203f7726 	beq	r4,zero,1bb8 <__muldf3+0x3c0>
    1ddc:	1c7ffe04 	addi	r17,r3,-8
    1de0:	e462983a 	sll	r17,fp,r17
    1de4:	000b883a 	mov	r5,zero
    1de8:	003f7a06 	br	1bd4 <__muldf3+0x3dc>
    1dec:	9811883a 	mov	r8,r19
    1df0:	003f5106 	br	1b38 <__muldf3+0x340>
    1df4:	00fff844 	movi	r3,-31
    1df8:	1907c83a 	sub	r3,r3,r4
    1dfc:	10800820 	cmpeqi	r2,r2,32
    1e00:	80c6d83a 	srl	r3,r16,r3
    1e04:	1000031e 	bne	r2,zero,1e14 <__muldf3+0x61c>
    1e08:	42010f84 	addi	r8,r8,1086
    1e0c:	8220983a 	sll	r16,r16,r8
    1e10:	9424b03a 	or	r18,r18,r16
    1e14:	9024c03a 	cmpne	r18,r18,zero
    1e18:	90c4b03a 	or	r2,r18,r3
    1e1c:	148001cc 	andi	r18,r2,7
    1e20:	9000051e 	bne	r18,zero,1e38 <__muldf3+0x640>
    1e24:	0021883a 	mov	r16,zero
    1e28:	1004d0fa 	srli	r2,r2,3
    1e2c:	0007883a 	mov	r3,zero
    1e30:	14a4b03a 	or	r18,r2,r18
    1e34:	003ec506 	br	194c <__muldf3+0x154>
    1e38:	10c003cc 	andi	r3,r2,15
    1e3c:	18c00118 	cmpnei	r3,r3,4
    1e40:	0021883a 	mov	r16,zero
    1e44:	183fb81e 	bne	r3,zero,1d28 <__muldf3+0x530>
    1e48:	8006927a 	slli	r3,r16,9
    1e4c:	8024977a 	slli	r18,r16,29
    1e50:	1820d33a 	srli	r16,r3,12
    1e54:	003ff406 	br	1e28 <__muldf3+0x630>
    1e58:	00800434 	movhi	r2,16
    1e5c:	84000234 	orhi	r16,r16,8
    1e60:	10bfffc4 	addi	r2,r2,-1
    1e64:	80a0703a 	and	r16,r16,r2
    1e68:	003f9a06 	br	1cd4 <__muldf3+0x4dc>

00001e6c <__fixdfsi>:
    1e6c:	2806d53a 	srli	r3,r5,20
    1e70:	01800434 	movhi	r6,16
    1e74:	31bfffc4 	addi	r6,r6,-1
    1e78:	18c1ffcc 	andi	r3,r3,2047
    1e7c:	19c0ffd0 	cmplti	r7,r3,1023
    1e80:	2810d7fa 	srli	r8,r5,31
    1e84:	298a703a 	and	r5,r5,r6
    1e88:	3800061e 	bne	r7,zero,1ea4 <__fixdfsi+0x38>
    1e8c:	18810790 	cmplti	r2,r3,1054
    1e90:	1000061e 	bne	r2,zero,1eac <__fixdfsi+0x40>
    1e94:	00a00034 	movhi	r2,32768
    1e98:	10bfffc4 	addi	r2,r2,-1
    1e9c:	4085883a 	add	r2,r8,r2
    1ea0:	f800283a 	ret
    1ea4:	0005883a 	mov	r2,zero
    1ea8:	f800283a 	ret
    1eac:	01810cc4 	movi	r6,1075
    1eb0:	30cdc83a 	sub	r6,r6,r3
    1eb4:	30800808 	cmpgei	r2,r6,32
    1eb8:	29400434 	orhi	r5,r5,16
    1ebc:	1000071e 	bne	r2,zero,1edc <__fixdfsi+0x70>
    1ec0:	18befb44 	addi	r2,r3,-1043
    1ec4:	2884983a 	sll	r2,r5,r2
    1ec8:	2188d83a 	srl	r4,r4,r6
    1ecc:	1104b03a 	or	r2,r2,r4
    1ed0:	403ff526 	beq	r8,zero,1ea8 <__fixdfsi+0x3c>
    1ed4:	0085c83a 	sub	r2,zero,r2
    1ed8:	f800283a 	ret
    1edc:	008104c4 	movi	r2,1043
    1ee0:	10c5c83a 	sub	r2,r2,r3
    1ee4:	2884d83a 	srl	r2,r5,r2
    1ee8:	003ff906 	br	1ed0 <__fixdfsi+0x64>

00001eec <__extendsfdf2>:
    1eec:	200ad5fa 	srli	r5,r4,23
    1ef0:	defffd04 	addi	sp,sp,-12
    1ef4:	dc000015 	stw	r16,0(sp)
    1ef8:	29403fcc 	andi	r5,r5,255
    1efc:	04002034 	movhi	r16,128
    1f00:	28800044 	addi	r2,r5,1
    1f04:	dc400115 	stw	r17,4(sp)
    1f08:	843fffc4 	addi	r16,r16,-1
    1f0c:	dfc00215 	stw	ra,8(sp)
    1f10:	10803f8c 	andi	r2,r2,254
    1f14:	2022d7fa 	srli	r17,r4,31
    1f18:	8120703a 	and	r16,r16,r4
    1f1c:	10000d26 	beq	r2,zero,1f54 <__extendsfdf2+0x68>
    1f20:	8008d0fa 	srli	r4,r16,3
    1f24:	8020977a 	slli	r16,r16,29
    1f28:	28c0e004 	addi	r3,r5,896
    1f2c:	180a953a 	slli	r5,r3,20
    1f30:	880697fa 	slli	r3,r17,31
    1f34:	8005883a 	mov	r2,r16
    1f38:	290ab03a 	or	r5,r5,r4
    1f3c:	28c6b03a 	or	r3,r5,r3
    1f40:	dfc00217 	ldw	ra,8(sp)
    1f44:	dc400117 	ldw	r17,4(sp)
    1f48:	dc000017 	ldw	r16,0(sp)
    1f4c:	dec00304 	addi	sp,sp,12
    1f50:	f800283a 	ret
    1f54:	2800111e 	bne	r5,zero,1f9c <__extendsfdf2+0xb0>
    1f58:	80001926 	beq	r16,zero,1fc0 <__extendsfdf2+0xd4>
    1f5c:	8009883a 	mov	r4,r16
    1f60:	0001fe80 	call	1fe8 <__clzsi2>
    1f64:	10c002c8 	cmpgei	r3,r2,11
    1f68:	18001b1e 	bne	r3,zero,1fd8 <__extendsfdf2+0xec>
    1f6c:	010002c4 	movi	r4,11
    1f70:	2089c83a 	sub	r4,r4,r2
    1f74:	10c00544 	addi	r3,r2,21
    1f78:	810ad83a 	srl	r5,r16,r4
    1f7c:	80e0983a 	sll	r16,r16,r3
    1f80:	01000434 	movhi	r4,16
    1f84:	00c0e244 	movi	r3,905
    1f88:	213fffc4 	addi	r4,r4,-1
    1f8c:	1887c83a 	sub	r3,r3,r2
    1f90:	2908703a 	and	r4,r5,r4
    1f94:	18c1ffcc 	andi	r3,r3,2047
    1f98:	003fe406 	br	1f2c <__extendsfdf2+0x40>
    1f9c:	80000b26 	beq	r16,zero,1fcc <__extendsfdf2+0xe0>
    1fa0:	800ad0fa 	srli	r5,r16,3
    1fa4:	00800434 	movhi	r2,16
    1fa8:	10bfffc4 	addi	r2,r2,-1
    1fac:	29000234 	orhi	r4,r5,8
    1fb0:	8020977a 	slli	r16,r16,29
    1fb4:	2088703a 	and	r4,r4,r2
    1fb8:	00c1ffc4 	movi	r3,2047
    1fbc:	003fdb06 	br	1f2c <__extendsfdf2+0x40>
    1fc0:	0007883a 	mov	r3,zero
    1fc4:	0009883a 	mov	r4,zero
    1fc8:	003fd806 	br	1f2c <__extendsfdf2+0x40>
    1fcc:	00c1ffc4 	movi	r3,2047
    1fd0:	0009883a 	mov	r4,zero
    1fd4:	003fd506 	br	1f2c <__extendsfdf2+0x40>
    1fd8:	113ffd44 	addi	r4,r2,-11
    1fdc:	810a983a 	sll	r5,r16,r4
    1fe0:	0021883a 	mov	r16,zero
    1fe4:	003fe606 	br	1f80 <__extendsfdf2+0x94>

00001fe8 <__clzsi2>:
    1fe8:	00bfffd4 	movui	r2,65535
    1fec:	11000436 	bltu	r2,r4,2000 <__clzsi2+0x18>
    1ff0:	20804030 	cmpltui	r2,r4,256
    1ff4:	10000e26 	beq	r2,zero,2030 <__clzsi2+0x48>
    1ff8:	01400804 	movi	r5,32
    1ffc:	00000406 	br	2010 <__clzsi2+0x28>
    2000:	00804034 	movhi	r2,256
    2004:	20800736 	bltu	r4,r2,2024 <__clzsi2+0x3c>
    2008:	2008d63a 	srli	r4,r4,24
    200c:	01400204 	movi	r5,8
    2010:	00c00074 	movhi	r3,1
    2014:	20c7883a 	add	r3,r4,r3
    2018:	18b7d403 	ldbu	r2,-8368(r3)
    201c:	2885c83a 	sub	r2,r5,r2
    2020:	f800283a 	ret
    2024:	2008d43a 	srli	r4,r4,16
    2028:	01400404 	movi	r5,16
    202c:	003ff806 	br	2010 <__clzsi2+0x28>
    2030:	2008d23a 	srli	r4,r4,8
    2034:	01400604 	movi	r5,24
    2038:	003ff506 	br	2010 <__clzsi2+0x28>

0000203c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    203c:	defffc04 	addi	sp,sp,-16
    2040:	df000315 	stw	fp,12(sp)
    2044:	df000304 	addi	fp,sp,12
    2048:	e13fff15 	stw	r4,-4(fp)
    204c:	e17ffe15 	stw	r5,-8(fp)
    2050:	e1bffd15 	stw	r6,-12(fp)
  if (to != from)
    2054:	e0fffe17 	ldw	r3,-8(fp)
    2058:	e0bfff17 	ldw	r2,-4(fp)
    205c:	18800c26 	beq	r3,r2,2090 <alt_load_section+0x54>
  {
    while( to != end )
    2060:	00000806 	br	2084 <alt_load_section+0x48>
    {
      *to++ = *from++;
    2064:	e0ffff17 	ldw	r3,-4(fp)
    2068:	18800104 	addi	r2,r3,4
    206c:	e0bfff15 	stw	r2,-4(fp)
    2070:	e0bffe17 	ldw	r2,-8(fp)
    2074:	11000104 	addi	r4,r2,4
    2078:	e13ffe15 	stw	r4,-8(fp)
    207c:	18c00017 	ldw	r3,0(r3)
    2080:	10c00015 	stw	r3,0(r2)
    while( to != end )
    2084:	e0fffe17 	ldw	r3,-8(fp)
    2088:	e0bffd17 	ldw	r2,-12(fp)
    208c:	18bff51e 	bne	r3,r2,2064 <alt_load_section+0x28>
    }
  }
}
    2090:	0001883a 	nop
    2094:	e037883a 	mov	sp,fp
    2098:	df000017 	ldw	fp,0(sp)
    209c:	dec00104 	addi	sp,sp,4
    20a0:	f800283a 	ret

000020a4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    20a4:	defffe04 	addi	sp,sp,-8
    20a8:	dfc00115 	stw	ra,4(sp)
    20ac:	df000015 	stw	fp,0(sp)
    20b0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    20b4:	01800074 	movhi	r6,1
    20b8:	31bf3c04 	addi	r6,r6,-784
    20bc:	01400074 	movhi	r5,1
    20c0:	2978ba04 	addi	r5,r5,-7448
    20c4:	01000074 	movhi	r4,1
    20c8:	213f3c04 	addi	r4,r4,-784
    20cc:	000203c0 	call	203c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    20d0:	01800034 	movhi	r6,0
    20d4:	31808f04 	addi	r6,r6,572
    20d8:	01400034 	movhi	r5,0
    20dc:	29400804 	addi	r5,r5,32
    20e0:	01000034 	movhi	r4,0
    20e4:	21000804 	addi	r4,r4,32
    20e8:	000203c0 	call	203c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    20ec:	01800074 	movhi	r6,1
    20f0:	31b8ba04 	addi	r6,r6,-7448
    20f4:	01400074 	movhi	r5,1
    20f8:	2977d404 	addi	r5,r5,-8368
    20fc:	01000074 	movhi	r4,1
    2100:	2137d404 	addi	r4,r4,-8368
    2104:	000203c0 	call	203c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    2108:	000c9f80 	call	c9f8 <alt_dcache_flush_all>
  alt_icache_flush_all();
    210c:	000cc800 	call	cc80 <alt_icache_flush_all>
}
    2110:	0001883a 	nop
    2114:	e037883a 	mov	sp,fp
    2118:	dfc00117 	ldw	ra,4(sp)
    211c:	df000017 	ldw	fp,0(sp)
    2120:	dec00204 	addi	sp,sp,8
    2124:	f800283a 	ret

00002128 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    2128:	defffb04 	addi	sp,sp,-20
    212c:	dfc00415 	stw	ra,16(sp)
    2130:	df000315 	stw	fp,12(sp)
    2134:	df000304 	addi	fp,sp,12
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    2138:	0009883a 	mov	r4,zero
    213c:	0009e880 	call	9e88 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    2140:	0002da80 	call	2da8 <OSInit>
    2144:	01000044 	movi	r4,1
    2148:	00078200 	call	7820 <OSSemCreate>
    214c:	d0a6d915 	stw	r2,-25756(gp)
    2150:	01000044 	movi	r4,1
    2154:	00078200 	call	7820 <OSSemCreate>
    2158:	d0a6db15 	stw	r2,-25748(gp)
    215c:	d0a6ef04 	addi	r2,gp,-25668
    2160:	e0bffe15 	stw	r2,-8(fp)
    2164:	00800044 	movi	r2,1
    2168:	e0bffd8d 	sth	r2,-10(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
    216c:	e0bffd8b 	ldhu	r2,-10(fp)
    2170:	1009883a 	mov	r4,r2
    2174:	00078200 	call	7820 <OSSemCreate>
    2178:	1007883a 	mov	r3,r2
    217c:	e0bffe17 	ldw	r2,-8(fp)
    2180:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
    2184:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    2188:	0009ec40 	call	9ec4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    218c:	01800074 	movhi	r6,1
    2190:	31b81404 	addi	r6,r6,-8112
    2194:	01400074 	movhi	r5,1
    2198:	29781404 	addi	r5,r5,-8112
    219c:	01000074 	movhi	r4,1
    21a0:	21381404 	addi	r4,r4,-8112
    21a4:	000cd640 	call	cd64 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    21a8:	000cb280 	call	cb28 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    21ac:	01000074 	movhi	r4,1
    21b0:	2132e304 	addi	r4,r4,-13428
    21b4:	000da200 	call	da20 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    21b8:	d0a6d617 	ldw	r2,-25768(gp)
    21bc:	d0e6d717 	ldw	r3,-25764(gp)
    21c0:	d126d817 	ldw	r4,-25760(gp)
    21c4:	200d883a 	mov	r6,r4
    21c8:	180b883a 	mov	r5,r3
    21cc:	1009883a 	mov	r4,r2
    21d0:	00002780 	call	278 <main>
    21d4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    21d8:	01000044 	movi	r4,1
    21dc:	000c9280 	call	c928 <close>
  exit (result);
    21e0:	e13fff17 	ldw	r4,-4(fp)
    21e4:	000da340 	call	da34 <exit>

000021e8 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
    21e8:	deffdf04 	addi	sp,sp,-132
    21ec:	dfc02015 	stw	ra,128(sp)
    21f0:	df001f15 	stw	fp,124(sp)
    21f4:	df001f04 	addi	fp,sp,124
    21f8:	e13fe115 	stw	r4,-124(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
    21fc:	e0bfe404 	addi	r2,fp,-112
    2200:	100b883a 	mov	r5,r2
    2204:	01003fc4 	movi	r4,255
    2208:	00097bc0 	call	97bc <OSTaskQuery>
    220c:	e0bfe245 	stb	r2,-119(fp)
  if (err != OS_NO_ERR)
    2210:	e0bfe243 	ldbu	r2,-119(fp)
    2214:	10803fcc 	andi	r2,r2,255
    2218:	10001d1e 	bne	r2,zero,2290 <__env_lock+0xa8>
    return;

  id = tcb.OSTCBPrio;
    221c:	e0bff083 	ldbu	r2,-62(fp)
    2220:	10803fcc 	andi	r2,r2,255
    2224:	e0bfff15 	stw	r2,-4(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
    2228:	d0a6d917 	ldw	r2,-25756(gp)
    222c:	e0ffe284 	addi	r3,fp,-118
    2230:	180b883a 	mov	r5,r3
    2234:	1009883a 	mov	r4,r2
    2238:	0007ff00 	call	7ff0 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
    223c:	e0bfe3c3 	ldbu	r2,-113(fp)
    2240:	10803fcc 	andi	r2,r2,255
    2244:	10000726 	beq	r2,zero,2264 <__env_lock+0x7c>
    2248:	d0a00717 	ldw	r2,-32740(gp)
    224c:	e0ffff17 	ldw	r3,-4(fp)
    2250:	1880041e 	bne	r3,r2,2264 <__env_lock+0x7c>
  {
    /* we do; just count the recursion */

    locks++;
    2254:	d0a6da17 	ldw	r2,-25752(gp)
    2258:	10800044 	addi	r2,r2,1
    225c:	d0a6da15 	stw	r2,-25752(gp)
    locks  = 1;
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
    2260:	00000c06 	br	2294 <__env_lock+0xac>
    OSSemPend( alt_envsem, 0, &err );
    2264:	d0a6d917 	ldw	r2,-25756(gp)
    2268:	e0ffe244 	addi	r3,fp,-119
    226c:	180d883a 	mov	r6,r3
    2270:	000b883a 	mov	r5,zero
    2274:	1009883a 	mov	r4,r2
    2278:	0007b4c0 	call	7b4c <OSSemPend>
    locks  = 1;
    227c:	00800044 	movi	r2,1
    2280:	d0a6da15 	stw	r2,-25752(gp)
    lockid = id;
    2284:	e0bfff17 	ldw	r2,-4(fp)
    2288:	d0a00715 	stw	r2,-32740(gp)
  return;
    228c:	00000106 	br	2294 <__env_lock+0xac>
    return;
    2290:	0001883a 	nop
}
    2294:	e037883a 	mov	sp,fp
    2298:	dfc00117 	ldw	ra,4(sp)
    229c:	df000017 	ldw	fp,0(sp)
    22a0:	dec00204 	addi	sp,sp,8
    22a4:	f800283a 	ret

000022a8 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
    22a8:	defffd04 	addi	sp,sp,-12
    22ac:	dfc00215 	stw	ra,8(sp)
    22b0:	df000115 	stw	fp,4(sp)
    22b4:	df000104 	addi	fp,sp,4
    22b8:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    22bc:	d0a6da17 	ldw	r2,-25752(gp)
    22c0:	10000b26 	beq	r2,zero,22f0 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
    22c4:	d0a6da17 	ldw	r2,-25752(gp)
    22c8:	10bfffc4 	addi	r2,r2,-1
    22cc:	d0a6da15 	stw	r2,-25752(gp)
    22d0:	d0a6da17 	ldw	r2,-25752(gp)
    22d4:	1000071e 	bne	r2,zero,22f4 <__env_unlock+0x4c>
  {
    lockid = -1;
    22d8:	00bfffc4 	movi	r2,-1
    22dc:	d0a00715 	stw	r2,-32740(gp)
    OSSemPost( alt_envsem );
    22e0:	d0a6d917 	ldw	r2,-25756(gp)
    22e4:	1009883a 	mov	r4,r2
    22e8:	0007ed40 	call	7ed4 <OSSemPost>
    22ec:	00000106 	br	22f4 <__env_unlock+0x4c>
    return;
    22f0:	0001883a 	nop
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
    22f4:	e037883a 	mov	sp,fp
    22f8:	dfc00117 	ldw	ra,4(sp)
    22fc:	df000017 	ldw	fp,0(sp)
    2300:	dec00204 	addi	sp,sp,8
    2304:	f800283a 	ret

00002308 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
    2308:	deffdb04 	addi	sp,sp,-148
    230c:	dfc02415 	stw	ra,144(sp)
    2310:	df002315 	stw	fp,140(sp)
    2314:	df002304 	addi	fp,sp,140
    2318:	e13fdd15 	stw	r4,-140(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    231c:	e03fff15 	stw	zero,-4(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
    2320:	d0a6e543 	ldbu	r2,-25707(gp)
    2324:	10803fcc 	andi	r2,r2,255
    2328:	10800060 	cmpeqi	r2,r2,1
    232c:	10003826 	beq	r2,zero,2410 <__malloc_lock+0x108>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
    2330:	e0bfe004 	addi	r2,fp,-128
    2334:	100b883a 	mov	r5,r2
    2338:	01003fc4 	movi	r4,255
    233c:	00097bc0 	call	97bc <OSTaskQuery>
    2340:	e0bfde45 	stb	r2,-135(fp)
  if (err != OS_NO_ERR)
    2344:	e0bfde43 	ldbu	r2,-135(fp)
    2348:	10803fcc 	andi	r2,r2,255
    234c:	1000321e 	bne	r2,zero,2418 <__malloc_lock+0x110>
    return;

  id = tcb.OSTCBPrio;
    2350:	e0bfec83 	ldbu	r2,-78(fp)
    2354:	10803fcc 	andi	r2,r2,255
    2358:	e0bffe15 	stw	r2,-8(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
    235c:	d0a6db17 	ldw	r2,-25748(gp)
    2360:	e0ffde84 	addi	r3,fp,-134
    2364:	180b883a 	mov	r5,r3
    2368:	1009883a 	mov	r4,r2
    236c:	0007ff00 	call	7ff0 <OSSemQuery>
  NIOS2_READ_STATUS (context);
    2370:	0005303a 	rdctl	r2,status
    2374:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2378:	e0fffd17 	ldw	r3,-12(fp)
    237c:	00bfff84 	movi	r2,-2
    2380:	1884703a 	and	r2,r3,r2
    2384:	1001703a 	wrctl	status,r2
  return context;
    2388:	e0bffd17 	ldw	r2,-12(fp)
  
  OS_ENTER_CRITICAL();
    238c:	e0bfff15 	stw	r2,-4(fp)

  if( !semdata.OSCnt && id == lockid ) 
    2390:	e0bfde8b 	ldhu	r2,-134(fp)
    2394:	10bfffcc 	andi	r2,r2,65535
    2398:	10000d1e 	bne	r2,zero,23d0 <__malloc_lock+0xc8>
    239c:	d0a00817 	ldw	r2,-32736(gp)
    23a0:	e0fffe17 	ldw	r3,-8(fp)
    23a4:	18800a1e 	bne	r3,r2,23d0 <__malloc_lock+0xc8>
  {
    /* we do; just count the recursion */
    locks++;
    23a8:	d0a6dc17 	ldw	r2,-25744(gp)
    23ac:	10800044 	addi	r2,r2,1
    23b0:	d0a6dc15 	stw	r2,-25744(gp)
    23b4:	e0bfff17 	ldw	r2,-4(fp)
    23b8:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    23bc:	e0bffc17 	ldw	r2,-16(fp)
    23c0:	1001703a 	wrctl	status,r2
}
    23c4:	0001883a 	nop
    OS_EXIT_CRITICAL();
    23c8:	0001883a 	nop
    locks  = 1;
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
    23cc:	00001306 	br	241c <__malloc_lock+0x114>
    23d0:	e0bfff17 	ldw	r2,-4(fp)
    23d4:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    23d8:	e0bffb17 	ldw	r2,-20(fp)
    23dc:	1001703a 	wrctl	status,r2
}
    23e0:	0001883a 	nop
    OSSemPend( alt_heapsem, 0, &err );
    23e4:	d0a6db17 	ldw	r2,-25748(gp)
    23e8:	e0ffde44 	addi	r3,fp,-135
    23ec:	180d883a 	mov	r6,r3
    23f0:	000b883a 	mov	r5,zero
    23f4:	1009883a 	mov	r4,r2
    23f8:	0007b4c0 	call	7b4c <OSSemPend>
    locks  = 1;
    23fc:	00800044 	movi	r2,1
    2400:	d0a6dc15 	stw	r2,-25744(gp)
    lockid = id;
    2404:	e0bffe17 	ldw	r2,-8(fp)
    2408:	d0a00815 	stw	r2,-32736(gp)
  return;
    240c:	00000306 	br	241c <__malloc_lock+0x114>
      return;
    2410:	0001883a 	nop
    2414:	00000106 	br	241c <__malloc_lock+0x114>
    return;
    2418:	0001883a 	nop
}
    241c:	e037883a 	mov	sp,fp
    2420:	dfc00117 	ldw	ra,4(sp)
    2424:	df000017 	ldw	fp,0(sp)
    2428:	dec00204 	addi	sp,sp,8
    242c:	f800283a 	ret

00002430 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    2430:	defff804 	addi	sp,sp,-32
    2434:	dfc00715 	stw	ra,28(sp)
    2438:	df000615 	stw	fp,24(sp)
    243c:	df000604 	addi	fp,sp,24
    2440:	e13ffa15 	stw	r4,-24(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    2444:	e03fff15 	stw	zero,-4(fp)
#endif 

  if (OSRunning != OS_TRUE)
    2448:	d0a6e543 	ldbu	r2,-25707(gp)
    244c:	10803fcc 	andi	r2,r2,255
    2450:	10800060 	cmpeqi	r2,r2,1
    2454:	10002526 	beq	r2,zero,24ec <__malloc_unlock+0xbc>
  NIOS2_READ_STATUS (context);
    2458:	0005303a 	rdctl	r2,status
    245c:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2460:	e0fffe17 	ldw	r3,-8(fp)
    2464:	00bfff84 	movi	r2,-2
    2468:	1884703a 	and	r2,r3,r2
    246c:	1001703a 	wrctl	status,r2
  return context;
    2470:	e0bffe17 	ldw	r2,-8(fp)
      return;

  OS_ENTER_CRITICAL();
    2474:	e0bfff15 	stw	r2,-4(fp)
  if (locks == 0)
    2478:	d0a6dc17 	ldw	r2,-25744(gp)
    247c:	1000061e 	bne	r2,zero,2498 <__malloc_unlock+0x68>
    2480:	e0bfff17 	ldw	r2,-4(fp)
    2484:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
    2488:	e0bffd17 	ldw	r2,-12(fp)
    248c:	1001703a 	wrctl	status,r2
}
    2490:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
      return;
    2494:	00001606 	br	24f0 <__malloc_unlock+0xc0>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
    2498:	d0a6dc17 	ldw	r2,-25744(gp)
    249c:	10bfffc4 	addi	r2,r2,-1
    24a0:	d0a6dc15 	stw	r2,-25744(gp)
    24a4:	d0a6dc17 	ldw	r2,-25744(gp)
    24a8:	10000b1e 	bne	r2,zero,24d8 <__malloc_unlock+0xa8>
  {
    lockid = -1;
    24ac:	00bfffc4 	movi	r2,-1
    24b0:	d0a00815 	stw	r2,-32736(gp)
    24b4:	e0bfff17 	ldw	r2,-4(fp)
    24b8:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    24bc:	e0bffc17 	ldw	r2,-16(fp)
    24c0:	1001703a 	wrctl	status,r2
}
    24c4:	0001883a 	nop
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
    24c8:	d0a6db17 	ldw	r2,-25748(gp)
    24cc:	1009883a 	mov	r4,r2
    24d0:	0007ed40 	call	7ed4 <OSSemPost>
    24d4:	00000606 	br	24f0 <__malloc_unlock+0xc0>
    24d8:	e0bfff17 	ldw	r2,-4(fp)
    24dc:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    24e0:	e0bffb17 	ldw	r2,-20(fp)
    24e4:	1001703a 	wrctl	status,r2
}
    24e8:	00000106 	br	24f0 <__malloc_unlock+0xc0>
      return;
    24ec:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
    24f0:	e037883a 	mov	sp,fp
    24f4:	dfc00117 	ldw	ra,4(sp)
    24f8:	df000017 	ldw	fp,0(sp)
    24fc:	dec00204 	addi	sp,sp,8
    2500:	f800283a 	ret

00002504 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
    2504:	defff704 	addi	sp,sp,-36
    2508:	dfc00815 	stw	ra,32(sp)
    250c:	df000715 	stw	fp,28(sp)
    2510:	df000704 	addi	fp,sp,28
    2514:	e13ffb15 	stw	r4,-20(fp)
    2518:	e17ffa15 	stw	r5,-24(fp)
    251c:	e1bff915 	stw	r6,-28(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    2520:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    2524:	e0bff917 	ldw	r2,-28(fp)
    2528:	1000021e 	bne	r2,zero,2534 <OSEventNameGet+0x30>
        return (0);
    252c:	0005883a 	mov	r2,zero
    2530:	00003806 	br	2614 <OSEventNameGet+0x110>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
    2534:	e0bffb17 	ldw	r2,-20(fp)
    2538:	1000051e 	bne	r2,zero,2550 <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
    253c:	e0bff917 	ldw	r2,-28(fp)
    2540:	00c00104 	movi	r3,4
    2544:	10c00005 	stb	r3,0(r2)
        return (0);
    2548:	0005883a 	mov	r2,zero
    254c:	00003106 	br	2614 <OSEventNameGet+0x110>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    2550:	e0bffa17 	ldw	r2,-24(fp)
    2554:	1000051e 	bne	r2,zero,256c <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
    2558:	e0bff917 	ldw	r2,-28(fp)
    255c:	00c00304 	movi	r3,12
    2560:	10c00005 	stb	r3,0(r2)
        return (0);
    2564:	0005883a 	mov	r2,zero
    2568:	00002a06 	br	2614 <OSEventNameGet+0x110>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    256c:	d0a6e343 	ldbu	r2,-25715(gp)
    2570:	10803fcc 	andi	r2,r2,255
    2574:	10000526 	beq	r2,zero,258c <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
    2578:	e0bff917 	ldw	r2,-28(fp)
    257c:	00c00444 	movi	r3,17
    2580:	10c00005 	stb	r3,0(r2)
        return (0);
    2584:	0005883a 	mov	r2,zero
    2588:	00002206 	br	2614 <OSEventNameGet+0x110>
    }
    switch (pevent->OSEventType) {
    258c:	e0bffb17 	ldw	r2,-20(fp)
    2590:	10800003 	ldbu	r2,0(r2)
    2594:	10803fcc 	andi	r2,r2,255
    2598:	10bfffc4 	addi	r2,r2,-1
    259c:	10800128 	cmpgeui	r2,r2,4
    25a0:	10000526 	beq	r2,zero,25b8 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
    25a4:	e0bff917 	ldw	r2,-28(fp)
    25a8:	00c00044 	movi	r3,1
    25ac:	10c00005 	stb	r3,0(r2)
             return (0);
    25b0:	0005883a 	mov	r2,zero
    25b4:	00001706 	br	2614 <OSEventNameGet+0x110>
             break;
    25b8:	0001883a 	nop
  NIOS2_READ_STATUS (context);
    25bc:	0005303a 	rdctl	r2,status
    25c0:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    25c4:	e0fffc17 	ldw	r3,-16(fp)
    25c8:	00bfff84 	movi	r2,-2
    25cc:	1884703a 	and	r2,r3,r2
    25d0:	1001703a 	wrctl	status,r2
  return context;
    25d4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    25d8:	e0bfff15 	stw	r2,-4(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    25dc:	e0bffb17 	ldw	r2,-20(fp)
    25e0:	10800384 	addi	r2,r2,14
    25e4:	100b883a 	mov	r5,r2
    25e8:	e13ffa17 	ldw	r4,-24(fp)
    25ec:	0003fb40 	call	3fb4 <OS_StrCopy>
    25f0:	e0bffec5 	stb	r2,-5(fp)
    25f4:	e0bfff17 	ldw	r2,-4(fp)
    25f8:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
    25fc:	e0bffd17 	ldw	r2,-12(fp)
    2600:	1001703a 	wrctl	status,r2
}
    2604:	0001883a 	nop
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    2608:	e0bff917 	ldw	r2,-28(fp)
    260c:	10000005 	stb	zero,0(r2)
    return (len);
    2610:	e0bffec3 	ldbu	r2,-5(fp)
}
    2614:	e037883a 	mov	sp,fp
    2618:	dfc00117 	ldw	ra,4(sp)
    261c:	df000017 	ldw	fp,0(sp)
    2620:	dec00204 	addi	sp,sp,8
    2624:	f800283a 	ret

00002628 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
    2628:	defff604 	addi	sp,sp,-40
    262c:	dfc00915 	stw	ra,36(sp)
    2630:	df000815 	stw	fp,32(sp)
    2634:	df000804 	addi	fp,sp,32
    2638:	e13ffa15 	stw	r4,-24(fp)
    263c:	e17ff915 	stw	r5,-28(fp)
    2640:	e1bff815 	stw	r6,-32(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    2644:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    2648:	e0bff817 	ldw	r2,-32(fp)
    264c:	10004226 	beq	r2,zero,2758 <OSEventNameSet+0x130>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
    2650:	e0bffa17 	ldw	r2,-24(fp)
    2654:	1000041e 	bne	r2,zero,2668 <OSEventNameSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
    2658:	e0bff817 	ldw	r2,-32(fp)
    265c:	00c00104 	movi	r3,4
    2660:	10c00005 	stb	r3,0(r2)
        return;
    2664:	00003d06 	br	275c <OSEventNameSet+0x134>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    2668:	e0bff917 	ldw	r2,-28(fp)
    266c:	1000041e 	bne	r2,zero,2680 <OSEventNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
    2670:	e0bff817 	ldw	r2,-32(fp)
    2674:	00c00304 	movi	r3,12
    2678:	10c00005 	stb	r3,0(r2)
        return;
    267c:	00003706 	br	275c <OSEventNameSet+0x134>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    2680:	d0a6e343 	ldbu	r2,-25715(gp)
    2684:	10803fcc 	andi	r2,r2,255
    2688:	10000426 	beq	r2,zero,269c <OSEventNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
    268c:	e0bff817 	ldw	r2,-32(fp)
    2690:	00c00484 	movi	r3,18
    2694:	10c00005 	stb	r3,0(r2)
        return;
    2698:	00003006 	br	275c <OSEventNameSet+0x134>
    }
    switch (pevent->OSEventType) {
    269c:	e0bffa17 	ldw	r2,-24(fp)
    26a0:	10800003 	ldbu	r2,0(r2)
    26a4:	10803fcc 	andi	r2,r2,255
    26a8:	10bfffc4 	addi	r2,r2,-1
    26ac:	10800128 	cmpgeui	r2,r2,4
    26b0:	10000426 	beq	r2,zero,26c4 <OSEventNameSet+0x9c>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
    26b4:	e0bff817 	ldw	r2,-32(fp)
    26b8:	00c00044 	movi	r3,1
    26bc:	10c00005 	stb	r3,0(r2)
             return;
    26c0:	00002606 	br	275c <OSEventNameSet+0x134>
             break;
    26c4:	0001883a 	nop
  NIOS2_READ_STATUS (context);
    26c8:	0005303a 	rdctl	r2,status
    26cc:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    26d0:	e0fffd17 	ldw	r3,-12(fp)
    26d4:	00bfff84 	movi	r2,-2
    26d8:	1884703a 	and	r2,r3,r2
    26dc:	1001703a 	wrctl	status,r2
  return context;
    26e0:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    26e4:	e0bfff15 	stw	r2,-4(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    26e8:	e13ff917 	ldw	r4,-28(fp)
    26ec:	00040280 	call	4028 <OS_StrLen>
    26f0:	e0bffec5 	stb	r2,-5(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
    26f4:	e0bffec3 	ldbu	r2,-5(fp)
    26f8:	10800830 	cmpltui	r2,r2,32
    26fc:	1000091e 	bne	r2,zero,2724 <OSEventNameSet+0xfc>
    2700:	e0bfff17 	ldw	r2,-4(fp)
    2704:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    2708:	e0bffc17 	ldw	r2,-16(fp)
    270c:	1001703a 	wrctl	status,r2
}
    2710:	0001883a 	nop
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
    2714:	e0bff817 	ldw	r2,-32(fp)
    2718:	00c002c4 	movi	r3,11
    271c:	10c00005 	stb	r3,0(r2)
        return;
    2720:	00000e06 	br	275c <OSEventNameSet+0x134>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    2724:	e0bffa17 	ldw	r2,-24(fp)
    2728:	10800384 	addi	r2,r2,14
    272c:	e17ff917 	ldw	r5,-28(fp)
    2730:	1009883a 	mov	r4,r2
    2734:	0003fb40 	call	3fb4 <OS_StrCopy>
    2738:	e0bfff17 	ldw	r2,-4(fp)
    273c:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    2740:	e0bffb17 	ldw	r2,-20(fp)
    2744:	1001703a 	wrctl	status,r2
}
    2748:	0001883a 	nop
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    274c:	e0bff817 	ldw	r2,-32(fp)
    2750:	10000005 	stb	zero,0(r2)
    2754:	00000106 	br	275c <OSEventNameSet+0x134>
        return;
    2758:	0001883a 	nop
}
    275c:	e037883a 	mov	sp,fp
    2760:	dfc00117 	ldw	ra,4(sp)
    2764:	df000017 	ldw	fp,0(sp)
    2768:	dec00204 	addi	sp,sp,8
    276c:	f800283a 	ret

00002770 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
    2770:	deffed04 	addi	sp,sp,-76
    2774:	dfc01215 	stw	ra,72(sp)
    2778:	df001115 	stw	fp,68(sp)
    277c:	df001104 	addi	fp,sp,68
    2780:	e13ff215 	stw	r4,-56(fp)
    2784:	e17ff115 	stw	r5,-60(fp)
    2788:	e1bff015 	stw	r6,-64(fp)
    278c:	3805883a 	mov	r2,r7
    2790:	e0bfef0d 	sth	r2,-68(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
    2794:	e03ffb15 	stw	zero,-20(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
    2798:	e0800217 	ldw	r2,8(fp)
    279c:	1000021e 	bne	r2,zero,27a8 <OSEventPendMulti+0x38>
        return (0);
    27a0:	0005883a 	mov	r2,zero
    27a4:	00017b06 	br	2d94 <OSEventPendMulti+0x624>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
    27a8:	e0bff217 	ldw	r2,-56(fp)
    27ac:	1000051e 	bne	r2,zero,27c4 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
    27b0:	e0800217 	ldw	r2,8(fp)
    27b4:	00c00104 	movi	r3,4
    27b8:	10c00005 	stb	r3,0(r2)
        return (0);
    27bc:	0005883a 	mov	r2,zero
    27c0:	00017406 	br	2d94 <OSEventPendMulti+0x624>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
    27c4:	e0bff117 	ldw	r2,-60(fp)
    27c8:	1000051e 	bne	r2,zero,27e0 <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
    27cc:	e0800217 	ldw	r2,8(fp)
    27d0:	00c00104 	movi	r3,4
    27d4:	10c00005 	stb	r3,0(r2)
        return (0);
    27d8:	0005883a 	mov	r2,zero
    27dc:	00016d06 	br	2d94 <OSEventPendMulti+0x624>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
    27e0:	e0bff017 	ldw	r2,-64(fp)
    27e4:	1000051e 	bne	r2,zero,27fc <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
    27e8:	e0800217 	ldw	r2,8(fp)
    27ec:	00c00104 	movi	r3,4
    27f0:	10c00005 	stb	r3,0(r2)
        return (0);
    27f4:	0005883a 	mov	r2,zero
    27f8:	00016606 	br	2d94 <OSEventPendMulti+0x624>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
    27fc:	e0bff117 	ldw	r2,-60(fp)
    2800:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
    2804:	e0bff217 	ldw	r2,-56(fp)
    2808:	e0bfff15 	stw	r2,-4(fp)
    pevent      = *pevents;
    280c:	e0bfff17 	ldw	r2,-4(fp)
    2810:	10800017 	ldw	r2,0(r2)
    2814:	e0bffe15 	stw	r2,-8(fp)
    while  (pevent != (OS_EVENT *)0) {
    2818:	00001b06 	br	2888 <OSEventPendMulti+0x118>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
    281c:	e0bffe17 	ldw	r2,-8(fp)
    2820:	10800003 	ldbu	r2,0(r2)
    2824:	10803fcc 	andi	r2,r2,255
    2828:	10c000e0 	cmpeqi	r3,r2,3
    282c:	18000b1e 	bne	r3,zero,285c <OSEventPendMulti+0xec>
    2830:	10c00108 	cmpgei	r3,r2,4
    2834:	1800041e 	bne	r3,zero,2848 <OSEventPendMulti+0xd8>
    2838:	10c00060 	cmpeqi	r3,r2,1
    283c:	1800091e 	bne	r3,zero,2864 <OSEventPendMulti+0xf4>
    2840:	108000a0 	cmpeqi	r2,r2,2
    2844:	1000091e 	bne	r2,zero,286c <OSEventPendMulti+0xfc>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
    2848:	e0800217 	ldw	r2,8(fp)
    284c:	00c00044 	movi	r3,1
    2850:	10c00005 	stb	r3,0(r2)
                 return (0);
    2854:	0005883a 	mov	r2,zero
    2858:	00014e06 	br	2d94 <OSEventPendMulti+0x624>
                 break;
    285c:	0001883a 	nop
    2860:	00000306 	br	2870 <OSEventPendMulti+0x100>
                 break;
    2864:	0001883a 	nop
    2868:	00000106 	br	2870 <OSEventPendMulti+0x100>
                 break;
    286c:	0001883a 	nop
        }
        pevents++;
    2870:	e0bfff17 	ldw	r2,-4(fp)
    2874:	10800104 	addi	r2,r2,4
    2878:	e0bfff15 	stw	r2,-4(fp)
        pevent = *pevents;
    287c:	e0bfff17 	ldw	r2,-4(fp)
    2880:	10800017 	ldw	r2,0(r2)
    2884:	e0bffe15 	stw	r2,-8(fp)
    while  (pevent != (OS_EVENT *)0) {
    2888:	e0bffe17 	ldw	r2,-8(fp)
    288c:	103fe31e 	bne	r2,zero,281c <OSEventPendMulti+0xac>
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
    2890:	d0a6e343 	ldbu	r2,-25715(gp)
    2894:	10803fcc 	andi	r2,r2,255
    2898:	10000526 	beq	r2,zero,28b0 <OSEventPendMulti+0x140>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
    289c:	e0800217 	ldw	r2,8(fp)
    28a0:	00c00084 	movi	r3,2
    28a4:	10c00005 	stb	r3,0(r2)
        return (0);
    28a8:	0005883a 	mov	r2,zero
    28ac:	00013906 	br	2d94 <OSEventPendMulti+0x624>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
    28b0:	d0a6e383 	ldbu	r2,-25714(gp)
    28b4:	10803fcc 	andi	r2,r2,255
    28b8:	10000526 	beq	r2,zero,28d0 <OSEventPendMulti+0x160>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
    28bc:	e0800217 	ldw	r2,8(fp)
    28c0:	00c00344 	movi	r3,13
    28c4:	10c00005 	stb	r3,0(r2)
        return (0);
    28c8:	0005883a 	mov	r2,zero
    28cc:	00013106 	br	2d94 <OSEventPendMulti+0x624>
  NIOS2_READ_STATUS (context);
    28d0:	0005303a 	rdctl	r2,status
    28d4:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    28d8:	e0fff917 	ldw	r3,-28(fp)
    28dc:	00bfff84 	movi	r2,-2
    28e0:	1884703a 	and	r2,r3,r2
    28e4:	1001703a 	wrctl	status,r2
  return context;
    28e8:	e0bff917 	ldw	r2,-28(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
    28ec:	e0bffb15 	stw	r2,-20(fp)
    events_rdy     =  OS_FALSE;
    28f0:	e03ffdc5 	stb	zero,-9(fp)
    events_rdy_nbr =  0;
    28f4:	e03ffd0d 	sth	zero,-12(fp)
    events_stat    =  OS_STAT_RDY;
    28f8:	e03ffcc5 	stb	zero,-13(fp)
    pevents        =  pevents_pend;
    28fc:	e0bff217 	ldw	r2,-56(fp)
    2900:	e0bfff15 	stw	r2,-4(fp)
    pevent         = *pevents;
    2904:	e0bfff17 	ldw	r2,-4(fp)
    2908:	10800017 	ldw	r2,0(r2)
    290c:	e0bffe15 	stw	r2,-8(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
    2910:	00008406 	br	2b24 <OSEventPendMulti+0x3b4>
        switch (pevent->OSEventType) {
    2914:	e0bffe17 	ldw	r2,-8(fp)
    2918:	10800003 	ldbu	r2,0(r2)
    291c:	10803fcc 	andi	r2,r2,255
    2920:	10c000e0 	cmpeqi	r3,r2,3
    2924:	1800071e 	bne	r3,zero,2944 <OSEventPendMulti+0x1d4>
    2928:	10c00108 	cmpgei	r3,r2,4
    292c:	18006b1e 	bne	r3,zero,2adc <OSEventPendMulti+0x36c>
    2930:	10c00060 	cmpeqi	r3,r2,1
    2934:	1800201e 	bne	r3,zero,29b8 <OSEventPendMulti+0x248>
    2938:	108000a0 	cmpeqi	r2,r2,2
    293c:	1000381e 	bne	r2,zero,2a20 <OSEventPendMulti+0x2b0>
    2940:	00006606 	br	2adc <OSEventPendMulti+0x36c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
    2944:	e0bffe17 	ldw	r2,-8(fp)
    2948:	1080020b 	ldhu	r2,8(r2)
    294c:	10bfffcc 	andi	r2,r2,65535
    2950:	10001526 	beq	r2,zero,29a8 <OSEventPendMulti+0x238>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
    2954:	e0bffe17 	ldw	r2,-8(fp)
    2958:	1080020b 	ldhu	r2,8(r2)
    295c:	10bfffc4 	addi	r2,r2,-1
    2960:	1007883a 	mov	r3,r2
    2964:	e0bffe17 	ldw	r2,-8(fp)
    2968:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
    296c:	e0bff117 	ldw	r2,-60(fp)
    2970:	10c00104 	addi	r3,r2,4
    2974:	e0fff115 	stw	r3,-60(fp)
    2978:	e0fffe17 	ldw	r3,-8(fp)
    297c:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
    2980:	00800044 	movi	r2,1
    2984:	e0bffdc5 	stb	r2,-9(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
    2988:	e0bff017 	ldw	r2,-64(fp)
    298c:	10c00104 	addi	r3,r2,4
    2990:	e0fff015 	stw	r3,-64(fp)
    2994:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
    2998:	e0bffd0b 	ldhu	r2,-12(fp)
    299c:	10800044 	addi	r2,r2,1
    29a0:	e0bffd0d 	sth	r2,-12(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
    29a4:	00005906 	br	2b0c <OSEventPendMulti+0x39c>
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
    29a8:	e0bffcc3 	ldbu	r2,-13(fp)
    29ac:	10800054 	ori	r2,r2,1
    29b0:	e0bffcc5 	stb	r2,-13(fp)
                 break;
    29b4:	00005506 	br	2b0c <OSEventPendMulti+0x39c>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
    29b8:	e0bffe17 	ldw	r2,-8(fp)
    29bc:	10800117 	ldw	r2,4(r2)
    29c0:	10001326 	beq	r2,zero,2a10 <OSEventPendMulti+0x2a0>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
    29c4:	e0bff017 	ldw	r2,-64(fp)
    29c8:	10c00104 	addi	r3,r2,4
    29cc:	e0fff015 	stw	r3,-64(fp)
    29d0:	e0fffe17 	ldw	r3,-8(fp)
    29d4:	18c00117 	ldw	r3,4(r3)
    29d8:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
    29dc:	e0bffe17 	ldw	r2,-8(fp)
    29e0:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
    29e4:	e0bff117 	ldw	r2,-60(fp)
    29e8:	10c00104 	addi	r3,r2,4
    29ec:	e0fff115 	stw	r3,-60(fp)
    29f0:	e0fffe17 	ldw	r3,-8(fp)
    29f4:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
    29f8:	00800044 	movi	r2,1
    29fc:	e0bffdc5 	stb	r2,-9(fp)
                      events_rdy_nbr++;
    2a00:	e0bffd0b 	ldhu	r2,-12(fp)
    2a04:	10800044 	addi	r2,r2,1
    2a08:	e0bffd0d 	sth	r2,-12(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
    2a0c:	00003f06 	br	2b0c <OSEventPendMulti+0x39c>
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
    2a10:	e0bffcc3 	ldbu	r2,-13(fp)
    2a14:	10800094 	ori	r2,r2,2
    2a18:	e0bffcc5 	stb	r2,-13(fp)
                 break;
    2a1c:	00003b06 	br	2b0c <OSEventPendMulti+0x39c>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
    2a20:	e0bffe17 	ldw	r2,-8(fp)
    2a24:	10800117 	ldw	r2,4(r2)
    2a28:	e0bffa15 	stw	r2,-24(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
    2a2c:	e0bffa17 	ldw	r2,-24(fp)
    2a30:	1080058b 	ldhu	r2,22(r2)
    2a34:	10bfffcc 	andi	r2,r2,65535
    2a38:	10002426 	beq	r2,zero,2acc <OSEventPendMulti+0x35c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
    2a3c:	e0bffa17 	ldw	r2,-24(fp)
    2a40:	10c00417 	ldw	r3,16(r2)
    2a44:	19000104 	addi	r4,r3,4
    2a48:	e0bffa17 	ldw	r2,-24(fp)
    2a4c:	11000415 	stw	r4,16(r2)
    2a50:	e0bff017 	ldw	r2,-64(fp)
    2a54:	11000104 	addi	r4,r2,4
    2a58:	e13ff015 	stw	r4,-64(fp)
    2a5c:	18c00017 	ldw	r3,0(r3)
    2a60:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
    2a64:	e0bffa17 	ldw	r2,-24(fp)
    2a68:	10c00417 	ldw	r3,16(r2)
    2a6c:	e0bffa17 	ldw	r2,-24(fp)
    2a70:	10800217 	ldw	r2,8(r2)
    2a74:	1880041e 	bne	r3,r2,2a88 <OSEventPendMulti+0x318>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
    2a78:	e0bffa17 	ldw	r2,-24(fp)
    2a7c:	10c00117 	ldw	r3,4(r2)
    2a80:	e0bffa17 	ldw	r2,-24(fp)
    2a84:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
    2a88:	e0bffa17 	ldw	r2,-24(fp)
    2a8c:	1080058b 	ldhu	r2,22(r2)
    2a90:	10bfffc4 	addi	r2,r2,-1
    2a94:	1007883a 	mov	r3,r2
    2a98:	e0bffa17 	ldw	r2,-24(fp)
    2a9c:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
    2aa0:	e0bff117 	ldw	r2,-60(fp)
    2aa4:	10c00104 	addi	r3,r2,4
    2aa8:	e0fff115 	stw	r3,-60(fp)
    2aac:	e0fffe17 	ldw	r3,-8(fp)
    2ab0:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
    2ab4:	00800044 	movi	r2,1
    2ab8:	e0bffdc5 	stb	r2,-9(fp)
                      events_rdy_nbr++;
    2abc:	e0bffd0b 	ldhu	r2,-12(fp)
    2ac0:	10800044 	addi	r2,r2,1
    2ac4:	e0bffd0d 	sth	r2,-12(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
    2ac8:	00001006 	br	2b0c <OSEventPendMulti+0x39c>
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
    2acc:	e0bffcc3 	ldbu	r2,-13(fp)
    2ad0:	10800114 	ori	r2,r2,4
    2ad4:	e0bffcc5 	stb	r2,-13(fp)
                 break;
    2ad8:	00000c06 	br	2b0c <OSEventPendMulti+0x39c>
    2adc:	e0bffb17 	ldw	r2,-20(fp)
    2ae0:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
    2ae4:	e0bff817 	ldw	r2,-32(fp)
    2ae8:	1001703a 	wrctl	status,r2
}
    2aec:	0001883a 	nop

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
    2af0:	e0bff117 	ldw	r2,-60(fp)
    2af4:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
    2af8:	e0800217 	ldw	r2,8(fp)
    2afc:	00c00044 	movi	r3,1
    2b00:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
    2b04:	e0bffd0b 	ldhu	r2,-12(fp)
    2b08:	0000a206 	br	2d94 <OSEventPendMulti+0x624>
        }
        pevents++;
    2b0c:	e0bfff17 	ldw	r2,-4(fp)
    2b10:	10800104 	addi	r2,r2,4
    2b14:	e0bfff15 	stw	r2,-4(fp)
        pevent = *pevents;
    2b18:	e0bfff17 	ldw	r2,-4(fp)
    2b1c:	10800017 	ldw	r2,0(r2)
    2b20:	e0bffe15 	stw	r2,-8(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
    2b24:	e0bffe17 	ldw	r2,-8(fp)
    2b28:	103f7a1e 	bne	r2,zero,2914 <OSEventPendMulti+0x1a4>
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
    2b2c:	e0bffdc3 	ldbu	r2,-9(fp)
    2b30:	10800058 	cmpnei	r2,r2,1
    2b34:	10000b1e 	bne	r2,zero,2b64 <OSEventPendMulti+0x3f4>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
    2b38:	e0bff117 	ldw	r2,-60(fp)
    2b3c:	10000015 	stw	zero,0(r2)
    2b40:	e0bffb17 	ldw	r2,-20(fp)
    2b44:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context);
    2b48:	e0bff717 	ldw	r2,-36(fp)
    2b4c:	1001703a 	wrctl	status,r2
}
    2b50:	0001883a 	nop
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
    2b54:	e0800217 	ldw	r2,8(fp)
    2b58:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
    2b5c:	e0bffd0b 	ldhu	r2,-12(fp)
    2b60:	00008c06 	br	2d94 <OSEventPendMulti+0x624>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
    2b64:	d0a6e717 	ldw	r2,-25700(gp)
    2b68:	10800c03 	ldbu	r2,48(r2)
    2b6c:	e0fffcc3 	ldbu	r3,-13(fp)
    2b70:	1884b03a 	or	r2,r3,r2
    2b74:	1009883a 	mov	r4,r2
    2b78:	d0a6e717 	ldw	r2,-25700(gp)
    2b7c:	00ffe004 	movi	r3,-128
    2b80:	20c6b03a 	or	r3,r4,r3
    2b84:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    2b88:	d0a6e717 	ldw	r2,-25700(gp)
    2b8c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
    2b90:	d0a6e717 	ldw	r2,-25700(gp)
    2b94:	e0ffef0b 	ldhu	r3,-68(fp)
    2b98:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
    2b9c:	e13ff217 	ldw	r4,-56(fp)
    2ba0:	00036d80 	call	36d8 <OS_EventTaskWaitMulti>
    2ba4:	e0bffb17 	ldw	r2,-20(fp)
    2ba8:	e0bff515 	stw	r2,-44(fp)
  NIOS2_WRITE_STATUS (context);
    2bac:	e0bff517 	ldw	r2,-44(fp)
    2bb0:	1001703a 	wrctl	status,r2
}
    2bb4:	0001883a 	nop

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
    2bb8:	0003e7c0 	call	3e7c <OS_Sched>
  NIOS2_READ_STATUS (context);
    2bbc:	0005303a 	rdctl	r2,status
    2bc0:	e0bff615 	stw	r2,-40(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2bc4:	e0fff617 	ldw	r3,-40(fp)
    2bc8:	00bfff84 	movi	r2,-2
    2bcc:	1884703a 	and	r2,r3,r2
    2bd0:	1001703a 	wrctl	status,r2
  return context;
    2bd4:	e0bff617 	ldw	r2,-40(fp)
    OS_ENTER_CRITICAL();
    2bd8:	e0bffb15 	stw	r2,-20(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
    2bdc:	d0a6e717 	ldw	r2,-25700(gp)
    2be0:	10800c43 	ldbu	r2,49(r2)
    2be4:	10803fcc 	andi	r2,r2,255
    2be8:	10000226 	beq	r2,zero,2bf4 <OSEventPendMulti+0x484>
    2bec:	10800098 	cmpnei	r2,r2,2
    2bf0:	1000181e 	bne	r2,zero,2c54 <OSEventPendMulti+0x4e4>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
    2bf4:	d0a6e717 	ldw	r2,-25700(gp)
    2bf8:	10800717 	ldw	r2,28(r2)
    2bfc:	e0bffe15 	stw	r2,-8(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
    2c00:	e0bffe17 	ldw	r2,-8(fp)
    2c04:	10000b26 	beq	r2,zero,2c34 <OSEventPendMulti+0x4c4>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
    2c08:	e0bff117 	ldw	r2,-60(fp)
    2c0c:	10c00104 	addi	r3,r2,4
    2c10:	e0fff115 	stw	r3,-60(fp)
    2c14:	e0fffe17 	ldw	r3,-8(fp)
    2c18:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
    2c1c:	e0bff117 	ldw	r2,-60(fp)
    2c20:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
    2c24:	e0bffd0b 	ldhu	r2,-12(fp)
    2c28:	10800044 	addi	r2,r2,1
    2c2c:	e0bffd0d 	sth	r2,-12(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
    2c30:	00000d06 	br	2c68 <OSEventPendMulti+0x4f8>
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
    2c34:	d0a6e717 	ldw	r2,-25700(gp)
    2c38:	00c00044 	movi	r3,1
    2c3c:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
    2c40:	d0a6e717 	ldw	r2,-25700(gp)
    2c44:	e17ff217 	ldw	r5,-56(fp)
    2c48:	1009883a 	mov	r4,r2
    2c4c:	00038d00 	call	38d0 <OS_EventTaskRemoveMulti>
			 break;
    2c50:	00000506 	br	2c68 <OSEventPendMulti+0x4f8>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
    2c54:	d0a6e717 	ldw	r2,-25700(gp)
    2c58:	e17ff217 	ldw	r5,-56(fp)
    2c5c:	1009883a 	mov	r4,r2
    2c60:	00038d00 	call	38d0 <OS_EventTaskRemoveMulti>
             break;
    2c64:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
    2c68:	d0a6e717 	ldw	r2,-25700(gp)
    2c6c:	10800c43 	ldbu	r2,49(r2)
    2c70:	10803fcc 	andi	r2,r2,255
    2c74:	10000326 	beq	r2,zero,2c84 <OSEventPendMulti+0x514>
    2c78:	108000a0 	cmpeqi	r2,r2,2
    2c7c:	1000251e 	bne	r2,zero,2d14 <OSEventPendMulti+0x5a4>
    2c80:	00002c06 	br	2d34 <OSEventPendMulti+0x5c4>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
    2c84:	e0bffe17 	ldw	r2,-8(fp)
    2c88:	10800003 	ldbu	r2,0(r2)
    2c8c:	10803fcc 	andi	r2,r2,255
    2c90:	10c000c8 	cmpgei	r3,r2,3
    2c94:	1800021e 	bne	r3,zero,2ca0 <OSEventPendMulti+0x530>
    2c98:	00800816 	blt	zero,r2,2cbc <OSEventPendMulti+0x54c>
    2c9c:	00000e06 	br	2cd8 <OSEventPendMulti+0x568>
    2ca0:	108000d8 	cmpnei	r2,r2,3
    2ca4:	10000c1e 	bne	r2,zero,2cd8 <OSEventPendMulti+0x568>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
    2ca8:	e0bff017 	ldw	r2,-64(fp)
    2cac:	10c00104 	addi	r3,r2,4
    2cb0:	e0fff015 	stw	r3,-64(fp)
    2cb4:	10000015 	stw	zero,0(r2)
                      break;
    2cb8:	00001306 	br	2d08 <OSEventPendMulti+0x598>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
    2cbc:	d0e6e717 	ldw	r3,-25700(gp)
    2cc0:	e0bff017 	ldw	r2,-64(fp)
    2cc4:	11000104 	addi	r4,r2,4
    2cc8:	e13ff015 	stw	r4,-64(fp)
    2ccc:	18c00917 	ldw	r3,36(r3)
    2cd0:	10c00015 	stw	r3,0(r2)
                      break;
    2cd4:	00000c06 	br	2d08 <OSEventPendMulti+0x598>
    2cd8:	e0bffb17 	ldw	r2,-20(fp)
    2cdc:	e0bff415 	stw	r2,-48(fp)
  NIOS2_WRITE_STATUS (context);
    2ce0:	e0bff417 	ldw	r2,-48(fp)
    2ce4:	1001703a 	wrctl	status,r2
}
    2ce8:	0001883a 	nop

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
    2cec:	e0bff117 	ldw	r2,-60(fp)
    2cf0:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
    2cf4:	e0800217 	ldw	r2,8(fp)
    2cf8:	00c00044 	movi	r3,1
    2cfc:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
    2d00:	e0bffd0b 	ldhu	r2,-12(fp)
    2d04:	00002306 	br	2d94 <OSEventPendMulti+0x624>
             }
            *perr = OS_ERR_NONE;
    2d08:	e0800217 	ldw	r2,8(fp)
    2d0c:	10000005 	stb	zero,0(r2)
             break;
    2d10:	00001006 	br	2d54 <OSEventPendMulti+0x5e4>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
    2d14:	e0bff017 	ldw	r2,-64(fp)
    2d18:	10c00104 	addi	r3,r2,4
    2d1c:	e0fff015 	stw	r3,-64(fp)
    2d20:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
    2d24:	e0800217 	ldw	r2,8(fp)
    2d28:	00c00384 	movi	r3,14
    2d2c:	10c00005 	stb	r3,0(r2)
             break;
    2d30:	00000806 	br	2d54 <OSEventPendMulti+0x5e4>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
    2d34:	e0bff017 	ldw	r2,-64(fp)
    2d38:	10c00104 	addi	r3,r2,4
    2d3c:	e0fff015 	stw	r3,-64(fp)
    2d40:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
    2d44:	e0800217 	ldw	r2,8(fp)
    2d48:	00c00284 	movi	r3,10
    2d4c:	10c00005 	stb	r3,0(r2)
             break;
    2d50:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
    2d54:	d0a6e717 	ldw	r2,-25700(gp)
    2d58:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
    2d5c:	d0a6e717 	ldw	r2,-25700(gp)
    2d60:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
    2d64:	d0a6e717 	ldw	r2,-25700(gp)
    2d68:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    2d6c:	d0a6e717 	ldw	r2,-25700(gp)
    2d70:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
    2d74:	d0a6e717 	ldw	r2,-25700(gp)
    2d78:	10000915 	stw	zero,36(r2)
    2d7c:	e0bffb17 	ldw	r2,-20(fp)
    2d80:	e0bff315 	stw	r2,-52(fp)
  NIOS2_WRITE_STATUS (context);
    2d84:	e0bff317 	ldw	r2,-52(fp)
    2d88:	1001703a 	wrctl	status,r2
}
    2d8c:	0001883a 	nop
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
    2d90:	e0bffd0b 	ldhu	r2,-12(fp)
}
    2d94:	e037883a 	mov	sp,fp
    2d98:	dfc00117 	ldw	ra,4(sp)
    2d9c:	df000017 	ldw	fp,0(sp)
    2da0:	dec00204 	addi	sp,sp,8
    2da4:	f800283a 	ret

00002da8 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
    2da8:	defffe04 	addi	sp,sp,-8
    2dac:	dfc00115 	stw	ra,4(sp)
    2db0:	df000015 	stw	fp,0(sp)
    2db4:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
    2db8:	000d6940 	call	d694 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
    2dbc:	0003b180 	call	3b18 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
    2dc0:	0003b600 	call	3b60 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
    2dc4:	0003cd40 	call	3cd4 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
    2dc8:	0003a380 	call	3a38 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
    2dcc:	0005c200 	call	5c20 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
    2dd0:	00065440 	call	6544 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
    2dd4:	00076c40 	call	76c4 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
    2dd8:	0003bcc0 	call	3bcc <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
    2ddc:	0003c500 	call	3c50 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
    2de0:	000d6b40 	call	d6b4 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
    2de4:	00045440 	call	4544 <OSDebugInit>
#endif
}
    2de8:	0001883a 	nop
    2dec:	e037883a 	mov	sp,fp
    2df0:	dfc00117 	ldw	ra,4(sp)
    2df4:	df000017 	ldw	fp,0(sp)
    2df8:	dec00204 	addi	sp,sp,8
    2dfc:	f800283a 	ret

00002e00 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
    2e00:	deffff04 	addi	sp,sp,-4
    2e04:	df000015 	stw	fp,0(sp)
    2e08:	d839883a 	mov	fp,sp
    if (OSRunning == OS_TRUE) {
    2e0c:	d0a6e543 	ldbu	r2,-25707(gp)
    2e10:	10803fcc 	andi	r2,r2,255
    2e14:	10800058 	cmpnei	r2,r2,1
    2e18:	1000071e 	bne	r2,zero,2e38 <OSIntEnter+0x38>
        if (OSIntNesting < 255u) {
    2e1c:	d0a6e343 	ldbu	r2,-25715(gp)
    2e20:	10803fcc 	andi	r2,r2,255
    2e24:	10803fe0 	cmpeqi	r2,r2,255
    2e28:	1000031e 	bne	r2,zero,2e38 <OSIntEnter+0x38>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
    2e2c:	d0a6e343 	ldbu	r2,-25715(gp)
    2e30:	10800044 	addi	r2,r2,1
    2e34:	d0a6e345 	stb	r2,-25715(gp)
        }
    }
}
    2e38:	0001883a 	nop
    2e3c:	e037883a 	mov	sp,fp
    2e40:	df000017 	ldw	fp,0(sp)
    2e44:	dec00104 	addi	sp,sp,4
    2e48:	f800283a 	ret

00002e4c <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
    2e4c:	defffb04 	addi	sp,sp,-20
    2e50:	dfc00415 	stw	ra,16(sp)
    2e54:	df000315 	stw	fp,12(sp)
    2e58:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    2e5c:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {
    2e60:	d0a6e543 	ldbu	r2,-25707(gp)
    2e64:	10803fcc 	andi	r2,r2,255
    2e68:	10800058 	cmpnei	r2,r2,1
    2e6c:	10002e1e 	bne	r2,zero,2f28 <OSIntExit+0xdc>
  NIOS2_READ_STATUS (context);
    2e70:	0005303a 	rdctl	r2,status
    2e74:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2e78:	e0fffe17 	ldw	r3,-8(fp)
    2e7c:	00bfff84 	movi	r2,-2
    2e80:	1884703a 	and	r2,r3,r2
    2e84:	1001703a 	wrctl	status,r2
  return context;
    2e88:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
    2e8c:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
    2e90:	d0a6e343 	ldbu	r2,-25715(gp)
    2e94:	10803fcc 	andi	r2,r2,255
    2e98:	10000326 	beq	r2,zero,2ea8 <OSIntExit+0x5c>
            OSIntNesting--;
    2e9c:	d0a6e343 	ldbu	r2,-25715(gp)
    2ea0:	10bfffc4 	addi	r2,r2,-1
    2ea4:	d0a6e345 	stb	r2,-25715(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
    2ea8:	d0a6e343 	ldbu	r2,-25715(gp)
    2eac:	10803fcc 	andi	r2,r2,255
    2eb0:	1000181e 	bne	r2,zero,2f14 <OSIntExit+0xc8>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
    2eb4:	d0a6e383 	ldbu	r2,-25714(gp)
    2eb8:	10803fcc 	andi	r2,r2,255
    2ebc:	1000151e 	bne	r2,zero,2f14 <OSIntExit+0xc8>
                OS_SchedNew();
    2ec0:	0003f480 	call	3f48 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
    2ec4:	d0e6e403 	ldbu	r3,-25712(gp)
    2ec8:	d0a6e3c3 	ldbu	r2,-25713(gp)
    2ecc:	18c03fcc 	andi	r3,r3,255
    2ed0:	10803fcc 	andi	r2,r2,255
    2ed4:	18800f26 	beq	r3,r2,2f14 <OSIntExit+0xc8>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
    2ed8:	d0a6e403 	ldbu	r2,-25712(gp)
    2edc:	10803fcc 	andi	r2,r2,255
    2ee0:	100690ba 	slli	r3,r2,2
    2ee4:	008000b4 	movhi	r2,2
    2ee8:	1885883a 	add	r2,r3,r2
    2eec:	10a5ac17 	ldw	r2,-26960(r2)
    2ef0:	d0a6e915 	stw	r2,-25692(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
    2ef4:	d0a6e917 	ldw	r2,-25692(gp)
    2ef8:	10c00e17 	ldw	r3,56(r2)
    2efc:	18c00044 	addi	r3,r3,1
    2f00:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
    2f04:	d0a6dd17 	ldw	r2,-25740(gp)
    2f08:	10800044 	addi	r2,r2,1
    2f0c:	d0a6dd15 	stw	r2,-25740(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
    2f10:	000d3d00 	call	d3d0 <OSCtxSw>
    2f14:	e0bfff17 	ldw	r2,-4(fp)
    2f18:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
    2f1c:	e0bffd17 	ldw	r2,-12(fp)
    2f20:	1001703a 	wrctl	status,r2
}
    2f24:	0001883a 	nop
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
    2f28:	0001883a 	nop
    2f2c:	e037883a 	mov	sp,fp
    2f30:	dfc00117 	ldw	ra,4(sp)
    2f34:	df000017 	ldw	fp,0(sp)
    2f38:	dec00204 	addi	sp,sp,8
    2f3c:	f800283a 	ret

00002f40 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
    2f40:	defffc04 	addi	sp,sp,-16
    2f44:	df000315 	stw	fp,12(sp)
    2f48:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    2f4c:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
    2f50:	d0a6e543 	ldbu	r2,-25707(gp)
    2f54:	10803fcc 	andi	r2,r2,255
    2f58:	10800058 	cmpnei	r2,r2,1
    2f5c:	1000171e 	bne	r2,zero,2fbc <OSSchedLock+0x7c>
  NIOS2_READ_STATUS (context);
    2f60:	0005303a 	rdctl	r2,status
    2f64:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2f68:	e0fffe17 	ldw	r3,-8(fp)
    2f6c:	00bfff84 	movi	r2,-2
    2f70:	1884703a 	and	r2,r3,r2
    2f74:	1001703a 	wrctl	status,r2
  return context;
    2f78:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
    2f7c:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
    2f80:	d0a6e343 	ldbu	r2,-25715(gp)
    2f84:	10803fcc 	andi	r2,r2,255
    2f88:	1000071e 	bne	r2,zero,2fa8 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
    2f8c:	d0a6e383 	ldbu	r2,-25714(gp)
    2f90:	10803fcc 	andi	r2,r2,255
    2f94:	10803fe0 	cmpeqi	r2,r2,255
    2f98:	1000031e 	bne	r2,zero,2fa8 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
    2f9c:	d0a6e383 	ldbu	r2,-25714(gp)
    2fa0:	10800044 	addi	r2,r2,1
    2fa4:	d0a6e385 	stb	r2,-25714(gp)
    2fa8:	e0bfff17 	ldw	r2,-4(fp)
    2fac:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
    2fb0:	e0bffd17 	ldw	r2,-12(fp)
    2fb4:	1001703a 	wrctl	status,r2
}
    2fb8:	0001883a 	nop
            }
        }
        OS_EXIT_CRITICAL();
    }
}
    2fbc:	0001883a 	nop
    2fc0:	e037883a 	mov	sp,fp
    2fc4:	df000017 	ldw	fp,0(sp)
    2fc8:	dec00104 	addi	sp,sp,4
    2fcc:	f800283a 	ret

00002fd0 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
    2fd0:	defff804 	addi	sp,sp,-32
    2fd4:	dfc00715 	stw	ra,28(sp)
    2fd8:	df000615 	stw	fp,24(sp)
    2fdc:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    2fe0:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
    2fe4:	d0a6e543 	ldbu	r2,-25707(gp)
    2fe8:	10803fcc 	andi	r2,r2,255
    2fec:	10800058 	cmpnei	r2,r2,1
    2ff0:	10002a1e 	bne	r2,zero,309c <OSSchedUnlock+0xcc>
  NIOS2_READ_STATUS (context);
    2ff4:	0005303a 	rdctl	r2,status
    2ff8:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2ffc:	e0fffe17 	ldw	r3,-8(fp)
    3000:	00bfff84 	movi	r2,-2
    3004:	1884703a 	and	r2,r3,r2
    3008:	1001703a 	wrctl	status,r2
  return context;
    300c:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
    3010:	e0bfff15 	stw	r2,-4(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
    3014:	d0a6e383 	ldbu	r2,-25714(gp)
    3018:	10803fcc 	andi	r2,r2,255
    301c:	10001a26 	beq	r2,zero,3088 <OSSchedUnlock+0xb8>
            OSLockNesting--;                               /* Decrement lock nesting level             */
    3020:	d0a6e383 	ldbu	r2,-25714(gp)
    3024:	10bfffc4 	addi	r2,r2,-1
    3028:	d0a6e385 	stb	r2,-25714(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
    302c:	d0a6e383 	ldbu	r2,-25714(gp)
    3030:	10803fcc 	andi	r2,r2,255
    3034:	10000f1e 	bne	r2,zero,3074 <OSSchedUnlock+0xa4>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
    3038:	d0a6e343 	ldbu	r2,-25715(gp)
    303c:	10803fcc 	andi	r2,r2,255
    3040:	1000071e 	bne	r2,zero,3060 <OSSchedUnlock+0x90>
    3044:	e0bfff17 	ldw	r2,-4(fp)
    3048:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
    304c:	e0bffd17 	ldw	r2,-12(fp)
    3050:	1001703a 	wrctl	status,r2
}
    3054:	0001883a 	nop
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
    3058:	0003e7c0 	call	3e7c <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
    305c:	00000f06 	br	309c <OSSchedUnlock+0xcc>
    3060:	e0bfff17 	ldw	r2,-4(fp)
    3064:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    3068:	e0bffc17 	ldw	r2,-16(fp)
    306c:	1001703a 	wrctl	status,r2
}
    3070:	00000a06 	br	309c <OSSchedUnlock+0xcc>
    3074:	e0bfff17 	ldw	r2,-4(fp)
    3078:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    307c:	e0bffb17 	ldw	r2,-20(fp)
    3080:	1001703a 	wrctl	status,r2
}
    3084:	00000506 	br	309c <OSSchedUnlock+0xcc>
    3088:	e0bfff17 	ldw	r2,-4(fp)
    308c:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
    3090:	e0bffa17 	ldw	r2,-24(fp)
    3094:	1001703a 	wrctl	status,r2
}
    3098:	0001883a 	nop
    309c:	0001883a 	nop
    30a0:	e037883a 	mov	sp,fp
    30a4:	dfc00117 	ldw	ra,4(sp)
    30a8:	df000017 	ldw	fp,0(sp)
    30ac:	dec00204 	addi	sp,sp,8
    30b0:	f800283a 	ret

000030b4 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
    30b4:	defffe04 	addi	sp,sp,-8
    30b8:	dfc00115 	stw	ra,4(sp)
    30bc:	df000015 	stw	fp,0(sp)
    30c0:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
    30c4:	d0a6e543 	ldbu	r2,-25707(gp)
    30c8:	10803fcc 	andi	r2,r2,255
    30cc:	10000d1e 	bne	r2,zero,3104 <OSStart+0x50>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
    30d0:	0003f480 	call	3f48 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
    30d4:	d0a6e403 	ldbu	r2,-25712(gp)
    30d8:	d0a6e3c5 	stb	r2,-25713(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
    30dc:	d0a6e403 	ldbu	r2,-25712(gp)
    30e0:	10803fcc 	andi	r2,r2,255
    30e4:	100690ba 	slli	r3,r2,2
    30e8:	008000b4 	movhi	r2,2
    30ec:	1885883a 	add	r2,r3,r2
    30f0:	10a5ac17 	ldw	r2,-26960(r2)
    30f4:	d0a6e915 	stw	r2,-25692(gp)
        OSTCBCur      = OSTCBHighRdy;
    30f8:	d0a6e917 	ldw	r2,-25692(gp)
    30fc:	d0a6e715 	stw	r2,-25700(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
    3100:	000d45c0 	call	d45c <OSStartHighRdy>
    }
}
    3104:	0001883a 	nop
    3108:	e037883a 	mov	sp,fp
    310c:	dfc00117 	ldw	ra,4(sp)
    3110:	df000017 	ldw	fp,0(sp)
    3114:	dec00204 	addi	sp,sp,8
    3118:	f800283a 	ret

0000311c <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
    311c:	defff904 	addi	sp,sp,-28
    3120:	dfc00615 	stw	ra,24(sp)
    3124:	df000515 	stw	fp,20(sp)
    3128:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    312c:	e03fff15 	stw	zero,-4(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
    3130:	01000084 	movi	r4,2
    3134:	00099540 	call	9954 <OSTimeDly>
  NIOS2_READ_STATUS (context);
    3138:	0005303a 	rdctl	r2,status
    313c:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3140:	e0fffb17 	ldw	r3,-20(fp)
    3144:	00bfff84 	movi	r2,-2
    3148:	1884703a 	and	r2,r3,r2
    314c:	1001703a 	wrctl	status,r2
  return context;
    3150:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
    3154:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
    3158:	d026e615 	stw	zero,-25704(gp)
    315c:	e0bfff17 	ldw	r2,-4(fp)
    3160:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    3164:	e0bffc17 	ldw	r2,-16(fp)
    3168:	1001703a 	wrctl	status,r2
}
    316c:	0001883a 	nop
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
    3170:	0009883a 	mov	r4,zero
    3174:	00099540 	call	9954 <OSTimeDly>
  NIOS2_READ_STATUS (context);
    3178:	0005303a 	rdctl	r2,status
    317c:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3180:	e0fffd17 	ldw	r3,-12(fp)
    3184:	00bfff84 	movi	r2,-2
    3188:	1884703a 	and	r2,r3,r2
    318c:	1001703a 	wrctl	status,r2
  return context;
    3190:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
    3194:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
    3198:	d0a6e617 	ldw	r2,-25704(gp)
    319c:	d0a6e115 	stw	r2,-25724(gp)
    OSStatRdy    = OS_TRUE;
    31a0:	00800044 	movi	r2,1
    31a4:	d0a6e305 	stb	r2,-25716(gp)
    31a8:	e0bfff17 	ldw	r2,-4(fp)
    31ac:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
    31b0:	e0bffe17 	ldw	r2,-8(fp)
    31b4:	1001703a 	wrctl	status,r2
}
    31b8:	0001883a 	nop
    OS_EXIT_CRITICAL();
}
    31bc:	0001883a 	nop
    31c0:	e037883a 	mov	sp,fp
    31c4:	dfc00117 	ldw	ra,4(sp)
    31c8:	df000017 	ldw	fp,0(sp)
    31cc:	dec00204 	addi	sp,sp,8
    31d0:	f800283a 	ret

000031d4 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
    31d4:	defff704 	addi	sp,sp,-36
    31d8:	dfc00815 	stw	ra,32(sp)
    31dc:	df000715 	stw	fp,28(sp)
    31e0:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    31e4:	e03ffd15 	stw	zero,-12(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
    31e8:	000d6740 	call	d674 <OSTimeTickHook>
  NIOS2_READ_STATUS (context);
    31ec:	0005303a 	rdctl	r2,status
    31f0:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    31f4:	e0fffb17 	ldw	r3,-20(fp)
    31f8:	00bfff84 	movi	r2,-2
    31fc:	1884703a 	and	r2,r3,r2
    3200:	1001703a 	wrctl	status,r2
  return context;
    3204:	e0bffb17 	ldw	r2,-20(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
    3208:	e0bffd15 	stw	r2,-12(fp)
    OSTime++;
    320c:	d0a6ee17 	ldw	r2,-25672(gp)
    3210:	10800044 	addi	r2,r2,1
    3214:	d0a6ee15 	stw	r2,-25672(gp)
    3218:	e0bffd17 	ldw	r2,-12(fp)
    321c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    3220:	e0bffc17 	ldw	r2,-16(fp)
    3224:	1001703a 	wrctl	status,r2
}
    3228:	0001883a 	nop
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
    322c:	d0a6e543 	ldbu	r2,-25707(gp)
    3230:	10803fcc 	andi	r2,r2,255
    3234:	10800058 	cmpnei	r2,r2,1
    3238:	10006e1e 	bne	r2,zero,33f4 <OSTimeTick+0x220>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
    323c:	d0a6eb03 	ldbu	r2,-25684(gp)
    3240:	10803fcc 	andi	r2,r2,255
    3244:	10c000a0 	cmpeqi	r3,r2,2
    3248:	18000b1e 	bne	r3,zero,3278 <OSTimeTick+0xa4>
    324c:	10c000c8 	cmpgei	r3,r2,3
    3250:	18000e1e 	bne	r3,zero,328c <OSTimeTick+0xb8>
    3254:	10000326 	beq	r2,zero,3264 <OSTimeTick+0x90>
    3258:	10800060 	cmpeqi	r2,r2,1
    325c:	1000041e 	bne	r2,zero,3270 <OSTimeTick+0x9c>
    3260:	00000a06 	br	328c <OSTimeTick+0xb8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
    3264:	00800044 	movi	r2,1
    3268:	e0bffec5 	stb	r2,-5(fp)
                 break;
    326c:	00000b06 	br	329c <OSTimeTick+0xc8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
    3270:	e03ffec5 	stb	zero,-5(fp)
                 break;
    3274:	00000906 	br	329c <OSTimeTick+0xc8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
    3278:	00800044 	movi	r2,1
    327c:	e0bffec5 	stb	r2,-5(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
    3280:	00800044 	movi	r2,1
    3284:	d0a6eb05 	stb	r2,-25684(gp)
                 break;
    3288:	00000406 	br	329c <OSTimeTick+0xc8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
    328c:	00800044 	movi	r2,1
    3290:	e0bffec5 	stb	r2,-5(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
    3294:	d026eb05 	stb	zero,-25684(gp)
                 break;
    3298:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
    329c:	e0bffec3 	ldbu	r2,-5(fp)
    32a0:	10005326 	beq	r2,zero,33f0 <OSTimeTick+0x21c>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
    32a4:	d0a6ea17 	ldw	r2,-25688(gp)
    32a8:	e0bfff15 	stw	r2,-4(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
    32ac:	00004a06 	br	33d8 <OSTimeTick+0x204>
  NIOS2_READ_STATUS (context);
    32b0:	0005303a 	rdctl	r2,status
    32b4:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    32b8:	e0fffa17 	ldw	r3,-24(fp)
    32bc:	00bfff84 	movi	r2,-2
    32c0:	1884703a 	and	r2,r3,r2
    32c4:	1001703a 	wrctl	status,r2
  return context;
    32c8:	e0bffa17 	ldw	r2,-24(fp)
            OS_ENTER_CRITICAL();
    32cc:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
    32d0:	e0bfff17 	ldw	r2,-4(fp)
    32d4:	10800b8b 	ldhu	r2,46(r2)
    32d8:	10bfffcc 	andi	r2,r2,65535
    32dc:	10003626 	beq	r2,zero,33b8 <OSTimeTick+0x1e4>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
    32e0:	e0bfff17 	ldw	r2,-4(fp)
    32e4:	10800b8b 	ldhu	r2,46(r2)
    32e8:	10bfffc4 	addi	r2,r2,-1
    32ec:	1007883a 	mov	r3,r2
    32f0:	e0bfff17 	ldw	r2,-4(fp)
    32f4:	10c00b8d 	sth	r3,46(r2)
    32f8:	e0bfff17 	ldw	r2,-4(fp)
    32fc:	10800b8b 	ldhu	r2,46(r2)
    3300:	10bfffcc 	andi	r2,r2,65535
    3304:	10002c1e 	bne	r2,zero,33b8 <OSTimeTick+0x1e4>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
    3308:	e0bfff17 	ldw	r2,-4(fp)
    330c:	10800c03 	ldbu	r2,48(r2)
    3310:	10803fcc 	andi	r2,r2,255
    3314:	10800dcc 	andi	r2,r2,55
    3318:	10000b26 	beq	r2,zero,3348 <OSTimeTick+0x174>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
    331c:	e0bfff17 	ldw	r2,-4(fp)
    3320:	10c00c03 	ldbu	r3,48(r2)
    3324:	00bff204 	movi	r2,-56
    3328:	1884703a 	and	r2,r3,r2
    332c:	1007883a 	mov	r3,r2
    3330:	e0bfff17 	ldw	r2,-4(fp)
    3334:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
    3338:	e0bfff17 	ldw	r2,-4(fp)
    333c:	00c00044 	movi	r3,1
    3340:	10c00c45 	stb	r3,49(r2)
    3344:	00000206 	br	3350 <OSTimeTick+0x17c>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
    3348:	e0bfff17 	ldw	r2,-4(fp)
    334c:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
    3350:	e0bfff17 	ldw	r2,-4(fp)
    3354:	10800c03 	ldbu	r2,48(r2)
    3358:	10803fcc 	andi	r2,r2,255
    335c:	1080020c 	andi	r2,r2,8
    3360:	1000151e 	bne	r2,zero,33b8 <OSTimeTick+0x1e4>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
    3364:	e0bfff17 	ldw	r2,-4(fp)
    3368:	10c00d83 	ldbu	r3,54(r2)
    336c:	d0a6e443 	ldbu	r2,-25711(gp)
    3370:	1884b03a 	or	r2,r3,r2
    3374:	d0a6e445 	stb	r2,-25711(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    3378:	e0bfff17 	ldw	r2,-4(fp)
    337c:	10800d03 	ldbu	r2,52(r2)
    3380:	10c03fcc 	andi	r3,r2,255
    3384:	d0a6e484 	addi	r2,gp,-25710
    3388:	1885883a 	add	r2,r3,r2
    338c:	11000003 	ldbu	r4,0(r2)
    3390:	e0bfff17 	ldw	r2,-4(fp)
    3394:	10800d43 	ldbu	r2,53(r2)
    3398:	e0ffff17 	ldw	r3,-4(fp)
    339c:	18c00d03 	ldbu	r3,52(r3)
    33a0:	18c03fcc 	andi	r3,r3,255
    33a4:	2084b03a 	or	r2,r4,r2
    33a8:	1009883a 	mov	r4,r2
    33ac:	d0a6e484 	addi	r2,gp,-25710
    33b0:	1885883a 	add	r2,r3,r2
    33b4:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
    33b8:	e0bfff17 	ldw	r2,-4(fp)
    33bc:	10800517 	ldw	r2,20(r2)
    33c0:	e0bfff15 	stw	r2,-4(fp)
    33c4:	e0bffd17 	ldw	r2,-12(fp)
    33c8:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
    33cc:	e0bff917 	ldw	r2,-28(fp)
    33d0:	1001703a 	wrctl	status,r2
}
    33d4:	0001883a 	nop
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
    33d8:	e0bfff17 	ldw	r2,-4(fp)
    33dc:	10800c83 	ldbu	r2,50(r2)
    33e0:	10803fcc 	andi	r2,r2,255
    33e4:	10800518 	cmpnei	r2,r2,20
    33e8:	103fb11e 	bne	r2,zero,32b0 <OSTimeTick+0xdc>
    33ec:	00000106 	br	33f4 <OSTimeTick+0x220>
            return;
    33f0:	0001883a 	nop
            OS_EXIT_CRITICAL();
        }
    }
}
    33f4:	e037883a 	mov	sp,fp
    33f8:	dfc00117 	ldw	ra,4(sp)
    33fc:	df000017 	ldw	fp,0(sp)
    3400:	dec00204 	addi	sp,sp,8
    3404:	f800283a 	ret

00003408 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
    3408:	deffff04 	addi	sp,sp,-4
    340c:	df000015 	stw	fp,0(sp)
    3410:	d839883a 	mov	fp,sp
    return (OS_VERSION);
    3414:	00804784 	movi	r2,286
}
    3418:	e037883a 	mov	sp,fp
    341c:	df000017 	ldw	fp,0(sp)
    3420:	dec00104 	addi	sp,sp,4
    3424:	f800283a 	ret

00003428 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
    3428:	deffff04 	addi	sp,sp,-4
    342c:	df000015 	stw	fp,0(sp)
    3430:	d839883a 	mov	fp,sp
}
    3434:	0001883a 	nop
    3438:	e037883a 	mov	sp,fp
    343c:	df000017 	ldw	fp,0(sp)
    3440:	dec00104 	addi	sp,sp,4
    3444:	f800283a 	ret

00003448 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
    3448:	defff804 	addi	sp,sp,-32
    344c:	dfc00715 	stw	ra,28(sp)
    3450:	df000615 	stw	fp,24(sp)
    3454:	df000604 	addi	fp,sp,24
    3458:	e13ffd15 	stw	r4,-12(fp)
    345c:	e17ffc15 	stw	r5,-16(fp)
    3460:	3005883a 	mov	r2,r6
    3464:	3807883a 	mov	r3,r7
    3468:	e0bffb05 	stb	r2,-20(fp)
    346c:	1805883a 	mov	r2,r3
    3470:	e0bffa05 	stb	r2,-24(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
    3474:	e0bffd17 	ldw	r2,-12(fp)
    3478:	10800283 	ldbu	r2,10(r2)
    347c:	10c03fcc 	andi	r3,r2,255
    3480:	00800074 	movhi	r2,1
    3484:	1885883a 	add	r2,r3,r2
    3488:	10b81803 	ldbu	r2,-8096(r2)
    348c:	e0bfffc5 	stb	r2,-1(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
    3490:	e0bfffc3 	ldbu	r2,-1(fp)
    3494:	e0fffd17 	ldw	r3,-12(fp)
    3498:	1885883a 	add	r2,r3,r2
    349c:	108002c3 	ldbu	r2,11(r2)
    34a0:	10c03fcc 	andi	r3,r2,255
    34a4:	00800074 	movhi	r2,1
    34a8:	1885883a 	add	r2,r3,r2
    34ac:	10b81803 	ldbu	r2,-8096(r2)
    34b0:	e0bfff85 	stb	r2,-2(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
    34b4:	e0bfffc3 	ldbu	r2,-1(fp)
    34b8:	100490fa 	slli	r2,r2,3
    34bc:	1007883a 	mov	r3,r2
    34c0:	e0bfff83 	ldbu	r2,-2(fp)
    34c4:	10c5883a 	add	r2,r2,r3
    34c8:	e0bfff45 	stb	r2,-3(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
    34cc:	e0bfff43 	ldbu	r2,-3(fp)
    34d0:	100690ba 	slli	r3,r2,2
    34d4:	008000b4 	movhi	r2,2
    34d8:	1885883a 	add	r2,r3,r2
    34dc:	10a5ac17 	ldw	r2,-26960(r2)
    34e0:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
    34e4:	e0bffe17 	ldw	r2,-8(fp)
    34e8:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
    34ec:	e0bffe17 	ldw	r2,-8(fp)
    34f0:	e0fffc17 	ldw	r3,-16(fp)
    34f4:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
    34f8:	e0bffe17 	ldw	r2,-8(fp)
    34fc:	10800c03 	ldbu	r2,48(r2)
    3500:	1007883a 	mov	r3,r2
    3504:	e0bffb03 	ldbu	r2,-20(fp)
    3508:	0084303a 	nor	r2,zero,r2
    350c:	1884703a 	and	r2,r3,r2
    3510:	1007883a 	mov	r3,r2
    3514:	e0bffe17 	ldw	r2,-8(fp)
    3518:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
    351c:	e0bffe17 	ldw	r2,-8(fp)
    3520:	e0fffa03 	ldbu	r3,-24(fp)
    3524:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
    3528:	e0bffe17 	ldw	r2,-8(fp)
    352c:	10800c03 	ldbu	r2,48(r2)
    3530:	10803fcc 	andi	r2,r2,255
    3534:	1080020c 	andi	r2,r2,8
    3538:	1000111e 	bne	r2,zero,3580 <OS_EventTaskRdy+0x138>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
    353c:	e0bffe17 	ldw	r2,-8(fp)
    3540:	10c00d83 	ldbu	r3,54(r2)
    3544:	d0a6e443 	ldbu	r2,-25711(gp)
    3548:	1884b03a 	or	r2,r3,r2
    354c:	d0a6e445 	stb	r2,-25711(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
    3550:	e0ffffc3 	ldbu	r3,-1(fp)
    3554:	d0a6e484 	addi	r2,gp,-25710
    3558:	1885883a 	add	r2,r3,r2
    355c:	11000003 	ldbu	r4,0(r2)
    3560:	e0bffe17 	ldw	r2,-8(fp)
    3564:	10800d43 	ldbu	r2,53(r2)
    3568:	e0ffffc3 	ldbu	r3,-1(fp)
    356c:	2084b03a 	or	r2,r4,r2
    3570:	1009883a 	mov	r4,r2
    3574:	d0a6e484 	addi	r2,gp,-25710
    3578:	1885883a 	add	r2,r3,r2
    357c:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
    3580:	e17ffd17 	ldw	r5,-12(fp)
    3584:	e13ffe17 	ldw	r4,-8(fp)
    3588:	00038200 	call	3820 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
    358c:	e0bffe17 	ldw	r2,-8(fp)
    3590:	10800817 	ldw	r2,32(r2)
    3594:	10000826 	beq	r2,zero,35b8 <OS_EventTaskRdy+0x170>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
    3598:	e0bffe17 	ldw	r2,-8(fp)
    359c:	10800817 	ldw	r2,32(r2)
    35a0:	100b883a 	mov	r5,r2
    35a4:	e13ffe17 	ldw	r4,-8(fp)
    35a8:	00038d00 	call	38d0 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
    35ac:	e0bffe17 	ldw	r2,-8(fp)
    35b0:	e0fffd17 	ldw	r3,-12(fp)
    35b4:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
    35b8:	e0bfff43 	ldbu	r2,-3(fp)
}
    35bc:	e037883a 	mov	sp,fp
    35c0:	dfc00117 	ldw	ra,4(sp)
    35c4:	df000017 	ldw	fp,0(sp)
    35c8:	dec00204 	addi	sp,sp,8
    35cc:	f800283a 	ret

000035d0 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
    35d0:	defffd04 	addi	sp,sp,-12
    35d4:	df000215 	stw	fp,8(sp)
    35d8:	df000204 	addi	fp,sp,8
    35dc:	e13ffe15 	stw	r4,-8(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
    35e0:	d0a6e717 	ldw	r2,-25700(gp)
    35e4:	e0fffe17 	ldw	r3,-8(fp)
    35e8:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
    35ec:	d0a6e717 	ldw	r2,-25700(gp)
    35f0:	10800d03 	ldbu	r2,52(r2)
    35f4:	10803fcc 	andi	r2,r2,255
    35f8:	e0fffe17 	ldw	r3,-8(fp)
    35fc:	1885883a 	add	r2,r3,r2
    3600:	110002c3 	ldbu	r4,11(r2)
    3604:	d0a6e717 	ldw	r2,-25700(gp)
    3608:	10c00d43 	ldbu	r3,53(r2)
    360c:	d0a6e717 	ldw	r2,-25700(gp)
    3610:	10800d03 	ldbu	r2,52(r2)
    3614:	10803fcc 	andi	r2,r2,255
    3618:	20c6b03a 	or	r3,r4,r3
    361c:	1809883a 	mov	r4,r3
    3620:	e0fffe17 	ldw	r3,-8(fp)
    3624:	1885883a 	add	r2,r3,r2
    3628:	110002c5 	stb	r4,11(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
    362c:	e0bffe17 	ldw	r2,-8(fp)
    3630:	10c00283 	ldbu	r3,10(r2)
    3634:	d0a6e717 	ldw	r2,-25700(gp)
    3638:	10800d83 	ldbu	r2,54(r2)
    363c:	1884b03a 	or	r2,r3,r2
    3640:	1007883a 	mov	r3,r2
    3644:	e0bffe17 	ldw	r2,-8(fp)
    3648:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    364c:	d0a6e717 	ldw	r2,-25700(gp)
    3650:	10800d03 	ldbu	r2,52(r2)
    3654:	e0bfffc5 	stb	r2,-1(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
    3658:	e0ffffc3 	ldbu	r3,-1(fp)
    365c:	d0a6e484 	addi	r2,gp,-25710
    3660:	1885883a 	add	r2,r3,r2
    3664:	10800003 	ldbu	r2,0(r2)
    3668:	1007883a 	mov	r3,r2
    366c:	d0a6e717 	ldw	r2,-25700(gp)
    3670:	10800d43 	ldbu	r2,53(r2)
    3674:	0084303a 	nor	r2,zero,r2
    3678:	1884703a 	and	r2,r3,r2
    367c:	e0ffffc3 	ldbu	r3,-1(fp)
    3680:	1009883a 	mov	r4,r2
    3684:	d0a6e484 	addi	r2,gp,-25710
    3688:	1885883a 	add	r2,r3,r2
    368c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
    3690:	e0ffffc3 	ldbu	r3,-1(fp)
    3694:	d0a6e484 	addi	r2,gp,-25710
    3698:	1885883a 	add	r2,r3,r2
    369c:	10800003 	ldbu	r2,0(r2)
    36a0:	10803fcc 	andi	r2,r2,255
    36a4:	1000071e 	bne	r2,zero,36c4 <OS_EventTaskWait+0xf4>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
    36a8:	d0a6e717 	ldw	r2,-25700(gp)
    36ac:	10800d83 	ldbu	r2,54(r2)
    36b0:	0084303a 	nor	r2,zero,r2
    36b4:	1007883a 	mov	r3,r2
    36b8:	d0a6e443 	ldbu	r2,-25711(gp)
    36bc:	1884703a 	and	r2,r3,r2
    36c0:	d0a6e445 	stb	r2,-25711(gp)
    }
}
    36c4:	0001883a 	nop
    36c8:	e037883a 	mov	sp,fp
    36cc:	df000017 	ldw	fp,0(sp)
    36d0:	dec00104 	addi	sp,sp,4
    36d4:	f800283a 	ret

000036d8 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
    36d8:	defffb04 	addi	sp,sp,-20
    36dc:	df000415 	stw	fp,16(sp)
    36e0:	df000404 	addi	fp,sp,16
    36e4:	e13ffc15 	stw	r4,-16(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    36e8:	d0a6e717 	ldw	r2,-25700(gp)
    36ec:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
    36f0:	d0a6e717 	ldw	r2,-25700(gp)
    36f4:	e0fffc17 	ldw	r3,-16(fp)
    36f8:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
    36fc:	e0bffc17 	ldw	r2,-16(fp)
    3700:	e0bfff15 	stw	r2,-4(fp)
    pevent  = *pevents;
    3704:	e0bfff17 	ldw	r2,-4(fp)
    3708:	10800017 	ldw	r2,0(r2)
    370c:	e0bffe15 	stw	r2,-8(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
    3710:	00001e06 	br	378c <OS_EventTaskWaitMulti+0xb4>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
    3714:	d0a6e717 	ldw	r2,-25700(gp)
    3718:	10800d03 	ldbu	r2,52(r2)
    371c:	10803fcc 	andi	r2,r2,255
    3720:	e0fffe17 	ldw	r3,-8(fp)
    3724:	1885883a 	add	r2,r3,r2
    3728:	110002c3 	ldbu	r4,11(r2)
    372c:	d0a6e717 	ldw	r2,-25700(gp)
    3730:	10c00d43 	ldbu	r3,53(r2)
    3734:	d0a6e717 	ldw	r2,-25700(gp)
    3738:	10800d03 	ldbu	r2,52(r2)
    373c:	10803fcc 	andi	r2,r2,255
    3740:	20c6b03a 	or	r3,r4,r3
    3744:	1809883a 	mov	r4,r3
    3748:	e0fffe17 	ldw	r3,-8(fp)
    374c:	1885883a 	add	r2,r3,r2
    3750:	110002c5 	stb	r4,11(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
    3754:	e0bffe17 	ldw	r2,-8(fp)
    3758:	10c00283 	ldbu	r3,10(r2)
    375c:	d0a6e717 	ldw	r2,-25700(gp)
    3760:	10800d83 	ldbu	r2,54(r2)
    3764:	1884b03a 	or	r2,r3,r2
    3768:	1007883a 	mov	r3,r2
    376c:	e0bffe17 	ldw	r2,-8(fp)
    3770:	10c00285 	stb	r3,10(r2)
        pevents++;
    3774:	e0bfff17 	ldw	r2,-4(fp)
    3778:	10800104 	addi	r2,r2,4
    377c:	e0bfff15 	stw	r2,-4(fp)
        pevent = *pevents;
    3780:	e0bfff17 	ldw	r2,-4(fp)
    3784:	10800017 	ldw	r2,0(r2)
    3788:	e0bffe15 	stw	r2,-8(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
    378c:	e0bffe17 	ldw	r2,-8(fp)
    3790:	103fe01e 	bne	r2,zero,3714 <OS_EventTaskWaitMulti+0x3c>
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    3794:	d0a6e717 	ldw	r2,-25700(gp)
    3798:	10800d03 	ldbu	r2,52(r2)
    379c:	e0bffdc5 	stb	r2,-9(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
    37a0:	e0fffdc3 	ldbu	r3,-9(fp)
    37a4:	d0a6e484 	addi	r2,gp,-25710
    37a8:	1885883a 	add	r2,r3,r2
    37ac:	10800003 	ldbu	r2,0(r2)
    37b0:	1007883a 	mov	r3,r2
    37b4:	d0a6e717 	ldw	r2,-25700(gp)
    37b8:	10800d43 	ldbu	r2,53(r2)
    37bc:	0084303a 	nor	r2,zero,r2
    37c0:	1884703a 	and	r2,r3,r2
    37c4:	e0fffdc3 	ldbu	r3,-9(fp)
    37c8:	1009883a 	mov	r4,r2
    37cc:	d0a6e484 	addi	r2,gp,-25710
    37d0:	1885883a 	add	r2,r3,r2
    37d4:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
    37d8:	e0fffdc3 	ldbu	r3,-9(fp)
    37dc:	d0a6e484 	addi	r2,gp,-25710
    37e0:	1885883a 	add	r2,r3,r2
    37e4:	10800003 	ldbu	r2,0(r2)
    37e8:	10803fcc 	andi	r2,r2,255
    37ec:	1000071e 	bne	r2,zero,380c <OS_EventTaskWaitMulti+0x134>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
    37f0:	d0a6e717 	ldw	r2,-25700(gp)
    37f4:	10800d83 	ldbu	r2,54(r2)
    37f8:	0084303a 	nor	r2,zero,r2
    37fc:	1007883a 	mov	r3,r2
    3800:	d0a6e443 	ldbu	r2,-25711(gp)
    3804:	1884703a 	and	r2,r3,r2
    3808:	d0a6e445 	stb	r2,-25711(gp)
    }
}
    380c:	0001883a 	nop
    3810:	e037883a 	mov	sp,fp
    3814:	df000017 	ldw	fp,0(sp)
    3818:	dec00104 	addi	sp,sp,4
    381c:	f800283a 	ret

00003820 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
    3820:	defffc04 	addi	sp,sp,-16
    3824:	df000315 	stw	fp,12(sp)
    3828:	df000304 	addi	fp,sp,12
    382c:	e13ffe15 	stw	r4,-8(fp)
    3830:	e17ffd15 	stw	r5,-12(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
    3834:	e0bffe17 	ldw	r2,-8(fp)
    3838:	10800d03 	ldbu	r2,52(r2)
    383c:	e0bfffc5 	stb	r2,-1(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
    3840:	e0bfffc3 	ldbu	r2,-1(fp)
    3844:	e0fffd17 	ldw	r3,-12(fp)
    3848:	1885883a 	add	r2,r3,r2
    384c:	108002c3 	ldbu	r2,11(r2)
    3850:	1007883a 	mov	r3,r2
    3854:	e0bffe17 	ldw	r2,-8(fp)
    3858:	10800d43 	ldbu	r2,53(r2)
    385c:	0084303a 	nor	r2,zero,r2
    3860:	1884703a 	and	r2,r3,r2
    3864:	1007883a 	mov	r3,r2
    3868:	e0bfffc3 	ldbu	r2,-1(fp)
    386c:	1809883a 	mov	r4,r3
    3870:	e0fffd17 	ldw	r3,-12(fp)
    3874:	1885883a 	add	r2,r3,r2
    3878:	110002c5 	stb	r4,11(r2)
    if (pevent->OSEventTbl[y] == 0) {
    387c:	e0bfffc3 	ldbu	r2,-1(fp)
    3880:	e0fffd17 	ldw	r3,-12(fp)
    3884:	1885883a 	add	r2,r3,r2
    3888:	108002c3 	ldbu	r2,11(r2)
    388c:	10803fcc 	andi	r2,r2,255
    3890:	10000a1e 	bne	r2,zero,38bc <OS_EventTaskRemove+0x9c>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
    3894:	e0bffd17 	ldw	r2,-12(fp)
    3898:	10800283 	ldbu	r2,10(r2)
    389c:	1007883a 	mov	r3,r2
    38a0:	e0bffe17 	ldw	r2,-8(fp)
    38a4:	10800d83 	ldbu	r2,54(r2)
    38a8:	0084303a 	nor	r2,zero,r2
    38ac:	1884703a 	and	r2,r3,r2
    38b0:	1007883a 	mov	r3,r2
    38b4:	e0bffd17 	ldw	r2,-12(fp)
    38b8:	10c00285 	stb	r3,10(r2)
    }
}
    38bc:	0001883a 	nop
    38c0:	e037883a 	mov	sp,fp
    38c4:	df000017 	ldw	fp,0(sp)
    38c8:	dec00104 	addi	sp,sp,4
    38cc:	f800283a 	ret

000038d0 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
    38d0:	defffa04 	addi	sp,sp,-24
    38d4:	df000515 	stw	fp,20(sp)
    38d8:	df000504 	addi	fp,sp,20
    38dc:	e13ffc15 	stw	r4,-16(fp)
    38e0:	e17ffb15 	stw	r5,-20(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
    38e4:	e0bffc17 	ldw	r2,-16(fp)
    38e8:	10800d03 	ldbu	r2,52(r2)
    38ec:	e0bffdc5 	stb	r2,-9(fp)
    bity    =  ptcb->OSTCBBitY;
    38f0:	e0bffc17 	ldw	r2,-16(fp)
    38f4:	10800d83 	ldbu	r2,54(r2)
    38f8:	e0bffd85 	stb	r2,-10(fp)
    bitx    =  ptcb->OSTCBBitX;
    38fc:	e0bffc17 	ldw	r2,-16(fp)
    3900:	10800d43 	ldbu	r2,53(r2)
    3904:	e0bffd45 	stb	r2,-11(fp)
    pevents =  pevents_multi;
    3908:	e0bffb17 	ldw	r2,-20(fp)
    390c:	e0bfff15 	stw	r2,-4(fp)
    pevent  = *pevents;
    3910:	e0bfff17 	ldw	r2,-4(fp)
    3914:	10800017 	ldw	r2,0(r2)
    3918:	e0bffe15 	stw	r2,-8(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
    391c:	00002306 	br	39ac <OS_EventTaskRemoveMulti+0xdc>
        pevent->OSEventTbl[y]  &= ~bitx;
    3920:	e0bffdc3 	ldbu	r2,-9(fp)
    3924:	e0fffe17 	ldw	r3,-8(fp)
    3928:	1885883a 	add	r2,r3,r2
    392c:	108002c3 	ldbu	r2,11(r2)
    3930:	1007883a 	mov	r3,r2
    3934:	e0bffd43 	ldbu	r2,-11(fp)
    3938:	0084303a 	nor	r2,zero,r2
    393c:	1884703a 	and	r2,r3,r2
    3940:	1007883a 	mov	r3,r2
    3944:	e0bffdc3 	ldbu	r2,-9(fp)
    3948:	1809883a 	mov	r4,r3
    394c:	e0fffe17 	ldw	r3,-8(fp)
    3950:	1885883a 	add	r2,r3,r2
    3954:	110002c5 	stb	r4,11(r2)
        if (pevent->OSEventTbl[y] == 0) {
    3958:	e0bffdc3 	ldbu	r2,-9(fp)
    395c:	e0fffe17 	ldw	r3,-8(fp)
    3960:	1885883a 	add	r2,r3,r2
    3964:	108002c3 	ldbu	r2,11(r2)
    3968:	10803fcc 	andi	r2,r2,255
    396c:	1000091e 	bne	r2,zero,3994 <OS_EventTaskRemoveMulti+0xc4>
            pevent->OSEventGrp &= ~bity;
    3970:	e0bffe17 	ldw	r2,-8(fp)
    3974:	10800283 	ldbu	r2,10(r2)
    3978:	1007883a 	mov	r3,r2
    397c:	e0bffd83 	ldbu	r2,-10(fp)
    3980:	0084303a 	nor	r2,zero,r2
    3984:	1884703a 	and	r2,r3,r2
    3988:	1007883a 	mov	r3,r2
    398c:	e0bffe17 	ldw	r2,-8(fp)
    3990:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
    3994:	e0bfff17 	ldw	r2,-4(fp)
    3998:	10800104 	addi	r2,r2,4
    399c:	e0bfff15 	stw	r2,-4(fp)
        pevent = *pevents;
    39a0:	e0bfff17 	ldw	r2,-4(fp)
    39a4:	10800017 	ldw	r2,0(r2)
    39a8:	e0bffe15 	stw	r2,-8(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
    39ac:	e0bffe17 	ldw	r2,-8(fp)
    39b0:	103fdb1e 	bne	r2,zero,3920 <OS_EventTaskRemoveMulti+0x50>
    }
}
    39b4:	0001883a 	nop
    39b8:	0001883a 	nop
    39bc:	e037883a 	mov	sp,fp
    39c0:	df000017 	ldw	fp,0(sp)
    39c4:	dec00104 	addi	sp,sp,4
    39c8:	f800283a 	ret

000039cc <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
    39cc:	defffc04 	addi	sp,sp,-16
    39d0:	df000315 	stw	fp,12(sp)
    39d4:	df000304 	addi	fp,sp,12
    39d8:	e13ffd15 	stw	r4,-12(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    39dc:	e0bffd17 	ldw	r2,-12(fp)
    39e0:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
    39e4:	e0bffd17 	ldw	r2,-12(fp)
    39e8:	108002c4 	addi	r2,r2,11
    39ec:	e0bfff15 	stw	r2,-4(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    39f0:	e03ffec5 	stb	zero,-5(fp)
    39f4:	00000706 	br	3a14 <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
    39f8:	e0bfff17 	ldw	r2,-4(fp)
    39fc:	10c00044 	addi	r3,r2,1
    3a00:	e0ffff15 	stw	r3,-4(fp)
    3a04:	10000005 	stb	zero,0(r2)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    3a08:	e0bffec3 	ldbu	r2,-5(fp)
    3a0c:	10800044 	addi	r2,r2,1
    3a10:	e0bffec5 	stb	r2,-5(fp)
    3a14:	e0bffec3 	ldbu	r2,-5(fp)
    3a18:	108000f0 	cmpltui	r2,r2,3
    3a1c:	103ff61e 	bne	r2,zero,39f8 <OS_EventWaitListInit+0x2c>
    }
}
    3a20:	0001883a 	nop
    3a24:	0001883a 	nop
    3a28:	e037883a 	mov	sp,fp
    3a2c:	df000017 	ldw	fp,0(sp)
    3a30:	dec00104 	addi	sp,sp,4
    3a34:	f800283a 	ret

00003a38 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
    3a38:	defffb04 	addi	sp,sp,-20
    3a3c:	dfc00415 	stw	ra,16(sp)
    3a40:	df000315 	stw	fp,12(sp)
    3a44:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    3a48:	0142d004 	movi	r5,2880
    3a4c:	01000074 	movhi	r4,1
    3a50:	211e0004 	addi	r4,r4,30720
    3a54:	0003db80 	call	3db8 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
    3a58:	00800074 	movhi	r2,1
    3a5c:	109e0004 	addi	r2,r2,30720
    3a60:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
    3a64:	00800074 	movhi	r2,1
    3a68:	109e0c04 	addi	r2,r2,30768
    3a6c:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
    3a70:	e03fff8d 	sth	zero,-2(fp)
    3a74:	00001306 	br	3ac4 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
    3a78:	e0bffe17 	ldw	r2,-8(fp)
    3a7c:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
    3a80:	e0bffe17 	ldw	r2,-8(fp)
    3a84:	e0fffd17 	ldw	r3,-12(fp)
    3a88:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
    3a8c:	e0bffe17 	ldw	r2,-8(fp)
    3a90:	00c00fc4 	movi	r3,63
    3a94:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
    3a98:	e0bffe17 	ldw	r2,-8(fp)
    3a9c:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
    3aa0:	e0bffe17 	ldw	r2,-8(fp)
    3aa4:	10800c04 	addi	r2,r2,48
    3aa8:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
    3aac:	e0bffd17 	ldw	r2,-12(fp)
    3ab0:	10800c04 	addi	r2,r2,48
    3ab4:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
    3ab8:	e0bfff8b 	ldhu	r2,-2(fp)
    3abc:	10800044 	addi	r2,r2,1
    3ac0:	e0bfff8d 	sth	r2,-2(fp)
    3ac4:	e0bfff8b 	ldhu	r2,-2(fp)
    3ac8:	10800ef0 	cmpltui	r2,r2,59
    3acc:	103fea1e 	bne	r2,zero,3a78 <OS_InitEventList+0x40>
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
    3ad0:	e0bffe17 	ldw	r2,-8(fp)
    3ad4:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
    3ad8:	e0bffe17 	ldw	r2,-8(fp)
    3adc:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
    3ae0:	e0bffe17 	ldw	r2,-8(fp)
    3ae4:	00c00fc4 	movi	r3,63
    3ae8:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
    3aec:	e0bffe17 	ldw	r2,-8(fp)
    3af0:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
    3af4:	00800074 	movhi	r2,1
    3af8:	109e0004 	addi	r2,r2,30720
    3afc:	d0a6de15 	stw	r2,-25736(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
    3b00:	0001883a 	nop
    3b04:	e037883a 	mov	sp,fp
    3b08:	dfc00117 	ldw	ra,4(sp)
    3b0c:	df000017 	ldw	fp,0(sp)
    3b10:	dec00204 	addi	sp,sp,8
    3b14:	f800283a 	ret

00003b18 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
    3b18:	deffff04 	addi	sp,sp,-4
    3b1c:	df000015 	stw	fp,0(sp)
    3b20:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
    3b24:	d026ee15 	stw	zero,-25672(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
    3b28:	d026e345 	stb	zero,-25715(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
    3b2c:	d026e385 	stb	zero,-25714(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
    3b30:	d026e585 	stb	zero,-25706(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
    3b34:	d026e545 	stb	zero,-25707(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
    3b38:	d026dd15 	stw	zero,-25740(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
    3b3c:	d026e615 	stw	zero,-25704(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
    3b40:	d026e215 	stw	zero,-25720(gp)
    OSIdleCtrMax  = 0L;
    3b44:	d026e115 	stw	zero,-25724(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
    3b48:	d026e305 	stb	zero,-25716(gp)
#endif
}
    3b4c:	0001883a 	nop
    3b50:	e037883a 	mov	sp,fp
    3b54:	df000017 	ldw	fp,0(sp)
    3b58:	dec00104 	addi	sp,sp,4
    3b5c:	f800283a 	ret

00003b60 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
    3b60:	defffd04 	addi	sp,sp,-12
    3b64:	df000215 	stw	fp,8(sp)
    3b68:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    3b6c:	d026e445 	stb	zero,-25711(gp)
    prdytbl       = &OSRdyTbl[0];
    3b70:	d0a6e484 	addi	r2,gp,-25710
    3b74:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
    3b78:	e03fffc5 	stb	zero,-1(fp)
    3b7c:	00000706 	br	3b9c <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
    3b80:	e0bffe17 	ldw	r2,-8(fp)
    3b84:	10c00044 	addi	r3,r2,1
    3b88:	e0fffe15 	stw	r3,-8(fp)
    3b8c:	10000005 	stb	zero,0(r2)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
    3b90:	e0bfffc3 	ldbu	r2,-1(fp)
    3b94:	10800044 	addi	r2,r2,1
    3b98:	e0bfffc5 	stb	r2,-1(fp)
    3b9c:	e0bfffc3 	ldbu	r2,-1(fp)
    3ba0:	108000f0 	cmpltui	r2,r2,3
    3ba4:	103ff61e 	bne	r2,zero,3b80 <OS_InitRdyList+0x20>
    }

    OSPrioCur     = 0;
    3ba8:	d026e3c5 	stb	zero,-25713(gp)
    OSPrioHighRdy = 0;
    3bac:	d026e405 	stb	zero,-25712(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
    3bb0:	d026e915 	stw	zero,-25692(gp)
    OSTCBCur      = (OS_TCB *)0;
    3bb4:	d026e715 	stw	zero,-25700(gp)
}
    3bb8:	0001883a 	nop
    3bbc:	e037883a 	mov	sp,fp
    3bc0:	df000017 	ldw	fp,0(sp)
    3bc4:	dec00104 	addi	sp,sp,4
    3bc8:	f800283a 	ret

00003bcc <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
    3bcc:	defff804 	addi	sp,sp,-32
    3bd0:	dfc00715 	stw	ra,28(sp)
    3bd4:	df000615 	stw	fp,24(sp)
    3bd8:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
    3bdc:	008000c4 	movi	r2,3
    3be0:	d8800415 	stw	r2,16(sp)
    3be4:	d8000315 	stw	zero,12(sp)
    3be8:	00808004 	movi	r2,512
    3bec:	d8800215 	stw	r2,8(sp)
    3bf0:	008000b4 	movhi	r2,2
    3bf4:	10a3ac04 	addi	r2,r2,-29008
    3bf8:	d8800115 	stw	r2,4(sp)
    3bfc:	00bfffd4 	movui	r2,65535
    3c00:	d8800015 	stw	r2,0(sp)
    3c04:	01c00504 	movi	r7,20
    3c08:	018000b4 	movhi	r6,2
    3c0c:	31a5ab04 	addi	r6,r6,-26964
    3c10:	000b883a 	mov	r5,zero
    3c14:	01000034 	movhi	r4,0
    3c18:	21101f04 	addi	r4,r4,16508
    3c1c:	000886c0 	call	886c <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
    3c20:	e0bfffc4 	addi	r2,fp,-1
    3c24:	100d883a 	mov	r6,r2
    3c28:	01400074 	movhi	r5,1
    3c2c:	29785804 	addi	r5,r5,-7840
    3c30:	01000504 	movi	r4,20
    3c34:	00090800 	call	9080 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
    3c38:	0001883a 	nop
    3c3c:	e037883a 	mov	sp,fp
    3c40:	dfc00117 	ldw	ra,4(sp)
    3c44:	df000017 	ldw	fp,0(sp)
    3c48:	dec00204 	addi	sp,sp,8
    3c4c:	f800283a 	ret

00003c50 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
    3c50:	defff804 	addi	sp,sp,-32
    3c54:	dfc00715 	stw	ra,28(sp)
    3c58:	df000615 	stw	fp,24(sp)
    3c5c:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
    3c60:	008000c4 	movi	r2,3
    3c64:	d8800415 	stw	r2,16(sp)
    3c68:	d8000315 	stw	zero,12(sp)
    3c6c:	00808004 	movi	r2,512
    3c70:	d8800215 	stw	r2,8(sp)
    3c74:	008000b4 	movhi	r2,2
    3c78:	10a1ac04 	addi	r2,r2,-31056
    3c7c:	d8800115 	stw	r2,4(sp)
    3c80:	00bfff94 	movui	r2,65534
    3c84:	d8800015 	stw	r2,0(sp)
    3c88:	01c004c4 	movi	r7,19
    3c8c:	018000b4 	movhi	r6,2
    3c90:	31a3ab04 	addi	r6,r6,-29012
    3c94:	000b883a 	mov	r5,zero
    3c98:	01000034 	movhi	r4,0
    3c9c:	21103704 	addi	r4,r4,16604
    3ca0:	000886c0 	call	886c <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
    3ca4:	e0bfffc4 	addi	r2,fp,-1
    3ca8:	100d883a 	mov	r6,r2
    3cac:	01400074 	movhi	r5,1
    3cb0:	29785c04 	addi	r5,r5,-7824
    3cb4:	010004c4 	movi	r4,19
    3cb8:	00090800 	call	9080 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
    3cbc:	0001883a 	nop
    3cc0:	e037883a 	mov	sp,fp
    3cc4:	dfc00117 	ldw	ra,4(sp)
    3cc8:	df000017 	ldw	fp,0(sp)
    3ccc:	dec00204 	addi	sp,sp,8
    3cd0:	f800283a 	ret

00003cd4 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
    3cd4:	defffb04 	addi	sp,sp,-20
    3cd8:	dfc00415 	stw	ra,16(sp)
    3cdc:	df000315 	stw	fp,12(sp)
    3ce0:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    3ce4:	01414404 	movi	r5,1296
    3ce8:	010000b4 	movhi	r4,2
    3cec:	2125c104 	addi	r4,r4,-26876
    3cf0:	0003db80 	call	3db8 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    3cf4:	01401504 	movi	r5,84
    3cf8:	010000b4 	movhi	r4,2
    3cfc:	2125ac04 	addi	r4,r4,-26960
    3d00:	0003db80 	call	3db8 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
    3d04:	008000b4 	movhi	r2,2
    3d08:	10a5c104 	addi	r2,r2,-26876
    3d0c:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
    3d10:	008000b4 	movhi	r2,2
    3d14:	10a5dc04 	addi	r2,r2,-26768
    3d18:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
    3d1c:	e03fffc5 	stb	zero,-1(fp)
    3d20:	00001106 	br	3d68 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
    3d24:	e0bffe17 	ldw	r2,-8(fp)
    3d28:	e0fffd17 	ldw	r3,-12(fp)
    3d2c:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
    3d30:	e0bffe17 	ldw	r2,-8(fp)
    3d34:	00c00fc4 	movi	r3,63
    3d38:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
    3d3c:	e0bffe17 	ldw	r2,-8(fp)
    3d40:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
    3d44:	e0bffe17 	ldw	r2,-8(fp)
    3d48:	10801b04 	addi	r2,r2,108
    3d4c:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
    3d50:	e0bffd17 	ldw	r2,-12(fp)
    3d54:	10801b04 	addi	r2,r2,108
    3d58:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
    3d5c:	e0bfffc3 	ldbu	r2,-1(fp)
    3d60:	10800044 	addi	r2,r2,1
    3d64:	e0bfffc5 	stb	r2,-1(fp)
    3d68:	e0bfffc3 	ldbu	r2,-1(fp)
    3d6c:	108002f0 	cmpltui	r2,r2,11
    3d70:	103fec1e 	bne	r2,zero,3d24 <OS_InitTCBList+0x50>
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
    3d74:	e0bffe17 	ldw	r2,-8(fp)
    3d78:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
    3d7c:	e0bffe17 	ldw	r2,-8(fp)
    3d80:	00c00fc4 	movi	r3,63
    3d84:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
    3d88:	e0bffe17 	ldw	r2,-8(fp)
    3d8c:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
    3d90:	d026ea15 	stw	zero,-25688(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
    3d94:	008000b4 	movhi	r2,2
    3d98:	10a5c104 	addi	r2,r2,-26876
    3d9c:	d0a6e815 	stw	r2,-25696(gp)
}
    3da0:	0001883a 	nop
    3da4:	e037883a 	mov	sp,fp
    3da8:	dfc00117 	ldw	ra,4(sp)
    3dac:	df000017 	ldw	fp,0(sp)
    3db0:	dec00204 	addi	sp,sp,8
    3db4:	f800283a 	ret

00003db8 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    3db8:	defffd04 	addi	sp,sp,-12
    3dbc:	df000215 	stw	fp,8(sp)
    3dc0:	df000204 	addi	fp,sp,8
    3dc4:	e13fff15 	stw	r4,-4(fp)
    3dc8:	2805883a 	mov	r2,r5
    3dcc:	e0bffe0d 	sth	r2,-8(fp)
    while (size > 0) {
    3dd0:	00000706 	br	3df0 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
    3dd4:	e0bfff17 	ldw	r2,-4(fp)
    3dd8:	10c00044 	addi	r3,r2,1
    3ddc:	e0ffff15 	stw	r3,-4(fp)
    3de0:	10000005 	stb	zero,0(r2)
        size--;
    3de4:	e0bffe0b 	ldhu	r2,-8(fp)
    3de8:	10bfffc4 	addi	r2,r2,-1
    3dec:	e0bffe0d 	sth	r2,-8(fp)
    while (size > 0) {
    3df0:	e0bffe0b 	ldhu	r2,-8(fp)
    3df4:	103ff71e 	bne	r2,zero,3dd4 <OS_MemClr+0x1c>
    }
}
    3df8:	0001883a 	nop
    3dfc:	0001883a 	nop
    3e00:	e037883a 	mov	sp,fp
    3e04:	df000017 	ldw	fp,0(sp)
    3e08:	dec00104 	addi	sp,sp,4
    3e0c:	f800283a 	ret

00003e10 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    3e10:	defffc04 	addi	sp,sp,-16
    3e14:	df000315 	stw	fp,12(sp)
    3e18:	df000304 	addi	fp,sp,12
    3e1c:	e13fff15 	stw	r4,-4(fp)
    3e20:	e17ffe15 	stw	r5,-8(fp)
    3e24:	3005883a 	mov	r2,r6
    3e28:	e0bffd0d 	sth	r2,-12(fp)
    while (size > 0) {
    3e2c:	00000b06 	br	3e5c <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
    3e30:	e0fffe17 	ldw	r3,-8(fp)
    3e34:	18800044 	addi	r2,r3,1
    3e38:	e0bffe15 	stw	r2,-8(fp)
    3e3c:	e0bfff17 	ldw	r2,-4(fp)
    3e40:	11000044 	addi	r4,r2,1
    3e44:	e13fff15 	stw	r4,-4(fp)
    3e48:	18c00003 	ldbu	r3,0(r3)
    3e4c:	10c00005 	stb	r3,0(r2)
        size--;
    3e50:	e0bffd0b 	ldhu	r2,-12(fp)
    3e54:	10bfffc4 	addi	r2,r2,-1
    3e58:	e0bffd0d 	sth	r2,-12(fp)
    while (size > 0) {
    3e5c:	e0bffd0b 	ldhu	r2,-12(fp)
    3e60:	103ff31e 	bne	r2,zero,3e30 <OS_MemCopy+0x20>
    }
}
    3e64:	0001883a 	nop
    3e68:	0001883a 	nop
    3e6c:	e037883a 	mov	sp,fp
    3e70:	df000017 	ldw	fp,0(sp)
    3e74:	dec00104 	addi	sp,sp,4
    3e78:	f800283a 	ret

00003e7c <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
    3e7c:	defffb04 	addi	sp,sp,-20
    3e80:	dfc00415 	stw	ra,16(sp)
    3e84:	df000315 	stw	fp,12(sp)
    3e88:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    3e8c:	e03fff15 	stw	zero,-4(fp)
  NIOS2_READ_STATUS (context);
    3e90:	0005303a 	rdctl	r2,status
    3e94:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3e98:	e0fffe17 	ldw	r3,-8(fp)
    3e9c:	00bfff84 	movi	r2,-2
    3ea0:	1884703a 	and	r2,r3,r2
    3ea4:	1001703a 	wrctl	status,r2
  return context;
    3ea8:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
    3eac:	e0bfff15 	stw	r2,-4(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
    3eb0:	d0a6e343 	ldbu	r2,-25715(gp)
    3eb4:	10803fcc 	andi	r2,r2,255
    3eb8:	1000181e 	bne	r2,zero,3f1c <OS_Sched+0xa0>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
    3ebc:	d0a6e383 	ldbu	r2,-25714(gp)
    3ec0:	10803fcc 	andi	r2,r2,255
    3ec4:	1000151e 	bne	r2,zero,3f1c <OS_Sched+0xa0>
            OS_SchedNew();
    3ec8:	0003f480 	call	3f48 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
    3ecc:	d0e6e403 	ldbu	r3,-25712(gp)
    3ed0:	d0a6e3c3 	ldbu	r2,-25713(gp)
    3ed4:	18c03fcc 	andi	r3,r3,255
    3ed8:	10803fcc 	andi	r2,r2,255
    3edc:	18800f26 	beq	r3,r2,3f1c <OS_Sched+0xa0>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
    3ee0:	d0a6e403 	ldbu	r2,-25712(gp)
    3ee4:	10803fcc 	andi	r2,r2,255
    3ee8:	100690ba 	slli	r3,r2,2
    3eec:	008000b4 	movhi	r2,2
    3ef0:	1885883a 	add	r2,r3,r2
    3ef4:	10a5ac17 	ldw	r2,-26960(r2)
    3ef8:	d0a6e915 	stw	r2,-25692(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
    3efc:	d0a6e917 	ldw	r2,-25692(gp)
    3f00:	10c00e17 	ldw	r3,56(r2)
    3f04:	18c00044 	addi	r3,r3,1
    3f08:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
    3f0c:	d0a6dd17 	ldw	r2,-25740(gp)
    3f10:	10800044 	addi	r2,r2,1
    3f14:	d0a6dd15 	stw	r2,-25740(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
    3f18:	000d3d00 	call	d3d0 <OSCtxSw>
    3f1c:	e0bfff17 	ldw	r2,-4(fp)
    3f20:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
    3f24:	e0bffd17 	ldw	r2,-12(fp)
    3f28:	1001703a 	wrctl	status,r2
}
    3f2c:	0001883a 	nop
            }
        }
    }
    OS_EXIT_CRITICAL();
}
    3f30:	0001883a 	nop
    3f34:	e037883a 	mov	sp,fp
    3f38:	dfc00117 	ldw	ra,4(sp)
    3f3c:	df000017 	ldw	fp,0(sp)
    3f40:	dec00204 	addi	sp,sp,8
    3f44:	f800283a 	ret

00003f48 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
    3f48:	defffe04 	addi	sp,sp,-8
    3f4c:	df000115 	stw	fp,4(sp)
    3f50:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
    3f54:	d0a6e443 	ldbu	r2,-25711(gp)
    3f58:	10c03fcc 	andi	r3,r2,255
    3f5c:	00800074 	movhi	r2,1
    3f60:	1885883a 	add	r2,r3,r2
    3f64:	10b81803 	ldbu	r2,-8096(r2)
    3f68:	e0bfffc5 	stb	r2,-1(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
    3f6c:	e0bfffc3 	ldbu	r2,-1(fp)
    3f70:	100490fa 	slli	r2,r2,3
    3f74:	1009883a 	mov	r4,r2
    3f78:	e0ffffc3 	ldbu	r3,-1(fp)
    3f7c:	d0a6e484 	addi	r2,gp,-25710
    3f80:	1885883a 	add	r2,r3,r2
    3f84:	10800003 	ldbu	r2,0(r2)
    3f88:	10c03fcc 	andi	r3,r2,255
    3f8c:	00800074 	movhi	r2,1
    3f90:	1885883a 	add	r2,r3,r2
    3f94:	10b81803 	ldbu	r2,-8096(r2)
    3f98:	2085883a 	add	r2,r4,r2
    3f9c:	d0a6e405 	stb	r2,-25712(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
    3fa0:	0001883a 	nop
    3fa4:	e037883a 	mov	sp,fp
    3fa8:	df000017 	ldw	fp,0(sp)
    3fac:	dec00104 	addi	sp,sp,4
    3fb0:	f800283a 	ret

00003fb4 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
    3fb4:	defffc04 	addi	sp,sp,-16
    3fb8:	df000315 	stw	fp,12(sp)
    3fbc:	df000304 	addi	fp,sp,12
    3fc0:	e13ffe15 	stw	r4,-8(fp)
    3fc4:	e17ffd15 	stw	r5,-12(fp)
    INT8U  len;


    len = 0;
    3fc8:	e03fffc5 	stb	zero,-1(fp)
    while (*psrc != OS_ASCII_NUL) {
    3fcc:	00000b06 	br	3ffc <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
    3fd0:	e0fffd17 	ldw	r3,-12(fp)
    3fd4:	18800044 	addi	r2,r3,1
    3fd8:	e0bffd15 	stw	r2,-12(fp)
    3fdc:	e0bffe17 	ldw	r2,-8(fp)
    3fe0:	11000044 	addi	r4,r2,1
    3fe4:	e13ffe15 	stw	r4,-8(fp)
    3fe8:	18c00003 	ldbu	r3,0(r3)
    3fec:	10c00005 	stb	r3,0(r2)
        len++;
    3ff0:	e0bfffc3 	ldbu	r2,-1(fp)
    3ff4:	10800044 	addi	r2,r2,1
    3ff8:	e0bfffc5 	stb	r2,-1(fp)
    while (*psrc != OS_ASCII_NUL) {
    3ffc:	e0bffd17 	ldw	r2,-12(fp)
    4000:	10800003 	ldbu	r2,0(r2)
    4004:	10803fcc 	andi	r2,r2,255
    4008:	103ff11e 	bne	r2,zero,3fd0 <OS_StrCopy+0x1c>
    }
    *pdest = OS_ASCII_NUL;
    400c:	e0bffe17 	ldw	r2,-8(fp)
    4010:	10000005 	stb	zero,0(r2)
    return (len);
    4014:	e0bfffc3 	ldbu	r2,-1(fp)
}
    4018:	e037883a 	mov	sp,fp
    401c:	df000017 	ldw	fp,0(sp)
    4020:	dec00104 	addi	sp,sp,4
    4024:	f800283a 	ret

00004028 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
    4028:	defffd04 	addi	sp,sp,-12
    402c:	df000215 	stw	fp,8(sp)
    4030:	df000204 	addi	fp,sp,8
    4034:	e13ffe15 	stw	r4,-8(fp)
    INT8U  len;


    len = 0;
    4038:	e03fffc5 	stb	zero,-1(fp)
    while (*psrc != OS_ASCII_NUL) {
    403c:	00000606 	br	4058 <OS_StrLen+0x30>
        psrc++;
    4040:	e0bffe17 	ldw	r2,-8(fp)
    4044:	10800044 	addi	r2,r2,1
    4048:	e0bffe15 	stw	r2,-8(fp)
        len++;
    404c:	e0bfffc3 	ldbu	r2,-1(fp)
    4050:	10800044 	addi	r2,r2,1
    4054:	e0bfffc5 	stb	r2,-1(fp)
    while (*psrc != OS_ASCII_NUL) {
    4058:	e0bffe17 	ldw	r2,-8(fp)
    405c:	10800003 	ldbu	r2,0(r2)
    4060:	10803fcc 	andi	r2,r2,255
    4064:	103ff61e 	bne	r2,zero,4040 <OS_StrLen+0x18>
    }
    return (len);
    4068:	e0bfffc3 	ldbu	r2,-1(fp)
}
    406c:	e037883a 	mov	sp,fp
    4070:	df000017 	ldw	fp,0(sp)
    4074:	dec00104 	addi	sp,sp,4
    4078:	f800283a 	ret

0000407c <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
    407c:	defffa04 	addi	sp,sp,-24
    4080:	dfc00515 	stw	ra,20(sp)
    4084:	df000415 	stw	fp,16(sp)
    4088:	df000404 	addi	fp,sp,16
    408c:	e13ffc15 	stw	r4,-16(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    4090:	e03fff15 	stw	zero,-4(fp)
  NIOS2_READ_STATUS (context);
    4094:	0005303a 	rdctl	r2,status
    4098:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    409c:	e0fffd17 	ldw	r3,-12(fp)
    40a0:	00bfff84 	movi	r2,-2
    40a4:	1884703a 	and	r2,r3,r2
    40a8:	1001703a 	wrctl	status,r2
  return context;
    40ac:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
    40b0:	e0bfff15 	stw	r2,-4(fp)
        OSIdleCtr++;
    40b4:	d0a6e617 	ldw	r2,-25704(gp)
    40b8:	10800044 	addi	r2,r2,1
    40bc:	d0a6e615 	stw	r2,-25704(gp)
    40c0:	e0bfff17 	ldw	r2,-4(fp)
    40c4:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
    40c8:	e0bffe17 	ldw	r2,-8(fp)
    40cc:	1001703a 	wrctl	status,r2
}
    40d0:	0001883a 	nop
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
    40d4:	000d6d40 	call	d6d4 <OSTaskIdleHook>
        OS_ENTER_CRITICAL();
    40d8:	003fee06 	br	4094 <OS_TaskIdle+0x18>

000040dc <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
    40dc:	defffa04 	addi	sp,sp,-24
    40e0:	dfc00515 	stw	ra,20(sp)
    40e4:	df000415 	stw	fp,16(sp)
    40e8:	df000404 	addi	fp,sp,16
    40ec:	e13ffc15 	stw	r4,-16(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    40f0:	e03fff15 	stw	zero,-4(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
    40f4:	00000206 	br	4100 <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    40f8:	01000044 	movi	r4,1
    40fc:	00099540 	call	9954 <OSTimeDly>
    while (OSStatRdy == OS_FALSE) {
    4100:	d0a6e303 	ldbu	r2,-25716(gp)
    4104:	10803fcc 	andi	r2,r2,255
    4108:	103ffb26 	beq	r2,zero,40f8 <OS_TaskStat+0x1c>
    }
    OSIdleCtrMax /= 100L;
    410c:	d0e6e117 	ldw	r3,-25724(gp)
    4110:	00801904 	movi	r2,100
    4114:	1885203a 	divu	r2,r3,r2
    4118:	d0a6e115 	stw	r2,-25724(gp)
    if (OSIdleCtrMax == 0L) {
    411c:	d0a6e117 	ldw	r2,-25724(gp)
    4120:	1000031e 	bne	r2,zero,4130 <OS_TaskStat+0x54>
        OSCPUUsage = 0;
    4124:	d026e005 	stb	zero,-25728(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
    4128:	01003fc4 	movi	r4,255
    412c:	00095d40 	call	95d4 <OSTaskSuspend>
  NIOS2_READ_STATUS (context);
    4130:	0005303a 	rdctl	r2,status
    4134:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4138:	e0fffd17 	ldw	r3,-12(fp)
    413c:	00bfff84 	movi	r2,-2
    4140:	1884703a 	and	r2,r3,r2
    4144:	1001703a 	wrctl	status,r2
  return context;
    4148:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
    414c:	e0bfff15 	stw	r2,-4(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
    4150:	d0a6e617 	ldw	r2,-25704(gp)
    4154:	d0a6e215 	stw	r2,-25720(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
    4158:	d026e615 	stw	zero,-25704(gp)
    415c:	e0bfff17 	ldw	r2,-4(fp)
    4160:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
    4164:	e0bffe17 	ldw	r2,-8(fp)
    4168:	1001703a 	wrctl	status,r2
}
    416c:	0001883a 	nop
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
    4170:	d0e6e217 	ldw	r3,-25720(gp)
    4174:	d0a6e117 	ldw	r2,-25724(gp)
    4178:	1885203a 	divu	r2,r3,r2
    417c:	1007883a 	mov	r3,r2
    4180:	00801904 	movi	r2,100
    4184:	10c5c83a 	sub	r2,r2,r3
    4188:	d0a6e005 	stb	r2,-25728(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
    418c:	000d6540 	call	d654 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
    4190:	00041a00 	call	41a0 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
    4194:	0009883a 	mov	r4,zero
    4198:	00099540 	call	9954 <OSTimeDly>
        OS_ENTER_CRITICAL();
    419c:	003fe406 	br	4130 <OS_TaskStat+0x54>

000041a0 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
    41a0:	defffa04 	addi	sp,sp,-24
    41a4:	dfc00515 	stw	ra,20(sp)
    41a8:	df000415 	stw	fp,16(sp)
    41ac:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
    41b0:	e03fffc5 	stb	zero,-1(fp)
    41b4:	00002106 	br	423c <OS_TaskStatStkChk+0x9c>
        err = OSTaskStkChk(prio, &stk_data);
    41b8:	e0bfffc3 	ldbu	r2,-1(fp)
    41bc:	e0fffc04 	addi	r3,fp,-16
    41c0:	180b883a 	mov	r5,r3
    41c4:	1009883a 	mov	r4,r2
    41c8:	000941c0 	call	941c <OSTaskStkChk>
    41cc:	e0bfff85 	stb	r2,-2(fp)
        if (err == OS_ERR_NONE) {
    41d0:	e0bfff83 	ldbu	r2,-2(fp)
    41d4:	1000161e 	bne	r2,zero,4230 <OS_TaskStatStkChk+0x90>
            ptcb = OSTCBPrioTbl[prio];
    41d8:	e0bfffc3 	ldbu	r2,-1(fp)
    41dc:	100690ba 	slli	r3,r2,2
    41e0:	008000b4 	movhi	r2,2
    41e4:	1885883a 	add	r2,r3,r2
    41e8:	10a5ac17 	ldw	r2,-26960(r2)
    41ec:	e0bffe15 	stw	r2,-8(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
    41f0:	e0bffe17 	ldw	r2,-8(fp)
    41f4:	10000e26 	beq	r2,zero,4230 <OS_TaskStatStkChk+0x90>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
    41f8:	e0bffe17 	ldw	r2,-8(fp)
    41fc:	10800060 	cmpeqi	r2,r2,1
    4200:	10000b1e 	bne	r2,zero,4230 <OS_TaskStatStkChk+0x90>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
    4204:	e0bffe17 	ldw	r2,-8(fp)
    4208:	10c00217 	ldw	r3,8(r2)
    420c:	e0bffe17 	ldw	r2,-8(fp)
    4210:	10800317 	ldw	r2,12(r2)
    4214:	100490ba 	slli	r2,r2,2
    4218:	1887883a 	add	r3,r3,r2
    421c:	e0bffe17 	ldw	r2,-8(fp)
    4220:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
    4224:	e0fffd17 	ldw	r3,-12(fp)
    4228:	e0bffe17 	ldw	r2,-8(fp)
    422c:	10c01215 	stw	r3,72(r2)
    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
    4230:	e0bfffc3 	ldbu	r2,-1(fp)
    4234:	10800044 	addi	r2,r2,1
    4238:	e0bfffc5 	stb	r2,-1(fp)
    423c:	e0bfffc3 	ldbu	r2,-1(fp)
    4240:	10800570 	cmpltui	r2,r2,21
    4244:	103fdc1e 	bne	r2,zero,41b8 <OS_TaskStatStkChk+0x18>
#endif
                }
            }
        }
    }
}
    4248:	0001883a 	nop
    424c:	0001883a 	nop
    4250:	e037883a 	mov	sp,fp
    4254:	dfc00117 	ldw	ra,4(sp)
    4258:	df000017 	ldw	fp,0(sp)
    425c:	dec00204 	addi	sp,sp,8
    4260:	f800283a 	ret

00004264 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
    4264:	defff204 	addi	sp,sp,-56
    4268:	dfc00d15 	stw	ra,52(sp)
    426c:	df000c15 	stw	fp,48(sp)
    4270:	df000c04 	addi	fp,sp,48
    4274:	2007883a 	mov	r3,r4
    4278:	e17ff715 	stw	r5,-36(fp)
    427c:	e1bff615 	stw	r6,-40(fp)
    4280:	3809883a 	mov	r4,r7
    4284:	e0800417 	ldw	r2,16(fp)
    4288:	e0fff805 	stb	r3,-32(fp)
    428c:	2007883a 	mov	r3,r4
    4290:	e0fff50d 	sth	r3,-44(fp)
    4294:	e0bff40d 	sth	r2,-48(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    4298:	e03fff15 	stw	zero,-4(fp)
  NIOS2_READ_STATUS (context);
    429c:	0005303a 	rdctl	r2,status
    42a0:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    42a4:	e0fffd17 	ldw	r3,-12(fp)
    42a8:	00bfff84 	movi	r2,-2
    42ac:	1884703a 	and	r2,r3,r2
    42b0:	1001703a 	wrctl	status,r2
  return context;
    42b4:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
    42b8:	e0bfff15 	stw	r2,-4(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
    42bc:	d0a6e817 	ldw	r2,-25696(gp)
    42c0:	e0bffe15 	stw	r2,-8(fp)
    if (ptcb != (OS_TCB *)0) {
    42c4:	e0bffe17 	ldw	r2,-8(fp)
    42c8:	10009326 	beq	r2,zero,4518 <OS_TCBInit+0x2b4>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
    42cc:	e0bffe17 	ldw	r2,-8(fp)
    42d0:	10800517 	ldw	r2,20(r2)
    42d4:	d0a6e815 	stw	r2,-25696(gp)
    42d8:	e0bfff17 	ldw	r2,-4(fp)
    42dc:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    42e0:	e0bffb17 	ldw	r2,-20(fp)
    42e4:	1001703a 	wrctl	status,r2
}
    42e8:	0001883a 	nop
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
    42ec:	e0bffe17 	ldw	r2,-8(fp)
    42f0:	e0fff717 	ldw	r3,-36(fp)
    42f4:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
    42f8:	e0bffe17 	ldw	r2,-8(fp)
    42fc:	e0fff803 	ldbu	r3,-32(fp)
    4300:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
    4304:	e0bffe17 	ldw	r2,-8(fp)
    4308:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
    430c:	e0bffe17 	ldw	r2,-8(fp)
    4310:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
    4314:	e0bffe17 	ldw	r2,-8(fp)
    4318:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
    431c:	e0bffe17 	ldw	r2,-8(fp)
    4320:	e0c00317 	ldw	r3,12(fp)
    4324:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
    4328:	e0bffe17 	ldw	r2,-8(fp)
    432c:	e0c00217 	ldw	r3,8(fp)
    4330:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
    4334:	e0bffe17 	ldw	r2,-8(fp)
    4338:	e0fff617 	ldw	r3,-40(fp)
    433c:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
    4340:	e0bffe17 	ldw	r2,-8(fp)
    4344:	e0fff40b 	ldhu	r3,-48(fp)
    4348:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
    434c:	e0bffe17 	ldw	r2,-8(fp)
    4350:	e0fff50b 	ldhu	r3,-44(fp)
    4354:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
    4358:	e0bffe17 	ldw	r2,-8(fp)
    435c:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
    4360:	e0bff803 	ldbu	r2,-32(fp)
    4364:	1004d0fa 	srli	r2,r2,3
    4368:	1007883a 	mov	r3,r2
    436c:	e0bffe17 	ldw	r2,-8(fp)
    4370:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
    4374:	e0bff803 	ldbu	r2,-32(fp)
    4378:	108001cc 	andi	r2,r2,7
    437c:	1007883a 	mov	r3,r2
    4380:	e0bffe17 	ldw	r2,-8(fp)
    4384:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
    4388:	e0bffe17 	ldw	r2,-8(fp)
    438c:	10800d03 	ldbu	r2,52(r2)
    4390:	10803fcc 	andi	r2,r2,255
    4394:	00c00044 	movi	r3,1
    4398:	1884983a 	sll	r2,r3,r2
    439c:	1007883a 	mov	r3,r2
    43a0:	e0bffe17 	ldw	r2,-8(fp)
    43a4:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
    43a8:	e0bffe17 	ldw	r2,-8(fp)
    43ac:	10800cc3 	ldbu	r2,51(r2)
    43b0:	10803fcc 	andi	r2,r2,255
    43b4:	00c00044 	movi	r3,1
    43b8:	1884983a 	sll	r2,r3,r2
    43bc:	1007883a 	mov	r3,r2
    43c0:	e0bffe17 	ldw	r2,-8(fp)
    43c4:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
    43c8:	e0bffe17 	ldw	r2,-8(fp)
    43cc:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
    43d0:	e0bffe17 	ldw	r2,-8(fp)
    43d4:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
    43d8:	e0bffe17 	ldw	r2,-8(fp)
    43dc:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
    43e0:	e0bffe17 	ldw	r2,-8(fp)
    43e4:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
    43e8:	e0bffe17 	ldw	r2,-8(fp)
    43ec:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
    43f0:	e0bffe17 	ldw	r2,-8(fp)
    43f4:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
    43f8:	e0bffe17 	ldw	r2,-8(fp)
    43fc:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
    4400:	e0bffe17 	ldw	r2,-8(fp)
    4404:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
    4408:	e0bffe17 	ldw	r2,-8(fp)
    440c:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
    4410:	e0bffe17 	ldw	r2,-8(fp)
    4414:	00c00fc4 	movi	r3,63
    4418:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
    441c:	e0bffe17 	ldw	r2,-8(fp)
    4420:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
    4424:	e13ffe17 	ldw	r4,-8(fp)
    4428:	000d6f40 	call	d6f4 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
    442c:	e13ffe17 	ldw	r4,-8(fp)
    4430:	000d5ec0 	call	d5ec <OSTaskCreateHook>
  NIOS2_READ_STATUS (context);
    4434:	0005303a 	rdctl	r2,status
    4438:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    443c:	e0fffc17 	ldw	r3,-16(fp)
    4440:	00bfff84 	movi	r2,-2
    4444:	1884703a 	and	r2,r3,r2
    4448:	1001703a 	wrctl	status,r2
  return context;
    444c:	e0bffc17 	ldw	r2,-16(fp)

        OS_ENTER_CRITICAL();
    4450:	e0bfff15 	stw	r2,-4(fp)
        OSTCBPrioTbl[prio] = ptcb;
    4454:	e0bff803 	ldbu	r2,-32(fp)
    4458:	100890ba 	slli	r4,r2,2
    445c:	e0fffe17 	ldw	r3,-8(fp)
    4460:	008000b4 	movhi	r2,2
    4464:	2085883a 	add	r2,r4,r2
    4468:	10e5ac15 	stw	r3,-26960(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
    446c:	d0e6ea17 	ldw	r3,-25688(gp)
    4470:	e0bffe17 	ldw	r2,-8(fp)
    4474:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
    4478:	e0bffe17 	ldw	r2,-8(fp)
    447c:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
    4480:	d0a6ea17 	ldw	r2,-25688(gp)
    4484:	10000326 	beq	r2,zero,4494 <OS_TCBInit+0x230>
            OSTCBList->OSTCBPrev = ptcb;
    4488:	d0a6ea17 	ldw	r2,-25688(gp)
    448c:	e0fffe17 	ldw	r3,-8(fp)
    4490:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
    4494:	e0bffe17 	ldw	r2,-8(fp)
    4498:	d0a6ea15 	stw	r2,-25688(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
    449c:	e0bffe17 	ldw	r2,-8(fp)
    44a0:	10c00d83 	ldbu	r3,54(r2)
    44a4:	d0a6e443 	ldbu	r2,-25711(gp)
    44a8:	1884b03a 	or	r2,r3,r2
    44ac:	d0a6e445 	stb	r2,-25711(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    44b0:	e0bffe17 	ldw	r2,-8(fp)
    44b4:	10800d03 	ldbu	r2,52(r2)
    44b8:	10c03fcc 	andi	r3,r2,255
    44bc:	d0a6e484 	addi	r2,gp,-25710
    44c0:	1885883a 	add	r2,r3,r2
    44c4:	11000003 	ldbu	r4,0(r2)
    44c8:	e0bffe17 	ldw	r2,-8(fp)
    44cc:	10800d43 	ldbu	r2,53(r2)
    44d0:	e0fffe17 	ldw	r3,-8(fp)
    44d4:	18c00d03 	ldbu	r3,52(r3)
    44d8:	18c03fcc 	andi	r3,r3,255
    44dc:	2084b03a 	or	r2,r4,r2
    44e0:	1009883a 	mov	r4,r2
    44e4:	d0a6e484 	addi	r2,gp,-25710
    44e8:	1885883a 	add	r2,r3,r2
    44ec:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
    44f0:	d0a6e583 	ldbu	r2,-25706(gp)
    44f4:	10800044 	addi	r2,r2,1
    44f8:	d0a6e585 	stb	r2,-25706(gp)
    44fc:	e0bfff17 	ldw	r2,-4(fp)
    4500:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
    4504:	e0bffa17 	ldw	r2,-24(fp)
    4508:	1001703a 	wrctl	status,r2
}
    450c:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
    4510:	0005883a 	mov	r2,zero
    4514:	00000606 	br	4530 <OS_TCBInit+0x2cc>
    4518:	e0bfff17 	ldw	r2,-4(fp)
    451c:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
    4520:	e0bff917 	ldw	r2,-28(fp)
    4524:	1001703a 	wrctl	status,r2
}
    4528:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
    452c:	00801084 	movi	r2,66
}
    4530:	e037883a 	mov	sp,fp
    4534:	dfc00117 	ldw	ra,4(sp)
    4538:	df000017 	ldw	fp,0(sp)
    453c:	dec00204 	addi	sp,sp,8
    4540:	f800283a 	ret

00004544 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
    4544:	defffe04 	addi	sp,sp,-8
    4548:	df000115 	stw	fp,4(sp)
    454c:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
    4550:	d0a00904 	addi	r2,gp,-32732
    4554:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
    4558:	d0a00a04 	addi	r2,gp,-32728
    455c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
    4560:	d0a00b84 	addi	r2,gp,-32722
    4564:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
    4568:	d0a00c04 	addi	r2,gp,-32720
    456c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
    4570:	d0a00b04 	addi	r2,gp,-32724
    4574:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
    4578:	d0a00c84 	addi	r2,gp,-32718
    457c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
    4580:	d0a00d04 	addi	r2,gp,-32716
    4584:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
    4588:	d0a00d84 	addi	r2,gp,-32714
    458c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
    4590:	d0a00e04 	addi	r2,gp,-32712
    4594:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
    4598:	d0a00e84 	addi	r2,gp,-32710
    459c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
    45a0:	d0a00f04 	addi	r2,gp,-32708
    45a4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
    45a8:	d0a00f84 	addi	r2,gp,-32706
    45ac:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
    45b0:	d0a01004 	addi	r2,gp,-32704
    45b4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
    45b8:	d0a01084 	addi	r2,gp,-32702
    45bc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
    45c0:	d0a01104 	addi	r2,gp,-32700
    45c4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
    45c8:	d0a01184 	addi	r2,gp,-32698
    45cc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
    45d0:	d0a01204 	addi	r2,gp,-32696
    45d4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
    45d8:	d0a01284 	addi	r2,gp,-32694
    45dc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
    45e0:	d0a01304 	addi	r2,gp,-32692
    45e4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
    45e8:	d0a01384 	addi	r2,gp,-32690
    45ec:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
    45f0:	d0a01404 	addi	r2,gp,-32688
    45f4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
    45f8:	d0a01484 	addi	r2,gp,-32686
    45fc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
    4600:	d0a01504 	addi	r2,gp,-32684
    4604:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
    4608:	d0a01584 	addi	r2,gp,-32682
    460c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
    4610:	d0a01604 	addi	r2,gp,-32680
    4614:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
    4618:	d0a01684 	addi	r2,gp,-32678
    461c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
    4620:	d0a01704 	addi	r2,gp,-32676
    4624:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
    4628:	d0a01784 	addi	r2,gp,-32674
    462c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
    4630:	d0a01804 	addi	r2,gp,-32672
    4634:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
    4638:	d0a01884 	addi	r2,gp,-32670
    463c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
    4640:	d0a01904 	addi	r2,gp,-32668
    4644:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
    4648:	d0a01984 	addi	r2,gp,-32666
    464c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
    4650:	d0a01a04 	addi	r2,gp,-32664
    4654:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
    4658:	d0a01a84 	addi	r2,gp,-32662
    465c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
    4660:	d0a01b04 	addi	r2,gp,-32660
    4664:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
    4668:	d0a01b84 	addi	r2,gp,-32658
    466c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
    4670:	d0a01c04 	addi	r2,gp,-32656
    4674:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
    4678:	d0a01c84 	addi	r2,gp,-32654
    467c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
    4680:	d0a01d04 	addi	r2,gp,-32652
    4684:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
    4688:	d0a01d84 	addi	r2,gp,-32650
    468c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
    4690:	d0a01e04 	addi	r2,gp,-32648
    4694:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
    4698:	d0a01e84 	addi	r2,gp,-32646
    469c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
    46a0:	d0a01f04 	addi	r2,gp,-32644
    46a4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
    46a8:	d0a01f84 	addi	r2,gp,-32642
    46ac:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
    46b0:	d0a02004 	addi	r2,gp,-32640
    46b4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
    46b8:	d0a02504 	addi	r2,gp,-32620
    46bc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
    46c0:	0001883a 	nop
    46c4:	e037883a 	mov	sp,fp
    46c8:	df000017 	ldw	fp,0(sp)
    46cc:	dec00104 	addi	sp,sp,4
    46d0:	f800283a 	ret

000046d4 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
    46d4:	defff204 	addi	sp,sp,-56
    46d8:	df000d15 	stw	fp,52(sp)
    46dc:	df000d04 	addi	fp,sp,52
    46e0:	e13ff615 	stw	r4,-40(fp)
    46e4:	2805883a 	mov	r2,r5
    46e8:	3007883a 	mov	r3,r6
    46ec:	e1fff315 	stw	r7,-52(fp)
    46f0:	e0bff50d 	sth	r2,-44(fp)
    46f4:	1805883a 	mov	r2,r3
    46f8:	e0bff405 	stb	r2,-48(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    46fc:	e03ffe15 	stw	zero,-8(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    4700:	e0bff317 	ldw	r2,-52(fp)
    4704:	1000021e 	bne	r2,zero,4710 <OSFlagAccept+0x3c>
        return ((OS_FLAGS)0);
    4708:	0005883a 	mov	r2,zero
    470c:	0000b606 	br	49e8 <OSFlagAccept+0x314>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
    4710:	e0bff617 	ldw	r2,-40(fp)
    4714:	1000051e 	bne	r2,zero,472c <OSFlagAccept+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    4718:	e0bff317 	ldw	r2,-52(fp)
    471c:	00c01b84 	movi	r3,110
    4720:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    4724:	0005883a 	mov	r2,zero
    4728:	0000af06 	br	49e8 <OSFlagAccept+0x314>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
    472c:	e0bff617 	ldw	r2,-40(fp)
    4730:	10800003 	ldbu	r2,0(r2)
    4734:	10803fcc 	andi	r2,r2,255
    4738:	10800160 	cmpeqi	r2,r2,5
    473c:	1000051e 	bne	r2,zero,4754 <OSFlagAccept+0x80>
        *perr = OS_ERR_EVENT_TYPE;
    4740:	e0bff317 	ldw	r2,-52(fp)
    4744:	00c00044 	movi	r3,1
    4748:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    474c:	0005883a 	mov	r2,zero
    4750:	0000a506 	br	49e8 <OSFlagAccept+0x314>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
    4754:	e0fff403 	ldbu	r3,-48(fp)
    4758:	00bfe004 	movi	r2,-128
    475c:	1884703a 	and	r2,r3,r2
    4760:	e0bffdc5 	stb	r2,-9(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
    4764:	e0bffdc3 	ldbu	r2,-9(fp)
    4768:	10000626 	beq	r2,zero,4784 <OSFlagAccept+0xb0>
        wait_type &= ~OS_FLAG_CONSUME;
    476c:	e0bff403 	ldbu	r2,-48(fp)
    4770:	10801fcc 	andi	r2,r2,127
    4774:	e0bff405 	stb	r2,-48(fp)
        consume    = OS_TRUE;
    4778:	00800044 	movi	r2,1
    477c:	e0bfff45 	stb	r2,-3(fp)
    4780:	00000106 	br	4788 <OSFlagAccept+0xb4>
    } else {
        consume    = OS_FALSE;
    4784:	e03fff45 	stb	zero,-3(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
    4788:	e0bff317 	ldw	r2,-52(fp)
    478c:	10000005 	stb	zero,0(r2)
  NIOS2_READ_STATUS (context);
    4790:	0005303a 	rdctl	r2,status
    4794:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4798:	e0fffc17 	ldw	r3,-16(fp)
    479c:	00bfff84 	movi	r2,-2
    47a0:	1884703a 	and	r2,r3,r2
    47a4:	1001703a 	wrctl	status,r2
  return context;
    47a8:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
    47ac:	e0bffe15 	stw	r2,-8(fp)
    switch (wait_type) {
    47b0:	e0bff403 	ldbu	r2,-48(fp)
    47b4:	10c000e0 	cmpeqi	r3,r2,3
    47b8:	1800281e 	bne	r3,zero,485c <OSFlagAccept+0x188>
    47bc:	10c00108 	cmpgei	r3,r2,4
    47c0:	18007e1e 	bne	r3,zero,49bc <OSFlagAccept+0x2e8>
    47c4:	10c000a0 	cmpeqi	r3,r2,2
    47c8:	1800061e 	bne	r3,zero,47e4 <OSFlagAccept+0x110>
    47cc:	10c000c8 	cmpgei	r3,r2,3
    47d0:	18007a1e 	bne	r3,zero,49bc <OSFlagAccept+0x2e8>
    47d4:	10003e26 	beq	r2,zero,48d0 <OSFlagAccept+0x1fc>
    47d8:	10800060 	cmpeqi	r2,r2,1
    47dc:	10005a1e 	bne	r2,zero,4948 <OSFlagAccept+0x274>
    47e0:	00007606 	br	49bc <OSFlagAccept+0x2e8>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
    47e4:	e0bff617 	ldw	r2,-40(fp)
    47e8:	1080020b 	ldhu	r2,8(r2)
    47ec:	e0fff50b 	ldhu	r3,-44(fp)
    47f0:	1884703a 	and	r2,r3,r2
    47f4:	e0bfff8d 	sth	r2,-2(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    47f8:	e0ffff8b 	ldhu	r3,-2(fp)
    47fc:	e0bff50b 	ldhu	r2,-44(fp)
    4800:	18800d1e 	bne	r3,r2,4838 <OSFlagAccept+0x164>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    4804:	e0bfff43 	ldbu	r2,-3(fp)
    4808:	10800058 	cmpnei	r2,r2,1
    480c:	10000d1e 	bne	r2,zero,4844 <OSFlagAccept+0x170>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
    4810:	e0bff617 	ldw	r2,-40(fp)
    4814:	1080020b 	ldhu	r2,8(r2)
    4818:	1007883a 	mov	r3,r2
    481c:	e0bfff8b 	ldhu	r2,-2(fp)
    4820:	0084303a 	nor	r2,zero,r2
    4824:	1884703a 	and	r2,r3,r2
    4828:	1007883a 	mov	r3,r2
    482c:	e0bff617 	ldw	r2,-40(fp)
    4830:	10c0020d 	sth	r3,8(r2)
    4834:	00000306 	br	4844 <OSFlagAccept+0x170>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    4838:	e0bff317 	ldw	r2,-52(fp)
    483c:	00c01c04 	movi	r3,112
    4840:	10c00005 	stb	r3,0(r2)
    4844:	e0bffe17 	ldw	r2,-8(fp)
    4848:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    484c:	e0bffb17 	ldw	r2,-20(fp)
    4850:	1001703a 	wrctl	status,r2
}
    4854:	0001883a 	nop
             }
             OS_EXIT_CRITICAL();
             break;
    4858:	00006206 	br	49e4 <OSFlagAccept+0x310>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
    485c:	e0bff617 	ldw	r2,-40(fp)
    4860:	1080020b 	ldhu	r2,8(r2)
    4864:	e0fff50b 	ldhu	r3,-44(fp)
    4868:	1884703a 	and	r2,r3,r2
    486c:	e0bfff8d 	sth	r2,-2(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
    4870:	e0bfff8b 	ldhu	r2,-2(fp)
    4874:	10000d26 	beq	r2,zero,48ac <OSFlagAccept+0x1d8>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    4878:	e0bfff43 	ldbu	r2,-3(fp)
    487c:	10800058 	cmpnei	r2,r2,1
    4880:	10000d1e 	bne	r2,zero,48b8 <OSFlagAccept+0x1e4>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
    4884:	e0bff617 	ldw	r2,-40(fp)
    4888:	1080020b 	ldhu	r2,8(r2)
    488c:	1007883a 	mov	r3,r2
    4890:	e0bfff8b 	ldhu	r2,-2(fp)
    4894:	0084303a 	nor	r2,zero,r2
    4898:	1884703a 	and	r2,r3,r2
    489c:	1007883a 	mov	r3,r2
    48a0:	e0bff617 	ldw	r2,-40(fp)
    48a4:	10c0020d 	sth	r3,8(r2)
    48a8:	00000306 	br	48b8 <OSFlagAccept+0x1e4>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    48ac:	e0bff317 	ldw	r2,-52(fp)
    48b0:	00c01c04 	movi	r3,112
    48b4:	10c00005 	stb	r3,0(r2)
    48b8:	e0bffe17 	ldw	r2,-8(fp)
    48bc:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
    48c0:	e0bffa17 	ldw	r2,-24(fp)
    48c4:	1001703a 	wrctl	status,r2
}
    48c8:	0001883a 	nop
             }
             OS_EXIT_CRITICAL();
             break;
    48cc:	00004506 	br	49e4 <OSFlagAccept+0x310>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
    48d0:	e0bff617 	ldw	r2,-40(fp)
    48d4:	1080020b 	ldhu	r2,8(r2)
    48d8:	0084303a 	nor	r2,zero,r2
    48dc:	1007883a 	mov	r3,r2
    48e0:	e0bff50b 	ldhu	r2,-44(fp)
    48e4:	1884703a 	and	r2,r3,r2
    48e8:	e0bfff8d 	sth	r2,-2(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    48ec:	e0ffff8b 	ldhu	r3,-2(fp)
    48f0:	e0bff50b 	ldhu	r2,-44(fp)
    48f4:	18800b1e 	bne	r3,r2,4924 <OSFlagAccept+0x250>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    48f8:	e0bfff43 	ldbu	r2,-3(fp)
    48fc:	10800058 	cmpnei	r2,r2,1
    4900:	10000b1e 	bne	r2,zero,4930 <OSFlagAccept+0x25c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
    4904:	e0bff617 	ldw	r2,-40(fp)
    4908:	1080020b 	ldhu	r2,8(r2)
    490c:	e0ffff8b 	ldhu	r3,-2(fp)
    4910:	1884b03a 	or	r2,r3,r2
    4914:	1007883a 	mov	r3,r2
    4918:	e0bff617 	ldw	r2,-40(fp)
    491c:	10c0020d 	sth	r3,8(r2)
    4920:	00000306 	br	4930 <OSFlagAccept+0x25c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    4924:	e0bff317 	ldw	r2,-52(fp)
    4928:	00c01c04 	movi	r3,112
    492c:	10c00005 	stb	r3,0(r2)
    4930:	e0bffe17 	ldw	r2,-8(fp)
    4934:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
    4938:	e0bff917 	ldw	r2,-28(fp)
    493c:	1001703a 	wrctl	status,r2
}
    4940:	0001883a 	nop
             }
             OS_EXIT_CRITICAL();
             break;
    4944:	00002706 	br	49e4 <OSFlagAccept+0x310>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
    4948:	e0bff617 	ldw	r2,-40(fp)
    494c:	1080020b 	ldhu	r2,8(r2)
    4950:	0084303a 	nor	r2,zero,r2
    4954:	1007883a 	mov	r3,r2
    4958:	e0bff50b 	ldhu	r2,-44(fp)
    495c:	1884703a 	and	r2,r3,r2
    4960:	e0bfff8d 	sth	r2,-2(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
    4964:	e0bfff8b 	ldhu	r2,-2(fp)
    4968:	10000b26 	beq	r2,zero,4998 <OSFlagAccept+0x2c4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    496c:	e0bfff43 	ldbu	r2,-3(fp)
    4970:	10800058 	cmpnei	r2,r2,1
    4974:	10000b1e 	bne	r2,zero,49a4 <OSFlagAccept+0x2d0>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
    4978:	e0bff617 	ldw	r2,-40(fp)
    497c:	1080020b 	ldhu	r2,8(r2)
    4980:	e0ffff8b 	ldhu	r3,-2(fp)
    4984:	1884b03a 	or	r2,r3,r2
    4988:	1007883a 	mov	r3,r2
    498c:	e0bff617 	ldw	r2,-40(fp)
    4990:	10c0020d 	sth	r3,8(r2)
    4994:	00000306 	br	49a4 <OSFlagAccept+0x2d0>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    4998:	e0bff317 	ldw	r2,-52(fp)
    499c:	00c01c04 	movi	r3,112
    49a0:	10c00005 	stb	r3,0(r2)
    49a4:	e0bffe17 	ldw	r2,-8(fp)
    49a8:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
    49ac:	e0bff817 	ldw	r2,-32(fp)
    49b0:	1001703a 	wrctl	status,r2
}
    49b4:	0001883a 	nop
             }
             OS_EXIT_CRITICAL();
             break;
    49b8:	00000a06 	br	49e4 <OSFlagAccept+0x310>
    49bc:	e0bffe17 	ldw	r2,-8(fp)
    49c0:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context);
    49c4:	e0bff717 	ldw	r2,-36(fp)
    49c8:	1001703a 	wrctl	status,r2
}
    49cc:	0001883a 	nop
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
    49d0:	e03fff8d 	sth	zero,-2(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
    49d4:	e0bff317 	ldw	r2,-52(fp)
    49d8:	00c01bc4 	movi	r3,111
    49dc:	10c00005 	stb	r3,0(r2)
             break;
    49e0:	0001883a 	nop
    }
    return (flags_rdy);
    49e4:	e0bfff8b 	ldhu	r2,-2(fp)
}
    49e8:	e037883a 	mov	sp,fp
    49ec:	df000017 	ldw	fp,0(sp)
    49f0:	dec00104 	addi	sp,sp,4
    49f4:	f800283a 	ret

000049f8 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
    49f8:	defff804 	addi	sp,sp,-32
    49fc:	df000715 	stw	fp,28(sp)
    4a00:	df000704 	addi	fp,sp,28
    4a04:	2005883a 	mov	r2,r4
    4a08:	e17ff915 	stw	r5,-28(fp)
    4a0c:	e0bffa0d 	sth	r2,-24(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
    4a10:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
    4a14:	e0bff917 	ldw	r2,-28(fp)
    4a18:	1000021e 	bne	r2,zero,4a24 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
    4a1c:	0005883a 	mov	r2,zero
    4a20:	00003506 	br	4af8 <OSFlagCreate+0x100>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
    4a24:	d0a6e343 	ldbu	r2,-25715(gp)
    4a28:	10803fcc 	andi	r2,r2,255
    4a2c:	10000526 	beq	r2,zero,4a44 <OSFlagCreate+0x4c>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
    4a30:	e0bff917 	ldw	r2,-28(fp)
    4a34:	00c00404 	movi	r3,16
    4a38:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
    4a3c:	0005883a 	mov	r2,zero
    4a40:	00002d06 	br	4af8 <OSFlagCreate+0x100>
  NIOS2_READ_STATUS (context);
    4a44:	0005303a 	rdctl	r2,status
    4a48:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4a4c:	e0fffd17 	ldw	r3,-12(fp)
    4a50:	00bfff84 	movi	r2,-2
    4a54:	1884703a 	and	r2,r3,r2
    4a58:	1001703a 	wrctl	status,r2
  return context;
    4a5c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    4a60:	e0bfff15 	stw	r2,-4(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
    4a64:	d0a6df17 	ldw	r2,-25732(gp)
    4a68:	e0bffe15 	stw	r2,-8(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
    4a6c:	e0bffe17 	ldw	r2,-8(fp)
    4a70:	10001826 	beq	r2,zero,4ad4 <OSFlagCreate+0xdc>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
    4a74:	d0a6df17 	ldw	r2,-25732(gp)
    4a78:	10800117 	ldw	r2,4(r2)
    4a7c:	d0a6df15 	stw	r2,-25732(gp)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
    4a80:	e0bffe17 	ldw	r2,-8(fp)
    4a84:	00c00144 	movi	r3,5
    4a88:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
    4a8c:	e0bffe17 	ldw	r2,-8(fp)
    4a90:	e0fffa0b 	ldhu	r3,-24(fp)
    4a94:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
    4a98:	e0bffe17 	ldw	r2,-8(fp)
    4a9c:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
    4aa0:	e0bffe17 	ldw	r2,-8(fp)
    4aa4:	00c00fc4 	movi	r3,63
    4aa8:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
    4aac:	e0bffe17 	ldw	r2,-8(fp)
    4ab0:	100002c5 	stb	zero,11(r2)
    4ab4:	e0bfff17 	ldw	r2,-4(fp)
    4ab8:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    4abc:	e0bffc17 	ldw	r2,-16(fp)
    4ac0:	1001703a 	wrctl	status,r2
}
    4ac4:	0001883a 	nop
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
    4ac8:	e0bff917 	ldw	r2,-28(fp)
    4acc:	10000005 	stb	zero,0(r2)
    4ad0:	00000806 	br	4af4 <OSFlagCreate+0xfc>
    4ad4:	e0bfff17 	ldw	r2,-4(fp)
    4ad8:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    4adc:	e0bffb17 	ldw	r2,-20(fp)
    4ae0:	1001703a 	wrctl	status,r2
}
    4ae4:	0001883a 	nop
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
    4ae8:	e0bff917 	ldw	r2,-28(fp)
    4aec:	00c01c84 	movi	r3,114
    4af0:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
    4af4:	e0bffe17 	ldw	r2,-8(fp)
}
    4af8:	e037883a 	mov	sp,fp
    4afc:	df000017 	ldw	fp,0(sp)
    4b00:	dec00104 	addi	sp,sp,4
    4b04:	f800283a 	ret

00004b08 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
    4b08:	defff204 	addi	sp,sp,-56
    4b0c:	dfc00d15 	stw	ra,52(sp)
    4b10:	df000c15 	stw	fp,48(sp)
    4b14:	df000c04 	addi	fp,sp,48
    4b18:	e13ff615 	stw	r4,-40(fp)
    4b1c:	2805883a 	mov	r2,r5
    4b20:	e1bff415 	stw	r6,-48(fp)
    4b24:	e0bff505 	stb	r2,-44(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    4b28:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    4b2c:	e0bff417 	ldw	r2,-48(fp)
    4b30:	1000021e 	bne	r2,zero,4b3c <OSFlagDel+0x34>
        return (pgrp);
    4b34:	e0bff617 	ldw	r2,-40(fp)
    4b38:	00008406 	br	4d4c <OSFlagDel+0x244>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
    4b3c:	e0bff617 	ldw	r2,-40(fp)
    4b40:	1000051e 	bne	r2,zero,4b58 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    4b44:	e0bff417 	ldw	r2,-48(fp)
    4b48:	00c01b84 	movi	r3,110
    4b4c:	10c00005 	stb	r3,0(r2)
        return (pgrp);
    4b50:	e0bff617 	ldw	r2,-40(fp)
    4b54:	00007d06 	br	4d4c <OSFlagDel+0x244>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    4b58:	d0a6e343 	ldbu	r2,-25715(gp)
    4b5c:	10803fcc 	andi	r2,r2,255
    4b60:	10000526 	beq	r2,zero,4b78 <OSFlagDel+0x70>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
    4b64:	e0bff417 	ldw	r2,-48(fp)
    4b68:	00c003c4 	movi	r3,15
    4b6c:	10c00005 	stb	r3,0(r2)
        return (pgrp);
    4b70:	e0bff617 	ldw	r2,-40(fp)
    4b74:	00007506 	br	4d4c <OSFlagDel+0x244>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
    4b78:	e0bff617 	ldw	r2,-40(fp)
    4b7c:	10800003 	ldbu	r2,0(r2)
    4b80:	10803fcc 	andi	r2,r2,255
    4b84:	10800160 	cmpeqi	r2,r2,5
    4b88:	1000051e 	bne	r2,zero,4ba0 <OSFlagDel+0x98>
        *perr = OS_ERR_EVENT_TYPE;
    4b8c:	e0bff417 	ldw	r2,-48(fp)
    4b90:	00c00044 	movi	r3,1
    4b94:	10c00005 	stb	r3,0(r2)
        return (pgrp);
    4b98:	e0bff617 	ldw	r2,-40(fp)
    4b9c:	00006b06 	br	4d4c <OSFlagDel+0x244>
  NIOS2_READ_STATUS (context);
    4ba0:	0005303a 	rdctl	r2,status
    4ba4:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4ba8:	e0fffb17 	ldw	r3,-20(fp)
    4bac:	00bfff84 	movi	r2,-2
    4bb0:	1884703a 	and	r2,r3,r2
    4bb4:	1001703a 	wrctl	status,r2
  return context;
    4bb8:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
    4bbc:	e0bffc15 	stw	r2,-16(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
    4bc0:	e0bff617 	ldw	r2,-40(fp)
    4bc4:	10800117 	ldw	r2,4(r2)
    4bc8:	10000326 	beq	r2,zero,4bd8 <OSFlagDel+0xd0>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    4bcc:	00800044 	movi	r2,1
    4bd0:	e0bfffc5 	stb	r2,-1(fp)
    4bd4:	00000106 	br	4bdc <OSFlagDel+0xd4>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    4bd8:	e03fffc5 	stb	zero,-1(fp)
    }
    switch (opt) {
    4bdc:	e0bff503 	ldbu	r2,-44(fp)
    4be0:	10000326 	beq	r2,zero,4bf0 <OSFlagDel+0xe8>
    4be4:	10800060 	cmpeqi	r2,r2,1
    4be8:	1000251e 	bne	r2,zero,4c80 <OSFlagDel+0x178>
    4bec:	00004b06 	br	4d1c <OSFlagDel+0x214>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
    4bf0:	e0bfffc3 	ldbu	r2,-1(fp)
    4bf4:	1000171e 	bne	r2,zero,4c54 <OSFlagDel+0x14c>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
    4bf8:	e0bff617 	ldw	r2,-40(fp)
    4bfc:	00c00fc4 	movi	r3,63
    4c00:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
    4c04:	e0bff617 	ldw	r2,-40(fp)
    4c08:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    4c0c:	e0bff617 	ldw	r2,-40(fp)
    4c10:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
    4c14:	d0e6df17 	ldw	r3,-25732(gp)
    4c18:	e0bff617 	ldw	r2,-40(fp)
    4c1c:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
    4c20:	e0bff617 	ldw	r2,-40(fp)
    4c24:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
    4c28:	e0bff617 	ldw	r2,-40(fp)
    4c2c:	d0a6df15 	stw	r2,-25732(gp)
    4c30:	e0bffc17 	ldw	r2,-16(fp)
    4c34:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
    4c38:	e0bffa17 	ldw	r2,-24(fp)
    4c3c:	1001703a 	wrctl	status,r2
}
    4c40:	0001883a 	nop
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
    4c44:	e0bff417 	ldw	r2,-48(fp)
    4c48:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
    4c4c:	e03ffd15 	stw	zero,-12(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
    4c50:	00003d06 	br	4d48 <OSFlagDel+0x240>
    4c54:	e0bffc17 	ldw	r2,-16(fp)
    4c58:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
    4c5c:	e0bff917 	ldw	r2,-28(fp)
    4c60:	1001703a 	wrctl	status,r2
}
    4c64:	0001883a 	nop
                 *perr                = OS_ERR_TASK_WAITING;
    4c68:	e0bff417 	ldw	r2,-48(fp)
    4c6c:	00c01244 	movi	r3,73
    4c70:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
    4c74:	e0bff617 	ldw	r2,-40(fp)
    4c78:	e0bffd15 	stw	r2,-12(fp)
             break;
    4c7c:	00003206 	br	4d48 <OSFlagDel+0x240>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    4c80:	e0bff617 	ldw	r2,-40(fp)
    4c84:	10800117 	ldw	r2,4(r2)
    4c88:	e0bffe15 	stw	r2,-8(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
    4c8c:	00000606 	br	4ca8 <OSFlagDel+0x1a0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
    4c90:	000b883a 	mov	r5,zero
    4c94:	e13ffe17 	ldw	r4,-8(fp)
    4c98:	0005d000 	call	5d00 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
    4c9c:	e0bffe17 	ldw	r2,-8(fp)
    4ca0:	10800017 	ldw	r2,0(r2)
    4ca4:	e0bffe15 	stw	r2,-8(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
    4ca8:	e0bffe17 	ldw	r2,-8(fp)
    4cac:	103ff81e 	bne	r2,zero,4c90 <OSFlagDel+0x188>
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
    4cb0:	e0bff617 	ldw	r2,-40(fp)
    4cb4:	00c00fc4 	movi	r3,63
    4cb8:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
    4cbc:	e0bff617 	ldw	r2,-40(fp)
    4cc0:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    4cc4:	e0bff617 	ldw	r2,-40(fp)
    4cc8:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
    4ccc:	d0e6df17 	ldw	r3,-25732(gp)
    4cd0:	e0bff617 	ldw	r2,-40(fp)
    4cd4:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
    4cd8:	e0bff617 	ldw	r2,-40(fp)
    4cdc:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
    4ce0:	e0bff617 	ldw	r2,-40(fp)
    4ce4:	d0a6df15 	stw	r2,-25732(gp)
    4ce8:	e0bffc17 	ldw	r2,-16(fp)
    4cec:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
    4cf0:	e0bff817 	ldw	r2,-32(fp)
    4cf4:	1001703a 	wrctl	status,r2
}
    4cf8:	0001883a 	nop
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
    4cfc:	e0bfffc3 	ldbu	r2,-1(fp)
    4d00:	10800058 	cmpnei	r2,r2,1
    4d04:	1000011e 	bne	r2,zero,4d0c <OSFlagDel+0x204>
                 OS_Sched();                               /* Find highest priority task ready to run  */
    4d08:	0003e7c0 	call	3e7c <OS_Sched>
             }
             *perr = OS_ERR_NONE;
    4d0c:	e0bff417 	ldw	r2,-48(fp)
    4d10:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
    4d14:	e03ffd15 	stw	zero,-12(fp)
             break;
    4d18:	00000b06 	br	4d48 <OSFlagDel+0x240>
    4d1c:	e0bffc17 	ldw	r2,-16(fp)
    4d20:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context);
    4d24:	e0bff717 	ldw	r2,-36(fp)
    4d28:	1001703a 	wrctl	status,r2
}
    4d2c:	0001883a 	nop

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
    4d30:	e0bff417 	ldw	r2,-48(fp)
    4d34:	00c001c4 	movi	r3,7
    4d38:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
    4d3c:	e0bff617 	ldw	r2,-40(fp)
    4d40:	e0bffd15 	stw	r2,-12(fp)
             break;
    4d44:	0001883a 	nop
    }
    return (pgrp_return);
    4d48:	e0bffd17 	ldw	r2,-12(fp)
}
    4d4c:	e037883a 	mov	sp,fp
    4d50:	dfc00117 	ldw	ra,4(sp)
    4d54:	df000017 	ldw	fp,0(sp)
    4d58:	dec00204 	addi	sp,sp,8
    4d5c:	f800283a 	ret

00004d60 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
    4d60:	defff604 	addi	sp,sp,-40
    4d64:	dfc00915 	stw	ra,36(sp)
    4d68:	df000815 	stw	fp,32(sp)
    4d6c:	df000804 	addi	fp,sp,32
    4d70:	e13ffa15 	stw	r4,-24(fp)
    4d74:	e17ff915 	stw	r5,-28(fp)
    4d78:	e1bff815 	stw	r6,-32(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    4d7c:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    4d80:	e0bff817 	ldw	r2,-32(fp)
    4d84:	1000021e 	bne	r2,zero,4d90 <OSFlagNameGet+0x30>
        return (0);
    4d88:	0005883a 	mov	r2,zero
    4d8c:	00003b06 	br	4e7c <OSFlagNameGet+0x11c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
    4d90:	e0bffa17 	ldw	r2,-24(fp)
    4d94:	1000051e 	bne	r2,zero,4dac <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    4d98:	e0bff817 	ldw	r2,-32(fp)
    4d9c:	00c01b84 	movi	r3,110
    4da0:	10c00005 	stb	r3,0(r2)
        return (0);
    4da4:	0005883a 	mov	r2,zero
    4da8:	00003406 	br	4e7c <OSFlagNameGet+0x11c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    4dac:	e0bff917 	ldw	r2,-28(fp)
    4db0:	1000051e 	bne	r2,zero,4dc8 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
    4db4:	e0bff817 	ldw	r2,-32(fp)
    4db8:	00c00304 	movi	r3,12
    4dbc:	10c00005 	stb	r3,0(r2)
        return (0);
    4dc0:	0005883a 	mov	r2,zero
    4dc4:	00002d06 	br	4e7c <OSFlagNameGet+0x11c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    4dc8:	d0a6e343 	ldbu	r2,-25715(gp)
    4dcc:	10803fcc 	andi	r2,r2,255
    4dd0:	10000526 	beq	r2,zero,4de8 <OSFlagNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
    4dd4:	e0bff817 	ldw	r2,-32(fp)
    4dd8:	00c00444 	movi	r3,17
    4ddc:	10c00005 	stb	r3,0(r2)
        return (0);
    4de0:	0005883a 	mov	r2,zero
    4de4:	00002506 	br	4e7c <OSFlagNameGet+0x11c>
  NIOS2_READ_STATUS (context);
    4de8:	0005303a 	rdctl	r2,status
    4dec:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4df0:	e0fffd17 	ldw	r3,-12(fp)
    4df4:	00bfff84 	movi	r2,-2
    4df8:	1884703a 	and	r2,r3,r2
    4dfc:	1001703a 	wrctl	status,r2
  return context;
    4e00:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    4e04:	e0bfff15 	stw	r2,-4(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
    4e08:	e0bffa17 	ldw	r2,-24(fp)
    4e0c:	10800003 	ldbu	r2,0(r2)
    4e10:	10803fcc 	andi	r2,r2,255
    4e14:	10800160 	cmpeqi	r2,r2,5
    4e18:	10000a1e 	bne	r2,zero,4e44 <OSFlagNameGet+0xe4>
    4e1c:	e0bfff17 	ldw	r2,-4(fp)
    4e20:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    4e24:	e0bffc17 	ldw	r2,-16(fp)
    4e28:	1001703a 	wrctl	status,r2
}
    4e2c:	0001883a 	nop
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
    4e30:	e0bff817 	ldw	r2,-32(fp)
    4e34:	00c00044 	movi	r3,1
    4e38:	10c00005 	stb	r3,0(r2)
        return (0);
    4e3c:	0005883a 	mov	r2,zero
    4e40:	00000e06 	br	4e7c <OSFlagNameGet+0x11c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
    4e44:	e0bffa17 	ldw	r2,-24(fp)
    4e48:	10800284 	addi	r2,r2,10
    4e4c:	100b883a 	mov	r5,r2
    4e50:	e13ff917 	ldw	r4,-28(fp)
    4e54:	0003fb40 	call	3fb4 <OS_StrCopy>
    4e58:	e0bffec5 	stb	r2,-5(fp)
    4e5c:	e0bfff17 	ldw	r2,-4(fp)
    4e60:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    4e64:	e0bffb17 	ldw	r2,-20(fp)
    4e68:	1001703a 	wrctl	status,r2
}
    4e6c:	0001883a 	nop
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    4e70:	e0bff817 	ldw	r2,-32(fp)
    4e74:	10000005 	stb	zero,0(r2)
    return (len);
    4e78:	e0bffec3 	ldbu	r2,-5(fp)
}
    4e7c:	e037883a 	mov	sp,fp
    4e80:	dfc00117 	ldw	ra,4(sp)
    4e84:	df000017 	ldw	fp,0(sp)
    4e88:	dec00204 	addi	sp,sp,8
    4e8c:	f800283a 	ret

00004e90 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
    4e90:	defff504 	addi	sp,sp,-44
    4e94:	dfc00a15 	stw	ra,40(sp)
    4e98:	df000915 	stw	fp,36(sp)
    4e9c:	df000904 	addi	fp,sp,36
    4ea0:	e13ff915 	stw	r4,-28(fp)
    4ea4:	e17ff815 	stw	r5,-32(fp)
    4ea8:	e1bff715 	stw	r6,-36(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    4eac:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    4eb0:	e0bff717 	ldw	r2,-36(fp)
    4eb4:	10004526 	beq	r2,zero,4fcc <OSFlagNameSet+0x13c>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
    4eb8:	e0bff917 	ldw	r2,-28(fp)
    4ebc:	1000041e 	bne	r2,zero,4ed0 <OSFlagNameSet+0x40>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    4ec0:	e0bff717 	ldw	r2,-36(fp)
    4ec4:	00c01b84 	movi	r3,110
    4ec8:	10c00005 	stb	r3,0(r2)
        return;
    4ecc:	00004006 	br	4fd0 <OSFlagNameSet+0x140>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    4ed0:	e0bff817 	ldw	r2,-32(fp)
    4ed4:	1000041e 	bne	r2,zero,4ee8 <OSFlagNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
    4ed8:	e0bff717 	ldw	r2,-36(fp)
    4edc:	00c00304 	movi	r3,12
    4ee0:	10c00005 	stb	r3,0(r2)
        return;
    4ee4:	00003a06 	br	4fd0 <OSFlagNameSet+0x140>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    4ee8:	d0a6e343 	ldbu	r2,-25715(gp)
    4eec:	10803fcc 	andi	r2,r2,255
    4ef0:	10000426 	beq	r2,zero,4f04 <OSFlagNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
    4ef4:	e0bff717 	ldw	r2,-36(fp)
    4ef8:	00c00484 	movi	r3,18
    4efc:	10c00005 	stb	r3,0(r2)
        return;
    4f00:	00003306 	br	4fd0 <OSFlagNameSet+0x140>
  NIOS2_READ_STATUS (context);
    4f04:	0005303a 	rdctl	r2,status
    4f08:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4f0c:	e0fffd17 	ldw	r3,-12(fp)
    4f10:	00bfff84 	movi	r2,-2
    4f14:	1884703a 	and	r2,r3,r2
    4f18:	1001703a 	wrctl	status,r2
  return context;
    4f1c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    4f20:	e0bfff15 	stw	r2,-4(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
    4f24:	e0bff917 	ldw	r2,-28(fp)
    4f28:	10800003 	ldbu	r2,0(r2)
    4f2c:	10803fcc 	andi	r2,r2,255
    4f30:	10800160 	cmpeqi	r2,r2,5
    4f34:	1000091e 	bne	r2,zero,4f5c <OSFlagNameSet+0xcc>
    4f38:	e0bfff17 	ldw	r2,-4(fp)
    4f3c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    4f40:	e0bffc17 	ldw	r2,-16(fp)
    4f44:	1001703a 	wrctl	status,r2
}
    4f48:	0001883a 	nop
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
    4f4c:	e0bff717 	ldw	r2,-36(fp)
    4f50:	00c00044 	movi	r3,1
    4f54:	10c00005 	stb	r3,0(r2)
        return;
    4f58:	00001d06 	br	4fd0 <OSFlagNameSet+0x140>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
    4f5c:	e13ff817 	ldw	r4,-32(fp)
    4f60:	00040280 	call	4028 <OS_StrLen>
    4f64:	e0bffec5 	stb	r2,-5(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
    4f68:	e0bffec3 	ldbu	r2,-5(fp)
    4f6c:	10800830 	cmpltui	r2,r2,32
    4f70:	1000091e 	bne	r2,zero,4f98 <OSFlagNameSet+0x108>
    4f74:	e0bfff17 	ldw	r2,-4(fp)
    4f78:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    4f7c:	e0bffb17 	ldw	r2,-20(fp)
    4f80:	1001703a 	wrctl	status,r2
}
    4f84:	0001883a 	nop
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
    4f88:	e0bff717 	ldw	r2,-36(fp)
    4f8c:	00c01cc4 	movi	r3,115
    4f90:	10c00005 	stb	r3,0(r2)
        return;
    4f94:	00000e06 	br	4fd0 <OSFlagNameSet+0x140>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    4f98:	e0bff917 	ldw	r2,-28(fp)
    4f9c:	10800284 	addi	r2,r2,10
    4fa0:	e17ff817 	ldw	r5,-32(fp)
    4fa4:	1009883a 	mov	r4,r2
    4fa8:	0003fb40 	call	3fb4 <OS_StrCopy>
    4fac:	e0bfff17 	ldw	r2,-4(fp)
    4fb0:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
    4fb4:	e0bffa17 	ldw	r2,-24(fp)
    4fb8:	1001703a 	wrctl	status,r2
}
    4fbc:	0001883a 	nop
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    4fc0:	e0bff717 	ldw	r2,-36(fp)
    4fc4:	10000005 	stb	zero,0(r2)
    return;
    4fc8:	00000106 	br	4fd0 <OSFlagNameSet+0x140>
        return;
    4fcc:	0001883a 	nop
}
    4fd0:	e037883a 	mov	sp,fp
    4fd4:	dfc00117 	ldw	ra,4(sp)
    4fd8:	df000017 	ldw	fp,0(sp)
    4fdc:	dec00204 	addi	sp,sp,8
    4fe0:	f800283a 	ret

00004fe4 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
    4fe4:	deffe204 	addi	sp,sp,-120
    4fe8:	dfc01d15 	stw	ra,116(sp)
    4fec:	df001c15 	stw	fp,112(sp)
    4ff0:	df001c04 	addi	fp,sp,112
    4ff4:	e13fe815 	stw	r4,-96(fp)
    4ff8:	2805883a 	mov	r2,r5
    4ffc:	3009883a 	mov	r4,r6
    5000:	3807883a 	mov	r3,r7
    5004:	e0bfe70d 	sth	r2,-100(fp)
    5008:	2005883a 	mov	r2,r4
    500c:	e0bfe605 	stb	r2,-104(fp)
    5010:	1805883a 	mov	r2,r3
    5014:	e0bfe50d 	sth	r2,-108(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    5018:	e03ffe15 	stw	zero,-8(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    501c:	e0800217 	ldw	r2,8(fp)
    5020:	1000021e 	bne	r2,zero,502c <OSFlagPend+0x48>
        return ((OS_FLAGS)0);
    5024:	0005883a 	mov	r2,zero
    5028:	00016906 	br	55d0 <OSFlagPend+0x5ec>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
    502c:	e0bfe817 	ldw	r2,-96(fp)
    5030:	1000051e 	bne	r2,zero,5048 <OSFlagPend+0x64>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    5034:	e0800217 	ldw	r2,8(fp)
    5038:	00c01b84 	movi	r3,110
    503c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    5040:	0005883a 	mov	r2,zero
    5044:	00016206 	br	55d0 <OSFlagPend+0x5ec>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    5048:	d0a6e343 	ldbu	r2,-25715(gp)
    504c:	10803fcc 	andi	r2,r2,255
    5050:	10000526 	beq	r2,zero,5068 <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
    5054:	e0800217 	ldw	r2,8(fp)
    5058:	00c00084 	movi	r3,2
    505c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    5060:	0005883a 	mov	r2,zero
    5064:	00015a06 	br	55d0 <OSFlagPend+0x5ec>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
    5068:	d0a6e383 	ldbu	r2,-25714(gp)
    506c:	10803fcc 	andi	r2,r2,255
    5070:	10000526 	beq	r2,zero,5088 <OSFlagPend+0xa4>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
    5074:	e0800217 	ldw	r2,8(fp)
    5078:	00c00344 	movi	r3,13
    507c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    5080:	0005883a 	mov	r2,zero
    5084:	00015206 	br	55d0 <OSFlagPend+0x5ec>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
    5088:	e0bfe817 	ldw	r2,-96(fp)
    508c:	10800003 	ldbu	r2,0(r2)
    5090:	10803fcc 	andi	r2,r2,255
    5094:	10800160 	cmpeqi	r2,r2,5
    5098:	1000051e 	bne	r2,zero,50b0 <OSFlagPend+0xcc>
        *perr = OS_ERR_EVENT_TYPE;
    509c:	e0800217 	ldw	r2,8(fp)
    50a0:	00c00044 	movi	r3,1
    50a4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    50a8:	0005883a 	mov	r2,zero
    50ac:	00014806 	br	55d0 <OSFlagPend+0x5ec>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
    50b0:	e0ffe603 	ldbu	r3,-104(fp)
    50b4:	00bfe004 	movi	r2,-128
    50b8:	1884703a 	and	r2,r3,r2
    50bc:	e0bffdc5 	stb	r2,-9(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
    50c0:	e0bffdc3 	ldbu	r2,-9(fp)
    50c4:	10000626 	beq	r2,zero,50e0 <OSFlagPend+0xfc>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
    50c8:	e0bfe603 	ldbu	r2,-104(fp)
    50cc:	10801fcc 	andi	r2,r2,127
    50d0:	e0bfe605 	stb	r2,-104(fp)
        consume    = OS_TRUE;
    50d4:	00800044 	movi	r2,1
    50d8:	e0bfffc5 	stb	r2,-1(fp)
    50dc:	00000106 	br	50e4 <OSFlagPend+0x100>
    } else {
        consume    = OS_FALSE;
    50e0:	e03fffc5 	stb	zero,-1(fp)
  NIOS2_READ_STATUS (context);
    50e4:	0005303a 	rdctl	r2,status
    50e8:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    50ec:	e0fffb17 	ldw	r3,-20(fp)
    50f0:	00bfff84 	movi	r2,-2
    50f4:	1884703a 	and	r2,r3,r2
    50f8:	1001703a 	wrctl	status,r2
  return context;
    50fc:	e0bffb17 	ldw	r2,-20(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
    5100:	e0bffe15 	stw	r2,-8(fp)
    switch (wait_type) {
    5104:	e0bfe603 	ldbu	r2,-104(fp)
    5108:	10c000e0 	cmpeqi	r3,r2,3
    510c:	18003a1e 	bne	r3,zero,51f8 <OSFlagPend+0x214>
    5110:	10c00108 	cmpgei	r3,r2,4
    5114:	1800c61e 	bne	r3,zero,5430 <OSFlagPend+0x44c>
    5118:	10c000a0 	cmpeqi	r3,r2,2
    511c:	1800061e 	bne	r3,zero,5138 <OSFlagPend+0x154>
    5120:	10c000c8 	cmpgei	r3,r2,3
    5124:	1800c21e 	bne	r3,zero,5430 <OSFlagPend+0x44c>
    5128:	10006226 	beq	r2,zero,52b4 <OSFlagPend+0x2d0>
    512c:	10800060 	cmpeqi	r2,r2,1
    5130:	1000901e 	bne	r2,zero,5374 <OSFlagPend+0x390>
    5134:	0000be06 	br	5430 <OSFlagPend+0x44c>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
    5138:	e0bfe817 	ldw	r2,-96(fp)
    513c:	1080020b 	ldhu	r2,8(r2)
    5140:	e0ffe70b 	ldhu	r3,-100(fp)
    5144:	1884703a 	and	r2,r3,r2
    5148:	e0bffd0d 	sth	r2,-12(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    514c:	e0fffd0b 	ldhu	r3,-12(fp)
    5150:	e0bfe70b 	ldhu	r2,-100(fp)
    5154:	1880181e 	bne	r3,r2,51b8 <OSFlagPend+0x1d4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    5158:	e0bfffc3 	ldbu	r2,-1(fp)
    515c:	10800058 	cmpnei	r2,r2,1
    5160:	1000091e 	bne	r2,zero,5188 <OSFlagPend+0x1a4>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
    5164:	e0bfe817 	ldw	r2,-96(fp)
    5168:	1080020b 	ldhu	r2,8(r2)
    516c:	1007883a 	mov	r3,r2
    5170:	e0bffd0b 	ldhu	r2,-12(fp)
    5174:	0084303a 	nor	r2,zero,r2
    5178:	1884703a 	and	r2,r3,r2
    517c:	1007883a 	mov	r3,r2
    5180:	e0bfe817 	ldw	r2,-96(fp)
    5184:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    5188:	d0a6e717 	ldw	r2,-25700(gp)
    518c:	e0fffd0b 	ldhu	r3,-12(fp)
    5190:	10c00b0d 	sth	r3,44(r2)
    5194:	e0bffe17 	ldw	r2,-8(fp)
    5198:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
    519c:	e0bffa17 	ldw	r2,-24(fp)
    51a0:	1001703a 	wrctl	status,r2
}
    51a4:	0001883a 	nop
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    51a8:	e0800217 	ldw	r2,8(fp)
    51ac:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
    51b0:	e0bffd0b 	ldhu	r2,-12(fp)
    51b4:	00010606 	br	55d0 <OSFlagPend+0x5ec>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    51b8:	e13fe70b 	ldhu	r4,-100(fp)
    51bc:	e17fe603 	ldbu	r5,-104(fp)
    51c0:	e0bfe50b 	ldhu	r2,-108(fp)
    51c4:	e0ffe904 	addi	r3,fp,-92
    51c8:	d8800015 	stw	r2,0(sp)
    51cc:	280f883a 	mov	r7,r5
    51d0:	200d883a 	mov	r6,r4
    51d4:	180b883a 	mov	r5,r3
    51d8:	e13fe817 	ldw	r4,-96(fp)
    51dc:	0005abc0 	call	5abc <OS_FlagBlock>
    51e0:	e0bffe17 	ldw	r2,-8(fp)
    51e4:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
    51e8:	e0bff917 	ldw	r2,-28(fp)
    51ec:	1001703a 	wrctl	status,r2
}
    51f0:	0001883a 	nop
                 OS_EXIT_CRITICAL();
             }
             break;
    51f4:	00009906 	br	545c <OSFlagPend+0x478>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
    51f8:	e0bfe817 	ldw	r2,-96(fp)
    51fc:	1080020b 	ldhu	r2,8(r2)
    5200:	e0ffe70b 	ldhu	r3,-100(fp)
    5204:	1884703a 	and	r2,r3,r2
    5208:	e0bffd0d 	sth	r2,-12(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
    520c:	e0bffd0b 	ldhu	r2,-12(fp)
    5210:	10001826 	beq	r2,zero,5274 <OSFlagPend+0x290>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    5214:	e0bfffc3 	ldbu	r2,-1(fp)
    5218:	10800058 	cmpnei	r2,r2,1
    521c:	1000091e 	bne	r2,zero,5244 <OSFlagPend+0x260>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
    5220:	e0bfe817 	ldw	r2,-96(fp)
    5224:	1080020b 	ldhu	r2,8(r2)
    5228:	1007883a 	mov	r3,r2
    522c:	e0bffd0b 	ldhu	r2,-12(fp)
    5230:	0084303a 	nor	r2,zero,r2
    5234:	1884703a 	and	r2,r3,r2
    5238:	1007883a 	mov	r3,r2
    523c:	e0bfe817 	ldw	r2,-96(fp)
    5240:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    5244:	d0a6e717 	ldw	r2,-25700(gp)
    5248:	e0fffd0b 	ldhu	r3,-12(fp)
    524c:	10c00b0d 	sth	r3,44(r2)
    5250:	e0bffe17 	ldw	r2,-8(fp)
    5254:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
    5258:	e0bff817 	ldw	r2,-32(fp)
    525c:	1001703a 	wrctl	status,r2
}
    5260:	0001883a 	nop
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    5264:	e0800217 	ldw	r2,8(fp)
    5268:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
    526c:	e0bffd0b 	ldhu	r2,-12(fp)
    5270:	0000d706 	br	55d0 <OSFlagPend+0x5ec>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    5274:	e13fe70b 	ldhu	r4,-100(fp)
    5278:	e17fe603 	ldbu	r5,-104(fp)
    527c:	e0bfe50b 	ldhu	r2,-108(fp)
    5280:	e0ffe904 	addi	r3,fp,-92
    5284:	d8800015 	stw	r2,0(sp)
    5288:	280f883a 	mov	r7,r5
    528c:	200d883a 	mov	r6,r4
    5290:	180b883a 	mov	r5,r3
    5294:	e13fe817 	ldw	r4,-96(fp)
    5298:	0005abc0 	call	5abc <OS_FlagBlock>
    529c:	e0bffe17 	ldw	r2,-8(fp)
    52a0:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context);
    52a4:	e0bff717 	ldw	r2,-36(fp)
    52a8:	1001703a 	wrctl	status,r2
}
    52ac:	0001883a 	nop
                 OS_EXIT_CRITICAL();
             }
             break;
    52b0:	00006a06 	br	545c <OSFlagPend+0x478>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
    52b4:	e0bfe817 	ldw	r2,-96(fp)
    52b8:	1080020b 	ldhu	r2,8(r2)
    52bc:	0084303a 	nor	r2,zero,r2
    52c0:	1007883a 	mov	r3,r2
    52c4:	e0bfe70b 	ldhu	r2,-100(fp)
    52c8:	1884703a 	and	r2,r3,r2
    52cc:	e0bffd0d 	sth	r2,-12(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    52d0:	e0fffd0b 	ldhu	r3,-12(fp)
    52d4:	e0bfe70b 	ldhu	r2,-100(fp)
    52d8:	1880161e 	bne	r3,r2,5334 <OSFlagPend+0x350>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    52dc:	e0bfffc3 	ldbu	r2,-1(fp)
    52e0:	10800058 	cmpnei	r2,r2,1
    52e4:	1000071e 	bne	r2,zero,5304 <OSFlagPend+0x320>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
    52e8:	e0bfe817 	ldw	r2,-96(fp)
    52ec:	1080020b 	ldhu	r2,8(r2)
    52f0:	e0fffd0b 	ldhu	r3,-12(fp)
    52f4:	1884b03a 	or	r2,r3,r2
    52f8:	1007883a 	mov	r3,r2
    52fc:	e0bfe817 	ldw	r2,-96(fp)
    5300:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    5304:	d0a6e717 	ldw	r2,-25700(gp)
    5308:	e0fffd0b 	ldhu	r3,-12(fp)
    530c:	10c00b0d 	sth	r3,44(r2)
    5310:	e0bffe17 	ldw	r2,-8(fp)
    5314:	e0bff615 	stw	r2,-40(fp)
  NIOS2_WRITE_STATUS (context);
    5318:	e0bff617 	ldw	r2,-40(fp)
    531c:	1001703a 	wrctl	status,r2
}
    5320:	0001883a 	nop
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    5324:	e0800217 	ldw	r2,8(fp)
    5328:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
    532c:	e0bffd0b 	ldhu	r2,-12(fp)
    5330:	0000a706 	br	55d0 <OSFlagPend+0x5ec>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    5334:	e13fe70b 	ldhu	r4,-100(fp)
    5338:	e17fe603 	ldbu	r5,-104(fp)
    533c:	e0bfe50b 	ldhu	r2,-108(fp)
    5340:	e0ffe904 	addi	r3,fp,-92
    5344:	d8800015 	stw	r2,0(sp)
    5348:	280f883a 	mov	r7,r5
    534c:	200d883a 	mov	r6,r4
    5350:	180b883a 	mov	r5,r3
    5354:	e13fe817 	ldw	r4,-96(fp)
    5358:	0005abc0 	call	5abc <OS_FlagBlock>
    535c:	e0bffe17 	ldw	r2,-8(fp)
    5360:	e0bff515 	stw	r2,-44(fp)
  NIOS2_WRITE_STATUS (context);
    5364:	e0bff517 	ldw	r2,-44(fp)
    5368:	1001703a 	wrctl	status,r2
}
    536c:	0001883a 	nop
                 OS_EXIT_CRITICAL();
             }
             break;
    5370:	00003a06 	br	545c <OSFlagPend+0x478>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
    5374:	e0bfe817 	ldw	r2,-96(fp)
    5378:	1080020b 	ldhu	r2,8(r2)
    537c:	0084303a 	nor	r2,zero,r2
    5380:	1007883a 	mov	r3,r2
    5384:	e0bfe70b 	ldhu	r2,-100(fp)
    5388:	1884703a 	and	r2,r3,r2
    538c:	e0bffd0d 	sth	r2,-12(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
    5390:	e0bffd0b 	ldhu	r2,-12(fp)
    5394:	10001626 	beq	r2,zero,53f0 <OSFlagPend+0x40c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    5398:	e0bfffc3 	ldbu	r2,-1(fp)
    539c:	10800058 	cmpnei	r2,r2,1
    53a0:	1000071e 	bne	r2,zero,53c0 <OSFlagPend+0x3dc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
    53a4:	e0bfe817 	ldw	r2,-96(fp)
    53a8:	1080020b 	ldhu	r2,8(r2)
    53ac:	e0fffd0b 	ldhu	r3,-12(fp)
    53b0:	1884b03a 	or	r2,r3,r2
    53b4:	1007883a 	mov	r3,r2
    53b8:	e0bfe817 	ldw	r2,-96(fp)
    53bc:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    53c0:	d0a6e717 	ldw	r2,-25700(gp)
    53c4:	e0fffd0b 	ldhu	r3,-12(fp)
    53c8:	10c00b0d 	sth	r3,44(r2)
    53cc:	e0bffe17 	ldw	r2,-8(fp)
    53d0:	e0bff415 	stw	r2,-48(fp)
  NIOS2_WRITE_STATUS (context);
    53d4:	e0bff417 	ldw	r2,-48(fp)
    53d8:	1001703a 	wrctl	status,r2
}
    53dc:	0001883a 	nop
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    53e0:	e0800217 	ldw	r2,8(fp)
    53e4:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
    53e8:	e0bffd0b 	ldhu	r2,-12(fp)
    53ec:	00007806 	br	55d0 <OSFlagPend+0x5ec>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    53f0:	e13fe70b 	ldhu	r4,-100(fp)
    53f4:	e17fe603 	ldbu	r5,-104(fp)
    53f8:	e0bfe50b 	ldhu	r2,-108(fp)
    53fc:	e0ffe904 	addi	r3,fp,-92
    5400:	d8800015 	stw	r2,0(sp)
    5404:	280f883a 	mov	r7,r5
    5408:	200d883a 	mov	r6,r4
    540c:	180b883a 	mov	r5,r3
    5410:	e13fe817 	ldw	r4,-96(fp)
    5414:	0005abc0 	call	5abc <OS_FlagBlock>
    5418:	e0bffe17 	ldw	r2,-8(fp)
    541c:	e0bff315 	stw	r2,-52(fp)
  NIOS2_WRITE_STATUS (context);
    5420:	e0bff317 	ldw	r2,-52(fp)
    5424:	1001703a 	wrctl	status,r2
}
    5428:	0001883a 	nop
                 OS_EXIT_CRITICAL();
             }
             break;
    542c:	00000b06 	br	545c <OSFlagPend+0x478>
    5430:	e0bffe17 	ldw	r2,-8(fp)
    5434:	e0bff215 	stw	r2,-56(fp)
  NIOS2_WRITE_STATUS (context);
    5438:	e0bff217 	ldw	r2,-56(fp)
    543c:	1001703a 	wrctl	status,r2
}
    5440:	0001883a 	nop
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
    5444:	e03ffd0d 	sth	zero,-12(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
    5448:	e0800217 	ldw	r2,8(fp)
    544c:	00c01bc4 	movi	r3,111
    5450:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
    5454:	e0bffd0b 	ldhu	r2,-12(fp)
    5458:	00005d06 	br	55d0 <OSFlagPend+0x5ec>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
    545c:	0003e7c0 	call	3e7c <OS_Sched>
  NIOS2_READ_STATUS (context);
    5460:	0005303a 	rdctl	r2,status
    5464:	e0bff115 	stw	r2,-60(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5468:	e0fff117 	ldw	r3,-60(fp)
    546c:	00bfff84 	movi	r2,-2
    5470:	1884703a 	and	r2,r3,r2
    5474:	1001703a 	wrctl	status,r2
  return context;
    5478:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
    547c:	e0bffe15 	stw	r2,-8(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
    5480:	d0a6e717 	ldw	r2,-25700(gp)
    5484:	10800c43 	ldbu	r2,49(r2)
    5488:	10803fcc 	andi	r2,r2,255
    548c:	10001d26 	beq	r2,zero,5504 <OSFlagPend+0x520>
        pend_stat                = OSTCBCur->OSTCBStatPend;
    5490:	d0a6e717 	ldw	r2,-25700(gp)
    5494:	10800c43 	ldbu	r2,49(r2)
    5498:	e0bffcc5 	stb	r2,-13(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    549c:	d0a6e717 	ldw	r2,-25700(gp)
    54a0:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
    54a4:	e0bfe904 	addi	r2,fp,-92
    54a8:	1009883a 	mov	r4,r2
    54ac:	0005df40 	call	5df4 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
    54b0:	d0a6e717 	ldw	r2,-25700(gp)
    54b4:	10000c05 	stb	zero,48(r2)
    54b8:	e0bffe17 	ldw	r2,-8(fp)
    54bc:	e0bff015 	stw	r2,-64(fp)
  NIOS2_WRITE_STATUS (context);
    54c0:	e0bff017 	ldw	r2,-64(fp)
    54c4:	1001703a 	wrctl	status,r2
}
    54c8:	0001883a 	nop
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
    54cc:	e03ffd0d 	sth	zero,-12(fp)
        switch (pend_stat) {
    54d0:	e0bffcc3 	ldbu	r2,-13(fp)
    54d4:	10800098 	cmpnei	r2,r2,2
    54d8:	1000041e 	bne	r2,zero,54ec <OSFlagPend+0x508>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
    54dc:	e0800217 	ldw	r2,8(fp)
    54e0:	00c00384 	movi	r3,14
    54e4:	10c00005 	stb	r3,0(r2)
                 break;
    54e8:	00000406 	br	54fc <OSFlagPend+0x518>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
    54ec:	e0800217 	ldw	r2,8(fp)
    54f0:	00c00284 	movi	r3,10
    54f4:	10c00005 	stb	r3,0(r2)
                 break;
    54f8:	0001883a 	nop
        }
        return (flags_rdy);
    54fc:	e0bffd0b 	ldhu	r2,-12(fp)
    5500:	00003306 	br	55d0 <OSFlagPend+0x5ec>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
    5504:	d0a6e717 	ldw	r2,-25700(gp)
    5508:	10800b0b 	ldhu	r2,44(r2)
    550c:	e0bffd0d 	sth	r2,-12(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
    5510:	e0bfffc3 	ldbu	r2,-1(fp)
    5514:	10800058 	cmpnei	r2,r2,1
    5518:	1000241e 	bne	r2,zero,55ac <OSFlagPend+0x5c8>
        switch (wait_type) {
    551c:	e0bfe603 	ldbu	r2,-104(fp)
    5520:	10c00088 	cmpgei	r3,r2,2
    5524:	1800021e 	bne	r3,zero,5530 <OSFlagPend+0x54c>
    5528:	10000e0e 	bge	r2,zero,5564 <OSFlagPend+0x580>
    552c:	00001506 	br	5584 <OSFlagPend+0x5a0>
    5530:	10bfff84 	addi	r2,r2,-2
    5534:	108000a8 	cmpgeui	r2,r2,2
    5538:	1000121e 	bne	r2,zero,5584 <OSFlagPend+0x5a0>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
    553c:	e0bfe817 	ldw	r2,-96(fp)
    5540:	1080020b 	ldhu	r2,8(r2)
    5544:	1007883a 	mov	r3,r2
    5548:	e0bffd0b 	ldhu	r2,-12(fp)
    554c:	0084303a 	nor	r2,zero,r2
    5550:	1884703a 	and	r2,r3,r2
    5554:	1007883a 	mov	r3,r2
    5558:	e0bfe817 	ldw	r2,-96(fp)
    555c:	10c0020d 	sth	r3,8(r2)
                 break;
    5560:	00001306 	br	55b0 <OSFlagPend+0x5cc>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
    5564:	e0bfe817 	ldw	r2,-96(fp)
    5568:	1080020b 	ldhu	r2,8(r2)
    556c:	e0fffd0b 	ldhu	r3,-12(fp)
    5570:	1884b03a 	or	r2,r3,r2
    5574:	1007883a 	mov	r3,r2
    5578:	e0bfe817 	ldw	r2,-96(fp)
    557c:	10c0020d 	sth	r3,8(r2)
                 break;
    5580:	00000b06 	br	55b0 <OSFlagPend+0x5cc>
    5584:	e0bffe17 	ldw	r2,-8(fp)
    5588:	e0bfef15 	stw	r2,-68(fp)
  NIOS2_WRITE_STATUS (context);
    558c:	e0bfef17 	ldw	r2,-68(fp)
    5590:	1001703a 	wrctl	status,r2
}
    5594:	0001883a 	nop
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
    5598:	e0800217 	ldw	r2,8(fp)
    559c:	00c01bc4 	movi	r3,111
    55a0:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
    55a4:	0005883a 	mov	r2,zero
    55a8:	00000906 	br	55d0 <OSFlagPend+0x5ec>
        }
    }
    55ac:	0001883a 	nop
    55b0:	e0bffe17 	ldw	r2,-8(fp)
    55b4:	e0bfee15 	stw	r2,-72(fp)
  NIOS2_WRITE_STATUS (context);
    55b8:	e0bfee17 	ldw	r2,-72(fp)
    55bc:	1001703a 	wrctl	status,r2
}
    55c0:	0001883a 	nop
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
    55c4:	e0800217 	ldw	r2,8(fp)
    55c8:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
    55cc:	e0bffd0b 	ldhu	r2,-12(fp)
}
    55d0:	e037883a 	mov	sp,fp
    55d4:	dfc00117 	ldw	ra,4(sp)
    55d8:	df000017 	ldw	fp,0(sp)
    55dc:	dec00204 	addi	sp,sp,8
    55e0:	f800283a 	ret

000055e4 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
    55e4:	defffb04 	addi	sp,sp,-20
    55e8:	df000415 	stw	fp,16(sp)
    55ec:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    55f0:	e03fff15 	stw	zero,-4(fp)
  NIOS2_READ_STATUS (context);
    55f4:	0005303a 	rdctl	r2,status
    55f8:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    55fc:	e0fffc17 	ldw	r3,-16(fp)
    5600:	00bfff84 	movi	r2,-2
    5604:	1884703a 	and	r2,r3,r2
    5608:	1001703a 	wrctl	status,r2
  return context;
    560c:	e0bffc17 	ldw	r2,-16(fp)
#endif



    OS_ENTER_CRITICAL();
    5610:	e0bfff15 	stw	r2,-4(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
    5614:	d0a6e717 	ldw	r2,-25700(gp)
    5618:	10800b0b 	ldhu	r2,44(r2)
    561c:	e0bffe8d 	sth	r2,-6(fp)
    5620:	e0bfff17 	ldw	r2,-4(fp)
    5624:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
    5628:	e0bffd17 	ldw	r2,-12(fp)
    562c:	1001703a 	wrctl	status,r2
}
    5630:	0001883a 	nop
    OS_EXIT_CRITICAL();
    return (flags);
    5634:	e0bffe8b 	ldhu	r2,-6(fp)
}
    5638:	e037883a 	mov	sp,fp
    563c:	df000017 	ldw	fp,0(sp)
    5640:	dec00104 	addi	sp,sp,4
    5644:	f800283a 	ret

00005648 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
    5648:	deffef04 	addi	sp,sp,-68
    564c:	dfc01015 	stw	ra,64(sp)
    5650:	df000f15 	stw	fp,60(sp)
    5654:	df000f04 	addi	fp,sp,60
    5658:	e13ff415 	stw	r4,-48(fp)
    565c:	2805883a 	mov	r2,r5
    5660:	3007883a 	mov	r3,r6
    5664:	e1fff115 	stw	r7,-60(fp)
    5668:	e0bff30d 	sth	r2,-52(fp)
    566c:	1805883a 	mov	r2,r3
    5670:	e0bff205 	stb	r2,-56(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
    5674:	e03ffd15 	stw	zero,-12(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
    5678:	e0bff117 	ldw	r2,-60(fp)
    567c:	1000021e 	bne	r2,zero,5688 <OSFlagPost+0x40>
        return ((OS_FLAGS)0);
    5680:	0005883a 	mov	r2,zero
    5684:	0000d606 	br	59e0 <OSFlagPost+0x398>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
    5688:	e0bff417 	ldw	r2,-48(fp)
    568c:	1000051e 	bne	r2,zero,56a4 <OSFlagPost+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    5690:	e0bff117 	ldw	r2,-60(fp)
    5694:	00c01b84 	movi	r3,110
    5698:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    569c:	0005883a 	mov	r2,zero
    56a0:	0000cf06 	br	59e0 <OSFlagPost+0x398>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
    56a4:	e0bff417 	ldw	r2,-48(fp)
    56a8:	10800003 	ldbu	r2,0(r2)
    56ac:	10803fcc 	andi	r2,r2,255
    56b0:	10800160 	cmpeqi	r2,r2,5
    56b4:	1000051e 	bne	r2,zero,56cc <OSFlagPost+0x84>
        *perr = OS_ERR_EVENT_TYPE;
    56b8:	e0bff117 	ldw	r2,-60(fp)
    56bc:	00c00044 	movi	r3,1
    56c0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    56c4:	0005883a 	mov	r2,zero
    56c8:	0000c506 	br	59e0 <OSFlagPost+0x398>
  NIOS2_READ_STATUS (context);
    56cc:	0005303a 	rdctl	r2,status
    56d0:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    56d4:	e0fffa17 	ldw	r3,-24(fp)
    56d8:	00bfff84 	movi	r2,-2
    56dc:	1884703a 	and	r2,r3,r2
    56e0:	1001703a 	wrctl	status,r2
  return context;
    56e4:	e0bffa17 	ldw	r2,-24(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
    56e8:	e0bffd15 	stw	r2,-12(fp)
    switch (opt) {
    56ec:	e0bff203 	ldbu	r2,-56(fp)
    56f0:	10000326 	beq	r2,zero,5700 <OSFlagPost+0xb8>
    56f4:	10800060 	cmpeqi	r2,r2,1
    56f8:	10000b1e 	bne	r2,zero,5728 <OSFlagPost+0xe0>
    56fc:	00001206 	br	5748 <OSFlagPost+0x100>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
    5700:	e0bff417 	ldw	r2,-48(fp)
    5704:	1080020b 	ldhu	r2,8(r2)
    5708:	1007883a 	mov	r3,r2
    570c:	e0bff30b 	ldhu	r2,-52(fp)
    5710:	0084303a 	nor	r2,zero,r2
    5714:	1884703a 	and	r2,r3,r2
    5718:	1007883a 	mov	r3,r2
    571c:	e0bff417 	ldw	r2,-48(fp)
    5720:	10c0020d 	sth	r3,8(r2)
             break;
    5724:	00001206 	br	5770 <OSFlagPost+0x128>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
    5728:	e0bff417 	ldw	r2,-48(fp)
    572c:	1080020b 	ldhu	r2,8(r2)
    5730:	e0fff30b 	ldhu	r3,-52(fp)
    5734:	1884b03a 	or	r2,r3,r2
    5738:	1007883a 	mov	r3,r2
    573c:	e0bff417 	ldw	r2,-48(fp)
    5740:	10c0020d 	sth	r3,8(r2)
             break;
    5744:	00000a06 	br	5770 <OSFlagPost+0x128>
    5748:	e0bffd17 	ldw	r2,-12(fp)
    574c:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
    5750:	e0bff917 	ldw	r2,-28(fp)
    5754:	1001703a 	wrctl	status,r2
}
    5758:	0001883a 	nop

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
    575c:	e0bff117 	ldw	r2,-60(fp)
    5760:	00c01c44 	movi	r3,113
    5764:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
    5768:	0005883a 	mov	r2,zero
    576c:	00009c06 	br	59e0 <OSFlagPost+0x398>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    5770:	e03ffec5 	stb	zero,-5(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    5774:	e0bff417 	ldw	r2,-48(fp)
    5778:	10800117 	ldw	r2,4(r2)
    577c:	e0bfff15 	stw	r2,-4(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
    5780:	00007906 	br	5968 <OSFlagPost+0x320>
        switch (pnode->OSFlagNodeWaitType) {
    5784:	e0bfff17 	ldw	r2,-4(fp)
    5788:	10800483 	ldbu	r2,18(r2)
    578c:	10803fcc 	andi	r2,r2,255
    5790:	10c000e0 	cmpeqi	r3,r2,3
    5794:	1800201e 	bne	r3,zero,5818 <OSFlagPost+0x1d0>
    5798:	10c00108 	cmpgei	r3,r2,4
    579c:	18005e1e 	bne	r3,zero,5918 <OSFlagPost+0x2d0>
    57a0:	10c000a0 	cmpeqi	r3,r2,2
    57a4:	1800061e 	bne	r3,zero,57c0 <OSFlagPost+0x178>
    57a8:	10c000c8 	cmpgei	r3,r2,3
    57ac:	18005a1e 	bne	r3,zero,5918 <OSFlagPost+0x2d0>
    57b0:	10002c26 	beq	r2,zero,5864 <OSFlagPost+0x21c>
    57b4:	10800060 	cmpeqi	r2,r2,1
    57b8:	1000421e 	bne	r2,zero,58c4 <OSFlagPost+0x27c>
    57bc:	00005606 	br	5918 <OSFlagPost+0x2d0>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    57c0:	e0bff417 	ldw	r2,-48(fp)
    57c4:	10c0020b 	ldhu	r3,8(r2)
    57c8:	e0bfff17 	ldw	r2,-4(fp)
    57cc:	1080040b 	ldhu	r2,16(r2)
    57d0:	1884703a 	and	r2,r3,r2
    57d4:	e0bffc0d 	sth	r2,-16(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
    57d8:	e0bfff17 	ldw	r2,-4(fp)
    57dc:	1080040b 	ldhu	r2,16(r2)
    57e0:	e0fffc0b 	ldhu	r3,-16(fp)
    57e4:	10bfffcc 	andi	r2,r2,65535
    57e8:	1880551e 	bne	r3,r2,5940 <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
    57ec:	e0bffc0b 	ldhu	r2,-16(fp)
    57f0:	100b883a 	mov	r5,r2
    57f4:	e13fff17 	ldw	r4,-4(fp)
    57f8:	0005d000 	call	5d00 <OS_FlagTaskRdy>
    57fc:	e0bffbc5 	stb	r2,-17(fp)
                     if (rdy == OS_TRUE) {
    5800:	e0bffbc3 	ldbu	r2,-17(fp)
    5804:	10800058 	cmpnei	r2,r2,1
    5808:	10004d1e 	bne	r2,zero,5940 <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    580c:	00800044 	movi	r2,1
    5810:	e0bffec5 	stb	r2,-5(fp)
                     }
                 }
                 break;
    5814:	00004a06 	br	5940 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    5818:	e0bff417 	ldw	r2,-48(fp)
    581c:	10c0020b 	ldhu	r3,8(r2)
    5820:	e0bfff17 	ldw	r2,-4(fp)
    5824:	1080040b 	ldhu	r2,16(r2)
    5828:	1884703a 	and	r2,r3,r2
    582c:	e0bffc0d 	sth	r2,-16(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
    5830:	e0bffc0b 	ldhu	r2,-16(fp)
    5834:	10004426 	beq	r2,zero,5948 <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
    5838:	e0bffc0b 	ldhu	r2,-16(fp)
    583c:	100b883a 	mov	r5,r2
    5840:	e13fff17 	ldw	r4,-4(fp)
    5844:	0005d000 	call	5d00 <OS_FlagTaskRdy>
    5848:	e0bffbc5 	stb	r2,-17(fp)
                     if (rdy == OS_TRUE) {
    584c:	e0bffbc3 	ldbu	r2,-17(fp)
    5850:	10800058 	cmpnei	r2,r2,1
    5854:	10003c1e 	bne	r2,zero,5948 <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    5858:	00800044 	movi	r2,1
    585c:	e0bffec5 	stb	r2,-5(fp)
                     }
                 }
                 break;
    5860:	00003906 	br	5948 <OSFlagPost+0x300>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    5864:	e0bff417 	ldw	r2,-48(fp)
    5868:	1080020b 	ldhu	r2,8(r2)
    586c:	0084303a 	nor	r2,zero,r2
    5870:	1007883a 	mov	r3,r2
    5874:	e0bfff17 	ldw	r2,-4(fp)
    5878:	1080040b 	ldhu	r2,16(r2)
    587c:	1884703a 	and	r2,r3,r2
    5880:	e0bffc0d 	sth	r2,-16(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
    5884:	e0bfff17 	ldw	r2,-4(fp)
    5888:	1080040b 	ldhu	r2,16(r2)
    588c:	e0fffc0b 	ldhu	r3,-16(fp)
    5890:	10bfffcc 	andi	r2,r2,65535
    5894:	18802e1e 	bne	r3,r2,5950 <OSFlagPost+0x308>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
    5898:	e0bffc0b 	ldhu	r2,-16(fp)
    589c:	100b883a 	mov	r5,r2
    58a0:	e13fff17 	ldw	r4,-4(fp)
    58a4:	0005d000 	call	5d00 <OS_FlagTaskRdy>
    58a8:	e0bffbc5 	stb	r2,-17(fp)
                     if (rdy == OS_TRUE) {
    58ac:	e0bffbc3 	ldbu	r2,-17(fp)
    58b0:	10800058 	cmpnei	r2,r2,1
    58b4:	1000261e 	bne	r2,zero,5950 <OSFlagPost+0x308>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    58b8:	00800044 	movi	r2,1
    58bc:	e0bffec5 	stb	r2,-5(fp)
                     }
                 }
                 break;
    58c0:	00002306 	br	5950 <OSFlagPost+0x308>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    58c4:	e0bff417 	ldw	r2,-48(fp)
    58c8:	1080020b 	ldhu	r2,8(r2)
    58cc:	0084303a 	nor	r2,zero,r2
    58d0:	1007883a 	mov	r3,r2
    58d4:	e0bfff17 	ldw	r2,-4(fp)
    58d8:	1080040b 	ldhu	r2,16(r2)
    58dc:	1884703a 	and	r2,r3,r2
    58e0:	e0bffc0d 	sth	r2,-16(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
    58e4:	e0bffc0b 	ldhu	r2,-16(fp)
    58e8:	10001b26 	beq	r2,zero,5958 <OSFlagPost+0x310>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
    58ec:	e0bffc0b 	ldhu	r2,-16(fp)
    58f0:	100b883a 	mov	r5,r2
    58f4:	e13fff17 	ldw	r4,-4(fp)
    58f8:	0005d000 	call	5d00 <OS_FlagTaskRdy>
    58fc:	e0bffbc5 	stb	r2,-17(fp)
                     if (rdy == OS_TRUE) {
    5900:	e0bffbc3 	ldbu	r2,-17(fp)
    5904:	10800058 	cmpnei	r2,r2,1
    5908:	1000131e 	bne	r2,zero,5958 <OSFlagPost+0x310>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    590c:	00800044 	movi	r2,1
    5910:	e0bffec5 	stb	r2,-5(fp)
                     }
                 }
                 break;
    5914:	00001006 	br	5958 <OSFlagPost+0x310>
    5918:	e0bffd17 	ldw	r2,-12(fp)
    591c:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
    5920:	e0bff817 	ldw	r2,-32(fp)
    5924:	1001703a 	wrctl	status,r2
}
    5928:	0001883a 	nop
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
    592c:	e0bff117 	ldw	r2,-60(fp)
    5930:	00c01bc4 	movi	r3,111
    5934:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
    5938:	0005883a 	mov	r2,zero
    593c:	00002806 	br	59e0 <OSFlagPost+0x398>
                 break;
    5940:	0001883a 	nop
    5944:	00000506 	br	595c <OSFlagPost+0x314>
                 break;
    5948:	0001883a 	nop
    594c:	00000306 	br	595c <OSFlagPost+0x314>
                 break;
    5950:	0001883a 	nop
    5954:	00000106 	br	595c <OSFlagPost+0x314>
                 break;
    5958:	0001883a 	nop
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    595c:	e0bfff17 	ldw	r2,-4(fp)
    5960:	10800017 	ldw	r2,0(r2)
    5964:	e0bfff15 	stw	r2,-4(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
    5968:	e0bfff17 	ldw	r2,-4(fp)
    596c:	103f851e 	bne	r2,zero,5784 <OSFlagPost+0x13c>
    5970:	e0bffd17 	ldw	r2,-12(fp)
    5974:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context);
    5978:	e0bff717 	ldw	r2,-36(fp)
    597c:	1001703a 	wrctl	status,r2
}
    5980:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
    5984:	e0bffec3 	ldbu	r2,-5(fp)
    5988:	10800058 	cmpnei	r2,r2,1
    598c:	1000011e 	bne	r2,zero,5994 <OSFlagPost+0x34c>
        OS_Sched();
    5990:	0003e7c0 	call	3e7c <OS_Sched>
  NIOS2_READ_STATUS (context);
    5994:	0005303a 	rdctl	r2,status
    5998:	e0bff515 	stw	r2,-44(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    599c:	e0fff517 	ldw	r3,-44(fp)
    59a0:	00bfff84 	movi	r2,-2
    59a4:	1884703a 	and	r2,r3,r2
    59a8:	1001703a 	wrctl	status,r2
  return context;
    59ac:	e0bff517 	ldw	r2,-44(fp)
    }
    OS_ENTER_CRITICAL();
    59b0:	e0bffd15 	stw	r2,-12(fp)
    flags_cur = pgrp->OSFlagFlags;
    59b4:	e0bff417 	ldw	r2,-48(fp)
    59b8:	1080020b 	ldhu	r2,8(r2)
    59bc:	e0bffc8d 	sth	r2,-14(fp)
    59c0:	e0bffd17 	ldw	r2,-12(fp)
    59c4:	e0bff615 	stw	r2,-40(fp)
  NIOS2_WRITE_STATUS (context);
    59c8:	e0bff617 	ldw	r2,-40(fp)
    59cc:	1001703a 	wrctl	status,r2
}
    59d0:	0001883a 	nop
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
    59d4:	e0bff117 	ldw	r2,-60(fp)
    59d8:	10000005 	stb	zero,0(r2)
    return (flags_cur);
    59dc:	e0bffc8b 	ldhu	r2,-14(fp)
}
    59e0:	e037883a 	mov	sp,fp
    59e4:	dfc00117 	ldw	ra,4(sp)
    59e8:	df000017 	ldw	fp,0(sp)
    59ec:	dec00204 	addi	sp,sp,8
    59f0:	f800283a 	ret

000059f4 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
    59f4:	defff904 	addi	sp,sp,-28
    59f8:	df000615 	stw	fp,24(sp)
    59fc:	df000604 	addi	fp,sp,24
    5a00:	e13ffb15 	stw	r4,-20(fp)
    5a04:	e17ffa15 	stw	r5,-24(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
    5a08:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
    5a0c:	e0bffa17 	ldw	r2,-24(fp)
    5a10:	1000021e 	bne	r2,zero,5a1c <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
    5a14:	0005883a 	mov	r2,zero
    5a18:	00002406 	br	5aac <OSFlagQuery+0xb8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
    5a1c:	e0bffb17 	ldw	r2,-20(fp)
    5a20:	1000051e 	bne	r2,zero,5a38 <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    5a24:	e0bffa17 	ldw	r2,-24(fp)
    5a28:	00c01b84 	movi	r3,110
    5a2c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    5a30:	0005883a 	mov	r2,zero
    5a34:	00001d06 	br	5aac <OSFlagQuery+0xb8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
    5a38:	e0bffb17 	ldw	r2,-20(fp)
    5a3c:	10800003 	ldbu	r2,0(r2)
    5a40:	10803fcc 	andi	r2,r2,255
    5a44:	10800160 	cmpeqi	r2,r2,5
    5a48:	1000051e 	bne	r2,zero,5a60 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
    5a4c:	e0bffa17 	ldw	r2,-24(fp)
    5a50:	00c00044 	movi	r3,1
    5a54:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    5a58:	0005883a 	mov	r2,zero
    5a5c:	00001306 	br	5aac <OSFlagQuery+0xb8>
  NIOS2_READ_STATUS (context);
    5a60:	0005303a 	rdctl	r2,status
    5a64:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5a68:	e0fffc17 	ldw	r3,-16(fp)
    5a6c:	00bfff84 	movi	r2,-2
    5a70:	1884703a 	and	r2,r3,r2
    5a74:	1001703a 	wrctl	status,r2
  return context;
    5a78:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    5a7c:	e0bfff15 	stw	r2,-4(fp)
    flags = pgrp->OSFlagFlags;
    5a80:	e0bffb17 	ldw	r2,-20(fp)
    5a84:	1080020b 	ldhu	r2,8(r2)
    5a88:	e0bffe8d 	sth	r2,-6(fp)
    5a8c:	e0bfff17 	ldw	r2,-4(fp)
    5a90:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
    5a94:	e0bffd17 	ldw	r2,-12(fp)
    5a98:	1001703a 	wrctl	status,r2
}
    5a9c:	0001883a 	nop
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    5aa0:	e0bffa17 	ldw	r2,-24(fp)
    5aa4:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
    5aa8:	e0bffe8b 	ldhu	r2,-6(fp)
}
    5aac:	e037883a 	mov	sp,fp
    5ab0:	df000017 	ldw	fp,0(sp)
    5ab4:	dec00104 	addi	sp,sp,4
    5ab8:	f800283a 	ret

00005abc <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
    5abc:	defff804 	addi	sp,sp,-32
    5ac0:	df000715 	stw	fp,28(sp)
    5ac4:	df000704 	addi	fp,sp,28
    5ac8:	e13ffd15 	stw	r4,-12(fp)
    5acc:	e17ffc15 	stw	r5,-16(fp)
    5ad0:	3007883a 	mov	r3,r6
    5ad4:	3809883a 	mov	r4,r7
    5ad8:	e0800117 	ldw	r2,4(fp)
    5adc:	e0fffb0d 	sth	r3,-20(fp)
    5ae0:	2007883a 	mov	r3,r4
    5ae4:	e0fffa05 	stb	r3,-24(fp)
    5ae8:	e0bff90d 	sth	r2,-28(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
    5aec:	d0a6e717 	ldw	r2,-25700(gp)
    5af0:	10c00c03 	ldbu	r3,48(r2)
    5af4:	d0a6e717 	ldw	r2,-25700(gp)
    5af8:	18c00814 	ori	r3,r3,32
    5afc:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
    5b00:	d0a6e717 	ldw	r2,-25700(gp)
    5b04:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
    5b08:	d0a6e717 	ldw	r2,-25700(gp)
    5b0c:	e0fff90b 	ldhu	r3,-28(fp)
    5b10:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
    5b14:	d0a6e717 	ldw	r2,-25700(gp)
    5b18:	e0fffc17 	ldw	r3,-16(fp)
    5b1c:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
    5b20:	e0bffc17 	ldw	r2,-16(fp)
    5b24:	e0fffb0b 	ldhu	r3,-20(fp)
    5b28:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
    5b2c:	e0bffc17 	ldw	r2,-16(fp)
    5b30:	e0fffa03 	ldbu	r3,-24(fp)
    5b34:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
    5b38:	d0e6e717 	ldw	r3,-25700(gp)
    5b3c:	e0bffc17 	ldw	r2,-16(fp)
    5b40:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
    5b44:	e0bffd17 	ldw	r2,-12(fp)
    5b48:	10c00117 	ldw	r3,4(r2)
    5b4c:	e0bffc17 	ldw	r2,-16(fp)
    5b50:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
    5b54:	e0bffc17 	ldw	r2,-16(fp)
    5b58:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
    5b5c:	e0bffc17 	ldw	r2,-16(fp)
    5b60:	e0fffd17 	ldw	r3,-12(fp)
    5b64:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    5b68:	e0bffd17 	ldw	r2,-12(fp)
    5b6c:	10800117 	ldw	r2,4(r2)
    5b70:	e0bfff15 	stw	r2,-4(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
    5b74:	e0bfff17 	ldw	r2,-4(fp)
    5b78:	10000326 	beq	r2,zero,5b88 <OS_FlagBlock+0xcc>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
    5b7c:	e0bfff17 	ldw	r2,-4(fp)
    5b80:	e0fffc17 	ldw	r3,-16(fp)
    5b84:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
    5b88:	e0bffd17 	ldw	r2,-12(fp)
    5b8c:	e0fffc17 	ldw	r3,-16(fp)
    5b90:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
    5b94:	d0a6e717 	ldw	r2,-25700(gp)
    5b98:	10800d03 	ldbu	r2,52(r2)
    5b9c:	e0bffec5 	stb	r2,-5(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
    5ba0:	e0fffec3 	ldbu	r3,-5(fp)
    5ba4:	d0a6e484 	addi	r2,gp,-25710
    5ba8:	1885883a 	add	r2,r3,r2
    5bac:	10800003 	ldbu	r2,0(r2)
    5bb0:	1007883a 	mov	r3,r2
    5bb4:	d0a6e717 	ldw	r2,-25700(gp)
    5bb8:	10800d43 	ldbu	r2,53(r2)
    5bbc:	0084303a 	nor	r2,zero,r2
    5bc0:	1884703a 	and	r2,r3,r2
    5bc4:	e0fffec3 	ldbu	r3,-5(fp)
    5bc8:	1009883a 	mov	r4,r2
    5bcc:	d0a6e484 	addi	r2,gp,-25710
    5bd0:	1885883a 	add	r2,r3,r2
    5bd4:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
    5bd8:	e0fffec3 	ldbu	r3,-5(fp)
    5bdc:	d0a6e484 	addi	r2,gp,-25710
    5be0:	1885883a 	add	r2,r3,r2
    5be4:	10800003 	ldbu	r2,0(r2)
    5be8:	10803fcc 	andi	r2,r2,255
    5bec:	1000071e 	bne	r2,zero,5c0c <OS_FlagBlock+0x150>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
    5bf0:	d0a6e717 	ldw	r2,-25700(gp)
    5bf4:	10800d83 	ldbu	r2,54(r2)
    5bf8:	0084303a 	nor	r2,zero,r2
    5bfc:	1007883a 	mov	r3,r2
    5c00:	d0a6e443 	ldbu	r2,-25711(gp)
    5c04:	1884703a 	and	r2,r3,r2
    5c08:	d0a6e445 	stb	r2,-25711(gp)
    }
}
    5c0c:	0001883a 	nop
    5c10:	e037883a 	mov	sp,fp
    5c14:	df000017 	ldw	fp,0(sp)
    5c18:	dec00104 	addi	sp,sp,4
    5c1c:	f800283a 	ret

00005c20 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
    5c20:	defffb04 	addi	sp,sp,-20
    5c24:	dfc00415 	stw	ra,16(sp)
    5c28:	df000315 	stw	fp,12(sp)
    5c2c:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    5c30:	0140dc04 	movi	r5,880
    5c34:	010000b4 	movhi	r4,2
    5c38:	2120d004 	addi	r4,r4,-31936
    5c3c:	0003db80 	call	3db8 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
    5c40:	008000b4 	movhi	r2,2
    5c44:	10a0d004 	addi	r2,r2,-31936
    5c48:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
    5c4c:	008000b4 	movhi	r2,2
    5c50:	10a0db04 	addi	r2,r2,-31892
    5c54:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
    5c58:	e03fff8d 	sth	zero,-2(fp)
    5c5c:	00001306 	br	5cac <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    5c60:	e0bffe17 	ldw	r2,-8(fp)
    5c64:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
    5c68:	e0bffe17 	ldw	r2,-8(fp)
    5c6c:	e0fffd17 	ldw	r3,-12(fp)
    5c70:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
    5c74:	e0bffe17 	ldw	r2,-8(fp)
    5c78:	00c00fc4 	movi	r3,63
    5c7c:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
    5c80:	e0bffe17 	ldw	r2,-8(fp)
    5c84:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
    5c88:	e0bffe17 	ldw	r2,-8(fp)
    5c8c:	10800b04 	addi	r2,r2,44
    5c90:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
    5c94:	e0bffd17 	ldw	r2,-12(fp)
    5c98:	10800b04 	addi	r2,r2,44
    5c9c:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
    5ca0:	e0bfff8b 	ldhu	r2,-2(fp)
    5ca4:	10800044 	addi	r2,r2,1
    5ca8:	e0bfff8d 	sth	r2,-2(fp)
    5cac:	e0bfff8b 	ldhu	r2,-2(fp)
    5cb0:	108004f0 	cmpltui	r2,r2,19
    5cb4:	103fea1e 	bne	r2,zero,5c60 <OS_FlagInit+0x40>
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    5cb8:	e0bffe17 	ldw	r2,-8(fp)
    5cbc:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
    5cc0:	e0bffe17 	ldw	r2,-8(fp)
    5cc4:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
    5cc8:	e0bffe17 	ldw	r2,-8(fp)
    5ccc:	00c00fc4 	movi	r3,63
    5cd0:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
    5cd4:	e0bffe17 	ldw	r2,-8(fp)
    5cd8:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
    5cdc:	008000b4 	movhi	r2,2
    5ce0:	10a0d004 	addi	r2,r2,-31936
    5ce4:	d0a6df15 	stw	r2,-25732(gp)
#endif
}
    5ce8:	0001883a 	nop
    5cec:	e037883a 	mov	sp,fp
    5cf0:	dfc00117 	ldw	ra,4(sp)
    5cf4:	df000017 	ldw	fp,0(sp)
    5cf8:	dec00204 	addi	sp,sp,8
    5cfc:	f800283a 	ret

00005d00 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
    5d00:	defffa04 	addi	sp,sp,-24
    5d04:	dfc00515 	stw	ra,20(sp)
    5d08:	df000415 	stw	fp,16(sp)
    5d0c:	df000404 	addi	fp,sp,16
    5d10:	e13ffd15 	stw	r4,-12(fp)
    5d14:	2805883a 	mov	r2,r5
    5d18:	e0bffc0d 	sth	r2,-16(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
    5d1c:	e0bffd17 	ldw	r2,-12(fp)
    5d20:	10800217 	ldw	r2,8(r2)
    5d24:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBDly       = 0;
    5d28:	e0bffe17 	ldw	r2,-8(fp)
    5d2c:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
    5d30:	e0bffe17 	ldw	r2,-8(fp)
    5d34:	e0fffc0b 	ldhu	r3,-16(fp)
    5d38:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
    5d3c:	e0bffe17 	ldw	r2,-8(fp)
    5d40:	10c00c03 	ldbu	r3,48(r2)
    5d44:	00bff7c4 	movi	r2,-33
    5d48:	1884703a 	and	r2,r3,r2
    5d4c:	1007883a 	mov	r3,r2
    5d50:	e0bffe17 	ldw	r2,-8(fp)
    5d54:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
    5d58:	e0bffe17 	ldw	r2,-8(fp)
    5d5c:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
    5d60:	e0bffe17 	ldw	r2,-8(fp)
    5d64:	10800c03 	ldbu	r2,48(r2)
    5d68:	10803fcc 	andi	r2,r2,255
    5d6c:	1000181e 	bne	r2,zero,5dd0 <OS_FlagTaskRdy+0xd0>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
    5d70:	e0bffe17 	ldw	r2,-8(fp)
    5d74:	10c00d83 	ldbu	r3,54(r2)
    5d78:	d0a6e443 	ldbu	r2,-25711(gp)
    5d7c:	1884b03a 	or	r2,r3,r2
    5d80:	d0a6e445 	stb	r2,-25711(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    5d84:	e0bffe17 	ldw	r2,-8(fp)
    5d88:	10800d03 	ldbu	r2,52(r2)
    5d8c:	10c03fcc 	andi	r3,r2,255
    5d90:	d0a6e484 	addi	r2,gp,-25710
    5d94:	1885883a 	add	r2,r3,r2
    5d98:	11000003 	ldbu	r4,0(r2)
    5d9c:	e0bffe17 	ldw	r2,-8(fp)
    5da0:	10800d43 	ldbu	r2,53(r2)
    5da4:	e0fffe17 	ldw	r3,-8(fp)
    5da8:	18c00d03 	ldbu	r3,52(r3)
    5dac:	18c03fcc 	andi	r3,r3,255
    5db0:	2084b03a 	or	r2,r4,r2
    5db4:	1009883a 	mov	r4,r2
    5db8:	d0a6e484 	addi	r2,gp,-25710
    5dbc:	1885883a 	add	r2,r3,r2
    5dc0:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
    5dc4:	00800044 	movi	r2,1
    5dc8:	e0bfffc5 	stb	r2,-1(fp)
    5dcc:	00000106 	br	5dd4 <OS_FlagTaskRdy+0xd4>
    } else {
        sched                   = OS_FALSE;
    5dd0:	e03fffc5 	stb	zero,-1(fp)
    }
    OS_FlagUnlink(pnode);
    5dd4:	e13ffd17 	ldw	r4,-12(fp)
    5dd8:	0005df40 	call	5df4 <OS_FlagUnlink>
    return (sched);
    5ddc:	e0bfffc3 	ldbu	r2,-1(fp)
}
    5de0:	e037883a 	mov	sp,fp
    5de4:	dfc00117 	ldw	ra,4(sp)
    5de8:	df000017 	ldw	fp,0(sp)
    5dec:	dec00204 	addi	sp,sp,8
    5df0:	f800283a 	ret

00005df4 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
    5df4:	defffa04 	addi	sp,sp,-24
    5df8:	df000515 	stw	fp,20(sp)
    5dfc:	df000504 	addi	fp,sp,20
    5e00:	e13ffb15 	stw	r4,-20(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
    5e04:	e0bffb17 	ldw	r2,-20(fp)
    5e08:	10800117 	ldw	r2,4(r2)
    5e0c:	e0bfff15 	stw	r2,-4(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
    5e10:	e0bffb17 	ldw	r2,-20(fp)
    5e14:	10800017 	ldw	r2,0(r2)
    5e18:	e0bffe15 	stw	r2,-8(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
    5e1c:	e0bfff17 	ldw	r2,-4(fp)
    5e20:	10000b1e 	bne	r2,zero,5e50 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
    5e24:	e0bffb17 	ldw	r2,-20(fp)
    5e28:	10800317 	ldw	r2,12(r2)
    5e2c:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
    5e30:	e0bffd17 	ldw	r2,-12(fp)
    5e34:	e0fffe17 	ldw	r3,-8(fp)
    5e38:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
    5e3c:	e0bffe17 	ldw	r2,-8(fp)
    5e40:	10000b26 	beq	r2,zero,5e70 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
    5e44:	e0bffe17 	ldw	r2,-8(fp)
    5e48:	10000115 	stw	zero,4(r2)
    5e4c:	00000806 	br	5e70 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
    5e50:	e0bfff17 	ldw	r2,-4(fp)
    5e54:	e0fffe17 	ldw	r3,-8(fp)
    5e58:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
    5e5c:	e0bffe17 	ldw	r2,-8(fp)
    5e60:	10000326 	beq	r2,zero,5e70 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
    5e64:	e0bffe17 	ldw	r2,-8(fp)
    5e68:	e0ffff17 	ldw	r3,-4(fp)
    5e6c:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
    5e70:	e0bffb17 	ldw	r2,-20(fp)
    5e74:	10800217 	ldw	r2,8(r2)
    5e78:	e0bffc15 	stw	r2,-16(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
    5e7c:	e0bffc17 	ldw	r2,-16(fp)
    5e80:	10000a15 	stw	zero,40(r2)
#endif
}
    5e84:	0001883a 	nop
    5e88:	e037883a 	mov	sp,fp
    5e8c:	df000017 	ldw	fp,0(sp)
    5e90:	dec00104 	addi	sp,sp,4
    5e94:	f800283a 	ret

00005e98 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
    5e98:	defff404 	addi	sp,sp,-48
    5e9c:	df000b15 	stw	fp,44(sp)
    5ea0:	df000b04 	addi	fp,sp,44
    5ea4:	e13ff815 	stw	r4,-32(fp)
    5ea8:	e17ff715 	stw	r5,-36(fp)
    5eac:	e1bff615 	stw	r6,-40(fp)
    5eb0:	e1fff515 	stw	r7,-44(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    5eb4:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    5eb8:	e0bff517 	ldw	r2,-44(fp)
    5ebc:	1000021e 	bne	r2,zero,5ec8 <OSMemCreate+0x30>
        return ((OS_MEM *)0);
    5ec0:	0005883a 	mov	r2,zero
    5ec4:	00006606 	br	6060 <OSMemCreate+0x1c8>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
    5ec8:	e0bff817 	ldw	r2,-32(fp)
    5ecc:	1000051e 	bne	r2,zero,5ee4 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
    5ed0:	e0bff517 	ldw	r2,-44(fp)
    5ed4:	00c01884 	movi	r3,98
    5ed8:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    5edc:	0005883a 	mov	r2,zero
    5ee0:	00005f06 	br	6060 <OSMemCreate+0x1c8>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
    5ee4:	e0bff817 	ldw	r2,-32(fp)
    5ee8:	108000cc 	andi	r2,r2,3
    5eec:	10000526 	beq	r2,zero,5f04 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
    5ef0:	e0bff517 	ldw	r2,-44(fp)
    5ef4:	00c01884 	movi	r3,98
    5ef8:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    5efc:	0005883a 	mov	r2,zero
    5f00:	00005706 	br	6060 <OSMemCreate+0x1c8>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
    5f04:	e0bff717 	ldw	r2,-36(fp)
    5f08:	108000a8 	cmpgeui	r2,r2,2
    5f0c:	1000051e 	bne	r2,zero,5f24 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
    5f10:	e0bff517 	ldw	r2,-44(fp)
    5f14:	00c016c4 	movi	r3,91
    5f18:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    5f1c:	0005883a 	mov	r2,zero
    5f20:	00004f06 	br	6060 <OSMemCreate+0x1c8>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
    5f24:	e0bff617 	ldw	r2,-40(fp)
    5f28:	10800128 	cmpgeui	r2,r2,4
    5f2c:	1000051e 	bne	r2,zero,5f44 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
    5f30:	e0bff517 	ldw	r2,-44(fp)
    5f34:	00c01704 	movi	r3,92
    5f38:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    5f3c:	0005883a 	mov	r2,zero
    5f40:	00004706 	br	6060 <OSMemCreate+0x1c8>
  NIOS2_READ_STATUS (context);
    5f44:	0005303a 	rdctl	r2,status
    5f48:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5f4c:	e0fffa17 	ldw	r3,-24(fp)
    5f50:	00bfff84 	movi	r2,-2
    5f54:	1884703a 	and	r2,r3,r2
    5f58:	1001703a 	wrctl	status,r2
  return context;
    5f5c:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    5f60:	e0bffc15 	stw	r2,-16(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
    5f64:	d0a6ec17 	ldw	r2,-25680(gp)
    5f68:	e0bffb15 	stw	r2,-20(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
    5f6c:	d0a6ec17 	ldw	r2,-25680(gp)
    5f70:	10000326 	beq	r2,zero,5f80 <OSMemCreate+0xe8>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
    5f74:	d0a6ec17 	ldw	r2,-25680(gp)
    5f78:	10800117 	ldw	r2,4(r2)
    5f7c:	d0a6ec15 	stw	r2,-25680(gp)
    5f80:	e0bffc17 	ldw	r2,-16(fp)
    5f84:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
    5f88:	e0bff917 	ldw	r2,-28(fp)
    5f8c:	1001703a 	wrctl	status,r2
}
    5f90:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
    5f94:	e0bffb17 	ldw	r2,-20(fp)
    5f98:	1000051e 	bne	r2,zero,5fb0 <OSMemCreate+0x118>
        *perr = OS_ERR_MEM_INVALID_PART;
    5f9c:	e0bff517 	ldw	r2,-44(fp)
    5fa0:	00c01684 	movi	r3,90
    5fa4:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    5fa8:	0005883a 	mov	r2,zero
    5fac:	00002c06 	br	6060 <OSMemCreate+0x1c8>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    5fb0:	e0bff817 	ldw	r2,-32(fp)
    5fb4:	e0bffe15 	stw	r2,-8(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
    5fb8:	e0fff817 	ldw	r3,-32(fp)
    5fbc:	e0bff617 	ldw	r2,-40(fp)
    5fc0:	1885883a 	add	r2,r3,r2
    5fc4:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (nblks - 1); i++) {
    5fc8:	e03ffd15 	stw	zero,-12(fp)
    5fcc:	00000c06 	br	6000 <OSMemCreate+0x168>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
    5fd0:	e0bffe17 	ldw	r2,-8(fp)
    5fd4:	e0ffff17 	ldw	r3,-4(fp)
    5fd8:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
    5fdc:	e0bfff17 	ldw	r2,-4(fp)
    5fe0:	e0bffe15 	stw	r2,-8(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    5fe4:	e0ffff17 	ldw	r3,-4(fp)
    5fe8:	e0bff617 	ldw	r2,-40(fp)
    5fec:	1885883a 	add	r2,r3,r2
    5ff0:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (nblks - 1); i++) {
    5ff4:	e0bffd17 	ldw	r2,-12(fp)
    5ff8:	10800044 	addi	r2,r2,1
    5ffc:	e0bffd15 	stw	r2,-12(fp)
    6000:	e0bff717 	ldw	r2,-36(fp)
    6004:	10bfffc4 	addi	r2,r2,-1
    6008:	e0fffd17 	ldw	r3,-12(fp)
    600c:	18bff036 	bltu	r3,r2,5fd0 <OSMemCreate+0x138>
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
    6010:	e0bffe17 	ldw	r2,-8(fp)
    6014:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
    6018:	e0bffb17 	ldw	r2,-20(fp)
    601c:	e0fff817 	ldw	r3,-32(fp)
    6020:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
    6024:	e0bffb17 	ldw	r2,-20(fp)
    6028:	e0fff817 	ldw	r3,-32(fp)
    602c:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
    6030:	e0bffb17 	ldw	r2,-20(fp)
    6034:	e0fff717 	ldw	r3,-36(fp)
    6038:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
    603c:	e0bffb17 	ldw	r2,-20(fp)
    6040:	e0fff717 	ldw	r3,-36(fp)
    6044:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
    6048:	e0bffb17 	ldw	r2,-20(fp)
    604c:	e0fff617 	ldw	r3,-40(fp)
    6050:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
    6054:	e0bff517 	ldw	r2,-44(fp)
    6058:	10000005 	stb	zero,0(r2)
    return (pmem);
    605c:	e0bffb17 	ldw	r2,-20(fp)
}
    6060:	e037883a 	mov	sp,fp
    6064:	df000017 	ldw	fp,0(sp)
    6068:	dec00104 	addi	sp,sp,4
    606c:	f800283a 	ret

00006070 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
    6070:	defff804 	addi	sp,sp,-32
    6074:	df000715 	stw	fp,28(sp)
    6078:	df000704 	addi	fp,sp,28
    607c:	e13ffa15 	stw	r4,-24(fp)
    6080:	e17ff915 	stw	r5,-28(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    6084:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    6088:	e0bff917 	ldw	r2,-28(fp)
    608c:	1000021e 	bne	r2,zero,6098 <OSMemGet+0x28>
        return ((void *)0);
    6090:	0005883a 	mov	r2,zero
    6094:	00003006 	br	6158 <OSMemGet+0xe8>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
    6098:	e0bffa17 	ldw	r2,-24(fp)
    609c:	1000051e 	bne	r2,zero,60b4 <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
    60a0:	e0bff917 	ldw	r2,-28(fp)
    60a4:	00c01804 	movi	r3,96
    60a8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    60ac:	0005883a 	mov	r2,zero
    60b0:	00002906 	br	6158 <OSMemGet+0xe8>
  NIOS2_READ_STATUS (context);
    60b4:	0005303a 	rdctl	r2,status
    60b8:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    60bc:	e0fffd17 	ldw	r3,-12(fp)
    60c0:	00bfff84 	movi	r2,-2
    60c4:	1884703a 	and	r2,r3,r2
    60c8:	1001703a 	wrctl	status,r2
  return context;
    60cc:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    60d0:	e0bfff15 	stw	r2,-4(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
    60d4:	e0bffa17 	ldw	r2,-24(fp)
    60d8:	10800417 	ldw	r2,16(r2)
    60dc:	10001526 	beq	r2,zero,6134 <OSMemGet+0xc4>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
    60e0:	e0bffa17 	ldw	r2,-24(fp)
    60e4:	10800117 	ldw	r2,4(r2)
    60e8:	e0bffe15 	stw	r2,-8(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
    60ec:	e0bffe17 	ldw	r2,-8(fp)
    60f0:	10c00017 	ldw	r3,0(r2)
    60f4:	e0bffa17 	ldw	r2,-24(fp)
    60f8:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
    60fc:	e0bffa17 	ldw	r2,-24(fp)
    6100:	10800417 	ldw	r2,16(r2)
    6104:	10ffffc4 	addi	r3,r2,-1
    6108:	e0bffa17 	ldw	r2,-24(fp)
    610c:	10c00415 	stw	r3,16(r2)
    6110:	e0bfff17 	ldw	r2,-4(fp)
    6114:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    6118:	e0bffc17 	ldw	r2,-16(fp)
    611c:	1001703a 	wrctl	status,r2
}
    6120:	0001883a 	nop
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
    6124:	e0bff917 	ldw	r2,-28(fp)
    6128:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
    612c:	e0bffe17 	ldw	r2,-8(fp)
    6130:	00000906 	br	6158 <OSMemGet+0xe8>
    6134:	e0bfff17 	ldw	r2,-4(fp)
    6138:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    613c:	e0bffb17 	ldw	r2,-20(fp)
    6140:	1001703a 	wrctl	status,r2
}
    6144:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
    6148:	e0bff917 	ldw	r2,-28(fp)
    614c:	00c01744 	movi	r3,93
    6150:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
    6154:	0005883a 	mov	r2,zero
}
    6158:	e037883a 	mov	sp,fp
    615c:	df000017 	ldw	fp,0(sp)
    6160:	dec00104 	addi	sp,sp,4
    6164:	f800283a 	ret

00006168 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
    6168:	defff704 	addi	sp,sp,-36
    616c:	dfc00815 	stw	ra,32(sp)
    6170:	df000715 	stw	fp,28(sp)
    6174:	df000704 	addi	fp,sp,28
    6178:	e13ffb15 	stw	r4,-20(fp)
    617c:	e17ffa15 	stw	r5,-24(fp)
    6180:	e1bff915 	stw	r6,-28(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    6184:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    6188:	e0bff917 	ldw	r2,-28(fp)
    618c:	1000021e 	bne	r2,zero,6198 <OSMemNameGet+0x30>
        return (0);
    6190:	0005883a 	mov	r2,zero
    6194:	00002c06 	br	6248 <OSMemNameGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
    6198:	e0bffb17 	ldw	r2,-20(fp)
    619c:	1000051e 	bne	r2,zero,61b4 <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
    61a0:	e0bff917 	ldw	r2,-28(fp)
    61a4:	00c01804 	movi	r3,96
    61a8:	10c00005 	stb	r3,0(r2)
        return (0);
    61ac:	0005883a 	mov	r2,zero
    61b0:	00002506 	br	6248 <OSMemNameGet+0xe0>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    61b4:	e0bffa17 	ldw	r2,-24(fp)
    61b8:	1000051e 	bne	r2,zero,61d0 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
    61bc:	e0bff917 	ldw	r2,-28(fp)
    61c0:	00c00304 	movi	r3,12
    61c4:	10c00005 	stb	r3,0(r2)
        return (0);
    61c8:	0005883a 	mov	r2,zero
    61cc:	00001e06 	br	6248 <OSMemNameGet+0xe0>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    61d0:	d0a6e343 	ldbu	r2,-25715(gp)
    61d4:	10803fcc 	andi	r2,r2,255
    61d8:	10000526 	beq	r2,zero,61f0 <OSMemNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
    61dc:	e0bff917 	ldw	r2,-28(fp)
    61e0:	00c00444 	movi	r3,17
    61e4:	10c00005 	stb	r3,0(r2)
        return (0);
    61e8:	0005883a 	mov	r2,zero
    61ec:	00001606 	br	6248 <OSMemNameGet+0xe0>
  NIOS2_READ_STATUS (context);
    61f0:	0005303a 	rdctl	r2,status
    61f4:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    61f8:	e0fffc17 	ldw	r3,-16(fp)
    61fc:	00bfff84 	movi	r2,-2
    6200:	1884703a 	and	r2,r3,r2
    6204:	1001703a 	wrctl	status,r2
  return context;
    6208:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    620c:	e0bfff15 	stw	r2,-4(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
    6210:	e0bffb17 	ldw	r2,-20(fp)
    6214:	10800504 	addi	r2,r2,20
    6218:	100b883a 	mov	r5,r2
    621c:	e13ffa17 	ldw	r4,-24(fp)
    6220:	0003fb40 	call	3fb4 <OS_StrCopy>
    6224:	e0bffec5 	stb	r2,-5(fp)
    6228:	e0bfff17 	ldw	r2,-4(fp)
    622c:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
    6230:	e0bffd17 	ldw	r2,-12(fp)
    6234:	1001703a 	wrctl	status,r2
}
    6238:	0001883a 	nop
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    623c:	e0bff917 	ldw	r2,-28(fp)
    6240:	10000005 	stb	zero,0(r2)
    return (len);
    6244:	e0bffec3 	ldbu	r2,-5(fp)
}
    6248:	e037883a 	mov	sp,fp
    624c:	dfc00117 	ldw	ra,4(sp)
    6250:	df000017 	ldw	fp,0(sp)
    6254:	dec00204 	addi	sp,sp,8
    6258:	f800283a 	ret

0000625c <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
    625c:	defff604 	addi	sp,sp,-40
    6260:	dfc00915 	stw	ra,36(sp)
    6264:	df000815 	stw	fp,32(sp)
    6268:	df000804 	addi	fp,sp,32
    626c:	e13ffa15 	stw	r4,-24(fp)
    6270:	e17ff915 	stw	r5,-28(fp)
    6274:	e1bff815 	stw	r6,-32(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    6278:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    627c:	e0bff817 	ldw	r2,-32(fp)
    6280:	10003726 	beq	r2,zero,6360 <OSMemNameSet+0x104>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
    6284:	e0bffa17 	ldw	r2,-24(fp)
    6288:	1000041e 	bne	r2,zero,629c <OSMemNameSet+0x40>
        *perr = OS_ERR_MEM_INVALID_PMEM;
    628c:	e0bff817 	ldw	r2,-32(fp)
    6290:	00c01804 	movi	r3,96
    6294:	10c00005 	stb	r3,0(r2)
        return;
    6298:	00003206 	br	6364 <OSMemNameSet+0x108>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    629c:	e0bff917 	ldw	r2,-28(fp)
    62a0:	1000041e 	bne	r2,zero,62b4 <OSMemNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
    62a4:	e0bff817 	ldw	r2,-32(fp)
    62a8:	00c00304 	movi	r3,12
    62ac:	10c00005 	stb	r3,0(r2)
        return;
    62b0:	00002c06 	br	6364 <OSMemNameSet+0x108>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    62b4:	d0a6e343 	ldbu	r2,-25715(gp)
    62b8:	10803fcc 	andi	r2,r2,255
    62bc:	10000426 	beq	r2,zero,62d0 <OSMemNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
    62c0:	e0bff817 	ldw	r2,-32(fp)
    62c4:	00c00484 	movi	r3,18
    62c8:	10c00005 	stb	r3,0(r2)
        return;
    62cc:	00002506 	br	6364 <OSMemNameSet+0x108>
  NIOS2_READ_STATUS (context);
    62d0:	0005303a 	rdctl	r2,status
    62d4:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    62d8:	e0fffd17 	ldw	r3,-12(fp)
    62dc:	00bfff84 	movi	r2,-2
    62e0:	1884703a 	and	r2,r3,r2
    62e4:	1001703a 	wrctl	status,r2
  return context;
    62e8:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    62ec:	e0bfff15 	stw	r2,-4(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
    62f0:	e13ff917 	ldw	r4,-28(fp)
    62f4:	00040280 	call	4028 <OS_StrLen>
    62f8:	e0bffec5 	stb	r2,-5(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
    62fc:	e0bffec3 	ldbu	r2,-5(fp)
    6300:	10800830 	cmpltui	r2,r2,32
    6304:	1000091e 	bne	r2,zero,632c <OSMemNameSet+0xd0>
    6308:	e0bfff17 	ldw	r2,-4(fp)
    630c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    6310:	e0bffc17 	ldw	r2,-16(fp)
    6314:	1001703a 	wrctl	status,r2
}
    6318:	0001883a 	nop
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
    631c:	e0bff817 	ldw	r2,-32(fp)
    6320:	00c018c4 	movi	r3,99
    6324:	10c00005 	stb	r3,0(r2)
        return;
    6328:	00000e06 	br	6364 <OSMemNameSet+0x108>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    632c:	e0bffa17 	ldw	r2,-24(fp)
    6330:	10800504 	addi	r2,r2,20
    6334:	e17ff917 	ldw	r5,-28(fp)
    6338:	1009883a 	mov	r4,r2
    633c:	0003fb40 	call	3fb4 <OS_StrCopy>
    6340:	e0bfff17 	ldw	r2,-4(fp)
    6344:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    6348:	e0bffb17 	ldw	r2,-20(fp)
    634c:	1001703a 	wrctl	status,r2
}
    6350:	0001883a 	nop
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    6354:	e0bff817 	ldw	r2,-32(fp)
    6358:	10000005 	stb	zero,0(r2)
    635c:	00000106 	br	6364 <OSMemNameSet+0x108>
        return;
    6360:	0001883a 	nop
}
    6364:	e037883a 	mov	sp,fp
    6368:	dfc00117 	ldw	ra,4(sp)
    636c:	df000017 	ldw	fp,0(sp)
    6370:	dec00204 	addi	sp,sp,8
    6374:	f800283a 	ret

00006378 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
    6378:	defff904 	addi	sp,sp,-28
    637c:	df000615 	stw	fp,24(sp)
    6380:	df000604 	addi	fp,sp,24
    6384:	e13ffb15 	stw	r4,-20(fp)
    6388:	e17ffa15 	stw	r5,-24(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    638c:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
    6390:	e0bffb17 	ldw	r2,-20(fp)
    6394:	1000021e 	bne	r2,zero,63a0 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
    6398:	00801804 	movi	r2,96
    639c:	00002a06 	br	6448 <OSMemPut+0xd0>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
    63a0:	e0bffa17 	ldw	r2,-24(fp)
    63a4:	1000021e 	bne	r2,zero,63b0 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
    63a8:	008017c4 	movi	r2,95
    63ac:	00002606 	br	6448 <OSMemPut+0xd0>
  NIOS2_READ_STATUS (context);
    63b0:	0005303a 	rdctl	r2,status
    63b4:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    63b8:	e0fffe17 	ldw	r3,-8(fp)
    63bc:	00bfff84 	movi	r2,-2
    63c0:	1884703a 	and	r2,r3,r2
    63c4:	1001703a 	wrctl	status,r2
  return context;
    63c8:	e0bffe17 	ldw	r2,-8(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    63cc:	e0bfff15 	stw	r2,-4(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
    63d0:	e0bffb17 	ldw	r2,-20(fp)
    63d4:	10c00417 	ldw	r3,16(r2)
    63d8:	e0bffb17 	ldw	r2,-20(fp)
    63dc:	10800317 	ldw	r2,12(r2)
    63e0:	18800736 	bltu	r3,r2,6400 <OSMemPut+0x88>
    63e4:	e0bfff17 	ldw	r2,-4(fp)
    63e8:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
    63ec:	e0bffd17 	ldw	r2,-12(fp)
    63f0:	1001703a 	wrctl	status,r2
}
    63f4:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
    63f8:	00801784 	movi	r2,94
    63fc:	00001206 	br	6448 <OSMemPut+0xd0>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
    6400:	e0bffb17 	ldw	r2,-20(fp)
    6404:	10c00117 	ldw	r3,4(r2)
    6408:	e0bffa17 	ldw	r2,-24(fp)
    640c:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
    6410:	e0bffb17 	ldw	r2,-20(fp)
    6414:	e0fffa17 	ldw	r3,-24(fp)
    6418:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
    641c:	e0bffb17 	ldw	r2,-20(fp)
    6420:	10800417 	ldw	r2,16(r2)
    6424:	10c00044 	addi	r3,r2,1
    6428:	e0bffb17 	ldw	r2,-20(fp)
    642c:	10c00415 	stw	r3,16(r2)
    6430:	e0bfff17 	ldw	r2,-4(fp)
    6434:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    6438:	e0bffc17 	ldw	r2,-16(fp)
    643c:	1001703a 	wrctl	status,r2
}
    6440:	0001883a 	nop
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
    6444:	0005883a 	mov	r2,zero
}
    6448:	e037883a 	mov	sp,fp
    644c:	df000017 	ldw	fp,0(sp)
    6450:	dec00104 	addi	sp,sp,4
    6454:	f800283a 	ret

00006458 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
    6458:	defffa04 	addi	sp,sp,-24
    645c:	df000515 	stw	fp,20(sp)
    6460:	df000504 	addi	fp,sp,20
    6464:	e13ffc15 	stw	r4,-16(fp)
    6468:	e17ffb15 	stw	r5,-20(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    646c:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
    6470:	e0bffc17 	ldw	r2,-16(fp)
    6474:	1000021e 	bne	r2,zero,6480 <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
    6478:	00801804 	movi	r2,96
    647c:	00002d06 	br	6534 <OSMemQuery+0xdc>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
    6480:	e0bffb17 	ldw	r2,-20(fp)
    6484:	1000021e 	bne	r2,zero,6490 <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
    6488:	00801844 	movi	r2,97
    648c:	00002906 	br	6534 <OSMemQuery+0xdc>
  NIOS2_READ_STATUS (context);
    6490:	0005303a 	rdctl	r2,status
    6494:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6498:	e0fffd17 	ldw	r3,-12(fp)
    649c:	00bfff84 	movi	r2,-2
    64a0:	1884703a 	and	r2,r3,r2
    64a4:	1001703a 	wrctl	status,r2
  return context;
    64a8:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    64ac:	e0bfff15 	stw	r2,-4(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
    64b0:	e0bffc17 	ldw	r2,-16(fp)
    64b4:	10c00017 	ldw	r3,0(r2)
    64b8:	e0bffb17 	ldw	r2,-20(fp)
    64bc:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
    64c0:	e0bffc17 	ldw	r2,-16(fp)
    64c4:	10c00117 	ldw	r3,4(r2)
    64c8:	e0bffb17 	ldw	r2,-20(fp)
    64cc:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
    64d0:	e0bffc17 	ldw	r2,-16(fp)
    64d4:	10c00217 	ldw	r3,8(r2)
    64d8:	e0bffb17 	ldw	r2,-20(fp)
    64dc:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
    64e0:	e0bffc17 	ldw	r2,-16(fp)
    64e4:	10c00317 	ldw	r3,12(r2)
    64e8:	e0bffb17 	ldw	r2,-20(fp)
    64ec:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
    64f0:	e0bffc17 	ldw	r2,-16(fp)
    64f4:	10c00417 	ldw	r3,16(r2)
    64f8:	e0bffb17 	ldw	r2,-20(fp)
    64fc:	10c00415 	stw	r3,16(r2)
    6500:	e0bfff17 	ldw	r2,-4(fp)
    6504:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
    6508:	e0bffe17 	ldw	r2,-8(fp)
    650c:	1001703a 	wrctl	status,r2
}
    6510:	0001883a 	nop
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
    6514:	e0bffb17 	ldw	r2,-20(fp)
    6518:	10c00317 	ldw	r3,12(r2)
    651c:	e0bffb17 	ldw	r2,-20(fp)
    6520:	10800417 	ldw	r2,16(r2)
    6524:	1887c83a 	sub	r3,r3,r2
    6528:	e0bffb17 	ldw	r2,-20(fp)
    652c:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
    6530:	0005883a 	mov	r2,zero
}
    6534:	e037883a 	mov	sp,fp
    6538:	df000017 	ldw	fp,0(sp)
    653c:	dec00104 	addi	sp,sp,4
    6540:	f800283a 	ret

00006544 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
    6544:	defffc04 	addi	sp,sp,-16
    6548:	dfc00315 	stw	ra,12(sp)
    654c:	df000215 	stw	fp,8(sp)
    6550:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    6554:	01430c04 	movi	r5,3120
    6558:	010000b4 	movhi	r4,2
    655c:	21270504 	addi	r4,r4,-25580
    6560:	0003db80 	call	3db8 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    6564:	008000b4 	movhi	r2,2
    6568:	10a70504 	addi	r2,r2,-25580
    656c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
    6570:	e03ffe8d 	sth	zero,-6(fp)
    6574:	00001306 	br	65c4 <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
    6578:	e0bffe8b 	ldhu	r2,-6(fp)
    657c:	10800044 	addi	r2,r2,1
    6580:	10c00d24 	muli	r3,r2,52
    6584:	008000b4 	movhi	r2,2
    6588:	10a70504 	addi	r2,r2,-25580
    658c:	1887883a 	add	r3,r3,r2
    6590:	e0bfff17 	ldw	r2,-4(fp)
    6594:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
    6598:	e0bfff17 	ldw	r2,-4(fp)
    659c:	00c00fc4 	movi	r3,63
    65a0:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
    65a4:	e0bfff17 	ldw	r2,-4(fp)
    65a8:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
    65ac:	e0bfff17 	ldw	r2,-4(fp)
    65b0:	10800d04 	addi	r2,r2,52
    65b4:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
    65b8:	e0bffe8b 	ldhu	r2,-6(fp)
    65bc:	10800044 	addi	r2,r2,1
    65c0:	e0bffe8d 	sth	r2,-6(fp)
    65c4:	e0bffe8b 	ldhu	r2,-6(fp)
    65c8:	10800ef0 	cmpltui	r2,r2,59
    65cc:	103fea1e 	bne	r2,zero,6578 <OS_MemInit+0x34>
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
    65d0:	e0bfff17 	ldw	r2,-4(fp)
    65d4:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
    65d8:	e0bfff17 	ldw	r2,-4(fp)
    65dc:	00c00fc4 	movi	r3,63
    65e0:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
    65e4:	e0bfff17 	ldw	r2,-4(fp)
    65e8:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
    65ec:	008000b4 	movhi	r2,2
    65f0:	10a70504 	addi	r2,r2,-25580
    65f4:	d0a6ec15 	stw	r2,-25680(gp)
#endif
}
    65f8:	0001883a 	nop
    65fc:	e037883a 	mov	sp,fp
    6600:	dfc00117 	ldw	ra,4(sp)
    6604:	df000017 	ldw	fp,0(sp)
    6608:	dec00204 	addi	sp,sp,8
    660c:	f800283a 	ret

00006610 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
    6610:	defff804 	addi	sp,sp,-32
    6614:	df000715 	stw	fp,28(sp)
    6618:	df000704 	addi	fp,sp,28
    661c:	e13ffa15 	stw	r4,-24(fp)
    6620:	e17ff915 	stw	r5,-28(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    6624:	e03ffe15 	stw	zero,-8(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    6628:	e0bff917 	ldw	r2,-28(fp)
    662c:	1000021e 	bne	r2,zero,6638 <OSQAccept+0x28>
        return ((void *)0);
    6630:	0005883a 	mov	r2,zero
    6634:	00004306 	br	6744 <OSQAccept+0x134>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
    6638:	e0bffa17 	ldw	r2,-24(fp)
    663c:	1000051e 	bne	r2,zero,6654 <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
    6640:	e0bff917 	ldw	r2,-28(fp)
    6644:	00c00104 	movi	r3,4
    6648:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    664c:	0005883a 	mov	r2,zero
    6650:	00003c06 	br	6744 <OSQAccept+0x134>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
    6654:	e0bffa17 	ldw	r2,-24(fp)
    6658:	10800003 	ldbu	r2,0(r2)
    665c:	10803fcc 	andi	r2,r2,255
    6660:	108000a0 	cmpeqi	r2,r2,2
    6664:	1000051e 	bne	r2,zero,667c <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
    6668:	e0bff917 	ldw	r2,-28(fp)
    666c:	00c00044 	movi	r3,1
    6670:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    6674:	0005883a 	mov	r2,zero
    6678:	00003206 	br	6744 <OSQAccept+0x134>
  NIOS2_READ_STATUS (context);
    667c:	0005303a 	rdctl	r2,status
    6680:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6684:	e0fffc17 	ldw	r3,-16(fp)
    6688:	00bfff84 	movi	r2,-2
    668c:	1884703a 	and	r2,r3,r2
    6690:	1001703a 	wrctl	status,r2
  return context;
    6694:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    6698:	e0bffe15 	stw	r2,-8(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
    669c:	e0bffa17 	ldw	r2,-24(fp)
    66a0:	10800117 	ldw	r2,4(r2)
    66a4:	e0bffd15 	stw	r2,-12(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
    66a8:	e0bffd17 	ldw	r2,-12(fp)
    66ac:	1080058b 	ldhu	r2,22(r2)
    66b0:	10bfffcc 	andi	r2,r2,65535
    66b4:	10001926 	beq	r2,zero,671c <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
    66b8:	e0bffd17 	ldw	r2,-12(fp)
    66bc:	10800417 	ldw	r2,16(r2)
    66c0:	11000104 	addi	r4,r2,4
    66c4:	e0fffd17 	ldw	r3,-12(fp)
    66c8:	19000415 	stw	r4,16(r3)
    66cc:	10800017 	ldw	r2,0(r2)
    66d0:	e0bfff15 	stw	r2,-4(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
    66d4:	e0bffd17 	ldw	r2,-12(fp)
    66d8:	1080058b 	ldhu	r2,22(r2)
    66dc:	10bfffc4 	addi	r2,r2,-1
    66e0:	1007883a 	mov	r3,r2
    66e4:	e0bffd17 	ldw	r2,-12(fp)
    66e8:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
    66ec:	e0bffd17 	ldw	r2,-12(fp)
    66f0:	10c00417 	ldw	r3,16(r2)
    66f4:	e0bffd17 	ldw	r2,-12(fp)
    66f8:	10800217 	ldw	r2,8(r2)
    66fc:	1880041e 	bne	r3,r2,6710 <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
    6700:	e0bffd17 	ldw	r2,-12(fp)
    6704:	10c00117 	ldw	r3,4(r2)
    6708:	e0bffd17 	ldw	r2,-12(fp)
    670c:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
    6710:	e0bff917 	ldw	r2,-28(fp)
    6714:	10000005 	stb	zero,0(r2)
    6718:	00000406 	br	672c <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
    671c:	e0bff917 	ldw	r2,-28(fp)
    6720:	00c007c4 	movi	r3,31
    6724:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
    6728:	e03fff15 	stw	zero,-4(fp)
    672c:	e0bffe17 	ldw	r2,-8(fp)
    6730:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    6734:	e0bffb17 	ldw	r2,-20(fp)
    6738:	1001703a 	wrctl	status,r2
}
    673c:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
    6740:	e0bfff17 	ldw	r2,-4(fp)
}
    6744:	e037883a 	mov	sp,fp
    6748:	df000017 	ldw	fp,0(sp)
    674c:	dec00104 	addi	sp,sp,4
    6750:	f800283a 	ret

00006754 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
    6754:	defff404 	addi	sp,sp,-48
    6758:	dfc00b15 	stw	ra,44(sp)
    675c:	df000a15 	stw	fp,40(sp)
    6760:	df000a04 	addi	fp,sp,40
    6764:	e13ff715 	stw	r4,-36(fp)
    6768:	2805883a 	mov	r2,r5
    676c:	e0bff60d 	sth	r2,-40(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    6770:	e03ffe15 	stw	zero,-8(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
    6774:	d0a6e343 	ldbu	r2,-25715(gp)
    6778:	10803fcc 	andi	r2,r2,255
    677c:	10000226 	beq	r2,zero,6788 <OSQCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
    6780:	0005883a 	mov	r2,zero
    6784:	00005a06 	br	68f0 <OSQCreate+0x19c>
  NIOS2_READ_STATUS (context);
    6788:	0005303a 	rdctl	r2,status
    678c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6790:	e0fffc17 	ldw	r3,-16(fp)
    6794:	00bfff84 	movi	r2,-2
    6798:	1884703a 	and	r2,r3,r2
    679c:	1001703a 	wrctl	status,r2
  return context;
    67a0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    67a4:	e0bffe15 	stw	r2,-8(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
    67a8:	d0a6de17 	ldw	r2,-25736(gp)
    67ac:	e0bfff15 	stw	r2,-4(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
    67b0:	d0a6de17 	ldw	r2,-25736(gp)
    67b4:	10000326 	beq	r2,zero,67c4 <OSQCreate+0x70>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
    67b8:	d0a6de17 	ldw	r2,-25736(gp)
    67bc:	10800117 	ldw	r2,4(r2)
    67c0:	d0a6de15 	stw	r2,-25736(gp)
    67c4:	e0bffe17 	ldw	r2,-8(fp)
    67c8:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    67cc:	e0bffb17 	ldw	r2,-20(fp)
    67d0:	1001703a 	wrctl	status,r2
}
    67d4:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
    67d8:	e0bfff17 	ldw	r2,-4(fp)
    67dc:	10004326 	beq	r2,zero,68ec <OSQCreate+0x198>
  NIOS2_READ_STATUS (context);
    67e0:	0005303a 	rdctl	r2,status
    67e4:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    67e8:	e0fffa17 	ldw	r3,-24(fp)
    67ec:	00bfff84 	movi	r2,-2
    67f0:	1884703a 	and	r2,r3,r2
    67f4:	1001703a 	wrctl	status,r2
  return context;
    67f8:	e0bffa17 	ldw	r2,-24(fp)
        OS_ENTER_CRITICAL();
    67fc:	e0bffe15 	stw	r2,-8(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
    6800:	d0a6ed17 	ldw	r2,-25676(gp)
    6804:	e0bffd15 	stw	r2,-12(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
    6808:	e0bffd17 	ldw	r2,-12(fp)
    680c:	10002c26 	beq	r2,zero,68c0 <OSQCreate+0x16c>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
    6810:	d0a6ed17 	ldw	r2,-25676(gp)
    6814:	10800017 	ldw	r2,0(r2)
    6818:	d0a6ed15 	stw	r2,-25676(gp)
    681c:	e0bffe17 	ldw	r2,-8(fp)
    6820:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
    6824:	e0bff917 	ldw	r2,-28(fp)
    6828:	1001703a 	wrctl	status,r2
}
    682c:	0001883a 	nop
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
    6830:	e0bffd17 	ldw	r2,-12(fp)
    6834:	e0fff717 	ldw	r3,-36(fp)
    6838:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
    683c:	e0bff60b 	ldhu	r2,-40(fp)
    6840:	100490ba 	slli	r2,r2,2
    6844:	e0fff717 	ldw	r3,-36(fp)
    6848:	1887883a 	add	r3,r3,r2
    684c:	e0bffd17 	ldw	r2,-12(fp)
    6850:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
    6854:	e0bffd17 	ldw	r2,-12(fp)
    6858:	e0fff717 	ldw	r3,-36(fp)
    685c:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
    6860:	e0bffd17 	ldw	r2,-12(fp)
    6864:	e0fff717 	ldw	r3,-36(fp)
    6868:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
    686c:	e0bffd17 	ldw	r2,-12(fp)
    6870:	e0fff60b 	ldhu	r3,-40(fp)
    6874:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
    6878:	e0bffd17 	ldw	r2,-12(fp)
    687c:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
    6880:	e0bfff17 	ldw	r2,-4(fp)
    6884:	00c00084 	movi	r3,2
    6888:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
    688c:	e0bfff17 	ldw	r2,-4(fp)
    6890:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
    6894:	e0bfff17 	ldw	r2,-4(fp)
    6898:	e0fffd17 	ldw	r3,-12(fp)
    689c:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
    68a0:	e0bfff17 	ldw	r2,-4(fp)
    68a4:	00c00fc4 	movi	r3,63
    68a8:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
    68ac:	e0bfff17 	ldw	r2,-4(fp)
    68b0:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
    68b4:	e13fff17 	ldw	r4,-4(fp)
    68b8:	00039cc0 	call	39cc <OS_EventWaitListInit>
    68bc:	00000b06 	br	68ec <OSQCreate+0x198>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
    68c0:	d0e6de17 	ldw	r3,-25736(gp)
    68c4:	e0bfff17 	ldw	r2,-4(fp)
    68c8:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
    68cc:	e0bfff17 	ldw	r2,-4(fp)
    68d0:	d0a6de15 	stw	r2,-25736(gp)
    68d4:	e0bffe17 	ldw	r2,-8(fp)
    68d8:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
    68dc:	e0bff817 	ldw	r2,-32(fp)
    68e0:	1001703a 	wrctl	status,r2
}
    68e4:	0001883a 	nop
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
    68e8:	e03fff15 	stw	zero,-4(fp)
        }
    }
    return (pevent);
    68ec:	e0bfff17 	ldw	r2,-4(fp)
}
    68f0:	e037883a 	mov	sp,fp
    68f4:	dfc00117 	ldw	ra,4(sp)
    68f8:	df000017 	ldw	fp,0(sp)
    68fc:	dec00204 	addi	sp,sp,8
    6900:	f800283a 	ret

00006904 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    6904:	defff204 	addi	sp,sp,-56
    6908:	dfc00d15 	stw	ra,52(sp)
    690c:	df000c15 	stw	fp,48(sp)
    6910:	df000c04 	addi	fp,sp,48
    6914:	e13ff615 	stw	r4,-40(fp)
    6918:	2805883a 	mov	r2,r5
    691c:	e1bff415 	stw	r6,-48(fp)
    6920:	e0bff505 	stb	r2,-44(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    6924:	e03ffd15 	stw	zero,-12(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    6928:	e0bff417 	ldw	r2,-48(fp)
    692c:	1000021e 	bne	r2,zero,6938 <OSQDel+0x34>
        return (pevent);
    6930:	e0bff617 	ldw	r2,-40(fp)
    6934:	00009206 	br	6b80 <OSQDel+0x27c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    6938:	e0bff617 	ldw	r2,-40(fp)
    693c:	1000051e 	bne	r2,zero,6954 <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    6940:	e0bff417 	ldw	r2,-48(fp)
    6944:	00c00104 	movi	r3,4
    6948:	10c00005 	stb	r3,0(r2)
        return (pevent);
    694c:	e0bff617 	ldw	r2,-40(fp)
    6950:	00008b06 	br	6b80 <OSQDel+0x27c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
    6954:	e0bff617 	ldw	r2,-40(fp)
    6958:	10800003 	ldbu	r2,0(r2)
    695c:	10803fcc 	andi	r2,r2,255
    6960:	108000a0 	cmpeqi	r2,r2,2
    6964:	1000051e 	bne	r2,zero,697c <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    6968:	e0bff417 	ldw	r2,-48(fp)
    696c:	00c00044 	movi	r3,1
    6970:	10c00005 	stb	r3,0(r2)
        return (pevent);
    6974:	e0bff617 	ldw	r2,-40(fp)
    6978:	00008106 	br	6b80 <OSQDel+0x27c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    697c:	d0a6e343 	ldbu	r2,-25715(gp)
    6980:	10803fcc 	andi	r2,r2,255
    6984:	10000526 	beq	r2,zero,699c <OSQDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
    6988:	e0bff417 	ldw	r2,-48(fp)
    698c:	00c003c4 	movi	r3,15
    6990:	10c00005 	stb	r3,0(r2)
        return (pevent);
    6994:	e0bff617 	ldw	r2,-40(fp)
    6998:	00007906 	br	6b80 <OSQDel+0x27c>
  NIOS2_READ_STATUS (context);
    699c:	0005303a 	rdctl	r2,status
    69a0:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    69a4:	e0fffb17 	ldw	r3,-20(fp)
    69a8:	00bfff84 	movi	r2,-2
    69ac:	1884703a 	and	r2,r3,r2
    69b0:	1001703a 	wrctl	status,r2
  return context;
    69b4:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
    69b8:	e0bffd15 	stw	r2,-12(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
    69bc:	e0bff617 	ldw	r2,-40(fp)
    69c0:	10800283 	ldbu	r2,10(r2)
    69c4:	10803fcc 	andi	r2,r2,255
    69c8:	10000326 	beq	r2,zero,69d8 <OSQDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    69cc:	00800044 	movi	r2,1
    69d0:	e0bfffc5 	stb	r2,-1(fp)
    69d4:	00000106 	br	69dc <OSQDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    69d8:	e03fffc5 	stb	zero,-1(fp)
    }
    switch (opt) {
    69dc:	e0bff503 	ldbu	r2,-44(fp)
    69e0:	10000326 	beq	r2,zero,69f0 <OSQDel+0xec>
    69e4:	10800060 	cmpeqi	r2,r2,1
    69e8:	1000321e 	bne	r2,zero,6ab4 <OSQDel+0x1b0>
    69ec:	00005806 	br	6b50 <OSQDel+0x24c>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
    69f0:	e0bfffc3 	ldbu	r2,-1(fp)
    69f4:	10001f1e 	bne	r2,zero,6a74 <OSQDel+0x170>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
    69f8:	e0bff617 	ldw	r2,-40(fp)
    69fc:	00c00fc4 	movi	r3,63
    6a00:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
    6a04:	e0bff617 	ldw	r2,-40(fp)
    6a08:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
    6a0c:	e0bff617 	ldw	r2,-40(fp)
    6a10:	10800117 	ldw	r2,4(r2)
    6a14:	e0bffc15 	stw	r2,-16(fp)
                 pq->OSQPtr             = OSQFreeList;
    6a18:	d0e6ed17 	ldw	r3,-25676(gp)
    6a1c:	e0bffc17 	ldw	r2,-16(fp)
    6a20:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
    6a24:	e0bffc17 	ldw	r2,-16(fp)
    6a28:	d0a6ed15 	stw	r2,-25676(gp)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    6a2c:	e0bff617 	ldw	r2,-40(fp)
    6a30:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
    6a34:	d0e6de17 	ldw	r3,-25736(gp)
    6a38:	e0bff617 	ldw	r2,-40(fp)
    6a3c:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
    6a40:	e0bff617 	ldw	r2,-40(fp)
    6a44:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
    6a48:	e0bff617 	ldw	r2,-40(fp)
    6a4c:	d0a6de15 	stw	r2,-25736(gp)
    6a50:	e0bffd17 	ldw	r2,-12(fp)
    6a54:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
    6a58:	e0bffa17 	ldw	r2,-24(fp)
    6a5c:	1001703a 	wrctl	status,r2
}
    6a60:	0001883a 	nop
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
    6a64:	e0bff417 	ldw	r2,-48(fp)
    6a68:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
    6a6c:	e03ffe15 	stw	zero,-8(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
    6a70:	00004206 	br	6b7c <OSQDel+0x278>
    6a74:	e0bffd17 	ldw	r2,-12(fp)
    6a78:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
    6a7c:	e0bff917 	ldw	r2,-28(fp)
    6a80:	1001703a 	wrctl	status,r2
}
    6a84:	0001883a 	nop
                 *perr                  = OS_ERR_TASK_WAITING;
    6a88:	e0bff417 	ldw	r2,-48(fp)
    6a8c:	00c01244 	movi	r3,73
    6a90:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
    6a94:	e0bff617 	ldw	r2,-40(fp)
    6a98:	e0bffe15 	stw	r2,-8(fp)
             break;
    6a9c:	00003706 	br	6b7c <OSQDel+0x278>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
    6aa0:	000f883a 	mov	r7,zero
    6aa4:	01800104 	movi	r6,4
    6aa8:	000b883a 	mov	r5,zero
    6aac:	e13ff617 	ldw	r4,-40(fp)
    6ab0:	00034480 	call	3448 <OS_EventTaskRdy>
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
    6ab4:	e0bff617 	ldw	r2,-40(fp)
    6ab8:	10800283 	ldbu	r2,10(r2)
    6abc:	10803fcc 	andi	r2,r2,255
    6ac0:	103ff71e 	bne	r2,zero,6aa0 <OSQDel+0x19c>
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
    6ac4:	e0bff617 	ldw	r2,-40(fp)
    6ac8:	00c00fc4 	movi	r3,63
    6acc:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
    6ad0:	e0bff617 	ldw	r2,-40(fp)
    6ad4:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
    6ad8:	e0bff617 	ldw	r2,-40(fp)
    6adc:	10800117 	ldw	r2,4(r2)
    6ae0:	e0bffc15 	stw	r2,-16(fp)
             pq->OSQPtr             = OSQFreeList;
    6ae4:	d0e6ed17 	ldw	r3,-25676(gp)
    6ae8:	e0bffc17 	ldw	r2,-16(fp)
    6aec:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
    6af0:	e0bffc17 	ldw	r2,-16(fp)
    6af4:	d0a6ed15 	stw	r2,-25676(gp)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    6af8:	e0bff617 	ldw	r2,-40(fp)
    6afc:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
    6b00:	d0e6de17 	ldw	r3,-25736(gp)
    6b04:	e0bff617 	ldw	r2,-40(fp)
    6b08:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
    6b0c:	e0bff617 	ldw	r2,-40(fp)
    6b10:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
    6b14:	e0bff617 	ldw	r2,-40(fp)
    6b18:	d0a6de15 	stw	r2,-25736(gp)
    6b1c:	e0bffd17 	ldw	r2,-12(fp)
    6b20:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
    6b24:	e0bff817 	ldw	r2,-32(fp)
    6b28:	1001703a 	wrctl	status,r2
}
    6b2c:	0001883a 	nop
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
    6b30:	e0bfffc3 	ldbu	r2,-1(fp)
    6b34:	10800058 	cmpnei	r2,r2,1
    6b38:	1000011e 	bne	r2,zero,6b40 <OSQDel+0x23c>
                 OS_Sched();                               /* Find highest priority task ready to run  */
    6b3c:	0003e7c0 	call	3e7c <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
    6b40:	e0bff417 	ldw	r2,-48(fp)
    6b44:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
    6b48:	e03ffe15 	stw	zero,-8(fp)
             break;
    6b4c:	00000b06 	br	6b7c <OSQDel+0x278>
    6b50:	e0bffd17 	ldw	r2,-12(fp)
    6b54:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context);
    6b58:	e0bff717 	ldw	r2,-36(fp)
    6b5c:	1001703a 	wrctl	status,r2
}
    6b60:	0001883a 	nop

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
    6b64:	e0bff417 	ldw	r2,-48(fp)
    6b68:	00c001c4 	movi	r3,7
    6b6c:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
    6b70:	e0bff617 	ldw	r2,-40(fp)
    6b74:	e0bffe15 	stw	r2,-8(fp)
             break;
    6b78:	0001883a 	nop
    }
    return (pevent_return);
    6b7c:	e0bffe17 	ldw	r2,-8(fp)
}
    6b80:	e037883a 	mov	sp,fp
    6b84:	dfc00117 	ldw	ra,4(sp)
    6b88:	df000017 	ldw	fp,0(sp)
    6b8c:	dec00204 	addi	sp,sp,8
    6b90:	f800283a 	ret

00006b94 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
    6b94:	defffa04 	addi	sp,sp,-24
    6b98:	df000515 	stw	fp,20(sp)
    6b9c:	df000504 	addi	fp,sp,20
    6ba0:	e13ffb15 	stw	r4,-20(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    6ba4:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    6ba8:	e0bffb17 	ldw	r2,-20(fp)
    6bac:	1000021e 	bne	r2,zero,6bb8 <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
    6bb0:	00800104 	movi	r2,4
    6bb4:	00002206 	br	6c40 <OSQFlush+0xac>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
    6bb8:	e0bffb17 	ldw	r2,-20(fp)
    6bbc:	10800003 	ldbu	r2,0(r2)
    6bc0:	10803fcc 	andi	r2,r2,255
    6bc4:	108000a0 	cmpeqi	r2,r2,2
    6bc8:	1000021e 	bne	r2,zero,6bd4 <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
    6bcc:	00800044 	movi	r2,1
    6bd0:	00001b06 	br	6c40 <OSQFlush+0xac>
  NIOS2_READ_STATUS (context);
    6bd4:	0005303a 	rdctl	r2,status
    6bd8:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6bdc:	e0fffc17 	ldw	r3,-16(fp)
    6be0:	00bfff84 	movi	r2,-2
    6be4:	1884703a 	and	r2,r3,r2
    6be8:	1001703a 	wrctl	status,r2
  return context;
    6bec:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    6bf0:	e0bfff15 	stw	r2,-4(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
    6bf4:	e0bffb17 	ldw	r2,-20(fp)
    6bf8:	10800117 	ldw	r2,4(r2)
    6bfc:	e0bffe15 	stw	r2,-8(fp)
    pq->OSQIn      = pq->OSQStart;
    6c00:	e0bffe17 	ldw	r2,-8(fp)
    6c04:	10c00117 	ldw	r3,4(r2)
    6c08:	e0bffe17 	ldw	r2,-8(fp)
    6c0c:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
    6c10:	e0bffe17 	ldw	r2,-8(fp)
    6c14:	10c00117 	ldw	r3,4(r2)
    6c18:	e0bffe17 	ldw	r2,-8(fp)
    6c1c:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
    6c20:	e0bffe17 	ldw	r2,-8(fp)
    6c24:	1000058d 	sth	zero,22(r2)
    6c28:	e0bfff17 	ldw	r2,-4(fp)
    6c2c:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
    6c30:	e0bffd17 	ldw	r2,-12(fp)
    6c34:	1001703a 	wrctl	status,r2
}
    6c38:	0001883a 	nop
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    6c3c:	0005883a 	mov	r2,zero
}
    6c40:	e037883a 	mov	sp,fp
    6c44:	df000017 	ldw	fp,0(sp)
    6c48:	dec00104 	addi	sp,sp,4
    6c4c:	f800283a 	ret

00006c50 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
    6c50:	defff304 	addi	sp,sp,-52
    6c54:	dfc00c15 	stw	ra,48(sp)
    6c58:	df000b15 	stw	fp,44(sp)
    6c5c:	df000b04 	addi	fp,sp,44
    6c60:	e13ff715 	stw	r4,-36(fp)
    6c64:	2805883a 	mov	r2,r5
    6c68:	e1bff515 	stw	r6,-44(fp)
    6c6c:	e0bff60d 	sth	r2,-40(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    6c70:	e03ffe15 	stw	zero,-8(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    6c74:	e0bff517 	ldw	r2,-44(fp)
    6c78:	1000021e 	bne	r2,zero,6c84 <OSQPend+0x34>
        return ((void *)0);
    6c7c:	0005883a 	mov	r2,zero
    6c80:	00009406 	br	6ed4 <OSQPend+0x284>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
    6c84:	e0bff717 	ldw	r2,-36(fp)
    6c88:	1000051e 	bne	r2,zero,6ca0 <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    6c8c:	e0bff517 	ldw	r2,-44(fp)
    6c90:	00c00104 	movi	r3,4
    6c94:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    6c98:	0005883a 	mov	r2,zero
    6c9c:	00008d06 	br	6ed4 <OSQPend+0x284>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
    6ca0:	e0bff717 	ldw	r2,-36(fp)
    6ca4:	10800003 	ldbu	r2,0(r2)
    6ca8:	10803fcc 	andi	r2,r2,255
    6cac:	108000a0 	cmpeqi	r2,r2,2
    6cb0:	1000051e 	bne	r2,zero,6cc8 <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    6cb4:	e0bff517 	ldw	r2,-44(fp)
    6cb8:	00c00044 	movi	r3,1
    6cbc:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    6cc0:	0005883a 	mov	r2,zero
    6cc4:	00008306 	br	6ed4 <OSQPend+0x284>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
    6cc8:	d0a6e343 	ldbu	r2,-25715(gp)
    6ccc:	10803fcc 	andi	r2,r2,255
    6cd0:	10000526 	beq	r2,zero,6ce8 <OSQPend+0x98>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
    6cd4:	e0bff517 	ldw	r2,-44(fp)
    6cd8:	00c00084 	movi	r3,2
    6cdc:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    6ce0:	0005883a 	mov	r2,zero
    6ce4:	00007b06 	br	6ed4 <OSQPend+0x284>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
    6ce8:	d0a6e383 	ldbu	r2,-25714(gp)
    6cec:	10803fcc 	andi	r2,r2,255
    6cf0:	10000526 	beq	r2,zero,6d08 <OSQPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
    6cf4:	e0bff517 	ldw	r2,-44(fp)
    6cf8:	00c00344 	movi	r3,13
    6cfc:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    6d00:	0005883a 	mov	r2,zero
    6d04:	00007306 	br	6ed4 <OSQPend+0x284>
  NIOS2_READ_STATUS (context);
    6d08:	0005303a 	rdctl	r2,status
    6d0c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6d10:	e0fffc17 	ldw	r3,-16(fp)
    6d14:	00bfff84 	movi	r2,-2
    6d18:	1884703a 	and	r2,r3,r2
    6d1c:	1001703a 	wrctl	status,r2
  return context;
    6d20:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    6d24:	e0bffe15 	stw	r2,-8(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
    6d28:	e0bff717 	ldw	r2,-36(fp)
    6d2c:	10800117 	ldw	r2,4(r2)
    6d30:	e0bffd15 	stw	r2,-12(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
    6d34:	e0bffd17 	ldw	r2,-12(fp)
    6d38:	1080058b 	ldhu	r2,22(r2)
    6d3c:	10bfffcc 	andi	r2,r2,65535
    6d40:	10001f26 	beq	r2,zero,6dc0 <OSQPend+0x170>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
    6d44:	e0bffd17 	ldw	r2,-12(fp)
    6d48:	10800417 	ldw	r2,16(r2)
    6d4c:	11000104 	addi	r4,r2,4
    6d50:	e0fffd17 	ldw	r3,-12(fp)
    6d54:	19000415 	stw	r4,16(r3)
    6d58:	10800017 	ldw	r2,0(r2)
    6d5c:	e0bfff15 	stw	r2,-4(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
    6d60:	e0bffd17 	ldw	r2,-12(fp)
    6d64:	1080058b 	ldhu	r2,22(r2)
    6d68:	10bfffc4 	addi	r2,r2,-1
    6d6c:	1007883a 	mov	r3,r2
    6d70:	e0bffd17 	ldw	r2,-12(fp)
    6d74:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
    6d78:	e0bffd17 	ldw	r2,-12(fp)
    6d7c:	10c00417 	ldw	r3,16(r2)
    6d80:	e0bffd17 	ldw	r2,-12(fp)
    6d84:	10800217 	ldw	r2,8(r2)
    6d88:	1880041e 	bne	r3,r2,6d9c <OSQPend+0x14c>
            pq->OSQOut = pq->OSQStart;
    6d8c:	e0bffd17 	ldw	r2,-12(fp)
    6d90:	10c00117 	ldw	r3,4(r2)
    6d94:	e0bffd17 	ldw	r2,-12(fp)
    6d98:	10c00415 	stw	r3,16(r2)
    6d9c:	e0bffe17 	ldw	r2,-8(fp)
    6da0:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    6da4:	e0bffb17 	ldw	r2,-20(fp)
    6da8:	1001703a 	wrctl	status,r2
}
    6dac:	0001883a 	nop
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
    6db0:	e0bff517 	ldw	r2,-44(fp)
    6db4:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
    6db8:	e0bfff17 	ldw	r2,-4(fp)
    6dbc:	00004506 	br	6ed4 <OSQPend+0x284>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
    6dc0:	d0a6e717 	ldw	r2,-25700(gp)
    6dc4:	10c00c03 	ldbu	r3,48(r2)
    6dc8:	d0a6e717 	ldw	r2,-25700(gp)
    6dcc:	18c00114 	ori	r3,r3,4
    6dd0:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    6dd4:	d0a6e717 	ldw	r2,-25700(gp)
    6dd8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
    6ddc:	d0a6e717 	ldw	r2,-25700(gp)
    6de0:	e0fff60b 	ldhu	r3,-40(fp)
    6de4:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
    6de8:	e13ff717 	ldw	r4,-36(fp)
    6dec:	00035d00 	call	35d0 <OS_EventTaskWait>
    6df0:	e0bffe17 	ldw	r2,-8(fp)
    6df4:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
    6df8:	e0bff917 	ldw	r2,-28(fp)
    6dfc:	1001703a 	wrctl	status,r2
}
    6e00:	0001883a 	nop
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
    6e04:	0003e7c0 	call	3e7c <OS_Sched>
  NIOS2_READ_STATUS (context);
    6e08:	0005303a 	rdctl	r2,status
    6e0c:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6e10:	e0fffa17 	ldw	r3,-24(fp)
    6e14:	00bfff84 	movi	r2,-2
    6e18:	1884703a 	and	r2,r3,r2
    6e1c:	1001703a 	wrctl	status,r2
  return context;
    6e20:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();
    6e24:	e0bffe15 	stw	r2,-8(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
    6e28:	d0a6e717 	ldw	r2,-25700(gp)
    6e2c:	10800c43 	ldbu	r2,49(r2)
    6e30:	10803fcc 	andi	r2,r2,255
    6e34:	10000326 	beq	r2,zero,6e44 <OSQPend+0x1f4>
    6e38:	108000a0 	cmpeqi	r2,r2,2
    6e3c:	1000071e 	bne	r2,zero,6e5c <OSQPend+0x20c>
    6e40:	00000b06 	br	6e70 <OSQPend+0x220>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
    6e44:	d0a6e717 	ldw	r2,-25700(gp)
    6e48:	10800917 	ldw	r2,36(r2)
    6e4c:	e0bfff15 	stw	r2,-4(fp)
            *perr =  OS_ERR_NONE;
    6e50:	e0bff517 	ldw	r2,-44(fp)
    6e54:	10000005 	stb	zero,0(r2)
             break;
    6e58:	00000e06 	br	6e94 <OSQPend+0x244>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
    6e5c:	e03fff15 	stw	zero,-4(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
    6e60:	e0bff517 	ldw	r2,-44(fp)
    6e64:	00c00384 	movi	r3,14
    6e68:	10c00005 	stb	r3,0(r2)
             break;
    6e6c:	00000906 	br	6e94 <OSQPend+0x244>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
    6e70:	d0a6e717 	ldw	r2,-25700(gp)
    6e74:	e17ff717 	ldw	r5,-36(fp)
    6e78:	1009883a 	mov	r4,r2
    6e7c:	00038200 	call	3820 <OS_EventTaskRemove>
             pmsg = (void *)0;
    6e80:	e03fff15 	stw	zero,-4(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
    6e84:	e0bff517 	ldw	r2,-44(fp)
    6e88:	00c00284 	movi	r3,10
    6e8c:	10c00005 	stb	r3,0(r2)
             break;
    6e90:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
    6e94:	d0a6e717 	ldw	r2,-25700(gp)
    6e98:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
    6e9c:	d0a6e717 	ldw	r2,-25700(gp)
    6ea0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
    6ea4:	d0a6e717 	ldw	r2,-25700(gp)
    6ea8:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    6eac:	d0a6e717 	ldw	r2,-25700(gp)
    6eb0:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
    6eb4:	d0a6e717 	ldw	r2,-25700(gp)
    6eb8:	10000915 	stw	zero,36(r2)
    6ebc:	e0bffe17 	ldw	r2,-8(fp)
    6ec0:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
    6ec4:	e0bff817 	ldw	r2,-32(fp)
    6ec8:	1001703a 	wrctl	status,r2
}
    6ecc:	0001883a 	nop
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
    6ed0:	e0bfff17 	ldw	r2,-4(fp)
}
    6ed4:	e037883a 	mov	sp,fp
    6ed8:	dfc00117 	ldw	ra,4(sp)
    6edc:	df000017 	ldw	fp,0(sp)
    6ee0:	dec00204 	addi	sp,sp,8
    6ee4:	f800283a 	ret

00006ee8 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    6ee8:	defff604 	addi	sp,sp,-40
    6eec:	dfc00915 	stw	ra,36(sp)
    6ef0:	df000815 	stw	fp,32(sp)
    6ef4:	df000804 	addi	fp,sp,32
    6ef8:	e13ffa15 	stw	r4,-24(fp)
    6efc:	2805883a 	mov	r2,r5
    6f00:	e1bff815 	stw	r6,-32(fp)
    6f04:	e0bff905 	stb	r2,-28(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    6f08:	e03ffe15 	stw	zero,-8(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    6f0c:	e0bff817 	ldw	r2,-32(fp)
    6f10:	1000021e 	bne	r2,zero,6f1c <OSQPendAbort+0x34>
        return (0);
    6f14:	0005883a 	mov	r2,zero
    6f18:	00004b06 	br	7048 <OSQPendAbort+0x160>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    6f1c:	e0bffa17 	ldw	r2,-24(fp)
    6f20:	1000051e 	bne	r2,zero,6f38 <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    6f24:	e0bff817 	ldw	r2,-32(fp)
    6f28:	00c00104 	movi	r3,4
    6f2c:	10c00005 	stb	r3,0(r2)
        return (0);
    6f30:	0005883a 	mov	r2,zero
    6f34:	00004406 	br	7048 <OSQPendAbort+0x160>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
    6f38:	e0bffa17 	ldw	r2,-24(fp)
    6f3c:	10800003 	ldbu	r2,0(r2)
    6f40:	10803fcc 	andi	r2,r2,255
    6f44:	108000a0 	cmpeqi	r2,r2,2
    6f48:	1000051e 	bne	r2,zero,6f60 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    6f4c:	e0bff817 	ldw	r2,-32(fp)
    6f50:	00c00044 	movi	r3,1
    6f54:	10c00005 	stb	r3,0(r2)
        return (0);
    6f58:	0005883a 	mov	r2,zero
    6f5c:	00003a06 	br	7048 <OSQPendAbort+0x160>
  NIOS2_READ_STATUS (context);
    6f60:	0005303a 	rdctl	r2,status
    6f64:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6f68:	e0fffd17 	ldw	r3,-12(fp)
    6f6c:	00bfff84 	movi	r2,-2
    6f70:	1884703a 	and	r2,r3,r2
    6f74:	1001703a 	wrctl	status,r2
  return context;
    6f78:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    6f7c:	e0bffe15 	stw	r2,-8(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
    6f80:	e0bffa17 	ldw	r2,-24(fp)
    6f84:	10800283 	ldbu	r2,10(r2)
    6f88:	10803fcc 	andi	r2,r2,255
    6f8c:	10002626 	beq	r2,zero,7028 <OSQPendAbort+0x140>
        nbr_tasks = 0;
    6f90:	e03fffc5 	stb	zero,-1(fp)
        switch (opt) {
    6f94:	e0bff903 	ldbu	r2,-28(fp)
    6f98:	10800058 	cmpnei	r2,r2,1
    6f9c:	10000e1e 	bne	r2,zero,6fd8 <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
    6fa0:	00000806 	br	6fc4 <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
    6fa4:	01c00084 	movi	r7,2
    6fa8:	01800104 	movi	r6,4
    6fac:	000b883a 	mov	r5,zero
    6fb0:	e13ffa17 	ldw	r4,-24(fp)
    6fb4:	00034480 	call	3448 <OS_EventTaskRdy>
                     nbr_tasks++;
    6fb8:	e0bfffc3 	ldbu	r2,-1(fp)
    6fbc:	10800044 	addi	r2,r2,1
    6fc0:	e0bfffc5 	stb	r2,-1(fp)
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
    6fc4:	e0bffa17 	ldw	r2,-24(fp)
    6fc8:	10800283 	ldbu	r2,10(r2)
    6fcc:	10803fcc 	andi	r2,r2,255
    6fd0:	103ff41e 	bne	r2,zero,6fa4 <OSQPendAbort+0xbc>
                 }
                 break;
    6fd4:	00000906 	br	6ffc <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
    6fd8:	01c00084 	movi	r7,2
    6fdc:	01800104 	movi	r6,4
    6fe0:	000b883a 	mov	r5,zero
    6fe4:	e13ffa17 	ldw	r4,-24(fp)
    6fe8:	00034480 	call	3448 <OS_EventTaskRdy>
                 nbr_tasks++;
    6fec:	e0bfffc3 	ldbu	r2,-1(fp)
    6ff0:	10800044 	addi	r2,r2,1
    6ff4:	e0bfffc5 	stb	r2,-1(fp)
                 break;
    6ff8:	0001883a 	nop
    6ffc:	e0bffe17 	ldw	r2,-8(fp)
    7000:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    7004:	e0bffc17 	ldw	r2,-16(fp)
    7008:	1001703a 	wrctl	status,r2
}
    700c:	0001883a 	nop
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
    7010:	0003e7c0 	call	3e7c <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
    7014:	e0bff817 	ldw	r2,-32(fp)
    7018:	00c00384 	movi	r3,14
    701c:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
    7020:	e0bfffc3 	ldbu	r2,-1(fp)
    7024:	00000806 	br	7048 <OSQPendAbort+0x160>
    7028:	e0bffe17 	ldw	r2,-8(fp)
    702c:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    7030:	e0bffb17 	ldw	r2,-20(fp)
    7034:	1001703a 	wrctl	status,r2
}
    7038:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    703c:	e0bff817 	ldw	r2,-32(fp)
    7040:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
    7044:	0005883a 	mov	r2,zero
}
    7048:	e037883a 	mov	sp,fp
    704c:	dfc00117 	ldw	ra,4(sp)
    7050:	df000017 	ldw	fp,0(sp)
    7054:	dec00204 	addi	sp,sp,8
    7058:	f800283a 	ret

0000705c <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
    705c:	defff604 	addi	sp,sp,-40
    7060:	dfc00915 	stw	ra,36(sp)
    7064:	df000815 	stw	fp,32(sp)
    7068:	df000804 	addi	fp,sp,32
    706c:	e13ff915 	stw	r4,-28(fp)
    7070:	e17ff815 	stw	r5,-32(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    7074:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
    7078:	e0bff917 	ldw	r2,-28(fp)
    707c:	1000021e 	bne	r2,zero,7088 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
    7080:	00800104 	movi	r2,4
    7084:	00004d06 	br	71bc <OSQPost+0x160>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
    7088:	e0bff917 	ldw	r2,-28(fp)
    708c:	10800003 	ldbu	r2,0(r2)
    7090:	10803fcc 	andi	r2,r2,255
    7094:	108000a0 	cmpeqi	r2,r2,2
    7098:	1000021e 	bne	r2,zero,70a4 <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
    709c:	00800044 	movi	r2,1
    70a0:	00004606 	br	71bc <OSQPost+0x160>
  NIOS2_READ_STATUS (context);
    70a4:	0005303a 	rdctl	r2,status
    70a8:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    70ac:	e0fffd17 	ldw	r3,-12(fp)
    70b0:	00bfff84 	movi	r2,-2
    70b4:	1884703a 	and	r2,r3,r2
    70b8:	1001703a 	wrctl	status,r2
  return context;
    70bc:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    70c0:	e0bfff15 	stw	r2,-4(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
    70c4:	e0bff917 	ldw	r2,-28(fp)
    70c8:	10800283 	ldbu	r2,10(r2)
    70cc:	10803fcc 	andi	r2,r2,255
    70d0:	10000d26 	beq	r2,zero,7108 <OSQPost+0xac>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    70d4:	000f883a 	mov	r7,zero
    70d8:	01800104 	movi	r6,4
    70dc:	e17ff817 	ldw	r5,-32(fp)
    70e0:	e13ff917 	ldw	r4,-28(fp)
    70e4:	00034480 	call	3448 <OS_EventTaskRdy>
    70e8:	e0bfff17 	ldw	r2,-4(fp)
    70ec:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    70f0:	e0bffc17 	ldw	r2,-16(fp)
    70f4:	1001703a 	wrctl	status,r2
}
    70f8:	0001883a 	nop
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
    70fc:	0003e7c0 	call	3e7c <OS_Sched>
        return (OS_ERR_NONE);
    7100:	0005883a 	mov	r2,zero
    7104:	00002d06 	br	71bc <OSQPost+0x160>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
    7108:	e0bff917 	ldw	r2,-28(fp)
    710c:	10800117 	ldw	r2,4(r2)
    7110:	e0bffe15 	stw	r2,-8(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
    7114:	e0bffe17 	ldw	r2,-8(fp)
    7118:	10c0058b 	ldhu	r3,22(r2)
    711c:	e0bffe17 	ldw	r2,-8(fp)
    7120:	1080050b 	ldhu	r2,20(r2)
    7124:	18ffffcc 	andi	r3,r3,65535
    7128:	10bfffcc 	andi	r2,r2,65535
    712c:	18800736 	bltu	r3,r2,714c <OSQPost+0xf0>
    7130:	e0bfff17 	ldw	r2,-4(fp)
    7134:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    7138:	e0bffb17 	ldw	r2,-20(fp)
    713c:	1001703a 	wrctl	status,r2
}
    7140:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
    7144:	00800784 	movi	r2,30
    7148:	00001c06 	br	71bc <OSQPost+0x160>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
    714c:	e0bffe17 	ldw	r2,-8(fp)
    7150:	10800317 	ldw	r2,12(r2)
    7154:	11000104 	addi	r4,r2,4
    7158:	e0fffe17 	ldw	r3,-8(fp)
    715c:	19000315 	stw	r4,12(r3)
    7160:	e0fff817 	ldw	r3,-32(fp)
    7164:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
    7168:	e0bffe17 	ldw	r2,-8(fp)
    716c:	1080058b 	ldhu	r2,22(r2)
    7170:	10800044 	addi	r2,r2,1
    7174:	1007883a 	mov	r3,r2
    7178:	e0bffe17 	ldw	r2,-8(fp)
    717c:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
    7180:	e0bffe17 	ldw	r2,-8(fp)
    7184:	10c00317 	ldw	r3,12(r2)
    7188:	e0bffe17 	ldw	r2,-8(fp)
    718c:	10800217 	ldw	r2,8(r2)
    7190:	1880041e 	bne	r3,r2,71a4 <OSQPost+0x148>
        pq->OSQIn = pq->OSQStart;
    7194:	e0bffe17 	ldw	r2,-8(fp)
    7198:	10c00117 	ldw	r3,4(r2)
    719c:	e0bffe17 	ldw	r2,-8(fp)
    71a0:	10c00315 	stw	r3,12(r2)
    71a4:	e0bfff17 	ldw	r2,-4(fp)
    71a8:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
    71ac:	e0bffa17 	ldw	r2,-24(fp)
    71b0:	1001703a 	wrctl	status,r2
}
    71b4:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    71b8:	0005883a 	mov	r2,zero
}
    71bc:	e037883a 	mov	sp,fp
    71c0:	dfc00117 	ldw	ra,4(sp)
    71c4:	df000017 	ldw	fp,0(sp)
    71c8:	dec00204 	addi	sp,sp,8
    71cc:	f800283a 	ret

000071d0 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
    71d0:	defff604 	addi	sp,sp,-40
    71d4:	dfc00915 	stw	ra,36(sp)
    71d8:	df000815 	stw	fp,32(sp)
    71dc:	df000804 	addi	fp,sp,32
    71e0:	e13ff915 	stw	r4,-28(fp)
    71e4:	e17ff815 	stw	r5,-32(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    71e8:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    71ec:	e0bff917 	ldw	r2,-28(fp)
    71f0:	1000021e 	bne	r2,zero,71fc <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
    71f4:	00800104 	movi	r2,4
    71f8:	00004f06 	br	7338 <OSQPostFront+0x168>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
    71fc:	e0bff917 	ldw	r2,-28(fp)
    7200:	10800003 	ldbu	r2,0(r2)
    7204:	10803fcc 	andi	r2,r2,255
    7208:	108000a0 	cmpeqi	r2,r2,2
    720c:	1000021e 	bne	r2,zero,7218 <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
    7210:	00800044 	movi	r2,1
    7214:	00004806 	br	7338 <OSQPostFront+0x168>
  NIOS2_READ_STATUS (context);
    7218:	0005303a 	rdctl	r2,status
    721c:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7220:	e0fffd17 	ldw	r3,-12(fp)
    7224:	00bfff84 	movi	r2,-2
    7228:	1884703a 	and	r2,r3,r2
    722c:	1001703a 	wrctl	status,r2
  return context;
    7230:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    7234:	e0bfff15 	stw	r2,-4(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
    7238:	e0bff917 	ldw	r2,-28(fp)
    723c:	10800283 	ldbu	r2,10(r2)
    7240:	10803fcc 	andi	r2,r2,255
    7244:	10000d26 	beq	r2,zero,727c <OSQPostFront+0xac>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    7248:	000f883a 	mov	r7,zero
    724c:	01800104 	movi	r6,4
    7250:	e17ff817 	ldw	r5,-32(fp)
    7254:	e13ff917 	ldw	r4,-28(fp)
    7258:	00034480 	call	3448 <OS_EventTaskRdy>
    725c:	e0bfff17 	ldw	r2,-4(fp)
    7260:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    7264:	e0bffc17 	ldw	r2,-16(fp)
    7268:	1001703a 	wrctl	status,r2
}
    726c:	0001883a 	nop
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
    7270:	0003e7c0 	call	3e7c <OS_Sched>
        return (OS_ERR_NONE);
    7274:	0005883a 	mov	r2,zero
    7278:	00002f06 	br	7338 <OSQPostFront+0x168>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
    727c:	e0bff917 	ldw	r2,-28(fp)
    7280:	10800117 	ldw	r2,4(r2)
    7284:	e0bffe15 	stw	r2,-8(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
    7288:	e0bffe17 	ldw	r2,-8(fp)
    728c:	10c0058b 	ldhu	r3,22(r2)
    7290:	e0bffe17 	ldw	r2,-8(fp)
    7294:	1080050b 	ldhu	r2,20(r2)
    7298:	18ffffcc 	andi	r3,r3,65535
    729c:	10bfffcc 	andi	r2,r2,65535
    72a0:	18800736 	bltu	r3,r2,72c0 <OSQPostFront+0xf0>
    72a4:	e0bfff17 	ldw	r2,-4(fp)
    72a8:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    72ac:	e0bffb17 	ldw	r2,-20(fp)
    72b0:	1001703a 	wrctl	status,r2
}
    72b4:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
    72b8:	00800784 	movi	r2,30
    72bc:	00001e06 	br	7338 <OSQPostFront+0x168>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
    72c0:	e0bffe17 	ldw	r2,-8(fp)
    72c4:	10c00417 	ldw	r3,16(r2)
    72c8:	e0bffe17 	ldw	r2,-8(fp)
    72cc:	10800117 	ldw	r2,4(r2)
    72d0:	1880041e 	bne	r3,r2,72e4 <OSQPostFront+0x114>
        pq->OSQOut = pq->OSQEnd;
    72d4:	e0bffe17 	ldw	r2,-8(fp)
    72d8:	10c00217 	ldw	r3,8(r2)
    72dc:	e0bffe17 	ldw	r2,-8(fp)
    72e0:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
    72e4:	e0bffe17 	ldw	r2,-8(fp)
    72e8:	10800417 	ldw	r2,16(r2)
    72ec:	10ffff04 	addi	r3,r2,-4
    72f0:	e0bffe17 	ldw	r2,-8(fp)
    72f4:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
    72f8:	e0bffe17 	ldw	r2,-8(fp)
    72fc:	10800417 	ldw	r2,16(r2)
    7300:	e0fff817 	ldw	r3,-32(fp)
    7304:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
    7308:	e0bffe17 	ldw	r2,-8(fp)
    730c:	1080058b 	ldhu	r2,22(r2)
    7310:	10800044 	addi	r2,r2,1
    7314:	1007883a 	mov	r3,r2
    7318:	e0bffe17 	ldw	r2,-8(fp)
    731c:	10c0058d 	sth	r3,22(r2)
    7320:	e0bfff17 	ldw	r2,-4(fp)
    7324:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
    7328:	e0bffa17 	ldw	r2,-24(fp)
    732c:	1001703a 	wrctl	status,r2
}
    7330:	0001883a 	nop
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    7334:	0005883a 	mov	r2,zero
}
    7338:	e037883a 	mov	sp,fp
    733c:	dfc00117 	ldw	ra,4(sp)
    7340:	df000017 	ldw	fp,0(sp)
    7344:	dec00204 	addi	sp,sp,8
    7348:	f800283a 	ret

0000734c <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
    734c:	defff504 	addi	sp,sp,-44
    7350:	dfc00a15 	stw	ra,40(sp)
    7354:	df000915 	stw	fp,36(sp)
    7358:	df000904 	addi	fp,sp,36
    735c:	e13ff915 	stw	r4,-28(fp)
    7360:	e17ff815 	stw	r5,-32(fp)
    7364:	3005883a 	mov	r2,r6
    7368:	e0bff705 	stb	r2,-36(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    736c:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    7370:	e0bff917 	ldw	r2,-28(fp)
    7374:	1000021e 	bne	r2,zero,7380 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
    7378:	00800104 	movi	r2,4
    737c:	00007406 	br	7550 <OSQPostOpt+0x204>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
    7380:	e0bff917 	ldw	r2,-28(fp)
    7384:	10800003 	ldbu	r2,0(r2)
    7388:	10803fcc 	andi	r2,r2,255
    738c:	108000a0 	cmpeqi	r2,r2,2
    7390:	1000021e 	bne	r2,zero,739c <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
    7394:	00800044 	movi	r2,1
    7398:	00006d06 	br	7550 <OSQPostOpt+0x204>
  NIOS2_READ_STATUS (context);
    739c:	0005303a 	rdctl	r2,status
    73a0:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    73a4:	e0fffd17 	ldw	r3,-12(fp)
    73a8:	00bfff84 	movi	r2,-2
    73ac:	1884703a 	and	r2,r3,r2
    73b0:	1001703a 	wrctl	status,r2
  return context;
    73b4:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    73b8:	e0bfff15 	stw	r2,-4(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
    73bc:	e0bff917 	ldw	r2,-28(fp)
    73c0:	10800283 	ldbu	r2,10(r2)
    73c4:	10803fcc 	andi	r2,r2,255
    73c8:	10001e26 	beq	r2,zero,7444 <OSQPostOpt+0xf8>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
    73cc:	e0bff703 	ldbu	r2,-36(fp)
    73d0:	1080004c 	andi	r2,r2,1
    73d4:	10000b26 	beq	r2,zero,7404 <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
    73d8:	00000506 	br	73f0 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    73dc:	000f883a 	mov	r7,zero
    73e0:	01800104 	movi	r6,4
    73e4:	e17ff817 	ldw	r5,-32(fp)
    73e8:	e13ff917 	ldw	r4,-28(fp)
    73ec:	00034480 	call	3448 <OS_EventTaskRdy>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
    73f0:	e0bff917 	ldw	r2,-28(fp)
    73f4:	10800283 	ldbu	r2,10(r2)
    73f8:	10803fcc 	andi	r2,r2,255
    73fc:	103ff71e 	bne	r2,zero,73dc <OSQPostOpt+0x90>
    7400:	00000506 	br	7418 <OSQPostOpt+0xcc>
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    7404:	000f883a 	mov	r7,zero
    7408:	01800104 	movi	r6,4
    740c:	e17ff817 	ldw	r5,-32(fp)
    7410:	e13ff917 	ldw	r4,-28(fp)
    7414:	00034480 	call	3448 <OS_EventTaskRdy>
    7418:	e0bfff17 	ldw	r2,-4(fp)
    741c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    7420:	e0bffc17 	ldw	r2,-16(fp)
    7424:	1001703a 	wrctl	status,r2
}
    7428:	0001883a 	nop
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
    742c:	e0bff703 	ldbu	r2,-36(fp)
    7430:	1080010c 	andi	r2,r2,4
    7434:	1000011e 	bne	r2,zero,743c <OSQPostOpt+0xf0>
            OS_Sched();                               /* Find highest priority task ready to run       */
    7438:	0003e7c0 	call	3e7c <OS_Sched>
        }
        return (OS_ERR_NONE);
    743c:	0005883a 	mov	r2,zero
    7440:	00004306 	br	7550 <OSQPostOpt+0x204>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
    7444:	e0bff917 	ldw	r2,-28(fp)
    7448:	10800117 	ldw	r2,4(r2)
    744c:	e0bffe15 	stw	r2,-8(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
    7450:	e0bffe17 	ldw	r2,-8(fp)
    7454:	10c0058b 	ldhu	r3,22(r2)
    7458:	e0bffe17 	ldw	r2,-8(fp)
    745c:	1080050b 	ldhu	r2,20(r2)
    7460:	18ffffcc 	andi	r3,r3,65535
    7464:	10bfffcc 	andi	r2,r2,65535
    7468:	18800736 	bltu	r3,r2,7488 <OSQPostOpt+0x13c>
    746c:	e0bfff17 	ldw	r2,-4(fp)
    7470:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    7474:	e0bffb17 	ldw	r2,-20(fp)
    7478:	1001703a 	wrctl	status,r2
}
    747c:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
    7480:	00800784 	movi	r2,30
    7484:	00003206 	br	7550 <OSQPostOpt+0x204>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
    7488:	e0bff703 	ldbu	r2,-36(fp)
    748c:	1080008c 	andi	r2,r2,2
    7490:	10001326 	beq	r2,zero,74e0 <OSQPostOpt+0x194>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
    7494:	e0bffe17 	ldw	r2,-8(fp)
    7498:	10c00417 	ldw	r3,16(r2)
    749c:	e0bffe17 	ldw	r2,-8(fp)
    74a0:	10800117 	ldw	r2,4(r2)
    74a4:	1880041e 	bne	r3,r2,74b8 <OSQPostOpt+0x16c>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
    74a8:	e0bffe17 	ldw	r2,-8(fp)
    74ac:	10c00217 	ldw	r3,8(r2)
    74b0:	e0bffe17 	ldw	r2,-8(fp)
    74b4:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
    74b8:	e0bffe17 	ldw	r2,-8(fp)
    74bc:	10800417 	ldw	r2,16(r2)
    74c0:	10ffff04 	addi	r3,r2,-4
    74c4:	e0bffe17 	ldw	r2,-8(fp)
    74c8:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
    74cc:	e0bffe17 	ldw	r2,-8(fp)
    74d0:	10800417 	ldw	r2,16(r2)
    74d4:	e0fff817 	ldw	r3,-32(fp)
    74d8:	10c00015 	stw	r3,0(r2)
    74dc:	00001006 	br	7520 <OSQPostOpt+0x1d4>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
    74e0:	e0bffe17 	ldw	r2,-8(fp)
    74e4:	10800317 	ldw	r2,12(r2)
    74e8:	11000104 	addi	r4,r2,4
    74ec:	e0fffe17 	ldw	r3,-8(fp)
    74f0:	19000315 	stw	r4,12(r3)
    74f4:	e0fff817 	ldw	r3,-32(fp)
    74f8:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
    74fc:	e0bffe17 	ldw	r2,-8(fp)
    7500:	10c00317 	ldw	r3,12(r2)
    7504:	e0bffe17 	ldw	r2,-8(fp)
    7508:	10800217 	ldw	r2,8(r2)
    750c:	1880041e 	bne	r3,r2,7520 <OSQPostOpt+0x1d4>
            pq->OSQIn = pq->OSQStart;
    7510:	e0bffe17 	ldw	r2,-8(fp)
    7514:	10c00117 	ldw	r3,4(r2)
    7518:	e0bffe17 	ldw	r2,-8(fp)
    751c:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
    7520:	e0bffe17 	ldw	r2,-8(fp)
    7524:	1080058b 	ldhu	r2,22(r2)
    7528:	10800044 	addi	r2,r2,1
    752c:	1007883a 	mov	r3,r2
    7530:	e0bffe17 	ldw	r2,-8(fp)
    7534:	10c0058d 	sth	r3,22(r2)
    7538:	e0bfff17 	ldw	r2,-4(fp)
    753c:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
    7540:	e0bffa17 	ldw	r2,-24(fp)
    7544:	1001703a 	wrctl	status,r2
}
    7548:	0001883a 	nop
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    754c:	0005883a 	mov	r2,zero
}
    7550:	e037883a 	mov	sp,fp
    7554:	dfc00117 	ldw	ra,4(sp)
    7558:	df000017 	ldw	fp,0(sp)
    755c:	dec00204 	addi	sp,sp,8
    7560:	f800283a 	ret

00007564 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
    7564:	defff604 	addi	sp,sp,-40
    7568:	df000915 	stw	fp,36(sp)
    756c:	df000904 	addi	fp,sp,36
    7570:	e13ff815 	stw	r4,-32(fp)
    7574:	e17ff715 	stw	r5,-36(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    7578:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
    757c:	e0bff817 	ldw	r2,-32(fp)
    7580:	1000021e 	bne	r2,zero,758c <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
    7584:	00800104 	movi	r2,4
    7588:	00004a06 	br	76b4 <OSQQuery+0x150>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
    758c:	e0bff717 	ldw	r2,-36(fp)
    7590:	1000021e 	bne	r2,zero,759c <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
    7594:	00800244 	movi	r2,9
    7598:	00004606 	br	76b4 <OSQQuery+0x150>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
    759c:	e0bff817 	ldw	r2,-32(fp)
    75a0:	10800003 	ldbu	r2,0(r2)
    75a4:	10803fcc 	andi	r2,r2,255
    75a8:	108000a0 	cmpeqi	r2,r2,2
    75ac:	1000021e 	bne	r2,zero,75b8 <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
    75b0:	00800044 	movi	r2,1
    75b4:	00003f06 	br	76b4 <OSQQuery+0x150>
  NIOS2_READ_STATUS (context);
    75b8:	0005303a 	rdctl	r2,status
    75bc:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    75c0:	e0fffa17 	ldw	r3,-24(fp)
    75c4:	00bfff84 	movi	r2,-2
    75c8:	1884703a 	and	r2,r3,r2
    75cc:	1001703a 	wrctl	status,r2
  return context;
    75d0:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    75d4:	e0bffc15 	stw	r2,-16(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    75d8:	e0bff817 	ldw	r2,-32(fp)
    75dc:	10c00283 	ldbu	r3,10(r2)
    75e0:	e0bff717 	ldw	r2,-36(fp)
    75e4:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
    75e8:	e0bff817 	ldw	r2,-32(fp)
    75ec:	108002c4 	addi	r2,r2,11
    75f0:	e0bffe15 	stw	r2,-8(fp)
    pdest                = &p_q_data->OSEventTbl[0];
    75f4:	e0bff717 	ldw	r2,-36(fp)
    75f8:	10800204 	addi	r2,r2,8
    75fc:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    7600:	e03fffc5 	stb	zero,-1(fp)
    7604:	00000b06 	br	7634 <OSQQuery+0xd0>
        *pdest++ = *psrc++;
    7608:	e0fffe17 	ldw	r3,-8(fp)
    760c:	18800044 	addi	r2,r3,1
    7610:	e0bffe15 	stw	r2,-8(fp)
    7614:	e0bffd17 	ldw	r2,-12(fp)
    7618:	11000044 	addi	r4,r2,1
    761c:	e13ffd15 	stw	r4,-12(fp)
    7620:	18c00003 	ldbu	r3,0(r3)
    7624:	10c00005 	stb	r3,0(r2)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    7628:	e0bfffc3 	ldbu	r2,-1(fp)
    762c:	10800044 	addi	r2,r2,1
    7630:	e0bfffc5 	stb	r2,-1(fp)
    7634:	e0bfffc3 	ldbu	r2,-1(fp)
    7638:	108000f0 	cmpltui	r2,r2,3
    763c:	103ff21e 	bne	r2,zero,7608 <OSQQuery+0xa4>
    }
    pq = (OS_Q *)pevent->OSEventPtr;
    7640:	e0bff817 	ldw	r2,-32(fp)
    7644:	10800117 	ldw	r2,4(r2)
    7648:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {
    764c:	e0bffb17 	ldw	r2,-20(fp)
    7650:	1080058b 	ldhu	r2,22(r2)
    7654:	10bfffcc 	andi	r2,r2,65535
    7658:	10000626 	beq	r2,zero,7674 <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
    765c:	e0bffb17 	ldw	r2,-20(fp)
    7660:	10800417 	ldw	r2,16(r2)
    7664:	10c00017 	ldw	r3,0(r2)
    7668:	e0bff717 	ldw	r2,-36(fp)
    766c:	10c00015 	stw	r3,0(r2)
    7670:	00000206 	br	767c <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
    7674:	e0bff717 	ldw	r2,-36(fp)
    7678:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
    767c:	e0bffb17 	ldw	r2,-20(fp)
    7680:	10c0058b 	ldhu	r3,22(r2)
    7684:	e0bff717 	ldw	r2,-36(fp)
    7688:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
    768c:	e0bffb17 	ldw	r2,-20(fp)
    7690:	10c0050b 	ldhu	r3,20(r2)
    7694:	e0bff717 	ldw	r2,-36(fp)
    7698:	10c0018d 	sth	r3,6(r2)
    769c:	e0bffc17 	ldw	r2,-16(fp)
    76a0:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
    76a4:	e0bff917 	ldw	r2,-28(fp)
    76a8:	1001703a 	wrctl	status,r2
}
    76ac:	0001883a 	nop
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    76b0:	0005883a 	mov	r2,zero
}
    76b4:	e037883a 	mov	sp,fp
    76b8:	df000017 	ldw	fp,0(sp)
    76bc:	dec00104 	addi	sp,sp,4
    76c0:	f800283a 	ret

000076c4 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
    76c4:	defffb04 	addi	sp,sp,-20
    76c8:	dfc00415 	stw	ra,16(sp)
    76cc:	df000315 	stw	fp,12(sp)
    76d0:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    76d4:	01407804 	movi	r5,480
    76d8:	010000b4 	movhi	r4,2
    76dc:	212a1104 	addi	r4,r4,-22460
    76e0:	0003db80 	call	3db8 <OS_MemClr>
    pq1 = &OSQTbl[0];
    76e4:	008000b4 	movhi	r2,2
    76e8:	10aa1104 	addi	r2,r2,-22460
    76ec:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
    76f0:	008000b4 	movhi	r2,2
    76f4:	10aa1704 	addi	r2,r2,-22436
    76f8:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
    76fc:	e03fff8d 	sth	zero,-2(fp)
    7700:	00000c06 	br	7734 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
    7704:	e0bffe17 	ldw	r2,-8(fp)
    7708:	e0fffd17 	ldw	r3,-12(fp)
    770c:	10c00015 	stw	r3,0(r2)
        pq1++;
    7710:	e0bffe17 	ldw	r2,-8(fp)
    7714:	10800604 	addi	r2,r2,24
    7718:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
    771c:	e0bffd17 	ldw	r2,-12(fp)
    7720:	10800604 	addi	r2,r2,24
    7724:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
    7728:	e0bfff8b 	ldhu	r2,-2(fp)
    772c:	10800044 	addi	r2,r2,1
    7730:	e0bfff8d 	sth	r2,-2(fp)
    7734:	e0bfff8b 	ldhu	r2,-2(fp)
    7738:	108004f0 	cmpltui	r2,r2,19
    773c:	103ff11e 	bne	r2,zero,7704 <OS_QInit+0x40>
    }
    pq1->OSQPtr = (OS_Q *)0;
    7740:	e0bffe17 	ldw	r2,-8(fp)
    7744:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
    7748:	008000b4 	movhi	r2,2
    774c:	10aa1104 	addi	r2,r2,-22460
    7750:	d0a6ed15 	stw	r2,-25676(gp)
#endif
}
    7754:	0001883a 	nop
    7758:	e037883a 	mov	sp,fp
    775c:	dfc00117 	ldw	ra,4(sp)
    7760:	df000017 	ldw	fp,0(sp)
    7764:	dec00204 	addi	sp,sp,8
    7768:	f800283a 	ret

0000776c <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
    776c:	defffa04 	addi	sp,sp,-24
    7770:	df000515 	stw	fp,20(sp)
    7774:	df000504 	addi	fp,sp,20
    7778:	e13ffb15 	stw	r4,-20(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    777c:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    7780:	e0bffb17 	ldw	r2,-20(fp)
    7784:	1000021e 	bne	r2,zero,7790 <OSSemAccept+0x24>
        return (0);
    7788:	0005883a 	mov	r2,zero
    778c:	00002006 	br	7810 <OSSemAccept+0xa4>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    7790:	e0bffb17 	ldw	r2,-20(fp)
    7794:	10800003 	ldbu	r2,0(r2)
    7798:	10803fcc 	andi	r2,r2,255
    779c:	108000e0 	cmpeqi	r2,r2,3
    77a0:	1000021e 	bne	r2,zero,77ac <OSSemAccept+0x40>
        return (0);
    77a4:	0005883a 	mov	r2,zero
    77a8:	00001906 	br	7810 <OSSemAccept+0xa4>
  NIOS2_READ_STATUS (context);
    77ac:	0005303a 	rdctl	r2,status
    77b0:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    77b4:	e0fffd17 	ldw	r3,-12(fp)
    77b8:	00bfff84 	movi	r2,-2
    77bc:	1884703a 	and	r2,r3,r2
    77c0:	1001703a 	wrctl	status,r2
  return context;
    77c4:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    77c8:	e0bfff15 	stw	r2,-4(fp)
    cnt = pevent->OSEventCnt;
    77cc:	e0bffb17 	ldw	r2,-20(fp)
    77d0:	1080020b 	ldhu	r2,8(r2)
    77d4:	e0bffe8d 	sth	r2,-6(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
    77d8:	e0bffe8b 	ldhu	r2,-6(fp)
    77dc:	10000626 	beq	r2,zero,77f8 <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
    77e0:	e0bffb17 	ldw	r2,-20(fp)
    77e4:	1080020b 	ldhu	r2,8(r2)
    77e8:	10bfffc4 	addi	r2,r2,-1
    77ec:	1007883a 	mov	r3,r2
    77f0:	e0bffb17 	ldw	r2,-20(fp)
    77f4:	10c0020d 	sth	r3,8(r2)
    77f8:	e0bfff17 	ldw	r2,-4(fp)
    77fc:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    7800:	e0bffc17 	ldw	r2,-16(fp)
    7804:	1001703a 	wrctl	status,r2
}
    7808:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
    780c:	e0bffe8b 	ldhu	r2,-6(fp)
}
    7810:	e037883a 	mov	sp,fp
    7814:	df000017 	ldw	fp,0(sp)
    7818:	dec00104 	addi	sp,sp,4
    781c:	f800283a 	ret

00007820 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
    7820:	defff904 	addi	sp,sp,-28
    7824:	dfc00615 	stw	ra,24(sp)
    7828:	df000515 	stw	fp,20(sp)
    782c:	df000504 	addi	fp,sp,20
    7830:	2005883a 	mov	r2,r4
    7834:	e0bffb0d 	sth	r2,-20(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    7838:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    783c:	d0a6e343 	ldbu	r2,-25715(gp)
    7840:	10803fcc 	andi	r2,r2,255
    7844:	10000226 	beq	r2,zero,7850 <OSSemCreate+0x30>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
    7848:	0005883a 	mov	r2,zero
    784c:	00002606 	br	78e8 <OSSemCreate+0xc8>
  NIOS2_READ_STATUS (context);
    7850:	0005303a 	rdctl	r2,status
    7854:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7858:	e0fffd17 	ldw	r3,-12(fp)
    785c:	00bfff84 	movi	r2,-2
    7860:	1884703a 	and	r2,r3,r2
    7864:	1001703a 	wrctl	status,r2
  return context;
    7868:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    786c:	e0bfff15 	stw	r2,-4(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
    7870:	d0a6de17 	ldw	r2,-25736(gp)
    7874:	e0bffe15 	stw	r2,-8(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
    7878:	d0a6de17 	ldw	r2,-25736(gp)
    787c:	10000326 	beq	r2,zero,788c <OSSemCreate+0x6c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
    7880:	d0a6de17 	ldw	r2,-25736(gp)
    7884:	10800117 	ldw	r2,4(r2)
    7888:	d0a6de15 	stw	r2,-25736(gp)
    788c:	e0bfff17 	ldw	r2,-4(fp)
    7890:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    7894:	e0bffc17 	ldw	r2,-16(fp)
    7898:	1001703a 	wrctl	status,r2
}
    789c:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
    78a0:	e0bffe17 	ldw	r2,-8(fp)
    78a4:	10000f26 	beq	r2,zero,78e4 <OSSemCreate+0xc4>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
    78a8:	e0bffe17 	ldw	r2,-8(fp)
    78ac:	00c000c4 	movi	r3,3
    78b0:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
    78b4:	e0bffe17 	ldw	r2,-8(fp)
    78b8:	e0fffb0b 	ldhu	r3,-20(fp)
    78bc:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
    78c0:	e0bffe17 	ldw	r2,-8(fp)
    78c4:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
    78c8:	e0bffe17 	ldw	r2,-8(fp)
    78cc:	00c00fc4 	movi	r3,63
    78d0:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
    78d4:	e0bffe17 	ldw	r2,-8(fp)
    78d8:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
    78dc:	e13ffe17 	ldw	r4,-8(fp)
    78e0:	00039cc0 	call	39cc <OS_EventWaitListInit>
    }
    return (pevent);
    78e4:	e0bffe17 	ldw	r2,-8(fp)
}
    78e8:	e037883a 	mov	sp,fp
    78ec:	dfc00117 	ldw	ra,4(sp)
    78f0:	df000017 	ldw	fp,0(sp)
    78f4:	dec00204 	addi	sp,sp,8
    78f8:	f800283a 	ret

000078fc <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    78fc:	defff304 	addi	sp,sp,-52
    7900:	dfc00c15 	stw	ra,48(sp)
    7904:	df000b15 	stw	fp,44(sp)
    7908:	df000b04 	addi	fp,sp,44
    790c:	e13ff715 	stw	r4,-36(fp)
    7910:	2805883a 	mov	r2,r5
    7914:	e1bff515 	stw	r6,-44(fp)
    7918:	e0bff605 	stb	r2,-40(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    791c:	e03ffd15 	stw	zero,-12(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    7920:	e0bff517 	ldw	r2,-44(fp)
    7924:	1000021e 	bne	r2,zero,7930 <OSSemDel+0x34>
        return (pevent);
    7928:	e0bff717 	ldw	r2,-36(fp)
    792c:	00008206 	br	7b38 <OSSemDel+0x23c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    7930:	e0bff717 	ldw	r2,-36(fp)
    7934:	1000051e 	bne	r2,zero,794c <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    7938:	e0bff517 	ldw	r2,-44(fp)
    793c:	00c00104 	movi	r3,4
    7940:	10c00005 	stb	r3,0(r2)
        return (pevent);
    7944:	e0bff717 	ldw	r2,-36(fp)
    7948:	00007b06 	br	7b38 <OSSemDel+0x23c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
    794c:	e0bff717 	ldw	r2,-36(fp)
    7950:	10800003 	ldbu	r2,0(r2)
    7954:	10803fcc 	andi	r2,r2,255
    7958:	108000e0 	cmpeqi	r2,r2,3
    795c:	1000051e 	bne	r2,zero,7974 <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    7960:	e0bff517 	ldw	r2,-44(fp)
    7964:	00c00044 	movi	r3,1
    7968:	10c00005 	stb	r3,0(r2)
        return (pevent);
    796c:	e0bff717 	ldw	r2,-36(fp)
    7970:	00007106 	br	7b38 <OSSemDel+0x23c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    7974:	d0a6e343 	ldbu	r2,-25715(gp)
    7978:	10803fcc 	andi	r2,r2,255
    797c:	10000526 	beq	r2,zero,7994 <OSSemDel+0x98>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
    7980:	e0bff517 	ldw	r2,-44(fp)
    7984:	00c003c4 	movi	r3,15
    7988:	10c00005 	stb	r3,0(r2)
        return (pevent);
    798c:	e0bff717 	ldw	r2,-36(fp)
    7990:	00006906 	br	7b38 <OSSemDel+0x23c>
  NIOS2_READ_STATUS (context);
    7994:	0005303a 	rdctl	r2,status
    7998:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    799c:	e0fffc17 	ldw	r3,-16(fp)
    79a0:	00bfff84 	movi	r2,-2
    79a4:	1884703a 	and	r2,r3,r2
    79a8:	1001703a 	wrctl	status,r2
  return context;
    79ac:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    79b0:	e0bffd15 	stw	r2,-12(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
    79b4:	e0bff717 	ldw	r2,-36(fp)
    79b8:	10800283 	ldbu	r2,10(r2)
    79bc:	10803fcc 	andi	r2,r2,255
    79c0:	10000326 	beq	r2,zero,79d0 <OSSemDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    79c4:	00800044 	movi	r2,1
    79c8:	e0bfffc5 	stb	r2,-1(fp)
    79cc:	00000106 	br	79d4 <OSSemDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    79d0:	e03fffc5 	stb	zero,-1(fp)
    }
    switch (opt) {
    79d4:	e0bff603 	ldbu	r2,-40(fp)
    79d8:	10000326 	beq	r2,zero,79e8 <OSSemDel+0xec>
    79dc:	10800060 	cmpeqi	r2,r2,1
    79e0:	10002a1e 	bne	r2,zero,7a8c <OSSemDel+0x190>
    79e4:	00004806 	br	7b08 <OSSemDel+0x20c>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
    79e8:	e0bfffc3 	ldbu	r2,-1(fp)
    79ec:	1000171e 	bne	r2,zero,7a4c <OSSemDel+0x150>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
    79f0:	e0bff717 	ldw	r2,-36(fp)
    79f4:	00c00fc4 	movi	r3,63
    79f8:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
    79fc:	e0bff717 	ldw	r2,-36(fp)
    7a00:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    7a04:	e0bff717 	ldw	r2,-36(fp)
    7a08:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
    7a0c:	d0e6de17 	ldw	r3,-25736(gp)
    7a10:	e0bff717 	ldw	r2,-36(fp)
    7a14:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
    7a18:	e0bff717 	ldw	r2,-36(fp)
    7a1c:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
    7a20:	e0bff717 	ldw	r2,-36(fp)
    7a24:	d0a6de15 	stw	r2,-25736(gp)
    7a28:	e0bffd17 	ldw	r2,-12(fp)
    7a2c:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    7a30:	e0bffb17 	ldw	r2,-20(fp)
    7a34:	1001703a 	wrctl	status,r2
}
    7a38:	0001883a 	nop
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
    7a3c:	e0bff517 	ldw	r2,-44(fp)
    7a40:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
    7a44:	e03ffe15 	stw	zero,-8(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
    7a48:	00003a06 	br	7b34 <OSSemDel+0x238>
    7a4c:	e0bffd17 	ldw	r2,-12(fp)
    7a50:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
    7a54:	e0bffa17 	ldw	r2,-24(fp)
    7a58:	1001703a 	wrctl	status,r2
}
    7a5c:	0001883a 	nop
                 *perr                  = OS_ERR_TASK_WAITING;
    7a60:	e0bff517 	ldw	r2,-44(fp)
    7a64:	00c01244 	movi	r3,73
    7a68:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
    7a6c:	e0bff717 	ldw	r2,-36(fp)
    7a70:	e0bffe15 	stw	r2,-8(fp)
             break;
    7a74:	00002f06 	br	7b34 <OSSemDel+0x238>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
    7a78:	000f883a 	mov	r7,zero
    7a7c:	01800044 	movi	r6,1
    7a80:	000b883a 	mov	r5,zero
    7a84:	e13ff717 	ldw	r4,-36(fp)
    7a88:	00034480 	call	3448 <OS_EventTaskRdy>
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
    7a8c:	e0bff717 	ldw	r2,-36(fp)
    7a90:	10800283 	ldbu	r2,10(r2)
    7a94:	10803fcc 	andi	r2,r2,255
    7a98:	103ff71e 	bne	r2,zero,7a78 <OSSemDel+0x17c>
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
    7a9c:	e0bff717 	ldw	r2,-36(fp)
    7aa0:	00c00fc4 	movi	r3,63
    7aa4:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
    7aa8:	e0bff717 	ldw	r2,-36(fp)
    7aac:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    7ab0:	e0bff717 	ldw	r2,-36(fp)
    7ab4:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
    7ab8:	d0e6de17 	ldw	r3,-25736(gp)
    7abc:	e0bff717 	ldw	r2,-36(fp)
    7ac0:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
    7ac4:	e0bff717 	ldw	r2,-36(fp)
    7ac8:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
    7acc:	e0bff717 	ldw	r2,-36(fp)
    7ad0:	d0a6de15 	stw	r2,-25736(gp)
    7ad4:	e0bffd17 	ldw	r2,-12(fp)
    7ad8:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
    7adc:	e0bff917 	ldw	r2,-28(fp)
    7ae0:	1001703a 	wrctl	status,r2
}
    7ae4:	0001883a 	nop
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
    7ae8:	e0bfffc3 	ldbu	r2,-1(fp)
    7aec:	10800058 	cmpnei	r2,r2,1
    7af0:	1000011e 	bne	r2,zero,7af8 <OSSemDel+0x1fc>
                 OS_Sched();                               /* Find highest priority task ready to run  */
    7af4:	0003e7c0 	call	3e7c <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
    7af8:	e0bff517 	ldw	r2,-44(fp)
    7afc:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
    7b00:	e03ffe15 	stw	zero,-8(fp)
             break;
    7b04:	00000b06 	br	7b34 <OSSemDel+0x238>
    7b08:	e0bffd17 	ldw	r2,-12(fp)
    7b0c:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
    7b10:	e0bff817 	ldw	r2,-32(fp)
    7b14:	1001703a 	wrctl	status,r2
}
    7b18:	0001883a 	nop

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
    7b1c:	e0bff517 	ldw	r2,-44(fp)
    7b20:	00c001c4 	movi	r3,7
    7b24:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
    7b28:	e0bff717 	ldw	r2,-36(fp)
    7b2c:	e0bffe15 	stw	r2,-8(fp)
             break;
    7b30:	0001883a 	nop
    }
    return (pevent_return);
    7b34:	e0bffe17 	ldw	r2,-8(fp)
}
    7b38:	e037883a 	mov	sp,fp
    7b3c:	dfc00117 	ldw	ra,4(sp)
    7b40:	df000017 	ldw	fp,0(sp)
    7b44:	dec00204 	addi	sp,sp,8
    7b48:	f800283a 	ret

00007b4c <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
    7b4c:	defff504 	addi	sp,sp,-44
    7b50:	dfc00a15 	stw	ra,40(sp)
    7b54:	df000915 	stw	fp,36(sp)
    7b58:	df000904 	addi	fp,sp,36
    7b5c:	e13ff915 	stw	r4,-28(fp)
    7b60:	2805883a 	mov	r2,r5
    7b64:	e1bff715 	stw	r6,-36(fp)
    7b68:	e0bff80d 	sth	r2,-32(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    7b6c:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    7b70:	e0bff717 	ldw	r2,-36(fp)
    7b74:	10007426 	beq	r2,zero,7d48 <OSSemPend+0x1fc>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    7b78:	e0bff917 	ldw	r2,-28(fp)
    7b7c:	1000041e 	bne	r2,zero,7b90 <OSSemPend+0x44>
        *perr = OS_ERR_PEVENT_NULL;
    7b80:	e0bff717 	ldw	r2,-36(fp)
    7b84:	00c00104 	movi	r3,4
    7b88:	10c00005 	stb	r3,0(r2)
        return;
    7b8c:	00006f06 	br	7d4c <OSSemPend+0x200>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    7b90:	e0bff917 	ldw	r2,-28(fp)
    7b94:	10800003 	ldbu	r2,0(r2)
    7b98:	10803fcc 	andi	r2,r2,255
    7b9c:	108000e0 	cmpeqi	r2,r2,3
    7ba0:	1000041e 	bne	r2,zero,7bb4 <OSSemPend+0x68>
        *perr = OS_ERR_EVENT_TYPE;
    7ba4:	e0bff717 	ldw	r2,-36(fp)
    7ba8:	00c00044 	movi	r3,1
    7bac:	10c00005 	stb	r3,0(r2)
        return;
    7bb0:	00006606 	br	7d4c <OSSemPend+0x200>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
    7bb4:	d0a6e343 	ldbu	r2,-25715(gp)
    7bb8:	10803fcc 	andi	r2,r2,255
    7bbc:	10000426 	beq	r2,zero,7bd0 <OSSemPend+0x84>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
    7bc0:	e0bff717 	ldw	r2,-36(fp)
    7bc4:	00c00084 	movi	r3,2
    7bc8:	10c00005 	stb	r3,0(r2)
        return;
    7bcc:	00005f06 	br	7d4c <OSSemPend+0x200>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
    7bd0:	d0a6e383 	ldbu	r2,-25714(gp)
    7bd4:	10803fcc 	andi	r2,r2,255
    7bd8:	10000426 	beq	r2,zero,7bec <OSSemPend+0xa0>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
    7bdc:	e0bff717 	ldw	r2,-36(fp)
    7be0:	00c00344 	movi	r3,13
    7be4:	10c00005 	stb	r3,0(r2)
        return;
    7be8:	00005806 	br	7d4c <OSSemPend+0x200>
  NIOS2_READ_STATUS (context);
    7bec:	0005303a 	rdctl	r2,status
    7bf0:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7bf4:	e0fffe17 	ldw	r3,-8(fp)
    7bf8:	00bfff84 	movi	r2,-2
    7bfc:	1884703a 	and	r2,r3,r2
    7c00:	1001703a 	wrctl	status,r2
  return context;
    7c04:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
    7c08:	e0bfff15 	stw	r2,-4(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
    7c0c:	e0bff917 	ldw	r2,-28(fp)
    7c10:	1080020b 	ldhu	r2,8(r2)
    7c14:	10bfffcc 	andi	r2,r2,65535
    7c18:	10000e26 	beq	r2,zero,7c54 <OSSemPend+0x108>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
    7c1c:	e0bff917 	ldw	r2,-28(fp)
    7c20:	1080020b 	ldhu	r2,8(r2)
    7c24:	10bfffc4 	addi	r2,r2,-1
    7c28:	1007883a 	mov	r3,r2
    7c2c:	e0bff917 	ldw	r2,-28(fp)
    7c30:	10c0020d 	sth	r3,8(r2)
    7c34:	e0bfff17 	ldw	r2,-4(fp)
    7c38:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
    7c3c:	e0bffd17 	ldw	r2,-12(fp)
    7c40:	1001703a 	wrctl	status,r2
}
    7c44:	0001883a 	nop
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
    7c48:	e0bff717 	ldw	r2,-36(fp)
    7c4c:	10000005 	stb	zero,0(r2)
        return;
    7c50:	00003e06 	br	7d4c <OSSemPend+0x200>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
    7c54:	d0a6e717 	ldw	r2,-25700(gp)
    7c58:	10c00c03 	ldbu	r3,48(r2)
    7c5c:	d0a6e717 	ldw	r2,-25700(gp)
    7c60:	18c00054 	ori	r3,r3,1
    7c64:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    7c68:	d0a6e717 	ldw	r2,-25700(gp)
    7c6c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
    7c70:	d0a6e717 	ldw	r2,-25700(gp)
    7c74:	e0fff80b 	ldhu	r3,-32(fp)
    7c78:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
    7c7c:	e13ff917 	ldw	r4,-28(fp)
    7c80:	00035d00 	call	35d0 <OS_EventTaskWait>
    7c84:	e0bfff17 	ldw	r2,-4(fp)
    7c88:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    7c8c:	e0bffb17 	ldw	r2,-20(fp)
    7c90:	1001703a 	wrctl	status,r2
}
    7c94:	0001883a 	nop
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
    7c98:	0003e7c0 	call	3e7c <OS_Sched>
  NIOS2_READ_STATUS (context);
    7c9c:	0005303a 	rdctl	r2,status
    7ca0:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7ca4:	e0fffc17 	ldw	r3,-16(fp)
    7ca8:	00bfff84 	movi	r2,-2
    7cac:	1884703a 	and	r2,r3,r2
    7cb0:	1001703a 	wrctl	status,r2
  return context;
    7cb4:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
    7cb8:	e0bfff15 	stw	r2,-4(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
    7cbc:	d0a6e717 	ldw	r2,-25700(gp)
    7cc0:	10800c43 	ldbu	r2,49(r2)
    7cc4:	10803fcc 	andi	r2,r2,255
    7cc8:	10000326 	beq	r2,zero,7cd8 <OSSemPend+0x18c>
    7ccc:	108000a0 	cmpeqi	r2,r2,2
    7cd0:	1000041e 	bne	r2,zero,7ce4 <OSSemPend+0x198>
    7cd4:	00000706 	br	7cf4 <OSSemPend+0x1a8>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
    7cd8:	e0bff717 	ldw	r2,-36(fp)
    7cdc:	10000005 	stb	zero,0(r2)
             break;
    7ce0:	00000c06 	br	7d14 <OSSemPend+0x1c8>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
    7ce4:	e0bff717 	ldw	r2,-36(fp)
    7ce8:	00c00384 	movi	r3,14
    7cec:	10c00005 	stb	r3,0(r2)
             break;
    7cf0:	00000806 	br	7d14 <OSSemPend+0x1c8>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
    7cf4:	d0a6e717 	ldw	r2,-25700(gp)
    7cf8:	e17ff917 	ldw	r5,-28(fp)
    7cfc:	1009883a 	mov	r4,r2
    7d00:	00038200 	call	3820 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
    7d04:	e0bff717 	ldw	r2,-36(fp)
    7d08:	00c00284 	movi	r3,10
    7d0c:	10c00005 	stb	r3,0(r2)
             break;
    7d10:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
    7d14:	d0a6e717 	ldw	r2,-25700(gp)
    7d18:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
    7d1c:	d0a6e717 	ldw	r2,-25700(gp)
    7d20:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
    7d24:	d0a6e717 	ldw	r2,-25700(gp)
    7d28:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    7d2c:	d0a6e717 	ldw	r2,-25700(gp)
    7d30:	10000815 	stw	zero,32(r2)
    7d34:	e0bfff17 	ldw	r2,-4(fp)
    7d38:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
    7d3c:	e0bffa17 	ldw	r2,-24(fp)
    7d40:	1001703a 	wrctl	status,r2
}
    7d44:	00000106 	br	7d4c <OSSemPend+0x200>
        return;
    7d48:	0001883a 	nop
#endif
    OS_EXIT_CRITICAL();
}
    7d4c:	e037883a 	mov	sp,fp
    7d50:	dfc00117 	ldw	ra,4(sp)
    7d54:	df000017 	ldw	fp,0(sp)
    7d58:	dec00204 	addi	sp,sp,8
    7d5c:	f800283a 	ret

00007d60 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    7d60:	defff604 	addi	sp,sp,-40
    7d64:	dfc00915 	stw	ra,36(sp)
    7d68:	df000815 	stw	fp,32(sp)
    7d6c:	df000804 	addi	fp,sp,32
    7d70:	e13ffa15 	stw	r4,-24(fp)
    7d74:	2805883a 	mov	r2,r5
    7d78:	e1bff815 	stw	r6,-32(fp)
    7d7c:	e0bff905 	stb	r2,-28(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    7d80:	e03ffe15 	stw	zero,-8(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    7d84:	e0bff817 	ldw	r2,-32(fp)
    7d88:	1000021e 	bne	r2,zero,7d94 <OSSemPendAbort+0x34>
        return (0);
    7d8c:	0005883a 	mov	r2,zero
    7d90:	00004b06 	br	7ec0 <OSSemPendAbort+0x160>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    7d94:	e0bffa17 	ldw	r2,-24(fp)
    7d98:	1000051e 	bne	r2,zero,7db0 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    7d9c:	e0bff817 	ldw	r2,-32(fp)
    7da0:	00c00104 	movi	r3,4
    7da4:	10c00005 	stb	r3,0(r2)
        return (0);
    7da8:	0005883a 	mov	r2,zero
    7dac:	00004406 	br	7ec0 <OSSemPendAbort+0x160>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    7db0:	e0bffa17 	ldw	r2,-24(fp)
    7db4:	10800003 	ldbu	r2,0(r2)
    7db8:	10803fcc 	andi	r2,r2,255
    7dbc:	108000e0 	cmpeqi	r2,r2,3
    7dc0:	1000051e 	bne	r2,zero,7dd8 <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    7dc4:	e0bff817 	ldw	r2,-32(fp)
    7dc8:	00c00044 	movi	r3,1
    7dcc:	10c00005 	stb	r3,0(r2)
        return (0);
    7dd0:	0005883a 	mov	r2,zero
    7dd4:	00003a06 	br	7ec0 <OSSemPendAbort+0x160>
  NIOS2_READ_STATUS (context);
    7dd8:	0005303a 	rdctl	r2,status
    7ddc:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7de0:	e0fffd17 	ldw	r3,-12(fp)
    7de4:	00bfff84 	movi	r2,-2
    7de8:	1884703a 	and	r2,r3,r2
    7dec:	1001703a 	wrctl	status,r2
  return context;
    7df0:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    7df4:	e0bffe15 	stw	r2,-8(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
    7df8:	e0bffa17 	ldw	r2,-24(fp)
    7dfc:	10800283 	ldbu	r2,10(r2)
    7e00:	10803fcc 	andi	r2,r2,255
    7e04:	10002626 	beq	r2,zero,7ea0 <OSSemPendAbort+0x140>
        nbr_tasks = 0;
    7e08:	e03fffc5 	stb	zero,-1(fp)
        switch (opt) {
    7e0c:	e0bff903 	ldbu	r2,-28(fp)
    7e10:	10800058 	cmpnei	r2,r2,1
    7e14:	10000e1e 	bne	r2,zero,7e50 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
    7e18:	00000806 	br	7e3c <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
    7e1c:	01c00084 	movi	r7,2
    7e20:	01800044 	movi	r6,1
    7e24:	000b883a 	mov	r5,zero
    7e28:	e13ffa17 	ldw	r4,-24(fp)
    7e2c:	00034480 	call	3448 <OS_EventTaskRdy>
                     nbr_tasks++;
    7e30:	e0bfffc3 	ldbu	r2,-1(fp)
    7e34:	10800044 	addi	r2,r2,1
    7e38:	e0bfffc5 	stb	r2,-1(fp)
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
    7e3c:	e0bffa17 	ldw	r2,-24(fp)
    7e40:	10800283 	ldbu	r2,10(r2)
    7e44:	10803fcc 	andi	r2,r2,255
    7e48:	103ff41e 	bne	r2,zero,7e1c <OSSemPendAbort+0xbc>
                 }
                 break;
    7e4c:	00000906 	br	7e74 <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
    7e50:	01c00084 	movi	r7,2
    7e54:	01800044 	movi	r6,1
    7e58:	000b883a 	mov	r5,zero
    7e5c:	e13ffa17 	ldw	r4,-24(fp)
    7e60:	00034480 	call	3448 <OS_EventTaskRdy>
                 nbr_tasks++;
    7e64:	e0bfffc3 	ldbu	r2,-1(fp)
    7e68:	10800044 	addi	r2,r2,1
    7e6c:	e0bfffc5 	stb	r2,-1(fp)
                 break;
    7e70:	0001883a 	nop
    7e74:	e0bffe17 	ldw	r2,-8(fp)
    7e78:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    7e7c:	e0bffc17 	ldw	r2,-16(fp)
    7e80:	1001703a 	wrctl	status,r2
}
    7e84:	0001883a 	nop
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
    7e88:	0003e7c0 	call	3e7c <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
    7e8c:	e0bff817 	ldw	r2,-32(fp)
    7e90:	00c00384 	movi	r3,14
    7e94:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
    7e98:	e0bfffc3 	ldbu	r2,-1(fp)
    7e9c:	00000806 	br	7ec0 <OSSemPendAbort+0x160>
    7ea0:	e0bffe17 	ldw	r2,-8(fp)
    7ea4:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    7ea8:	e0bffb17 	ldw	r2,-20(fp)
    7eac:	1001703a 	wrctl	status,r2
}
    7eb0:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    7eb4:	e0bff817 	ldw	r2,-32(fp)
    7eb8:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
    7ebc:	0005883a 	mov	r2,zero
}
    7ec0:	e037883a 	mov	sp,fp
    7ec4:	dfc00117 	ldw	ra,4(sp)
    7ec8:	df000017 	ldw	fp,0(sp)
    7ecc:	dec00204 	addi	sp,sp,8
    7ed0:	f800283a 	ret

00007ed4 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
    7ed4:	defff804 	addi	sp,sp,-32
    7ed8:	dfc00715 	stw	ra,28(sp)
    7edc:	df000615 	stw	fp,24(sp)
    7ee0:	df000604 	addi	fp,sp,24
    7ee4:	e13ffa15 	stw	r4,-24(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    7ee8:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    7eec:	e0bffa17 	ldw	r2,-24(fp)
    7ef0:	1000021e 	bne	r2,zero,7efc <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
    7ef4:	00800104 	movi	r2,4
    7ef8:	00003806 	br	7fdc <OSSemPost+0x108>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    7efc:	e0bffa17 	ldw	r2,-24(fp)
    7f00:	10800003 	ldbu	r2,0(r2)
    7f04:	10803fcc 	andi	r2,r2,255
    7f08:	108000e0 	cmpeqi	r2,r2,3
    7f0c:	1000021e 	bne	r2,zero,7f18 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
    7f10:	00800044 	movi	r2,1
    7f14:	00003106 	br	7fdc <OSSemPost+0x108>
  NIOS2_READ_STATUS (context);
    7f18:	0005303a 	rdctl	r2,status
    7f1c:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7f20:	e0fffe17 	ldw	r3,-8(fp)
    7f24:	00bfff84 	movi	r2,-2
    7f28:	1884703a 	and	r2,r3,r2
    7f2c:	1001703a 	wrctl	status,r2
  return context;
    7f30:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
    7f34:	e0bfff15 	stw	r2,-4(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
    7f38:	e0bffa17 	ldw	r2,-24(fp)
    7f3c:	10800283 	ldbu	r2,10(r2)
    7f40:	10803fcc 	andi	r2,r2,255
    7f44:	10000d26 	beq	r2,zero,7f7c <OSSemPost+0xa8>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
    7f48:	000f883a 	mov	r7,zero
    7f4c:	01800044 	movi	r6,1
    7f50:	000b883a 	mov	r5,zero
    7f54:	e13ffa17 	ldw	r4,-24(fp)
    7f58:	00034480 	call	3448 <OS_EventTaskRdy>
    7f5c:	e0bfff17 	ldw	r2,-4(fp)
    7f60:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
    7f64:	e0bffd17 	ldw	r2,-12(fp)
    7f68:	1001703a 	wrctl	status,r2
}
    7f6c:	0001883a 	nop
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
    7f70:	0003e7c0 	call	3e7c <OS_Sched>
        return (OS_ERR_NONE);
    7f74:	0005883a 	mov	r2,zero
    7f78:	00001806 	br	7fdc <OSSemPost+0x108>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
    7f7c:	e0bffa17 	ldw	r2,-24(fp)
    7f80:	1080020b 	ldhu	r2,8(r2)
    7f84:	10ffffcc 	andi	r3,r2,65535
    7f88:	00bfffd4 	movui	r2,65535
    7f8c:	18800d26 	beq	r3,r2,7fc4 <OSSemPost+0xf0>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
    7f90:	e0bffa17 	ldw	r2,-24(fp)
    7f94:	1080020b 	ldhu	r2,8(r2)
    7f98:	10800044 	addi	r2,r2,1
    7f9c:	1007883a 	mov	r3,r2
    7fa0:	e0bffa17 	ldw	r2,-24(fp)
    7fa4:	10c0020d 	sth	r3,8(r2)
    7fa8:	e0bfff17 	ldw	r2,-4(fp)
    7fac:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    7fb0:	e0bffc17 	ldw	r2,-16(fp)
    7fb4:	1001703a 	wrctl	status,r2
}
    7fb8:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
    7fbc:	0005883a 	mov	r2,zero
    7fc0:	00000606 	br	7fdc <OSSemPost+0x108>
    7fc4:	e0bfff17 	ldw	r2,-4(fp)
    7fc8:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    7fcc:	e0bffb17 	ldw	r2,-20(fp)
    7fd0:	1001703a 	wrctl	status,r2
}
    7fd4:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
    7fd8:	00800c84 	movi	r2,50
}
    7fdc:	e037883a 	mov	sp,fp
    7fe0:	dfc00117 	ldw	ra,4(sp)
    7fe4:	df000017 	ldw	fp,0(sp)
    7fe8:	dec00204 	addi	sp,sp,8
    7fec:	f800283a 	ret

00007ff0 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
    7ff0:	defff704 	addi	sp,sp,-36
    7ff4:	df000815 	stw	fp,32(sp)
    7ff8:	df000804 	addi	fp,sp,32
    7ffc:	e13ff915 	stw	r4,-28(fp)
    8000:	e17ff815 	stw	r5,-32(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    8004:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    8008:	e0bff917 	ldw	r2,-28(fp)
    800c:	1000021e 	bne	r2,zero,8018 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
    8010:	00800104 	movi	r2,4
    8014:	00003706 	br	80f4 <OSSemQuery+0x104>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
    8018:	e0bff817 	ldw	r2,-32(fp)
    801c:	1000021e 	bne	r2,zero,8028 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
    8020:	00800244 	movi	r2,9
    8024:	00003306 	br	80f4 <OSSemQuery+0x104>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
    8028:	e0bff917 	ldw	r2,-28(fp)
    802c:	10800003 	ldbu	r2,0(r2)
    8030:	10803fcc 	andi	r2,r2,255
    8034:	108000e0 	cmpeqi	r2,r2,3
    8038:	1000021e 	bne	r2,zero,8044 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
    803c:	00800044 	movi	r2,1
    8040:	00002c06 	br	80f4 <OSSemQuery+0x104>
  NIOS2_READ_STATUS (context);
    8044:	0005303a 	rdctl	r2,status
    8048:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    804c:	e0fffb17 	ldw	r3,-20(fp)
    8050:	00bfff84 	movi	r2,-2
    8054:	1884703a 	and	r2,r3,r2
    8058:	1001703a 	wrctl	status,r2
  return context;
    805c:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
    8060:	e0bffc15 	stw	r2,-16(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    8064:	e0bff917 	ldw	r2,-28(fp)
    8068:	10c00283 	ldbu	r3,10(r2)
    806c:	e0bff817 	ldw	r2,-32(fp)
    8070:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
    8074:	e0bff917 	ldw	r2,-28(fp)
    8078:	108002c4 	addi	r2,r2,11
    807c:	e0bfff15 	stw	r2,-4(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
    8080:	e0bff817 	ldw	r2,-32(fp)
    8084:	10800084 	addi	r2,r2,2
    8088:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    808c:	e03ffdc5 	stb	zero,-9(fp)
    8090:	00000b06 	br	80c0 <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
    8094:	e0ffff17 	ldw	r3,-4(fp)
    8098:	18800044 	addi	r2,r3,1
    809c:	e0bfff15 	stw	r2,-4(fp)
    80a0:	e0bffe17 	ldw	r2,-8(fp)
    80a4:	11000044 	addi	r4,r2,1
    80a8:	e13ffe15 	stw	r4,-8(fp)
    80ac:	18c00003 	ldbu	r3,0(r3)
    80b0:	10c00005 	stb	r3,0(r2)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    80b4:	e0bffdc3 	ldbu	r2,-9(fp)
    80b8:	10800044 	addi	r2,r2,1
    80bc:	e0bffdc5 	stb	r2,-9(fp)
    80c0:	e0bffdc3 	ldbu	r2,-9(fp)
    80c4:	108000f0 	cmpltui	r2,r2,3
    80c8:	103ff21e 	bne	r2,zero,8094 <OSSemQuery+0xa4>
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
    80cc:	e0bff917 	ldw	r2,-28(fp)
    80d0:	10c0020b 	ldhu	r3,8(r2)
    80d4:	e0bff817 	ldw	r2,-32(fp)
    80d8:	10c0000d 	sth	r3,0(r2)
    80dc:	e0bffc17 	ldw	r2,-16(fp)
    80e0:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
    80e4:	e0bffa17 	ldw	r2,-24(fp)
    80e8:	1001703a 	wrctl	status,r2
}
    80ec:	0001883a 	nop
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    80f0:	0005883a 	mov	r2,zero
}
    80f4:	e037883a 	mov	sp,fp
    80f8:	df000017 	ldw	fp,0(sp)
    80fc:	dec00104 	addi	sp,sp,4
    8100:	f800283a 	ret

00008104 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
    8104:	defff904 	addi	sp,sp,-28
    8108:	df000615 	stw	fp,24(sp)
    810c:	df000604 	addi	fp,sp,24
    8110:	e13ffc15 	stw	r4,-16(fp)
    8114:	2805883a 	mov	r2,r5
    8118:	e1bffa15 	stw	r6,-24(fp)
    811c:	e0bffb0d 	sth	r2,-20(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    8120:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    8124:	e0bffa17 	ldw	r2,-24(fp)
    8128:	10003126 	beq	r2,zero,81f0 <OSSemSet+0xec>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    812c:	e0bffc17 	ldw	r2,-16(fp)
    8130:	1000041e 	bne	r2,zero,8144 <OSSemSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
    8134:	e0bffa17 	ldw	r2,-24(fp)
    8138:	00c00104 	movi	r3,4
    813c:	10c00005 	stb	r3,0(r2)
        return;
    8140:	00002c06 	br	81f4 <OSSemSet+0xf0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    8144:	e0bffc17 	ldw	r2,-16(fp)
    8148:	10800003 	ldbu	r2,0(r2)
    814c:	10803fcc 	andi	r2,r2,255
    8150:	108000e0 	cmpeqi	r2,r2,3
    8154:	1000041e 	bne	r2,zero,8168 <OSSemSet+0x64>
        *perr = OS_ERR_EVENT_TYPE;
    8158:	e0bffa17 	ldw	r2,-24(fp)
    815c:	00c00044 	movi	r3,1
    8160:	10c00005 	stb	r3,0(r2)
        return;
    8164:	00002306 	br	81f4 <OSSemSet+0xf0>
  NIOS2_READ_STATUS (context);
    8168:	0005303a 	rdctl	r2,status
    816c:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8170:	e0fffe17 	ldw	r3,-8(fp)
    8174:	00bfff84 	movi	r2,-2
    8178:	1884703a 	and	r2,r3,r2
    817c:	1001703a 	wrctl	status,r2
  return context;
    8180:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
    8184:	e0bfff15 	stw	r2,-4(fp)
    *perr = OS_ERR_NONE;
    8188:	e0bffa17 	ldw	r2,-24(fp)
    818c:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
    8190:	e0bffc17 	ldw	r2,-16(fp)
    8194:	1080020b 	ldhu	r2,8(r2)
    8198:	10bfffcc 	andi	r2,r2,65535
    819c:	10000426 	beq	r2,zero,81b0 <OSSemSet+0xac>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
    81a0:	e0bffc17 	ldw	r2,-16(fp)
    81a4:	e0fffb0b 	ldhu	r3,-20(fp)
    81a8:	10c0020d 	sth	r3,8(r2)
    81ac:	00000b06 	br	81dc <OSSemSet+0xd8>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
    81b0:	e0bffc17 	ldw	r2,-16(fp)
    81b4:	10800283 	ldbu	r2,10(r2)
    81b8:	10803fcc 	andi	r2,r2,255
    81bc:	1000041e 	bne	r2,zero,81d0 <OSSemSet+0xcc>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
    81c0:	e0bffc17 	ldw	r2,-16(fp)
    81c4:	e0fffb0b 	ldhu	r3,-20(fp)
    81c8:	10c0020d 	sth	r3,8(r2)
    81cc:	00000306 	br	81dc <OSSemSet+0xd8>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
    81d0:	e0bffa17 	ldw	r2,-24(fp)
    81d4:	00c01244 	movi	r3,73
    81d8:	10c00005 	stb	r3,0(r2)
    81dc:	e0bfff17 	ldw	r2,-4(fp)
    81e0:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
    81e4:	e0bffd17 	ldw	r2,-12(fp)
    81e8:	1001703a 	wrctl	status,r2
}
    81ec:	00000106 	br	81f4 <OSSemSet+0xf0>
        return;
    81f0:	0001883a 	nop
        }
    }
    OS_EXIT_CRITICAL();
}
    81f4:	e037883a 	mov	sp,fp
    81f8:	df000017 	ldw	fp,0(sp)
    81fc:	dec00104 	addi	sp,sp,4
    8200:	f800283a 	ret

00008204 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
    8204:	defff104 	addi	sp,sp,-60
    8208:	dfc00e15 	stw	ra,56(sp)
    820c:	df000d15 	stw	fp,52(sp)
    8210:	df000d04 	addi	fp,sp,52
    8214:	2005883a 	mov	r2,r4
    8218:	2807883a 	mov	r3,r5
    821c:	e0bff405 	stb	r2,-48(fp)
    8220:	1805883a 	mov	r2,r3
    8224:	e0bff305 	stb	r2,-52(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
    8228:	e03ffd15 	stw	zero,-12(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
    822c:	e0bff403 	ldbu	r2,-48(fp)
    8230:	10800530 	cmpltui	r2,r2,20
    8234:	1000051e 	bne	r2,zero,824c <OSTaskChangePrio+0x48>
        if (oldprio != OS_PRIO_SELF) {
    8238:	e0bff403 	ldbu	r2,-48(fp)
    823c:	10803fe0 	cmpeqi	r2,r2,255
    8240:	1000021e 	bne	r2,zero,824c <OSTaskChangePrio+0x48>
            return (OS_ERR_PRIO_INVALID);
    8244:	00800a84 	movi	r2,42
    8248:	00011a06 	br	86b4 <OSTaskChangePrio+0x4b0>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
    824c:	e0bff303 	ldbu	r2,-52(fp)
    8250:	10800530 	cmpltui	r2,r2,20
    8254:	1000021e 	bne	r2,zero,8260 <OSTaskChangePrio+0x5c>
        return (OS_ERR_PRIO_INVALID);
    8258:	00800a84 	movi	r2,42
    825c:	00011506 	br	86b4 <OSTaskChangePrio+0x4b0>
  NIOS2_READ_STATUS (context);
    8260:	0005303a 	rdctl	r2,status
    8264:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8268:	e0fff917 	ldw	r3,-28(fp)
    826c:	00bfff84 	movi	r2,-2
    8270:	1884703a 	and	r2,r3,r2
    8274:	1001703a 	wrctl	status,r2
  return context;
    8278:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    827c:	e0bffd15 	stw	r2,-12(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
    8280:	e0bff303 	ldbu	r2,-52(fp)
    8284:	100690ba 	slli	r3,r2,2
    8288:	008000b4 	movhi	r2,2
    828c:	1885883a 	add	r2,r3,r2
    8290:	10a5ac17 	ldw	r2,-26960(r2)
    8294:	10000726 	beq	r2,zero,82b4 <OSTaskChangePrio+0xb0>
    8298:	e0bffd17 	ldw	r2,-12(fp)
    829c:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
    82a0:	e0bff817 	ldw	r2,-32(fp)
    82a4:	1001703a 	wrctl	status,r2
}
    82a8:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
    82ac:	00800a04 	movi	r2,40
    82b0:	00010006 	br	86b4 <OSTaskChangePrio+0x4b0>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
    82b4:	e0bff403 	ldbu	r2,-48(fp)
    82b8:	10803fd8 	cmpnei	r2,r2,255
    82bc:	1000031e 	bne	r2,zero,82cc <OSTaskChangePrio+0xc8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
    82c0:	d0a6e717 	ldw	r2,-25700(gp)
    82c4:	10800c83 	ldbu	r2,50(r2)
    82c8:	e0bff405 	stb	r2,-48(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
    82cc:	e0bff403 	ldbu	r2,-48(fp)
    82d0:	100690ba 	slli	r3,r2,2
    82d4:	008000b4 	movhi	r2,2
    82d8:	1885883a 	add	r2,r3,r2
    82dc:	10a5ac17 	ldw	r2,-26960(r2)
    82e0:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
    82e4:	e0bffc17 	ldw	r2,-16(fp)
    82e8:	1000071e 	bne	r2,zero,8308 <OSTaskChangePrio+0x104>
    82ec:	e0bffd17 	ldw	r2,-12(fp)
    82f0:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context);
    82f4:	e0bff717 	ldw	r2,-36(fp)
    82f8:	1001703a 	wrctl	status,r2
}
    82fc:	0001883a 	nop
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
    8300:	00800a44 	movi	r2,41
    8304:	0000eb06 	br	86b4 <OSTaskChangePrio+0x4b0>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
    8308:	e0bffc17 	ldw	r2,-16(fp)
    830c:	10800058 	cmpnei	r2,r2,1
    8310:	1000071e 	bne	r2,zero,8330 <OSTaskChangePrio+0x12c>
    8314:	e0bffd17 	ldw	r2,-12(fp)
    8318:	e0bff615 	stw	r2,-40(fp)
  NIOS2_WRITE_STATUS (context);
    831c:	e0bff617 	ldw	r2,-40(fp)
    8320:	1001703a 	wrctl	status,r2
}
    8324:	0001883a 	nop
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
    8328:	008010c4 	movi	r2,67
    832c:	0000e106 	br	86b4 <OSTaskChangePrio+0x4b0>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
    8330:	e0bff303 	ldbu	r2,-52(fp)
    8334:	1004d0fa 	srli	r2,r2,3
    8338:	e0bffbc5 	stb	r2,-17(fp)
    x_new                 = (INT8U)(newprio & 0x07);
    833c:	e0bff303 	ldbu	r2,-52(fp)
    8340:	108001cc 	andi	r2,r2,7
    8344:	e0bffb85 	stb	r2,-18(fp)
    bity_new              = (INT8U)(1 << y_new);
    8348:	e0bffbc3 	ldbu	r2,-17(fp)
    834c:	00c00044 	movi	r3,1
    8350:	1884983a 	sll	r2,r3,r2
    8354:	e0bffb45 	stb	r2,-19(fp)
    bitx_new              = (INT8U)(1 << x_new);
    8358:	e0bffb83 	ldbu	r2,-18(fp)
    835c:	00c00044 	movi	r3,1
    8360:	1884983a 	sll	r2,r3,r2
    8364:	e0bffb05 	stb	r2,-20(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
    8368:	e0bff403 	ldbu	r2,-48(fp)
    836c:	100690ba 	slli	r3,r2,2
    8370:	008000b4 	movhi	r2,2
    8374:	1885883a 	add	r2,r3,r2
    8378:	1025ac15 	stw	zero,-26960(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
    837c:	e0bff303 	ldbu	r2,-52(fp)
    8380:	100890ba 	slli	r4,r2,2
    8384:	e0fffc17 	ldw	r3,-16(fp)
    8388:	008000b4 	movhi	r2,2
    838c:	2085883a 	add	r2,r4,r2
    8390:	10e5ac15 	stw	r3,-26960(r2)
    y_old                 =  ptcb->OSTCBY;
    8394:	e0bffc17 	ldw	r2,-16(fp)
    8398:	10800d03 	ldbu	r2,52(r2)
    839c:	e0bffac5 	stb	r2,-21(fp)
    bity_old              =  ptcb->OSTCBBitY;
    83a0:	e0bffc17 	ldw	r2,-16(fp)
    83a4:	10800d83 	ldbu	r2,54(r2)
    83a8:	e0bffa85 	stb	r2,-22(fp)
    bitx_old              =  ptcb->OSTCBBitX;
    83ac:	e0bffc17 	ldw	r2,-16(fp)
    83b0:	10800d43 	ldbu	r2,53(r2)
    83b4:	e0bffa45 	stb	r2,-23(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
    83b8:	e0fffac3 	ldbu	r3,-21(fp)
    83bc:	d0a6e484 	addi	r2,gp,-25710
    83c0:	1885883a 	add	r2,r3,r2
    83c4:	10800003 	ldbu	r2,0(r2)
    83c8:	e0fffa43 	ldbu	r3,-23(fp)
    83cc:	1884703a 	and	r2,r3,r2
    83d0:	10803fcc 	andi	r2,r2,255
    83d4:	10002826 	beq	r2,zero,8478 <OSTaskChangePrio+0x274>
         OSRdyTbl[y_old] &= ~bitx_old;
    83d8:	e0fffac3 	ldbu	r3,-21(fp)
    83dc:	d0a6e484 	addi	r2,gp,-25710
    83e0:	1885883a 	add	r2,r3,r2
    83e4:	10800003 	ldbu	r2,0(r2)
    83e8:	1007883a 	mov	r3,r2
    83ec:	e0bffa43 	ldbu	r2,-23(fp)
    83f0:	0084303a 	nor	r2,zero,r2
    83f4:	1884703a 	and	r2,r3,r2
    83f8:	e0fffac3 	ldbu	r3,-21(fp)
    83fc:	1009883a 	mov	r4,r2
    8400:	d0a6e484 	addi	r2,gp,-25710
    8404:	1885883a 	add	r2,r3,r2
    8408:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
    840c:	e0fffac3 	ldbu	r3,-21(fp)
    8410:	d0a6e484 	addi	r2,gp,-25710
    8414:	1885883a 	add	r2,r3,r2
    8418:	10800003 	ldbu	r2,0(r2)
    841c:	10803fcc 	andi	r2,r2,255
    8420:	1000061e 	bne	r2,zero,843c <OSTaskChangePrio+0x238>
             OSRdyGrp &= ~bity_old;
    8424:	e0bffa83 	ldbu	r2,-22(fp)
    8428:	0084303a 	nor	r2,zero,r2
    842c:	1007883a 	mov	r3,r2
    8430:	d0a6e443 	ldbu	r2,-25711(gp)
    8434:	1884703a 	and	r2,r3,r2
    8438:	d0a6e445 	stb	r2,-25711(gp)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
    843c:	d0a6e443 	ldbu	r2,-25711(gp)
    8440:	e0fffb43 	ldbu	r3,-19(fp)
    8444:	1884b03a 	or	r2,r3,r2
    8448:	d0a6e445 	stb	r2,-25711(gp)
         OSRdyTbl[y_new] |= bitx_new;
    844c:	e0fffbc3 	ldbu	r3,-17(fp)
    8450:	d0a6e484 	addi	r2,gp,-25710
    8454:	1885883a 	add	r2,r3,r2
    8458:	10800003 	ldbu	r2,0(r2)
    845c:	e0fffbc3 	ldbu	r3,-17(fp)
    8460:	e13ffb03 	ldbu	r4,-20(fp)
    8464:	2084b03a 	or	r2,r4,r2
    8468:	1009883a 	mov	r4,r2
    846c:	d0a6e484 	addi	r2,gp,-25710
    8470:	1885883a 	add	r2,r3,r2
    8474:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
    8478:	e0bffc17 	ldw	r2,-16(fp)
    847c:	10800717 	ldw	r2,28(r2)
    8480:	e0bfff15 	stw	r2,-4(fp)
    if (pevent != (OS_EVENT *)0) {
    8484:	e0bfff17 	ldw	r2,-4(fp)
    8488:	10002f26 	beq	r2,zero,8548 <OSTaskChangePrio+0x344>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
    848c:	e0bffac3 	ldbu	r2,-21(fp)
    8490:	e0ffff17 	ldw	r3,-4(fp)
    8494:	1885883a 	add	r2,r3,r2
    8498:	108002c3 	ldbu	r2,11(r2)
    849c:	1007883a 	mov	r3,r2
    84a0:	e0bffa43 	ldbu	r2,-23(fp)
    84a4:	0084303a 	nor	r2,zero,r2
    84a8:	1884703a 	and	r2,r3,r2
    84ac:	1007883a 	mov	r3,r2
    84b0:	e0bffac3 	ldbu	r2,-21(fp)
    84b4:	1809883a 	mov	r4,r3
    84b8:	e0ffff17 	ldw	r3,-4(fp)
    84bc:	1885883a 	add	r2,r3,r2
    84c0:	110002c5 	stb	r4,11(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
    84c4:	e0bffac3 	ldbu	r2,-21(fp)
    84c8:	e0ffff17 	ldw	r3,-4(fp)
    84cc:	1885883a 	add	r2,r3,r2
    84d0:	108002c3 	ldbu	r2,11(r2)
    84d4:	10803fcc 	andi	r2,r2,255
    84d8:	1000091e 	bne	r2,zero,8500 <OSTaskChangePrio+0x2fc>
            pevent->OSEventGrp    &= ~bity_old;
    84dc:	e0bfff17 	ldw	r2,-4(fp)
    84e0:	10800283 	ldbu	r2,10(r2)
    84e4:	1007883a 	mov	r3,r2
    84e8:	e0bffa83 	ldbu	r2,-22(fp)
    84ec:	0084303a 	nor	r2,zero,r2
    84f0:	1884703a 	and	r2,r3,r2
    84f4:	1007883a 	mov	r3,r2
    84f8:	e0bfff17 	ldw	r2,-4(fp)
    84fc:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
    8500:	e0bfff17 	ldw	r2,-4(fp)
    8504:	10800283 	ldbu	r2,10(r2)
    8508:	e0fffb43 	ldbu	r3,-19(fp)
    850c:	1884b03a 	or	r2,r3,r2
    8510:	1007883a 	mov	r3,r2
    8514:	e0bfff17 	ldw	r2,-4(fp)
    8518:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
    851c:	e0bffbc3 	ldbu	r2,-17(fp)
    8520:	e0ffff17 	ldw	r3,-4(fp)
    8524:	1885883a 	add	r2,r3,r2
    8528:	10c002c3 	ldbu	r3,11(r2)
    852c:	e0bffbc3 	ldbu	r2,-17(fp)
    8530:	e13ffb03 	ldbu	r4,-20(fp)
    8534:	20c6b03a 	or	r3,r4,r3
    8538:	1809883a 	mov	r4,r3
    853c:	e0ffff17 	ldw	r3,-4(fp)
    8540:	1885883a 	add	r2,r3,r2
    8544:	110002c5 	stb	r4,11(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
    8548:	e0bffc17 	ldw	r2,-16(fp)
    854c:	10800817 	ldw	r2,32(r2)
    8550:	10003e26 	beq	r2,zero,864c <OSTaskChangePrio+0x448>
        pevents =  ptcb->OSTCBEventMultiPtr;
    8554:	e0bffc17 	ldw	r2,-16(fp)
    8558:	10800817 	ldw	r2,32(r2)
    855c:	e0bffe15 	stw	r2,-8(fp)
        pevent  = *pevents;
    8560:	e0bffe17 	ldw	r2,-8(fp)
    8564:	10800017 	ldw	r2,0(r2)
    8568:	e0bfff15 	stw	r2,-4(fp)
        while (pevent != (OS_EVENT *)0) {
    856c:	00003506 	br	8644 <OSTaskChangePrio+0x440>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
    8570:	e0bffac3 	ldbu	r2,-21(fp)
    8574:	e0ffff17 	ldw	r3,-4(fp)
    8578:	1885883a 	add	r2,r3,r2
    857c:	108002c3 	ldbu	r2,11(r2)
    8580:	1007883a 	mov	r3,r2
    8584:	e0bffa43 	ldbu	r2,-23(fp)
    8588:	0084303a 	nor	r2,zero,r2
    858c:	1884703a 	and	r2,r3,r2
    8590:	1007883a 	mov	r3,r2
    8594:	e0bffac3 	ldbu	r2,-21(fp)
    8598:	1809883a 	mov	r4,r3
    859c:	e0ffff17 	ldw	r3,-4(fp)
    85a0:	1885883a 	add	r2,r3,r2
    85a4:	110002c5 	stb	r4,11(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
    85a8:	e0bffac3 	ldbu	r2,-21(fp)
    85ac:	e0ffff17 	ldw	r3,-4(fp)
    85b0:	1885883a 	add	r2,r3,r2
    85b4:	108002c3 	ldbu	r2,11(r2)
    85b8:	10803fcc 	andi	r2,r2,255
    85bc:	1000091e 	bne	r2,zero,85e4 <OSTaskChangePrio+0x3e0>
                pevent->OSEventGrp    &= ~bity_old;
    85c0:	e0bfff17 	ldw	r2,-4(fp)
    85c4:	10800283 	ldbu	r2,10(r2)
    85c8:	1007883a 	mov	r3,r2
    85cc:	e0bffa83 	ldbu	r2,-22(fp)
    85d0:	0084303a 	nor	r2,zero,r2
    85d4:	1884703a 	and	r2,r3,r2
    85d8:	1007883a 	mov	r3,r2
    85dc:	e0bfff17 	ldw	r2,-4(fp)
    85e0:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
    85e4:	e0bfff17 	ldw	r2,-4(fp)
    85e8:	10800283 	ldbu	r2,10(r2)
    85ec:	e0fffb43 	ldbu	r3,-19(fp)
    85f0:	1884b03a 	or	r2,r3,r2
    85f4:	1007883a 	mov	r3,r2
    85f8:	e0bfff17 	ldw	r2,-4(fp)
    85fc:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
    8600:	e0bffbc3 	ldbu	r2,-17(fp)
    8604:	e0ffff17 	ldw	r3,-4(fp)
    8608:	1885883a 	add	r2,r3,r2
    860c:	10c002c3 	ldbu	r3,11(r2)
    8610:	e0bffbc3 	ldbu	r2,-17(fp)
    8614:	e13ffb03 	ldbu	r4,-20(fp)
    8618:	20c6b03a 	or	r3,r4,r3
    861c:	1809883a 	mov	r4,r3
    8620:	e0ffff17 	ldw	r3,-4(fp)
    8624:	1885883a 	add	r2,r3,r2
    8628:	110002c5 	stb	r4,11(r2)
            pevents++;
    862c:	e0bffe17 	ldw	r2,-8(fp)
    8630:	10800104 	addi	r2,r2,4
    8634:	e0bffe15 	stw	r2,-8(fp)
            pevent                     = *pevents;
    8638:	e0bffe17 	ldw	r2,-8(fp)
    863c:	10800017 	ldw	r2,0(r2)
    8640:	e0bfff15 	stw	r2,-4(fp)
        while (pevent != (OS_EVENT *)0) {
    8644:	e0bfff17 	ldw	r2,-4(fp)
    8648:	103fc91e 	bne	r2,zero,8570 <OSTaskChangePrio+0x36c>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
    864c:	e0bffc17 	ldw	r2,-16(fp)
    8650:	e0fff303 	ldbu	r3,-52(fp)
    8654:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
    8658:	e0bffc17 	ldw	r2,-16(fp)
    865c:	e0fffbc3 	ldbu	r3,-17(fp)
    8660:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
    8664:	e0bffc17 	ldw	r2,-16(fp)
    8668:	e0fffb83 	ldbu	r3,-18(fp)
    866c:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
    8670:	e0bffc17 	ldw	r2,-16(fp)
    8674:	e0fffb43 	ldbu	r3,-19(fp)
    8678:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
    867c:	e0bffc17 	ldw	r2,-16(fp)
    8680:	e0fffb03 	ldbu	r3,-20(fp)
    8684:	10c00d45 	stb	r3,53(r2)
    8688:	e0bffd17 	ldw	r2,-12(fp)
    868c:	e0bff515 	stw	r2,-44(fp)
  NIOS2_WRITE_STATUS (context);
    8690:	e0bff517 	ldw	r2,-44(fp)
    8694:	1001703a 	wrctl	status,r2
}
    8698:	0001883a 	nop
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
    869c:	d0a6e543 	ldbu	r2,-25707(gp)
    86a0:	10803fcc 	andi	r2,r2,255
    86a4:	10800058 	cmpnei	r2,r2,1
    86a8:	1000011e 	bne	r2,zero,86b0 <OSTaskChangePrio+0x4ac>
        OS_Sched();                                         /* Find new highest priority task          */
    86ac:	0003e7c0 	call	3e7c <OS_Sched>
    }
    return (OS_ERR_NONE);
    86b0:	0005883a 	mov	r2,zero
}
    86b4:	e037883a 	mov	sp,fp
    86b8:	dfc00117 	ldw	ra,4(sp)
    86bc:	df000017 	ldw	fp,0(sp)
    86c0:	dec00204 	addi	sp,sp,8
    86c4:	f800283a 	ret

000086c8 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
    86c8:	deffee04 	addi	sp,sp,-72
    86cc:	dfc01115 	stw	ra,68(sp)
    86d0:	df001015 	stw	fp,64(sp)
    86d4:	df001004 	addi	fp,sp,64
    86d8:	e13ff615 	stw	r4,-40(fp)
    86dc:	e17ff515 	stw	r5,-44(fp)
    86e0:	e1bff415 	stw	r6,-48(fp)
    86e4:	3805883a 	mov	r2,r7
    86e8:	e0bff305 	stb	r2,-52(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
    86ec:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
    86f0:	e0bff303 	ldbu	r2,-52(fp)
    86f4:	10800570 	cmpltui	r2,r2,21
    86f8:	1000021e 	bne	r2,zero,8704 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
    86fc:	00800a84 	movi	r2,42
    8700:	00005506 	br	8858 <OSTaskCreate+0x190>
  NIOS2_READ_STATUS (context);
    8704:	0005303a 	rdctl	r2,status
    8708:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    870c:	e0fffc17 	ldw	r3,-16(fp)
    8710:	00bfff84 	movi	r2,-2
    8714:	1884703a 	and	r2,r3,r2
    8718:	1001703a 	wrctl	status,r2
  return context;
    871c:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    8720:	e0bfff15 	stw	r2,-4(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
    8724:	d0a6e343 	ldbu	r2,-25715(gp)
    8728:	10803fcc 	andi	r2,r2,255
    872c:	10000726 	beq	r2,zero,874c <OSTaskCreate+0x84>
    8730:	e0bfff17 	ldw	r2,-4(fp)
    8734:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    8738:	e0bffb17 	ldw	r2,-20(fp)
    873c:	1001703a 	wrctl	status,r2
}
    8740:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
    8744:	00800f04 	movi	r2,60
    8748:	00004306 	br	8858 <OSTaskCreate+0x190>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
    874c:	e0bff303 	ldbu	r2,-52(fp)
    8750:	100690ba 	slli	r3,r2,2
    8754:	008000b4 	movhi	r2,2
    8758:	1885883a 	add	r2,r3,r2
    875c:	10a5ac17 	ldw	r2,-26960(r2)
    8760:	1000371e 	bne	r2,zero,8840 <OSTaskCreate+0x178>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
    8764:	e0bff303 	ldbu	r2,-52(fp)
    8768:	100890ba 	slli	r4,r2,2
    876c:	00c00044 	movi	r3,1
    8770:	008000b4 	movhi	r2,2
    8774:	2085883a 	add	r2,r4,r2
    8778:	10e5ac15 	stw	r3,-26960(r2)
    877c:	e0bfff17 	ldw	r2,-4(fp)
    8780:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
    8784:	e0bffa17 	ldw	r2,-24(fp)
    8788:	1001703a 	wrctl	status,r2
}
    878c:	0001883a 	nop
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
    8790:	000f883a 	mov	r7,zero
    8794:	e1bff417 	ldw	r6,-48(fp)
    8798:	e17ff517 	ldw	r5,-44(fp)
    879c:	e13ff617 	ldw	r4,-40(fp)
    87a0:	000d4a00 	call	d4a0 <OSTaskStkInit>
    87a4:	e0bffe15 	stw	r2,-8(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
    87a8:	e0bff303 	ldbu	r2,-52(fp)
    87ac:	d8000215 	stw	zero,8(sp)
    87b0:	d8000115 	stw	zero,4(sp)
    87b4:	d8000015 	stw	zero,0(sp)
    87b8:	000f883a 	mov	r7,zero
    87bc:	000d883a 	mov	r6,zero
    87c0:	e17ffe17 	ldw	r5,-8(fp)
    87c4:	1009883a 	mov	r4,r2
    87c8:	00042640 	call	4264 <OS_TCBInit>
    87cc:	e0bffdc5 	stb	r2,-9(fp)
        if (err == OS_ERR_NONE) {
    87d0:	e0bffdc3 	ldbu	r2,-9(fp)
    87d4:	1000061e 	bne	r2,zero,87f0 <OSTaskCreate+0x128>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
    87d8:	d0a6e543 	ldbu	r2,-25707(gp)
    87dc:	10803fcc 	andi	r2,r2,255
    87e0:	10800058 	cmpnei	r2,r2,1
    87e4:	1000141e 	bne	r2,zero,8838 <OSTaskCreate+0x170>
                OS_Sched();
    87e8:	0003e7c0 	call	3e7c <OS_Sched>
    87ec:	00001206 	br	8838 <OSTaskCreate+0x170>
  NIOS2_READ_STATUS (context);
    87f0:	0005303a 	rdctl	r2,status
    87f4:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    87f8:	e0fff817 	ldw	r3,-32(fp)
    87fc:	00bfff84 	movi	r2,-2
    8800:	1884703a 	and	r2,r3,r2
    8804:	1001703a 	wrctl	status,r2
  return context;
    8808:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
    880c:	e0bfff15 	stw	r2,-4(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
    8810:	e0bff303 	ldbu	r2,-52(fp)
    8814:	100690ba 	slli	r3,r2,2
    8818:	008000b4 	movhi	r2,2
    881c:	1885883a 	add	r2,r3,r2
    8820:	1025ac15 	stw	zero,-26960(r2)
    8824:	e0bfff17 	ldw	r2,-4(fp)
    8828:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
    882c:	e0bff917 	ldw	r2,-28(fp)
    8830:	1001703a 	wrctl	status,r2
}
    8834:	0001883a 	nop
            OS_EXIT_CRITICAL();
        }
        return (err);
    8838:	e0bffdc3 	ldbu	r2,-9(fp)
    883c:	00000606 	br	8858 <OSTaskCreate+0x190>
    8840:	e0bfff17 	ldw	r2,-4(fp)
    8844:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context);
    8848:	e0bff717 	ldw	r2,-36(fp)
    884c:	1001703a 	wrctl	status,r2
}
    8850:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
    8854:	00800a04 	movi	r2,40
}
    8858:	e037883a 	mov	sp,fp
    885c:	dfc00117 	ldw	ra,4(sp)
    8860:	df000017 	ldw	fp,0(sp)
    8864:	dec00204 	addi	sp,sp,8
    8868:	f800283a 	ret

0000886c <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
    886c:	deffec04 	addi	sp,sp,-80
    8870:	dfc01315 	stw	ra,76(sp)
    8874:	df001215 	stw	fp,72(sp)
    8878:	df001204 	addi	fp,sp,72
    887c:	e13ff615 	stw	r4,-40(fp)
    8880:	e17ff515 	stw	r5,-44(fp)
    8884:	e1bff415 	stw	r6,-48(fp)
    8888:	3809883a 	mov	r4,r7
    888c:	e0c00217 	ldw	r3,8(fp)
    8890:	e0800617 	ldw	r2,24(fp)
    8894:	e13ff305 	stb	r4,-52(fp)
    8898:	e0fff20d 	sth	r3,-56(fp)
    889c:	e0bff10d 	sth	r2,-60(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
    88a0:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
    88a4:	e0bff303 	ldbu	r2,-52(fp)
    88a8:	10800570 	cmpltui	r2,r2,21
    88ac:	1000021e 	bne	r2,zero,88b8 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
    88b0:	00800a84 	movi	r2,42
    88b4:	00005f06 	br	8a34 <OSTaskCreateExt+0x1c8>
  NIOS2_READ_STATUS (context);
    88b8:	0005303a 	rdctl	r2,status
    88bc:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    88c0:	e0fffc17 	ldw	r3,-16(fp)
    88c4:	00bfff84 	movi	r2,-2
    88c8:	1884703a 	and	r2,r3,r2
    88cc:	1001703a 	wrctl	status,r2
  return context;
    88d0:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    88d4:	e0bfff15 	stw	r2,-4(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
    88d8:	d0a6e343 	ldbu	r2,-25715(gp)
    88dc:	10803fcc 	andi	r2,r2,255
    88e0:	10000726 	beq	r2,zero,8900 <OSTaskCreateExt+0x94>
    88e4:	e0bfff17 	ldw	r2,-4(fp)
    88e8:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    88ec:	e0bffb17 	ldw	r2,-20(fp)
    88f0:	1001703a 	wrctl	status,r2
}
    88f4:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
    88f8:	00800f04 	movi	r2,60
    88fc:	00004d06 	br	8a34 <OSTaskCreateExt+0x1c8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
    8900:	e0bff303 	ldbu	r2,-52(fp)
    8904:	100690ba 	slli	r3,r2,2
    8908:	008000b4 	movhi	r2,2
    890c:	1885883a 	add	r2,r3,r2
    8910:	10a5ac17 	ldw	r2,-26960(r2)
    8914:	1000411e 	bne	r2,zero,8a1c <OSTaskCreateExt+0x1b0>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
    8918:	e0bff303 	ldbu	r2,-52(fp)
    891c:	100890ba 	slli	r4,r2,2
    8920:	00c00044 	movi	r3,1
    8924:	008000b4 	movhi	r2,2
    8928:	2085883a 	add	r2,r4,r2
    892c:	10e5ac15 	stw	r3,-26960(r2)
    8930:	e0bfff17 	ldw	r2,-4(fp)
    8934:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
    8938:	e0bffa17 	ldw	r2,-24(fp)
    893c:	1001703a 	wrctl	status,r2
}
    8940:	0001883a 	nop
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
    8944:	e0bff10b 	ldhu	r2,-60(fp)
    8948:	100d883a 	mov	r6,r2
    894c:	e1400417 	ldw	r5,16(fp)
    8950:	e1000317 	ldw	r4,12(fp)
    8954:	00098e40 	call	98e4 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
    8958:	e0bff10b 	ldhu	r2,-60(fp)
    895c:	100f883a 	mov	r7,r2
    8960:	e1bff417 	ldw	r6,-48(fp)
    8964:	e17ff517 	ldw	r5,-44(fp)
    8968:	e13ff617 	ldw	r4,-40(fp)
    896c:	000d4a00 	call	d4a0 <OSTaskStkInit>
    8970:	e0bffe15 	stw	r2,-8(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
    8974:	e0fff303 	ldbu	r3,-52(fp)
    8978:	e13ff20b 	ldhu	r4,-56(fp)
    897c:	e0bff10b 	ldhu	r2,-60(fp)
    8980:	d8800215 	stw	r2,8(sp)
    8984:	e0800517 	ldw	r2,20(fp)
    8988:	d8800115 	stw	r2,4(sp)
    898c:	e0800417 	ldw	r2,16(fp)
    8990:	d8800015 	stw	r2,0(sp)
    8994:	200f883a 	mov	r7,r4
    8998:	e1800317 	ldw	r6,12(fp)
    899c:	e17ffe17 	ldw	r5,-8(fp)
    89a0:	1809883a 	mov	r4,r3
    89a4:	00042640 	call	4264 <OS_TCBInit>
    89a8:	e0bffdc5 	stb	r2,-9(fp)
        if (err == OS_ERR_NONE) {
    89ac:	e0bffdc3 	ldbu	r2,-9(fp)
    89b0:	1000061e 	bne	r2,zero,89cc <OSTaskCreateExt+0x160>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
    89b4:	d0a6e543 	ldbu	r2,-25707(gp)
    89b8:	10803fcc 	andi	r2,r2,255
    89bc:	10800058 	cmpnei	r2,r2,1
    89c0:	1000141e 	bne	r2,zero,8a14 <OSTaskCreateExt+0x1a8>
                OS_Sched();
    89c4:	0003e7c0 	call	3e7c <OS_Sched>
    89c8:	00001206 	br	8a14 <OSTaskCreateExt+0x1a8>
  NIOS2_READ_STATUS (context);
    89cc:	0005303a 	rdctl	r2,status
    89d0:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    89d4:	e0fff817 	ldw	r3,-32(fp)
    89d8:	00bfff84 	movi	r2,-2
    89dc:	1884703a 	and	r2,r3,r2
    89e0:	1001703a 	wrctl	status,r2
  return context;
    89e4:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
    89e8:	e0bfff15 	stw	r2,-4(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
    89ec:	e0bff303 	ldbu	r2,-52(fp)
    89f0:	100690ba 	slli	r3,r2,2
    89f4:	008000b4 	movhi	r2,2
    89f8:	1885883a 	add	r2,r3,r2
    89fc:	1025ac15 	stw	zero,-26960(r2)
    8a00:	e0bfff17 	ldw	r2,-4(fp)
    8a04:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
    8a08:	e0bff917 	ldw	r2,-28(fp)
    8a0c:	1001703a 	wrctl	status,r2
}
    8a10:	0001883a 	nop
            OS_EXIT_CRITICAL();
        }
        return (err);
    8a14:	e0bffdc3 	ldbu	r2,-9(fp)
    8a18:	00000606 	br	8a34 <OSTaskCreateExt+0x1c8>
    8a1c:	e0bfff17 	ldw	r2,-4(fp)
    8a20:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context);
    8a24:	e0bff717 	ldw	r2,-36(fp)
    8a28:	1001703a 	wrctl	status,r2
}
    8a2c:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
    8a30:	00800a04 	movi	r2,40
}
    8a34:	e037883a 	mov	sp,fp
    8a38:	dfc00117 	ldw	ra,4(sp)
    8a3c:	df000017 	ldw	fp,0(sp)
    8a40:	dec00204 	addi	sp,sp,8
    8a44:	f800283a 	ret

00008a48 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
    8a48:	defff404 	addi	sp,sp,-48
    8a4c:	dfc00b15 	stw	ra,44(sp)
    8a50:	df000a15 	stw	fp,40(sp)
    8a54:	df000a04 	addi	fp,sp,40
    8a58:	2005883a 	mov	r2,r4
    8a5c:	e0bff605 	stb	r2,-40(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
    8a60:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
    8a64:	d0a6e343 	ldbu	r2,-25715(gp)
    8a68:	10803fcc 	andi	r2,r2,255
    8a6c:	10000226 	beq	r2,zero,8a78 <OSTaskDel+0x30>
        return (OS_ERR_TASK_DEL_ISR);
    8a70:	00801004 	movi	r2,64
    8a74:	0000c006 	br	8d78 <OSTaskDel+0x330>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
    8a78:	e0bff603 	ldbu	r2,-40(fp)
    8a7c:	10800518 	cmpnei	r2,r2,20
    8a80:	1000021e 	bne	r2,zero,8a8c <OSTaskDel+0x44>
        return (OS_ERR_TASK_DEL_IDLE);
    8a84:	00800f84 	movi	r2,62
    8a88:	0000bb06 	br	8d78 <OSTaskDel+0x330>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
    8a8c:	e0bff603 	ldbu	r2,-40(fp)
    8a90:	10800530 	cmpltui	r2,r2,20
    8a94:	1000051e 	bne	r2,zero,8aac <OSTaskDel+0x64>
        if (prio != OS_PRIO_SELF) {
    8a98:	e0bff603 	ldbu	r2,-40(fp)
    8a9c:	10803fe0 	cmpeqi	r2,r2,255
    8aa0:	1000021e 	bne	r2,zero,8aac <OSTaskDel+0x64>
            return (OS_ERR_PRIO_INVALID);
    8aa4:	00800a84 	movi	r2,42
    8aa8:	0000b306 	br	8d78 <OSTaskDel+0x330>
  NIOS2_READ_STATUS (context);
    8aac:	0005303a 	rdctl	r2,status
    8ab0:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8ab4:	e0fffc17 	ldw	r3,-16(fp)
    8ab8:	00bfff84 	movi	r2,-2
    8abc:	1884703a 	and	r2,r3,r2
    8ac0:	1001703a 	wrctl	status,r2
  return context;
    8ac4:	e0bffc17 	ldw	r2,-16(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
    8ac8:	e0bfff15 	stw	r2,-4(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
    8acc:	e0bff603 	ldbu	r2,-40(fp)
    8ad0:	10803fd8 	cmpnei	r2,r2,255
    8ad4:	1000031e 	bne	r2,zero,8ae4 <OSTaskDel+0x9c>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
    8ad8:	d0a6e717 	ldw	r2,-25700(gp)
    8adc:	10800c83 	ldbu	r2,50(r2)
    8ae0:	e0bff605 	stb	r2,-40(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    8ae4:	e0bff603 	ldbu	r2,-40(fp)
    8ae8:	100690ba 	slli	r3,r2,2
    8aec:	008000b4 	movhi	r2,2
    8af0:	1885883a 	add	r2,r3,r2
    8af4:	10a5ac17 	ldw	r2,-26960(r2)
    8af8:	e0bffe15 	stw	r2,-8(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
    8afc:	e0bffe17 	ldw	r2,-8(fp)
    8b00:	1000071e 	bne	r2,zero,8b20 <OSTaskDel+0xd8>
    8b04:	e0bfff17 	ldw	r2,-4(fp)
    8b08:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    8b0c:	e0bffb17 	ldw	r2,-20(fp)
    8b10:	1001703a 	wrctl	status,r2
}
    8b14:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    8b18:	008010c4 	movi	r2,67
    8b1c:	00009606 	br	8d78 <OSTaskDel+0x330>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
    8b20:	e0bffe17 	ldw	r2,-8(fp)
    8b24:	10800058 	cmpnei	r2,r2,1
    8b28:	1000071e 	bne	r2,zero,8b48 <OSTaskDel+0x100>
    8b2c:	e0bfff17 	ldw	r2,-4(fp)
    8b30:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
    8b34:	e0bffa17 	ldw	r2,-24(fp)
    8b38:	1001703a 	wrctl	status,r2
}
    8b3c:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
    8b40:	00800f44 	movi	r2,61
    8b44:	00008c06 	br	8d78 <OSTaskDel+0x330>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
    8b48:	e0bffe17 	ldw	r2,-8(fp)
    8b4c:	10800d03 	ldbu	r2,52(r2)
    8b50:	10c03fcc 	andi	r3,r2,255
    8b54:	d0a6e484 	addi	r2,gp,-25710
    8b58:	1885883a 	add	r2,r3,r2
    8b5c:	10800003 	ldbu	r2,0(r2)
    8b60:	1007883a 	mov	r3,r2
    8b64:	e0bffe17 	ldw	r2,-8(fp)
    8b68:	10800d43 	ldbu	r2,53(r2)
    8b6c:	0084303a 	nor	r2,zero,r2
    8b70:	1884703a 	and	r2,r3,r2
    8b74:	1009883a 	mov	r4,r2
    8b78:	e0bffe17 	ldw	r2,-8(fp)
    8b7c:	10800d03 	ldbu	r2,52(r2)
    8b80:	10c03fcc 	andi	r3,r2,255
    8b84:	d0a6e484 	addi	r2,gp,-25710
    8b88:	1885883a 	add	r2,r3,r2
    8b8c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
    8b90:	e0bffe17 	ldw	r2,-8(fp)
    8b94:	10800d03 	ldbu	r2,52(r2)
    8b98:	10c03fcc 	andi	r3,r2,255
    8b9c:	d0a6e484 	addi	r2,gp,-25710
    8ba0:	1885883a 	add	r2,r3,r2
    8ba4:	10800003 	ldbu	r2,0(r2)
    8ba8:	10803fcc 	andi	r2,r2,255
    8bac:	1000071e 	bne	r2,zero,8bcc <OSTaskDel+0x184>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
    8bb0:	e0bffe17 	ldw	r2,-8(fp)
    8bb4:	10800d83 	ldbu	r2,54(r2)
    8bb8:	0084303a 	nor	r2,zero,r2
    8bbc:	1007883a 	mov	r3,r2
    8bc0:	d0a6e443 	ldbu	r2,-25711(gp)
    8bc4:	1884703a 	and	r2,r3,r2
    8bc8:	d0a6e445 	stb	r2,-25711(gp)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
    8bcc:	e0bffe17 	ldw	r2,-8(fp)
    8bd0:	10800717 	ldw	r2,28(r2)
    8bd4:	10000526 	beq	r2,zero,8bec <OSTaskDel+0x1a4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
    8bd8:	e0bffe17 	ldw	r2,-8(fp)
    8bdc:	10800717 	ldw	r2,28(r2)
    8be0:	100b883a 	mov	r5,r2
    8be4:	e13ffe17 	ldw	r4,-8(fp)
    8be8:	00038200 	call	3820 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
    8bec:	e0bffe17 	ldw	r2,-8(fp)
    8bf0:	10800817 	ldw	r2,32(r2)
    8bf4:	10000526 	beq	r2,zero,8c0c <OSTaskDel+0x1c4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
    8bf8:	e0bffe17 	ldw	r2,-8(fp)
    8bfc:	10800817 	ldw	r2,32(r2)
    8c00:	100b883a 	mov	r5,r2
    8c04:	e13ffe17 	ldw	r4,-8(fp)
    8c08:	00038d00 	call	38d0 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
    8c0c:	e0bffe17 	ldw	r2,-8(fp)
    8c10:	10800a17 	ldw	r2,40(r2)
    8c14:	e0bffd15 	stw	r2,-12(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
    8c18:	e0bffd17 	ldw	r2,-12(fp)
    8c1c:	10000226 	beq	r2,zero,8c28 <OSTaskDel+0x1e0>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
    8c20:	e13ffd17 	ldw	r4,-12(fp)
    8c24:	0005df40 	call	5df4 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
    8c28:	e0bffe17 	ldw	r2,-8(fp)
    8c2c:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
    8c30:	e0bffe17 	ldw	r2,-8(fp)
    8c34:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
    8c38:	e0bffe17 	ldw	r2,-8(fp)
    8c3c:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
    8c40:	d0a6e383 	ldbu	r2,-25714(gp)
    8c44:	10803fcc 	andi	r2,r2,255
    8c48:	10803fe0 	cmpeqi	r2,r2,255
    8c4c:	1000031e 	bne	r2,zero,8c5c <OSTaskDel+0x214>
        OSLockNesting++;
    8c50:	d0a6e383 	ldbu	r2,-25714(gp)
    8c54:	10800044 	addi	r2,r2,1
    8c58:	d0a6e385 	stb	r2,-25714(gp)
    8c5c:	e0bfff17 	ldw	r2,-4(fp)
    8c60:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
    8c64:	e0bff817 	ldw	r2,-32(fp)
    8c68:	1001703a 	wrctl	status,r2
}
    8c6c:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
    8c70:	00034280 	call	3428 <OS_Dummy>
  NIOS2_READ_STATUS (context);
    8c74:	0005303a 	rdctl	r2,status
    8c78:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8c7c:	e0fff917 	ldw	r3,-28(fp)
    8c80:	00bfff84 	movi	r2,-2
    8c84:	1884703a 	and	r2,r3,r2
    8c88:	1001703a 	wrctl	status,r2
  return context;
    8c8c:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
    8c90:	e0bfff15 	stw	r2,-4(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
    8c94:	d0a6e383 	ldbu	r2,-25714(gp)
    8c98:	10803fcc 	andi	r2,r2,255
    8c9c:	10000326 	beq	r2,zero,8cac <OSTaskDel+0x264>
        OSLockNesting--;
    8ca0:	d0a6e383 	ldbu	r2,-25714(gp)
    8ca4:	10bfffc4 	addi	r2,r2,-1
    8ca8:	d0a6e385 	stb	r2,-25714(gp)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
    8cac:	e13ffe17 	ldw	r4,-8(fp)
    8cb0:	000d6100 	call	d610 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
    8cb4:	d0a6e583 	ldbu	r2,-25706(gp)
    8cb8:	10bfffc4 	addi	r2,r2,-1
    8cbc:	d0a6e585 	stb	r2,-25706(gp)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
    8cc0:	e0bff603 	ldbu	r2,-40(fp)
    8cc4:	100690ba 	slli	r3,r2,2
    8cc8:	008000b4 	movhi	r2,2
    8ccc:	1885883a 	add	r2,r3,r2
    8cd0:	1025ac15 	stw	zero,-26960(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
    8cd4:	e0bffe17 	ldw	r2,-8(fp)
    8cd8:	10800617 	ldw	r2,24(r2)
    8cdc:	1000071e 	bne	r2,zero,8cfc <OSTaskDel+0x2b4>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
    8ce0:	e0bffe17 	ldw	r2,-8(fp)
    8ce4:	10800517 	ldw	r2,20(r2)
    8ce8:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
    8cec:	e0bffe17 	ldw	r2,-8(fp)
    8cf0:	10800517 	ldw	r2,20(r2)
    8cf4:	d0a6ea15 	stw	r2,-25688(gp)
    8cf8:	00000a06 	br	8d24 <OSTaskDel+0x2dc>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
    8cfc:	e0bffe17 	ldw	r2,-8(fp)
    8d00:	10800617 	ldw	r2,24(r2)
    8d04:	e0fffe17 	ldw	r3,-8(fp)
    8d08:	18c00517 	ldw	r3,20(r3)
    8d0c:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
    8d10:	e0bffe17 	ldw	r2,-8(fp)
    8d14:	10800517 	ldw	r2,20(r2)
    8d18:	e0fffe17 	ldw	r3,-8(fp)
    8d1c:	18c00617 	ldw	r3,24(r3)
    8d20:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
    8d24:	d0e6e817 	ldw	r3,-25696(gp)
    8d28:	e0bffe17 	ldw	r2,-8(fp)
    8d2c:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
    8d30:	e0bffe17 	ldw	r2,-8(fp)
    8d34:	d0a6e815 	stw	r2,-25696(gp)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
    8d38:	e0bffe17 	ldw	r2,-8(fp)
    8d3c:	00c00fc4 	movi	r3,63
    8d40:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
    8d44:	e0bffe17 	ldw	r2,-8(fp)
    8d48:	10001345 	stb	zero,77(r2)
    8d4c:	e0bfff17 	ldw	r2,-4(fp)
    8d50:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context);
    8d54:	e0bff717 	ldw	r2,-36(fp)
    8d58:	1001703a 	wrctl	status,r2
}
    8d5c:	0001883a 	nop
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
    8d60:	d0a6e543 	ldbu	r2,-25707(gp)
    8d64:	10803fcc 	andi	r2,r2,255
    8d68:	10800058 	cmpnei	r2,r2,1
    8d6c:	1000011e 	bne	r2,zero,8d74 <OSTaskDel+0x32c>
        OS_Sched();                                     /* Find new highest priority task              */
    8d70:	0003e7c0 	call	3e7c <OS_Sched>
    }
    return (OS_ERR_NONE);
    8d74:	0005883a 	mov	r2,zero
}
    8d78:	e037883a 	mov	sp,fp
    8d7c:	dfc00117 	ldw	ra,4(sp)
    8d80:	df000017 	ldw	fp,0(sp)
    8d84:	dec00204 	addi	sp,sp,8
    8d88:	f800283a 	ret

00008d8c <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
    8d8c:	defff504 	addi	sp,sp,-44
    8d90:	df000a15 	stw	fp,40(sp)
    8d94:	df000a04 	addi	fp,sp,40
    8d98:	2005883a 	mov	r2,r4
    8d9c:	e0bff605 	stb	r2,-40(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    8da0:	e03fff15 	stw	zero,-4(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
    8da4:	e0bff603 	ldbu	r2,-40(fp)
    8da8:	10800518 	cmpnei	r2,r2,20
    8dac:	1000021e 	bne	r2,zero,8db8 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
    8db0:	00800f84 	movi	r2,62
    8db4:	00004706 	br	8ed4 <OSTaskDelReq+0x148>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
    8db8:	e0bff603 	ldbu	r2,-40(fp)
    8dbc:	10800530 	cmpltui	r2,r2,20
    8dc0:	1000051e 	bne	r2,zero,8dd8 <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
    8dc4:	e0bff603 	ldbu	r2,-40(fp)
    8dc8:	10803fe0 	cmpeqi	r2,r2,255
    8dcc:	1000021e 	bne	r2,zero,8dd8 <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
    8dd0:	00800a84 	movi	r2,42
    8dd4:	00003f06 	br	8ed4 <OSTaskDelReq+0x148>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
    8dd8:	e0bff603 	ldbu	r2,-40(fp)
    8ddc:	10803fd8 	cmpnei	r2,r2,255
    8de0:	1000121e 	bne	r2,zero,8e2c <OSTaskDelReq+0xa0>
  NIOS2_READ_STATUS (context);
    8de4:	0005303a 	rdctl	r2,status
    8de8:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8dec:	e0fffb17 	ldw	r3,-20(fp)
    8df0:	00bfff84 	movi	r2,-2
    8df4:	1884703a 	and	r2,r3,r2
    8df8:	1001703a 	wrctl	status,r2
  return context;
    8dfc:	e0bffb17 	ldw	r2,-20(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
    8e00:	e0bfff15 	stw	r2,-4(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
    8e04:	d0a6e717 	ldw	r2,-25700(gp)
    8e08:	10800dc3 	ldbu	r2,55(r2)
    8e0c:	e0bffdc5 	stb	r2,-9(fp)
    8e10:	e0bfff17 	ldw	r2,-4(fp)
    8e14:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    8e18:	e0bffc17 	ldw	r2,-16(fp)
    8e1c:	1001703a 	wrctl	status,r2
}
    8e20:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (stat);
    8e24:	e0bffdc3 	ldbu	r2,-9(fp)
    8e28:	00002a06 	br	8ed4 <OSTaskDelReq+0x148>
  NIOS2_READ_STATUS (context);
    8e2c:	0005303a 	rdctl	r2,status
    8e30:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8e34:	e0fffa17 	ldw	r3,-24(fp)
    8e38:	00bfff84 	movi	r2,-2
    8e3c:	1884703a 	and	r2,r3,r2
    8e40:	1001703a 	wrctl	status,r2
  return context;
    8e44:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    8e48:	e0bfff15 	stw	r2,-4(fp)
    ptcb = OSTCBPrioTbl[prio];
    8e4c:	e0bff603 	ldbu	r2,-40(fp)
    8e50:	100690ba 	slli	r3,r2,2
    8e54:	008000b4 	movhi	r2,2
    8e58:	1885883a 	add	r2,r3,r2
    8e5c:	10a5ac17 	ldw	r2,-26960(r2)
    8e60:	e0bffe15 	stw	r2,-8(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
    8e64:	e0bffe17 	ldw	r2,-8(fp)
    8e68:	1000071e 	bne	r2,zero,8e88 <OSTaskDelReq+0xfc>
    8e6c:	e0bfff17 	ldw	r2,-4(fp)
    8e70:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
    8e74:	e0bff917 	ldw	r2,-28(fp)
    8e78:	1001703a 	wrctl	status,r2
}
    8e7c:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
    8e80:	008010c4 	movi	r2,67
    8e84:	00001306 	br	8ed4 <OSTaskDelReq+0x148>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
    8e88:	e0bffe17 	ldw	r2,-8(fp)
    8e8c:	10800058 	cmpnei	r2,r2,1
    8e90:	1000071e 	bne	r2,zero,8eb0 <OSTaskDelReq+0x124>
    8e94:	e0bfff17 	ldw	r2,-4(fp)
    8e98:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
    8e9c:	e0bff817 	ldw	r2,-32(fp)
    8ea0:	1001703a 	wrctl	status,r2
}
    8ea4:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
    8ea8:	00800f44 	movi	r2,61
    8eac:	00000906 	br	8ed4 <OSTaskDelReq+0x148>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
    8eb0:	e0bffe17 	ldw	r2,-8(fp)
    8eb4:	00c00fc4 	movi	r3,63
    8eb8:	10c00dc5 	stb	r3,55(r2)
    8ebc:	e0bfff17 	ldw	r2,-4(fp)
    8ec0:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context);
    8ec4:	e0bff717 	ldw	r2,-36(fp)
    8ec8:	1001703a 	wrctl	status,r2
}
    8ecc:	0001883a 	nop
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    8ed0:	0005883a 	mov	r2,zero
}
    8ed4:	e037883a 	mov	sp,fp
    8ed8:	df000017 	ldw	fp,0(sp)
    8edc:	dec00104 	addi	sp,sp,4
    8ee0:	f800283a 	ret

00008ee4 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
    8ee4:	defff404 	addi	sp,sp,-48
    8ee8:	dfc00b15 	stw	ra,44(sp)
    8eec:	df000a15 	stw	fp,40(sp)
    8ef0:	df000a04 	addi	fp,sp,40
    8ef4:	2005883a 	mov	r2,r4
    8ef8:	e17ff715 	stw	r5,-36(fp)
    8efc:	e1bff615 	stw	r6,-40(fp)
    8f00:	e0bff805 	stb	r2,-32(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
    8f04:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
    8f08:	e0bff617 	ldw	r2,-40(fp)
    8f0c:	1000021e 	bne	r2,zero,8f18 <OSTaskNameGet+0x34>
        return (0);
    8f10:	0005883a 	mov	r2,zero
    8f14:	00005506 	br	906c <OSTaskNameGet+0x188>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
    8f18:	e0bff803 	ldbu	r2,-32(fp)
    8f1c:	10800570 	cmpltui	r2,r2,21
    8f20:	1000081e 	bne	r2,zero,8f44 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
    8f24:	e0bff803 	ldbu	r2,-32(fp)
    8f28:	10803fe0 	cmpeqi	r2,r2,255
    8f2c:	1000051e 	bne	r2,zero,8f44 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
    8f30:	e0bff617 	ldw	r2,-40(fp)
    8f34:	00c00a84 	movi	r3,42
    8f38:	10c00005 	stb	r3,0(r2)
            return (0);
    8f3c:	0005883a 	mov	r2,zero
    8f40:	00004a06 	br	906c <OSTaskNameGet+0x188>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
    8f44:	e0bff717 	ldw	r2,-36(fp)
    8f48:	1000051e 	bne	r2,zero,8f60 <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
    8f4c:	e0bff617 	ldw	r2,-40(fp)
    8f50:	00c00304 	movi	r3,12
    8f54:	10c00005 	stb	r3,0(r2)
        return (0);
    8f58:	0005883a 	mov	r2,zero
    8f5c:	00004306 	br	906c <OSTaskNameGet+0x188>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
    8f60:	d0a6e343 	ldbu	r2,-25715(gp)
    8f64:	10803fcc 	andi	r2,r2,255
    8f68:	10000526 	beq	r2,zero,8f80 <OSTaskNameGet+0x9c>
        *perr = OS_ERR_NAME_GET_ISR;
    8f6c:	e0bff617 	ldw	r2,-40(fp)
    8f70:	00c00444 	movi	r3,17
    8f74:	10c00005 	stb	r3,0(r2)
        return (0);
    8f78:	0005883a 	mov	r2,zero
    8f7c:	00003b06 	br	906c <OSTaskNameGet+0x188>
  NIOS2_READ_STATUS (context);
    8f80:	0005303a 	rdctl	r2,status
    8f84:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8f88:	e0fffc17 	ldw	r3,-16(fp)
    8f8c:	00bfff84 	movi	r2,-2
    8f90:	1884703a 	and	r2,r3,r2
    8f94:	1001703a 	wrctl	status,r2
  return context;
    8f98:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    8f9c:	e0bfff15 	stw	r2,-4(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
    8fa0:	e0bff803 	ldbu	r2,-32(fp)
    8fa4:	10803fd8 	cmpnei	r2,r2,255
    8fa8:	1000031e 	bne	r2,zero,8fb8 <OSTaskNameGet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
    8fac:	d0a6e717 	ldw	r2,-25700(gp)
    8fb0:	10800c83 	ldbu	r2,50(r2)
    8fb4:	e0bff805 	stb	r2,-32(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    8fb8:	e0bff803 	ldbu	r2,-32(fp)
    8fbc:	100690ba 	slli	r3,r2,2
    8fc0:	008000b4 	movhi	r2,2
    8fc4:	1885883a 	add	r2,r3,r2
    8fc8:	10a5ac17 	ldw	r2,-26960(r2)
    8fcc:	e0bffe15 	stw	r2,-8(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
    8fd0:	e0bffe17 	ldw	r2,-8(fp)
    8fd4:	10000a1e 	bne	r2,zero,9000 <OSTaskNameGet+0x11c>
    8fd8:	e0bfff17 	ldw	r2,-4(fp)
    8fdc:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    8fe0:	e0bffb17 	ldw	r2,-20(fp)
    8fe4:	1001703a 	wrctl	status,r2
}
    8fe8:	0001883a 	nop
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
    8fec:	e0bff617 	ldw	r2,-40(fp)
    8ff0:	00c010c4 	movi	r3,67
    8ff4:	10c00005 	stb	r3,0(r2)
        return (0);
    8ff8:	0005883a 	mov	r2,zero
    8ffc:	00001b06 	br	906c <OSTaskNameGet+0x188>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
    9000:	e0bffe17 	ldw	r2,-8(fp)
    9004:	10800058 	cmpnei	r2,r2,1
    9008:	10000a1e 	bne	r2,zero,9034 <OSTaskNameGet+0x150>
    900c:	e0bfff17 	ldw	r2,-4(fp)
    9010:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
    9014:	e0bffa17 	ldw	r2,-24(fp)
    9018:	1001703a 	wrctl	status,r2
}
    901c:	0001883a 	nop
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
    9020:	e0bff617 	ldw	r2,-40(fp)
    9024:	00c010c4 	movi	r3,67
    9028:	10c00005 	stb	r3,0(r2)
        return (0);
    902c:	0005883a 	mov	r2,zero
    9030:	00000e06 	br	906c <OSTaskNameGet+0x188>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
    9034:	e0bffe17 	ldw	r2,-8(fp)
    9038:	10801304 	addi	r2,r2,76
    903c:	100b883a 	mov	r5,r2
    9040:	e13ff717 	ldw	r4,-36(fp)
    9044:	0003fb40 	call	3fb4 <OS_StrCopy>
    9048:	e0bffdc5 	stb	r2,-9(fp)
    904c:	e0bfff17 	ldw	r2,-4(fp)
    9050:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
    9054:	e0bff917 	ldw	r2,-28(fp)
    9058:	1001703a 	wrctl	status,r2
}
    905c:	0001883a 	nop
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    9060:	e0bff617 	ldw	r2,-40(fp)
    9064:	10000005 	stb	zero,0(r2)
    return (len);
    9068:	e0bffdc3 	ldbu	r2,-9(fp)
}
    906c:	e037883a 	mov	sp,fp
    9070:	dfc00117 	ldw	ra,4(sp)
    9074:	df000017 	ldw	fp,0(sp)
    9078:	dec00204 	addi	sp,sp,8
    907c:	f800283a 	ret

00009080 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
    9080:	defff304 	addi	sp,sp,-52
    9084:	dfc00c15 	stw	ra,48(sp)
    9088:	df000b15 	stw	fp,44(sp)
    908c:	df000b04 	addi	fp,sp,44
    9090:	2005883a 	mov	r2,r4
    9094:	e17ff615 	stw	r5,-40(fp)
    9098:	e1bff515 	stw	r6,-44(fp)
    909c:	e0bff705 	stb	r2,-36(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
    90a0:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
    90a4:	e0bff517 	ldw	r2,-44(fp)
    90a8:	10005e26 	beq	r2,zero,9224 <OSTaskNameSet+0x1a4>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
    90ac:	e0bff703 	ldbu	r2,-36(fp)
    90b0:	10800570 	cmpltui	r2,r2,21
    90b4:	1000071e 	bne	r2,zero,90d4 <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
    90b8:	e0bff703 	ldbu	r2,-36(fp)
    90bc:	10803fe0 	cmpeqi	r2,r2,255
    90c0:	1000041e 	bne	r2,zero,90d4 <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
    90c4:	e0bff517 	ldw	r2,-44(fp)
    90c8:	00c00a84 	movi	r3,42
    90cc:	10c00005 	stb	r3,0(r2)
            return;
    90d0:	00005506 	br	9228 <OSTaskNameSet+0x1a8>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
    90d4:	e0bff617 	ldw	r2,-40(fp)
    90d8:	1000041e 	bne	r2,zero,90ec <OSTaskNameSet+0x6c>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
    90dc:	e0bff517 	ldw	r2,-44(fp)
    90e0:	00c00304 	movi	r3,12
    90e4:	10c00005 	stb	r3,0(r2)
        return;
    90e8:	00004f06 	br	9228 <OSTaskNameSet+0x1a8>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
    90ec:	d0a6e343 	ldbu	r2,-25715(gp)
    90f0:	10803fcc 	andi	r2,r2,255
    90f4:	10000426 	beq	r2,zero,9108 <OSTaskNameSet+0x88>
        *perr = OS_ERR_NAME_SET_ISR;
    90f8:	e0bff517 	ldw	r2,-44(fp)
    90fc:	00c00484 	movi	r3,18
    9100:	10c00005 	stb	r3,0(r2)
        return;
    9104:	00004806 	br	9228 <OSTaskNameSet+0x1a8>
  NIOS2_READ_STATUS (context);
    9108:	0005303a 	rdctl	r2,status
    910c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9110:	e0fffc17 	ldw	r3,-16(fp)
    9114:	00bfff84 	movi	r2,-2
    9118:	1884703a 	and	r2,r3,r2
    911c:	1001703a 	wrctl	status,r2
  return context;
    9120:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    9124:	e0bfff15 	stw	r2,-4(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
    9128:	e0bff703 	ldbu	r2,-36(fp)
    912c:	10803fd8 	cmpnei	r2,r2,255
    9130:	1000031e 	bne	r2,zero,9140 <OSTaskNameSet+0xc0>
        prio = OSTCBCur->OSTCBPrio;
    9134:	d0a6e717 	ldw	r2,-25700(gp)
    9138:	10800c83 	ldbu	r2,50(r2)
    913c:	e0bff705 	stb	r2,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    9140:	e0bff703 	ldbu	r2,-36(fp)
    9144:	100690ba 	slli	r3,r2,2
    9148:	008000b4 	movhi	r2,2
    914c:	1885883a 	add	r2,r3,r2
    9150:	10a5ac17 	ldw	r2,-26960(r2)
    9154:	e0bffe15 	stw	r2,-8(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
    9158:	e0bffe17 	ldw	r2,-8(fp)
    915c:	1000091e 	bne	r2,zero,9184 <OSTaskNameSet+0x104>
    9160:	e0bfff17 	ldw	r2,-4(fp)
    9164:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    9168:	e0bffb17 	ldw	r2,-20(fp)
    916c:	1001703a 	wrctl	status,r2
}
    9170:	0001883a 	nop
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
    9174:	e0bff517 	ldw	r2,-44(fp)
    9178:	00c010c4 	movi	r3,67
    917c:	10c00005 	stb	r3,0(r2)
        return;
    9180:	00002906 	br	9228 <OSTaskNameSet+0x1a8>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
    9184:	e0bffe17 	ldw	r2,-8(fp)
    9188:	10800058 	cmpnei	r2,r2,1
    918c:	1000091e 	bne	r2,zero,91b4 <OSTaskNameSet+0x134>
    9190:	e0bfff17 	ldw	r2,-4(fp)
    9194:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
    9198:	e0bffa17 	ldw	r2,-24(fp)
    919c:	1001703a 	wrctl	status,r2
}
    91a0:	0001883a 	nop
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
    91a4:	e0bff517 	ldw	r2,-44(fp)
    91a8:	00c010c4 	movi	r3,67
    91ac:	10c00005 	stb	r3,0(r2)
        return;
    91b0:	00001d06 	br	9228 <OSTaskNameSet+0x1a8>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
    91b4:	e13ff617 	ldw	r4,-40(fp)
    91b8:	00040280 	call	4028 <OS_StrLen>
    91bc:	e0bffdc5 	stb	r2,-9(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
    91c0:	e0bffdc3 	ldbu	r2,-9(fp)
    91c4:	10800830 	cmpltui	r2,r2,32
    91c8:	1000091e 	bne	r2,zero,91f0 <OSTaskNameSet+0x170>
    91cc:	e0bfff17 	ldw	r2,-4(fp)
    91d0:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
    91d4:	e0bff917 	ldw	r2,-28(fp)
    91d8:	1001703a 	wrctl	status,r2
}
    91dc:	0001883a 	nop
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
    91e0:	e0bff517 	ldw	r2,-44(fp)
    91e4:	00c01044 	movi	r3,65
    91e8:	10c00005 	stb	r3,0(r2)
        return;
    91ec:	00000e06 	br	9228 <OSTaskNameSet+0x1a8>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    91f0:	e0bffe17 	ldw	r2,-8(fp)
    91f4:	10801304 	addi	r2,r2,76
    91f8:	e17ff617 	ldw	r5,-40(fp)
    91fc:	1009883a 	mov	r4,r2
    9200:	0003fb40 	call	3fb4 <OS_StrCopy>
    9204:	e0bfff17 	ldw	r2,-4(fp)
    9208:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
    920c:	e0bff817 	ldw	r2,-32(fp)
    9210:	1001703a 	wrctl	status,r2
}
    9214:	0001883a 	nop
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    9218:	e0bff517 	ldw	r2,-44(fp)
    921c:	10000005 	stb	zero,0(r2)
    9220:	00000106 	br	9228 <OSTaskNameSet+0x1a8>
        return;
    9224:	0001883a 	nop
}
    9228:	e037883a 	mov	sp,fp
    922c:	dfc00117 	ldw	ra,4(sp)
    9230:	df000017 	ldw	fp,0(sp)
    9234:	dec00204 	addi	sp,sp,8
    9238:	f800283a 	ret

0000923c <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
    923c:	defff404 	addi	sp,sp,-48
    9240:	dfc00b15 	stw	ra,44(sp)
    9244:	df000a15 	stw	fp,40(sp)
    9248:	df000a04 	addi	fp,sp,40
    924c:	2005883a 	mov	r2,r4
    9250:	e0bff605 	stb	r2,-40(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
    9254:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
    9258:	e0bff603 	ldbu	r2,-40(fp)
    925c:	10800530 	cmpltui	r2,r2,20
    9260:	1000021e 	bne	r2,zero,926c <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
    9264:	00800a84 	movi	r2,42
    9268:	00006706 	br	9408 <OSTaskResume+0x1cc>
  NIOS2_READ_STATUS (context);
    926c:	0005303a 	rdctl	r2,status
    9270:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9274:	e0fffd17 	ldw	r3,-12(fp)
    9278:	00bfff84 	movi	r2,-2
    927c:	1884703a 	and	r2,r3,r2
    9280:	1001703a 	wrctl	status,r2
  return context;
    9284:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    9288:	e0bfff15 	stw	r2,-4(fp)
    ptcb = OSTCBPrioTbl[prio];
    928c:	e0bff603 	ldbu	r2,-40(fp)
    9290:	100690ba 	slli	r3,r2,2
    9294:	008000b4 	movhi	r2,2
    9298:	1885883a 	add	r2,r3,r2
    929c:	10a5ac17 	ldw	r2,-26960(r2)
    92a0:	e0bffe15 	stw	r2,-8(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
    92a4:	e0bffe17 	ldw	r2,-8(fp)
    92a8:	1000071e 	bne	r2,zero,92c8 <OSTaskResume+0x8c>
    92ac:	e0bfff17 	ldw	r2,-4(fp)
    92b0:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    92b4:	e0bffc17 	ldw	r2,-16(fp)
    92b8:	1001703a 	wrctl	status,r2
}
    92bc:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
    92c0:	00801184 	movi	r2,70
    92c4:	00005006 	br	9408 <OSTaskResume+0x1cc>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
    92c8:	e0bffe17 	ldw	r2,-8(fp)
    92cc:	10800058 	cmpnei	r2,r2,1
    92d0:	1000071e 	bne	r2,zero,92f0 <OSTaskResume+0xb4>
    92d4:	e0bfff17 	ldw	r2,-4(fp)
    92d8:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    92dc:	e0bffb17 	ldw	r2,-20(fp)
    92e0:	1001703a 	wrctl	status,r2
}
    92e4:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    92e8:	008010c4 	movi	r2,67
    92ec:	00004606 	br	9408 <OSTaskResume+0x1cc>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
    92f0:	e0bffe17 	ldw	r2,-8(fp)
    92f4:	10800c03 	ldbu	r2,48(r2)
    92f8:	10803fcc 	andi	r2,r2,255
    92fc:	1080020c 	andi	r2,r2,8
    9300:	10003b26 	beq	r2,zero,93f0 <OSTaskResume+0x1b4>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
    9304:	e0bffe17 	ldw	r2,-8(fp)
    9308:	10c00c03 	ldbu	r3,48(r2)
    930c:	00bffdc4 	movi	r2,-9
    9310:	1884703a 	and	r2,r3,r2
    9314:	1007883a 	mov	r3,r2
    9318:	e0bffe17 	ldw	r2,-8(fp)
    931c:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
    9320:	e0bffe17 	ldw	r2,-8(fp)
    9324:	10800c03 	ldbu	r2,48(r2)
    9328:	10803fcc 	andi	r2,r2,255
    932c:	1000291e 	bne	r2,zero,93d4 <OSTaskResume+0x198>
            if (ptcb->OSTCBDly == 0) {
    9330:	e0bffe17 	ldw	r2,-8(fp)
    9334:	10800b8b 	ldhu	r2,46(r2)
    9338:	10bfffcc 	andi	r2,r2,65535
    933c:	1000201e 	bne	r2,zero,93c0 <OSTaskResume+0x184>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
    9340:	e0bffe17 	ldw	r2,-8(fp)
    9344:	10c00d83 	ldbu	r3,54(r2)
    9348:	d0a6e443 	ldbu	r2,-25711(gp)
    934c:	1884b03a 	or	r2,r3,r2
    9350:	d0a6e445 	stb	r2,-25711(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    9354:	e0bffe17 	ldw	r2,-8(fp)
    9358:	10800d03 	ldbu	r2,52(r2)
    935c:	10c03fcc 	andi	r3,r2,255
    9360:	d0a6e484 	addi	r2,gp,-25710
    9364:	1885883a 	add	r2,r3,r2
    9368:	11000003 	ldbu	r4,0(r2)
    936c:	e0bffe17 	ldw	r2,-8(fp)
    9370:	10800d43 	ldbu	r2,53(r2)
    9374:	e0fffe17 	ldw	r3,-8(fp)
    9378:	18c00d03 	ldbu	r3,52(r3)
    937c:	18c03fcc 	andi	r3,r3,255
    9380:	2084b03a 	or	r2,r4,r2
    9384:	1009883a 	mov	r4,r2
    9388:	d0a6e484 	addi	r2,gp,-25710
    938c:	1885883a 	add	r2,r3,r2
    9390:	11000005 	stb	r4,0(r2)
    9394:	e0bfff17 	ldw	r2,-4(fp)
    9398:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
    939c:	e0bffa17 	ldw	r2,-24(fp)
    93a0:	1001703a 	wrctl	status,r2
}
    93a4:	0001883a 	nop
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
    93a8:	d0a6e543 	ldbu	r2,-25707(gp)
    93ac:	10803fcc 	andi	r2,r2,255
    93b0:	10800058 	cmpnei	r2,r2,1
    93b4:	10000c1e 	bne	r2,zero,93e8 <OSTaskResume+0x1ac>
                    OS_Sched();                               /* Find new highest priority task        */
    93b8:	0003e7c0 	call	3e7c <OS_Sched>
    93bc:	00000a06 	br	93e8 <OSTaskResume+0x1ac>
    93c0:	e0bfff17 	ldw	r2,-4(fp)
    93c4:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
    93c8:	e0bff917 	ldw	r2,-28(fp)
    93cc:	1001703a 	wrctl	status,r2
}
    93d0:	00000506 	br	93e8 <OSTaskResume+0x1ac>
    93d4:	e0bfff17 	ldw	r2,-4(fp)
    93d8:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
    93dc:	e0bff817 	ldw	r2,-32(fp)
    93e0:	1001703a 	wrctl	status,r2
}
    93e4:	0001883a 	nop
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
    93e8:	0005883a 	mov	r2,zero
    93ec:	00000606 	br	9408 <OSTaskResume+0x1cc>
    93f0:	e0bfff17 	ldw	r2,-4(fp)
    93f4:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context);
    93f8:	e0bff717 	ldw	r2,-36(fp)
    93fc:	1001703a 	wrctl	status,r2
}
    9400:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
    9404:	00801104 	movi	r2,68
}
    9408:	e037883a 	mov	sp,fp
    940c:	dfc00117 	ldw	ra,4(sp)
    9410:	df000017 	ldw	fp,0(sp)
    9414:	dec00204 	addi	sp,sp,8
    9418:	f800283a 	ret

0000941c <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
    941c:	defff304 	addi	sp,sp,-52
    9420:	df000c15 	stw	fp,48(sp)
    9424:	df000c04 	addi	fp,sp,48
    9428:	2005883a 	mov	r2,r4
    942c:	e17ff415 	stw	r5,-48(fp)
    9430:	e0bff505 	stb	r2,-44(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    9434:	e03ffd15 	stw	zero,-12(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
    9438:	e0bff503 	ldbu	r2,-44(fp)
    943c:	10800570 	cmpltui	r2,r2,21
    9440:	1000051e 	bne	r2,zero,9458 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
    9444:	e0bff503 	ldbu	r2,-44(fp)
    9448:	10803fe0 	cmpeqi	r2,r2,255
    944c:	1000021e 	bne	r2,zero,9458 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
    9450:	00800a84 	movi	r2,42
    9454:	00005b06 	br	95c4 <OSTaskStkChk+0x1a8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
    9458:	e0bff417 	ldw	r2,-48(fp)
    945c:	1000021e 	bne	r2,zero,9468 <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
    9460:	00800244 	movi	r2,9
    9464:	00005706 	br	95c4 <OSTaskStkChk+0x1a8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
    9468:	e0bff417 	ldw	r2,-48(fp)
    946c:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
    9470:	e0bff417 	ldw	r2,-48(fp)
    9474:	10000115 	stw	zero,4(r2)
  NIOS2_READ_STATUS (context);
    9478:	0005303a 	rdctl	r2,status
    947c:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9480:	e0fffa17 	ldw	r3,-24(fp)
    9484:	00bfff84 	movi	r2,-2
    9488:	1884703a 	and	r2,r3,r2
    948c:	1001703a 	wrctl	status,r2
  return context;
    9490:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();
    9494:	e0bffd15 	stw	r2,-12(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
    9498:	e0bff503 	ldbu	r2,-44(fp)
    949c:	10803fd8 	cmpnei	r2,r2,255
    94a0:	1000031e 	bne	r2,zero,94b0 <OSTaskStkChk+0x94>
        prio = OSTCBCur->OSTCBPrio;
    94a4:	d0a6e717 	ldw	r2,-25700(gp)
    94a8:	10800c83 	ldbu	r2,50(r2)
    94ac:	e0bff505 	stb	r2,-44(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    94b0:	e0bff503 	ldbu	r2,-44(fp)
    94b4:	100690ba 	slli	r3,r2,2
    94b8:	008000b4 	movhi	r2,2
    94bc:	1885883a 	add	r2,r3,r2
    94c0:	10a5ac17 	ldw	r2,-26960(r2)
    94c4:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
    94c8:	e0bffc17 	ldw	r2,-16(fp)
    94cc:	1000071e 	bne	r2,zero,94ec <OSTaskStkChk+0xd0>
    94d0:	e0bffd17 	ldw	r2,-12(fp)
    94d4:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
    94d8:	e0bff917 	ldw	r2,-28(fp)
    94dc:	1001703a 	wrctl	status,r2
}
    94e0:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    94e4:	008010c4 	movi	r2,67
    94e8:	00003606 	br	95c4 <OSTaskStkChk+0x1a8>
    }
    if (ptcb == OS_TCB_RESERVED) {
    94ec:	e0bffc17 	ldw	r2,-16(fp)
    94f0:	10800058 	cmpnei	r2,r2,1
    94f4:	1000071e 	bne	r2,zero,9514 <OSTaskStkChk+0xf8>
    94f8:	e0bffd17 	ldw	r2,-12(fp)
    94fc:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
    9500:	e0bff817 	ldw	r2,-32(fp)
    9504:	1001703a 	wrctl	status,r2
}
    9508:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    950c:	008010c4 	movi	r2,67
    9510:	00002c06 	br	95c4 <OSTaskStkChk+0x1a8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
    9514:	e0bffc17 	ldw	r2,-16(fp)
    9518:	1080040b 	ldhu	r2,16(r2)
    951c:	10bfffcc 	andi	r2,r2,65535
    9520:	1080004c 	andi	r2,r2,1
    9524:	1000071e 	bne	r2,zero,9544 <OSTaskStkChk+0x128>
    9528:	e0bffd17 	ldw	r2,-12(fp)
    952c:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context);
    9530:	e0bff717 	ldw	r2,-36(fp)
    9534:	1001703a 	wrctl	status,r2
}
    9538:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
    953c:	00801144 	movi	r2,69
    9540:	00002006 	br	95c4 <OSTaskStkChk+0x1a8>
    }
    nfree = 0;
    9544:	e03ffe15 	stw	zero,-8(fp)
    size  = ptcb->OSTCBStkSize;
    9548:	e0bffc17 	ldw	r2,-16(fp)
    954c:	10800317 	ldw	r2,12(r2)
    9550:	e0bffb15 	stw	r2,-20(fp)
    pchk  = ptcb->OSTCBStkBottom;
    9554:	e0bffc17 	ldw	r2,-16(fp)
    9558:	10800217 	ldw	r2,8(r2)
    955c:	e0bfff15 	stw	r2,-4(fp)
    9560:	e0bffd17 	ldw	r2,-12(fp)
    9564:	e0bff615 	stw	r2,-40(fp)
  NIOS2_WRITE_STATUS (context);
    9568:	e0bff617 	ldw	r2,-40(fp)
    956c:	1001703a 	wrctl	status,r2
}
    9570:	0001883a 	nop
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
    9574:	00000306 	br	9584 <OSTaskStkChk+0x168>
        nfree++;
    9578:	e0bffe17 	ldw	r2,-8(fp)
    957c:	10800044 	addi	r2,r2,1
    9580:	e0bffe15 	stw	r2,-8(fp)
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
    9584:	e0bfff17 	ldw	r2,-4(fp)
    9588:	10c00104 	addi	r3,r2,4
    958c:	e0ffff15 	stw	r3,-4(fp)
    9590:	10800017 	ldw	r2,0(r2)
    9594:	103ff826 	beq	r2,zero,9578 <OSTaskStkChk+0x15c>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
    9598:	e0bffe17 	ldw	r2,-8(fp)
    959c:	100690ba 	slli	r3,r2,2
    95a0:	e0bff417 	ldw	r2,-48(fp)
    95a4:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
    95a8:	e0fffb17 	ldw	r3,-20(fp)
    95ac:	e0bffe17 	ldw	r2,-8(fp)
    95b0:	1885c83a 	sub	r2,r3,r2
    95b4:	100690ba 	slli	r3,r2,2
    95b8:	e0bff417 	ldw	r2,-48(fp)
    95bc:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
    95c0:	0005883a 	mov	r2,zero
}
    95c4:	e037883a 	mov	sp,fp
    95c8:	df000017 	ldw	fp,0(sp)
    95cc:	dec00104 	addi	sp,sp,4
    95d0:	f800283a 	ret

000095d4 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
    95d4:	defff504 	addi	sp,sp,-44
    95d8:	dfc00a15 	stw	ra,40(sp)
    95dc:	df000915 	stw	fp,36(sp)
    95e0:	df000904 	addi	fp,sp,36
    95e4:	2005883a 	mov	r2,r4
    95e8:	e0bff705 	stb	r2,-36(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    95ec:	e03ffe15 	stw	zero,-8(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
    95f0:	e0bff703 	ldbu	r2,-36(fp)
    95f4:	10800518 	cmpnei	r2,r2,20
    95f8:	1000021e 	bne	r2,zero,9604 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
    95fc:	008011c4 	movi	r2,71
    9600:	00006906 	br	97a8 <OSTaskSuspend+0x1d4>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
    9604:	e0bff703 	ldbu	r2,-36(fp)
    9608:	10800530 	cmpltui	r2,r2,20
    960c:	1000051e 	bne	r2,zero,9624 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
    9610:	e0bff703 	ldbu	r2,-36(fp)
    9614:	10803fe0 	cmpeqi	r2,r2,255
    9618:	1000021e 	bne	r2,zero,9624 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
    961c:	00800a84 	movi	r2,42
    9620:	00006106 	br	97a8 <OSTaskSuspend+0x1d4>
  NIOS2_READ_STATUS (context);
    9624:	0005303a 	rdctl	r2,status
    9628:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    962c:	e0fffb17 	ldw	r3,-20(fp)
    9630:	00bfff84 	movi	r2,-2
    9634:	1884703a 	and	r2,r3,r2
    9638:	1001703a 	wrctl	status,r2
  return context;
    963c:	e0bffb17 	ldw	r2,-20(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
    9640:	e0bffe15 	stw	r2,-8(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
    9644:	e0bff703 	ldbu	r2,-36(fp)
    9648:	10803fd8 	cmpnei	r2,r2,255
    964c:	1000061e 	bne	r2,zero,9668 <OSTaskSuspend+0x94>
        prio = OSTCBCur->OSTCBPrio;
    9650:	d0a6e717 	ldw	r2,-25700(gp)
    9654:	10800c83 	ldbu	r2,50(r2)
    9658:	e0bff705 	stb	r2,-36(fp)
        self = OS_TRUE;
    965c:	00800044 	movi	r2,1
    9660:	e0bfffc5 	stb	r2,-1(fp)
    9664:	00000906 	br	968c <OSTaskSuspend+0xb8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
    9668:	d0a6e717 	ldw	r2,-25700(gp)
    966c:	10800c83 	ldbu	r2,50(r2)
    9670:	e0fff703 	ldbu	r3,-36(fp)
    9674:	10803fcc 	andi	r2,r2,255
    9678:	1880031e 	bne	r3,r2,9688 <OSTaskSuspend+0xb4>
        self = OS_TRUE;
    967c:	00800044 	movi	r2,1
    9680:	e0bfffc5 	stb	r2,-1(fp)
    9684:	00000106 	br	968c <OSTaskSuspend+0xb8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
    9688:	e03fffc5 	stb	zero,-1(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    968c:	e0bff703 	ldbu	r2,-36(fp)
    9690:	100690ba 	slli	r3,r2,2
    9694:	008000b4 	movhi	r2,2
    9698:	1885883a 	add	r2,r3,r2
    969c:	10a5ac17 	ldw	r2,-26960(r2)
    96a0:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
    96a4:	e0bffd17 	ldw	r2,-12(fp)
    96a8:	1000071e 	bne	r2,zero,96c8 <OSTaskSuspend+0xf4>
    96ac:	e0bffe17 	ldw	r2,-8(fp)
    96b0:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
    96b4:	e0bffa17 	ldw	r2,-24(fp)
    96b8:	1001703a 	wrctl	status,r2
}
    96bc:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
    96c0:	00801204 	movi	r2,72
    96c4:	00003806 	br	97a8 <OSTaskSuspend+0x1d4>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
    96c8:	e0bffd17 	ldw	r2,-12(fp)
    96cc:	10800058 	cmpnei	r2,r2,1
    96d0:	1000071e 	bne	r2,zero,96f0 <OSTaskSuspend+0x11c>
    96d4:	e0bffe17 	ldw	r2,-8(fp)
    96d8:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
    96dc:	e0bff917 	ldw	r2,-28(fp)
    96e0:	1001703a 	wrctl	status,r2
}
    96e4:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    96e8:	008010c4 	movi	r2,67
    96ec:	00002e06 	br	97a8 <OSTaskSuspend+0x1d4>
    }
    y            = ptcb->OSTCBY;
    96f0:	e0bffd17 	ldw	r2,-12(fp)
    96f4:	10800d03 	ldbu	r2,52(r2)
    96f8:	e0bffcc5 	stb	r2,-13(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
    96fc:	e0fffcc3 	ldbu	r3,-13(fp)
    9700:	d0a6e484 	addi	r2,gp,-25710
    9704:	1885883a 	add	r2,r3,r2
    9708:	10800003 	ldbu	r2,0(r2)
    970c:	1007883a 	mov	r3,r2
    9710:	e0bffd17 	ldw	r2,-12(fp)
    9714:	10800d43 	ldbu	r2,53(r2)
    9718:	0084303a 	nor	r2,zero,r2
    971c:	1884703a 	and	r2,r3,r2
    9720:	e0fffcc3 	ldbu	r3,-13(fp)
    9724:	1009883a 	mov	r4,r2
    9728:	d0a6e484 	addi	r2,gp,-25710
    972c:	1885883a 	add	r2,r3,r2
    9730:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
    9734:	e0fffcc3 	ldbu	r3,-13(fp)
    9738:	d0a6e484 	addi	r2,gp,-25710
    973c:	1885883a 	add	r2,r3,r2
    9740:	10800003 	ldbu	r2,0(r2)
    9744:	10803fcc 	andi	r2,r2,255
    9748:	1000071e 	bne	r2,zero,9768 <OSTaskSuspend+0x194>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
    974c:	e0bffd17 	ldw	r2,-12(fp)
    9750:	10800d83 	ldbu	r2,54(r2)
    9754:	0084303a 	nor	r2,zero,r2
    9758:	1007883a 	mov	r3,r2
    975c:	d0a6e443 	ldbu	r2,-25711(gp)
    9760:	1884703a 	and	r2,r3,r2
    9764:	d0a6e445 	stb	r2,-25711(gp)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
    9768:	e0bffd17 	ldw	r2,-12(fp)
    976c:	10800c03 	ldbu	r2,48(r2)
    9770:	10800214 	ori	r2,r2,8
    9774:	1007883a 	mov	r3,r2
    9778:	e0bffd17 	ldw	r2,-12(fp)
    977c:	10c00c05 	stb	r3,48(r2)
    9780:	e0bffe17 	ldw	r2,-8(fp)
    9784:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
    9788:	e0bff817 	ldw	r2,-32(fp)
    978c:	1001703a 	wrctl	status,r2
}
    9790:	0001883a 	nop
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
    9794:	e0bfffc3 	ldbu	r2,-1(fp)
    9798:	10800058 	cmpnei	r2,r2,1
    979c:	1000011e 	bne	r2,zero,97a4 <OSTaskSuspend+0x1d0>
        OS_Sched();                                             /* Find new highest priority task      */
    97a0:	0003e7c0 	call	3e7c <OS_Sched>
    }
    return (OS_ERR_NONE);
    97a4:	0005883a 	mov	r2,zero
}
    97a8:	e037883a 	mov	sp,fp
    97ac:	dfc00117 	ldw	ra,4(sp)
    97b0:	df000017 	ldw	fp,0(sp)
    97b4:	dec00204 	addi	sp,sp,8
    97b8:	f800283a 	ret

000097bc <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
    97bc:	defff604 	addi	sp,sp,-40
    97c0:	dfc00915 	stw	ra,36(sp)
    97c4:	df000815 	stw	fp,32(sp)
    97c8:	df000804 	addi	fp,sp,32
    97cc:	2005883a 	mov	r2,r4
    97d0:	e17ff815 	stw	r5,-32(fp)
    97d4:	e0bff905 	stb	r2,-28(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    97d8:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
    97dc:	e0bff903 	ldbu	r2,-28(fp)
    97e0:	10800570 	cmpltui	r2,r2,21
    97e4:	1000051e 	bne	r2,zero,97fc <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
    97e8:	e0bff903 	ldbu	r2,-28(fp)
    97ec:	10803fe0 	cmpeqi	r2,r2,255
    97f0:	1000021e 	bne	r2,zero,97fc <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
    97f4:	00800a84 	movi	r2,42
    97f8:	00003506 	br	98d0 <OSTaskQuery+0x114>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
    97fc:	e0bff817 	ldw	r2,-32(fp)
    9800:	1000021e 	bne	r2,zero,980c <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
    9804:	00800244 	movi	r2,9
    9808:	00003106 	br	98d0 <OSTaskQuery+0x114>
  NIOS2_READ_STATUS (context);
    980c:	0005303a 	rdctl	r2,status
    9810:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9814:	e0fffd17 	ldw	r3,-12(fp)
    9818:	00bfff84 	movi	r2,-2
    981c:	1884703a 	and	r2,r3,r2
    9820:	1001703a 	wrctl	status,r2
  return context;
    9824:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    9828:	e0bfff15 	stw	r2,-4(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
    982c:	e0bff903 	ldbu	r2,-28(fp)
    9830:	10803fd8 	cmpnei	r2,r2,255
    9834:	1000031e 	bne	r2,zero,9844 <OSTaskQuery+0x88>
        prio = OSTCBCur->OSTCBPrio;
    9838:	d0a6e717 	ldw	r2,-25700(gp)
    983c:	10800c83 	ldbu	r2,50(r2)
    9840:	e0bff905 	stb	r2,-28(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    9844:	e0bff903 	ldbu	r2,-28(fp)
    9848:	100690ba 	slli	r3,r2,2
    984c:	008000b4 	movhi	r2,2
    9850:	1885883a 	add	r2,r3,r2
    9854:	10a5ac17 	ldw	r2,-26960(r2)
    9858:	e0bffe15 	stw	r2,-8(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
    985c:	e0bffe17 	ldw	r2,-8(fp)
    9860:	1000071e 	bne	r2,zero,9880 <OSTaskQuery+0xc4>
    9864:	e0bfff17 	ldw	r2,-4(fp)
    9868:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    986c:	e0bffc17 	ldw	r2,-16(fp)
    9870:	1001703a 	wrctl	status,r2
}
    9874:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
    9878:	00800a44 	movi	r2,41
    987c:	00001406 	br	98d0 <OSTaskQuery+0x114>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
    9880:	e0bffe17 	ldw	r2,-8(fp)
    9884:	10800058 	cmpnei	r2,r2,1
    9888:	1000071e 	bne	r2,zero,98a8 <OSTaskQuery+0xec>
    988c:	e0bfff17 	ldw	r2,-4(fp)
    9890:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    9894:	e0bffb17 	ldw	r2,-20(fp)
    9898:	1001703a 	wrctl	status,r2
}
    989c:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    98a0:	008010c4 	movi	r2,67
    98a4:	00000a06 	br	98d0 <OSTaskQuery+0x114>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
    98a8:	01801b04 	movi	r6,108
    98ac:	e17ffe17 	ldw	r5,-8(fp)
    98b0:	e13ff817 	ldw	r4,-32(fp)
    98b4:	0003e100 	call	3e10 <OS_MemCopy>
    98b8:	e0bfff17 	ldw	r2,-4(fp)
    98bc:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
    98c0:	e0bffa17 	ldw	r2,-24(fp)
    98c4:	1001703a 	wrctl	status,r2
}
    98c8:	0001883a 	nop
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    98cc:	0005883a 	mov	r2,zero
}
    98d0:	e037883a 	mov	sp,fp
    98d4:	dfc00117 	ldw	ra,4(sp)
    98d8:	df000017 	ldw	fp,0(sp)
    98dc:	dec00204 	addi	sp,sp,8
    98e0:	f800283a 	ret

000098e4 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    98e4:	defffc04 	addi	sp,sp,-16
    98e8:	df000315 	stw	fp,12(sp)
    98ec:	df000304 	addi	fp,sp,12
    98f0:	e13fff15 	stw	r4,-4(fp)
    98f4:	e17ffe15 	stw	r5,-8(fp)
    98f8:	3005883a 	mov	r2,r6
    98fc:	e0bffd0d 	sth	r2,-12(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
    9900:	e0bffd0b 	ldhu	r2,-12(fp)
    9904:	1080004c 	andi	r2,r2,1
    9908:	10000d26 	beq	r2,zero,9940 <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
    990c:	e0bffd0b 	ldhu	r2,-12(fp)
    9910:	1080008c 	andi	r2,r2,2
    9914:	10000a26 	beq	r2,zero,9940 <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
    9918:	00000706 	br	9938 <OS_TaskStkClr+0x54>
                size--;
    991c:	e0bffe17 	ldw	r2,-8(fp)
    9920:	10bfffc4 	addi	r2,r2,-1
    9924:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
    9928:	e0bfff17 	ldw	r2,-4(fp)
    992c:	10c00104 	addi	r3,r2,4
    9930:	e0ffff15 	stw	r3,-4(fp)
    9934:	10000015 	stw	zero,0(r2)
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
    9938:	e0bffe17 	ldw	r2,-8(fp)
    993c:	103ff71e 	bne	r2,zero,991c <OS_TaskStkClr+0x38>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
    9940:	0001883a 	nop
    9944:	e037883a 	mov	sp,fp
    9948:	df000017 	ldw	fp,0(sp)
    994c:	dec00104 	addi	sp,sp,4
    9950:	f800283a 	ret

00009954 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
    9954:	defff904 	addi	sp,sp,-28
    9958:	dfc00615 	stw	ra,24(sp)
    995c:	df000515 	stw	fp,20(sp)
    9960:	df000504 	addi	fp,sp,20
    9964:	2005883a 	mov	r2,r4
    9968:	e0bffb0d 	sth	r2,-20(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    996c:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    9970:	d0a6e343 	ldbu	r2,-25715(gp)
    9974:	10803fcc 	andi	r2,r2,255
    9978:	1000321e 	bne	r2,zero,9a44 <OSTimeDly+0xf0>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
    997c:	e0bffb0b 	ldhu	r2,-20(fp)
    9980:	10003126 	beq	r2,zero,9a48 <OSTimeDly+0xf4>
  NIOS2_READ_STATUS (context);
    9984:	0005303a 	rdctl	r2,status
    9988:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    998c:	e0fffd17 	ldw	r3,-12(fp)
    9990:	00bfff84 	movi	r2,-2
    9994:	1884703a 	and	r2,r3,r2
    9998:	1001703a 	wrctl	status,r2
  return context;
    999c:	e0bffd17 	ldw	r2,-12(fp)
        OS_ENTER_CRITICAL();
    99a0:	e0bfff15 	stw	r2,-4(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
    99a4:	d0a6e717 	ldw	r2,-25700(gp)
    99a8:	10800d03 	ldbu	r2,52(r2)
    99ac:	e0bffec5 	stb	r2,-5(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
    99b0:	e0fffec3 	ldbu	r3,-5(fp)
    99b4:	d0a6e484 	addi	r2,gp,-25710
    99b8:	1885883a 	add	r2,r3,r2
    99bc:	10800003 	ldbu	r2,0(r2)
    99c0:	1007883a 	mov	r3,r2
    99c4:	d0a6e717 	ldw	r2,-25700(gp)
    99c8:	10800d43 	ldbu	r2,53(r2)
    99cc:	0084303a 	nor	r2,zero,r2
    99d0:	1884703a 	and	r2,r3,r2
    99d4:	e0fffec3 	ldbu	r3,-5(fp)
    99d8:	1009883a 	mov	r4,r2
    99dc:	d0a6e484 	addi	r2,gp,-25710
    99e0:	1885883a 	add	r2,r3,r2
    99e4:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
    99e8:	e0fffec3 	ldbu	r3,-5(fp)
    99ec:	d0a6e484 	addi	r2,gp,-25710
    99f0:	1885883a 	add	r2,r3,r2
    99f4:	10800003 	ldbu	r2,0(r2)
    99f8:	10803fcc 	andi	r2,r2,255
    99fc:	1000071e 	bne	r2,zero,9a1c <OSTimeDly+0xc8>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
    9a00:	d0a6e717 	ldw	r2,-25700(gp)
    9a04:	10800d83 	ldbu	r2,54(r2)
    9a08:	0084303a 	nor	r2,zero,r2
    9a0c:	1007883a 	mov	r3,r2
    9a10:	d0a6e443 	ldbu	r2,-25711(gp)
    9a14:	1884703a 	and	r2,r3,r2
    9a18:	d0a6e445 	stb	r2,-25711(gp)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
    9a1c:	d0a6e717 	ldw	r2,-25700(gp)
    9a20:	e0fffb0b 	ldhu	r3,-20(fp)
    9a24:	10c00b8d 	sth	r3,46(r2)
    9a28:	e0bfff17 	ldw	r2,-4(fp)
    9a2c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    9a30:	e0bffc17 	ldw	r2,-16(fp)
    9a34:	1001703a 	wrctl	status,r2
}
    9a38:	0001883a 	nop
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    9a3c:	0003e7c0 	call	3e7c <OS_Sched>
    9a40:	00000106 	br	9a48 <OSTimeDly+0xf4>
        return;
    9a44:	0001883a 	nop
    }
}
    9a48:	e037883a 	mov	sp,fp
    9a4c:	dfc00117 	ldw	ra,4(sp)
    9a50:	df000017 	ldw	fp,0(sp)
    9a54:	dec00204 	addi	sp,sp,8
    9a58:	f800283a 	ret

00009a5c <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
    9a5c:	defff804 	addi	sp,sp,-32
    9a60:	dfc00715 	stw	ra,28(sp)
    9a64:	df000615 	stw	fp,24(sp)
    9a68:	df000604 	addi	fp,sp,24
    9a6c:	2005883a 	mov	r2,r4
    9a70:	3009883a 	mov	r4,r6
    9a74:	3807883a 	mov	r3,r7
    9a78:	e0bffd05 	stb	r2,-12(fp)
    9a7c:	2805883a 	mov	r2,r5
    9a80:	e0bffc05 	stb	r2,-16(fp)
    9a84:	2005883a 	mov	r2,r4
    9a88:	e0bffb05 	stb	r2,-20(fp)
    9a8c:	1805883a 	mov	r2,r3
    9a90:	e0bffa0d 	sth	r2,-24(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    9a94:	d0a6e343 	ldbu	r2,-25715(gp)
    9a98:	10803fcc 	andi	r2,r2,255
    9a9c:	10000226 	beq	r2,zero,9aa8 <OSTimeDlyHMSM+0x4c>
        return (OS_ERR_TIME_DLY_ISR);
    9aa0:	00801544 	movi	r2,85
    9aa4:	00003d06 	br	9b9c <OSTimeDlyHMSM+0x140>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
    9aa8:	e0bffd03 	ldbu	r2,-12(fp)
    9aac:	1000081e 	bne	r2,zero,9ad0 <OSTimeDlyHMSM+0x74>
        if (minutes == 0) {
    9ab0:	e0bffc03 	ldbu	r2,-16(fp)
    9ab4:	1000061e 	bne	r2,zero,9ad0 <OSTimeDlyHMSM+0x74>
            if (seconds == 0) {
    9ab8:	e0bffb03 	ldbu	r2,-20(fp)
    9abc:	1000041e 	bne	r2,zero,9ad0 <OSTimeDlyHMSM+0x74>
                if (ms == 0) {
    9ac0:	e0bffa0b 	ldhu	r2,-24(fp)
    9ac4:	1000021e 	bne	r2,zero,9ad0 <OSTimeDlyHMSM+0x74>
                    return (OS_ERR_TIME_ZERO_DLY);
    9ac8:	00801504 	movi	r2,84
    9acc:	00003306 	br	9b9c <OSTimeDlyHMSM+0x140>
                }
            }
        }
    }
    if (minutes > 59) {
    9ad0:	e0bffc03 	ldbu	r2,-16(fp)
    9ad4:	10800f30 	cmpltui	r2,r2,60
    9ad8:	1000021e 	bne	r2,zero,9ae4 <OSTimeDlyHMSM+0x88>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
    9adc:	00801444 	movi	r2,81
    9ae0:	00002e06 	br	9b9c <OSTimeDlyHMSM+0x140>
    }
    if (seconds > 59) {
    9ae4:	e0bffb03 	ldbu	r2,-20(fp)
    9ae8:	10800f30 	cmpltui	r2,r2,60
    9aec:	1000021e 	bne	r2,zero,9af8 <OSTimeDlyHMSM+0x9c>
        return (OS_ERR_TIME_INVALID_SECONDS);
    9af0:	00801484 	movi	r2,82
    9af4:	00002906 	br	9b9c <OSTimeDlyHMSM+0x140>
    }
    if (ms > 999) {
    9af8:	e0bffa0b 	ldhu	r2,-24(fp)
    9afc:	1080fa30 	cmpltui	r2,r2,1000
    9b00:	1000021e 	bne	r2,zero,9b0c <OSTimeDlyHMSM+0xb0>
        return (OS_ERR_TIME_INVALID_MS);
    9b04:	008014c4 	movi	r2,83
    9b08:	00002406 	br	9b9c <OSTimeDlyHMSM+0x140>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
    9b0c:	e0bffd03 	ldbu	r2,-12(fp)
    9b10:	10c38424 	muli	r3,r2,3600
    9b14:	e0bffc03 	ldbu	r2,-16(fp)
    9b18:	10800f24 	muli	r2,r2,60
    9b1c:	1887883a 	add	r3,r3,r2
    9b20:	e0bffb03 	ldbu	r2,-20(fp)
    9b24:	1885883a 	add	r2,r3,r2
    9b28:	100690fa 	slli	r3,r2,3
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    9b2c:	e0bffa0b 	ldhu	r2,-24(fp)
    9b30:	10800f84 	addi	r2,r2,62
    9b34:	100890fa 	slli	r4,r2,3
    9b38:	0080fa04 	movi	r2,1000
    9b3c:	2085203a 	divu	r2,r4,r2
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
    9b40:	1885883a 	add	r2,r3,r2
    9b44:	e0bffe15 	stw	r2,-8(fp)
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    9b48:	e0bffe17 	ldw	r2,-8(fp)
    9b4c:	1004d43a 	srli	r2,r2,16
    9b50:	e0bfff8d 	sth	r2,-2(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    9b54:	e0bffe17 	ldw	r2,-8(fp)
    9b58:	10bfffcc 	andi	r2,r2,65535
    9b5c:	e0bffe15 	stw	r2,-8(fp)
    OSTimeDly((INT16U)ticks);
    9b60:	e0bffe17 	ldw	r2,-8(fp)
    9b64:	10bfffcc 	andi	r2,r2,65535
    9b68:	1009883a 	mov	r4,r2
    9b6c:	00099540 	call	9954 <OSTimeDly>
    while (loops > 0) {
    9b70:	00000706 	br	9b90 <OSTimeDlyHMSM+0x134>
        OSTimeDly((INT16U)32768u);
    9b74:	01200014 	movui	r4,32768
    9b78:	00099540 	call	9954 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
    9b7c:	01200014 	movui	r4,32768
    9b80:	00099540 	call	9954 <OSTimeDly>
        loops--;
    9b84:	e0bfff8b 	ldhu	r2,-2(fp)
    9b88:	10bfffc4 	addi	r2,r2,-1
    9b8c:	e0bfff8d 	sth	r2,-2(fp)
    while (loops > 0) {
    9b90:	e0bfff8b 	ldhu	r2,-2(fp)
    9b94:	103ff71e 	bne	r2,zero,9b74 <OSTimeDlyHMSM+0x118>
    }
    return (OS_ERR_NONE);
    9b98:	0005883a 	mov	r2,zero
}
    9b9c:	e037883a 	mov	sp,fp
    9ba0:	dfc00117 	ldw	ra,4(sp)
    9ba4:	df000017 	ldw	fp,0(sp)
    9ba8:	dec00204 	addi	sp,sp,8
    9bac:	f800283a 	ret

00009bb0 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
    9bb0:	defff504 	addi	sp,sp,-44
    9bb4:	dfc00a15 	stw	ra,40(sp)
    9bb8:	df000915 	stw	fp,36(sp)
    9bbc:	df000904 	addi	fp,sp,36
    9bc0:	2005883a 	mov	r2,r4
    9bc4:	e0bff705 	stb	r2,-36(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    9bc8:	e03fff15 	stw	zero,-4(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
    9bcc:	e0bff703 	ldbu	r2,-36(fp)
    9bd0:	10800530 	cmpltui	r2,r2,20
    9bd4:	1000021e 	bne	r2,zero,9be0 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
    9bd8:	00800a84 	movi	r2,42
    9bdc:	00006706 	br	9d7c <OSTimeDlyResume+0x1cc>
  NIOS2_READ_STATUS (context);
    9be0:	0005303a 	rdctl	r2,status
    9be4:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9be8:	e0fffd17 	ldw	r3,-12(fp)
    9bec:	00bfff84 	movi	r2,-2
    9bf0:	1884703a 	and	r2,r3,r2
    9bf4:	1001703a 	wrctl	status,r2
  return context;
    9bf8:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    9bfc:	e0bfff15 	stw	r2,-4(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
    9c00:	e0bff703 	ldbu	r2,-36(fp)
    9c04:	100690ba 	slli	r3,r2,2
    9c08:	008000b4 	movhi	r2,2
    9c0c:	1885883a 	add	r2,r3,r2
    9c10:	10a5ac17 	ldw	r2,-26960(r2)
    9c14:	e0bffe15 	stw	r2,-8(fp)
    if (ptcb == (OS_TCB *)0) {
    9c18:	e0bffe17 	ldw	r2,-8(fp)
    9c1c:	1000071e 	bne	r2,zero,9c3c <OSTimeDlyResume+0x8c>
    9c20:	e0bfff17 	ldw	r2,-4(fp)
    9c24:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    9c28:	e0bffc17 	ldw	r2,-16(fp)
    9c2c:	1001703a 	wrctl	status,r2
}
    9c30:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
    9c34:	008010c4 	movi	r2,67
    9c38:	00005006 	br	9d7c <OSTimeDlyResume+0x1cc>
    }
    if (ptcb == OS_TCB_RESERVED) {
    9c3c:	e0bffe17 	ldw	r2,-8(fp)
    9c40:	10800058 	cmpnei	r2,r2,1
    9c44:	1000071e 	bne	r2,zero,9c64 <OSTimeDlyResume+0xb4>
    9c48:	e0bfff17 	ldw	r2,-4(fp)
    9c4c:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    9c50:	e0bffb17 	ldw	r2,-20(fp)
    9c54:	1001703a 	wrctl	status,r2
}
    9c58:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
    9c5c:	008010c4 	movi	r2,67
    9c60:	00004606 	br	9d7c <OSTimeDlyResume+0x1cc>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
    9c64:	e0bffe17 	ldw	r2,-8(fp)
    9c68:	10800b8b 	ldhu	r2,46(r2)
    9c6c:	10bfffcc 	andi	r2,r2,65535
    9c70:	1000071e 	bne	r2,zero,9c90 <OSTimeDlyResume+0xe0>
    9c74:	e0bfff17 	ldw	r2,-4(fp)
    9c78:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
    9c7c:	e0bffa17 	ldw	r2,-24(fp)
    9c80:	1001703a 	wrctl	status,r2
}
    9c84:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
    9c88:	00801404 	movi	r2,80
    9c8c:	00003b06 	br	9d7c <OSTimeDlyResume+0x1cc>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
    9c90:	e0bffe17 	ldw	r2,-8(fp)
    9c94:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
    9c98:	e0bffe17 	ldw	r2,-8(fp)
    9c9c:	10800c03 	ldbu	r2,48(r2)
    9ca0:	10803fcc 	andi	r2,r2,255
    9ca4:	10800dcc 	andi	r2,r2,55
    9ca8:	10000b26 	beq	r2,zero,9cd8 <OSTimeDlyResume+0x128>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
    9cac:	e0bffe17 	ldw	r2,-8(fp)
    9cb0:	10c00c03 	ldbu	r3,48(r2)
    9cb4:	00bff204 	movi	r2,-56
    9cb8:	1884703a 	and	r2,r3,r2
    9cbc:	1007883a 	mov	r3,r2
    9cc0:	e0bffe17 	ldw	r2,-8(fp)
    9cc4:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
    9cc8:	e0bffe17 	ldw	r2,-8(fp)
    9ccc:	00c00044 	movi	r3,1
    9cd0:	10c00c45 	stb	r3,49(r2)
    9cd4:	00000206 	br	9ce0 <OSTimeDlyResume+0x130>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
    9cd8:	e0bffe17 	ldw	r2,-8(fp)
    9cdc:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
    9ce0:	e0bffe17 	ldw	r2,-8(fp)
    9ce4:	10800c03 	ldbu	r2,48(r2)
    9ce8:	10803fcc 	andi	r2,r2,255
    9cec:	1080020c 	andi	r2,r2,8
    9cf0:	10001c1e 	bne	r2,zero,9d64 <OSTimeDlyResume+0x1b4>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
    9cf4:	e0bffe17 	ldw	r2,-8(fp)
    9cf8:	10c00d83 	ldbu	r3,54(r2)
    9cfc:	d0a6e443 	ldbu	r2,-25711(gp)
    9d00:	1884b03a 	or	r2,r3,r2
    9d04:	d0a6e445 	stb	r2,-25711(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    9d08:	e0bffe17 	ldw	r2,-8(fp)
    9d0c:	10800d03 	ldbu	r2,52(r2)
    9d10:	10c03fcc 	andi	r3,r2,255
    9d14:	d0a6e484 	addi	r2,gp,-25710
    9d18:	1885883a 	add	r2,r3,r2
    9d1c:	11000003 	ldbu	r4,0(r2)
    9d20:	e0bffe17 	ldw	r2,-8(fp)
    9d24:	10800d43 	ldbu	r2,53(r2)
    9d28:	e0fffe17 	ldw	r3,-8(fp)
    9d2c:	18c00d03 	ldbu	r3,52(r3)
    9d30:	18c03fcc 	andi	r3,r3,255
    9d34:	2084b03a 	or	r2,r4,r2
    9d38:	1009883a 	mov	r4,r2
    9d3c:	d0a6e484 	addi	r2,gp,-25710
    9d40:	1885883a 	add	r2,r3,r2
    9d44:	11000005 	stb	r4,0(r2)
    9d48:	e0bfff17 	ldw	r2,-4(fp)
    9d4c:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
    9d50:	e0bff917 	ldw	r2,-28(fp)
    9d54:	1001703a 	wrctl	status,r2
}
    9d58:	0001883a 	nop
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
    9d5c:	0003e7c0 	call	3e7c <OS_Sched>
    9d60:	00000506 	br	9d78 <OSTimeDlyResume+0x1c8>
    9d64:	e0bfff17 	ldw	r2,-4(fp)
    9d68:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
    9d6c:	e0bff817 	ldw	r2,-32(fp)
    9d70:	1001703a 	wrctl	status,r2
}
    9d74:	0001883a 	nop
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
    9d78:	0005883a 	mov	r2,zero
}
    9d7c:	e037883a 	mov	sp,fp
    9d80:	dfc00117 	ldw	ra,4(sp)
    9d84:	df000017 	ldw	fp,0(sp)
    9d88:	dec00204 	addi	sp,sp,8
    9d8c:	f800283a 	ret

00009d90 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
    9d90:	defffb04 	addi	sp,sp,-20
    9d94:	df000415 	stw	fp,16(sp)
    9d98:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    9d9c:	e03fff15 	stw	zero,-4(fp)
  NIOS2_READ_STATUS (context);
    9da0:	0005303a 	rdctl	r2,status
    9da4:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9da8:	e0fffc17 	ldw	r3,-16(fp)
    9dac:	00bfff84 	movi	r2,-2
    9db0:	1884703a 	and	r2,r3,r2
    9db4:	1001703a 	wrctl	status,r2
  return context;
    9db8:	e0bffc17 	ldw	r2,-16(fp)
#endif



    OS_ENTER_CRITICAL();
    9dbc:	e0bfff15 	stw	r2,-4(fp)
    ticks = OSTime;
    9dc0:	d0a6ee17 	ldw	r2,-25672(gp)
    9dc4:	e0bffe15 	stw	r2,-8(fp)
    9dc8:	e0bfff17 	ldw	r2,-4(fp)
    9dcc:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
    9dd0:	e0bffd17 	ldw	r2,-12(fp)
    9dd4:	1001703a 	wrctl	status,r2
}
    9dd8:	0001883a 	nop
    OS_EXIT_CRITICAL();
    return (ticks);
    9ddc:	e0bffe17 	ldw	r2,-8(fp)
}
    9de0:	e037883a 	mov	sp,fp
    9de4:	df000017 	ldw	fp,0(sp)
    9de8:	dec00104 	addi	sp,sp,4
    9dec:	f800283a 	ret

00009df0 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
    9df0:	defffb04 	addi	sp,sp,-20
    9df4:	df000415 	stw	fp,16(sp)
    9df8:	df000404 	addi	fp,sp,16
    9dfc:	e13ffc15 	stw	r4,-16(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    9e00:	e03fff15 	stw	zero,-4(fp)
  NIOS2_READ_STATUS (context);
    9e04:	0005303a 	rdctl	r2,status
    9e08:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9e0c:	e0fffd17 	ldw	r3,-12(fp)
    9e10:	00bfff84 	movi	r2,-2
    9e14:	1884703a 	and	r2,r3,r2
    9e18:	1001703a 	wrctl	status,r2
  return context;
    9e1c:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
    9e20:	e0bfff15 	stw	r2,-4(fp)
    OSTime = ticks;
    9e24:	e0bffc17 	ldw	r2,-16(fp)
    9e28:	d0a6ee15 	stw	r2,-25672(gp)
    9e2c:	e0bfff17 	ldw	r2,-4(fp)
    9e30:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
    9e34:	e0bffe17 	ldw	r2,-8(fp)
    9e38:	1001703a 	wrctl	status,r2
}
    9e3c:	0001883a 	nop
    OS_EXIT_CRITICAL();
}
    9e40:	0001883a 	nop
    9e44:	e037883a 	mov	sp,fp
    9e48:	df000017 	ldw	fp,0(sp)
    9e4c:	dec00104 	addi	sp,sp,4
    9e50:	f800283a 	ret

00009e54 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    9e54:	defffd04 	addi	sp,sp,-12
    9e58:	dfc00215 	stw	ra,8(sp)
    9e5c:	df000115 	stw	fp,4(sp)
    9e60:	df000104 	addi	fp,sp,4
    9e64:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    9e68:	d1602804 	addi	r5,gp,-32608
    9e6c:	e13fff17 	ldw	r4,-4(fp)
    9e70:	000ca800 	call	ca80 <alt_dev_llist_insert>
}
    9e74:	e037883a 	mov	sp,fp
    9e78:	dfc00117 	ldw	ra,4(sp)
    9e7c:	df000017 	ldw	fp,0(sp)
    9e80:	dec00204 	addi	sp,sp,8
    9e84:	f800283a 	ret

00009e88 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    9e88:	defffd04 	addi	sp,sp,-12
    9e8c:	dfc00215 	stw	ra,8(sp)
    9e90:	df000115 	stw	fp,4(sp)
    9e94:	df000104 	addi	fp,sp,4
    9e98:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, Nios2);
    9e9c:	000d3ac0 	call	d3ac <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    9ea0:	00800044 	movi	r2,1
    9ea4:	1001703a 	wrctl	status,r2
}
    9ea8:	0001883a 	nop
    alt_irq_cpu_enable_interrupts();
}
    9eac:	0001883a 	nop
    9eb0:	e037883a 	mov	sp,fp
    9eb4:	dfc00117 	ldw	ra,4(sp)
    9eb8:	df000017 	ldw	fp,0(sp)
    9ebc:	dec00204 	addi	sp,sp,8
    9ec0:	f800283a 	ret

00009ec4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    9ec4:	defffb04 	addi	sp,sp,-20
    9ec8:	dfc00415 	stw	ra,16(sp)
    9ecc:	df000315 	stw	fp,12(sp)
    9ed0:	df000304 	addi	fp,sp,12
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
    9ed4:	01c00204 	movi	r7,8
    9ed8:	000d883a 	mov	r6,zero
    9edc:	000b883a 	mov	r5,zero
    9ee0:	013fc834 	movhi	r4,65312
    9ee4:	21080004 	addi	r4,r4,8192
    9ee8:	000b4700 	call	b470 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER_2, Interval_Timer_2);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
    9eec:	01800204 	movi	r6,8
    9ef0:	000b883a 	mov	r5,zero
    9ef4:	01000074 	movhi	r4,1
    9ef8:	2138c404 	addi	r4,r4,-7408
    9efc:	000a7fc0 	call	a7fc <altera_avalon_jtag_uart_init>
    9f00:	01000074 	movhi	r4,1
    9f04:	2138ba04 	addi	r4,r4,-7448
    9f08:	0009e540 	call	9e54 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, SysID);
    9f0c:	0001883a 	nop
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, AV_Config);
    9f10:	01000074 	movhi	r4,1
    9f14:	213cd504 	addi	r4,r4,-3244
    9f18:	0009e540 	call	9e54 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_SUBSYSTEM_AUDIO, Audio_Subsystem_Audio);
    9f1c:	01000074 	movhi	r4,1
    9f20:	213ce104 	addi	r4,r4,-3196
    9f24:	0009e540 	call	9e54 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHAR_LCD_16X2, Char_LCD_16x2);
    9f28:	01000074 	movhi	r4,1
    9f2c:	213ced04 	addi	r4,r4,-3148
    9f30:	000b5a00 	call	b5a0 <alt_up_character_lcd_init>
    9f34:	01000074 	movhi	r4,1
    9f38:	213ced04 	addi	r4,r4,-3148
    9f3c:	0009e540 	call	9e54 <alt_dev_reg>
    ALTERA_UP_AVALON_IRDA_INIT ( IRDA, IrDA);
    9f40:	01000074 	movhi	r4,1
    9f44:	213cf804 	addi	r4,r4,-3104
    9f48:	0009e540 	call	9e54 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT, PS2_Port);
    9f4c:	01000074 	movhi	r4,1
    9f50:	213d0304 	addi	r4,r4,-3060
    9f54:	000be9c0 	call	be9c <alt_up_ps2_init>
    9f58:	01000074 	movhi	r4,1
    9f5c:	213d0304 	addi	r4,r4,-3060
    9f60:	0009e540 	call	9e54 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT_DUAL, PS2_Port_Dual);
    9f64:	01000074 	movhi	r4,1
    9f68:	213d1104 	addi	r4,r4,-3004
    9f6c:	000be9c0 	call	be9c <alt_up_ps2_init>
    9f70:	01000074 	movhi	r4,1
    9f74:	213d1104 	addi	r4,r4,-3004
    9f78:	0009e540 	call	9e54 <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
    9f7c:	01000074 	movhi	r4,1
    9f80:	213d1f04 	addi	r4,r4,-2948
    9f84:	0009e540 	call	9e54 <alt_dev_reg>
    ALTERA_UP_AVALON_USB_INIT ( USB, USB);
    9f88:	01000074 	movhi	r4,1
    9f8c:	213d2a04 	addi	r4,r4,-2904
    9f90:	0009e540 	call	9e54 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_DMA_CONTROLLER_INIT ( VGA_SUBSYSTEM_CHAR_BUF_SUBSYSTEM_CHAR_BUF_DMA, VGA_Subsystem_Char_Buf_Subsystem_Char_Buf_DMA);
    9f94:	00800074 	movhi	r2,1
    9f98:	10bd4117 	ldw	r2,-2812(r2)
    9f9c:	10800017 	ldw	r2,0(r2)
    9fa0:	1007883a 	mov	r3,r2
    9fa4:	00800074 	movhi	r2,1
    9fa8:	10fd4215 	stw	r3,-2808(r2)
    9fac:	00800074 	movhi	r2,1
    9fb0:	10bd4117 	ldw	r2,-2812(r2)
    9fb4:	10800104 	addi	r2,r2,4
    9fb8:	10800017 	ldw	r2,0(r2)
    9fbc:	1007883a 	mov	r3,r2
    9fc0:	00800074 	movhi	r2,1
    9fc4:	10fd4315 	stw	r3,-2804(r2)
    9fc8:	00800074 	movhi	r2,1
    9fcc:	10bd4117 	ldw	r2,-2812(r2)
    9fd0:	10800204 	addi	r2,r2,8
    9fd4:	10800017 	ldw	r2,0(r2)
    9fd8:	10ffffcc 	andi	r3,r2,65535
    9fdc:	00800074 	movhi	r2,1
    9fe0:	10fd4815 	stw	r3,-2784(r2)
    9fe4:	00800074 	movhi	r2,1
    9fe8:	10bd4117 	ldw	r2,-2812(r2)
    9fec:	10800204 	addi	r2,r2,8
    9ff0:	10800017 	ldw	r2,0(r2)
    9ff4:	1006d43a 	srli	r3,r2,16
    9ff8:	00800074 	movhi	r2,1
    9ffc:	10fd4915 	stw	r3,-2780(r2)
    a000:	00800074 	movhi	r2,1
    a004:	10bd4117 	ldw	r2,-2812(r2)
    a008:	10800304 	addi	r2,r2,12
    a00c:	10800017 	ldw	r2,0(r2)
    a010:	1005d07a 	srai	r2,r2,1
    a014:	10c0004c 	andi	r3,r2,1
    a018:	00800074 	movhi	r2,1
    a01c:	10fd4415 	stw	r3,-2800(r2)
    a020:	00800074 	movhi	r2,1
    a024:	10bd4117 	ldw	r2,-2812(r2)
    a028:	10800304 	addi	r2,r2,12
    a02c:	10800017 	ldw	r2,0(r2)
    a030:	1005d23a 	srai	r2,r2,8
    a034:	108003cc 	andi	r2,r2,15
    a038:	10800044 	addi	r2,r2,1
    a03c:	1007883a 	mov	r3,r2
    a040:	00800074 	movhi	r2,1
    a044:	10fd4515 	stw	r3,-2796(r2)
    a048:	00800074 	movhi	r2,1
    a04c:	10bd4117 	ldw	r2,-2812(r2)
    a050:	10800304 	addi	r2,r2,12
    a054:	10800017 	ldw	r2,0(r2)
    a058:	1005d1ba 	srai	r2,r2,6
    a05c:	108000cc 	andi	r2,r2,3
    a060:	10800044 	addi	r2,r2,1
    a064:	1007883a 	mov	r3,r2
    a068:	00800074 	movhi	r2,1
    a06c:	10fd4615 	stw	r3,-2792(r2)
    a070:	00800074 	movhi	r2,1
    a074:	10bd4517 	ldw	r2,-2796(r2)
    a078:	1007883a 	mov	r3,r2
    a07c:	00800074 	movhi	r2,1
    a080:	10bd4617 	ldw	r2,-2792(r2)
    a084:	1885383a 	mul	r2,r3,r2
    a088:	e0bfffc5 	stb	r2,-1(fp)
    a08c:	e0bfffc3 	ldbu	r2,-1(fp)
    a090:	10800268 	cmpgeui	r2,r2,9
    a094:	1000041e 	bne	r2,zero,a0a8 <alt_sys_init+0x1e4>
    a098:	00c00044 	movi	r3,1
    a09c:	00800074 	movhi	r2,1
    a0a0:	10fd4715 	stw	r3,-2788(r2)
    a0a4:	00000a06 	br	a0d0 <alt_sys_init+0x20c>
    a0a8:	e0bfffc3 	ldbu	r2,-1(fp)
    a0ac:	10800468 	cmpgeui	r2,r2,17
    a0b0:	1000041e 	bne	r2,zero,a0c4 <alt_sys_init+0x200>
    a0b4:	00c00084 	movi	r3,2
    a0b8:	00800074 	movhi	r2,1
    a0bc:	10fd4715 	stw	r3,-2788(r2)
    a0c0:	00000306 	br	a0d0 <alt_sys_init+0x20c>
    a0c4:	00c00104 	movi	r3,4
    a0c8:	00800074 	movhi	r2,1
    a0cc:	10fd4715 	stw	r3,-2788(r2)
    a0d0:	00800074 	movhi	r2,1
    a0d4:	10bd4117 	ldw	r2,-2812(r2)
    a0d8:	10800304 	addi	r2,r2,12
    a0dc:	10800017 	ldw	r2,0(r2)
    a0e0:	1005d43a 	srai	r2,r2,16
    a0e4:	e0bfff85 	stb	r2,-2(fp)
    a0e8:	00800074 	movhi	r2,1
    a0ec:	10bd4117 	ldw	r2,-2812(r2)
    a0f0:	10800304 	addi	r2,r2,12
    a0f4:	10800017 	ldw	r2,0(r2)
    a0f8:	1004d63a 	srli	r2,r2,24
    a0fc:	e0bfff45 	stb	r2,-3(fp)
    a100:	00800074 	movhi	r2,1
    a104:	10bd4717 	ldw	r2,-2788(r2)
    a108:	10800058 	cmpnei	r2,r2,1
    a10c:	1000031e 	bne	r2,zero,a11c <alt_sys_init+0x258>
    a110:	00800074 	movhi	r2,1
    a114:	103d4a15 	stw	zero,-2776(r2)
    a118:	00000b06 	br	a148 <alt_sys_init+0x284>
    a11c:	00800074 	movhi	r2,1
    a120:	10bd4717 	ldw	r2,-2788(r2)
    a124:	10800098 	cmpnei	r2,r2,2
    a128:	1000041e 	bne	r2,zero,a13c <alt_sys_init+0x278>
    a12c:	00c00044 	movi	r3,1
    a130:	00800074 	movhi	r2,1
    a134:	10fd4a15 	stw	r3,-2776(r2)
    a138:	00000306 	br	a148 <alt_sys_init+0x284>
    a13c:	00c00084 	movi	r3,2
    a140:	00800074 	movhi	r2,1
    a144:	10fd4a15 	stw	r3,-2776(r2)
    a148:	e0bfff83 	ldbu	r2,-2(fp)
    a14c:	00c00804 	movi	r3,32
    a150:	1885c83a 	sub	r2,r3,r2
    a154:	00ffffc4 	movi	r3,-1
    a158:	1886d83a 	srl	r3,r3,r2
    a15c:	00800074 	movhi	r2,1
    a160:	10fd4b15 	stw	r3,-2772(r2)
    a164:	e0ffff83 	ldbu	r3,-2(fp)
    a168:	00800074 	movhi	r2,1
    a16c:	10bd4a17 	ldw	r2,-2776(r2)
    a170:	1887883a 	add	r3,r3,r2
    a174:	00800074 	movhi	r2,1
    a178:	10fd4c15 	stw	r3,-2768(r2)
    a17c:	e0bfff43 	ldbu	r2,-3(fp)
    a180:	00c00804 	movi	r3,32
    a184:	1885c83a 	sub	r2,r3,r2
    a188:	00ffffc4 	movi	r3,-1
    a18c:	1886d83a 	srl	r3,r3,r2
    a190:	00800074 	movhi	r2,1
    a194:	10fd4d15 	stw	r3,-2764(r2)
    a198:	01000074 	movhi	r4,1
    a19c:	213d3704 	addi	r4,r4,-2852
    a1a0:	0009e540 	call	9e54 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_DMA_CONTROLLER_INIT ( VGA_SUBSYSTEM_VGA_PIXEL_DMA, VGA_Subsystem_VGA_Pixel_DMA);
    a1a4:	00800074 	movhi	r2,1
    a1a8:	10bd5817 	ldw	r2,-2720(r2)
    a1ac:	10800017 	ldw	r2,0(r2)
    a1b0:	1007883a 	mov	r3,r2
    a1b4:	00800074 	movhi	r2,1
    a1b8:	10fd5915 	stw	r3,-2716(r2)
    a1bc:	00800074 	movhi	r2,1
    a1c0:	10bd5817 	ldw	r2,-2720(r2)
    a1c4:	10800104 	addi	r2,r2,4
    a1c8:	10800017 	ldw	r2,0(r2)
    a1cc:	1007883a 	mov	r3,r2
    a1d0:	00800074 	movhi	r2,1
    a1d4:	10fd5a15 	stw	r3,-2712(r2)
    a1d8:	00800074 	movhi	r2,1
    a1dc:	10bd5817 	ldw	r2,-2720(r2)
    a1e0:	10800204 	addi	r2,r2,8
    a1e4:	10800017 	ldw	r2,0(r2)
    a1e8:	10ffffcc 	andi	r3,r2,65535
    a1ec:	00800074 	movhi	r2,1
    a1f0:	10fd5f15 	stw	r3,-2692(r2)
    a1f4:	00800074 	movhi	r2,1
    a1f8:	10bd5817 	ldw	r2,-2720(r2)
    a1fc:	10800204 	addi	r2,r2,8
    a200:	10800017 	ldw	r2,0(r2)
    a204:	1006d43a 	srli	r3,r2,16
    a208:	00800074 	movhi	r2,1
    a20c:	10fd6015 	stw	r3,-2688(r2)
    a210:	00800074 	movhi	r2,1
    a214:	10bd5817 	ldw	r2,-2720(r2)
    a218:	10800304 	addi	r2,r2,12
    a21c:	10800017 	ldw	r2,0(r2)
    a220:	1005d07a 	srai	r2,r2,1
    a224:	10c0004c 	andi	r3,r2,1
    a228:	00800074 	movhi	r2,1
    a22c:	10fd5b15 	stw	r3,-2708(r2)
    a230:	00800074 	movhi	r2,1
    a234:	10bd5817 	ldw	r2,-2720(r2)
    a238:	10800304 	addi	r2,r2,12
    a23c:	10800017 	ldw	r2,0(r2)
    a240:	1005d23a 	srai	r2,r2,8
    a244:	108003cc 	andi	r2,r2,15
    a248:	10800044 	addi	r2,r2,1
    a24c:	1007883a 	mov	r3,r2
    a250:	00800074 	movhi	r2,1
    a254:	10fd5c15 	stw	r3,-2704(r2)
    a258:	00800074 	movhi	r2,1
    a25c:	10bd5817 	ldw	r2,-2720(r2)
    a260:	10800304 	addi	r2,r2,12
    a264:	10800017 	ldw	r2,0(r2)
    a268:	1005d1ba 	srai	r2,r2,6
    a26c:	108000cc 	andi	r2,r2,3
    a270:	10800044 	addi	r2,r2,1
    a274:	1007883a 	mov	r3,r2
    a278:	00800074 	movhi	r2,1
    a27c:	10fd5d15 	stw	r3,-2700(r2)
    a280:	00800074 	movhi	r2,1
    a284:	10bd5c17 	ldw	r2,-2704(r2)
    a288:	1007883a 	mov	r3,r2
    a28c:	00800074 	movhi	r2,1
    a290:	10bd5d17 	ldw	r2,-2700(r2)
    a294:	1885383a 	mul	r2,r3,r2
    a298:	e0bfff05 	stb	r2,-4(fp)
    a29c:	e0bfff03 	ldbu	r2,-4(fp)
    a2a0:	10800268 	cmpgeui	r2,r2,9
    a2a4:	1000041e 	bne	r2,zero,a2b8 <alt_sys_init+0x3f4>
    a2a8:	00c00044 	movi	r3,1
    a2ac:	00800074 	movhi	r2,1
    a2b0:	10fd5e15 	stw	r3,-2696(r2)
    a2b4:	00000a06 	br	a2e0 <alt_sys_init+0x41c>
    a2b8:	e0bfff03 	ldbu	r2,-4(fp)
    a2bc:	10800468 	cmpgeui	r2,r2,17
    a2c0:	1000041e 	bne	r2,zero,a2d4 <alt_sys_init+0x410>
    a2c4:	00c00084 	movi	r3,2
    a2c8:	00800074 	movhi	r2,1
    a2cc:	10fd5e15 	stw	r3,-2696(r2)
    a2d0:	00000306 	br	a2e0 <alt_sys_init+0x41c>
    a2d4:	00c00104 	movi	r3,4
    a2d8:	00800074 	movhi	r2,1
    a2dc:	10fd5e15 	stw	r3,-2696(r2)
    a2e0:	00800074 	movhi	r2,1
    a2e4:	10bd5817 	ldw	r2,-2720(r2)
    a2e8:	10800304 	addi	r2,r2,12
    a2ec:	10800017 	ldw	r2,0(r2)
    a2f0:	1005d43a 	srai	r2,r2,16
    a2f4:	e0bffec5 	stb	r2,-5(fp)
    a2f8:	00800074 	movhi	r2,1
    a2fc:	10bd5817 	ldw	r2,-2720(r2)
    a300:	10800304 	addi	r2,r2,12
    a304:	10800017 	ldw	r2,0(r2)
    a308:	1004d63a 	srli	r2,r2,24
    a30c:	e0bffe85 	stb	r2,-6(fp)
    a310:	00800074 	movhi	r2,1
    a314:	10bd5e17 	ldw	r2,-2696(r2)
    a318:	10800058 	cmpnei	r2,r2,1
    a31c:	1000031e 	bne	r2,zero,a32c <alt_sys_init+0x468>
    a320:	00800074 	movhi	r2,1
    a324:	103d6115 	stw	zero,-2684(r2)
    a328:	00000b06 	br	a358 <alt_sys_init+0x494>
    a32c:	00800074 	movhi	r2,1
    a330:	10bd5e17 	ldw	r2,-2696(r2)
    a334:	10800098 	cmpnei	r2,r2,2
    a338:	1000041e 	bne	r2,zero,a34c <alt_sys_init+0x488>
    a33c:	00c00044 	movi	r3,1
    a340:	00800074 	movhi	r2,1
    a344:	10fd6115 	stw	r3,-2684(r2)
    a348:	00000306 	br	a358 <alt_sys_init+0x494>
    a34c:	00c00084 	movi	r3,2
    a350:	00800074 	movhi	r2,1
    a354:	10fd6115 	stw	r3,-2684(r2)
    a358:	e0bffec3 	ldbu	r2,-5(fp)
    a35c:	00c00804 	movi	r3,32
    a360:	1885c83a 	sub	r2,r3,r2
    a364:	00ffffc4 	movi	r3,-1
    a368:	1886d83a 	srl	r3,r3,r2
    a36c:	00800074 	movhi	r2,1
    a370:	10fd6215 	stw	r3,-2680(r2)
    a374:	e0fffec3 	ldbu	r3,-5(fp)
    a378:	00800074 	movhi	r2,1
    a37c:	10bd6117 	ldw	r2,-2684(r2)
    a380:	1887883a 	add	r3,r3,r2
    a384:	00800074 	movhi	r2,1
    a388:	10fd6315 	stw	r3,-2676(r2)
    a38c:	e0bffe83 	ldbu	r2,-6(fp)
    a390:	00c00804 	movi	r3,32
    a394:	1885c83a 	sub	r2,r3,r2
    a398:	00ffffc4 	movi	r3,-1
    a39c:	1886d83a 	srl	r3,r3,r2
    a3a0:	00800074 	movhi	r2,1
    a3a4:	10fd6415 	stw	r3,-2672(r2)
    a3a8:	01000074 	movhi	r4,1
    a3ac:	213d4e04 	addi	r4,r4,-2760
    a3b0:	0009e540 	call	9e54 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_DMA_CONTROLLER_INIT ( VIDEO_IN_SUBSYSTEM_VIDEO_IN_DMA, Video_In_Subsystem_Video_In_DMA);
    a3b4:	00800074 	movhi	r2,1
    a3b8:	10bd6f17 	ldw	r2,-2628(r2)
    a3bc:	10800017 	ldw	r2,0(r2)
    a3c0:	1007883a 	mov	r3,r2
    a3c4:	00800074 	movhi	r2,1
    a3c8:	10fd7015 	stw	r3,-2624(r2)
    a3cc:	00800074 	movhi	r2,1
    a3d0:	10bd6f17 	ldw	r2,-2628(r2)
    a3d4:	10800104 	addi	r2,r2,4
    a3d8:	10800017 	ldw	r2,0(r2)
    a3dc:	1007883a 	mov	r3,r2
    a3e0:	00800074 	movhi	r2,1
    a3e4:	10fd7115 	stw	r3,-2620(r2)
    a3e8:	00800074 	movhi	r2,1
    a3ec:	10bd6f17 	ldw	r2,-2628(r2)
    a3f0:	10800204 	addi	r2,r2,8
    a3f4:	10800017 	ldw	r2,0(r2)
    a3f8:	10ffffcc 	andi	r3,r2,65535
    a3fc:	00800074 	movhi	r2,1
    a400:	10fd7615 	stw	r3,-2600(r2)
    a404:	00800074 	movhi	r2,1
    a408:	10bd6f17 	ldw	r2,-2628(r2)
    a40c:	10800204 	addi	r2,r2,8
    a410:	10800017 	ldw	r2,0(r2)
    a414:	1006d43a 	srli	r3,r2,16
    a418:	00800074 	movhi	r2,1
    a41c:	10fd7715 	stw	r3,-2596(r2)
    a420:	00800074 	movhi	r2,1
    a424:	10bd6f17 	ldw	r2,-2628(r2)
    a428:	10800304 	addi	r2,r2,12
    a42c:	10800017 	ldw	r2,0(r2)
    a430:	1005d07a 	srai	r2,r2,1
    a434:	10c0004c 	andi	r3,r2,1
    a438:	00800074 	movhi	r2,1
    a43c:	10fd7215 	stw	r3,-2616(r2)
    a440:	00800074 	movhi	r2,1
    a444:	10bd6f17 	ldw	r2,-2628(r2)
    a448:	10800304 	addi	r2,r2,12
    a44c:	10800017 	ldw	r2,0(r2)
    a450:	1005d23a 	srai	r2,r2,8
    a454:	108003cc 	andi	r2,r2,15
    a458:	10800044 	addi	r2,r2,1
    a45c:	1007883a 	mov	r3,r2
    a460:	00800074 	movhi	r2,1
    a464:	10fd7315 	stw	r3,-2612(r2)
    a468:	00800074 	movhi	r2,1
    a46c:	10bd6f17 	ldw	r2,-2628(r2)
    a470:	10800304 	addi	r2,r2,12
    a474:	10800017 	ldw	r2,0(r2)
    a478:	1005d1ba 	srai	r2,r2,6
    a47c:	108000cc 	andi	r2,r2,3
    a480:	10800044 	addi	r2,r2,1
    a484:	1007883a 	mov	r3,r2
    a488:	00800074 	movhi	r2,1
    a48c:	10fd7415 	stw	r3,-2608(r2)
    a490:	00800074 	movhi	r2,1
    a494:	10bd7317 	ldw	r2,-2612(r2)
    a498:	1007883a 	mov	r3,r2
    a49c:	00800074 	movhi	r2,1
    a4a0:	10bd7417 	ldw	r2,-2608(r2)
    a4a4:	1885383a 	mul	r2,r3,r2
    a4a8:	e0bffe45 	stb	r2,-7(fp)
    a4ac:	e0bffe43 	ldbu	r2,-7(fp)
    a4b0:	10800268 	cmpgeui	r2,r2,9
    a4b4:	1000041e 	bne	r2,zero,a4c8 <alt_sys_init+0x604>
    a4b8:	00c00044 	movi	r3,1
    a4bc:	00800074 	movhi	r2,1
    a4c0:	10fd7515 	stw	r3,-2604(r2)
    a4c4:	00000a06 	br	a4f0 <alt_sys_init+0x62c>
    a4c8:	e0bffe43 	ldbu	r2,-7(fp)
    a4cc:	10800468 	cmpgeui	r2,r2,17
    a4d0:	1000041e 	bne	r2,zero,a4e4 <alt_sys_init+0x620>
    a4d4:	00c00084 	movi	r3,2
    a4d8:	00800074 	movhi	r2,1
    a4dc:	10fd7515 	stw	r3,-2604(r2)
    a4e0:	00000306 	br	a4f0 <alt_sys_init+0x62c>
    a4e4:	00c00104 	movi	r3,4
    a4e8:	00800074 	movhi	r2,1
    a4ec:	10fd7515 	stw	r3,-2604(r2)
    a4f0:	00800074 	movhi	r2,1
    a4f4:	10bd6f17 	ldw	r2,-2628(r2)
    a4f8:	10800304 	addi	r2,r2,12
    a4fc:	10800017 	ldw	r2,0(r2)
    a500:	1005d43a 	srai	r2,r2,16
    a504:	e0bffe05 	stb	r2,-8(fp)
    a508:	00800074 	movhi	r2,1
    a50c:	10bd6f17 	ldw	r2,-2628(r2)
    a510:	10800304 	addi	r2,r2,12
    a514:	10800017 	ldw	r2,0(r2)
    a518:	1004d63a 	srli	r2,r2,24
    a51c:	e0bffdc5 	stb	r2,-9(fp)
    a520:	00800074 	movhi	r2,1
    a524:	10bd7517 	ldw	r2,-2604(r2)
    a528:	10800058 	cmpnei	r2,r2,1
    a52c:	1000031e 	bne	r2,zero,a53c <alt_sys_init+0x678>
    a530:	00800074 	movhi	r2,1
    a534:	103d7815 	stw	zero,-2592(r2)
    a538:	00000b06 	br	a568 <alt_sys_init+0x6a4>
    a53c:	00800074 	movhi	r2,1
    a540:	10bd7517 	ldw	r2,-2604(r2)
    a544:	10800098 	cmpnei	r2,r2,2
    a548:	1000041e 	bne	r2,zero,a55c <alt_sys_init+0x698>
    a54c:	00c00044 	movi	r3,1
    a550:	00800074 	movhi	r2,1
    a554:	10fd7815 	stw	r3,-2592(r2)
    a558:	00000306 	br	a568 <alt_sys_init+0x6a4>
    a55c:	00c00084 	movi	r3,2
    a560:	00800074 	movhi	r2,1
    a564:	10fd7815 	stw	r3,-2592(r2)
    a568:	e0bffe03 	ldbu	r2,-8(fp)
    a56c:	00c00804 	movi	r3,32
    a570:	1885c83a 	sub	r2,r3,r2
    a574:	00ffffc4 	movi	r3,-1
    a578:	1886d83a 	srl	r3,r3,r2
    a57c:	00800074 	movhi	r2,1
    a580:	10fd7915 	stw	r3,-2588(r2)
    a584:	e0fffe03 	ldbu	r3,-8(fp)
    a588:	00800074 	movhi	r2,1
    a58c:	10bd7817 	ldw	r2,-2592(r2)
    a590:	1887883a 	add	r3,r3,r2
    a594:	00800074 	movhi	r2,1
    a598:	10fd7a15 	stw	r3,-2584(r2)
    a59c:	e0bffdc3 	ldbu	r2,-9(fp)
    a5a0:	00c00804 	movi	r3,32
    a5a4:	1885c83a 	sub	r2,r3,r2
    a5a8:	00ffffc4 	movi	r3,-1
    a5ac:	1886d83a 	srl	r3,r3,r2
    a5b0:	00800074 	movhi	r2,1
    a5b4:	10fd7b15 	stw	r3,-2580(r2)
    a5b8:	01000074 	movhi	r4,1
    a5bc:	213d6504 	addi	r4,r4,-2668
    a5c0:	0009e540 	call	9e54 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_RGB_RESAMPLER_INIT ( VGA_SUBSYSTEM_VGA_PIXEL_RGB_RESAMPLER, VGA_Subsystem_VGA_Pixel_RGB_Resampler);
    a5c4:	00800074 	movhi	r2,1
    a5c8:	10bd8617 	ldw	r2,-2536(r2)
    a5cc:	10800017 	ldw	r2,0(r2)
    a5d0:	10c003cc 	andi	r3,r2,15
    a5d4:	00800074 	movhi	r2,1
    a5d8:	10fd8715 	stw	r3,-2532(r2)
    a5dc:	00800074 	movhi	r2,1
    a5e0:	10bd8617 	ldw	r2,-2536(r2)
    a5e4:	10800017 	ldw	r2,0(r2)
    a5e8:	1005d13a 	srai	r2,r2,4
    a5ec:	10c0004c 	andi	r3,r2,1
    a5f0:	00800074 	movhi	r2,1
    a5f4:	10fd8815 	stw	r3,-2528(r2)
    a5f8:	00800074 	movhi	r2,1
    a5fc:	10bd8617 	ldw	r2,-2536(r2)
    a600:	10800017 	ldw	r2,0(r2)
    a604:	1005d17a 	srai	r2,r2,5
    a608:	10c0004c 	andi	r3,r2,1
    a60c:	00800074 	movhi	r2,1
    a610:	10fd8915 	stw	r3,-2524(r2)
    a614:	00800074 	movhi	r2,1
    a618:	10bd8617 	ldw	r2,-2536(r2)
    a61c:	10800017 	ldw	r2,0(r2)
    a620:	1005d43a 	srai	r2,r2,16
    a624:	10c003cc 	andi	r3,r2,15
    a628:	00800074 	movhi	r2,1
    a62c:	10fd8a15 	stw	r3,-2520(r2)
    a630:	00800074 	movhi	r2,1
    a634:	10bd8617 	ldw	r2,-2536(r2)
    a638:	10800017 	ldw	r2,0(r2)
    a63c:	1005d53a 	srai	r2,r2,20
    a640:	10c0004c 	andi	r3,r2,1
    a644:	00800074 	movhi	r2,1
    a648:	10fd8b15 	stw	r3,-2516(r2)
    a64c:	00800074 	movhi	r2,1
    a650:	10bd8617 	ldw	r2,-2536(r2)
    a654:	10800017 	ldw	r2,0(r2)
    a658:	1005d57a 	srai	r2,r2,21
    a65c:	10c0004c 	andi	r3,r2,1
    a660:	00800074 	movhi	r2,1
    a664:	10fd8c15 	stw	r3,-2512(r2)
    a668:	01000074 	movhi	r4,1
    a66c:	213d7c04 	addi	r4,r4,-2576
    a670:	0009e540 	call	9e54 <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD, SD_Card);
    a674:	01000074 	movhi	r4,1
    a678:	213d8d04 	addi	r4,r4,-2508
    a67c:	0009e540 	call	9e54 <alt_dev_reg>
}
    a680:	0001883a 	nop
    a684:	e037883a 	mov	sp,fp
    a688:	dfc00117 	ldw	ra,4(sp)
    a68c:	df000017 	ldw	fp,0(sp)
    a690:	dec00204 	addi	sp,sp,8
    a694:	f800283a 	ret

0000a698 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    a698:	defffa04 	addi	sp,sp,-24
    a69c:	dfc00515 	stw	ra,20(sp)
    a6a0:	df000415 	stw	fp,16(sp)
    a6a4:	df000404 	addi	fp,sp,16
    a6a8:	e13ffe15 	stw	r4,-8(fp)
    a6ac:	e17ffd15 	stw	r5,-12(fp)
    a6b0:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    a6b4:	e0bffe17 	ldw	r2,-8(fp)
    a6b8:	10800017 	ldw	r2,0(r2)
    a6bc:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    a6c0:	e0bfff17 	ldw	r2,-4(fp)
    a6c4:	10c00a04 	addi	r3,r2,40
    a6c8:	e0bffe17 	ldw	r2,-8(fp)
    a6cc:	10800217 	ldw	r2,8(r2)
    a6d0:	100f883a 	mov	r7,r2
    a6d4:	e1bffc17 	ldw	r6,-16(fp)
    a6d8:	e17ffd17 	ldw	r5,-12(fp)
    a6dc:	1809883a 	mov	r4,r3
    a6e0:	000ae580 	call	ae58 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    a6e4:	e037883a 	mov	sp,fp
    a6e8:	dfc00117 	ldw	ra,4(sp)
    a6ec:	df000017 	ldw	fp,0(sp)
    a6f0:	dec00204 	addi	sp,sp,8
    a6f4:	f800283a 	ret

0000a6f8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    a6f8:	defffa04 	addi	sp,sp,-24
    a6fc:	dfc00515 	stw	ra,20(sp)
    a700:	df000415 	stw	fp,16(sp)
    a704:	df000404 	addi	fp,sp,16
    a708:	e13ffe15 	stw	r4,-8(fp)
    a70c:	e17ffd15 	stw	r5,-12(fp)
    a710:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    a714:	e0bffe17 	ldw	r2,-8(fp)
    a718:	10800017 	ldw	r2,0(r2)
    a71c:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    a720:	e0bfff17 	ldw	r2,-4(fp)
    a724:	10c00a04 	addi	r3,r2,40
    a728:	e0bffe17 	ldw	r2,-8(fp)
    a72c:	10800217 	ldw	r2,8(r2)
    a730:	100f883a 	mov	r7,r2
    a734:	e1bffc17 	ldw	r6,-16(fp)
    a738:	e17ffd17 	ldw	r5,-12(fp)
    a73c:	1809883a 	mov	r4,r3
    a740:	000b1200 	call	b120 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    a744:	e037883a 	mov	sp,fp
    a748:	dfc00117 	ldw	ra,4(sp)
    a74c:	df000017 	ldw	fp,0(sp)
    a750:	dec00204 	addi	sp,sp,8
    a754:	f800283a 	ret

0000a758 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    a758:	defffc04 	addi	sp,sp,-16
    a75c:	dfc00315 	stw	ra,12(sp)
    a760:	df000215 	stw	fp,8(sp)
    a764:	df000204 	addi	fp,sp,8
    a768:	e13ffe15 	stw	r4,-8(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    a76c:	e0bffe17 	ldw	r2,-8(fp)
    a770:	10800017 	ldw	r2,0(r2)
    a774:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    a778:	e0bfff17 	ldw	r2,-4(fp)
    a77c:	10c00a04 	addi	r3,r2,40
    a780:	e0bffe17 	ldw	r2,-8(fp)
    a784:	10800217 	ldw	r2,8(r2)
    a788:	100b883a 	mov	r5,r2
    a78c:	1809883a 	mov	r4,r3
    a790:	000acfc0 	call	acfc <altera_avalon_jtag_uart_close>
}
    a794:	e037883a 	mov	sp,fp
    a798:	dfc00117 	ldw	ra,4(sp)
    a79c:	df000017 	ldw	fp,0(sp)
    a7a0:	dec00204 	addi	sp,sp,8
    a7a4:	f800283a 	ret

0000a7a8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    a7a8:	defffa04 	addi	sp,sp,-24
    a7ac:	dfc00515 	stw	ra,20(sp)
    a7b0:	df000415 	stw	fp,16(sp)
    a7b4:	df000404 	addi	fp,sp,16
    a7b8:	e13ffe15 	stw	r4,-8(fp)
    a7bc:	e17ffd15 	stw	r5,-12(fp)
    a7c0:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    a7c4:	e0bffe17 	ldw	r2,-8(fp)
    a7c8:	10800017 	ldw	r2,0(r2)
    a7cc:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    a7d0:	e0bfff17 	ldw	r2,-4(fp)
    a7d4:	10800a04 	addi	r2,r2,40
    a7d8:	e1bffc17 	ldw	r6,-16(fp)
    a7dc:	e17ffd17 	ldw	r5,-12(fp)
    a7e0:	1009883a 	mov	r4,r2
    a7e4:	000ad640 	call	ad64 <altera_avalon_jtag_uart_ioctl>
}
    a7e8:	e037883a 	mov	sp,fp
    a7ec:	dfc00117 	ldw	ra,4(sp)
    a7f0:	df000017 	ldw	fp,0(sp)
    a7f4:	dec00204 	addi	sp,sp,8
    a7f8:	f800283a 	ret

0000a7fc <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    a7fc:	defff504 	addi	sp,sp,-44
    a800:	dfc00a15 	stw	ra,40(sp)
    a804:	df000915 	stw	fp,36(sp)
    a808:	df000904 	addi	fp,sp,36
    a80c:	e13ff915 	stw	r4,-28(fp)
    a810:	e17ff815 	stw	r5,-32(fp)
    a814:	e1bff715 	stw	r6,-36(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
    a818:	e0bff917 	ldw	r2,-28(fp)
    a81c:	10800c04 	addi	r2,r2,48
    a820:	e0bffb15 	stw	r2,-20(fp)
    a824:	e03ffa8d 	sth	zero,-22(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
    a828:	e0bffa8b 	ldhu	r2,-22(fp)
    a82c:	e0fffa44 	addi	r3,fp,-23
    a830:	180b883a 	mov	r5,r3
    a834:	1009883a 	mov	r4,r2
    a838:	00049f80 	call	49f8 <OSFlagCreate>
    a83c:	1007883a 	mov	r3,r2
    a840:	e0bffb17 	ldw	r2,-20(fp)
    a844:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
    a848:	e0bff917 	ldw	r2,-28(fp)
    a84c:	10800a04 	addi	r2,r2,40
    a850:	e0bffd15 	stw	r2,-12(fp)
    a854:	00800044 	movi	r2,1
    a858:	e0bffc8d 	sth	r2,-14(fp)
  *sem = OSSemCreate (value);
    a85c:	e0bffc8b 	ldhu	r2,-14(fp)
    a860:	1009883a 	mov	r4,r2
    a864:	00078200 	call	7820 <OSSemCreate>
    a868:	1007883a 	mov	r3,r2
    a86c:	e0bffd17 	ldw	r2,-12(fp)
    a870:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
    a874:	0001883a 	nop
  ALT_SEM_CREATE(&sp->write_lock, 1);
    a878:	e0bff917 	ldw	r2,-28(fp)
    a87c:	10800b04 	addi	r2,r2,44
    a880:	e0bfff15 	stw	r2,-4(fp)
    a884:	00800044 	movi	r2,1
    a888:	e0bffe8d 	sth	r2,-6(fp)
  *sem = OSSemCreate (value);
    a88c:	e0bffe8b 	ldhu	r2,-6(fp)
    a890:	1009883a 	mov	r4,r2
    a894:	00078200 	call	7820 <OSSemCreate>
    a898:	1007883a 	mov	r3,r2
    a89c:	e0bfff17 	ldw	r2,-4(fp)
    a8a0:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
    a8a4:	0001883a 	nop

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    a8a8:	e0bff917 	ldw	r2,-28(fp)
    a8ac:	00c00044 	movi	r3,1
    a8b0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    a8b4:	e0bff917 	ldw	r2,-28(fp)
    a8b8:	10800017 	ldw	r2,0(r2)
    a8bc:	10800104 	addi	r2,r2,4
    a8c0:	1007883a 	mov	r3,r2
    a8c4:	e0bff917 	ldw	r2,-28(fp)
    a8c8:	10800817 	ldw	r2,32(r2)
    a8cc:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
    a8d0:	e0bff717 	ldw	r2,-36(fp)
    a8d4:	01800074 	movhi	r6,1
    a8d8:	31aa5004 	addi	r6,r6,-22208
    a8dc:	e17ff917 	ldw	r5,-28(fp)
    a8e0:	1009883a 	mov	r4,r2
    a8e4:	000cde00 	call	cde0 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    a8e8:	e0bff917 	ldw	r2,-28(fp)
    a8ec:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    a8f0:	e0bff917 	ldw	r2,-28(fp)
    a8f4:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    a8f8:	d0e6f117 	ldw	r3,-25660(gp)
    a8fc:	e1fff917 	ldw	r7,-28(fp)
    a900:	01800074 	movhi	r6,1
    a904:	31aafc04 	addi	r6,r6,-21520
    a908:	180b883a 	mov	r5,r3
    a90c:	1009883a 	mov	r4,r2
    a910:	000c7b80 	call	c7b8 <alt_alarm_start>
    a914:	1000040e 	bge	r2,zero,a928 <altera_avalon_jtag_uart_init+0x12c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    a918:	e0fff917 	ldw	r3,-28(fp)
    a91c:	00a00034 	movhi	r2,32768
    a920:	10bfffc4 	addi	r2,r2,-1
    a924:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    a928:	0001883a 	nop
    a92c:	e037883a 	mov	sp,fp
    a930:	dfc00117 	ldw	ra,4(sp)
    a934:	df000017 	ldw	fp,0(sp)
    a938:	dec00204 	addi	sp,sp,8
    a93c:	f800283a 	ret

0000a940 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    a940:	defff104 	addi	sp,sp,-60
    a944:	dfc00e15 	stw	ra,56(sp)
    a948:	df000d15 	stw	fp,52(sp)
    a94c:	df000d04 	addi	fp,sp,52
    a950:	e13ff415 	stw	r4,-48(fp)
    a954:	e17ff315 	stw	r5,-52(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    a958:	e0bff417 	ldw	r2,-48(fp)
    a95c:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
    a960:	e0bffd17 	ldw	r2,-12(fp)
    a964:	10800017 	ldw	r2,0(r2)
    a968:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    a96c:	e0bffc17 	ldw	r2,-16(fp)
    a970:	10800104 	addi	r2,r2,4
    a974:	10800037 	ldwio	r2,0(r2)
    a978:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    a97c:	e0bffb17 	ldw	r2,-20(fp)
    a980:	1080c00c 	andi	r2,r2,768
    a984:	10009326 	beq	r2,zero,abd4 <altera_avalon_jtag_uart_irq+0x294>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    a988:	e0bffb17 	ldw	r2,-20(fp)
    a98c:	1080400c 	andi	r2,r2,256
    a990:	10004826 	beq	r2,zero,aab4 <altera_avalon_jtag_uart_irq+0x174>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    a994:	00800074 	movhi	r2,1
    a998:	e0bfff15 	stw	r2,-4(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    a99c:	e0bffd17 	ldw	r2,-12(fp)
    a9a0:	10800d17 	ldw	r2,52(r2)
    a9a4:	10800044 	addi	r2,r2,1
    a9a8:	1081ffcc 	andi	r2,r2,2047
    a9ac:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
    a9b0:	e0bffd17 	ldw	r2,-12(fp)
    a9b4:	10800e17 	ldw	r2,56(r2)
    a9b8:	e0fffa17 	ldw	r3,-24(fp)
    a9bc:	18802826 	beq	r3,r2,aa60 <altera_avalon_jtag_uart_irq+0x120>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    a9c0:	e0bffc17 	ldw	r2,-16(fp)
    a9c4:	10800037 	ldwio	r2,0(r2)
    a9c8:	e0bfff15 	stw	r2,-4(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    a9cc:	e0bfff17 	ldw	r2,-4(fp)
    a9d0:	10a0000c 	andi	r2,r2,32768
    a9d4:	10002426 	beq	r2,zero,aa68 <altera_avalon_jtag_uart_irq+0x128>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    a9d8:	e0bffd17 	ldw	r2,-12(fp)
    a9dc:	10800d17 	ldw	r2,52(r2)
    a9e0:	e0ffff17 	ldw	r3,-4(fp)
    a9e4:	1809883a 	mov	r4,r3
    a9e8:	e0fffd17 	ldw	r3,-12(fp)
    a9ec:	1885883a 	add	r2,r3,r2
    a9f0:	11001105 	stb	r4,68(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    a9f4:	e0bffd17 	ldw	r2,-12(fp)
    a9f8:	10800d17 	ldw	r2,52(r2)
    a9fc:	10800044 	addi	r2,r2,1
    aa00:	10c1ffcc 	andi	r3,r2,2047
    aa04:	e0bffd17 	ldw	r2,-12(fp)
    aa08:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
    aa0c:	e0bffd17 	ldw	r2,-12(fp)
    aa10:	10800c17 	ldw	r2,48(r2)
    aa14:	e0bff915 	stw	r2,-28(fp)
    aa18:	00800044 	movi	r2,1
    aa1c:	e0bff88d 	sth	r2,-30(fp)
    aa20:	00800044 	movi	r2,1
    aa24:	e0bff845 	stb	r2,-31(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
    aa28:	d0a6e543 	ldbu	r2,-25707(gp)
    aa2c:	10803fcc 	andi	r2,r2,255
    aa30:	10000926 	beq	r2,zero,aa58 <altera_avalon_jtag_uart_irq+0x118>
  {
    OSFlagPost (group, flags, opt, &err);
    aa34:	e0bff88b 	ldhu	r2,-30(fp)
    aa38:	e0fff843 	ldbu	r3,-31(fp)
    aa3c:	e13ff604 	addi	r4,fp,-40
    aa40:	200f883a 	mov	r7,r4
    aa44:	180d883a 	mov	r6,r3
    aa48:	100b883a 	mov	r5,r2
    aa4c:	e13ff917 	ldw	r4,-28(fp)
    aa50:	00056480 	call	5648 <OSFlagPost>
    return err;
    aa54:	00000106 	br	aa5c <altera_avalon_jtag_uart_irq+0x11c>
  }
  return OS_ERR_PEND_ISR;
    aa58:	0001883a 	nop
      {
    aa5c:	003fcf06 	br	a99c <altera_avalon_jtag_uart_irq+0x5c>
          break;
    aa60:	0001883a 	nop
    aa64:	00000106 	br	aa6c <altera_avalon_jtag_uart_irq+0x12c>
          break;
    aa68:	0001883a 	nop
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    aa6c:	e0bfff17 	ldw	r2,-4(fp)
    aa70:	10bfffec 	andhi	r2,r2,65535
    aa74:	10000f26 	beq	r2,zero,aab4 <altera_avalon_jtag_uart_irq+0x174>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    aa78:	e0bffd17 	ldw	r2,-12(fp)
    aa7c:	10c00817 	ldw	r3,32(r2)
    aa80:	00bfff84 	movi	r2,-2
    aa84:	1886703a 	and	r3,r3,r2
    aa88:	e0bffd17 	ldw	r2,-12(fp)
    aa8c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    aa90:	e0bffc17 	ldw	r2,-16(fp)
    aa94:	10800104 	addi	r2,r2,4
    aa98:	1007883a 	mov	r3,r2
    aa9c:	e0bffd17 	ldw	r2,-12(fp)
    aaa0:	10800817 	ldw	r2,32(r2)
    aaa4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    aaa8:	e0bffc17 	ldw	r2,-16(fp)
    aaac:	10800104 	addi	r2,r2,4
    aab0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    aab4:	e0bffb17 	ldw	r2,-20(fp)
    aab8:	1080800c 	andi	r2,r2,512
    aabc:	103fab26 	beq	r2,zero,a96c <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    aac0:	e0bffb17 	ldw	r2,-20(fp)
    aac4:	1004d43a 	srli	r2,r2,16
    aac8:	e0bffe15 	stw	r2,-8(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    aacc:	00002706 	br	ab6c <altera_avalon_jtag_uart_irq+0x22c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    aad0:	e0bffc17 	ldw	r2,-16(fp)
    aad4:	e0fffd17 	ldw	r3,-12(fp)
    aad8:	18c01017 	ldw	r3,64(r3)
    aadc:	e13ffd17 	ldw	r4,-12(fp)
    aae0:	20c7883a 	add	r3,r4,r3
    aae4:	18c21103 	ldbu	r3,2116(r3)
    aae8:	18c03fcc 	andi	r3,r3,255
    aaec:	18c0201c 	xori	r3,r3,128
    aaf0:	18ffe004 	addi	r3,r3,-128
    aaf4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    aaf8:	e0bffd17 	ldw	r2,-12(fp)
    aafc:	10801017 	ldw	r2,64(r2)
    ab00:	10800044 	addi	r2,r2,1
    ab04:	10c1ffcc 	andi	r3,r2,2047
    ab08:	e0bffd17 	ldw	r2,-12(fp)
    ab0c:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
    ab10:	e0bffd17 	ldw	r2,-12(fp)
    ab14:	10800c17 	ldw	r2,48(r2)
    ab18:	e0bff715 	stw	r2,-36(fp)
    ab1c:	00800084 	movi	r2,2
    ab20:	e0bff68d 	sth	r2,-38(fp)
    ab24:	00800044 	movi	r2,1
    ab28:	e0bff645 	stb	r2,-39(fp)
  if (OSRunning)
    ab2c:	d0a6e543 	ldbu	r2,-25707(gp)
    ab30:	10803fcc 	andi	r2,r2,255
    ab34:	10000926 	beq	r2,zero,ab5c <altera_avalon_jtag_uart_irq+0x21c>
    OSFlagPost (group, flags, opt, &err);
    ab38:	e0bff68b 	ldhu	r2,-38(fp)
    ab3c:	e0fff643 	ldbu	r3,-39(fp)
    ab40:	e13ff5c4 	addi	r4,fp,-41
    ab44:	200f883a 	mov	r7,r4
    ab48:	180d883a 	mov	r6,r3
    ab4c:	100b883a 	mov	r5,r2
    ab50:	e13ff717 	ldw	r4,-36(fp)
    ab54:	00056480 	call	5648 <OSFlagPost>
    return err;
    ab58:	00000106 	br	ab60 <altera_avalon_jtag_uart_irq+0x220>
  return OS_ERR_PEND_ISR;
    ab5c:	0001883a 	nop

        space--;
    ab60:	e0bffe17 	ldw	r2,-8(fp)
    ab64:	10bfffc4 	addi	r2,r2,-1
    ab68:	e0bffe15 	stw	r2,-8(fp)
      while (space > 0 && sp->tx_out != sp->tx_in)
    ab6c:	e0bffe17 	ldw	r2,-8(fp)
    ab70:	10000526 	beq	r2,zero,ab88 <altera_avalon_jtag_uart_irq+0x248>
    ab74:	e0bffd17 	ldw	r2,-12(fp)
    ab78:	10c01017 	ldw	r3,64(r2)
    ab7c:	e0bffd17 	ldw	r2,-12(fp)
    ab80:	10800f17 	ldw	r2,60(r2)
    ab84:	18bfd21e 	bne	r3,r2,aad0 <altera_avalon_jtag_uart_irq+0x190>
      }

      if (space > 0)
    ab88:	e0bffe17 	ldw	r2,-8(fp)
    ab8c:	103f7726 	beq	r2,zero,a96c <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    ab90:	e0bffd17 	ldw	r2,-12(fp)
    ab94:	10c00817 	ldw	r3,32(r2)
    ab98:	00bfff44 	movi	r2,-3
    ab9c:	1886703a 	and	r3,r3,r2
    aba0:	e0bffd17 	ldw	r2,-12(fp)
    aba4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    aba8:	e0bffd17 	ldw	r2,-12(fp)
    abac:	10800017 	ldw	r2,0(r2)
    abb0:	10800104 	addi	r2,r2,4
    abb4:	1007883a 	mov	r3,r2
    abb8:	e0bffd17 	ldw	r2,-12(fp)
    abbc:	10800817 	ldw	r2,32(r2)
    abc0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    abc4:	e0bffc17 	ldw	r2,-16(fp)
    abc8:	10800104 	addi	r2,r2,4
    abcc:	10800037 	ldwio	r2,0(r2)
  {
    abd0:	003f6606 	br	a96c <altera_avalon_jtag_uart_irq+0x2c>
      break;
    abd4:	0001883a 	nop
      }
    }
  }
}
    abd8:	0001883a 	nop
    abdc:	e037883a 	mov	sp,fp
    abe0:	dfc00117 	ldw	ra,4(sp)
    abe4:	df000017 	ldw	fp,0(sp)
    abe8:	dec00204 	addi	sp,sp,8
    abec:	f800283a 	ret

0000abf0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    abf0:	defff904 	addi	sp,sp,-28
    abf4:	dfc00615 	stw	ra,24(sp)
    abf8:	df000515 	stw	fp,20(sp)
    abfc:	df000504 	addi	fp,sp,20
    ac00:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    ac04:	e0bffb17 	ldw	r2,-20(fp)
    ac08:	e0bfff15 	stw	r2,-4(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    ac0c:	e0bfff17 	ldw	r2,-4(fp)
    ac10:	10800017 	ldw	r2,0(r2)
    ac14:	10800104 	addi	r2,r2,4
    ac18:	10800037 	ldwio	r2,0(r2)
    ac1c:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    ac20:	e0bffe17 	ldw	r2,-8(fp)
    ac24:	1081000c 	andi	r2,r2,1024
    ac28:	10000b26 	beq	r2,zero,ac58 <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    ac2c:	e0bfff17 	ldw	r2,-4(fp)
    ac30:	10800017 	ldw	r2,0(r2)
    ac34:	10800104 	addi	r2,r2,4
    ac38:	1007883a 	mov	r3,r2
    ac3c:	e0bfff17 	ldw	r2,-4(fp)
    ac40:	10800817 	ldw	r2,32(r2)
    ac44:	10810014 	ori	r2,r2,1024
    ac48:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    ac4c:	e0bfff17 	ldw	r2,-4(fp)
    ac50:	10000915 	stw	zero,36(r2)
    ac54:	00002306 	br	ace4 <altera_avalon_jtag_uart_timeout+0xf4>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    ac58:	e0bfff17 	ldw	r2,-4(fp)
    ac5c:	10c00917 	ldw	r3,36(r2)
    ac60:	00a00034 	movhi	r2,32768
    ac64:	10bfff04 	addi	r2,r2,-4
    ac68:	10c01e36 	bltu	r2,r3,ace4 <altera_avalon_jtag_uart_timeout+0xf4>
    sp->host_inactive++;
    ac6c:	e0bfff17 	ldw	r2,-4(fp)
    ac70:	10800917 	ldw	r2,36(r2)
    ac74:	10c00044 	addi	r3,r2,1
    ac78:	e0bfff17 	ldw	r2,-4(fp)
    ac7c:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
    ac80:	e0bfff17 	ldw	r2,-4(fp)
    ac84:	10c00917 	ldw	r3,36(r2)
    ac88:	e0bfff17 	ldw	r2,-4(fp)
    ac8c:	10800117 	ldw	r2,4(r2)
    ac90:	18801436 	bltu	r3,r2,ace4 <altera_avalon_jtag_uart_timeout+0xf4>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    ac94:	e0bfff17 	ldw	r2,-4(fp)
    ac98:	10800c17 	ldw	r2,48(r2)
    ac9c:	e0bffd15 	stw	r2,-12(fp)
    aca0:	00800104 	movi	r2,4
    aca4:	e0bffc8d 	sth	r2,-14(fp)
    aca8:	00800044 	movi	r2,1
    acac:	e0bffc45 	stb	r2,-15(fp)
  if (OSRunning)
    acb0:	d0a6e543 	ldbu	r2,-25707(gp)
    acb4:	10803fcc 	andi	r2,r2,255
    acb8:	10000926 	beq	r2,zero,ace0 <altera_avalon_jtag_uart_timeout+0xf0>
    OSFlagPost (group, flags, opt, &err);
    acbc:	e0bffc8b 	ldhu	r2,-14(fp)
    acc0:	e0fffc43 	ldbu	r3,-15(fp)
    acc4:	e13ffc04 	addi	r4,fp,-16
    acc8:	200f883a 	mov	r7,r4
    accc:	180d883a 	mov	r6,r3
    acd0:	100b883a 	mov	r5,r2
    acd4:	e13ffd17 	ldw	r4,-12(fp)
    acd8:	00056480 	call	5648 <OSFlagPost>
    return err;
    acdc:	00000106 	br	ace4 <altera_avalon_jtag_uart_timeout+0xf4>
  return OS_ERR_PEND_ISR;
    ace0:	0001883a 	nop
    ace4:	d0a6f117 	ldw	r2,-25660(gp)
    }
  }

  return alt_ticks_per_second();
}
    ace8:	e037883a 	mov	sp,fp
    acec:	dfc00117 	ldw	ra,4(sp)
    acf0:	df000017 	ldw	fp,0(sp)
    acf4:	dec00204 	addi	sp,sp,8
    acf8:	f800283a 	ret

0000acfc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    acfc:	defffd04 	addi	sp,sp,-12
    ad00:	df000215 	stw	fp,8(sp)
    ad04:	df000204 	addi	fp,sp,8
    ad08:	e13fff15 	stw	r4,-4(fp)
    ad0c:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    ad10:	00000506 	br	ad28 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    ad14:	e0bffe17 	ldw	r2,-8(fp)
    ad18:	1090000c 	andi	r2,r2,16384
    ad1c:	10000226 	beq	r2,zero,ad28 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    ad20:	00bffd44 	movi	r2,-11
    ad24:	00000b06 	br	ad54 <altera_avalon_jtag_uart_close+0x58>
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    ad28:	e0bfff17 	ldw	r2,-4(fp)
    ad2c:	10c01017 	ldw	r3,64(r2)
    ad30:	e0bfff17 	ldw	r2,-4(fp)
    ad34:	10800f17 	ldw	r2,60(r2)
    ad38:	18800526 	beq	r3,r2,ad50 <altera_avalon_jtag_uart_close+0x54>
    ad3c:	e0bfff17 	ldw	r2,-4(fp)
    ad40:	10c00917 	ldw	r3,36(r2)
    ad44:	e0bfff17 	ldw	r2,-4(fp)
    ad48:	10800117 	ldw	r2,4(r2)
    ad4c:	18bff136 	bltu	r3,r2,ad14 <altera_avalon_jtag_uart_close+0x18>
    }
  }

  return 0;
    ad50:	0005883a 	mov	r2,zero
}
    ad54:	e037883a 	mov	sp,fp
    ad58:	df000017 	ldw	fp,0(sp)
    ad5c:	dec00104 	addi	sp,sp,4
    ad60:	f800283a 	ret

0000ad64 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    ad64:	defffa04 	addi	sp,sp,-24
    ad68:	df000515 	stw	fp,20(sp)
    ad6c:	df000504 	addi	fp,sp,20
    ad70:	e13ffd15 	stw	r4,-12(fp)
    ad74:	e17ffc15 	stw	r5,-16(fp)
    ad78:	e1bffb15 	stw	r6,-20(fp)
  int rc = -ENOTTY;
    ad7c:	00bff9c4 	movi	r2,-25
    ad80:	e0bfff15 	stw	r2,-4(fp)

  switch (req)
    ad84:	e0bffc17 	ldw	r2,-16(fp)
    ad88:	109a8060 	cmpeqi	r2,r2,27137
    ad8c:	1000041e 	bne	r2,zero,ada0 <altera_avalon_jtag_uart_ioctl+0x3c>
    ad90:	e0bffc17 	ldw	r2,-16(fp)
    ad94:	109a80a0 	cmpeqi	r2,r2,27138
    ad98:	1000181e 	bne	r2,zero,adfc <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
    ad9c:	00002906 	br	ae44 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    ada0:	e0bffd17 	ldw	r2,-12(fp)
    ada4:	10c00117 	ldw	r3,4(r2)
    ada8:	00a00034 	movhi	r2,32768
    adac:	10bfffc4 	addi	r2,r2,-1
    adb0:	18802126 	beq	r3,r2,ae38 <altera_avalon_jtag_uart_ioctl+0xd4>
      int timeout = *((int *)arg);
    adb4:	e0bffb17 	ldw	r2,-20(fp)
    adb8:	10800017 	ldw	r2,0(r2)
    adbc:	e0bffe15 	stw	r2,-8(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    adc0:	e0bffe17 	ldw	r2,-8(fp)
    adc4:	10800090 	cmplti	r2,r2,2
    adc8:	1000061e 	bne	r2,zero,ade4 <altera_avalon_jtag_uart_ioctl+0x80>
    adcc:	e0fffe17 	ldw	r3,-8(fp)
    add0:	00a00034 	movhi	r2,32768
    add4:	10bfffc4 	addi	r2,r2,-1
    add8:	18800226 	beq	r3,r2,ade4 <altera_avalon_jtag_uart_ioctl+0x80>
    addc:	e0bffe17 	ldw	r2,-8(fp)
    ade0:	00000206 	br	adec <altera_avalon_jtag_uart_ioctl+0x88>
    ade4:	00a00034 	movhi	r2,32768
    ade8:	10bfff84 	addi	r2,r2,-2
    adec:	e0fffd17 	ldw	r3,-12(fp)
    adf0:	18800115 	stw	r2,4(r3)
      rc = 0;
    adf4:	e03fff15 	stw	zero,-4(fp)
    break;
    adf8:	00000f06 	br	ae38 <altera_avalon_jtag_uart_ioctl+0xd4>
    if (sp->timeout != INT_MAX)
    adfc:	e0bffd17 	ldw	r2,-12(fp)
    ae00:	10c00117 	ldw	r3,4(r2)
    ae04:	00a00034 	movhi	r2,32768
    ae08:	10bfffc4 	addi	r2,r2,-1
    ae0c:	18800c26 	beq	r3,r2,ae40 <altera_avalon_jtag_uart_ioctl+0xdc>
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    ae10:	e0bffd17 	ldw	r2,-12(fp)
    ae14:	10c00917 	ldw	r3,36(r2)
    ae18:	e0bffd17 	ldw	r2,-12(fp)
    ae1c:	10800117 	ldw	r2,4(r2)
    ae20:	1885803a 	cmpltu	r2,r3,r2
    ae24:	10c03fcc 	andi	r3,r2,255
    ae28:	e0bffb17 	ldw	r2,-20(fp)
    ae2c:	10c00015 	stw	r3,0(r2)
      rc = 0;
    ae30:	e03fff15 	stw	zero,-4(fp)
    break;
    ae34:	00000206 	br	ae40 <altera_avalon_jtag_uart_ioctl+0xdc>
    break;
    ae38:	0001883a 	nop
    ae3c:	00000106 	br	ae44 <altera_avalon_jtag_uart_ioctl+0xe0>
    break;
    ae40:	0001883a 	nop
  }

  return rc;
    ae44:	e0bfff17 	ldw	r2,-4(fp)
}
    ae48:	e037883a 	mov	sp,fp
    ae4c:	df000017 	ldw	fp,0(sp)
    ae50:	dec00104 	addi	sp,sp,4
    ae54:	f800283a 	ret

0000ae58 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    ae58:	deffec04 	addi	sp,sp,-80
    ae5c:	dfc01315 	stw	ra,76(sp)
    ae60:	df001215 	stw	fp,72(sp)
    ae64:	df001204 	addi	fp,sp,72
    ae68:	e13ff215 	stw	r4,-56(fp)
    ae6c:	e17ff115 	stw	r5,-60(fp)
    ae70:	e1bff015 	stw	r6,-64(fp)
    ae74:	e1ffef15 	stw	r7,-68(fp)
  char * ptr = buffer;
    ae78:	e0bff117 	ldw	r2,-60(fp)
    ae7c:	e0bfff15 	stw	r2,-4(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
    ae80:	e0bff217 	ldw	r2,-56(fp)
    ae84:	10800a17 	ldw	r2,40(r2)
    ae88:	e0bffa15 	stw	r2,-24(fp)
    ae8c:	e03ff98d 	sth	zero,-26(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
    ae90:	e0bff98b 	ldhu	r2,-26(fp)
    ae94:	e0fff3c4 	addi	r3,fp,-49
    ae98:	180d883a 	mov	r6,r3
    ae9c:	100b883a 	mov	r5,r2
    aea0:	e13ffa17 	ldw	r4,-24(fp)
    aea4:	0007b4c0 	call	7b4c <OSSemPend>

  while (space > 0)
    aea8:	00006306 	br	b038 <altera_avalon_jtag_uart_read+0x1e0>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    aeac:	e0bff217 	ldw	r2,-56(fp)
    aeb0:	10800d17 	ldw	r2,52(r2)
    aeb4:	e0bffd15 	stw	r2,-12(fp)
      out = sp->rx_out;
    aeb8:	e0bff217 	ldw	r2,-56(fp)
    aebc:	10800e17 	ldw	r2,56(r2)
    aec0:	e0bffc15 	stw	r2,-16(fp)

      if (in >= out)
    aec4:	e0fffd17 	ldw	r3,-12(fp)
    aec8:	e0bffc17 	ldw	r2,-16(fp)
    aecc:	18800536 	bltu	r3,r2,aee4 <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
    aed0:	e0fffd17 	ldw	r3,-12(fp)
    aed4:	e0bffc17 	ldw	r2,-16(fp)
    aed8:	1885c83a 	sub	r2,r3,r2
    aedc:	e0bffe15 	stw	r2,-8(fp)
    aee0:	00000406 	br	aef4 <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    aee4:	00c20004 	movi	r3,2048
    aee8:	e0bffc17 	ldw	r2,-16(fp)
    aeec:	1885c83a 	sub	r2,r3,r2
    aef0:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
    aef4:	e0bffe17 	ldw	r2,-8(fp)
    aef8:	10001e26 	beq	r2,zero,af74 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
    aefc:	e0fff017 	ldw	r3,-64(fp)
    af00:	e0bffe17 	ldw	r2,-8(fp)
    af04:	1880022e 	bgeu	r3,r2,af10 <altera_avalon_jtag_uart_read+0xb8>
        n = space;
    af08:	e0bff017 	ldw	r2,-64(fp)
    af0c:	e0bffe15 	stw	r2,-8(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    af10:	e0bff217 	ldw	r2,-56(fp)
    af14:	10c01104 	addi	r3,r2,68
    af18:	e0bffc17 	ldw	r2,-16(fp)
    af1c:	1885883a 	add	r2,r3,r2
    af20:	e1bffe17 	ldw	r6,-8(fp)
    af24:	100b883a 	mov	r5,r2
    af28:	e13fff17 	ldw	r4,-4(fp)
    af2c:	000dae00 	call	dae0 <memcpy>
      ptr   += n;
    af30:	e0ffff17 	ldw	r3,-4(fp)
    af34:	e0bffe17 	ldw	r2,-8(fp)
    af38:	1885883a 	add	r2,r3,r2
    af3c:	e0bfff15 	stw	r2,-4(fp)
      space -= n;
    af40:	e0fff017 	ldw	r3,-64(fp)
    af44:	e0bffe17 	ldw	r2,-8(fp)
    af48:	1885c83a 	sub	r2,r3,r2
    af4c:	e0bff015 	stw	r2,-64(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    af50:	e0fffc17 	ldw	r3,-16(fp)
    af54:	e0bffe17 	ldw	r2,-8(fp)
    af58:	1885883a 	add	r2,r3,r2
    af5c:	10c1ffcc 	andi	r3,r2,2047
    af60:	e0bff217 	ldw	r2,-56(fp)
    af64:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
    af68:	e0bff017 	ldw	r2,-64(fp)
    af6c:	00bfcf16 	blt	zero,r2,aeac <altera_avalon_jtag_uart_read+0x54>
    af70:	00000106 	br	af78 <altera_avalon_jtag_uart_read+0x120>
        break; /* No more data available */
    af74:	0001883a 	nop

    /* If we read any data then return it */
    if (ptr != buffer)
    af78:	e0ffff17 	ldw	r3,-4(fp)
    af7c:	e0bff117 	ldw	r2,-60(fp)
    af80:	1880301e 	bne	r3,r2,b044 <altera_avalon_jtag_uart_read+0x1ec>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    af84:	e0bfef17 	ldw	r2,-68(fp)
    af88:	1090000c 	andi	r2,r2,16384
    af8c:	10002f1e 	bne	r2,zero,b04c <altera_avalon_jtag_uart_read+0x1f4>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
    af90:	d0a6e543 	ldbu	r2,-25707(gp)
    af94:	10803fcc 	andi	r2,r2,255
    af98:	10800058 	cmpnei	r2,r2,1
    af9c:	1000161e 	bne	r2,zero,aff8 <altera_avalon_jtag_uart_read+0x1a0>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
    afa0:	e0bff217 	ldw	r2,-56(fp)
    afa4:	10800c17 	ldw	r2,48(r2)
    afa8:	e0bff815 	stw	r2,-32(fp)
    afac:	00800144 	movi	r2,5
    afb0:	e0bff78d 	sth	r2,-34(fp)
    afb4:	00bfe0c4 	movi	r2,-125
    afb8:	e0bff745 	stb	r2,-35(fp)
    afbc:	e03ff68d 	sth	zero,-38(fp)
  if (OSRunning)
    afc0:	d0a6e543 	ldbu	r2,-25707(gp)
    afc4:	10803fcc 	andi	r2,r2,255
    afc8:	10001626 	beq	r2,zero,b024 <altera_avalon_jtag_uart_read+0x1cc>
    OSFlagPend (group, flags, wait_type, timeout, &err);
    afcc:	e0fff78b 	ldhu	r3,-34(fp)
    afd0:	e13ff743 	ldbu	r4,-35(fp)
    afd4:	e17ff68b 	ldhu	r5,-38(fp)
    afd8:	e0bff384 	addi	r2,fp,-50
    afdc:	d8800015 	stw	r2,0(sp)
    afe0:	280f883a 	mov	r7,r5
    afe4:	200d883a 	mov	r6,r4
    afe8:	180b883a 	mov	r5,r3
    afec:	e13ff817 	ldw	r4,-32(fp)
    aff0:	0004fe40 	call	4fe4 <OSFlagPend>
    return err;
    aff4:	00000c06 	br	b028 <altera_avalon_jtag_uart_read+0x1d0>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    aff8:	0001883a 	nop
    affc:	e0bff217 	ldw	r2,-56(fp)
    b000:	10800d17 	ldw	r2,52(r2)
    b004:	e0fffd17 	ldw	r3,-12(fp)
    b008:	1880071e 	bne	r3,r2,b028 <altera_avalon_jtag_uart_read+0x1d0>
    b00c:	e0bff217 	ldw	r2,-56(fp)
    b010:	10c00917 	ldw	r3,36(r2)
    b014:	e0bff217 	ldw	r2,-56(fp)
    b018:	10800117 	ldw	r2,4(r2)
    b01c:	18bff736 	bltu	r3,r2,affc <altera_avalon_jtag_uart_read+0x1a4>
    b020:	00000106 	br	b028 <altera_avalon_jtag_uart_read+0x1d0>
  return OS_ERR_PEND_ISR;
    b024:	0001883a 	nop
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    b028:	e0bff217 	ldw	r2,-56(fp)
    b02c:	10800d17 	ldw	r2,52(r2)
    b030:	e0fffd17 	ldw	r3,-12(fp)
    b034:	18800726 	beq	r3,r2,b054 <altera_avalon_jtag_uart_read+0x1fc>
  while (space > 0)
    b038:	e0bff017 	ldw	r2,-64(fp)
    b03c:	00bf9b16 	blt	zero,r2,aeac <altera_avalon_jtag_uart_read+0x54>
    b040:	00000506 	br	b058 <altera_avalon_jtag_uart_read+0x200>
      break;
    b044:	0001883a 	nop
    b048:	00000306 	br	b058 <altera_avalon_jtag_uart_read+0x200>
      break;
    b04c:	0001883a 	nop
    b050:	00000106 	br	b058 <altera_avalon_jtag_uart_read+0x200>
      break;
    b054:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
    b058:	e0bff217 	ldw	r2,-56(fp)
    b05c:	10800a17 	ldw	r2,40(r2)
    b060:	1009883a 	mov	r4,r2
    b064:	0007ed40 	call	7ed4 <OSSemPost>

  if (ptr != buffer)
    b068:	e0ffff17 	ldw	r3,-4(fp)
    b06c:	e0bff117 	ldw	r2,-60(fp)
    b070:	18801926 	beq	r3,r2,b0d8 <altera_avalon_jtag_uart_read+0x280>
  NIOS2_READ_STATUS (context);
    b074:	0005303a 	rdctl	r2,status
    b078:	e0bff415 	stw	r2,-48(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b07c:	e0fff417 	ldw	r3,-48(fp)
    b080:	00bfff84 	movi	r2,-2
    b084:	1884703a 	and	r2,r3,r2
    b088:	1001703a 	wrctl	status,r2
  return context;
    b08c:	e0bff417 	ldw	r2,-48(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    b090:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    b094:	e0bff217 	ldw	r2,-56(fp)
    b098:	10800817 	ldw	r2,32(r2)
    b09c:	10c00054 	ori	r3,r2,1
    b0a0:	e0bff217 	ldw	r2,-56(fp)
    b0a4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    b0a8:	e0bff217 	ldw	r2,-56(fp)
    b0ac:	10800017 	ldw	r2,0(r2)
    b0b0:	10800104 	addi	r2,r2,4
    b0b4:	1007883a 	mov	r3,r2
    b0b8:	e0bff217 	ldw	r2,-56(fp)
    b0bc:	10800817 	ldw	r2,32(r2)
    b0c0:	18800035 	stwio	r2,0(r3)
    b0c4:	e0bffb17 	ldw	r2,-20(fp)
    b0c8:	e0bff515 	stw	r2,-44(fp)
  NIOS2_WRITE_STATUS (context);
    b0cc:	e0bff517 	ldw	r2,-44(fp)
    b0d0:	1001703a 	wrctl	status,r2
}
    b0d4:	0001883a 	nop
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    b0d8:	e0ffff17 	ldw	r3,-4(fp)
    b0dc:	e0bff117 	ldw	r2,-60(fp)
    b0e0:	18800426 	beq	r3,r2,b0f4 <altera_avalon_jtag_uart_read+0x29c>
    return ptr - buffer;
    b0e4:	e0ffff17 	ldw	r3,-4(fp)
    b0e8:	e0bff117 	ldw	r2,-60(fp)
    b0ec:	1885c83a 	sub	r2,r3,r2
    b0f0:	00000606 	br	b10c <altera_avalon_jtag_uart_read+0x2b4>
  else if (flags & O_NONBLOCK)
    b0f4:	e0bfef17 	ldw	r2,-68(fp)
    b0f8:	1090000c 	andi	r2,r2,16384
    b0fc:	10000226 	beq	r2,zero,b108 <altera_avalon_jtag_uart_read+0x2b0>
    return -EWOULDBLOCK;
    b100:	00bffd44 	movi	r2,-11
    b104:	00000106 	br	b10c <altera_avalon_jtag_uart_read+0x2b4>
  else
    return -EIO;
    b108:	00bffec4 	movi	r2,-5
}
    b10c:	e037883a 	mov	sp,fp
    b110:	dfc00117 	ldw	ra,4(sp)
    b114:	df000017 	ldw	fp,0(sp)
    b118:	dec00204 	addi	sp,sp,8
    b11c:	f800283a 	ret

0000b120 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    b120:	deffed04 	addi	sp,sp,-76
    b124:	dfc01215 	stw	ra,72(sp)
    b128:	df001115 	stw	fp,68(sp)
    b12c:	df001104 	addi	fp,sp,68
    b130:	e13ff315 	stw	r4,-52(fp)
    b134:	e17ff215 	stw	r5,-56(fp)
    b138:	e1bff115 	stw	r6,-60(fp)
    b13c:	e1fff015 	stw	r7,-64(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    b140:	e03fff15 	stw	zero,-4(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    b144:	e0bff217 	ldw	r2,-56(fp)
    b148:	e0bffd15 	stw	r2,-12(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
    b14c:	e0bff317 	ldw	r2,-52(fp)
    b150:	10800b17 	ldw	r2,44(r2)
    b154:	e0bffa15 	stw	r2,-24(fp)
    b158:	e03ff98d 	sth	zero,-26(fp)
    b15c:	e0bff98b 	ldhu	r2,-26(fp)
    b160:	e0fff404 	addi	r3,fp,-48
    b164:	180d883a 	mov	r6,r3
    b168:	100b883a 	mov	r5,r2
    b16c:	e13ffa17 	ldw	r4,-24(fp)
    b170:	0007b4c0 	call	7b4c <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    b174:	00003706 	br	b254 <altera_avalon_jtag_uart_write+0x134>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    b178:	e0bff317 	ldw	r2,-52(fp)
    b17c:	10800f17 	ldw	r2,60(r2)
    b180:	e0bffc15 	stw	r2,-16(fp)
      out = sp->tx_out;
    b184:	e0bff317 	ldw	r2,-52(fp)
    b188:	10801017 	ldw	r2,64(r2)
    b18c:	e0bfff15 	stw	r2,-4(fp)

      if (in < out)
    b190:	e0fffc17 	ldw	r3,-16(fp)
    b194:	e0bfff17 	ldw	r2,-4(fp)
    b198:	1880062e 	bgeu	r3,r2,b1b4 <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
    b19c:	e0ffff17 	ldw	r3,-4(fp)
    b1a0:	e0bffc17 	ldw	r2,-16(fp)
    b1a4:	1885c83a 	sub	r2,r3,r2
    b1a8:	10bfffc4 	addi	r2,r2,-1
    b1ac:	e0bffe15 	stw	r2,-8(fp)
    b1b0:	00000b06 	br	b1e0 <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
    b1b4:	e0bfff17 	ldw	r2,-4(fp)
    b1b8:	10000526 	beq	r2,zero,b1d0 <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    b1bc:	00c20004 	movi	r3,2048
    b1c0:	e0bffc17 	ldw	r2,-16(fp)
    b1c4:	1885c83a 	sub	r2,r3,r2
    b1c8:	e0bffe15 	stw	r2,-8(fp)
    b1cc:	00000406 	br	b1e0 <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    b1d0:	00c1ffc4 	movi	r3,2047
    b1d4:	e0bffc17 	ldw	r2,-16(fp)
    b1d8:	1885c83a 	sub	r2,r3,r2
    b1dc:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
    b1e0:	e0bffe17 	ldw	r2,-8(fp)
    b1e4:	10001e26 	beq	r2,zero,b260 <altera_avalon_jtag_uart_write+0x140>
        break;

      if (n > count)
    b1e8:	e0fff117 	ldw	r3,-60(fp)
    b1ec:	e0bffe17 	ldw	r2,-8(fp)
    b1f0:	1880022e 	bgeu	r3,r2,b1fc <altera_avalon_jtag_uart_write+0xdc>
        n = count;
    b1f4:	e0bff117 	ldw	r2,-60(fp)
    b1f8:	e0bffe15 	stw	r2,-8(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    b1fc:	e0bff317 	ldw	r2,-52(fp)
    b200:	10c21104 	addi	r3,r2,2116
    b204:	e0bffc17 	ldw	r2,-16(fp)
    b208:	1885883a 	add	r2,r3,r2
    b20c:	e1bffe17 	ldw	r6,-8(fp)
    b210:	e17ff217 	ldw	r5,-56(fp)
    b214:	1009883a 	mov	r4,r2
    b218:	000dae00 	call	dae0 <memcpy>
      ptr   += n;
    b21c:	e0fff217 	ldw	r3,-56(fp)
    b220:	e0bffe17 	ldw	r2,-8(fp)
    b224:	1885883a 	add	r2,r3,r2
    b228:	e0bff215 	stw	r2,-56(fp)
      count -= n;
    b22c:	e0fff117 	ldw	r3,-60(fp)
    b230:	e0bffe17 	ldw	r2,-8(fp)
    b234:	1885c83a 	sub	r2,r3,r2
    b238:	e0bff115 	stw	r2,-60(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    b23c:	e0fffc17 	ldw	r3,-16(fp)
    b240:	e0bffe17 	ldw	r2,-8(fp)
    b244:	1885883a 	add	r2,r3,r2
    b248:	10c1ffcc 	andi	r3,r2,2047
    b24c:	e0bff317 	ldw	r2,-52(fp)
    b250:	10c00f15 	stw	r3,60(r2)
    while (count > 0)
    b254:	e0bff117 	ldw	r2,-60(fp)
    b258:	00bfc716 	blt	zero,r2,b178 <altera_avalon_jtag_uart_write+0x58>
    b25c:	00000106 	br	b264 <altera_avalon_jtag_uart_write+0x144>
        break;
    b260:	0001883a 	nop
  NIOS2_READ_STATUS (context);
    b264:	0005303a 	rdctl	r2,status
    b268:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b26c:	e0fff717 	ldw	r3,-36(fp)
    b270:	00bfff84 	movi	r2,-2
    b274:	1884703a 	and	r2,r3,r2
    b278:	1001703a 	wrctl	status,r2
  return context;
    b27c:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    b280:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    b284:	e0bff317 	ldw	r2,-52(fp)
    b288:	10800817 	ldw	r2,32(r2)
    b28c:	10c00094 	ori	r3,r2,2
    b290:	e0bff317 	ldw	r2,-52(fp)
    b294:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    b298:	e0bff317 	ldw	r2,-52(fp)
    b29c:	10800017 	ldw	r2,0(r2)
    b2a0:	10800104 	addi	r2,r2,4
    b2a4:	1007883a 	mov	r3,r2
    b2a8:	e0bff317 	ldw	r2,-52(fp)
    b2ac:	10800817 	ldw	r2,32(r2)
    b2b0:	18800035 	stwio	r2,0(r3)
    b2b4:	e0bffb17 	ldw	r2,-20(fp)
    b2b8:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
    b2bc:	e0bff817 	ldw	r2,-32(fp)
    b2c0:	1001703a 	wrctl	status,r2
}
    b2c4:	0001883a 	nop
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    b2c8:	e0bff117 	ldw	r2,-60(fp)
    b2cc:	00802c0e 	bge	zero,r2,b380 <altera_avalon_jtag_uart_write+0x260>
    {
      if (flags & O_NONBLOCK)
    b2d0:	e0bff017 	ldw	r2,-64(fp)
    b2d4:	1090000c 	andi	r2,r2,16384
    b2d8:	10002c1e 	bne	r2,zero,b38c <altera_avalon_jtag_uart_write+0x26c>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
    b2dc:	d0a6e543 	ldbu	r2,-25707(gp)
    b2e0:	10803fcc 	andi	r2,r2,255
    b2e4:	10800058 	cmpnei	r2,r2,1
    b2e8:	1000161e 	bne	r2,zero,b344 <altera_avalon_jtag_uart_write+0x224>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
    b2ec:	e0bff317 	ldw	r2,-52(fp)
    b2f0:	10800c17 	ldw	r2,48(r2)
    b2f4:	e0bff615 	stw	r2,-40(fp)
    b2f8:	00800184 	movi	r2,6
    b2fc:	e0bff58d 	sth	r2,-42(fp)
    b300:	00bfe0c4 	movi	r2,-125
    b304:	e0bff545 	stb	r2,-43(fp)
    b308:	e03ff48d 	sth	zero,-46(fp)
  if (OSRunning)
    b30c:	d0a6e543 	ldbu	r2,-25707(gp)
    b310:	10803fcc 	andi	r2,r2,255
    b314:	10001626 	beq	r2,zero,b370 <altera_avalon_jtag_uart_write+0x250>
    OSFlagPend (group, flags, wait_type, timeout, &err);
    b318:	e0fff58b 	ldhu	r3,-42(fp)
    b31c:	e13ff543 	ldbu	r4,-43(fp)
    b320:	e17ff48b 	ldhu	r5,-46(fp)
    b324:	e0bff444 	addi	r2,fp,-47
    b328:	d8800015 	stw	r2,0(sp)
    b32c:	280f883a 	mov	r7,r5
    b330:	200d883a 	mov	r6,r4
    b334:	180b883a 	mov	r5,r3
    b338:	e13ff617 	ldw	r4,-40(fp)
    b33c:	0004fe40 	call	4fe4 <OSFlagPend>
    return err;
    b340:	00000c06 	br	b374 <altera_avalon_jtag_uart_write+0x254>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    b344:	0001883a 	nop
    b348:	e0bff317 	ldw	r2,-52(fp)
    b34c:	10801017 	ldw	r2,64(r2)
    b350:	e0ffff17 	ldw	r3,-4(fp)
    b354:	1880071e 	bne	r3,r2,b374 <altera_avalon_jtag_uart_write+0x254>
    b358:	e0bff317 	ldw	r2,-52(fp)
    b35c:	10c00917 	ldw	r3,36(r2)
    b360:	e0bff317 	ldw	r2,-52(fp)
    b364:	10800117 	ldw	r2,4(r2)
    b368:	18bff736 	bltu	r3,r2,b348 <altera_avalon_jtag_uart_write+0x228>
    b36c:	00000106 	br	b374 <altera_avalon_jtag_uart_write+0x254>
  return OS_ERR_PEND_ISR;
    b370:	0001883a 	nop
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    b374:	e0bff317 	ldw	r2,-52(fp)
    b378:	10800917 	ldw	r2,36(r2)
    b37c:	1000051e 	bne	r2,zero,b394 <altera_avalon_jtag_uart_write+0x274>
         break;
    }
  }
  while (count > 0);
    b380:	e0bff117 	ldw	r2,-60(fp)
    b384:	00bfb316 	blt	zero,r2,b254 <altera_avalon_jtag_uart_write+0x134>
    b388:	00000306 	br	b398 <altera_avalon_jtag_uart_write+0x278>
        break;
    b38c:	0001883a 	nop
    b390:	00000106 	br	b398 <altera_avalon_jtag_uart_write+0x278>
         break;
    b394:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
    b398:	e0bff317 	ldw	r2,-52(fp)
    b39c:	10800b17 	ldw	r2,44(r2)
    b3a0:	1009883a 	mov	r4,r2
    b3a4:	0007ed40 	call	7ed4 <OSSemPost>

  if (ptr != start)
    b3a8:	e0fff217 	ldw	r3,-56(fp)
    b3ac:	e0bffd17 	ldw	r2,-12(fp)
    b3b0:	18800426 	beq	r3,r2,b3c4 <altera_avalon_jtag_uart_write+0x2a4>
    return ptr - start;
    b3b4:	e0fff217 	ldw	r3,-56(fp)
    b3b8:	e0bffd17 	ldw	r2,-12(fp)
    b3bc:	1885c83a 	sub	r2,r3,r2
    b3c0:	00000606 	br	b3dc <altera_avalon_jtag_uart_write+0x2bc>
  else if (flags & O_NONBLOCK)
    b3c4:	e0bff017 	ldw	r2,-64(fp)
    b3c8:	1090000c 	andi	r2,r2,16384
    b3cc:	10000226 	beq	r2,zero,b3d8 <altera_avalon_jtag_uart_write+0x2b8>
    return -EWOULDBLOCK;
    b3d0:	00bffd44 	movi	r2,-11
    b3d4:	00000106 	br	b3dc <altera_avalon_jtag_uart_write+0x2bc>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    b3d8:	00bffec4 	movi	r2,-5
}
    b3dc:	e037883a 	mov	sp,fp
    b3e0:	dfc00117 	ldw	ra,4(sp)
    b3e4:	df000017 	ldw	fp,0(sp)
    b3e8:	dec00204 	addi	sp,sp,8
    b3ec:	f800283a 	ret

0000b3f0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    b3f0:	defff904 	addi	sp,sp,-28
    b3f4:	dfc00615 	stw	ra,24(sp)
    b3f8:	df000515 	stw	fp,20(sp)
    b3fc:	df000504 	addi	fp,sp,20
    b400:	e13ffc15 	stw	r4,-16(fp)
    b404:	e17ffb15 	stw	r5,-20(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    b408:	0007883a 	mov	r3,zero
    b40c:	e0bffc17 	ldw	r2,-16(fp)
    b410:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    b414:	e0bffc17 	ldw	r2,-16(fp)
    b418:	10800104 	addi	r2,r2,4
    b41c:	10800037 	ldwio	r2,0(r2)
  NIOS2_READ_STATUS (context);
    b420:	0005303a 	rdctl	r2,status
    b424:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b428:	e0fffd17 	ldw	r3,-12(fp)
    b42c:	00bfff84 	movi	r2,-2
    b430:	1884703a 	and	r2,r3,r2
    b434:	1001703a 	wrctl	status,r2
  return context;
    b438:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    b43c:	e0bfff15 	stw	r2,-4(fp)
  alt_tick ();
    b440:	000d2a40 	call	d2a4 <alt_tick>
    b444:	e0bfff17 	ldw	r2,-4(fp)
    b448:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
    b44c:	e0bffe17 	ldw	r2,-8(fp)
    b450:	1001703a 	wrctl	status,r2
}
    b454:	0001883a 	nop
  alt_irq_enable_all(cpu_sr);
}
    b458:	0001883a 	nop
    b45c:	e037883a 	mov	sp,fp
    b460:	dfc00117 	ldw	ra,4(sp)
    b464:	df000017 	ldw	fp,0(sp)
    b468:	dec00204 	addi	sp,sp,8
    b46c:	f800283a 	ret

0000b470 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    b470:	defff904 	addi	sp,sp,-28
    b474:	dfc00615 	stw	ra,24(sp)
    b478:	df000515 	stw	fp,20(sp)
    b47c:	df000504 	addi	fp,sp,20
    b480:	e13ffe15 	stw	r4,-8(fp)
    b484:	e17ffd15 	stw	r5,-12(fp)
    b488:	e1bffc15 	stw	r6,-16(fp)
    b48c:	e1fffb15 	stw	r7,-20(fp)
    b490:	e0bffb17 	ldw	r2,-20(fp)
    b494:	e0bfff15 	stw	r2,-4(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    b498:	d0a6f117 	ldw	r2,-25660(gp)
    b49c:	1000031e 	bne	r2,zero,b4ac <alt_avalon_timer_sc_init+0x3c>
  {
    _alt_tick_rate = nticks;
    b4a0:	e0bfff17 	ldw	r2,-4(fp)
    b4a4:	d0a6f115 	stw	r2,-25660(gp)
    return 0;
    b4a8:	00000106 	br	b4b0 <alt_avalon_timer_sc_init+0x40>
  }
  else
  {
    return -1;
    b4ac:	0001883a 	nop
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    b4b0:	e0bffe17 	ldw	r2,-8(fp)
    b4b4:	10800104 	addi	r2,r2,4
    b4b8:	00c001c4 	movi	r3,7
    b4bc:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
    b4c0:	01800074 	movhi	r6,1
    b4c4:	31acfc04 	addi	r6,r6,-19472
    b4c8:	e17ffe17 	ldw	r5,-8(fp)
    b4cc:	e13ffc17 	ldw	r4,-16(fp)
    b4d0:	000cde00 	call	cde0 <alt_irq_register>
#endif  
}
    b4d4:	0001883a 	nop
    b4d8:	e037883a 	mov	sp,fp
    b4dc:	dfc00117 	ldw	ra,4(sp)
    b4e0:	df000017 	ldw	fp,0(sp)
    b4e4:	dec00204 	addi	sp,sp,8
    b4e8:	f800283a 	ret

0000b4ec <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
    b4ec:	defffc04 	addi	sp,sp,-16
    b4f0:	df000315 	stw	fp,12(sp)
    b4f4:	df000304 	addi	fp,sp,12
    b4f8:	e13ffe15 	stw	r4,-8(fp)
    b4fc:	e17ffd15 	stw	r5,-12(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
    b500:	e03fffc5 	stb	zero,-1(fp)
	if (y_pos == 0)
    b504:	e0bffd17 	ldw	r2,-12(fp)
    b508:	1000061e 	bne	r2,zero,b524 <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
    b50c:	e0bffe17 	ldw	r2,-8(fp)
    b510:	1007883a 	mov	r3,r2
    b514:	e0bfffc3 	ldbu	r2,-1(fp)
    b518:	10c4b03a 	or	r2,r2,r3
    b51c:	e0bfffc5 	stb	r2,-1(fp)
    b520:	00000806 	br	b544 <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
    b524:	e0bffe17 	ldw	r2,-8(fp)
    b528:	1007883a 	mov	r3,r2
    b52c:	e0bfffc3 	ldbu	r2,-1(fp)
    b530:	10c4b03a 	or	r2,r2,r3
    b534:	e0bfffc5 	stb	r2,-1(fp)
		addr |= 0x00000040;
    b538:	e0bfffc3 	ldbu	r2,-1(fp)
    b53c:	10801014 	ori	r2,r2,64
    b540:	e0bfffc5 	stb	r2,-1(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
    b544:	e0ffffc3 	ldbu	r3,-1(fp)
    b548:	00bfe004 	movi	r2,-128
    b54c:	1884b03a 	or	r2,r3,r2
}
    b550:	e037883a 	mov	sp,fp
    b554:	df000017 	ldw	fp,0(sp)
    b558:	dec00104 	addi	sp,sp,4
    b55c:	f800283a 	ret

0000b560 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
    b560:	defffd04 	addi	sp,sp,-12
    b564:	df000215 	stw	fp,8(sp)
    b568:	df000204 	addi	fp,sp,8
    b56c:	e13fff15 	stw	r4,-4(fp)
    b570:	2805883a 	mov	r2,r5
    b574:	e0bffe05 	stb	r2,-8(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
    b578:	e0bfff17 	ldw	r2,-4(fp)
    b57c:	10800a17 	ldw	r2,40(r2)
    b580:	1007883a 	mov	r3,r2
    b584:	e0bffe03 	ldbu	r2,-8(fp)
    b588:	18800025 	stbio	r2,0(r3)
}
    b58c:	0001883a 	nop
    b590:	e037883a 	mov	sp,fp
    b594:	df000017 	ldw	fp,0(sp)
    b598:	dec00104 	addi	sp,sp,4
    b59c:	f800283a 	ret

0000b5a0 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
    b5a0:	defffe04 	addi	sp,sp,-8
    b5a4:	df000115 	stw	fp,4(sp)
    b5a8:	df000104 	addi	fp,sp,4
    b5ac:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
    b5b0:	e0bfff17 	ldw	r2,-4(fp)
    b5b4:	10800a17 	ldw	r2,40(r2)
    b5b8:	1007883a 	mov	r3,r2
    b5bc:	00800044 	movi	r2,1
    b5c0:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
    b5c4:	0001883a 	nop
    b5c8:	e037883a 	mov	sp,fp
    b5cc:	df000017 	ldw	fp,0(sp)
    b5d0:	dec00104 	addi	sp,sp,4
    b5d4:	f800283a 	ret

0000b5d8 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
    b5d8:	defffc04 	addi	sp,sp,-16
    b5dc:	dfc00315 	stw	ra,12(sp)
    b5e0:	df000215 	stw	fp,8(sp)
    b5e4:	df000204 	addi	fp,sp,8
    b5e8:	e13ffe15 	stw	r4,-8(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
    b5ec:	d1602804 	addi	r5,gp,-32608
    b5f0:	e13ffe17 	ldw	r4,-8(fp)
    b5f4:	000cbf00 	call	cbf0 <alt_find_dev>
    b5f8:	e0bfff15 	stw	r2,-4(fp)

  return dev;
    b5fc:	e0bfff17 	ldw	r2,-4(fp)
}
    b600:	e037883a 	mov	sp,fp
    b604:	dfc00117 	ldw	ra,4(sp)
    b608:	df000017 	ldw	fp,0(sp)
    b60c:	dec00204 	addi	sp,sp,8
    b610:	f800283a 	ret

0000b614 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
    b614:	defffb04 	addi	sp,sp,-20
    b618:	df000415 	stw	fp,16(sp)
    b61c:	df000404 	addi	fp,sp,16
    b620:	e13ffe15 	stw	r4,-8(fp)
    b624:	e17ffd15 	stw	r5,-12(fp)
    b628:	e1bffc15 	stw	r6,-16(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
    b62c:	e03fff15 	stw	zero,-4(fp)
    b630:	00000f06 	br	b670 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
    b634:	e0bffe17 	ldw	r2,-8(fp)
    b638:	10800a17 	ldw	r2,40(r2)
    b63c:	10800044 	addi	r2,r2,1
    b640:	1009883a 	mov	r4,r2
    b644:	e0fffd17 	ldw	r3,-12(fp)
    b648:	e0bfff17 	ldw	r2,-4(fp)
    b64c:	1885883a 	add	r2,r3,r2
    b650:	10800003 	ldbu	r2,0(r2)
    b654:	10803fcc 	andi	r2,r2,255
    b658:	1080201c 	xori	r2,r2,128
    b65c:	10bfe004 	addi	r2,r2,-128
    b660:	20800025 	stbio	r2,0(r4)
	for (i = 0; i < len; i++)
    b664:	e0bfff17 	ldw	r2,-4(fp)
    b668:	10800044 	addi	r2,r2,1
    b66c:	e0bfff15 	stw	r2,-4(fp)
    b670:	e0ffff17 	ldw	r3,-4(fp)
    b674:	e0bffc17 	ldw	r2,-16(fp)
    b678:	18bfee36 	bltu	r3,r2,b634 <alt_up_character_lcd_write+0x20>
	}
}
    b67c:	0001883a 	nop
    b680:	0001883a 	nop
    b684:	e037883a 	mov	sp,fp
    b688:	df000017 	ldw	fp,0(sp)
    b68c:	dec00104 	addi	sp,sp,4
    b690:	f800283a 	ret

0000b694 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
    b694:	defffd04 	addi	sp,sp,-12
    b698:	df000215 	stw	fp,8(sp)
    b69c:	df000204 	addi	fp,sp,8
    b6a0:	e13fff15 	stw	r4,-4(fp)
    b6a4:	e17ffe15 	stw	r5,-8(fp)
	while ( *ptr )
    b6a8:	00000d06 	br	b6e0 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
    b6ac:	e0bfff17 	ldw	r2,-4(fp)
    b6b0:	10800a17 	ldw	r2,40(r2)
    b6b4:	10800044 	addi	r2,r2,1
    b6b8:	1007883a 	mov	r3,r2
    b6bc:	e0bffe17 	ldw	r2,-8(fp)
    b6c0:	10800003 	ldbu	r2,0(r2)
    b6c4:	10803fcc 	andi	r2,r2,255
    b6c8:	1080201c 	xori	r2,r2,128
    b6cc:	10bfe004 	addi	r2,r2,-128
    b6d0:	18800025 	stbio	r2,0(r3)
		++ptr;
    b6d4:	e0bffe17 	ldw	r2,-8(fp)
    b6d8:	10800044 	addi	r2,r2,1
    b6dc:	e0bffe15 	stw	r2,-8(fp)
	while ( *ptr )
    b6e0:	e0bffe17 	ldw	r2,-8(fp)
    b6e4:	10800003 	ldbu	r2,0(r2)
    b6e8:	10803fcc 	andi	r2,r2,255
    b6ec:	1080201c 	xori	r2,r2,128
    b6f0:	10bfe004 	addi	r2,r2,-128
    b6f4:	103fed1e 	bne	r2,zero,b6ac <alt_up_character_lcd_string+0x18>
	}
}
    b6f8:	0001883a 	nop
    b6fc:	0001883a 	nop
    b700:	e037883a 	mov	sp,fp
    b704:	df000017 	ldw	fp,0(sp)
    b708:	dec00104 	addi	sp,sp,4
    b70c:	f800283a 	ret

0000b710 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
    b710:	defffb04 	addi	sp,sp,-20
    b714:	dfc00415 	stw	ra,16(sp)
    b718:	df000315 	stw	fp,12(sp)
    b71c:	df000304 	addi	fp,sp,12
    b720:	e13fff15 	stw	r4,-4(fp)
    b724:	e17ffe15 	stw	r5,-8(fp)
    b728:	e1bffd15 	stw	r6,-12(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
    b72c:	e0bfff17 	ldw	r2,-4(fp)
    b730:	10800017 	ldw	r2,0(r2)
    b734:	e0fffd17 	ldw	r3,-12(fp)
    b738:	180d883a 	mov	r6,r3
    b73c:	e17ffe17 	ldw	r5,-8(fp)
    b740:	1009883a 	mov	r4,r2
    b744:	000b6140 	call	b614 <alt_up_character_lcd_write>
	return 0;
    b748:	0005883a 	mov	r2,zero
}
    b74c:	e037883a 	mov	sp,fp
    b750:	dfc00117 	ldw	ra,4(sp)
    b754:	df000017 	ldw	fp,0(sp)
    b758:	dec00204 	addi	sp,sp,8
    b75c:	f800283a 	ret

0000b760 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
    b760:	defffa04 	addi	sp,sp,-24
    b764:	dfc00515 	stw	ra,20(sp)
    b768:	df000415 	stw	fp,16(sp)
    b76c:	df000404 	addi	fp,sp,16
    b770:	e13ffe15 	stw	r4,-8(fp)
    b774:	e17ffd15 	stw	r5,-12(fp)
    b778:	e1bffc15 	stw	r6,-16(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
    b77c:	e0bffd17 	ldw	r2,-12(fp)
    b780:	10800a28 	cmpgeui	r2,r2,40
    b784:	1000031e 	bne	r2,zero,b794 <alt_up_character_lcd_set_cursor_pos+0x34>
    b788:	e0bffc17 	ldw	r2,-16(fp)
    b78c:	108000b0 	cmpltui	r2,r2,2
    b790:	1000021e 	bne	r2,zero,b79c <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
    b794:	00bfffc4 	movi	r2,-1
    b798:	00000906 	br	b7c0 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    b79c:	e17ffc17 	ldw	r5,-16(fp)
    b7a0:	e13ffd17 	ldw	r4,-12(fp)
    b7a4:	000b4ec0 	call	b4ec <get_DDRAM_addr>
    b7a8:	e0bfffc5 	stb	r2,-1(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
    b7ac:	e0bfffc3 	ldbu	r2,-1(fp)
    b7b0:	100b883a 	mov	r5,r2
    b7b4:	e13ffe17 	ldw	r4,-8(fp)
    b7b8:	000b5600 	call	b560 <alt_up_character_lcd_send_cmd>
	return 0;
    b7bc:	0005883a 	mov	r2,zero
}
    b7c0:	e037883a 	mov	sp,fp
    b7c4:	dfc00117 	ldw	ra,4(sp)
    b7c8:	df000017 	ldw	fp,0(sp)
    b7cc:	dec00204 	addi	sp,sp,8
    b7d0:	f800283a 	ret

0000b7d4 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    b7d4:	defffb04 	addi	sp,sp,-20
    b7d8:	dfc00415 	stw	ra,16(sp)
    b7dc:	df000315 	stw	fp,12(sp)
    b7e0:	df000304 	addi	fp,sp,12
    b7e4:	e13ffe15 	stw	r4,-8(fp)
    b7e8:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
    b7ec:	e0bffd17 	ldw	r2,-12(fp)
    b7f0:	10001526 	beq	r2,zero,b848 <alt_up_character_lcd_shift_cursor+0x74>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
    b7f4:	e0bffd17 	ldw	r2,-12(fp)
    b7f8:	0080020e 	bge	zero,r2,b804 <alt_up_character_lcd_shift_cursor+0x30>
    b7fc:	00800504 	movi	r2,20
    b800:	00000106 	br	b808 <alt_up_character_lcd_shift_cursor+0x34>
    b804:	00800404 	movi	r2,16
    b808:	e0bfff85 	stb	r2,-2(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
    b80c:	e0bffd17 	ldw	r2,-12(fp)
    b810:	1000010e 	bge	r2,zero,b818 <alt_up_character_lcd_shift_cursor+0x44>
    b814:	0085c83a 	sub	r2,zero,r2
    b818:	e0bfffc5 	stb	r2,-1(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    b81c:	00000406 	br	b830 <alt_up_character_lcd_shift_cursor+0x5c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    b820:	e0bfff83 	ldbu	r2,-2(fp)
    b824:	100b883a 	mov	r5,r2
    b828:	e13ffe17 	ldw	r4,-8(fp)
    b82c:	000b5600 	call	b560 <alt_up_character_lcd_send_cmd>
	while (num_offset-- > 0)
    b830:	e0bfffc3 	ldbu	r2,-1(fp)
    b834:	10ffffc4 	addi	r3,r2,-1
    b838:	e0ffffc5 	stb	r3,-1(fp)
    b83c:	10803fcc 	andi	r2,r2,255
    b840:	103ff71e 	bne	r2,zero,b820 <alt_up_character_lcd_shift_cursor+0x4c>
    b844:	00000106 	br	b84c <alt_up_character_lcd_shift_cursor+0x78>
		return;
    b848:	0001883a 	nop
}
    b84c:	e037883a 	mov	sp,fp
    b850:	dfc00117 	ldw	ra,4(sp)
    b854:	df000017 	ldw	fp,0(sp)
    b858:	dec00204 	addi	sp,sp,8
    b85c:	f800283a 	ret

0000b860 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    b860:	defffb04 	addi	sp,sp,-20
    b864:	dfc00415 	stw	ra,16(sp)
    b868:	df000315 	stw	fp,12(sp)
    b86c:	df000304 	addi	fp,sp,12
    b870:	e13ffe15 	stw	r4,-8(fp)
    b874:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
    b878:	e0bffd17 	ldw	r2,-12(fp)
    b87c:	10001526 	beq	r2,zero,b8d4 <alt_up_character_lcd_shift_display+0x74>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
    b880:	e0bffd17 	ldw	r2,-12(fp)
    b884:	0080020e 	bge	zero,r2,b890 <alt_up_character_lcd_shift_display+0x30>
    b888:	00800704 	movi	r2,28
    b88c:	00000106 	br	b894 <alt_up_character_lcd_shift_display+0x34>
    b890:	00800604 	movi	r2,24
    b894:	e0bfff85 	stb	r2,-2(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
    b898:	e0bffd17 	ldw	r2,-12(fp)
    b89c:	1000010e 	bge	r2,zero,b8a4 <alt_up_character_lcd_shift_display+0x44>
    b8a0:	0085c83a 	sub	r2,zero,r2
    b8a4:	e0bfffc5 	stb	r2,-1(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    b8a8:	00000406 	br	b8bc <alt_up_character_lcd_shift_display+0x5c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    b8ac:	e0bfff83 	ldbu	r2,-2(fp)
    b8b0:	100b883a 	mov	r5,r2
    b8b4:	e13ffe17 	ldw	r4,-8(fp)
    b8b8:	000b5600 	call	b560 <alt_up_character_lcd_send_cmd>
	while (num_offset-- > 0)
    b8bc:	e0bfffc3 	ldbu	r2,-1(fp)
    b8c0:	10ffffc4 	addi	r3,r2,-1
    b8c4:	e0ffffc5 	stb	r3,-1(fp)
    b8c8:	10803fcc 	andi	r2,r2,255
    b8cc:	103ff71e 	bne	r2,zero,b8ac <alt_up_character_lcd_shift_display+0x4c>
    b8d0:	00000106 	br	b8d8 <alt_up_character_lcd_shift_display+0x78>
		return;
    b8d4:	0001883a 	nop
}
    b8d8:	e037883a 	mov	sp,fp
    b8dc:	dfc00117 	ldw	ra,4(sp)
    b8e0:	df000017 	ldw	fp,0(sp)
    b8e4:	dec00204 	addi	sp,sp,8
    b8e8:	f800283a 	ret

0000b8ec <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
    b8ec:	defffa04 	addi	sp,sp,-24
    b8f0:	dfc00515 	stw	ra,20(sp)
    b8f4:	df000415 	stw	fp,16(sp)
    b8f8:	df000404 	addi	fp,sp,16
    b8fc:	e13ffe15 	stw	r4,-8(fp)
    b900:	e17ffd15 	stw	r5,-12(fp)
    b904:	e1bffc15 	stw	r6,-16(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
    b908:	e0bffd17 	ldw	r2,-12(fp)
    b90c:	10800a28 	cmpgeui	r2,r2,40
    b910:	1000031e 	bne	r2,zero,b920 <alt_up_character_lcd_erase_pos+0x34>
    b914:	e0bffc17 	ldw	r2,-16(fp)
    b918:	108000b0 	cmpltui	r2,r2,2
    b91c:	1000021e 	bne	r2,zero,b928 <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
    b920:	00bfffc4 	movi	r2,-1
    b924:	00000f06 	br	b964 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    b928:	e17ffc17 	ldw	r5,-16(fp)
    b92c:	e13ffd17 	ldw	r4,-12(fp)
    b930:	000b4ec0 	call	b4ec <get_DDRAM_addr>
    b934:	e0bfffc5 	stb	r2,-1(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
    b938:	e0bfffc3 	ldbu	r2,-1(fp)
    b93c:	100b883a 	mov	r5,r2
    b940:	e13ffe17 	ldw	r4,-8(fp)
    b944:	000b5600 	call	b560 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
    b948:	e0bffe17 	ldw	r2,-8(fp)
    b94c:	10800a17 	ldw	r2,40(r2)
    b950:	10800044 	addi	r2,r2,1
    b954:	1007883a 	mov	r3,r2
    b958:	00800084 	movi	r2,2
    b95c:	18800025 	stbio	r2,0(r3)
	return 0;
    b960:	0005883a 	mov	r2,zero
}
    b964:	e037883a 	mov	sp,fp
    b968:	dfc00117 	ldw	ra,4(sp)
    b96c:	df000017 	ldw	fp,0(sp)
    b970:	dec00204 	addi	sp,sp,8
    b974:	f800283a 	ret

0000b978 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
    b978:	defffd04 	addi	sp,sp,-12
    b97c:	dfc00215 	stw	ra,8(sp)
    b980:	df000115 	stw	fp,4(sp)
    b984:	df000104 	addi	fp,sp,4
    b988:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
    b98c:	01400304 	movi	r5,12
    b990:	e13fff17 	ldw	r4,-4(fp)
    b994:	000b5600 	call	b560 <alt_up_character_lcd_send_cmd>
}
    b998:	0001883a 	nop
    b99c:	e037883a 	mov	sp,fp
    b9a0:	dfc00117 	ldw	ra,4(sp)
    b9a4:	df000017 	ldw	fp,0(sp)
    b9a8:	dec00204 	addi	sp,sp,8
    b9ac:	f800283a 	ret

0000b9b0 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
    b9b0:	defffd04 	addi	sp,sp,-12
    b9b4:	dfc00215 	stw	ra,8(sp)
    b9b8:	df000115 	stw	fp,4(sp)
    b9bc:	df000104 	addi	fp,sp,4
    b9c0:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
    b9c4:	014003c4 	movi	r5,15
    b9c8:	e13fff17 	ldw	r4,-4(fp)
    b9cc:	000b5600 	call	b560 <alt_up_character_lcd_send_cmd>
}
    b9d0:	0001883a 	nop
    b9d4:	e037883a 	mov	sp,fp
    b9d8:	dfc00117 	ldw	ra,4(sp)
    b9dc:	df000017 	ldw	fp,0(sp)
    b9e0:	dec00204 	addi	sp,sp,8
    b9e4:	f800283a 	ret

0000b9e8 <alt_up_irda_enable_read_interrupt>:
#include "altera_up_avalon_irda.h"
#include "altera_up_avalon_irda_regs.h"


void alt_up_irda_enable_read_interrupt(alt_up_irda_dev *irda)
{
    b9e8:	defffd04 	addi	sp,sp,-12
    b9ec:	df000215 	stw	fp,8(sp)
    b9f0:	df000204 	addi	fp,sp,8
    b9f4:	e13ffe15 	stw	r4,-8(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    b9f8:	e0bffe17 	ldw	r2,-8(fp)
    b9fc:	10800a17 	ldw	r2,40(r2)
    ba00:	10800104 	addi	r2,r2,4
    ba04:	10800037 	ldwio	r2,0(r2)
    ba08:	e0bfff15 	stw	r2,-4(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_IRDA_CONTROL_RE_MSK;
    ba0c:	e0bfff17 	ldw	r2,-4(fp)
    ba10:	10800054 	ori	r2,r2,1
    ba14:	e0bfff15 	stw	r2,-4(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
    ba18:	e0bffe17 	ldw	r2,-8(fp)
    ba1c:	10800a17 	ldw	r2,40(r2)
    ba20:	10800104 	addi	r2,r2,4
    ba24:	1007883a 	mov	r3,r2
    ba28:	e0bfff17 	ldw	r2,-4(fp)
    ba2c:	18800035 	stwio	r2,0(r3)
}
    ba30:	0001883a 	nop
    ba34:	e037883a 	mov	sp,fp
    ba38:	df000017 	ldw	fp,0(sp)
    ba3c:	dec00104 	addi	sp,sp,4
    ba40:	f800283a 	ret

0000ba44 <alt_up_irda_disable_read_interrupt>:

void alt_up_irda_disable_read_interrupt(alt_up_irda_dev *irda)
{
    ba44:	defffd04 	addi	sp,sp,-12
    ba48:	df000215 	stw	fp,8(sp)
    ba4c:	df000204 	addi	fp,sp,8
    ba50:	e13ffe15 	stw	r4,-8(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    ba54:	e0bffe17 	ldw	r2,-8(fp)
    ba58:	10800a17 	ldw	r2,40(r2)
    ba5c:	10800104 	addi	r2,r2,4
    ba60:	10800037 	ldwio	r2,0(r2)
    ba64:	e0bfff15 	stw	r2,-4(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_IRDA_CONTROL_RE_MSK;
    ba68:	e0ffff17 	ldw	r3,-4(fp)
    ba6c:	00bfff84 	movi	r2,-2
    ba70:	1884703a 	and	r2,r3,r2
    ba74:	e0bfff15 	stw	r2,-4(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
    ba78:	e0bffe17 	ldw	r2,-8(fp)
    ba7c:	10800a17 	ldw	r2,40(r2)
    ba80:	10800104 	addi	r2,r2,4
    ba84:	1007883a 	mov	r3,r2
    ba88:	e0bfff17 	ldw	r2,-4(fp)
    ba8c:	18800035 	stwio	r2,0(r3)
}
    ba90:	0001883a 	nop
    ba94:	e037883a 	mov	sp,fp
    ba98:	df000017 	ldw	fp,0(sp)
    ba9c:	dec00104 	addi	sp,sp,4
    baa0:	f800283a 	ret

0000baa4 <alt_up_irda_get_used_space_in_read_FIFO>:

unsigned alt_up_irda_get_used_space_in_read_FIFO(alt_up_irda_dev *irda)
{
    baa4:	defffd04 	addi	sp,sp,-12
    baa8:	df000215 	stw	fp,8(sp)
    baac:	df000204 	addi	fp,sp,8
    bab0:	e13ffe15 	stw	r4,-8(fp)
	alt_u16 ravail = 0;
    bab4:	e03fff8d 	sth	zero,-2(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_IRDA_DATA(irda->base), 2); 
//	return ravail;
	ravail = IORD_ALT_UP_IRDA_RAVAIL(irda->base); 
    bab8:	e0bffe17 	ldw	r2,-8(fp)
    babc:	10800a17 	ldw	r2,40(r2)
    bac0:	10800084 	addi	r2,r2,2
    bac4:	1080002b 	ldhuio	r2,0(r2)
    bac8:	10bfffcc 	andi	r2,r2,65535
    bacc:	e0bfff8d 	sth	r2,-2(fp)
	return (ravail & ALT_UP_IRDA_RAVAIL_MSK) >> ALT_UP_IRDA_RAVAIL_OFST;
    bad0:	e0bfff8b 	ldhu	r2,-2(fp)
}
    bad4:	e037883a 	mov	sp,fp
    bad8:	df000017 	ldw	fp,0(sp)
    badc:	dec00104 	addi	sp,sp,4
    bae0:	f800283a 	ret

0000bae4 <alt_up_irda_get_available_space_in_write_FIFO>:

unsigned alt_up_irda_get_available_space_in_write_FIFO(alt_up_irda_dev *irda)
{
    bae4:	defffd04 	addi	sp,sp,-12
    bae8:	df000215 	stw	fp,8(sp)
    baec:	df000204 	addi	fp,sp,8
    baf0:	e13ffe15 	stw	r4,-8(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    baf4:	e0bffe17 	ldw	r2,-8(fp)
    baf8:	10800a17 	ldw	r2,40(r2)
    bafc:	10800104 	addi	r2,r2,4
    bb00:	10800037 	ldwio	r2,0(r2)
    bb04:	e0bfff15 	stw	r2,-4(fp)
	return (ctrl_reg & ALT_UP_IRDA_CONTROL_WSPACE_MSK) >> ALT_UP_IRDA_CONTROL_WSPACE_OFST;
    bb08:	e0bfff17 	ldw	r2,-4(fp)
    bb0c:	1004d43a 	srli	r2,r2,16
}
    bb10:	e037883a 	mov	sp,fp
    bb14:	df000017 	ldw	fp,0(sp)
    bb18:	dec00104 	addi	sp,sp,4
    bb1c:	f800283a 	ret

0000bb20 <alt_up_irda_check_parity>:

int alt_up_irda_check_parity(alt_u32 data_reg)
{
    bb20:	defffd04 	addi	sp,sp,-12
    bb24:	df000215 	stw	fp,8(sp)
    bb28:	df000204 	addi	fp,sp,8
    bb2c:	e13ffe15 	stw	r4,-8(fp)
	unsigned parity_error = (data_reg & ALT_UP_IRDA_DATA_PE_MSK) >> ALT_UP_IRDA_DATA_PE_OFST;
    bb30:	e0bffe17 	ldw	r2,-8(fp)
    bb34:	1004d27a 	srli	r2,r2,9
    bb38:	1080004c 	andi	r2,r2,1
    bb3c:	e0bfff15 	stw	r2,-4(fp)
	return (parity_error ? -1 : 0);
    bb40:	e0bfff17 	ldw	r2,-4(fp)
    bb44:	10000226 	beq	r2,zero,bb50 <alt_up_irda_check_parity+0x30>
    bb48:	00bfffc4 	movi	r2,-1
    bb4c:	00000106 	br	bb54 <alt_up_irda_check_parity+0x34>
    bb50:	0005883a 	mov	r2,zero
}
    bb54:	e037883a 	mov	sp,fp
    bb58:	df000017 	ldw	fp,0(sp)
    bb5c:	dec00104 	addi	sp,sp,4
    bb60:	f800283a 	ret

0000bb64 <alt_up_irda_write_data>:

int alt_up_irda_write_data(alt_up_irda_dev *irda, alt_u8 data)
{
    bb64:	defffd04 	addi	sp,sp,-12
    bb68:	df000215 	stw	fp,8(sp)
    bb6c:	df000204 	addi	fp,sp,8
    bb70:	e13fff15 	stw	r4,-4(fp)
    bb74:	2805883a 	mov	r2,r5
    bb78:	e0bffe05 	stb	r2,-8(fp)
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    */

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_IRDA_DATA(irda->base, (data>>ALT_UP_IRDA_DATA_DATA_OFST) & ALT_UP_IRDA_DATA_DATA_MSK);
    bb7c:	e0bfff17 	ldw	r2,-4(fp)
    bb80:	10800a17 	ldw	r2,40(r2)
    bb84:	1007883a 	mov	r3,r2
    bb88:	e0bffe03 	ldbu	r2,-8(fp)
    bb8c:	18800035 	stwio	r2,0(r3)
	return 0;
    bb90:	0005883a 	mov	r2,zero
}
    bb94:	e037883a 	mov	sp,fp
    bb98:	df000017 	ldw	fp,0(sp)
    bb9c:	dec00104 	addi	sp,sp,4
    bba0:	f800283a 	ret

0000bba4 <alt_up_irda_read_data>:

int alt_up_irda_read_data(alt_up_irda_dev *irda, alt_u8 *data, alt_u8 *parity_error)
{
    bba4:	defffa04 	addi	sp,sp,-24
    bba8:	dfc00515 	stw	ra,20(sp)
    bbac:	df000415 	stw	fp,16(sp)
    bbb0:	df000404 	addi	fp,sp,16
    bbb4:	e13ffe15 	stw	r4,-8(fp)
    bbb8:	e17ffd15 	stw	r5,-12(fp)
    bbbc:	e1bffc15 	stw	r6,-16(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    bbc0:	e0bffe17 	ldw	r2,-8(fp)
    bbc4:	10800a17 	ldw	r2,40(r2)
    bbc8:	10800037 	ldwio	r2,0(r2)
    bbcc:	e0bfff15 	stw	r2,-4(fp)
	*data = (data_reg & ALT_UP_IRDA_DATA_DATA_MSK) >> ALT_UP_IRDA_DATA_DATA_OFST;
    bbd0:	e0bfff17 	ldw	r2,-4(fp)
    bbd4:	1007883a 	mov	r3,r2
    bbd8:	e0bffd17 	ldw	r2,-12(fp)
    bbdc:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_irda_check_parity(data_reg);
    bbe0:	e13fff17 	ldw	r4,-4(fp)
    bbe4:	000bb200 	call	bb20 <alt_up_irda_check_parity>
    bbe8:	1007883a 	mov	r3,r2
    bbec:	e0bffc17 	ldw	r2,-16(fp)
    bbf0:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_IRDA_DATA_RVALID_MSK) >> ALT_UP_IRDA_DATA_RVALID_OFST) - 1);
    bbf4:	e0bfff17 	ldw	r2,-4(fp)
    bbf8:	1004d3fa 	srli	r2,r2,15
    bbfc:	1080004c 	andi	r2,r2,1
    bc00:	10bfffc4 	addi	r2,r2,-1
}
    bc04:	e037883a 	mov	sp,fp
    bc08:	dfc00117 	ldw	ra,4(sp)
    bc0c:	df000017 	ldw	fp,0(sp)
    bc10:	dec00204 	addi	sp,sp,8
    bc14:	f800283a 	ret

0000bc18 <alt_up_irda_read_fd>:

int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
    bc18:	defff804 	addi	sp,sp,-32
    bc1c:	dfc00715 	stw	ra,28(sp)
    bc20:	df000615 	stw	fp,24(sp)
    bc24:	df000604 	addi	fp,sp,24
    bc28:	e13ffc15 	stw	r4,-16(fp)
    bc2c:	e17ffb15 	stw	r5,-20(fp)
    bc30:	e1bffa15 	stw	r6,-24(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
    bc34:	e0bffc17 	ldw	r2,-16(fp)
    bc38:	10800017 	ldw	r2,0(r2)
    bc3c:	e0bffe15 	stw	r2,-8(fp)
	int count = 0;
    bc40:	e03fff15 	stw	zero,-4(fp)
	alt_u8 parity_error;
	while(len--)
    bc44:	00000c06 	br	bc78 <alt_up_irda_read_fd+0x60>
	{
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
    bc48:	e0bffb17 	ldw	r2,-20(fp)
    bc4c:	10c00044 	addi	r3,r2,1
    bc50:	e0fffb15 	stw	r3,-20(fp)
    bc54:	e0fffdc4 	addi	r3,fp,-9
    bc58:	180d883a 	mov	r6,r3
    bc5c:	100b883a 	mov	r5,r2
    bc60:	e13ffe17 	ldw	r4,-8(fp)
    bc64:	000bba40 	call	bba4 <alt_up_irda_read_data>
    bc68:	1000081e 	bne	r2,zero,bc8c <alt_up_irda_read_fd+0x74>
			count++;
    bc6c:	e0bfff17 	ldw	r2,-4(fp)
    bc70:	10800044 	addi	r2,r2,1
    bc74:	e0bfff15 	stw	r2,-4(fp)
	while(len--)
    bc78:	e0bffa17 	ldw	r2,-24(fp)
    bc7c:	10ffffc4 	addi	r3,r2,-1
    bc80:	e0fffa15 	stw	r3,-24(fp)
    bc84:	103ff01e 	bne	r2,zero,bc48 <alt_up_irda_read_fd+0x30>
    bc88:	00000106 	br	bc90 <alt_up_irda_read_fd+0x78>
		else
			break;
    bc8c:	0001883a 	nop
	}
	return count;
    bc90:	e0bfff17 	ldw	r2,-4(fp)
}
    bc94:	e037883a 	mov	sp,fp
    bc98:	dfc00117 	ldw	ra,4(sp)
    bc9c:	df000017 	ldw	fp,0(sp)
    bca0:	dec00204 	addi	sp,sp,8
    bca4:	f800283a 	ret

0000bca8 <alt_up_irda_write_fd>:

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
    bca8:	defff904 	addi	sp,sp,-28
    bcac:	dfc00615 	stw	ra,24(sp)
    bcb0:	df000515 	stw	fp,20(sp)
    bcb4:	df000504 	addi	fp,sp,20
    bcb8:	e13ffd15 	stw	r4,-12(fp)
    bcbc:	e17ffc15 	stw	r5,-16(fp)
    bcc0:	e1bffb15 	stw	r6,-20(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
    bcc4:	e0bffd17 	ldw	r2,-12(fp)
    bcc8:	10800017 	ldw	r2,0(r2)
    bccc:	e0bffe15 	stw	r2,-8(fp)
	int count = 0;
    bcd0:	e03fff15 	stw	zero,-4(fp)
	while(len--)
    bcd4:	00000c06 	br	bd08 <alt_up_irda_write_fd+0x60>
	{
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
    bcd8:	e0bffc17 	ldw	r2,-16(fp)
    bcdc:	10c00044 	addi	r3,r2,1
    bce0:	e0fffc15 	stw	r3,-16(fp)
    bce4:	10800003 	ldbu	r2,0(r2)
    bce8:	10803fcc 	andi	r2,r2,255
    bcec:	100b883a 	mov	r5,r2
    bcf0:	e13ffe17 	ldw	r4,-8(fp)
    bcf4:	000bb640 	call	bb64 <alt_up_irda_write_data>
    bcf8:	1000081e 	bne	r2,zero,bd1c <alt_up_irda_write_fd+0x74>
			count++;
    bcfc:	e0bfff17 	ldw	r2,-4(fp)
    bd00:	10800044 	addi	r2,r2,1
    bd04:	e0bfff15 	stw	r2,-4(fp)
	while(len--)
    bd08:	e0bffb17 	ldw	r2,-20(fp)
    bd0c:	10ffffc4 	addi	r3,r2,-1
    bd10:	e0fffb15 	stw	r3,-20(fp)
    bd14:	103ff01e 	bne	r2,zero,bcd8 <alt_up_irda_write_fd+0x30>
    bd18:	00000106 	br	bd20 <alt_up_irda_write_fd+0x78>
		else
			break;
    bd1c:	0001883a 	nop
	}
	return count;
    bd20:	e0bfff17 	ldw	r2,-4(fp)
}
    bd24:	e037883a 	mov	sp,fp
    bd28:	dfc00117 	ldw	ra,4(sp)
    bd2c:	df000017 	ldw	fp,0(sp)
    bd30:	dec00204 	addi	sp,sp,8
    bd34:	f800283a 	ret

0000bd38 <alt_up_irda_open_dev>:

alt_up_irda_dev* alt_up_irda_open_dev(const char* name)
{
    bd38:	defffc04 	addi	sp,sp,-16
    bd3c:	dfc00315 	stw	ra,12(sp)
    bd40:	df000215 	stw	fp,8(sp)
    bd44:	df000204 	addi	fp,sp,8
    bd48:	e13ffe15 	stw	r4,-8(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_irda_dev *dev = (alt_up_irda_dev*)alt_find_dev(name, &alt_dev_list);
    bd4c:	d1602804 	addi	r5,gp,-32608
    bd50:	e13ffe17 	ldw	r4,-8(fp)
    bd54:	000cbf00 	call	cbf0 <alt_find_dev>
    bd58:	e0bfff15 	stw	r2,-4(fp)

  return dev;
    bd5c:	e0bfff17 	ldw	r2,-4(fp)
}
    bd60:	e037883a 	mov	sp,fp
    bd64:	dfc00117 	ldw	ra,4(sp)
    bd68:	df000017 	ldw	fp,0(sp)
    bd6c:	dec00204 	addi	sp,sp,8
    bd70:	f800283a 	ret

0000bd74 <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
    bd74:	defffd04 	addi	sp,sp,-12
    bd78:	df000215 	stw	fp,8(sp)
    bd7c:	df000204 	addi	fp,sp,8
    bd80:	e13ffe15 	stw	r4,-8(fp)
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
    bd84:	e0bffe17 	ldw	r2,-8(fp)
    bd88:	1004d23a 	srli	r2,r2,8
    bd8c:	1080004c 	andi	r2,r2,1
    bd90:	e0bfffc5 	stb	r2,-1(fp)
	return ri;
    bd94:	e0bfffc3 	ldbu	r2,-1(fp)
}
    bd98:	e037883a 	mov	sp,fp
    bd9c:	df000017 	ldw	fp,0(sp)
    bda0:	dec00104 	addi	sp,sp,4
    bda4:	f800283a 	ret

0000bda8 <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
    bda8:	defffd04 	addi	sp,sp,-12
    bdac:	df000215 	stw	fp,8(sp)
    bdb0:	df000204 	addi	fp,sp,8
    bdb4:	e13ffe15 	stw	r4,-8(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
    bdb8:	e0bffe17 	ldw	r2,-8(fp)
    bdbc:	1080004c 	andi	r2,r2,1
    bdc0:	e0bfffc5 	stb	r2,-1(fp)
	return re;
    bdc4:	e0bfffc3 	ldbu	r2,-1(fp)
}
    bdc8:	e037883a 	mov	sp,fp
    bdcc:	df000017 	ldw	fp,0(sp)
    bdd0:	dec00104 	addi	sp,sp,4
    bdd4:	f800283a 	ret

0000bdd8 <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
    bdd8:	defffd04 	addi	sp,sp,-12
    bddc:	df000215 	stw	fp,8(sp)
    bde0:	df000204 	addi	fp,sp,8
    bde4:	e13ffe15 	stw	r4,-8(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
    bde8:	e0bffe17 	ldw	r2,-8(fp)
    bdec:	1004d2ba 	srli	r2,r2,10
    bdf0:	1080004c 	andi	r2,r2,1
    bdf4:	e0bfffc5 	stb	r2,-1(fp)
	return re;
    bdf8:	e0bfffc3 	ldbu	r2,-1(fp)
}
    bdfc:	e037883a 	mov	sp,fp
    be00:	df000017 	ldw	fp,0(sp)
    be04:	dec00104 	addi	sp,sp,4
    be08:	f800283a 	ret

0000be0c <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
    be0c:	defffd04 	addi	sp,sp,-12
    be10:	df000215 	stw	fp,8(sp)
    be14:	df000204 	addi	fp,sp,8
    be18:	e13ffe15 	stw	r4,-8(fp)
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
    be1c:	e0bffe17 	ldw	r2,-8(fp)
    be20:	1004d43a 	srli	r2,r2,16
    be24:	e0bfff8d 	sth	r2,-2(fp)
	return ravail;
    be28:	e0bfff8b 	ldhu	r2,-2(fp)
}
    be2c:	e037883a 	mov	sp,fp
    be30:	df000017 	ldw	fp,0(sp)
    be34:	dec00104 	addi	sp,sp,4
    be38:	f800283a 	ret

0000be3c <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
    be3c:	defffd04 	addi	sp,sp,-12
    be40:	df000215 	stw	fp,8(sp)
    be44:	df000204 	addi	fp,sp,8
    be48:	e13ffe15 	stw	r4,-8(fp)
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
    be4c:	e0bffe17 	ldw	r2,-8(fp)
    be50:	1004d3fa 	srli	r2,r2,15
    be54:	1080004c 	andi	r2,r2,1
    be58:	e0bfffc5 	stb	r2,-1(fp)
	return rvalid;
    be5c:	e0bfffc3 	ldbu	r2,-1(fp)
}
    be60:	e037883a 	mov	sp,fp
    be64:	df000017 	ldw	fp,0(sp)
    be68:	dec00104 	addi	sp,sp,4
    be6c:	f800283a 	ret

0000be70 <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
    be70:	defffd04 	addi	sp,sp,-12
    be74:	df000215 	stw	fp,8(sp)
    be78:	df000204 	addi	fp,sp,8
    be7c:	e13ffe15 	stw	r4,-8(fp)
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
    be80:	e0bffe17 	ldw	r2,-8(fp)
    be84:	e0bfffc5 	stb	r2,-1(fp)
	return data;
    be88:	e0bfffc3 	ldbu	r2,-1(fp)
}
    be8c:	e037883a 	mov	sp,fp
    be90:	df000017 	ldw	fp,0(sp)
    be94:	dec00104 	addi	sp,sp,4
    be98:	f800283a 	ret

0000be9c <alt_up_ps2_init>:

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
    be9c:	defffb04 	addi	sp,sp,-20
    bea0:	dfc00415 	stw	ra,16(sp)
    bea4:	df000315 	stw	fp,12(sp)
    bea8:	df000304 	addi	fp,sp,12
    beac:	e13ffd15 	stw	r4,-12(fp)
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
    beb0:	01403fc4 	movi	r5,255
    beb4:	e13ffd17 	ldw	r4,-12(fp)
    beb8:	000c0fc0 	call	c0fc <alt_up_ps2_write_data_byte_with_ack>
    bebc:	e0bfff15 	stw	r2,-4(fp)
	if (status == 0)
    bec0:	e0bfff17 	ldw	r2,-4(fp)
    bec4:	1000211e 	bne	r2,zero,bf4c <alt_up_ps2_init+0xb0>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    bec8:	e0bffec4 	addi	r2,fp,-5
    becc:	100b883a 	mov	r5,r2
    bed0:	e13ffd17 	ldw	r4,-12(fp)
    bed4:	000c1600 	call	c160 <alt_up_ps2_read_data_byte_timeout>
    bed8:	e0bfff15 	stw	r2,-4(fp)
		if (status == 0 && byte == 0xAA)
    bedc:	e0bfff17 	ldw	r2,-4(fp)
    bee0:	10001a1e 	bne	r2,zero,bf4c <alt_up_ps2_init+0xb0>
    bee4:	e0bffec3 	ldbu	r2,-5(fp)
    bee8:	10803fcc 	andi	r2,r2,255
    beec:	10802a98 	cmpnei	r2,r2,170
    bef0:	1000161e 	bne	r2,zero,bf4c <alt_up_ps2_init+0xb0>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    bef4:	e0bffec4 	addi	r2,fp,-5
    bef8:	100b883a 	mov	r5,r2
    befc:	e13ffd17 	ldw	r4,-12(fp)
    bf00:	000c1600 	call	c160 <alt_up_ps2_read_data_byte_timeout>
    bf04:	e0bfff15 	stw	r2,-4(fp)
			if (status == -ETIMEDOUT)
    bf08:	e0bfff17 	ldw	r2,-4(fp)
    bf0c:	10bfe318 	cmpnei	r2,r2,-116
    bf10:	1000041e 	bne	r2,zero,bf24 <alt_up_ps2_init+0x88>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
    bf14:	e0bffd17 	ldw	r2,-12(fp)
    bf18:	00c00044 	movi	r3,1
    bf1c:	10c00d15 	stw	r3,52(r2)
				ps2->device_type = PS2_MOUSE;
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
			}
		}
	}
}
    bf20:	00000a06 	br	bf4c <alt_up_ps2_init+0xb0>
			else if (status == 0 && byte == 0x00)
    bf24:	e0bfff17 	ldw	r2,-4(fp)
    bf28:	1000081e 	bne	r2,zero,bf4c <alt_up_ps2_init+0xb0>
    bf2c:	e0bffec3 	ldbu	r2,-5(fp)
    bf30:	10803fcc 	andi	r2,r2,255
    bf34:	1000051e 	bne	r2,zero,bf4c <alt_up_ps2_init+0xb0>
				ps2->device_type = PS2_MOUSE;
    bf38:	e0bffd17 	ldw	r2,-12(fp)
    bf3c:	10000d15 	stw	zero,52(r2)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
    bf40:	01403d04 	movi	r5,244
    bf44:	e13ffd17 	ldw	r4,-12(fp)
    bf48:	000c0200 	call	c020 <alt_up_ps2_write_data_byte>
}
    bf4c:	0001883a 	nop
    bf50:	e037883a 	mov	sp,fp
    bf54:	dfc00117 	ldw	ra,4(sp)
    bf58:	df000017 	ldw	fp,0(sp)
    bf5c:	dec00204 	addi	sp,sp,8
    bf60:	f800283a 	ret

0000bf64 <alt_up_ps2_enable_read_interrupt>:

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
    bf64:	defffd04 	addi	sp,sp,-12
    bf68:	df000215 	stw	fp,8(sp)
    bf6c:	df000204 	addi	fp,sp,8
    bf70:	e13ffe15 	stw	r4,-8(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    bf74:	e0bffe17 	ldw	r2,-8(fp)
    bf78:	10800a17 	ldw	r2,40(r2)
    bf7c:	10800104 	addi	r2,r2,4
    bf80:	10800037 	ldwio	r2,0(r2)
    bf84:	e0bfff15 	stw	r2,-4(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
    bf88:	e0bfff17 	ldw	r2,-4(fp)
    bf8c:	10800054 	ori	r2,r2,1
    bf90:	e0bfff15 	stw	r2,-4(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    bf94:	e0bffe17 	ldw	r2,-8(fp)
    bf98:	10800a17 	ldw	r2,40(r2)
    bf9c:	10800104 	addi	r2,r2,4
    bfa0:	1007883a 	mov	r3,r2
    bfa4:	e0bfff17 	ldw	r2,-4(fp)
    bfa8:	18800035 	stwio	r2,0(r3)
}
    bfac:	0001883a 	nop
    bfb0:	e037883a 	mov	sp,fp
    bfb4:	df000017 	ldw	fp,0(sp)
    bfb8:	dec00104 	addi	sp,sp,4
    bfbc:	f800283a 	ret

0000bfc0 <alt_up_ps2_disable_read_interrupt>:

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
    bfc0:	defffd04 	addi	sp,sp,-12
    bfc4:	df000215 	stw	fp,8(sp)
    bfc8:	df000204 	addi	fp,sp,8
    bfcc:	e13ffe15 	stw	r4,-8(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    bfd0:	e0bffe17 	ldw	r2,-8(fp)
    bfd4:	10800a17 	ldw	r2,40(r2)
    bfd8:	10800104 	addi	r2,r2,4
    bfdc:	10800037 	ldwio	r2,0(r2)
    bfe0:	e0bfff15 	stw	r2,-4(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
    bfe4:	e0ffff17 	ldw	r3,-4(fp)
    bfe8:	00bfff84 	movi	r2,-2
    bfec:	1884703a 	and	r2,r3,r2
    bff0:	e0bfff15 	stw	r2,-4(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    bff4:	e0bffe17 	ldw	r2,-8(fp)
    bff8:	10800a17 	ldw	r2,40(r2)
    bffc:	10800104 	addi	r2,r2,4
    c000:	1007883a 	mov	r3,r2
    c004:	e0bfff17 	ldw	r2,-4(fp)
    c008:	18800035 	stwio	r2,0(r3)
}
    c00c:	0001883a 	nop
    c010:	e037883a 	mov	sp,fp
    c014:	df000017 	ldw	fp,0(sp)
    c018:	dec00104 	addi	sp,sp,4
    c01c:	f800283a 	ret

0000c020 <alt_up_ps2_write_data_byte>:

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
    c020:	defffb04 	addi	sp,sp,-20
    c024:	dfc00415 	stw	ra,16(sp)
    c028:	df000315 	stw	fp,12(sp)
    c02c:	df000304 	addi	fp,sp,12
    c030:	e13ffe15 	stw	r4,-8(fp)
    c034:	2805883a 	mov	r2,r5
    c038:	e0bffd05 	stb	r2,-12(fp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
    c03c:	e0bffe17 	ldw	r2,-8(fp)
    c040:	10800a17 	ldw	r2,40(r2)
    c044:	1007883a 	mov	r3,r2
    c048:	e0bffd03 	ldbu	r2,-12(fp)
    c04c:	18800025 	stbio	r2,0(r3)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
    c050:	e0bffe17 	ldw	r2,-8(fp)
    c054:	10800a17 	ldw	r2,40(r2)
    c058:	10800104 	addi	r2,r2,4
    c05c:	10800037 	ldwio	r2,0(r2)
    c060:	e0bfff15 	stw	r2,-4(fp)
	if (read_CE_bit(ctrl_reg))
    c064:	e13fff17 	ldw	r4,-4(fp)
    c068:	000bdd80 	call	bdd8 <read_CE_bit>
    c06c:	10803fcc 	andi	r2,r2,255
    c070:	10000226 	beq	r2,zero,c07c <alt_up_ps2_write_data_byte+0x5c>
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
    c074:	00bffec4 	movi	r2,-5
    c078:	00000106 	br	c080 <alt_up_ps2_write_data_byte+0x60>
	}
	return 0;
    c07c:	0005883a 	mov	r2,zero
}
    c080:	e037883a 	mov	sp,fp
    c084:	dfc00117 	ldw	ra,4(sp)
    c088:	df000017 	ldw	fp,0(sp)
    c08c:	dec00204 	addi	sp,sp,8
    c090:	f800283a 	ret

0000c094 <alt_up_ps2_wait_for_ack>:

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
    c094:	defffc04 	addi	sp,sp,-16
    c098:	dfc00315 	stw	ra,12(sp)
    c09c:	df000215 	stw	fp,8(sp)
    c0a0:	df000204 	addi	fp,sp,8
    c0a4:	e13ffe15 	stw	r4,-8(fp)
	unsigned char data = 0;
    c0a8:	e03fff85 	stb	zero,-2(fp)
	unsigned char status = 0;
    c0ac:	e03fffc5 	stb	zero,-1(fp)
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
    c0b0:	e0bfff84 	addi	r2,fp,-2
    c0b4:	100b883a 	mov	r5,r2
    c0b8:	e13ffe17 	ldw	r4,-8(fp)
    c0bc:	000c1600 	call	c160 <alt_up_ps2_read_data_byte_timeout>
    c0c0:	e0bfffc5 	stb	r2,-1(fp)
		if ( status == 0)
    c0c4:	e0bfffc3 	ldbu	r2,-1(fp)
    c0c8:	1000061e 	bne	r2,zero,c0e4 <alt_up_ps2_wait_for_ack+0x50>
		{
			if (data == PS2_ACK)
    c0cc:	e0bfff83 	ldbu	r2,-2(fp)
    c0d0:	10803fcc 	andi	r2,r2,255
    c0d4:	10803e98 	cmpnei	r2,r2,250
    c0d8:	103ff51e 	bne	r2,zero,c0b0 <alt_up_ps2_wait_for_ack+0x1c>
				return 0;
    c0dc:	0005883a 	mov	r2,zero
    c0e0:	00000106 	br	c0e8 <alt_up_ps2_wait_for_ack+0x54>
		}
		else 
		{
			return status;
    c0e4:	e0bfffc3 	ldbu	r2,-1(fp)
		}
	} while(1);
	return -ETIMEDOUT;
}
    c0e8:	e037883a 	mov	sp,fp
    c0ec:	dfc00117 	ldw	ra,4(sp)
    c0f0:	df000017 	ldw	fp,0(sp)
    c0f4:	dec00204 	addi	sp,sp,8
    c0f8:	f800283a 	ret

0000c0fc <alt_up_ps2_write_data_byte_with_ack>:

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
    c0fc:	defffa04 	addi	sp,sp,-24
    c100:	dfc00515 	stw	ra,20(sp)
    c104:	df000415 	stw	fp,16(sp)
    c108:	df000404 	addi	fp,sp,16
    c10c:	e13ffd15 	stw	r4,-12(fp)
    c110:	2805883a 	mov	r2,r5
    c114:	e0bffc05 	stb	r2,-16(fp)
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
    c118:	e0bffc03 	ldbu	r2,-16(fp)
    c11c:	100b883a 	mov	r5,r2
    c120:	e13ffd17 	ldw	r4,-12(fp)
    c124:	000c0200 	call	c020 <alt_up_ps2_write_data_byte>
    c128:	e0bfff15 	stw	r2,-4(fp)
	if ( send_status != 0)
    c12c:	e0bfff17 	ldw	r2,-4(fp)
    c130:	10000226 	beq	r2,zero,c13c <alt_up_ps2_write_data_byte_with_ack+0x40>
		// return on sending error
		return send_status;
    c134:	e0bfff17 	ldw	r2,-4(fp)
    c138:	00000406 	br	c14c <alt_up_ps2_write_data_byte_with_ack+0x50>

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
    c13c:	e13ffd17 	ldw	r4,-12(fp)
    c140:	000c0940 	call	c094 <alt_up_ps2_wait_for_ack>
    c144:	e0bffe15 	stw	r2,-8(fp)
	return ack_status;
    c148:	e0bffe17 	ldw	r2,-8(fp)
}
    c14c:	e037883a 	mov	sp,fp
    c150:	dfc00117 	ldw	ra,4(sp)
    c154:	df000017 	ldw	fp,0(sp)
    c158:	dec00204 	addi	sp,sp,8
    c15c:	f800283a 	ret

0000c160 <alt_up_ps2_read_data_byte_timeout>:

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    c160:	defffa04 	addi	sp,sp,-24
    c164:	dfc00515 	stw	ra,20(sp)
    c168:	df000415 	stw	fp,16(sp)
    c16c:	df000404 	addi	fp,sp,16
    c170:	e13ffd15 	stw	r4,-12(fp)
    c174:	e17ffc15 	stw	r5,-16(fp)
	unsigned int data_reg = 0; 
    c178:	e03ffe15 	stw	zero,-8(fp)
	unsigned int count = 0;
    c17c:	e03fff15 	stw	zero,-4(fp)
	do {
		count++;
    c180:	e0bfff17 	ldw	r2,-4(fp)
    c184:	10800044 	addi	r2,r2,1
    c188:	e0bfff15 	stw	r2,-4(fp)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    c18c:	e0bffd17 	ldw	r2,-12(fp)
    c190:	10800a17 	ldw	r2,40(r2)
    c194:	10800037 	ldwio	r2,0(r2)
    c198:	e0bffe15 	stw	r2,-8(fp)
		if (read_data_valid(data_reg))
    c19c:	e13ffe17 	ldw	r4,-8(fp)
    c1a0:	000be3c0 	call	be3c <read_data_valid>
    c1a4:	10803fcc 	andi	r2,r2,255
    c1a8:	10000726 	beq	r2,zero,c1c8 <alt_up_ps2_read_data_byte_timeout+0x68>
		{
			*byte = read_data_byte(data_reg);
    c1ac:	e13ffe17 	ldw	r4,-8(fp)
    c1b0:	000be700 	call	be70 <read_data_byte>
    c1b4:	1007883a 	mov	r3,r2
    c1b8:	e0bffc17 	ldw	r2,-16(fp)
    c1bc:	10c00005 	stb	r3,0(r2)
			return 0;
    c1c0:	0005883a 	mov	r2,zero
    c1c4:	00000806 	br	c1e8 <alt_up_ps2_read_data_byte_timeout+0x88>
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
    c1c8:	e0bffd17 	ldw	r2,-12(fp)
    c1cc:	10800c17 	ldw	r2,48(r2)
    c1d0:	103feb26 	beq	r2,zero,c180 <alt_up_ps2_read_data_byte_timeout+0x20>
    c1d4:	e0bffd17 	ldw	r2,-12(fp)
    c1d8:	10c00c17 	ldw	r3,48(r2)
    c1dc:	e0bfff17 	ldw	r2,-4(fp)
    c1e0:	18bfe72e 	bgeu	r3,r2,c180 <alt_up_ps2_read_data_byte_timeout+0x20>
		{
			return -ETIMEDOUT;
    c1e4:	00bfe304 	movi	r2,-116
		}
	} while (1);
}
    c1e8:	e037883a 	mov	sp,fp
    c1ec:	dfc00117 	ldw	ra,4(sp)
    c1f0:	df000017 	ldw	fp,0(sp)
    c1f4:	dec00204 	addi	sp,sp,8
    c1f8:	f800283a 	ret

0000c1fc <alt_up_ps2_read_data_byte>:

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    c1fc:	defffb04 	addi	sp,sp,-20
    c200:	dfc00415 	stw	ra,16(sp)
    c204:	df000315 	stw	fp,12(sp)
    c208:	df000304 	addi	fp,sp,12
    c20c:	e13ffe15 	stw	r4,-8(fp)
    c210:	e17ffd15 	stw	r5,-12(fp)
	unsigned int data_reg = 0; 
    c214:	e03fff15 	stw	zero,-4(fp)
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    c218:	e0bffe17 	ldw	r2,-8(fp)
    c21c:	10800a17 	ldw	r2,40(r2)
    c220:	10800037 	ldwio	r2,0(r2)
    c224:	e0bfff15 	stw	r2,-4(fp)
	if (read_data_valid(data_reg))
    c228:	e13fff17 	ldw	r4,-4(fp)
    c22c:	000be3c0 	call	be3c <read_data_valid>
    c230:	10803fcc 	andi	r2,r2,255
    c234:	10000726 	beq	r2,zero,c254 <alt_up_ps2_read_data_byte+0x58>
	{
		*byte = read_data_byte(data_reg);
    c238:	e13fff17 	ldw	r4,-4(fp)
    c23c:	000be700 	call	be70 <read_data_byte>
    c240:	1007883a 	mov	r3,r2
    c244:	e0bffd17 	ldw	r2,-12(fp)
    c248:	10c00005 	stb	r3,0(r2)
		return 0;
    c24c:	0005883a 	mov	r2,zero
    c250:	00000106 	br	c258 <alt_up_ps2_read_data_byte+0x5c>
	}
	return -1;
    c254:	00bfffc4 	movi	r2,-1
}
    c258:	e037883a 	mov	sp,fp
    c25c:	dfc00117 	ldw	ra,4(sp)
    c260:	df000017 	ldw	fp,0(sp)
    c264:	dec00204 	addi	sp,sp,8
    c268:	f800283a 	ret

0000c26c <alt_up_ps2_clear_fifo>:

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
    c26c:	defffb04 	addi	sp,sp,-20
    c270:	dfc00415 	stw	ra,16(sp)
    c274:	df000315 	stw	fp,12(sp)
    c278:	df000304 	addi	fp,sp,12
    c27c:	e13ffd15 	stw	r4,-12(fp)
	// The DATA byte of the data register will be automatically cleared after a read
	// So we simply keep reading it until there are no available bytes
	alt_u16 num = 0;
    c280:	e03fff8d 	sth	zero,-2(fp)
	unsigned int data_reg = 0;
    c284:	e03ffe15 	stw	zero,-8(fp)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    c288:	e0bffd17 	ldw	r2,-12(fp)
    c28c:	10800a17 	ldw	r2,40(r2)
    c290:	10800037 	ldwio	r2,0(r2)
    c294:	e0bffe15 	stw	r2,-8(fp)
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
    c298:	e13ffe17 	ldw	r4,-8(fp)
    c29c:	000be0c0 	call	be0c <read_num_bytes_available>
    c2a0:	e0bfff8d 	sth	r2,-2(fp)
	} while (num > 0);
    c2a4:	e0bfff8b 	ldhu	r2,-2(fp)
    c2a8:	103ff71e 	bne	r2,zero,c288 <alt_up_ps2_clear_fifo+0x1c>
}
    c2ac:	0001883a 	nop
    c2b0:	0001883a 	nop
    c2b4:	e037883a 	mov	sp,fp
    c2b8:	dfc00117 	ldw	ra,4(sp)
    c2bc:	df000017 	ldw	fp,0(sp)
    c2c0:	dec00204 	addi	sp,sp,8
    c2c4:	f800283a 	ret

0000c2c8 <alt_up_ps2_read_fd>:

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
    c2c8:	defff804 	addi	sp,sp,-32
    c2cc:	dfc00715 	stw	ra,28(sp)
    c2d0:	df000615 	stw	fp,24(sp)
    c2d4:	df000604 	addi	fp,sp,24
    c2d8:	e13ffc15 	stw	r4,-16(fp)
    c2dc:	e17ffb15 	stw	r5,-20(fp)
    c2e0:	e1bffa15 	stw	r6,-24(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    c2e4:	e0bffc17 	ldw	r2,-16(fp)
    c2e8:	10800017 	ldw	r2,0(r2)
    c2ec:	e0bfff15 	stw	r2,-4(fp)
	int status = 0;
    c2f0:	e03ffe15 	stw	zero,-8(fp)
	int count = 0;
    c2f4:	e03ffd15 	stw	zero,-12(fp)
	while (count < len);
    c2f8:	e0fffd17 	ldw	r3,-12(fp)
    c2fc:	e0bffa17 	ldw	r2,-24(fp)
    c300:	18bffd16 	blt	r3,r2,c2f8 <alt_up_ps2_read_fd+0x30>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, (unsigned char *)ptr++);
    c304:	e0bffb17 	ldw	r2,-20(fp)
    c308:	10c00044 	addi	r3,r2,1
    c30c:	e0fffb15 	stw	r3,-20(fp)
    c310:	100b883a 	mov	r5,r2
    c314:	e13fff17 	ldw	r4,-4(fp)
    c318:	000c1600 	call	c160 <alt_up_ps2_read_data_byte_timeout>
    c31c:	e0bffe15 	stw	r2,-8(fp)
		if (status!=0)
    c320:	e0bffe17 	ldw	r2,-8(fp)
    c324:	10000226 	beq	r2,zero,c330 <alt_up_ps2_read_fd+0x68>
			return count;
    c328:	e0bffd17 	ldw	r2,-12(fp)
    c32c:	00000406 	br	c340 <alt_up_ps2_read_fd+0x78>
		count++;
    c330:	e0bffd17 	ldw	r2,-12(fp)
    c334:	10800044 	addi	r2,r2,1
    c338:	e0bffd15 	stw	r2,-12(fp)
	} 
	return count;
    c33c:	e0bffd17 	ldw	r2,-12(fp)
}
    c340:	e037883a 	mov	sp,fp
    c344:	dfc00117 	ldw	ra,4(sp)
    c348:	df000017 	ldw	fp,0(sp)
    c34c:	dec00204 	addi	sp,sp,8
    c350:	f800283a 	ret

0000c354 <alt_up_ps2_write_fd>:

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
    c354:	defff804 	addi	sp,sp,-32
    c358:	dfc00715 	stw	ra,28(sp)
    c35c:	df000615 	stw	fp,24(sp)
    c360:	df000604 	addi	fp,sp,24
    c364:	e13ffc15 	stw	r4,-16(fp)
    c368:	e17ffb15 	stw	r5,-20(fp)
    c36c:	e1bffa15 	stw	r6,-24(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    c370:	e0bffc17 	ldw	r2,-16(fp)
    c374:	10800017 	ldw	r2,0(r2)
    c378:	e0bffe15 	stw	r2,-8(fp)
	int status = 0;
    c37c:	e03ffd15 	stw	zero,-12(fp)
	int count = 0;
    c380:	e03fff15 	stw	zero,-4(fp)
	while (count < len)
    c384:	00001006 	br	c3c8 <alt_up_ps2_write_fd+0x74>
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
    c388:	e0bffb17 	ldw	r2,-20(fp)
    c38c:	10c00044 	addi	r3,r2,1
    c390:	e0fffb15 	stw	r3,-20(fp)
    c394:	10800003 	ldbu	r2,0(r2)
    c398:	10803fcc 	andi	r2,r2,255
    c39c:	100b883a 	mov	r5,r2
    c3a0:	e13ffe17 	ldw	r4,-8(fp)
    c3a4:	000c0200 	call	c020 <alt_up_ps2_write_data_byte>
    c3a8:	e0bffd15 	stw	r2,-12(fp)
		if (status!=0)
    c3ac:	e0bffd17 	ldw	r2,-12(fp)
    c3b0:	10000226 	beq	r2,zero,c3bc <alt_up_ps2_write_fd+0x68>
			return count;
    c3b4:	e0bfff17 	ldw	r2,-4(fp)
    c3b8:	00000706 	br	c3d8 <alt_up_ps2_write_fd+0x84>
		count++;
    c3bc:	e0bfff17 	ldw	r2,-4(fp)
    c3c0:	10800044 	addi	r2,r2,1
    c3c4:	e0bfff15 	stw	r2,-4(fp)
	while (count < len)
    c3c8:	e0ffff17 	ldw	r3,-4(fp)
    c3cc:	e0bffa17 	ldw	r2,-24(fp)
    c3d0:	18bfed16 	blt	r3,r2,c388 <alt_up_ps2_write_fd+0x34>
	}
	return count;
    c3d4:	e0bfff17 	ldw	r2,-4(fp)
}
    c3d8:	e037883a 	mov	sp,fp
    c3dc:	dfc00117 	ldw	ra,4(sp)
    c3e0:	df000017 	ldw	fp,0(sp)
    c3e4:	dec00204 	addi	sp,sp,8
    c3e8:	f800283a 	ret

0000c3ec <alt_up_ps2_open_dev>:

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
    c3ec:	defffc04 	addi	sp,sp,-16
    c3f0:	dfc00315 	stw	ra,12(sp)
    c3f4:	df000215 	stw	fp,8(sp)
    c3f8:	df000204 	addi	fp,sp,8
    c3fc:	e13ffe15 	stw	r4,-8(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
    c400:	d1602804 	addi	r5,gp,-32608
    c404:	e13ffe17 	ldw	r4,-8(fp)
    c408:	000cbf00 	call	cbf0 <alt_find_dev>
    c40c:	e0bfff15 	stw	r2,-4(fp)

  return dev;
    c410:	e0bfff17 	ldw	r2,-4(fp)
}
    c414:	e037883a 	mov	sp,fp
    c418:	dfc00117 	ldw	ra,4(sp)
    c41c:	df000017 	ldw	fp,0(sp)
    c420:	dec00204 	addi	sp,sp,8
    c424:	f800283a 	ret

0000c428 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
    c428:	defffd04 	addi	sp,sp,-12
    c42c:	df000215 	stw	fp,8(sp)
    c430:	df000204 	addi	fp,sp,8
    c434:	e13ffe15 	stw	r4,-8(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    c438:	e0bffe17 	ldw	r2,-8(fp)
    c43c:	10800a17 	ldw	r2,40(r2)
    c440:	10800104 	addi	r2,r2,4
    c444:	10800037 	ldwio	r2,0(r2)
    c448:	e0bfff15 	stw	r2,-4(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
    c44c:	e0bfff17 	ldw	r2,-4(fp)
    c450:	10800054 	ori	r2,r2,1
    c454:	e0bfff15 	stw	r2,-4(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    c458:	e0bffe17 	ldw	r2,-8(fp)
    c45c:	10800a17 	ldw	r2,40(r2)
    c460:	10800104 	addi	r2,r2,4
    c464:	1007883a 	mov	r3,r2
    c468:	e0bfff17 	ldw	r2,-4(fp)
    c46c:	18800035 	stwio	r2,0(r3)
}
    c470:	0001883a 	nop
    c474:	e037883a 	mov	sp,fp
    c478:	df000017 	ldw	fp,0(sp)
    c47c:	dec00104 	addi	sp,sp,4
    c480:	f800283a 	ret

0000c484 <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
    c484:	defffd04 	addi	sp,sp,-12
    c488:	df000215 	stw	fp,8(sp)
    c48c:	df000204 	addi	fp,sp,8
    c490:	e13ffe15 	stw	r4,-8(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    c494:	e0bffe17 	ldw	r2,-8(fp)
    c498:	10800a17 	ldw	r2,40(r2)
    c49c:	10800104 	addi	r2,r2,4
    c4a0:	10800037 	ldwio	r2,0(r2)
    c4a4:	e0bfff15 	stw	r2,-4(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
    c4a8:	e0ffff17 	ldw	r3,-4(fp)
    c4ac:	00bfff84 	movi	r2,-2
    c4b0:	1884703a 	and	r2,r3,r2
    c4b4:	e0bfff15 	stw	r2,-4(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    c4b8:	e0bffe17 	ldw	r2,-8(fp)
    c4bc:	10800a17 	ldw	r2,40(r2)
    c4c0:	10800104 	addi	r2,r2,4
    c4c4:	1007883a 	mov	r3,r2
    c4c8:	e0bfff17 	ldw	r2,-4(fp)
    c4cc:	18800035 	stwio	r2,0(r3)
}
    c4d0:	0001883a 	nop
    c4d4:	e037883a 	mov	sp,fp
    c4d8:	df000017 	ldw	fp,0(sp)
    c4dc:	dec00104 	addi	sp,sp,4
    c4e0:	f800283a 	ret

0000c4e4 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
    c4e4:	defffd04 	addi	sp,sp,-12
    c4e8:	df000215 	stw	fp,8(sp)
    c4ec:	df000204 	addi	fp,sp,8
    c4f0:	e13ffe15 	stw	r4,-8(fp)
	alt_u16 ravail = 0;
    c4f4:	e03fff8d 	sth	zero,-2(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
    c4f8:	e0bffe17 	ldw	r2,-8(fp)
    c4fc:	10800a17 	ldw	r2,40(r2)
    c500:	10800084 	addi	r2,r2,2
    c504:	1080002b 	ldhuio	r2,0(r2)
    c508:	10bfffcc 	andi	r2,r2,65535
    c50c:	e0bfff8d 	sth	r2,-2(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
    c510:	e0bfff8b 	ldhu	r2,-2(fp)
}
    c514:	e037883a 	mov	sp,fp
    c518:	df000017 	ldw	fp,0(sp)
    c51c:	dec00104 	addi	sp,sp,4
    c520:	f800283a 	ret

0000c524 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
    c524:	defffd04 	addi	sp,sp,-12
    c528:	df000215 	stw	fp,8(sp)
    c52c:	df000204 	addi	fp,sp,8
    c530:	e13ffe15 	stw	r4,-8(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    c534:	e0bffe17 	ldw	r2,-8(fp)
    c538:	10800a17 	ldw	r2,40(r2)
    c53c:	10800104 	addi	r2,r2,4
    c540:	10800037 	ldwio	r2,0(r2)
    c544:	e0bfff15 	stw	r2,-4(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
    c548:	e0bfff17 	ldw	r2,-4(fp)
    c54c:	1004d43a 	srli	r2,r2,16
}
    c550:	e037883a 	mov	sp,fp
    c554:	df000017 	ldw	fp,0(sp)
    c558:	dec00104 	addi	sp,sp,4
    c55c:	f800283a 	ret

0000c560 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
    c560:	defffd04 	addi	sp,sp,-12
    c564:	df000215 	stw	fp,8(sp)
    c568:	df000204 	addi	fp,sp,8
    c56c:	e13ffe15 	stw	r4,-8(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
    c570:	e0bffe17 	ldw	r2,-8(fp)
    c574:	1004d27a 	srli	r2,r2,9
    c578:	1080004c 	andi	r2,r2,1
    c57c:	e0bfff15 	stw	r2,-4(fp)
	return (parity_error ? -1 : 0);
    c580:	e0bfff17 	ldw	r2,-4(fp)
    c584:	10000226 	beq	r2,zero,c590 <alt_up_rs232_check_parity+0x30>
    c588:	00bfffc4 	movi	r2,-1
    c58c:	00000106 	br	c594 <alt_up_rs232_check_parity+0x34>
    c590:	0005883a 	mov	r2,zero
}
    c594:	e037883a 	mov	sp,fp
    c598:	df000017 	ldw	fp,0(sp)
    c59c:	dec00104 	addi	sp,sp,4
    c5a0:	f800283a 	ret

0000c5a4 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
    c5a4:	defffd04 	addi	sp,sp,-12
    c5a8:	df000215 	stw	fp,8(sp)
    c5ac:	df000204 	addi	fp,sp,8
    c5b0:	e13fff15 	stw	r4,-4(fp)
    c5b4:	2805883a 	mov	r2,r5
    c5b8:	e0bffe05 	stb	r2,-8(fp)
	/*alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);*/
    
	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
    c5bc:	e0bfff17 	ldw	r2,-4(fp)
    c5c0:	10800a17 	ldw	r2,40(r2)
    c5c4:	1007883a 	mov	r3,r2
    c5c8:	e0bffe03 	ldbu	r2,-8(fp)
    c5cc:	18800035 	stwio	r2,0(r3)
	return 0;
    c5d0:	0005883a 	mov	r2,zero
}
    c5d4:	e037883a 	mov	sp,fp
    c5d8:	df000017 	ldw	fp,0(sp)
    c5dc:	dec00104 	addi	sp,sp,4
    c5e0:	f800283a 	ret

0000c5e4 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
    c5e4:	defffa04 	addi	sp,sp,-24
    c5e8:	dfc00515 	stw	ra,20(sp)
    c5ec:	df000415 	stw	fp,16(sp)
    c5f0:	df000404 	addi	fp,sp,16
    c5f4:	e13ffe15 	stw	r4,-8(fp)
    c5f8:	e17ffd15 	stw	r5,-12(fp)
    c5fc:	e1bffc15 	stw	r6,-16(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
    c600:	e0bffe17 	ldw	r2,-8(fp)
    c604:	10800a17 	ldw	r2,40(r2)
    c608:	10800037 	ldwio	r2,0(r2)
    c60c:	e0bfff15 	stw	r2,-4(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
    c610:	e0bfff17 	ldw	r2,-4(fp)
    c614:	1007883a 	mov	r3,r2
    c618:	e0bffd17 	ldw	r2,-12(fp)
    c61c:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
    c620:	e13fff17 	ldw	r4,-4(fp)
    c624:	000c5600 	call	c560 <alt_up_rs232_check_parity>
    c628:	1007883a 	mov	r3,r2
    c62c:	e0bffc17 	ldw	r2,-16(fp)
    c630:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
    c634:	e0bfff17 	ldw	r2,-4(fp)
    c638:	1004d3fa 	srli	r2,r2,15
    c63c:	1080004c 	andi	r2,r2,1
    c640:	10bfffc4 	addi	r2,r2,-1
}
    c644:	e037883a 	mov	sp,fp
    c648:	dfc00117 	ldw	ra,4(sp)
    c64c:	df000017 	ldw	fp,0(sp)
    c650:	dec00204 	addi	sp,sp,8
    c654:	f800283a 	ret

0000c658 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
    c658:	defff804 	addi	sp,sp,-32
    c65c:	dfc00715 	stw	ra,28(sp)
    c660:	df000615 	stw	fp,24(sp)
    c664:	df000604 	addi	fp,sp,24
    c668:	e13ffc15 	stw	r4,-16(fp)
    c66c:	e17ffb15 	stw	r5,-20(fp)
    c670:	e1bffa15 	stw	r6,-24(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    c674:	e0bffc17 	ldw	r2,-16(fp)
    c678:	10800017 	ldw	r2,0(r2)
    c67c:	e0bffe15 	stw	r2,-8(fp)
	int count = 0;
    c680:	e03fff15 	stw	zero,-4(fp)
	alt_u8 parity_error;
	while(len--)
    c684:	00000c06 	br	c6b8 <alt_up_rs232_read_fd+0x60>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
    c688:	e0bffb17 	ldw	r2,-20(fp)
    c68c:	10c00044 	addi	r3,r2,1
    c690:	e0fffb15 	stw	r3,-20(fp)
    c694:	e0fffdc4 	addi	r3,fp,-9
    c698:	180d883a 	mov	r6,r3
    c69c:	100b883a 	mov	r5,r2
    c6a0:	e13ffe17 	ldw	r4,-8(fp)
    c6a4:	000c5e40 	call	c5e4 <alt_up_rs232_read_data>
    c6a8:	1000081e 	bne	r2,zero,c6cc <alt_up_rs232_read_fd+0x74>
			count++;
    c6ac:	e0bfff17 	ldw	r2,-4(fp)
    c6b0:	10800044 	addi	r2,r2,1
    c6b4:	e0bfff15 	stw	r2,-4(fp)
	while(len--)
    c6b8:	e0bffa17 	ldw	r2,-24(fp)
    c6bc:	10ffffc4 	addi	r3,r2,-1
    c6c0:	e0fffa15 	stw	r3,-24(fp)
    c6c4:	103ff01e 	bne	r2,zero,c688 <alt_up_rs232_read_fd+0x30>
    c6c8:	00000106 	br	c6d0 <alt_up_rs232_read_fd+0x78>
		else
			break;
    c6cc:	0001883a 	nop
	}
	return count;
    c6d0:	e0bfff17 	ldw	r2,-4(fp)
}
    c6d4:	e037883a 	mov	sp,fp
    c6d8:	dfc00117 	ldw	ra,4(sp)
    c6dc:	df000017 	ldw	fp,0(sp)
    c6e0:	dec00204 	addi	sp,sp,8
    c6e4:	f800283a 	ret

0000c6e8 <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
    c6e8:	defff904 	addi	sp,sp,-28
    c6ec:	dfc00615 	stw	ra,24(sp)
    c6f0:	df000515 	stw	fp,20(sp)
    c6f4:	df000504 	addi	fp,sp,20
    c6f8:	e13ffd15 	stw	r4,-12(fp)
    c6fc:	e17ffc15 	stw	r5,-16(fp)
    c700:	e1bffb15 	stw	r6,-20(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    c704:	e0bffd17 	ldw	r2,-12(fp)
    c708:	10800017 	ldw	r2,0(r2)
    c70c:	e0bffe15 	stw	r2,-8(fp)
	int count = 0;
    c710:	e03fff15 	stw	zero,-4(fp)
	while(len--)
    c714:	00000d06 	br	c74c <alt_up_rs232_write_fd+0x64>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
    c718:	e0bffc17 	ldw	r2,-16(fp)
    c71c:	10800003 	ldbu	r2,0(r2)
    c720:	10803fcc 	andi	r2,r2,255
    c724:	100b883a 	mov	r5,r2
    c728:	e13ffe17 	ldw	r4,-8(fp)
    c72c:	000c5a40 	call	c5a4 <alt_up_rs232_write_data>
    c730:	10000b1e 	bne	r2,zero,c760 <alt_up_rs232_write_fd+0x78>
		{
			count++;
    c734:	e0bfff17 	ldw	r2,-4(fp)
    c738:	10800044 	addi	r2,r2,1
    c73c:	e0bfff15 	stw	r2,-4(fp)
			ptr++;
    c740:	e0bffc17 	ldw	r2,-16(fp)
    c744:	10800044 	addi	r2,r2,1
    c748:	e0bffc15 	stw	r2,-16(fp)
	while(len--)
    c74c:	e0bffb17 	ldw	r2,-20(fp)
    c750:	10ffffc4 	addi	r3,r2,-1
    c754:	e0fffb15 	stw	r3,-20(fp)
    c758:	103fef1e 	bne	r2,zero,c718 <alt_up_rs232_write_fd+0x30>
    c75c:	00000106 	br	c764 <alt_up_rs232_write_fd+0x7c>
		}
		else
			break;
    c760:	0001883a 	nop
	}
	return count;
    c764:	e0bfff17 	ldw	r2,-4(fp)
}
    c768:	e037883a 	mov	sp,fp
    c76c:	dfc00117 	ldw	ra,4(sp)
    c770:	df000017 	ldw	fp,0(sp)
    c774:	dec00204 	addi	sp,sp,8
    c778:	f800283a 	ret

0000c77c <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
    c77c:	defffc04 	addi	sp,sp,-16
    c780:	dfc00315 	stw	ra,12(sp)
    c784:	df000215 	stw	fp,8(sp)
    c788:	df000204 	addi	fp,sp,8
    c78c:	e13ffe15 	stw	r4,-8(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
    c790:	d1602804 	addi	r5,gp,-32608
    c794:	e13ffe17 	ldw	r4,-8(fp)
    c798:	000cbf00 	call	cbf0 <alt_find_dev>
    c79c:	e0bfff15 	stw	r2,-4(fp)

  return dev;
    c7a0:	e0bfff17 	ldw	r2,-4(fp)
}
    c7a4:	e037883a 	mov	sp,fp
    c7a8:	dfc00117 	ldw	ra,4(sp)
    c7ac:	df000017 	ldw	fp,0(sp)
    c7b0:	dec00204 	addi	sp,sp,8
    c7b4:	f800283a 	ret

0000c7b8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    c7b8:	defff504 	addi	sp,sp,-44
    c7bc:	df000a15 	stw	fp,40(sp)
    c7c0:	df000a04 	addi	fp,sp,40
    c7c4:	e13ff915 	stw	r4,-28(fp)
    c7c8:	e17ff815 	stw	r5,-32(fp)
    c7cc:	e1bff715 	stw	r6,-36(fp)
    c7d0:	e1fff615 	stw	r7,-40(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    c7d4:	e03fff15 	stw	zero,-4(fp)
  return _alt_tick_rate;
    c7d8:	d0a6f117 	ldw	r2,-25660(gp)
  
  if (alt_ticks_per_second ())
    c7dc:	10003e26 	beq	r2,zero,c8d8 <alt_alarm_start+0x120>
  {
    if (alarm)
    c7e0:	e0bff917 	ldw	r2,-28(fp)
    c7e4:	10003a26 	beq	r2,zero,c8d0 <alt_alarm_start+0x118>
    {
      alarm->callback = callback;
    c7e8:	e0bff917 	ldw	r2,-28(fp)
    c7ec:	e0fff717 	ldw	r3,-36(fp)
    c7f0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    c7f4:	e0bff917 	ldw	r2,-28(fp)
    c7f8:	e0fff617 	ldw	r3,-40(fp)
    c7fc:	10c00515 	stw	r3,20(r2)
  NIOS2_READ_STATUS (context);
    c800:	0005303a 	rdctl	r2,status
    c804:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c808:	e0fffd17 	ldw	r3,-12(fp)
    c80c:	00bfff84 	movi	r2,-2
    c810:	1884703a 	and	r2,r3,r2
    c814:	1001703a 	wrctl	status,r2
  return context;
    c818:	e0bffd17 	ldw	r2,-12(fp)
 
      irq_context = alt_irq_disable_all ();
    c81c:	e0bffe15 	stw	r2,-8(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    c820:	d0a6f217 	ldw	r2,-25656(gp)
      
      current_nticks = alt_nticks();
    c824:	e0bfff15 	stw	r2,-4(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    c828:	e0fff817 	ldw	r3,-32(fp)
    c82c:	e0bfff17 	ldw	r2,-4(fp)
    c830:	1885883a 	add	r2,r3,r2
    c834:	10c00044 	addi	r3,r2,1
    c838:	e0bff917 	ldw	r2,-28(fp)
    c83c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    c840:	e0bff917 	ldw	r2,-28(fp)
    c844:	10c00217 	ldw	r3,8(r2)
    c848:	e0bfff17 	ldw	r2,-4(fp)
    c84c:	1880042e 	bgeu	r3,r2,c860 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
    c850:	e0bff917 	ldw	r2,-28(fp)
    c854:	00c00044 	movi	r3,1
    c858:	10c00405 	stb	r3,16(r2)
    c85c:	00000206 	br	c868 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
    c860:	e0bff917 	ldw	r2,-28(fp)
    c864:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    c868:	e0bff917 	ldw	r2,-28(fp)
    c86c:	d0e02d04 	addi	r3,gp,-32588
    c870:	e0fffb15 	stw	r3,-20(fp)
    c874:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    c878:	e0bffa17 	ldw	r2,-24(fp)
    c87c:	e0fffb17 	ldw	r3,-20(fp)
    c880:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    c884:	e0bffb17 	ldw	r2,-20(fp)
    c888:	10c00017 	ldw	r3,0(r2)
    c88c:	e0bffa17 	ldw	r2,-24(fp)
    c890:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    c894:	e0bffb17 	ldw	r2,-20(fp)
    c898:	10800017 	ldw	r2,0(r2)
    c89c:	e0fffa17 	ldw	r3,-24(fp)
    c8a0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    c8a4:	e0bffb17 	ldw	r2,-20(fp)
    c8a8:	e0fffa17 	ldw	r3,-24(fp)
    c8ac:	10c00015 	stw	r3,0(r2)
}
    c8b0:	0001883a 	nop
    c8b4:	e0bffe17 	ldw	r2,-8(fp)
    c8b8:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    c8bc:	e0bffc17 	ldw	r2,-16(fp)
    c8c0:	1001703a 	wrctl	status,r2
}
    c8c4:	0001883a 	nop
      alt_irq_enable_all (irq_context);

      return 0;
    c8c8:	0005883a 	mov	r2,zero
    c8cc:	00000306 	br	c8dc <alt_alarm_start+0x124>
    }
    else
    {
      return -EINVAL;
    c8d0:	00bffa84 	movi	r2,-22
    c8d4:	00000106 	br	c8dc <alt_alarm_start+0x124>
    }
  }
  else
  {
    return -ENOTSUP;
    c8d8:	00bfde84 	movi	r2,-134
  }
}
    c8dc:	e037883a 	mov	sp,fp
    c8e0:	df000017 	ldw	fp,0(sp)
    c8e4:	dec00104 	addi	sp,sp,4
    c8e8:	f800283a 	ret

0000c8ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    c8ec:	defffe04 	addi	sp,sp,-8
    c8f0:	dfc00115 	stw	ra,4(sp)
    c8f4:	df000015 	stw	fp,0(sp)
    c8f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    c8fc:	d0a02b17 	ldw	r2,-32596(gp)
    c900:	10000326 	beq	r2,zero,c910 <alt_get_errno+0x24>
    c904:	d0a02b17 	ldw	r2,-32596(gp)
    c908:	103ee83a 	callr	r2
    c90c:	00000106 	br	c914 <alt_get_errno+0x28>
    c910:	d0a6f404 	addi	r2,gp,-25648
}
    c914:	e037883a 	mov	sp,fp
    c918:	dfc00117 	ldw	ra,4(sp)
    c91c:	df000017 	ldw	fp,0(sp)
    c920:	dec00204 	addi	sp,sp,8
    c924:	f800283a 	ret

0000c928 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    c928:	defffb04 	addi	sp,sp,-20
    c92c:	dfc00415 	stw	ra,16(sp)
    c930:	df000315 	stw	fp,12(sp)
    c934:	df000304 	addi	fp,sp,12
    c938:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    c93c:	e0bffd17 	ldw	r2,-12(fp)
    c940:	10000616 	blt	r2,zero,c95c <close+0x34>
    c944:	e0bffd17 	ldw	r2,-12(fp)
    c948:	10c00324 	muli	r3,r2,12
    c94c:	00800074 	movhi	r2,1
    c950:	10bda204 	addi	r2,r2,-2424
    c954:	1885883a 	add	r2,r3,r2
    c958:	00000106 	br	c960 <close+0x38>
    c95c:	0005883a 	mov	r2,zero
    c960:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
    c964:	e0bfff17 	ldw	r2,-4(fp)
    c968:	10001926 	beq	r2,zero,c9d0 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    c96c:	e0bfff17 	ldw	r2,-4(fp)
    c970:	10800017 	ldw	r2,0(r2)
    c974:	10800417 	ldw	r2,16(r2)
    c978:	10000626 	beq	r2,zero,c994 <close+0x6c>
    c97c:	e0bfff17 	ldw	r2,-4(fp)
    c980:	10800017 	ldw	r2,0(r2)
    c984:	10800417 	ldw	r2,16(r2)
    c988:	e13fff17 	ldw	r4,-4(fp)
    c98c:	103ee83a 	callr	r2
    c990:	00000106 	br	c998 <close+0x70>
    c994:	0005883a 	mov	r2,zero
    c998:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    c99c:	e13ffd17 	ldw	r4,-12(fp)
    c9a0:	000d1a80 	call	d1a8 <alt_release_fd>
    if (rval < 0)
    c9a4:	e0bffe17 	ldw	r2,-8(fp)
    c9a8:	1000070e 	bge	r2,zero,c9c8 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    c9ac:	000c8ec0 	call	c8ec <alt_get_errno>
    c9b0:	1007883a 	mov	r3,r2
    c9b4:	e0bffe17 	ldw	r2,-8(fp)
    c9b8:	0085c83a 	sub	r2,zero,r2
    c9bc:	18800015 	stw	r2,0(r3)
      return -1;
    c9c0:	00bfffc4 	movi	r2,-1
    c9c4:	00000706 	br	c9e4 <close+0xbc>
    }
    return 0;
    c9c8:	0005883a 	mov	r2,zero
    c9cc:	00000506 	br	c9e4 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    c9d0:	000c8ec0 	call	c8ec <alt_get_errno>
    c9d4:	1007883a 	mov	r3,r2
    c9d8:	00801444 	movi	r2,81
    c9dc:	18800015 	stw	r2,0(r3)
    return -1;
    c9e0:	00bfffc4 	movi	r2,-1
  }
}
    c9e4:	e037883a 	mov	sp,fp
    c9e8:	dfc00117 	ldw	ra,4(sp)
    c9ec:	df000017 	ldw	fp,0(sp)
    c9f0:	dec00204 	addi	sp,sp,8
    c9f4:	f800283a 	ret

0000c9f8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    c9f8:	deffff04 	addi	sp,sp,-4
    c9fc:	df000015 	stw	fp,0(sp)
    ca00:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    ca04:	0001883a 	nop
    ca08:	e037883a 	mov	sp,fp
    ca0c:	df000017 	ldw	fp,0(sp)
    ca10:	dec00104 	addi	sp,sp,4
    ca14:	f800283a 	ret

0000ca18 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    ca18:	defffc04 	addi	sp,sp,-16
    ca1c:	df000315 	stw	fp,12(sp)
    ca20:	df000304 	addi	fp,sp,12
    ca24:	e13fff15 	stw	r4,-4(fp)
    ca28:	e17ffe15 	stw	r5,-8(fp)
    ca2c:	e1bffd15 	stw	r6,-12(fp)
  return len;
    ca30:	e0bffd17 	ldw	r2,-12(fp)
}
    ca34:	e037883a 	mov	sp,fp
    ca38:	df000017 	ldw	fp,0(sp)
    ca3c:	dec00104 	addi	sp,sp,4
    ca40:	f800283a 	ret

0000ca44 <alt_get_errno>:
{
    ca44:	defffe04 	addi	sp,sp,-8
    ca48:	dfc00115 	stw	ra,4(sp)
    ca4c:	df000015 	stw	fp,0(sp)
    ca50:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ca54:	d0a02b17 	ldw	r2,-32596(gp)
    ca58:	10000326 	beq	r2,zero,ca68 <alt_get_errno+0x24>
    ca5c:	d0a02b17 	ldw	r2,-32596(gp)
    ca60:	103ee83a 	callr	r2
    ca64:	00000106 	br	ca6c <alt_get_errno+0x28>
    ca68:	d0a6f404 	addi	r2,gp,-25648
}
    ca6c:	e037883a 	mov	sp,fp
    ca70:	dfc00117 	ldw	ra,4(sp)
    ca74:	df000017 	ldw	fp,0(sp)
    ca78:	dec00204 	addi	sp,sp,8
    ca7c:	f800283a 	ret

0000ca80 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    ca80:	defffa04 	addi	sp,sp,-24
    ca84:	dfc00515 	stw	ra,20(sp)
    ca88:	df000415 	stw	fp,16(sp)
    ca8c:	df000404 	addi	fp,sp,16
    ca90:	e13ffd15 	stw	r4,-12(fp)
    ca94:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    ca98:	e0bffd17 	ldw	r2,-12(fp)
    ca9c:	10000326 	beq	r2,zero,caac <alt_dev_llist_insert+0x2c>
    caa0:	e0bffd17 	ldw	r2,-12(fp)
    caa4:	10800217 	ldw	r2,8(r2)
    caa8:	1000061e 	bne	r2,zero,cac4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    caac:	000ca440 	call	ca44 <alt_get_errno>
    cab0:	1007883a 	mov	r3,r2
    cab4:	00800584 	movi	r2,22
    cab8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    cabc:	00bffa84 	movi	r2,-22
    cac0:	00001406 	br	cb14 <alt_dev_llist_insert+0x94>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    cac4:	e0bffd17 	ldw	r2,-12(fp)
    cac8:	e0fffc17 	ldw	r3,-16(fp)
    cacc:	e0ffff15 	stw	r3,-4(fp)
    cad0:	e0bffe15 	stw	r2,-8(fp)
  entry->previous = list;
    cad4:	e0bffe17 	ldw	r2,-8(fp)
    cad8:	e0ffff17 	ldw	r3,-4(fp)
    cadc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    cae0:	e0bfff17 	ldw	r2,-4(fp)
    cae4:	10c00017 	ldw	r3,0(r2)
    cae8:	e0bffe17 	ldw	r2,-8(fp)
    caec:	10c00015 	stw	r3,0(r2)
  list->next->previous = entry;
    caf0:	e0bfff17 	ldw	r2,-4(fp)
    caf4:	10800017 	ldw	r2,0(r2)
    caf8:	e0fffe17 	ldw	r3,-8(fp)
    cafc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    cb00:	e0bfff17 	ldw	r2,-4(fp)
    cb04:	e0fffe17 	ldw	r3,-8(fp)
    cb08:	10c00015 	stw	r3,0(r2)
}
    cb0c:	0001883a 	nop

  return 0;  
    cb10:	0005883a 	mov	r2,zero
}
    cb14:	e037883a 	mov	sp,fp
    cb18:	dfc00117 	ldw	ra,4(sp)
    cb1c:	df000017 	ldw	fp,0(sp)
    cb20:	dec00204 	addi	sp,sp,8
    cb24:	f800283a 	ret

0000cb28 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    cb28:	defffd04 	addi	sp,sp,-12
    cb2c:	dfc00215 	stw	ra,8(sp)
    cb30:	df000115 	stw	fp,4(sp)
    cb34:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    cb38:	00800074 	movhi	r2,1
    cb3c:	10b7d304 	addi	r2,r2,-8372
    cb40:	e0bfff15 	stw	r2,-4(fp)
    cb44:	00000606 	br	cb60 <_do_ctors+0x38>
        (*ctor) (); 
    cb48:	e0bfff17 	ldw	r2,-4(fp)
    cb4c:	10800017 	ldw	r2,0(r2)
    cb50:	103ee83a 	callr	r2
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    cb54:	e0bfff17 	ldw	r2,-4(fp)
    cb58:	10bfff04 	addi	r2,r2,-4
    cb5c:	e0bfff15 	stw	r2,-4(fp)
    cb60:	e0ffff17 	ldw	r3,-4(fp)
    cb64:	00800074 	movhi	r2,1
    cb68:	10b7d404 	addi	r2,r2,-8368
    cb6c:	18bff62e 	bgeu	r3,r2,cb48 <_do_ctors+0x20>
}
    cb70:	0001883a 	nop
    cb74:	0001883a 	nop
    cb78:	e037883a 	mov	sp,fp
    cb7c:	dfc00117 	ldw	ra,4(sp)
    cb80:	df000017 	ldw	fp,0(sp)
    cb84:	dec00204 	addi	sp,sp,8
    cb88:	f800283a 	ret

0000cb8c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    cb8c:	defffd04 	addi	sp,sp,-12
    cb90:	dfc00215 	stw	ra,8(sp)
    cb94:	df000115 	stw	fp,4(sp)
    cb98:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    cb9c:	00800074 	movhi	r2,1
    cba0:	10b7d304 	addi	r2,r2,-8372
    cba4:	e0bfff15 	stw	r2,-4(fp)
    cba8:	00000606 	br	cbc4 <_do_dtors+0x38>
        (*dtor) (); 
    cbac:	e0bfff17 	ldw	r2,-4(fp)
    cbb0:	10800017 	ldw	r2,0(r2)
    cbb4:	103ee83a 	callr	r2
  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    cbb8:	e0bfff17 	ldw	r2,-4(fp)
    cbbc:	10bfff04 	addi	r2,r2,-4
    cbc0:	e0bfff15 	stw	r2,-4(fp)
    cbc4:	e0ffff17 	ldw	r3,-4(fp)
    cbc8:	00800074 	movhi	r2,1
    cbcc:	10b7d404 	addi	r2,r2,-8368
    cbd0:	18bff62e 	bgeu	r3,r2,cbac <_do_dtors+0x20>
}
    cbd4:	0001883a 	nop
    cbd8:	0001883a 	nop
    cbdc:	e037883a 	mov	sp,fp
    cbe0:	dfc00117 	ldw	ra,4(sp)
    cbe4:	df000017 	ldw	fp,0(sp)
    cbe8:	dec00204 	addi	sp,sp,8
    cbec:	f800283a 	ret

0000cbf0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    cbf0:	defffa04 	addi	sp,sp,-24
    cbf4:	dfc00515 	stw	ra,20(sp)
    cbf8:	df000415 	stw	fp,16(sp)
    cbfc:	df000404 	addi	fp,sp,16
    cc00:	e13ffd15 	stw	r4,-12(fp)
    cc04:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
    cc08:	e0bffc17 	ldw	r2,-16(fp)
    cc0c:	10800017 	ldw	r2,0(r2)
    cc10:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    cc14:	e13ffd17 	ldw	r4,-12(fp)
    cc18:	000dcd00 	call	dcd0 <strlen>
    cc1c:	10800044 	addi	r2,r2,1
    cc20:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    cc24:	00000d06 	br	cc5c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    cc28:	e0bfff17 	ldw	r2,-4(fp)
    cc2c:	10800217 	ldw	r2,8(r2)
    cc30:	e0fffe17 	ldw	r3,-8(fp)
    cc34:	180d883a 	mov	r6,r3
    cc38:	e17ffd17 	ldw	r5,-12(fp)
    cc3c:	1009883a 	mov	r4,r2
    cc40:	000da680 	call	da68 <memcmp>
    cc44:	1000021e 	bne	r2,zero,cc50 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    cc48:	e0bfff17 	ldw	r2,-4(fp)
    cc4c:	00000706 	br	cc6c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    cc50:	e0bfff17 	ldw	r2,-4(fp)
    cc54:	10800017 	ldw	r2,0(r2)
    cc58:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
    cc5c:	e0ffff17 	ldw	r3,-4(fp)
    cc60:	e0bffc17 	ldw	r2,-16(fp)
    cc64:	18bff01e 	bne	r3,r2,cc28 <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
    cc68:	0005883a 	mov	r2,zero
}
    cc6c:	e037883a 	mov	sp,fp
    cc70:	dfc00117 	ldw	ra,4(sp)
    cc74:	df000017 	ldw	fp,0(sp)
    cc78:	dec00204 	addi	sp,sp,8
    cc7c:	f800283a 	ret

0000cc80 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    cc80:	defffe04 	addi	sp,sp,-8
    cc84:	dfc00115 	stw	ra,4(sp)
    cc88:	df000015 	stw	fp,0(sp)
    cc8c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    cc90:	01440004 	movi	r5,4096
    cc94:	0009883a 	mov	r4,zero
    cc98:	000d8f80 	call	d8f8 <alt_icache_flush>
#endif
}
    cc9c:	0001883a 	nop
    cca0:	e037883a 	mov	sp,fp
    cca4:	dfc00117 	ldw	ra,4(sp)
    cca8:	df000017 	ldw	fp,0(sp)
    ccac:	dec00204 	addi	sp,sp,8
    ccb0:	f800283a 	ret

0000ccb4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    ccb4:	defff904 	addi	sp,sp,-28
    ccb8:	dfc00615 	stw	ra,24(sp)
    ccbc:	df000515 	stw	fp,20(sp)
    ccc0:	df000504 	addi	fp,sp,20
    ccc4:	e13ffe15 	stw	r4,-8(fp)
    ccc8:	e17ffd15 	stw	r5,-12(fp)
    cccc:	e1bffc15 	stw	r6,-16(fp)
    ccd0:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
    ccd4:	e1bffb17 	ldw	r6,-20(fp)
    ccd8:	e17ffc17 	ldw	r5,-16(fp)
    ccdc:	e13ffd17 	ldw	r4,-12(fp)
    cce0:	000d0540 	call	d054 <open>
    cce4:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
    cce8:	e0bfff17 	ldw	r2,-4(fp)
    ccec:	10001716 	blt	r2,zero,cd4c <alt_open_fd+0x98>
  {
    fd->dev      = alt_fd_list[old].dev;
    ccf0:	e0bfff17 	ldw	r2,-4(fp)
    ccf4:	10c00324 	muli	r3,r2,12
    ccf8:	00800074 	movhi	r2,1
    ccfc:	1885883a 	add	r2,r3,r2
    cd00:	10fda217 	ldw	r3,-2424(r2)
    cd04:	e0bffe17 	ldw	r2,-8(fp)
    cd08:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    cd0c:	e0bfff17 	ldw	r2,-4(fp)
    cd10:	10c00324 	muli	r3,r2,12
    cd14:	00800074 	movhi	r2,1
    cd18:	1885883a 	add	r2,r3,r2
    cd1c:	10fda317 	ldw	r3,-2420(r2)
    cd20:	e0bffe17 	ldw	r2,-8(fp)
    cd24:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    cd28:	e0bfff17 	ldw	r2,-4(fp)
    cd2c:	10c00324 	muli	r3,r2,12
    cd30:	00800074 	movhi	r2,1
    cd34:	1885883a 	add	r2,r3,r2
    cd38:	10fda417 	ldw	r3,-2416(r2)
    cd3c:	e0bffe17 	ldw	r2,-8(fp)
    cd40:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    cd44:	e13fff17 	ldw	r4,-4(fp)
    cd48:	000d1a80 	call	d1a8 <alt_release_fd>
  }
} 
    cd4c:	0001883a 	nop
    cd50:	e037883a 	mov	sp,fp
    cd54:	dfc00117 	ldw	ra,4(sp)
    cd58:	df000017 	ldw	fp,0(sp)
    cd5c:	dec00204 	addi	sp,sp,8
    cd60:	f800283a 	ret

0000cd64 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    cd64:	defffb04 	addi	sp,sp,-20
    cd68:	dfc00415 	stw	ra,16(sp)
    cd6c:	df000315 	stw	fp,12(sp)
    cd70:	df000304 	addi	fp,sp,12
    cd74:	e13fff15 	stw	r4,-4(fp)
    cd78:	e17ffe15 	stw	r5,-8(fp)
    cd7c:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    cd80:	01c07fc4 	movi	r7,511
    cd84:	01800044 	movi	r6,1
    cd88:	e17fff17 	ldw	r5,-4(fp)
    cd8c:	01000074 	movhi	r4,1
    cd90:	213da504 	addi	r4,r4,-2412
    cd94:	000ccb40 	call	ccb4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    cd98:	01c07fc4 	movi	r7,511
    cd9c:	000d883a 	mov	r6,zero
    cda0:	e17ffe17 	ldw	r5,-8(fp)
    cda4:	01000074 	movhi	r4,1
    cda8:	213da204 	addi	r4,r4,-2424
    cdac:	000ccb40 	call	ccb4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    cdb0:	01c07fc4 	movi	r7,511
    cdb4:	01800044 	movi	r6,1
    cdb8:	e17ffd17 	ldw	r5,-12(fp)
    cdbc:	01000074 	movhi	r4,1
    cdc0:	213da804 	addi	r4,r4,-2400
    cdc4:	000ccb40 	call	ccb4 <alt_open_fd>
}  
    cdc8:	0001883a 	nop
    cdcc:	e037883a 	mov	sp,fp
    cdd0:	dfc00117 	ldw	ra,4(sp)
    cdd4:	df000017 	ldw	fp,0(sp)
    cdd8:	dec00204 	addi	sp,sp,8
    cddc:	f800283a 	ret

0000cde0 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
    cde0:	defff004 	addi	sp,sp,-64
    cde4:	df000f15 	stw	fp,60(sp)
    cde8:	df000f04 	addi	fp,sp,60
    cdec:	e13ff315 	stw	r4,-52(fp)
    cdf0:	e17ff215 	stw	r5,-56(fp)
    cdf4:	e1bff115 	stw	r6,-60(fp)
  int rc = -EINVAL;  
    cdf8:	00bffa84 	movi	r2,-22
    cdfc:	e0bfff15 	stw	r2,-4(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    ce00:	e0bff317 	ldw	r2,-52(fp)
    ce04:	10800828 	cmpgeui	r2,r2,32
    ce08:	1000501e 	bne	r2,zero,cf4c <alt_irq_register+0x16c>
  NIOS2_READ_STATUS (context);
    ce0c:	0005303a 	rdctl	r2,status
    ce10:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ce14:	e0fffd17 	ldw	r3,-12(fp)
    ce18:	00bfff84 	movi	r2,-2
    ce1c:	1884703a 	and	r2,r3,r2
    ce20:	1001703a 	wrctl	status,r2
  return context;
    ce24:	e0bffd17 	ldw	r2,-12(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
    ce28:	e0bffe15 	stw	r2,-8(fp)

    alt_irq[id].handler = handler;
    ce2c:	e0bff317 	ldw	r2,-52(fp)
    ce30:	100890fa 	slli	r4,r2,3
    ce34:	e0fff117 	ldw	r3,-60(fp)
    ce38:	008000b4 	movhi	r2,2
    ce3c:	2085883a 	add	r2,r4,r2
    ce40:	10ea8915 	stw	r3,-21980(r2)
    alt_irq[id].context = context;
    ce44:	e0bff317 	ldw	r2,-52(fp)
    ce48:	100890fa 	slli	r4,r2,3
    ce4c:	e0fff217 	ldw	r3,-56(fp)
    ce50:	008000b4 	movhi	r2,2
    ce54:	2085883a 	add	r2,r4,r2
    ce58:	10ea8a15 	stw	r3,-21976(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    ce5c:	e0bff117 	ldw	r2,-60(fp)
    ce60:	10001a26 	beq	r2,zero,cecc <alt_irq_register+0xec>
    ce64:	e0bff317 	ldw	r2,-52(fp)
    ce68:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_READ_STATUS (context);
    ce6c:	0005303a 	rdctl	r2,status
    ce70:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ce74:	e0fffb17 	ldw	r3,-20(fp)
    ce78:	00bfff84 	movi	r2,-2
    ce7c:	1884703a 	and	r2,r3,r2
    ce80:	1001703a 	wrctl	status,r2
  return context;
    ce84:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    ce88:	e0bffa15 	stw	r2,-24(fp)

  alt_irq_active |= (1 << id);
    ce8c:	00c00044 	movi	r3,1
    ce90:	e0bffc17 	ldw	r2,-16(fp)
    ce94:	1884983a 	sll	r2,r3,r2
    ce98:	1007883a 	mov	r3,r2
    ce9c:	d0a6f017 	ldw	r2,-25664(gp)
    cea0:	1884b03a 	or	r2,r3,r2
    cea4:	d0a6f015 	stw	r2,-25664(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    cea8:	d0a6f017 	ldw	r2,-25664(gp)
    ceac:	100170fa 	wrctl	ienable,r2
    ceb0:	e0bffa17 	ldw	r2,-24(fp)
    ceb4:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
    ceb8:	e0bff917 	ldw	r2,-28(fp)
    cebc:	1001703a 	wrctl	status,r2
}
    cec0:	0001883a 	nop

  alt_irq_enable_all(status);

  return 0;
    cec4:	0005883a 	mov	r2,zero
    cec8:	00001a06 	br	cf34 <alt_irq_register+0x154>
    cecc:	e0bff317 	ldw	r2,-52(fp)
    ced0:	e0bff815 	stw	r2,-32(fp)
  NIOS2_READ_STATUS (context);
    ced4:	0005303a 	rdctl	r2,status
    ced8:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    cedc:	e0fff717 	ldw	r3,-36(fp)
    cee0:	00bfff84 	movi	r2,-2
    cee4:	1884703a 	and	r2,r3,r2
    cee8:	1001703a 	wrctl	status,r2
  return context;
    ceec:	e0bff717 	ldw	r2,-36(fp)
  status = alt_irq_disable_all ();
    cef0:	e0bff615 	stw	r2,-40(fp)
  alt_irq_active &= ~(1 << id);
    cef4:	00c00044 	movi	r3,1
    cef8:	e0bff817 	ldw	r2,-32(fp)
    cefc:	1884983a 	sll	r2,r3,r2
    cf00:	0084303a 	nor	r2,zero,r2
    cf04:	1007883a 	mov	r3,r2
    cf08:	d0a6f017 	ldw	r2,-25664(gp)
    cf0c:	1884703a 	and	r2,r3,r2
    cf10:	d0a6f015 	stw	r2,-25664(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    cf14:	d0a6f017 	ldw	r2,-25664(gp)
    cf18:	100170fa 	wrctl	ienable,r2
    cf1c:	e0bff617 	ldw	r2,-40(fp)
    cf20:	e0bff515 	stw	r2,-44(fp)
  NIOS2_WRITE_STATUS (context);
    cf24:	e0bff517 	ldw	r2,-44(fp)
    cf28:	1001703a 	wrctl	status,r2
}
    cf2c:	0001883a 	nop
  return 0;
    cf30:	0005883a 	mov	r2,zero
    cf34:	e0bfff15 	stw	r2,-4(fp)
    cf38:	e0bffe17 	ldw	r2,-8(fp)
    cf3c:	e0bff415 	stw	r2,-48(fp)
  NIOS2_WRITE_STATUS (context);
    cf40:	e0bff417 	ldw	r2,-48(fp)
    cf44:	1001703a 	wrctl	status,r2
}
    cf48:	0001883a 	nop

    alt_irq_enable_all(status);
  }
  return rc; 
    cf4c:	e0bfff17 	ldw	r2,-4(fp)
}
    cf50:	e037883a 	mov	sp,fp
    cf54:	df000017 	ldw	fp,0(sp)
    cf58:	dec00104 	addi	sp,sp,4
    cf5c:	f800283a 	ret

0000cf60 <alt_get_errno>:
{
    cf60:	defffe04 	addi	sp,sp,-8
    cf64:	dfc00115 	stw	ra,4(sp)
    cf68:	df000015 	stw	fp,0(sp)
    cf6c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    cf70:	d0a02b17 	ldw	r2,-32596(gp)
    cf74:	10000326 	beq	r2,zero,cf84 <alt_get_errno+0x24>
    cf78:	d0a02b17 	ldw	r2,-32596(gp)
    cf7c:	103ee83a 	callr	r2
    cf80:	00000106 	br	cf88 <alt_get_errno+0x28>
    cf84:	d0a6f404 	addi	r2,gp,-25648
}
    cf88:	e037883a 	mov	sp,fp
    cf8c:	dfc00117 	ldw	ra,4(sp)
    cf90:	df000017 	ldw	fp,0(sp)
    cf94:	dec00204 	addi	sp,sp,8
    cf98:	f800283a 	ret

0000cf9c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    cf9c:	defffd04 	addi	sp,sp,-12
    cfa0:	df000215 	stw	fp,8(sp)
    cfa4:	df000204 	addi	fp,sp,8
    cfa8:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    cfac:	e0bffe17 	ldw	r2,-8(fp)
    cfb0:	10800217 	ldw	r2,8(r2)
    cfb4:	10d00034 	orhi	r3,r2,16384
    cfb8:	e0bffe17 	ldw	r2,-8(fp)
    cfbc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    cfc0:	e03fff15 	stw	zero,-4(fp)
    cfc4:	00001a06 	br	d030 <alt_file_locked+0x94>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    cfc8:	e0bfff17 	ldw	r2,-4(fp)
    cfcc:	10c00324 	muli	r3,r2,12
    cfd0:	00800074 	movhi	r2,1
    cfd4:	1885883a 	add	r2,r3,r2
    cfd8:	10fda217 	ldw	r3,-2424(r2)
    cfdc:	e0bffe17 	ldw	r2,-8(fp)
    cfe0:	10800017 	ldw	r2,0(r2)
    cfe4:	18800f1e 	bne	r3,r2,d024 <alt_file_locked+0x88>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    cfe8:	e0bfff17 	ldw	r2,-4(fp)
    cfec:	10c00324 	muli	r3,r2,12
    cff0:	00800074 	movhi	r2,1
    cff4:	1885883a 	add	r2,r3,r2
    cff8:	10bda417 	ldw	r2,-2416(r2)
    if ((alt_fd_list[i].dev == fd->dev) &&
    cffc:	1000090e 	bge	r2,zero,d024 <alt_file_locked+0x88>
        (&alt_fd_list[i] != fd))
    d000:	e0bfff17 	ldw	r2,-4(fp)
    d004:	10c00324 	muli	r3,r2,12
    d008:	00800074 	movhi	r2,1
    d00c:	10bda204 	addi	r2,r2,-2424
    d010:	1885883a 	add	r2,r3,r2
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    d014:	e0fffe17 	ldw	r3,-8(fp)
    d018:	18800226 	beq	r3,r2,d024 <alt_file_locked+0x88>
    {
      return -EACCES;
    d01c:	00bffcc4 	movi	r2,-13
    d020:	00000806 	br	d044 <alt_file_locked+0xa8>
  for (i = 0; i <= alt_max_fd; i++)
    d024:	e0bfff17 	ldw	r2,-4(fp)
    d028:	10800044 	addi	r2,r2,1
    d02c:	e0bfff15 	stw	r2,-4(fp)
    d030:	d0a02a17 	ldw	r2,-32600(gp)
    d034:	1007883a 	mov	r3,r2
    d038:	e0bfff17 	ldw	r2,-4(fp)
    d03c:	18bfe22e 	bgeu	r3,r2,cfc8 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    d040:	0005883a 	mov	r2,zero
}
    d044:	e037883a 	mov	sp,fp
    d048:	df000017 	ldw	fp,0(sp)
    d04c:	dec00104 	addi	sp,sp,4
    d050:	f800283a 	ret

0000d054 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    d054:	defff604 	addi	sp,sp,-40
    d058:	dfc00915 	stw	ra,36(sp)
    d05c:	df000815 	stw	fp,32(sp)
    d060:	df000804 	addi	fp,sp,32
    d064:	e13ffa15 	stw	r4,-24(fp)
    d068:	e17ff915 	stw	r5,-28(fp)
    d06c:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    d070:	00bfffc4 	movi	r2,-1
    d074:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
    d078:	00bffb44 	movi	r2,-19
    d07c:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
    d080:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    d084:	d1602804 	addi	r5,gp,-32608
    d088:	e13ffa17 	ldw	r4,-24(fp)
    d08c:	000cbf00 	call	cbf0 <alt_find_dev>
    d090:	e0bfff15 	stw	r2,-4(fp)
    d094:	e0bfff17 	ldw	r2,-4(fp)
    d098:	1000051e 	bne	r2,zero,d0b0 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    d09c:	e13ffa17 	ldw	r4,-24(fp)
    d0a0:	000d7180 	call	d718 <alt_find_file>
    d0a4:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
    d0a8:	00800044 	movi	r2,1
    d0ac:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    d0b0:	e0bfff17 	ldw	r2,-4(fp)
    d0b4:	10002926 	beq	r2,zero,d15c <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
    d0b8:	e13fff17 	ldw	r4,-4(fp)
    d0bc:	000d8200 	call	d820 <alt_get_fd>
    d0c0:	e0bffe15 	stw	r2,-8(fp)
    d0c4:	e0bffe17 	ldw	r2,-8(fp)
    d0c8:	1000030e 	bge	r2,zero,d0d8 <open+0x84>
    {
      status = index;
    d0cc:	e0bffe17 	ldw	r2,-8(fp)
    d0d0:	e0bffd15 	stw	r2,-12(fp)
    d0d4:	00002306 	br	d164 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
    d0d8:	e0bffe17 	ldw	r2,-8(fp)
    d0dc:	10c00324 	muli	r3,r2,12
    d0e0:	00800074 	movhi	r2,1
    d0e4:	10bda204 	addi	r2,r2,-2424
    d0e8:	1885883a 	add	r2,r3,r2
    d0ec:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    d0f0:	e0fff917 	ldw	r3,-28(fp)
    d0f4:	00900034 	movhi	r2,16384
    d0f8:	10bfffc4 	addi	r2,r2,-1
    d0fc:	1886703a 	and	r3,r3,r2
    d100:	e0bffb17 	ldw	r2,-20(fp)
    d104:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    d108:	e0bffc17 	ldw	r2,-16(fp)
    d10c:	1000051e 	bne	r2,zero,d124 <open+0xd0>
    d110:	e13ffb17 	ldw	r4,-20(fp)
    d114:	000cf9c0 	call	cf9c <alt_file_locked>
    d118:	e0bffd15 	stw	r2,-12(fp)
    d11c:	e0bffd17 	ldw	r2,-12(fp)
    d120:	10001016 	blt	r2,zero,d164 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    d124:	e0bfff17 	ldw	r2,-4(fp)
    d128:	10800317 	ldw	r2,12(r2)
    d12c:	10000826 	beq	r2,zero,d150 <open+0xfc>
    d130:	e0bfff17 	ldw	r2,-4(fp)
    d134:	10800317 	ldw	r2,12(r2)
    d138:	e1fff817 	ldw	r7,-32(fp)
    d13c:	e1bff917 	ldw	r6,-28(fp)
    d140:	e17ffa17 	ldw	r5,-24(fp)
    d144:	e13ffb17 	ldw	r4,-20(fp)
    d148:	103ee83a 	callr	r2
    d14c:	00000106 	br	d154 <open+0x100>
    d150:	0005883a 	mov	r2,zero
    d154:	e0bffd15 	stw	r2,-12(fp)
    d158:	00000206 	br	d164 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
    d15c:	00bffb44 	movi	r2,-19
    d160:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    d164:	e0bffd17 	ldw	r2,-12(fp)
    d168:	1000090e 	bge	r2,zero,d190 <open+0x13c>
  {
    alt_release_fd (index);  
    d16c:	e13ffe17 	ldw	r4,-8(fp)
    d170:	000d1a80 	call	d1a8 <alt_release_fd>
    ALT_ERRNO = -status;
    d174:	000cf600 	call	cf60 <alt_get_errno>
    d178:	1007883a 	mov	r3,r2
    d17c:	e0bffd17 	ldw	r2,-12(fp)
    d180:	0085c83a 	sub	r2,zero,r2
    d184:	18800015 	stw	r2,0(r3)
    return -1;
    d188:	00bfffc4 	movi	r2,-1
    d18c:	00000106 	br	d194 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
    d190:	e0bffe17 	ldw	r2,-8(fp)
}
    d194:	e037883a 	mov	sp,fp
    d198:	dfc00117 	ldw	ra,4(sp)
    d19c:	df000017 	ldw	fp,0(sp)
    d1a0:	dec00204 	addi	sp,sp,8
    d1a4:	f800283a 	ret

0000d1a8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    d1a8:	defffe04 	addi	sp,sp,-8
    d1ac:	df000115 	stw	fp,4(sp)
    d1b0:	df000104 	addi	fp,sp,4
    d1b4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    d1b8:	e0bfff17 	ldw	r2,-4(fp)
    d1bc:	108000d0 	cmplti	r2,r2,3
    d1c0:	10000a1e 	bne	r2,zero,d1ec <alt_release_fd+0x44>
  {
    alt_fd_list[fd].fd_flags = 0;
    d1c4:	e0bfff17 	ldw	r2,-4(fp)
    d1c8:	10c00324 	muli	r3,r2,12
    d1cc:	00800074 	movhi	r2,1
    d1d0:	1885883a 	add	r2,r3,r2
    d1d4:	103da415 	stw	zero,-2416(r2)
    alt_fd_list[fd].dev      = 0;
    d1d8:	e0bfff17 	ldw	r2,-4(fp)
    d1dc:	10c00324 	muli	r3,r2,12
    d1e0:	00800074 	movhi	r2,1
    d1e4:	1885883a 	add	r2,r3,r2
    d1e8:	103da215 	stw	zero,-2424(r2)
  }
}
    d1ec:	0001883a 	nop
    d1f0:	e037883a 	mov	sp,fp
    d1f4:	df000017 	ldw	fp,0(sp)
    d1f8:	dec00104 	addi	sp,sp,4
    d1fc:	f800283a 	ret

0000d200 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    d200:	defffa04 	addi	sp,sp,-24
    d204:	df000515 	stw	fp,20(sp)
    d208:	df000504 	addi	fp,sp,20
    d20c:	e13ffb15 	stw	r4,-20(fp)
  NIOS2_READ_STATUS (context);
    d210:	0005303a 	rdctl	r2,status
    d214:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d218:	e0fffc17 	ldw	r3,-16(fp)
    d21c:	00bfff84 	movi	r2,-2
    d220:	1884703a 	and	r2,r3,r2
    d224:	1001703a 	wrctl	status,r2
  return context;
    d228:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    d22c:	e0bfff15 	stw	r2,-4(fp)
  alt_llist_remove (&alarm->llist);
    d230:	e0bffb17 	ldw	r2,-20(fp)
    d234:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    d238:	e0bffd17 	ldw	r2,-12(fp)
    d23c:	10800017 	ldw	r2,0(r2)
    d240:	e0fffd17 	ldw	r3,-12(fp)
    d244:	18c00117 	ldw	r3,4(r3)
    d248:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    d24c:	e0bffd17 	ldw	r2,-12(fp)
    d250:	10800117 	ldw	r2,4(r2)
    d254:	e0fffd17 	ldw	r3,-12(fp)
    d258:	18c00017 	ldw	r3,0(r3)
    d25c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    d260:	e0bffd17 	ldw	r2,-12(fp)
    d264:	e0fffd17 	ldw	r3,-12(fp)
    d268:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    d26c:	e0bffd17 	ldw	r2,-12(fp)
    d270:	e0fffd17 	ldw	r3,-12(fp)
    d274:	10c00015 	stw	r3,0(r2)
} 
    d278:	0001883a 	nop
    d27c:	e0bfff17 	ldw	r2,-4(fp)
    d280:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
    d284:	e0bffe17 	ldw	r2,-8(fp)
    d288:	1001703a 	wrctl	status,r2
}
    d28c:	0001883a 	nop
  alt_irq_enable_all (irq_context);
}
    d290:	0001883a 	nop
    d294:	e037883a 	mov	sp,fp
    d298:	df000017 	ldw	fp,0(sp)
    d29c:	dec00104 	addi	sp,sp,4
    d2a0:	f800283a 	ret

0000d2a4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    d2a4:	defffb04 	addi	sp,sp,-20
    d2a8:	dfc00415 	stw	ra,16(sp)
    d2ac:	df000315 	stw	fp,12(sp)
    d2b0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    d2b4:	d0a02d17 	ldw	r2,-32588(gp)
    d2b8:	e0bfff15 	stw	r2,-4(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    d2bc:	d0a6f217 	ldw	r2,-25656(gp)
    d2c0:	10800044 	addi	r2,r2,1
    d2c4:	d0a6f215 	stw	r2,-25656(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    d2c8:	00002e06 	br	d384 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    d2cc:	e0bfff17 	ldw	r2,-4(fp)
    d2d0:	10800017 	ldw	r2,0(r2)
    d2d4:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    d2d8:	e0bfff17 	ldw	r2,-4(fp)
    d2dc:	10800403 	ldbu	r2,16(r2)
    d2e0:	10803fcc 	andi	r2,r2,255
    d2e4:	10000426 	beq	r2,zero,d2f8 <alt_tick+0x54>
    d2e8:	d0a6f217 	ldw	r2,-25656(gp)
    d2ec:	1000021e 	bne	r2,zero,d2f8 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    d2f0:	e0bfff17 	ldw	r2,-4(fp)
    d2f4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    d2f8:	e0bfff17 	ldw	r2,-4(fp)
    d2fc:	10800217 	ldw	r2,8(r2)
    d300:	d0e6f217 	ldw	r3,-25656(gp)
    d304:	18801d36 	bltu	r3,r2,d37c <alt_tick+0xd8>
    d308:	e0bfff17 	ldw	r2,-4(fp)
    d30c:	10800403 	ldbu	r2,16(r2)
    d310:	10803fcc 	andi	r2,r2,255
    d314:	1000191e 	bne	r2,zero,d37c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    d318:	e0bfff17 	ldw	r2,-4(fp)
    d31c:	10800317 	ldw	r2,12(r2)
    d320:	e0ffff17 	ldw	r3,-4(fp)
    d324:	18c00517 	ldw	r3,20(r3)
    d328:	1809883a 	mov	r4,r3
    d32c:	103ee83a 	callr	r2
    d330:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    d334:	e0bffd17 	ldw	r2,-12(fp)
    d338:	1000031e 	bne	r2,zero,d348 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    d33c:	e13fff17 	ldw	r4,-4(fp)
    d340:	000d2000 	call	d200 <alt_alarm_stop>
    d344:	00000d06 	br	d37c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    d348:	e0bfff17 	ldw	r2,-4(fp)
    d34c:	10c00217 	ldw	r3,8(r2)
    d350:	e0bffd17 	ldw	r2,-12(fp)
    d354:	1887883a 	add	r3,r3,r2
    d358:	e0bfff17 	ldw	r2,-4(fp)
    d35c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    d360:	e0bfff17 	ldw	r2,-4(fp)
    d364:	10c00217 	ldw	r3,8(r2)
    d368:	d0a6f217 	ldw	r2,-25656(gp)
    d36c:	1880032e 	bgeu	r3,r2,d37c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    d370:	e0bfff17 	ldw	r2,-4(fp)
    d374:	00c00044 	movi	r3,1
    d378:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    d37c:	e0bffe17 	ldw	r2,-8(fp)
    d380:	e0bfff15 	stw	r2,-4(fp)
  while (alarm != (alt_alarm*) &alt_alarm_list)
    d384:	e0ffff17 	ldw	r3,-4(fp)
    d388:	d0a02d04 	addi	r2,gp,-32588
    d38c:	18bfcf1e 	bne	r3,r2,d2cc <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    d390:	00031d40 	call	31d4 <OSTimeTick>
}
    d394:	0001883a 	nop
    d398:	e037883a 	mov	sp,fp
    d39c:	dfc00117 	ldw	ra,4(sp)
    d3a0:	df000017 	ldw	fp,0(sp)
    d3a4:	dec00204 	addi	sp,sp,8
    d3a8:	f800283a 	ret

0000d3ac <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    d3ac:	deffff04 	addi	sp,sp,-4
    d3b0:	df000015 	stw	fp,0(sp)
    d3b4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    d3b8:	000170fa 	wrctl	ienable,zero
}
    d3bc:	0001883a 	nop
    d3c0:	e037883a 	mov	sp,fp
    d3c4:	df000017 	ldw	fp,0(sp)
    d3c8:	dec00104 	addi	sp,sp,4
    d3cc:	f800283a 	ret

0000d3d0 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
    d3d0:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
    d3d4:	d0e03017 	ldw	r3,-32576(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
    d3d8:	d126e717 	ldw	r4,-25700(gp)

      stw ra,  0(sp)
    d3dc:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
    d3e0:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
    d3e4:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
    d3e8:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
    d3ec:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
    d3f0:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
    d3f4:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
    d3f8:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
    d3fc:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
    d400:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
    d404:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
    d408:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
    d40c:	000d6340 	call	d634 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
    d410:	d126e917 	ldw	r4,-25692(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
    d414:	d166e407 	ldb	r5,-25712(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
    d418:	d126e715 	stw	r4,-25700(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
    d41c:	d166e3c5 	stb	r5,-25713(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
    d420:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
    d424:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
    d428:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
    d42c:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
    d430:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
    d434:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
    d438:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
    d43c:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
    d440:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
    d444:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
    d448:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
    d44c:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
    d450:	d0e03015 	stw	r3,-32576(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
    d454:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
    d458:	f800283a 	ret

0000d45c <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
    d45c:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
    d460:	047fff84 	movi	r17,-2
      and   r18, r18, r17
    d464:	9464703a 	and	r18,r18,r17
      wrctl status, r18
    d468:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
    d46c:	000d6340 	call	d634 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
    d470:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
    d474:	d4a6e545 	stb	r18,-25707(gp)

      /*
       * start execution of the new task.
       */

      br 9b
    d478:	003fe506 	br	d410 <OSCtxSw+0x40>

0000d47c <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
    d47c:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
    d480:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
    d484:	10800054 	ori	r2,r2,1
      wrctl status, r2
    d488:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
    d48c:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
    d490:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
    d494:	dec00204 	addi	sp,sp,8

      callr r2
    d498:	103ee83a 	callr	r2

      nop
    d49c:	0001883a 	nop

0000d4a0 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
    d4a0:	defff704 	addi	sp,sp,-36
    d4a4:	dfc00815 	stw	ra,32(sp)
    d4a8:	df000715 	stw	fp,28(sp)
    d4ac:	df000704 	addi	fp,sp,28
    d4b0:	e13ffc15 	stw	r4,-16(fp)
    d4b4:	e17ffb15 	stw	r5,-20(fp)
    d4b8:	e1bffa15 	stw	r6,-24(fp)
    d4bc:	3805883a 	mov	r2,r7
    d4c0:	e0bff90d 	sth	r2,-28(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
    d4c4:	e0fffa17 	ldw	r3,-24(fp)
    d4c8:	00bfff04 	movi	r2,-4
    d4cc:	1884703a 	and	r2,r3,r2
    d4d0:	10bef704 	addi	r2,r2,-1060
    d4d4:	e0bfff15 	stw	r2,-4(fp)

   _REENT_INIT_PTR (local_impure_ptr);
    d4d8:	01810904 	movi	r6,1060
    d4dc:	000b883a 	mov	r5,zero
    d4e0:	e13fff17 	ldw	r4,-4(fp)
    d4e4:	000dbe00 	call	dbe0 <memset>
    d4e8:	e0bfff17 	ldw	r2,-4(fp)
    d4ec:	10c0bb04 	addi	r3,r2,748
    d4f0:	e0bfff17 	ldw	r2,-4(fp)
    d4f4:	10c00115 	stw	r3,4(r2)
    d4f8:	e0bfff17 	ldw	r2,-4(fp)
    d4fc:	10c0d504 	addi	r3,r2,852
    d500:	e0bfff17 	ldw	r2,-4(fp)
    d504:	10c00215 	stw	r3,8(r2)
    d508:	e0bfff17 	ldw	r2,-4(fp)
    d50c:	10c0ef04 	addi	r3,r2,956
    d510:	e0bfff17 	ldw	r2,-4(fp)
    d514:	10c00315 	stw	r3,12(r2)
    d518:	e0bfff17 	ldw	r2,-4(fp)
    d51c:	00c00044 	movi	r3,1
    d520:	10c02915 	stw	r3,164(r2)
    d524:	10002a15 	stw	zero,168(r2)
    d528:	e0bfff17 	ldw	r2,-4(fp)
    d52c:	00ccc384 	movi	r3,13070
    d530:	10c02b0d 	sth	r3,172(r2)
    d534:	e0bfff17 	ldw	r2,-4(fp)
    d538:	00eaf344 	movi	r3,-21555
    d53c:	10c02b8d 	sth	r3,174(r2)
    d540:	e0bfff17 	ldw	r2,-4(fp)
    d544:	00c48d04 	movi	r3,4660
    d548:	10c02c0d 	sth	r3,176(r2)
    d54c:	e0bfff17 	ldw	r2,-4(fp)
    d550:	00f99b44 	movi	r3,-6547
    d554:	10c02c8d 	sth	r3,178(r2)
    d558:	e0bfff17 	ldw	r2,-4(fp)
    d55c:	00f7bb04 	movi	r3,-8468
    d560:	10c02d0d 	sth	r3,180(r2)
    d564:	e0bfff17 	ldw	r2,-4(fp)
    d568:	00c00144 	movi	r3,5
    d56c:	10c02d8d 	sth	r3,182(r2)
    d570:	e0bfff17 	ldw	r2,-4(fp)
    d574:	00c002c4 	movi	r3,11
    d578:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
    d57c:	e0bfff17 	ldw	r2,-4(fp)
    d580:	e0bffe15 	stw	r2,-8(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
    d584:	e0bffe17 	ldw	r2,-8(fp)
    d588:	10bff304 	addi	r2,r2,-52
    d58c:	e0bffd15 	stw	r2,-12(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
    d590:	e0bffd17 	ldw	r2,-12(fp)
    d594:	10800c04 	addi	r2,r2,48
    d598:	e0fffc17 	ldw	r3,-16(fp)
    d59c:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
    d5a0:	e0bffd17 	ldw	r2,-12(fp)
    d5a4:	10800b04 	addi	r2,r2,44
    d5a8:	e0fffb17 	ldw	r3,-20(fp)
    d5ac:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
    d5b0:	e0bffd17 	ldw	r2,-12(fp)
    d5b4:	10800a04 	addi	r2,r2,40
    d5b8:	e0ffff17 	ldw	r3,-4(fp)
    d5bc:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
    d5c0:	00800074 	movhi	r2,1
    d5c4:	10b51f04 	addi	r2,r2,-11140
    d5c8:	10c00104 	addi	r3,r2,4
    d5cc:	e0bffd17 	ldw	r2,-12(fp)
    d5d0:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
    d5d4:	e0bffd17 	ldw	r2,-12(fp)
}
    d5d8:	e037883a 	mov	sp,fp
    d5dc:	dfc00117 	ldw	ra,4(sp)
    d5e0:	df000017 	ldw	fp,0(sp)
    d5e4:	dec00204 	addi	sp,sp,8
    d5e8:	f800283a 	ret

0000d5ec <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
    d5ec:	defffe04 	addi	sp,sp,-8
    d5f0:	df000115 	stw	fp,4(sp)
    d5f4:	df000104 	addi	fp,sp,4
    d5f8:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
    d5fc:	0001883a 	nop
    d600:	e037883a 	mov	sp,fp
    d604:	df000017 	ldw	fp,0(sp)
    d608:	dec00104 	addi	sp,sp,4
    d60c:	f800283a 	ret

0000d610 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
    d610:	defffe04 	addi	sp,sp,-8
    d614:	df000115 	stw	fp,4(sp)
    d618:	df000104 	addi	fp,sp,4
    d61c:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
    d620:	0001883a 	nop
    d624:	e037883a 	mov	sp,fp
    d628:	df000017 	ldw	fp,0(sp)
    d62c:	dec00104 	addi	sp,sp,4
    d630:	f800283a 	ret

0000d634 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
    d634:	deffff04 	addi	sp,sp,-4
    d638:	df000015 	stw	fp,0(sp)
    d63c:	d839883a 	mov	fp,sp
}
    d640:	0001883a 	nop
    d644:	e037883a 	mov	sp,fp
    d648:	df000017 	ldw	fp,0(sp)
    d64c:	dec00104 	addi	sp,sp,4
    d650:	f800283a 	ret

0000d654 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
    d654:	deffff04 	addi	sp,sp,-4
    d658:	df000015 	stw	fp,0(sp)
    d65c:	d839883a 	mov	fp,sp
}
    d660:	0001883a 	nop
    d664:	e037883a 	mov	sp,fp
    d668:	df000017 	ldw	fp,0(sp)
    d66c:	dec00104 	addi	sp,sp,4
    d670:	f800283a 	ret

0000d674 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
    d674:	deffff04 	addi	sp,sp,-4
    d678:	df000015 	stw	fp,0(sp)
    d67c:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
    d680:	0001883a 	nop
    d684:	e037883a 	mov	sp,fp
    d688:	df000017 	ldw	fp,0(sp)
    d68c:	dec00104 	addi	sp,sp,4
    d690:	f800283a 	ret

0000d694 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
    d694:	deffff04 	addi	sp,sp,-4
    d698:	df000015 	stw	fp,0(sp)
    d69c:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
    d6a0:	0001883a 	nop
    d6a4:	e037883a 	mov	sp,fp
    d6a8:	df000017 	ldw	fp,0(sp)
    d6ac:	dec00104 	addi	sp,sp,4
    d6b0:	f800283a 	ret

0000d6b4 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
    d6b4:	deffff04 	addi	sp,sp,-4
    d6b8:	df000015 	stw	fp,0(sp)
    d6bc:	d839883a 	mov	fp,sp
}
    d6c0:	0001883a 	nop
    d6c4:	e037883a 	mov	sp,fp
    d6c8:	df000017 	ldw	fp,0(sp)
    d6cc:	dec00104 	addi	sp,sp,4
    d6d0:	f800283a 	ret

0000d6d4 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
    d6d4:	deffff04 	addi	sp,sp,-4
    d6d8:	df000015 	stw	fp,0(sp)
    d6dc:	d839883a 	mov	fp,sp
}
    d6e0:	0001883a 	nop
    d6e4:	e037883a 	mov	sp,fp
    d6e8:	df000017 	ldw	fp,0(sp)
    d6ec:	dec00104 	addi	sp,sp,4
    d6f0:	f800283a 	ret

0000d6f4 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
    d6f4:	defffe04 	addi	sp,sp,-8
    d6f8:	df000115 	stw	fp,4(sp)
    d6fc:	df000104 	addi	fp,sp,4
    d700:	e13fff15 	stw	r4,-4(fp)
}
    d704:	0001883a 	nop
    d708:	e037883a 	mov	sp,fp
    d70c:	df000017 	ldw	fp,0(sp)
    d710:	dec00104 	addi	sp,sp,4
    d714:	f800283a 	ret

0000d718 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    d718:	defffb04 	addi	sp,sp,-20
    d71c:	dfc00415 	stw	ra,16(sp)
    d720:	df000315 	stw	fp,12(sp)
    d724:	df000304 	addi	fp,sp,12
    d728:	e13ffd15 	stw	r4,-12(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    d72c:	d0a02617 	ldw	r2,-32616(gp)
    d730:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    d734:	00003106 	br	d7fc <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    d738:	e0bfff17 	ldw	r2,-4(fp)
    d73c:	10800217 	ldw	r2,8(r2)
    d740:	1009883a 	mov	r4,r2
    d744:	000dcd00 	call	dcd0 <strlen>
    d748:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    d74c:	e0bfff17 	ldw	r2,-4(fp)
    d750:	10c00217 	ldw	r3,8(r2)
    d754:	e0bffe17 	ldw	r2,-8(fp)
    d758:	10bfffc4 	addi	r2,r2,-1
    d75c:	1885883a 	add	r2,r3,r2
    d760:	10800003 	ldbu	r2,0(r2)
    d764:	10803fcc 	andi	r2,r2,255
    d768:	1080201c 	xori	r2,r2,128
    d76c:	10bfe004 	addi	r2,r2,-128
    d770:	10800bd8 	cmpnei	r2,r2,47
    d774:	1000031e 	bne	r2,zero,d784 <alt_find_file+0x6c>
    {
      len -= 1;
    d778:	e0bffe17 	ldw	r2,-8(fp)
    d77c:	10bfffc4 	addi	r2,r2,-1
    d780:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    d784:	e0bffe17 	ldw	r2,-8(fp)
    d788:	e0fffd17 	ldw	r3,-12(fp)
    d78c:	1885883a 	add	r2,r3,r2
    d790:	10800003 	ldbu	r2,0(r2)
    d794:	10803fcc 	andi	r2,r2,255
    d798:	1080201c 	xori	r2,r2,128
    d79c:	10bfe004 	addi	r2,r2,-128
    d7a0:	10800be0 	cmpeqi	r2,r2,47
    d7a4:	1000081e 	bne	r2,zero,d7c8 <alt_find_file+0xb0>
    d7a8:	e0bffe17 	ldw	r2,-8(fp)
    d7ac:	e0fffd17 	ldw	r3,-12(fp)
    d7b0:	1885883a 	add	r2,r3,r2
    d7b4:	10800003 	ldbu	r2,0(r2)
    d7b8:	10803fcc 	andi	r2,r2,255
    d7bc:	1080201c 	xori	r2,r2,128
    d7c0:	10bfe004 	addi	r2,r2,-128
    d7c4:	10000a1e 	bne	r2,zero,d7f0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    d7c8:	e0bfff17 	ldw	r2,-4(fp)
    d7cc:	10800217 	ldw	r2,8(r2)
    d7d0:	e0fffe17 	ldw	r3,-8(fp)
    d7d4:	180d883a 	mov	r6,r3
    d7d8:	e17ffd17 	ldw	r5,-12(fp)
    d7dc:	1009883a 	mov	r4,r2
    d7e0:	000da680 	call	da68 <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
    d7e4:	1000021e 	bne	r2,zero,d7f0 <alt_find_file+0xd8>
    {
      /* match found */

      return next;
    d7e8:	e0bfff17 	ldw	r2,-4(fp)
    d7ec:	00000706 	br	d80c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    d7f0:	e0bfff17 	ldw	r2,-4(fp)
    d7f4:	10800017 	ldw	r2,0(r2)
    d7f8:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) &alt_fs_list)
    d7fc:	e0ffff17 	ldw	r3,-4(fp)
    d800:	d0a02604 	addi	r2,gp,-32616
    d804:	18bfcc1e 	bne	r3,r2,d738 <alt_find_file+0x20>
  }
  
  /* No match found */
  
  return NULL;     
    d808:	0005883a 	mov	r2,zero
}
    d80c:	e037883a 	mov	sp,fp
    d810:	dfc00117 	ldw	ra,4(sp)
    d814:	df000017 	ldw	fp,0(sp)
    d818:	dec00204 	addi	sp,sp,8
    d81c:	f800283a 	ret

0000d820 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    d820:	defff904 	addi	sp,sp,-28
    d824:	dfc00615 	stw	ra,24(sp)
    d828:	df000515 	stw	fp,20(sp)
    d82c:	df000504 	addi	fp,sp,20
    d830:	e13ffb15 	stw	r4,-20(fp)
  alt_32 i;
  int rc = -EMFILE;
    d834:	00bffa04 	movi	r2,-24
    d838:	e0bffe15 	stw	r2,-8(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
    d83c:	d0a6ef17 	ldw	r2,-25668(gp)
    d840:	e0bffd15 	stw	r2,-12(fp)
    d844:	e03ffc8d 	sth	zero,-14(fp)
    d848:	e0bffc8b 	ldhu	r2,-14(fp)
    d84c:	e0fffc44 	addi	r3,fp,-15
    d850:	180d883a 	mov	r6,r3
    d854:	100b883a 	mov	r5,r2
    d858:	e13ffd17 	ldw	r4,-12(fp)
    d85c:	0007b4c0 	call	7b4c <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    d860:	e03fff15 	stw	zero,-4(fp)
    d864:	00001706 	br	d8c4 <alt_get_fd+0xa4>
  {
    if (!alt_fd_list[i].dev)
    d868:	e0bfff17 	ldw	r2,-4(fp)
    d86c:	10c00324 	muli	r3,r2,12
    d870:	00800074 	movhi	r2,1
    d874:	1885883a 	add	r2,r3,r2
    d878:	10bda217 	ldw	r2,-2424(r2)
    d87c:	10000e1e 	bne	r2,zero,d8b8 <alt_get_fd+0x98>
    {
      alt_fd_list[i].dev = dev;
    d880:	e0bfff17 	ldw	r2,-4(fp)
    d884:	11000324 	muli	r4,r2,12
    d888:	e0fffb17 	ldw	r3,-20(fp)
    d88c:	00800074 	movhi	r2,1
    d890:	2085883a 	add	r2,r4,r2
    d894:	10fda215 	stw	r3,-2424(r2)
      if (i > alt_max_fd)
    d898:	d0e02a17 	ldw	r3,-32600(gp)
    d89c:	e0bfff17 	ldw	r2,-4(fp)
    d8a0:	1880020e 	bge	r3,r2,d8ac <alt_get_fd+0x8c>
      {
        alt_max_fd = i;
    d8a4:	e0bfff17 	ldw	r2,-4(fp)
    d8a8:	d0a02a15 	stw	r2,-32600(gp)
      }
      rc = i;
    d8ac:	e0bfff17 	ldw	r2,-4(fp)
    d8b0:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
    d8b4:	00000706 	br	d8d4 <alt_get_fd+0xb4>
  for (i = 0; i < ALT_MAX_FD; i++)
    d8b8:	e0bfff17 	ldw	r2,-4(fp)
    d8bc:	10800044 	addi	r2,r2,1
    d8c0:	e0bfff15 	stw	r2,-4(fp)
    d8c4:	e0bfff17 	ldw	r2,-4(fp)
    d8c8:	10800810 	cmplti	r2,r2,32
    d8cc:	103fe61e 	bne	r2,zero,d868 <alt_get_fd+0x48>
    }
  }

 alt_get_fd_exit:
    d8d0:	0001883a 	nop
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
    d8d4:	d0a6ef17 	ldw	r2,-25668(gp)
    d8d8:	1009883a 	mov	r4,r2
    d8dc:	0007ed40 	call	7ed4 <OSSemPost>

  return rc;
    d8e0:	e0bffe17 	ldw	r2,-8(fp)
}
    d8e4:	e037883a 	mov	sp,fp
    d8e8:	dfc00117 	ldw	ra,4(sp)
    d8ec:	df000017 	ldw	fp,0(sp)
    d8f0:	dec00204 	addi	sp,sp,8
    d8f4:	f800283a 	ret

0000d8f8 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    d8f8:	defffb04 	addi	sp,sp,-20
    d8fc:	df000415 	stw	fp,16(sp)
    d900:	df000404 	addi	fp,sp,16
    d904:	e13ffd15 	stw	r4,-12(fp)
    d908:	e17ffc15 	stw	r5,-16(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    d90c:	e0bffc17 	ldw	r2,-16(fp)
    d910:	10840070 	cmpltui	r2,r2,4097
    d914:	1000021e 	bne	r2,zero,d920 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    d918:	00840004 	movi	r2,4096
    d91c:	e0bffc15 	stw	r2,-16(fp)
  }

  end = ((char*) start) + len;
    d920:	e0fffd17 	ldw	r3,-12(fp)
    d924:	e0bffc17 	ldw	r2,-16(fp)
    d928:	1885883a 	add	r2,r3,r2
    d92c:	e0bffe15 	stw	r2,-8(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    d930:	e0bffd17 	ldw	r2,-12(fp)
    d934:	e0bfff15 	stw	r2,-4(fp)
    d938:	00000506 	br	d950 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    d93c:	e0bfff17 	ldw	r2,-4(fp)
    d940:	1000603a 	flushi	r2
  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    d944:	e0bfff17 	ldw	r2,-4(fp)
    d948:	10800804 	addi	r2,r2,32
    d94c:	e0bfff15 	stw	r2,-4(fp)
    d950:	e0ffff17 	ldw	r3,-4(fp)
    d954:	e0bffe17 	ldw	r2,-8(fp)
    d958:	18bff836 	bltu	r3,r2,d93c <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    d95c:	e0bffd17 	ldw	r2,-12(fp)
    d960:	108007cc 	andi	r2,r2,31
    d964:	10000226 	beq	r2,zero,d970 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    d968:	e0bfff17 	ldw	r2,-4(fp)
    d96c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    d970:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    d974:	0001883a 	nop
    d978:	e037883a 	mov	sp,fp
    d97c:	df000017 	ldw	fp,0(sp)
    d980:	dec00104 	addi	sp,sp,4
    d984:	f800283a 	ret

0000d988 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    d988:	defffe04 	addi	sp,sp,-8
    d98c:	df000115 	stw	fp,4(sp)
    d990:	df000104 	addi	fp,sp,4
    d994:	e13fff15 	stw	r4,-4(fp)
    d998:	e0bfff17 	ldw	r2,-4(fp)
    d99c:	10bffe84 	addi	r2,r2,-6
    d9a0:	10c00428 	cmpgeui	r3,r2,16
    d9a4:	1800191e 	bne	r3,zero,da0c <alt_exception_cause_generated_bad_addr+0x84>
    d9a8:	100690ba 	slli	r3,r2,2
    d9ac:	00800074 	movhi	r2,1
    d9b0:	1885883a 	add	r2,r3,r2
    d9b4:	10b66f17 	ldw	r2,-9796(r2)
    d9b8:	1000683a 	jmp	r2
    d9bc:	0000d9fc 	xorhi	zero,zero,871
    d9c0:	0000d9fc 	xorhi	zero,zero,871
    d9c4:	0000da0c 	andi	zero,zero,872
    d9c8:	0000da0c 	andi	zero,zero,872
    d9cc:	0000da0c 	andi	zero,zero,872
    d9d0:	0000d9fc 	xorhi	zero,zero,871
    d9d4:	0000da04 	movi	zero,872
    d9d8:	0000da0c 	andi	zero,zero,872
    d9dc:	0000d9fc 	xorhi	zero,zero,871
    d9e0:	0000d9fc 	xorhi	zero,zero,871
    d9e4:	0000da0c 	andi	zero,zero,872
    d9e8:	0000d9fc 	xorhi	zero,zero,871
    d9ec:	0000da04 	movi	zero,872
    d9f0:	0000da0c 	andi	zero,zero,872
    d9f4:	0000da0c 	andi	zero,zero,872
    d9f8:	0000d9fc 	xorhi	zero,zero,871
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    d9fc:	00800044 	movi	r2,1
    da00:	00000306 	br	da10 <alt_exception_cause_generated_bad_addr+0x88>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    da04:	0005883a 	mov	r2,zero
    da08:	00000106 	br	da10 <alt_exception_cause_generated_bad_addr+0x88>

  default:
    return 0;
    da0c:	0005883a 	mov	r2,zero
  }
}
    da10:	e037883a 	mov	sp,fp
    da14:	df000017 	ldw	fp,0(sp)
    da18:	dec00104 	addi	sp,sp,4
    da1c:	f800283a 	ret

0000da20 <atexit>:
    da20:	200b883a 	mov	r5,r4
    da24:	000f883a 	mov	r7,zero
    da28:	000d883a 	mov	r6,zero
    da2c:	0009883a 	mov	r4,zero
    da30:	000dd681 	jmpi	dd68 <__register_exitproc>

0000da34 <exit>:
    da34:	defffe04 	addi	sp,sp,-8
    da38:	000b883a 	mov	r5,zero
    da3c:	dc000015 	stw	r16,0(sp)
    da40:	dfc00115 	stw	ra,4(sp)
    da44:	2021883a 	mov	r16,r4
    da48:	000ddf80 	call	ddf8 <__call_exitprocs>
    da4c:	00800074 	movhi	r2,1
    da50:	113f3a17 	ldw	r4,-792(r2)
    da54:	20800f17 	ldw	r2,60(r4)
    da58:	10000126 	beq	r2,zero,da60 <exit+0x2c>
    da5c:	103ee83a 	callr	r2
    da60:	8009883a 	mov	r4,r16
    da64:	000df180 	call	df18 <_exit>

0000da68 <memcmp>:
    da68:	30800130 	cmpltui	r2,r6,4
    da6c:	10000b1e 	bne	r2,zero,da9c <memcmp+0x34>
    da70:	2144b03a 	or	r2,r4,r5
    da74:	108000cc 	andi	r2,r2,3
    da78:	1000171e 	bne	r2,zero,dad8 <memcmp+0x70>
    da7c:	20c00017 	ldw	r3,0(r4)
    da80:	28800017 	ldw	r2,0(r5)
    da84:	1880141e 	bne	r3,r2,dad8 <memcmp+0x70>
    da88:	31bfff04 	addi	r6,r6,-4
    da8c:	30800128 	cmpgeui	r2,r6,4
    da90:	21000104 	addi	r4,r4,4
    da94:	29400104 	addi	r5,r5,4
    da98:	103ff81e 	bne	r2,zero,da7c <memcmp+0x14>
    da9c:	30bfffc4 	addi	r2,r6,-1
    daa0:	30000b26 	beq	r6,zero,dad0 <memcmp+0x68>
    daa4:	11800044 	addi	r6,r2,1
    daa8:	218d883a 	add	r6,r4,r6
    daac:	00000106 	br	dab4 <memcmp+0x4c>
    dab0:	21800726 	beq	r4,r6,dad0 <memcmp+0x68>
    dab4:	20800003 	ldbu	r2,0(r4)
    dab8:	28c00003 	ldbu	r3,0(r5)
    dabc:	21000044 	addi	r4,r4,1
    dac0:	29400044 	addi	r5,r5,1
    dac4:	10fffa26 	beq	r2,r3,dab0 <memcmp+0x48>
    dac8:	10c5c83a 	sub	r2,r2,r3
    dacc:	f800283a 	ret
    dad0:	0005883a 	mov	r2,zero
    dad4:	f800283a 	ret
    dad8:	30bfffc4 	addi	r2,r6,-1
    dadc:	003ff106 	br	daa4 <memcmp+0x3c>

0000dae0 <memcpy>:
    dae0:	30c00430 	cmpltui	r3,r6,16
    dae4:	2005883a 	mov	r2,r4
    dae8:	18002d1e 	bne	r3,zero,dba0 <memcpy+0xc0>
    daec:	2906b03a 	or	r3,r5,r4
    daf0:	18c000cc 	andi	r3,r3,3
    daf4:	1800351e 	bne	r3,zero,dbcc <memcpy+0xec>
    daf8:	32fffc04 	addi	r11,r6,-16
    dafc:	5816d13a 	srli	r11,r11,4
    db00:	280f883a 	mov	r7,r5
    db04:	2007883a 	mov	r3,r4
    db08:	5ac00044 	addi	r11,r11,1
    db0c:	5816913a 	slli	r11,r11,4
    db10:	22d5883a 	add	r10,r4,r11
    db14:	39000117 	ldw	r4,4(r7)
    db18:	3a400017 	ldw	r9,0(r7)
    db1c:	3a000217 	ldw	r8,8(r7)
    db20:	19000115 	stw	r4,4(r3)
    db24:	39000317 	ldw	r4,12(r7)
    db28:	1a400015 	stw	r9,0(r3)
    db2c:	1a000215 	stw	r8,8(r3)
    db30:	19000315 	stw	r4,12(r3)
    db34:	18c00404 	addi	r3,r3,16
    db38:	39c00404 	addi	r7,r7,16
    db3c:	50fff51e 	bne	r10,r3,db14 <memcpy+0x34>
    db40:	3100030c 	andi	r4,r6,12
    db44:	2acb883a 	add	r5,r5,r11
    db48:	320003cc 	andi	r8,r6,15
    db4c:	20002226 	beq	r4,zero,dbd8 <memcpy+0xf8>
    db50:	280f883a 	mov	r7,r5
    db54:	1813883a 	mov	r9,r3
    db58:	39c00104 	addi	r7,r7,4
    db5c:	3abfff17 	ldw	r10,-4(r7)
    db60:	41c9c83a 	sub	r4,r8,r7
    db64:	2909883a 	add	r4,r5,r4
    db68:	4a800015 	stw	r10,0(r9)
    db6c:	21000128 	cmpgeui	r4,r4,4
    db70:	4a400104 	addi	r9,r9,4
    db74:	203ff81e 	bne	r4,zero,db58 <memcpy+0x78>
    db78:	413fff04 	addi	r4,r8,-4
    db7c:	2008d0ba 	srli	r4,r4,2
    db80:	318000cc 	andi	r6,r6,3
    db84:	31ffffc4 	addi	r7,r6,-1
    db88:	21000044 	addi	r4,r4,1
    db8c:	200890ba 	slli	r4,r4,2
    db90:	1907883a 	add	r3,r3,r4
    db94:	290b883a 	add	r5,r5,r4
    db98:	3000041e 	bne	r6,zero,dbac <memcpy+0xcc>
    db9c:	f800283a 	ret
    dba0:	2007883a 	mov	r3,r4
    dba4:	31ffffc4 	addi	r7,r6,-1
    dba8:	303ffc26 	beq	r6,zero,db9c <memcpy+0xbc>
    dbac:	39c00044 	addi	r7,r7,1
    dbb0:	19cf883a 	add	r7,r3,r7
    dbb4:	29800003 	ldbu	r6,0(r5)
    dbb8:	18c00044 	addi	r3,r3,1
    dbbc:	29400044 	addi	r5,r5,1
    dbc0:	19bfffc5 	stb	r6,-1(r3)
    dbc4:	38fffb1e 	bne	r7,r3,dbb4 <memcpy+0xd4>
    dbc8:	f800283a 	ret
    dbcc:	31ffffc4 	addi	r7,r6,-1
    dbd0:	2007883a 	mov	r3,r4
    dbd4:	003ff506 	br	dbac <memcpy+0xcc>
    dbd8:	400d883a 	mov	r6,r8
    dbdc:	003ff106 	br	dba4 <memcpy+0xc4>

0000dbe0 <memset>:
    dbe0:	20c000cc 	andi	r3,r4,3
    dbe4:	2005883a 	mov	r2,r4
    dbe8:	18003626 	beq	r3,zero,dcc4 <memset+0xe4>
    dbec:	31ffffc4 	addi	r7,r6,-1
    dbf0:	30003326 	beq	r6,zero,dcc0 <memset+0xe0>
    dbf4:	2811883a 	mov	r8,r5
    dbf8:	2007883a 	mov	r3,r4
    dbfc:	00000306 	br	dc0c <memset+0x2c>
    dc00:	39ffffc4 	addi	r7,r7,-1
    dc04:	39bfffe0 	cmpeqi	r6,r7,-1
    dc08:	30002d1e 	bne	r6,zero,dcc0 <memset+0xe0>
    dc0c:	18c00044 	addi	r3,r3,1
    dc10:	198000cc 	andi	r6,r3,3
    dc14:	1a3fffc5 	stb	r8,-1(r3)
    dc18:	303ff91e 	bne	r6,zero,dc00 <memset+0x20>
    dc1c:	39000130 	cmpltui	r4,r7,4
    dc20:	2000221e 	bne	r4,zero,dcac <memset+0xcc>
    dc24:	29003fcc 	andi	r4,r5,255
    dc28:	200c923a 	slli	r6,r4,8
    dc2c:	3a000430 	cmpltui	r8,r7,16
    dc30:	3108b03a 	or	r4,r6,r4
    dc34:	200c943a 	slli	r6,r4,16
    dc38:	310cb03a 	or	r6,r6,r4
    dc3c:	40000e1e 	bne	r8,zero,dc78 <memset+0x98>
    dc40:	393ffc04 	addi	r4,r7,-16
    dc44:	2008d13a 	srli	r4,r4,4
    dc48:	21000044 	addi	r4,r4,1
    dc4c:	2008913a 	slli	r4,r4,4
    dc50:	1909883a 	add	r4,r3,r4
    dc54:	19800015 	stw	r6,0(r3)
    dc58:	19800115 	stw	r6,4(r3)
    dc5c:	19800215 	stw	r6,8(r3)
    dc60:	19800315 	stw	r6,12(r3)
    dc64:	18c00404 	addi	r3,r3,16
    dc68:	20fffa1e 	bne	r4,r3,dc54 <memset+0x74>
    dc6c:	3900030c 	andi	r4,r7,12
    dc70:	39c003cc 	andi	r7,r7,15
    dc74:	20000d26 	beq	r4,zero,dcac <memset+0xcc>
    dc78:	1811883a 	mov	r8,r3
    dc7c:	42000104 	addi	r8,r8,4
    dc80:	3a09c83a 	sub	r4,r7,r8
    dc84:	1909883a 	add	r4,r3,r4
    dc88:	21000128 	cmpgeui	r4,r4,4
    dc8c:	41bfff15 	stw	r6,-4(r8)
    dc90:	203ffa1e 	bne	r4,zero,dc7c <memset+0x9c>
    dc94:	393fff04 	addi	r4,r7,-4
    dc98:	2008d0ba 	srli	r4,r4,2
    dc9c:	39c000cc 	andi	r7,r7,3
    dca0:	21000044 	addi	r4,r4,1
    dca4:	200890ba 	slli	r4,r4,2
    dca8:	1907883a 	add	r3,r3,r4
    dcac:	38000426 	beq	r7,zero,dcc0 <memset+0xe0>
    dcb0:	19cf883a 	add	r7,r3,r7
    dcb4:	18c00044 	addi	r3,r3,1
    dcb8:	197fffc5 	stb	r5,-1(r3)
    dcbc:	38fffd1e 	bne	r7,r3,dcb4 <memset+0xd4>
    dcc0:	f800283a 	ret
    dcc4:	2007883a 	mov	r3,r4
    dcc8:	300f883a 	mov	r7,r6
    dccc:	003fd306 	br	dc1c <memset+0x3c>

0000dcd0 <strlen>:
    dcd0:	208000cc 	andi	r2,r4,3
    dcd4:	10000926 	beq	r2,zero,dcfc <strlen+0x2c>
    dcd8:	2005883a 	mov	r2,r4
    dcdc:	00000306 	br	dcec <strlen+0x1c>
    dce0:	10800044 	addi	r2,r2,1
    dce4:	10c000cc 	andi	r3,r2,3
    dce8:	18000526 	beq	r3,zero,dd00 <strlen+0x30>
    dcec:	10c00007 	ldb	r3,0(r2)
    dcf0:	183ffb1e 	bne	r3,zero,dce0 <strlen+0x10>
    dcf4:	1105c83a 	sub	r2,r2,r4
    dcf8:	f800283a 	ret
    dcfc:	2005883a 	mov	r2,r4
    dd00:	11400017 	ldw	r5,0(r2)
    dd04:	01ffbff4 	movhi	r7,65279
    dd08:	39ffbfc4 	addi	r7,r7,-257
    dd0c:	29c7883a 	add	r3,r5,r7
    dd10:	01a02074 	movhi	r6,32897
    dd14:	014a303a 	nor	r5,zero,r5
    dd18:	1946703a 	and	r3,r3,r5
    dd1c:	31a02004 	addi	r6,r6,-32640
    dd20:	1986703a 	and	r3,r3,r6
    dd24:	1800071e 	bne	r3,zero,dd44 <strlen+0x74>
    dd28:	11400117 	ldw	r5,4(r2)
    dd2c:	10800104 	addi	r2,r2,4
    dd30:	29c7883a 	add	r3,r5,r7
    dd34:	014a303a 	nor	r5,zero,r5
    dd38:	1946703a 	and	r3,r3,r5
    dd3c:	1986703a 	and	r3,r3,r6
    dd40:	183ff926 	beq	r3,zero,dd28 <strlen+0x58>
    dd44:	10c00007 	ldb	r3,0(r2)
    dd48:	183fea26 	beq	r3,zero,dcf4 <strlen+0x24>
    dd4c:	10c00047 	ldb	r3,1(r2)
    dd50:	10800044 	addi	r2,r2,1
    dd54:	183fe726 	beq	r3,zero,dcf4 <strlen+0x24>
    dd58:	10c00047 	ldb	r3,1(r2)
    dd5c:	10800044 	addi	r2,r2,1
    dd60:	183ffa1e 	bne	r3,zero,dd4c <strlen+0x7c>
    dd64:	003fe306 	br	dcf4 <strlen+0x24>

0000dd68 <__register_exitproc>:
    dd68:	00800074 	movhi	r2,1
    dd6c:	10ff3a17 	ldw	r3,-792(r2)
    dd70:	18805217 	ldw	r2,328(r3)
    dd74:	10001726 	beq	r2,zero,ddd4 <__register_exitproc+0x6c>
    dd78:	10c00117 	ldw	r3,4(r2)
    dd7c:	1a000808 	cmpgei	r8,r3,32
    dd80:	40001b1e 	bne	r8,zero,ddf0 <__register_exitproc+0x88>
    dd84:	20000b26 	beq	r4,zero,ddb4 <__register_exitproc+0x4c>
    dd88:	181090ba 	slli	r8,r3,2
    dd8c:	02400044 	movi	r9,1
    dd90:	48d2983a 	sll	r9,r9,r3
    dd94:	1211883a 	add	r8,r2,r8
    dd98:	41802215 	stw	r6,136(r8)
    dd9c:	11806217 	ldw	r6,392(r2)
    dda0:	21000098 	cmpnei	r4,r4,2
    dda4:	324cb03a 	or	r6,r6,r9
    dda8:	11806215 	stw	r6,392(r2)
    ddac:	41c04215 	stw	r7,264(r8)
    ddb0:	20000b26 	beq	r4,zero,dde0 <__register_exitproc+0x78>
    ddb4:	19000084 	addi	r4,r3,2
    ddb8:	200890ba 	slli	r4,r4,2
    ddbc:	18c00044 	addi	r3,r3,1
    ddc0:	10c00115 	stw	r3,4(r2)
    ddc4:	1105883a 	add	r2,r2,r4
    ddc8:	11400015 	stw	r5,0(r2)
    ddcc:	0005883a 	mov	r2,zero
    ddd0:	f800283a 	ret
    ddd4:	18805304 	addi	r2,r3,332
    ddd8:	18805215 	stw	r2,328(r3)
    dddc:	003fe606 	br	dd78 <__register_exitproc+0x10>
    dde0:	11006317 	ldw	r4,396(r2)
    dde4:	2252b03a 	or	r9,r4,r9
    dde8:	12406315 	stw	r9,396(r2)
    ddec:	003ff106 	br	ddb4 <__register_exitproc+0x4c>
    ddf0:	00bfffc4 	movi	r2,-1
    ddf4:	f800283a 	ret

0000ddf8 <__call_exitprocs>:
    ddf8:	defff704 	addi	sp,sp,-36
    ddfc:	00800074 	movhi	r2,1
    de00:	dcc00315 	stw	r19,12(sp)
    de04:	14ff3a17 	ldw	r19,-792(r2)
    de08:	dc800215 	stw	r18,8(sp)
    de0c:	dfc00815 	stw	ra,32(sp)
    de10:	9c805217 	ldw	r18,328(r19)
    de14:	ddc00715 	stw	r23,28(sp)
    de18:	dd800615 	stw	r22,24(sp)
    de1c:	dd400515 	stw	r21,20(sp)
    de20:	dd000415 	stw	r20,16(sp)
    de24:	dc400115 	stw	r17,4(sp)
    de28:	dc000015 	stw	r16,0(sp)
    de2c:	90001026 	beq	r18,zero,de70 <__call_exitprocs+0x78>
    de30:	202b883a 	mov	r21,r4
    de34:	282d883a 	mov	r22,r5
    de38:	05000044 	movi	r20,1
    de3c:	94000117 	ldw	r16,4(r18)
    de40:	847fffc4 	addi	r17,r16,-1
    de44:	88000a16 	blt	r17,zero,de70 <__call_exitprocs+0x78>
    de48:	84000044 	addi	r16,r16,1
    de4c:	802090ba 	slli	r16,r16,2
    de50:	9421883a 	add	r16,r18,r16
    de54:	b0001126 	beq	r22,zero,de9c <__call_exitprocs+0xa4>
    de58:	80804017 	ldw	r2,256(r16)
    de5c:	15800f26 	beq	r2,r22,de9c <__call_exitprocs+0xa4>
    de60:	8c7fffc4 	addi	r17,r17,-1
    de64:	88bfffd8 	cmpnei	r2,r17,-1
    de68:	843fff04 	addi	r16,r16,-4
    de6c:	103ff91e 	bne	r2,zero,de54 <__call_exitprocs+0x5c>
    de70:	dfc00817 	ldw	ra,32(sp)
    de74:	ddc00717 	ldw	r23,28(sp)
    de78:	dd800617 	ldw	r22,24(sp)
    de7c:	dd400517 	ldw	r21,20(sp)
    de80:	dd000417 	ldw	r20,16(sp)
    de84:	dcc00317 	ldw	r19,12(sp)
    de88:	dc800217 	ldw	r18,8(sp)
    de8c:	dc400117 	ldw	r17,4(sp)
    de90:	dc000017 	ldw	r16,0(sp)
    de94:	dec00904 	addi	sp,sp,36
    de98:	f800283a 	ret
    de9c:	90800117 	ldw	r2,4(r18)
    dea0:	81800017 	ldw	r6,0(r16)
    dea4:	10bfffc4 	addi	r2,r2,-1
    dea8:	14401726 	beq	r2,r17,df08 <__call_exitprocs+0x110>
    deac:	80000015 	stw	zero,0(r16)
    deb0:	303feb26 	beq	r6,zero,de60 <__call_exitprocs+0x68>
    deb4:	a446983a 	sll	r3,r20,r17
    deb8:	90806217 	ldw	r2,392(r18)
    debc:	95c00117 	ldw	r23,4(r18)
    dec0:	1884703a 	and	r2,r3,r2
    dec4:	1000081e 	bne	r2,zero,dee8 <__call_exitprocs+0xf0>
    dec8:	303ee83a 	callr	r6
    decc:	90c00117 	ldw	r3,4(r18)
    ded0:	98805217 	ldw	r2,328(r19)
    ded4:	1dc0011e 	bne	r3,r23,dedc <__call_exitprocs+0xe4>
    ded8:	90bfe126 	beq	r18,r2,de60 <__call_exitprocs+0x68>
    dedc:	103fe426 	beq	r2,zero,de70 <__call_exitprocs+0x78>
    dee0:	1025883a 	mov	r18,r2
    dee4:	003fd506 	br	de3c <__call_exitprocs+0x44>
    dee8:	90806317 	ldw	r2,396(r18)
    deec:	81002017 	ldw	r4,128(r16)
    def0:	1886703a 	and	r3,r3,r2
    def4:	1800061e 	bne	r3,zero,df10 <__call_exitprocs+0x118>
    def8:	200b883a 	mov	r5,r4
    defc:	a809883a 	mov	r4,r21
    df00:	303ee83a 	callr	r6
    df04:	003ff106 	br	decc <__call_exitprocs+0xd4>
    df08:	94400115 	stw	r17,4(r18)
    df0c:	003fe806 	br	deb0 <__call_exitprocs+0xb8>
    df10:	303ee83a 	callr	r6
    df14:	003fed06 	br	decc <__call_exitprocs+0xd4>

0000df18 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    df18:	defffd04 	addi	sp,sp,-12
    df1c:	df000215 	stw	fp,8(sp)
    df20:	df000204 	addi	fp,sp,8
    df24:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    df28:	d026e545 	stb	zero,-25707(gp)
    df2c:	e0bffe17 	ldw	r2,-8(fp)
    df30:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    df34:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    df38:	10000226 	beq	r2,zero,df44 <_exit+0x2c>
    ALT_SIM_FAIL();
    df3c:	002af070 	cmpltui	zero,zero,43969
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
    df40:	00000106 	br	df48 <_exit+0x30>
    ALT_SIM_PASS();
    df44:	002af0b0 	cmpltui	zero,zero,43970
}
    df48:	0001883a 	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    df4c:	003fff06 	br	df4c <_exit+0x34>
