
test_prob_6.elf:     file format elf32-littlenios2
test_prob_6.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0000023c

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0000f734 memsz 0x0000f734 flags r-x
    LOAD off    0x00010754 vaddr 0x0000f754 paddr 0x00011554 align 2**12
         filesz 0x00001e00 memsz 0x00001e00 flags rw-
    LOAD off    0x00013354 vaddr 0x00013354 paddr 0x00013354 align 2**12
         filesz 0x00000000 memsz 0x000073d4 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000021c  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000f264  0000023c  0000023c  0000123c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000002b4  0000f4a0  0000f4a0  000104a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001e00  0000f754  00011554  00010754  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000073d4  00013354  00013354  00013354  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  0001a728  0001a728  00012554  2**0
                  CONTENTS
  7 .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM 00000000  09000000  09000000  00012554  2**0
                  CONTENTS
  8 .comment      0000002d  00000000  00000000  00012554  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000c00  00000000  00000000  00012588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_info   00022cdc  00000000  00000000  00013188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00008aba  00000000  00000000  00035e64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line   0000df1b  00000000  00000000  0003e91e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_frame  00002d84  00000000  00000000  0004c83c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    000043f8  00000000  00000000  0004f5c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00005f1e  00000000  00000000  000539b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_alt_sim_info 00000020  00000000  00000000  000598d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000008d8  00000000  00000000  000598f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .thread_model 00000006  00000000  00000000  0005eb81  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  0005eb87  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0005eb8c  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0005eb8d  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0005eb8e  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0005eb92  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0005eb96  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  0005eb9a  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  0005eba3  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  0005ebac  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000f  00000000  00000000  0005ebb5  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000005a  00000000  00000000  0005ebc4  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     001d2080  00000000  00000000  0005ec1e  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
0000023c l    d  .text	00000000 .text
0000f4a0 l    d  .rodata	00000000 .rodata
0000f754 l    d  .rwdata	00000000 .rwdata
00013354 l    d  .bss	00000000 .bss
0001a728 l    d  .SDRAM	00000000 .SDRAM
09000000 l    d  .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM	00000000 .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 /home/xix277/engr-ece/Winter_Sem_2022/CME332/asn_test/test_prob_6_bsp//obj/HAL/src/crt0.o
00000274 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
00000558 l     F .text	00000008 __fp_lock
0000056c l     F .text	00000008 __fp_unlock
00000574 l     F .text	00000168 __sinit.part.0
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0000f754 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
000023d4 l     F .text	000000c0 _fclose_r.part.0
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_close.c
00003214 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00003320 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000334c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00003438 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00003518 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00003604 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
000037d4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000114c8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00003a1c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
000114cc l     O .rwdata	00000004 lockid
00013378 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
000114d0 l     O .rwdata	00000004 lockid
00013380 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
00005480 l     F .text	00000048 OS_InitMisc
000054c8 l     F .text	0000006c OS_InitRdyList
0000563c l     F .text	000000e4 OS_InitTCBList
000053a0 l     F .text	000000e0 OS_InitEventList
00005534 l     F .text	00000084 OS_InitTaskIdle
000055b8 l     F .text	00000084 OS_InitTaskStat
000058b0 l     F .text	0000006c OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
00007668 l     F .text	000000f4 OS_FlagTaskRdy
00007424 l     F .text	00000164 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000b7bc l     F .text	00000034 alt_dev_reg
00010128 l     O .rwdata	0000106c JTAG_UART
00011194 l     O .rwdata	00000030 AV_Config
000111c4 l     O .rwdata	00000030 Audio_Subsystem_Audio
000111f4 l     O .rwdata	0000002c Char_LCD_16x2
00011220 l     O .rwdata	0000002c IrDA
0001124c l     O .rwdata	00000038 PS2_Port
00011284 l     O .rwdata	00000038 PS2_Port_Dual
000112bc l     O .rwdata	0000002c Serial_Port
000112e8 l     O .rwdata	00000034 USB
0001131c l     O .rwdata	0000005c VGA_Subsystem_Char_Buf_Subsystem_Char_Buf_DMA
00011378 l     O .rwdata	0000005c VGA_Subsystem_VGA_Pixel_DMA
000113d4 l     O .rwdata	0000005c Video_In_Subsystem_Video_In_DMA
00011430 l     O .rwdata	00000044 VGA_Subsystem_VGA_Pixel_RGB_Resampler
00011474 l     O .rwdata	0000002c SD_Card
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000c2a8 l     F .text	000002b0 altera_avalon_jtag_uart_irq
0000c558 l     F .text	0000010c altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000cd58 l     F .text	00000080 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_irda.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000e274 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000e4e4 l     F .text	000000b0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0000e790 l     F .text	0000003c alt_get_errno
0000e7cc l     F .text	000000b8 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
000133d8 g     O .bss	00000004 alt_instruction_exception_handler
0001151e g     O .rwdata	00000002 OSTaskNameSize
00003008 g     F .text	00000058 _isatty_r
00003714 g     F .text	000000c0 alt_main
000003e4 g     F .text	000000cc _puts_r
0001a628 g     O .bss	00000100 alt_irq
0000d928 g     F .text	00000060 alt_up_ps2_disable_read_interrupt
00002c98 g     F .text	00000064 _lseek_r
00007eac g     F .text	000000cc OS_MemInit
00011554 g       *ABS*	00000000 __flash_rwdata_start
0000b758 g     F .text	00000064 OSTimeSet
0000cec8 g     F .text	00000040 alt_up_character_lcd_send_cmd
000040d8 g     F .text	00000638 OSEventPendMulti
0001a728 g       *ABS*	00000000 __alt_heap_start
0000edc4 g     F .text	00000024 OSTaskCreateHook
000114f6 g     O .rwdata	00000002 OSMboxEn
0000034c g     F .text	00000038 TestTaskB
00004768 g     F .text	0000004c OSIntEnter
00002150 g     F .text	0000005c __sseek
000008ac g     F .text	00000010 __sinit
0000d740 g     F .text	00000034 read_CE_bit
00011506 g     O .rwdata	00000002 OSQEn
000006dc g     F .text	00000068 __sfmoreglue
00003d98 g     F .text	000000d4 __malloc_unlock
0000ee2c g     F .text	00000020 OSTaskStatHook
0000dac8 g     F .text	0000009c alt_up_ps2_read_data_byte_timeout
0000dfc0 g     F .text	00000090 alt_up_rs232_read_fd
0001339e g     O .bss	00000001 OSLockNesting
00011544 g     O .rwdata	00000002 OSDataSize
000133a5 g     O .bss	00000001 OSRunning
0000189c g     F .text	0000012c memmove
0000ee6c g     F .text	00000020 OSInitHookBegin
0001153c g     O .rwdata	00000002 OSTmrSize
00000898 g     F .text	00000014 _cleanup
000133a8 g     O .bss	00000004 OSIdleCtr
0000eb84 g     F .text	00000024 altera_nios2_gen2_irq_init
0000ec54 g       .text	00000000 OSStartTsk
0000ce54 g     F .text	00000074 get_DDRAM_addr
00005bcc g     F .text	000002e0 OS_TCBInit
00000000 g     F .entry	0000001c __reset
00011542 g     O .rwdata	00000002 OSTmrWheelTblSize
00000020 g       *ABS*	00000000 __flash_exceptions_start
000114e2 g     O .rwdata	00000002 OSEventSize
000133a0 g     O .bss	00000001 OSPrioHighRdy
00002fa8 g     F .text	00000060 _fstat_r
0000ede8 g     F .text	00000024 OSTaskDelHook
00013360 g     O .bss	00000004 errno
000020c8 g     F .text	00000008 __seofread
0000ec34 g       .text	00000000 OSStartHighRdy
0000a1d4 g     F .text	000001dc OSTaskCreateExt
00006f4c g     F .text	00000064 OSFlagPendGetFlagsRdy
00011522 g     O .rwdata	00000002 OSTaskStatStkSize
0000603c g     F .text	00000324 OSFlagAccept
000084fc g     F .text	000000bc OSQFlush
00007f78 g     F .text	00000144 OSQAccept
0001336c g     O .bss	00000004 alt_argv
000194a0 g       *ABS*	00000000 _gp
0000a030 g     F .text	000001a4 OSTaskCreate
00009b6c g     F .text	000004c4 OSTaskChangePrio
0001337c g     O .bss	00000004 alt_heapsem
00005eac g     F .text	00000190 OSDebugInit
0000a3b0 g     F .text	00000344 OSTaskDel
0000ffa8 g     O .rwdata	00000180 alt_fd_list
00017f44 g     O .bss	00000370 OSFlagTbl
00005188 g     F .text	000000b0 OS_EventTaskRemove
0000e420 g     F .text	00000090 alt_find_dev
0000179c g     F .text	00000100 memcpy
0001150c g     O .rwdata	00000002 OSRdyTblSize
0000d078 g     F .text	00000050 alt_up_character_lcd_write_fd
00000560 g     F .text	0000000c _cleanup_r
0000e594 g     F .text	0000007c alt_io_redirect
0000f4a0 g       *ABS*	00000000 __DTOR_END__
0000d610 g     F .text	00000090 alt_up_irda_write_fd
0000df4c g     F .text	00000074 alt_up_rs232_read_data
000004b0 g     F .text	00000010 puts
0000f160 g     F .text	00000098 alt_exception_cause_generated_bad_addr
00003e6c g     F .text	00000124 OSEventNameGet
000114f0 g     O .rwdata	00000002 OSFlagMax
000047b4 g     F .text	000000f4 OSIntExit
0001152a g     O .rwdata	00000002 OSTCBSize
0001339f g     O .bss	00000001 OSPrioCur
0000d40c g     F .text	00000040 alt_up_irda_get_used_space_in_read_FIFO
0000c7c0 g     F .text	000002c8 altera_avalon_jtag_uart_read
00003154 g     F .text	00000064 .hidden __udivsi3
00003474 g     F .text	000000a4 isatty
00011510 g     O .rwdata	00000002 OSStkWidth
00011504 g     O .rwdata	00000002 OSPtrSize
000114e4 g     O .rwdata	00000002 OSEventTblSize
0000d3ac g     F .text	00000060 alt_up_irda_disable_read_interrupt
0000eba8 g       .text	00000000 OSCtxSw
0000f0d0 g     F .text	00000090 alt_icache_flush
0001335c g     O .bss	00000004 __malloc_top_pad
000133b8 g     O .bss	00000004 OSTCBList
00013364 g     O .bss	00000004 alt_fd_list_lock
000008f4 g     F .text	000004b8 __sfvwrite_r
00019818 g     O .bss	00000c30 OSMemTbl
000133bc g     O .bss	00000001 OSTickStepState
0000201c g     F .text	00000058 _sbrk_r
00011508 g     O .rwdata	00000002 OSQMax
000182b4 g     O .bss	00000800 OSTaskStatStk
00007ad0 g     F .text	000000f4 OSMemNameGet
000114e8 g     O .rwdata	00000002 OSFlagEn
00002f44 g     F .text	00000064 _read_r
0001152e g     O .rwdata	00000002 OSTimeTickHookEn
000089c4 g     F .text	00000174 OSQPost
0000775c g     F .text	000000a4 OS_FlagUnlink
000114c0 g     O .rwdata	00000004 alt_max_fd
0000dec8 g     F .text	00000044 alt_up_rs232_check_parity
00005778 g     F .text	0000006c OS_MemCopy
000057e4 g     F .text	000000cc OS_Sched
00002494 g     F .text	00000070 _fclose_r
000079d8 g     F .text	000000f8 OSMemGet
0000a9e8 g     F .text	000001bc OSTaskNameSet
0000d774 g     F .text	00000030 read_num_bytes_available
000027fc g     F .text	00000084 fflush
00013358 g     O .bss	00000004 __malloc_max_sbrked_mem
00013384 g     O .bss	00000004 OSCtxSwCtr
0000ee4c g     F .text	00000020 OSTimeTickHook
0000e610 g     F .text	00000180 alt_irq_register
000114f2 g     O .rwdata	00000002 OSFlagNameSize
0000d6dc g     F .text	00000034 read_RI_bit
00005238 g     F .text	000000fc OS_EventTaskRemoveMulti
00005040 g     F .text	00000148 OS_EventTaskWaitMulti
0001150a g     O .rwdata	00000002 OSQSize
00003640 g     F .text	000000d4 lseek
000094b4 g     F .text	00000214 OSSemPend
000114a0 g     O .rwdata	00000004 _global_impure_ptr
00001ab8 g     F .text	00000564 _realloc_r
000114f4 g     O .rwdata	00000002 OSLowestPrio
0001a728 g       *ABS*	00000000 __bss_end
0000eecc g     F .text	00000024 OSTCBInitHook
0001153a g     O .rwdata	00000002 OSTmrCfgTicksPerSec
0000ea7c g     F .text	00000108 alt_tick
000114dc g     O .rwdata	00000002 OSEventEn
00011536 g     O .rwdata	00000002 OSTmrCfgNameSize
0000d7d8 g     F .text	0000002c read_data_byte
000008cc g     F .text	00000014 __fp_lock_all
00007588 g     F .text	000000e0 OS_FlagInit
0000e9d8 g     F .text	000000a4 alt_alarm_stop
0000d710 g     F .text	00000030 read_RE_bit
00011518 g     O .rwdata	00000002 OSTaskIdleStkSize
000133cc g     O .bss	00000004 alt_irq_active
000090d4 g     F .text	000000b4 OSSemAccept
00007ce0 g     F .text	000000e0 OSMemPut
00007800 g     F .text	000001d8 OSMemCreate
00013394 g     O .bss	00000004 OSIdleCtrMax
0000d44c g     F .text	0000003c alt_up_irda_get_available_space_in_write_FIFO
000000fc g     F .exceptions	000000cc alt_irq_handler
0000ff80 g     O .rwdata	00000028 alt_dev_null
0001152c g     O .rwdata	00000002 OSTicksPerSec
0000d318 g     F .text	00000038 alt_up_character_lcd_cursor_blink_on
0000eba8 g       .text	00000000 OSIntCtxSw
0000d988 g     F .text	00000074 alt_up_ps2_write_data_byte
0000e254 g     F .text	00000020 alt_dcache_flush_all
000133b0 g     O .bss	00000004 OSTCBFreeList
00011554 g       *ABS*	00000000 __ram_rwdata_end
000096c8 g     F .text	00000174 OSSemPendAbort
000114b8 g     O .rwdata	00000008 alt_dev_list
00003a58 g     F .text	000000f8 write
00011530 g     O .rwdata	00000002 OSVersionNbr
0000f754 g       *ABS*	00000000 __ram_rodata_end
00003388 g     F .text	000000b0 fstat
0000e050 g     F .text	00000094 alt_up_rs232_write_fd
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
000114d8 g     O .rwdata	00000004 OSEndiannessTest
000031b8 g     F .text	0000005c .hidden __umodsi3
000114ea g     O .rwdata	00000002 OSFlagGrpSize
0001a728 g       *ABS*	00000000 end
0000dcbc g     F .text	00000098 alt_up_ps2_write_fd
0000d488 g     F .text	00000044 alt_up_irda_check_parity
0000c164 g     F .text	00000144 altera_avalon_jtag_uart_init
00005a44 g     F .text	000000c4 OS_TaskStat
000001c8 g     F .exceptions	00000074 alt_instruction_exception_entry
0000f4a0 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
0000cdd8 g     F .text	0000007c alt_avalon_timer_sc_init
0000ca88 g     F .text	000002d0 altera_avalon_jtag_uart_write
000008bc g     F .text	00000004 __sfp_lock_acquire
000016cc g     F .text	000000d0 memchr
00005720 g     F .text	00000058 OS_MemClr
0000cf7c g     F .text	00000080 alt_up_character_lcd_write
0000ec78 g     F .text	0000014c OSTaskStkInit
0000299c g     F .text	000002fc _free_r
00004db0 g     F .text	00000188 OS_EventTaskRdy
0000f348 g     F .text	00000120 __call_exitprocs
00013390 g     O .bss	00000001 OSCPUUsage
000114a8 g     O .rwdata	00000004 __malloc_sbrk_base
0000023c g     F .text	0000003c _start
000133d0 g     O .bss	00000004 _alt_tick_rate
000085b8 g     F .text	00000298 OSQPend
0000b2bc g     F .text	00000108 OSTimeDly
000133d4 g     O .bss	00000004 _alt_nticks
00003810 g     F .text	000000fc read
0000b82c g     F .text	000007d4 alt_sys_init
0000d1c8 g     F .text	0000008c alt_up_character_lcd_shift_display
0000f2b8 g     F .text	00000090 __register_exitproc
000133a6 g     O .bss	00000001 OSTaskCtr
000143dc g     O .bss	00001000 TestTaskStkB
0000dbd4 g     F .text	0000005c alt_up_ps2_clear_fifo
0000de8c g     F .text	0000003c alt_up_rs232_get_available_space_in_write_FIFO
0000b3c4 g     F .text	00000154 OSTimeDlyHMSM
0000d254 g     F .text	0000008c alt_up_character_lcd_erase_pos
0000c664 g     F .text	00000068 altera_avalon_jtag_uart_close
0000f754 g       *ABS*	00000000 __ram_rwdata_start
0000f4a0 g       *ABS*	00000000 __ram_rodata_start
000173dc g     O .bss	00000028 __malloc_current_mallinfo
000114de g     O .rwdata	00000002 OSEventMax
0000983c g     F .text	0000011c OSSemPost
00004938 g     F .text	000000e4 OSSchedUnlock
0000c000 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000eff8 g     F .text	000000d8 alt_get_fd
000133c0 g     O .bss	00000004 OSMemFreeList
00004a84 g     F .text	000000b8 OSStatInit
0000735c g     F .text	000000c8 OSFlagQuery
00011514 g     O .rwdata	00000002 OSTaskCreateExtEn
0000237c g     F .text	00000058 _close_r
000133dc g     O .bss	00001000 TestTaskStkA
0000f240 g     F .text	00000078 memcmp
00004d90 g     F .text	00000020 OS_Dummy
0000c0c0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0001a728 g       *ABS*	00000000 __alt_stack_base
0000c110 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000002c0 g     F .text	0000008c TestTaskA
0000d350 g     F .text	0000005c alt_up_irda_enable_read_interrupt
00002218 g     F .text	00000164 __swsetup_r
0001a448 g     O .bss	000001e0 OSQTbl
00000744 g     F .text	00000154 __sfp
0000fb78 g     O .rwdata	00000408 __malloc_av_
000008c8 g     F .text	00000004 __sinit_lock_release
000133b4 g     O .bss	00000004 OSTCBHighRdy
00002074 g     F .text	00000054 __sread
000133c4 g     O .bss	00000004 OSQFreeList
0000ddec g     F .text	00000060 alt_up_rs232_disable_read_interrupt
0000eef0 g     F .text	00000108 alt_find_file
0000e2b0 g     F .text	000000a8 alt_dev_llist_insert
00003c70 g     F .text	00000128 __malloc_lock
00003964 g     F .text	000000b8 sbrk
00003f90 g     F .text	00000148 OSEventNameSet
0000279c g     F .text	00000060 _fflush_r
000133a1 g     O .bss	00000001 OSRdyGrp
00013354 g       *ABS*	00000000 __bss_start
000019c8 g     F .text	000000f0 memset
00000278 g     F .text	00000048 main
00013370 g     O .bss	00000004 alt_envp
00013354 g     O .bss	00000004 __malloc_max_total_mem
0000c060 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000f4d8 g     O .rodata	00000100 OSUnMapTbl
0001150e g     O .rwdata	00000002 OSSemEn
0000d13c g     F .text	0000008c alt_up_character_lcd_shift_cursor
00006fb0 g     F .text	000003ac OSFlagPost
000021ac g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
00002504 g     F .text	00000070 fclose
00004f38 g     F .text	00000108 OS_EventTaskWait
0000db64 g     F .text	00000070 alt_up_ps2_read_data_byte
00005b08 g     F .text	000000c4 OS_TaskStatStkChk
0000a6f4 g     F .text	00000158 OSTaskDelReq
00000eec g     F .text	000007e0 _malloc_r
000114c4 g     O .rwdata	00000004 alt_errno
00004a1c g     F .text	00000068 OSStart
00003c10 g     F .text	00000060 __env_unlock
00000dac g     F .text	00000098 _fwalk
0000aba4 g     F .text	000001e0 OSTaskResume
00007dc0 g     F .text	000000ec OSMemQuery
00011520 g     O .rwdata	00000002 OSTaskStatEn
0000d4cc g     F .text	00000040 alt_up_irda_write_data
000114fa g     O .rwdata	00000002 OSMemMax
00008b38 g     F .text	0000017c OSQPostFront
0000dd54 g     F .text	0000003c alt_up_ps2_open_dev
00003060 g     F .text	00000080 .hidden __divsi3
000133a2 g     O .bss	00000003 OSRdyTbl
000114d4 g     O .rwdata	00000002 OSDebugEn
0000cf40 g     F .text	0000003c alt_up_character_lcd_open_dev
00002880 g     F .text	0000011c _malloc_trim_r
0000d8cc g     F .text	0000005c alt_up_ps2_enable_read_interrupt
0000f4a0 g       *ABS*	00000000 __CTOR_END__
000114ec g     O .rwdata	00000002 OSFlagNodeSize
00011534 g     O .rwdata	00000002 OSTmrCfgMax
0000cf08 g     F .text	00000038 alt_up_character_lcd_init
000080bc g     F .text	000001b0 OSQCreate
0000a84c g     F .text	0000019c OSTaskNameGet
0000f4a0 g       *ABS*	00000000 __flash_rodata_start
00008cb4 g     F .text	00000218 OSQPostOpt
00004b3c g     F .text	00000234 OSTimeTick
0001151c g     O .rwdata	00000002 OSTaskMax
0000f4a0 g       *ABS*	00000000 __DTOR_LIST__
00009188 g     F .text	000000dc OSSemCreate
00011540 g     O .rwdata	00000002 OSTmrWheelSize
0000e0e4 g     F .text	0000003c alt_up_rs232_open_dev
00011516 g     O .rwdata	00000002 OSTaskDelEn
000003b0 g     F .text	00000034 TestTaskD
00009958 g     F .text	00000114 OSSemQuery
0000826c g     F .text	00000290 OSQDel
00008850 g     F .text	00000174 OSQPendAbort
0000b7f0 g     F .text	0000003c alt_irq_init
0000390c g     F .text	00000058 alt_release_fd
0000d7a4 g     F .text	00000034 read_data_valid
0000d2e0 g     F .text	00000038 alt_up_character_lcd_cursor_off
0000da64 g     F .text	00000064 alt_up_ps2_write_data_byte_with_ack
0000f1f8 g     F .text	00000014 atexit
000021b4 g     F .text	00000064 _write_r
000048a8 g     F .text	00000090 OSSchedLock
00006360 g     F .text	00000110 OSFlagCreate
000114a4 g     O .rwdata	00000004 _impure_ptr
00013368 g     O .bss	00000004 alt_argc
00002574 g     F .text	00000228 __sflush_r
0000e3bc g     F .text	00000064 _do_dtors
000114e6 g     O .rwdata	00000002 OSEventMultiEn
09000000 g       *ABS*	00000000 __alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM
00006470 g     F .text	00000258 OSFlagDel
00013388 g     O .bss	00000004 OSEventFreeList
00000020 g       .exceptions	00000000 alt_irq_entry
0000694c g     F .text	00000600 OSFlagPend
00011532 g     O .rwdata	00000002 OSTmrEn
000008e0 g     F .text	00000014 __fp_unlock_all
000114b0 g     O .rwdata	00000008 alt_fs_list
0000591c g     F .text	00000074 OS_StrCopy
0000dd90 g     F .text	0000005c alt_up_rs232_enable_read_interrupt
0000df0c g     F .text	00000040 alt_up_rs232_write_data
000114fc g     O .rwdata	00000002 OSMemNameSize
0000ee8c g     F .text	00000020 OSInitHookEnd
00000020 g       *ABS*	00000000 __ram_exceptions_start
00011528 g     O .rwdata	00000002 OSTCBPrioTblMax
00002eac g     F .text	00000098 __swhatbuf_r
00011524 g     O .rwdata	00000002 OSTaskStatStkChkEn
000114f8 g     O .rwdata	00000002 OSMemEn
00011502 g     O .rwdata	00000002 OSMutexEn
00011554 g       *ABS*	00000000 _edata
0001a728 g       *ABS*	00000000 _end
0001339d g     O .bss	00000001 OSIntNesting
00000384 g     F .text	0000002c TestTaskC
0000023c g       *ABS*	00000000 __ram_exceptions_end
0000c6cc g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0000b518 g     F .text	000001e0 OSTimeDlyResume
000067f8 g     F .text	00000154 OSFlagNameSet
0000ad84 g     F .text	000001b8 OSTaskStkChk
000114fe g     O .rwdata	00000002 OSMemSize
000020d0 g     F .text	00000080 __swrite
000114ac g     O .rwdata	00000004 __malloc_trim_threshold
000133ac g     O .bss	00000004 OSTCBCur
0000f20c g     F .text	00000034 exit
0000d50c g     F .text	00000074 alt_up_irda_read_data
00011500 g     O .rwdata	00000002 OSMemTblSize
00000e44 g     F .text	000000a8 _fwalk_reent
0000d804 g     F .text	000000c8 alt_up_ps2_init
000030e0 g     F .text	00000074 .hidden __modsi3
04000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
000008c0 g     F .text	00000004 __sfp_lock_release
00004710 g     F .text	00000058 OSInit
0000b124 g     F .text	00000128 OSTaskQuery
0000cffc g     F .text	0000007c alt_up_character_lcd_string
0000902c g     F .text	000000a8 OS_QInit
00005990 g     F .text	00000054 OS_StrLen
0000d6a0 g     F .text	0000003c alt_up_irda_open_dev
00007bc4 g     F .text	0000011c OSMemNameSet
0001151a g     O .rwdata	00000002 OSTaskProfileEn
000133c8 g     O .bss	00000004 OSTime
00018ab4 g     O .bss	00000800 OSTaskIdleStk
0000f468 g     F .text	00000038 _exit
000153dc g     O .bss	00001000 TestTaskStkC
0000e120 g     F .text	00000134 alt_alarm_start
000066c8 g     F .text	00000130 OSFlagNameGet
0000b6f8 g     F .text	00000060 OSTimeGet
00002cfc g     F .text	000001b0 __smakebuf_r
0000d9fc g     F .text	00000068 alt_up_ps2_wait_for_ack
000004c0 g     F .text	00000098 strlen
0000ee0c g     F .text	00000020 OSTaskSwHook
0000e884 g     F .text	00000154 open
00017404 g     O .bss	00000b40 OSEventTbl
00019308 g     O .bss	00000510 OSTCBTbl
00009a6c g     F .text	00000100 OSSemSet
0000e4b0 g     F .text	00000034 alt_icache_flush_all
0000d0c8 g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
00011548 g     O .rwdata	00000004 alt_priority_mask
00009264 g     F .text	00000250 OSSemDel
0001338c g     O .bss	00000004 OSFlagFreeList
000114e0 g     O .rwdata	00000002 OSEventNameSize
0001339c g     O .bss	00000001 OSStatRdy
000192b4 g     O .bss	00000054 OSTCBPrioTbl
00003b50 g     F .text	000000c0 __env_lock
0000dc30 g     F .text	0000008c alt_up_ps2_read_fd
00011526 g     O .rwdata	00000002 OSTaskSwHookEn
0000d580 g     F .text	00000090 alt_up_irda_read_fd
0001154c g     O .rwdata	00000008 alt_alarm_list
000114ee g     O .rwdata	00000002 OSFlagWidth
0000e358 g     F .text	00000064 _do_ctors
000163dc g     O .bss	00001000 TestTaskStkD
0000de4c g     F .text	00000040 alt_up_rs232_get_used_space_in_read_FIFO
00003250 g     F .text	000000d0 close
00013374 g     O .bss	00000004 alt_envsem
00013398 g     O .bss	00000004 OSIdleCtrRun
00004d70 g     F .text	00000020 OSVersion
00011538 g     O .rwdata	00000002 OSTmrCfgWheelSize
00003580 g     F .text	00000084 alt_load
0000b24c g     F .text	00000070 OS_TaskStkClr
00011512 g     O .rwdata	00000002 OSTaskCreateEn
00005334 g     F .text	0000006c OS_EventWaitListInit
0000eeac g     F .text	00000020 OSTaskIdleHook
000008c4 g     F .text	00000004 __sinit_lock_acquire
0000af3c g     F .text	000001e8 OSTaskSuspend
000059e4 g     F .text	00000060 OS_TaskIdle
0001153e g     O .rwdata	00000002 OSTmrTblSize
00008ecc g     F .text	00000160 OSQQuery



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08408f14 	ori	at,at,572
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <OSCtxSw_SWITCH_PC+0x68>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001c80 	call	1c8 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <OSCtxSw_SWITCH_PC+0x68>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	00047680 	call	4768 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffc15 	stw	r2,-16(fp)

  return active;
 118:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0ffff17 	ldw	r3,-4(fp)
 130:	e0bffe17 	ldw	r2,-8(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001226 	beq	r2,zero,184 <alt_irq_handler+0x88>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 13c:	e0bffd17 	ldw	r2,-12(fp)
 140:	100690fa 	slli	r3,r2,3
 144:	008000b4 	movhi	r2,2
 148:	1885883a 	add	r2,r3,r2
 14c:	10e98a17 	ldw	r3,-23000(r2)
 150:	e0bffd17 	ldw	r2,-12(fp)
 154:	100890fa 	slli	r4,r2,3
 158:	008000b4 	movhi	r2,2
 15c:	2085883a 	add	r2,r4,r2
 160:	10a98b17 	ldw	r2,-22996(r2)
 164:	e17ffd17 	ldw	r5,-12(fp)
 168:	1009883a 	mov	r4,r2
 16c:	183ee83a 	callr	r3
#endif
        break;
 170:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
 174:	0005313a 	rdctl	r2,ipending
 178:	e0bffb15 	stw	r2,-20(fp)
  return active;
 17c:	e0bffb17 	ldw	r2,-20(fp)
 180:	00000706 	br	1a0 <alt_irq_handler+0xa4>
      }
      mask <<= 1;
 184:	e0bffe17 	ldw	r2,-8(fp)
 188:	1085883a 	add	r2,r2,r2
 18c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 190:	e0bffd17 	ldw	r2,-12(fp)
 194:	10800044 	addi	r2,r2,1
 198:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
 19c:	003fe306 	br	12c <alt_irq_handler+0x30>

    } while (1);

    active = alt_irq_pending ();
 1a0:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 1a4:	e0bfff17 	ldw	r2,-4(fp)
 1a8:	103fdd1e 	bne	r2,zero,120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1ac:	00047b40 	call	47b4 <OSIntExit>
}
 1b0:	0001883a 	nop
 1b4:	e037883a 	mov	sp,fp
 1b8:	dfc00117 	ldw	ra,4(sp)
 1bc:	df000017 	ldw	fp,0(sp)
 1c0:	dec00204 	addi	sp,sp,8
 1c4:	f800283a 	ret

000001c8 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1c8:	defffb04 	addi	sp,sp,-20
 1cc:	dfc00415 	stw	ra,16(sp)
 1d0:	df000315 	stw	fp,12(sp)
 1d4:	df000304 	addi	fp,sp,12
 1d8:	e13ffd15 	stw	r4,-12(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1dc:	000531fa 	rdctl	r2,exception
 1e0:	e0bfff15 	stw	r2,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1e4:	e0bfff17 	ldw	r2,-4(fp)
 1e8:	1004d0ba 	srli	r2,r2,2
 1ec:	108007cc 	andi	r2,r2,31
 1f0:	e0bfff15 	stw	r2,-4(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1f4:	0005333a 	rdctl	r2,badaddr
 1f8:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1fc:	d0a7ce17 	ldw	r2,-24776(gp)
 200:	10000726 	beq	r2,zero,220 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 204:	d0a7ce17 	ldw	r2,-24776(gp)
 208:	e0ffff17 	ldw	r3,-4(fp)
 20c:	e1bffe17 	ldw	r6,-8(fp)
 210:	e17ffd17 	ldw	r5,-12(fp)
 214:	1809883a 	mov	r4,r3
 218:	103ee83a 	callr	r2
 21c:	00000206 	br	228 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 220:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 224:	0005883a 	mov	r2,zero
}
 228:	e037883a 	mov	sp,fp
 22c:	dfc00117 	ldw	ra,4(sp)
 230:	df000017 	ldw	fp,0(sp)
 234:	dec00204 	addi	sp,sp,8
 238:	f800283a 	ret

Disassembly of section .text:

0000023c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     23c:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     240:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     244:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     248:	d6a52814 	ori	gp,gp,38048
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     24c:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     250:	108cd514 	ori	r2,r2,13140

    movhi r3, %hi(__bss_end)
     254:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     258:	18e9ca14 	ori	r3,r3,42792

    beq r2, r3, 1f
     25c:	10c00326 	beq	r2,r3,26c <_start+0x30>

0:
    stw zero, (r2)
     260:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     264:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     268:	10fffd36 	bltu	r2,r3,260 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     26c:	00035800 	call	3580 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     270:	00037140 	call	3714 <alt_main>

00000274 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     274:	003fff06 	br	274 <alt_after_alt_main>

00000278 <main>:



int main(void)

{
     278:	defffe04 	addi	sp,sp,-8
     27c:	dfc00115 	stw	ra,4(sp)
     280:	df000015 	stw	fp,0(sp)
     284:	d839883a 	mov	fp,sp

    //OSInit();



    OSTaskCreate(TestTaskA, (void *)0, &TestTaskStkA[TASK_STK_SIZE-1], 1);
     288:	01c00044 	movi	r7,1
     28c:	01800074 	movhi	r6,1
     290:	3190f604 	addi	r6,r6,17368
     294:	000b883a 	mov	r5,zero
     298:	01000034 	movhi	r4,0
     29c:	2100b004 	addi	r4,r4,704
     2a0:	000a0300 	call	a030 <OSTaskCreate>



    OSStart();
     2a4:	0004a1c0 	call	4a1c <OSStart>



    return 0;
     2a8:	0005883a 	mov	r2,zero

}
     2ac:	e037883a 	mov	sp,fp
     2b0:	dfc00117 	ldw	ra,4(sp)
     2b4:	df000017 	ldw	fp,0(sp)
     2b8:	dec00204 	addi	sp,sp,8
     2bc:	f800283a 	ret

000002c0 <TestTaskA>:



void TestTaskA(void *pdata)

{
     2c0:	defffd04 	addi	sp,sp,-12
     2c4:	dfc00215 	stw	ra,8(sp)
     2c8:	df000115 	stw	fp,4(sp)
     2cc:	df000104 	addi	fp,sp,4
     2d0:	e13fff15 	stw	r4,-4(fp)

    printf("A0\n");
     2d4:	01000074 	movhi	r4,1
     2d8:	213d2804 	addi	r4,r4,-2912
     2dc:	00004b00 	call	4b0 <puts>



    OSTaskCreate(TestTaskB, (void *)0, &TestTaskStkB[TASK_STK_SIZE-1], 2);
     2e0:	01c00084 	movi	r7,2
     2e4:	01800074 	movhi	r6,1
     2e8:	3194f604 	addi	r6,r6,21464
     2ec:	000b883a 	mov	r5,zero
     2f0:	01000034 	movhi	r4,0
     2f4:	2100d304 	addi	r4,r4,844
     2f8:	000a0300 	call	a030 <OSTaskCreate>

    OSTaskCreate(TestTaskC, (void *)0, &TestTaskStkC[TASK_STK_SIZE-1], 3);
     2fc:	01c000c4 	movi	r7,3
     300:	01800074 	movhi	r6,1
     304:	3198f604 	addi	r6,r6,25560
     308:	000b883a 	mov	r5,zero
     30c:	01000034 	movhi	r4,0
     310:	2100e104 	addi	r4,r4,900
     314:	000a0300 	call	a030 <OSTaskCreate>

    OSTaskCreate(TestTaskD, (void *)0, &TestTaskStkD[TASK_STK_SIZE-1], 4);
     318:	01c00104 	movi	r7,4
     31c:	01800074 	movhi	r6,1
     320:	319cf604 	addi	r6,r6,29656
     324:	000b883a 	mov	r5,zero
     328:	01000034 	movhi	r4,0
     32c:	2100ec04 	addi	r4,r4,944
     330:	000a0300 	call	a030 <OSTaskCreate>



    while (1)

    {   printf("A1\n");
     334:	01000074 	movhi	r4,1
     338:	213d2904 	addi	r4,r4,-2908
     33c:	00004b00 	call	4b0 <puts>

        OSTaskSuspend(OS_PRIO_SELF);
     340:	01003fc4 	movi	r4,255
     344:	000af3c0 	call	af3c <OSTaskSuspend>
    {   printf("A1\n");
     348:	003ffa06 	br	334 <TestTaskA+0x74>

0000034c <TestTaskB>:



void TestTaskB(void *pdata)

{
     34c:	defffd04 	addi	sp,sp,-12
     350:	dfc00215 	stw	ra,8(sp)
     354:	df000115 	stw	fp,4(sp)
     358:	df000104 	addi	fp,sp,4
     35c:	e13fff15 	stw	r4,-4(fp)

    printf("B0\n");
     360:	01000074 	movhi	r4,1
     364:	213d2a04 	addi	r4,r4,-2904
     368:	00004b00 	call	4b0 <puts>

    while (1)

    {   printf("B1\n");
     36c:	01000074 	movhi	r4,1
     370:	213d2b04 	addi	r4,r4,-2900
     374:	00004b00 	call	4b0 <puts>

        OSTimeDly(1);
     378:	01000044 	movi	r4,1
     37c:	000b2bc0 	call	b2bc <OSTimeDly>
    {   printf("B1\n");
     380:	003ffa06 	br	36c <TestTaskB+0x20>

00000384 <TestTaskC>:



void TestTaskC(void *pdata)

{   while (1)
     384:	defffd04 	addi	sp,sp,-12
     388:	dfc00215 	stw	ra,8(sp)
     38c:	df000115 	stw	fp,4(sp)
     390:	df000104 	addi	fp,sp,4
     394:	e13fff15 	stw	r4,-4(fp)

    {

        printf("C1\n");
     398:	01000074 	movhi	r4,1
     39c:	213d2c04 	addi	r4,r4,-2896
     3a0:	00004b00 	call	4b0 <puts>

        OSTimeDly(2);
     3a4:	01000084 	movi	r4,2
     3a8:	000b2bc0 	call	b2bc <OSTimeDly>
        printf("C1\n");
     3ac:	003ffa06 	br	398 <TestTaskC+0x14>

000003b0 <TestTaskD>:



void TestTaskD(void *pdata)

{   while (1)
     3b0:	defffd04 	addi	sp,sp,-12
     3b4:	dfc00215 	stw	ra,8(sp)
     3b8:	df000115 	stw	fp,4(sp)
     3bc:	df000104 	addi	fp,sp,4
     3c0:	e13fff15 	stw	r4,-4(fp)

    {

        printf("D1\n");
     3c4:	01000074 	movhi	r4,1
     3c8:	213d2d04 	addi	r4,r4,-2892
     3cc:	00004b00 	call	4b0 <puts>

        OSTimeDly(3);
     3d0:	010000c4 	movi	r4,3
     3d4:	000b2bc0 	call	b2bc <OSTimeDly>

        OSTaskResume(1);
     3d8:	01000044 	movi	r4,1
     3dc:	000aba40 	call	aba4 <OSTaskResume>
        printf("D1\n");
     3e0:	003ff806 	br	3c4 <TestTaskD+0x14>

000003e4 <_puts_r>:
     3e4:	defff504 	addi	sp,sp,-44
     3e8:	dc000815 	stw	r16,32(sp)
     3ec:	2021883a 	mov	r16,r4
     3f0:	2809883a 	mov	r4,r5
     3f4:	dc400915 	stw	r17,36(sp)
     3f8:	dfc00a15 	stw	ra,40(sp)
     3fc:	2823883a 	mov	r17,r5
     400:	00004c00 	call	4c0 <strlen>
     404:	11000044 	addi	r4,r2,1
     408:	d8800515 	stw	r2,20(sp)
     40c:	00800044 	movi	r2,1
     410:	00c00074 	movhi	r3,1
     414:	d8800715 	stw	r2,28(sp)
     418:	d8800404 	addi	r2,sp,16
     41c:	18fd2e04 	addi	r3,r3,-2888
     420:	d8800115 	stw	r2,4(sp)
     424:	00800084 	movi	r2,2
     428:	dc400415 	stw	r17,16(sp)
     42c:	d8c00615 	stw	r3,24(sp)
     430:	d9000315 	stw	r4,12(sp)
     434:	d8800215 	stw	r2,8(sp)
     438:	81400217 	ldw	r5,8(r16)
     43c:	80000226 	beq	r16,zero,448 <_puts_r+0x64>
     440:	80800e17 	ldw	r2,56(r16)
     444:	10001326 	beq	r2,zero,494 <_puts_r+0xb0>
     448:	2880030b 	ldhu	r2,12(r5)
     44c:	10c8000c 	andi	r3,r2,8192
     450:	1800061e 	bne	r3,zero,46c <_puts_r+0x88>
     454:	28c01917 	ldw	r3,100(r5)
     458:	0137ffc4 	movi	r4,-8193
     45c:	10880014 	ori	r2,r2,8192
     460:	1906703a 	and	r3,r3,r4
     464:	2880030d 	sth	r2,12(r5)
     468:	28c01915 	stw	r3,100(r5)
     46c:	d9800104 	addi	r6,sp,4
     470:	8009883a 	mov	r4,r16
     474:	00008f40 	call	8f4 <__sfvwrite_r>
     478:	10000b1e 	bne	r2,zero,4a8 <_puts_r+0xc4>
     47c:	00800284 	movi	r2,10
     480:	dfc00a17 	ldw	ra,40(sp)
     484:	dc400917 	ldw	r17,36(sp)
     488:	dc000817 	ldw	r16,32(sp)
     48c:	dec00b04 	addi	sp,sp,44
     490:	f800283a 	ret
     494:	8009883a 	mov	r4,r16
     498:	d9400015 	stw	r5,0(sp)
     49c:	00008ac0 	call	8ac <__sinit>
     4a0:	d9400017 	ldw	r5,0(sp)
     4a4:	003fe806 	br	448 <_puts_r+0x64>
     4a8:	00bfffc4 	movi	r2,-1
     4ac:	003ff406 	br	480 <_puts_r+0x9c>

000004b0 <puts>:
     4b0:	00800074 	movhi	r2,1
     4b4:	200b883a 	mov	r5,r4
     4b8:	11052917 	ldw	r4,5284(r2)
     4bc:	00003e41 	jmpi	3e4 <_puts_r>

000004c0 <strlen>:
     4c0:	208000cc 	andi	r2,r4,3
     4c4:	10000926 	beq	r2,zero,4ec <strlen+0x2c>
     4c8:	2005883a 	mov	r2,r4
     4cc:	00000306 	br	4dc <strlen+0x1c>
     4d0:	10800044 	addi	r2,r2,1
     4d4:	10c000cc 	andi	r3,r2,3
     4d8:	18000526 	beq	r3,zero,4f0 <strlen+0x30>
     4dc:	10c00007 	ldb	r3,0(r2)
     4e0:	183ffb1e 	bne	r3,zero,4d0 <strlen+0x10>
     4e4:	1105c83a 	sub	r2,r2,r4
     4e8:	f800283a 	ret
     4ec:	2005883a 	mov	r2,r4
     4f0:	11400017 	ldw	r5,0(r2)
     4f4:	01ffbff4 	movhi	r7,65279
     4f8:	39ffbfc4 	addi	r7,r7,-257
     4fc:	29c7883a 	add	r3,r5,r7
     500:	01a02074 	movhi	r6,32897
     504:	014a303a 	nor	r5,zero,r5
     508:	1946703a 	and	r3,r3,r5
     50c:	31a02004 	addi	r6,r6,-32640
     510:	1986703a 	and	r3,r3,r6
     514:	1800071e 	bne	r3,zero,534 <strlen+0x74>
     518:	11400117 	ldw	r5,4(r2)
     51c:	10800104 	addi	r2,r2,4
     520:	29c7883a 	add	r3,r5,r7
     524:	014a303a 	nor	r5,zero,r5
     528:	1946703a 	and	r3,r3,r5
     52c:	1986703a 	and	r3,r3,r6
     530:	183ff926 	beq	r3,zero,518 <strlen+0x58>
     534:	10c00007 	ldb	r3,0(r2)
     538:	183fea26 	beq	r3,zero,4e4 <strlen+0x24>
     53c:	10c00047 	ldb	r3,1(r2)
     540:	10800044 	addi	r2,r2,1
     544:	183fe726 	beq	r3,zero,4e4 <strlen+0x24>
     548:	10c00047 	ldb	r3,1(r2)
     54c:	10800044 	addi	r2,r2,1
     550:	183ffa1e 	bne	r3,zero,53c <strlen+0x7c>
     554:	003fe306 	br	4e4 <strlen+0x24>

00000558 <__fp_lock>:
     558:	0005883a 	mov	r2,zero
     55c:	f800283a 	ret

00000560 <_cleanup_r>:
     560:	01400034 	movhi	r5,0
     564:	29492504 	addi	r5,r5,9364
     568:	0000e441 	jmpi	e44 <_fwalk_reent>

0000056c <__fp_unlock>:
     56c:	0005883a 	mov	r2,zero
     570:	f800283a 	ret

00000574 <__sinit.part.0>:
     574:	00c00034 	movhi	r3,0
     578:	20800117 	ldw	r2,4(r4)
     57c:	18c15804 	addi	r3,r3,1376
     580:	20c00f15 	stw	r3,60(r4)
     584:	2140bb04 	addi	r5,r4,748
     588:	00c000c4 	movi	r3,3
     58c:	20c0b915 	stw	r3,740(r4)
     590:	2140ba15 	stw	r5,744(r4)
     594:	2000b815 	stw	zero,736(r4)
     598:	10001705 	stb	zero,92(r2)
     59c:	10001745 	stb	zero,93(r2)
     5a0:	10001785 	stb	zero,94(r2)
     5a4:	100017c5 	stb	zero,95(r2)
     5a8:	10001805 	stb	zero,96(r2)
     5ac:	10001845 	stb	zero,97(r2)
     5b0:	10001885 	stb	zero,98(r2)
     5b4:	100018c5 	stb	zero,99(r2)
     5b8:	00c00104 	movi	r3,4
     5bc:	10c00315 	stw	r3,12(r2)
     5c0:	02000034 	movhi	r8,0
     5c4:	20c00217 	ldw	r3,8(r4)
     5c8:	01c00034 	movhi	r7,0
     5cc:	01800034 	movhi	r6,0
     5d0:	01400034 	movhi	r5,0
     5d4:	42081d04 	addi	r8,r8,8308
     5d8:	39c83404 	addi	r7,r7,8400
     5dc:	31885404 	addi	r6,r6,8528
     5e0:	29486b04 	addi	r5,r5,8620
     5e4:	02400074 	movhi	r9,1
     5e8:	10001915 	stw	zero,100(r2)
     5ec:	10000015 	stw	zero,0(r2)
     5f0:	10000115 	stw	zero,4(r2)
     5f4:	10000215 	stw	zero,8(r2)
     5f8:	10000415 	stw	zero,16(r2)
     5fc:	10000515 	stw	zero,20(r2)
     600:	10000615 	stw	zero,24(r2)
     604:	10800715 	stw	r2,28(r2)
     608:	12000815 	stw	r8,32(r2)
     60c:	11c00915 	stw	r7,36(r2)
     610:	11800a15 	stw	r6,40(r2)
     614:	11400b15 	stw	r5,44(r2)
     618:	4a400284 	addi	r9,r9,10
     61c:	1a400315 	stw	r9,12(r3)
     620:	18001915 	stw	zero,100(r3)
     624:	18000015 	stw	zero,0(r3)
     628:	18000115 	stw	zero,4(r3)
     62c:	18000215 	stw	zero,8(r3)
     630:	18000415 	stw	zero,16(r3)
     634:	18001705 	stb	zero,92(r3)
     638:	18001745 	stb	zero,93(r3)
     63c:	18001785 	stb	zero,94(r3)
     640:	180017c5 	stb	zero,95(r3)
     644:	18001805 	stb	zero,96(r3)
     648:	18001845 	stb	zero,97(r3)
     64c:	18001885 	stb	zero,98(r3)
     650:	180018c5 	stb	zero,99(r3)
     654:	20800317 	ldw	r2,12(r4)
     658:	024000b4 	movhi	r9,2
     65c:	18000515 	stw	zero,20(r3)
     660:	18000615 	stw	zero,24(r3)
     664:	18c00715 	stw	r3,28(r3)
     668:	1a000815 	stw	r8,32(r3)
     66c:	19c00915 	stw	r7,36(r3)
     670:	19800a15 	stw	r6,40(r3)
     674:	19400b15 	stw	r5,44(r3)
     678:	4a400484 	addi	r9,r9,18
     67c:	10001915 	stw	zero,100(r2)
     680:	10000015 	stw	zero,0(r2)
     684:	10000115 	stw	zero,4(r2)
     688:	10000215 	stw	zero,8(r2)
     68c:	12400315 	stw	r9,12(r2)
     690:	10000415 	stw	zero,16(r2)
     694:	10000515 	stw	zero,20(r2)
     698:	10000615 	stw	zero,24(r2)
     69c:	10001705 	stb	zero,92(r2)
     6a0:	10001745 	stb	zero,93(r2)
     6a4:	10001785 	stb	zero,94(r2)
     6a8:	100017c5 	stb	zero,95(r2)
     6ac:	10001805 	stb	zero,96(r2)
     6b0:	10001845 	stb	zero,97(r2)
     6b4:	10001885 	stb	zero,98(r2)
     6b8:	100018c5 	stb	zero,99(r2)
     6bc:	10800715 	stw	r2,28(r2)
     6c0:	12000815 	stw	r8,32(r2)
     6c4:	11c00915 	stw	r7,36(r2)
     6c8:	11800a15 	stw	r6,40(r2)
     6cc:	11400b15 	stw	r5,44(r2)
     6d0:	00800044 	movi	r2,1
     6d4:	20800e15 	stw	r2,56(r4)
     6d8:	f800283a 	ret

000006dc <__sfmoreglue>:
     6dc:	defffc04 	addi	sp,sp,-16
     6e0:	dc400115 	stw	r17,4(sp)
     6e4:	2c7fffc4 	addi	r17,r5,-1
     6e8:	8c401a24 	muli	r17,r17,104
     6ec:	dc800215 	stw	r18,8(sp)
     6f0:	2825883a 	mov	r18,r5
     6f4:	89401d04 	addi	r5,r17,116
     6f8:	dc000015 	stw	r16,0(sp)
     6fc:	dfc00315 	stw	ra,12(sp)
     700:	0000eec0 	call	eec <_malloc_r>
     704:	1021883a 	mov	r16,r2
     708:	10000726 	beq	r2,zero,728 <__sfmoreglue+0x4c>
     70c:	11000304 	addi	r4,r2,12
     710:	10000015 	stw	zero,0(r2)
     714:	14800115 	stw	r18,4(r2)
     718:	11000215 	stw	r4,8(r2)
     71c:	89801a04 	addi	r6,r17,104
     720:	000b883a 	mov	r5,zero
     724:	00019c80 	call	19c8 <memset>
     728:	8005883a 	mov	r2,r16
     72c:	dfc00317 	ldw	ra,12(sp)
     730:	dc800217 	ldw	r18,8(sp)
     734:	dc400117 	ldw	r17,4(sp)
     738:	dc000017 	ldw	r16,0(sp)
     73c:	dec00404 	addi	sp,sp,16
     740:	f800283a 	ret

00000744 <__sfp>:
     744:	defffb04 	addi	sp,sp,-20
     748:	00800074 	movhi	r2,1
     74c:	dc000015 	stw	r16,0(sp)
     750:	14052817 	ldw	r16,5280(r2)
     754:	dc400115 	stw	r17,4(sp)
     758:	dfc00415 	stw	ra,16(sp)
     75c:	80800e17 	ldw	r2,56(r16)
     760:	dcc00315 	stw	r19,12(sp)
     764:	dc800215 	stw	r18,8(sp)
     768:	2023883a 	mov	r17,r4
     76c:	10003126 	beq	r2,zero,834 <__sfp+0xf0>
     770:	8100ba17 	ldw	r4,744(r16)
     774:	8140b917 	ldw	r5,740(r16)
     778:	04c00104 	movi	r19,4
     77c:	8400b804 	addi	r16,r16,736
     780:	297fffc4 	addi	r5,r5,-1
     784:	2800050e 	bge	r5,zero,79c <__sfp+0x58>
     788:	00002406 	br	81c <__sfp+0xd8>
     78c:	297fffc4 	addi	r5,r5,-1
     790:	28bfffd8 	cmpnei	r2,r5,-1
     794:	21001a04 	addi	r4,r4,104
     798:	10002026 	beq	r2,zero,81c <__sfp+0xd8>
     79c:	2080030f 	ldh	r2,12(r4)
     7a0:	103ffa1e 	bne	r2,zero,78c <__sfp+0x48>
     7a4:	00bffff4 	movhi	r2,65535
     7a8:	10800044 	addi	r2,r2,1
     7ac:	20001915 	stw	zero,100(r4)
     7b0:	20000015 	stw	zero,0(r4)
     7b4:	20000115 	stw	zero,4(r4)
     7b8:	20000215 	stw	zero,8(r4)
     7bc:	20800315 	stw	r2,12(r4)
     7c0:	20000415 	stw	zero,16(r4)
     7c4:	20000515 	stw	zero,20(r4)
     7c8:	20000615 	stw	zero,24(r4)
     7cc:	20001705 	stb	zero,92(r4)
     7d0:	20001745 	stb	zero,93(r4)
     7d4:	20001785 	stb	zero,94(r4)
     7d8:	200017c5 	stb	zero,95(r4)
     7dc:	20001805 	stb	zero,96(r4)
     7e0:	20001845 	stb	zero,97(r4)
     7e4:	20001885 	stb	zero,98(r4)
     7e8:	200018c5 	stb	zero,99(r4)
     7ec:	20000c15 	stw	zero,48(r4)
     7f0:	20000d15 	stw	zero,52(r4)
     7f4:	20001115 	stw	zero,68(r4)
     7f8:	20001215 	stw	zero,72(r4)
     7fc:	2005883a 	mov	r2,r4
     800:	dfc00417 	ldw	ra,16(sp)
     804:	dcc00317 	ldw	r19,12(sp)
     808:	dc800217 	ldw	r18,8(sp)
     80c:	dc400117 	ldw	r17,4(sp)
     810:	dc000017 	ldw	r16,0(sp)
     814:	dec00504 	addi	sp,sp,20
     818:	f800283a 	ret
     81c:	80800017 	ldw	r2,0(r16)
     820:	10000726 	beq	r2,zero,840 <__sfp+0xfc>
     824:	11000217 	ldw	r4,8(r2)
     828:	11400117 	ldw	r5,4(r2)
     82c:	1021883a 	mov	r16,r2
     830:	003fd306 	br	780 <__sfp+0x3c>
     834:	8009883a 	mov	r4,r16
     838:	00005740 	call	574 <__sinit.part.0>
     83c:	003fcc06 	br	770 <__sfp+0x2c>
     840:	01406b04 	movi	r5,428
     844:	8809883a 	mov	r4,r17
     848:	0000eec0 	call	eec <_malloc_r>
     84c:	1025883a 	mov	r18,r2
     850:	10000c26 	beq	r2,zero,884 <__sfp+0x140>
     854:	11000304 	addi	r4,r2,12
     858:	11000215 	stw	r4,8(r2)
     85c:	000b883a 	mov	r5,zero
     860:	10000015 	stw	zero,0(r2)
     864:	14c00115 	stw	r19,4(r2)
     868:	01806804 	movi	r6,416
     86c:	00019c80 	call	19c8 <memset>
     870:	1009883a 	mov	r4,r2
     874:	84800015 	stw	r18,0(r16)
     878:	014000c4 	movi	r5,3
     87c:	9021883a 	mov	r16,r18
     880:	003fc606 	br	79c <__sfp+0x58>
     884:	80000015 	stw	zero,0(r16)
     888:	00800304 	movi	r2,12
     88c:	88800015 	stw	r2,0(r17)
     890:	0009883a 	mov	r4,zero
     894:	003fd906 	br	7fc <__sfp+0xb8>

00000898 <_cleanup>:
     898:	00800074 	movhi	r2,1
     89c:	11052817 	ldw	r4,5280(r2)
     8a0:	01400034 	movhi	r5,0
     8a4:	29492504 	addi	r5,r5,9364
     8a8:	0000e441 	jmpi	e44 <_fwalk_reent>

000008ac <__sinit>:
     8ac:	20800e17 	ldw	r2,56(r4)
     8b0:	10000126 	beq	r2,zero,8b8 <__sinit+0xc>
     8b4:	f800283a 	ret
     8b8:	00005741 	jmpi	574 <__sinit.part.0>

000008bc <__sfp_lock_acquire>:
     8bc:	f800283a 	ret

000008c0 <__sfp_lock_release>:
     8c0:	f800283a 	ret

000008c4 <__sinit_lock_acquire>:
     8c4:	f800283a 	ret

000008c8 <__sinit_lock_release>:
     8c8:	f800283a 	ret

000008cc <__fp_lock_all>:
     8cc:	00800074 	movhi	r2,1
     8d0:	11052917 	ldw	r4,5284(r2)
     8d4:	01400034 	movhi	r5,0
     8d8:	29415604 	addi	r5,r5,1368
     8dc:	0000dac1 	jmpi	dac <_fwalk>

000008e0 <__fp_unlock_all>:
     8e0:	00800074 	movhi	r2,1
     8e4:	11052917 	ldw	r4,5284(r2)
     8e8:	01400034 	movhi	r5,0
     8ec:	29415b04 	addi	r5,r5,1388
     8f0:	0000dac1 	jmpi	dac <_fwalk>

000008f4 <__sfvwrite_r>:
     8f4:	30800217 	ldw	r2,8(r6)
     8f8:	1000a226 	beq	r2,zero,b84 <__sfvwrite_r+0x290>
     8fc:	29c0030b 	ldhu	r7,12(r5)
     900:	defff404 	addi	sp,sp,-48
     904:	ddc00915 	stw	r23,36(sp)
     908:	dd400715 	stw	r21,28(sp)
     90c:	dc000215 	stw	r16,8(sp)
     910:	dfc00b15 	stw	ra,44(sp)
     914:	df000a15 	stw	fp,40(sp)
     918:	dd800815 	stw	r22,32(sp)
     91c:	dd000615 	stw	r20,24(sp)
     920:	dcc00515 	stw	r19,20(sp)
     924:	dc800415 	stw	r18,16(sp)
     928:	dc400315 	stw	r17,12(sp)
     92c:	3880020c 	andi	r2,r7,8
     930:	302f883a 	mov	r23,r6
     934:	202b883a 	mov	r21,r4
     938:	2821883a 	mov	r16,r5
     93c:	10002226 	beq	r2,zero,9c8 <__sfvwrite_r+0xd4>
     940:	28800417 	ldw	r2,16(r5)
     944:	10002026 	beq	r2,zero,9c8 <__sfvwrite_r+0xd4>
     948:	3880008c 	andi	r2,r7,2
     94c:	bc400017 	ldw	r17,0(r23)
     950:	10002526 	beq	r2,zero,9e8 <__sfvwrite_r+0xf4>
     954:	80800917 	ldw	r2,36(r16)
     958:	81400717 	ldw	r5,28(r16)
     95c:	05200034 	movhi	r20,32768
     960:	0027883a 	mov	r19,zero
     964:	0025883a 	mov	r18,zero
     968:	a53f0004 	addi	r20,r20,-1024
     96c:	980d883a 	mov	r6,r19
     970:	a809883a 	mov	r4,r21
     974:	90001026 	beq	r18,zero,9b8 <__sfvwrite_r+0xc4>
     978:	900f883a 	mov	r7,r18
     97c:	a480012e 	bgeu	r20,r18,984 <__sfvwrite_r+0x90>
     980:	a00f883a 	mov	r7,r20
     984:	103ee83a 	callr	r2
     988:	0080790e 	bge	zero,r2,b70 <__sfvwrite_r+0x27c>
     98c:	b9000217 	ldw	r4,8(r23)
     990:	98a7883a 	add	r19,r19,r2
     994:	90a5c83a 	sub	r18,r18,r2
     998:	2085c83a 	sub	r2,r4,r2
     99c:	b8800215 	stw	r2,8(r23)
     9a0:	10006226 	beq	r2,zero,b2c <__sfvwrite_r+0x238>
     9a4:	80800917 	ldw	r2,36(r16)
     9a8:	81400717 	ldw	r5,28(r16)
     9ac:	980d883a 	mov	r6,r19
     9b0:	a809883a 	mov	r4,r21
     9b4:	903ff01e 	bne	r18,zero,978 <__sfvwrite_r+0x84>
     9b8:	8cc00017 	ldw	r19,0(r17)
     9bc:	8c800117 	ldw	r18,4(r17)
     9c0:	8c400204 	addi	r17,r17,8
     9c4:	003fe906 	br	96c <__sfvwrite_r+0x78>
     9c8:	800b883a 	mov	r5,r16
     9cc:	a809883a 	mov	r4,r21
     9d0:	00022180 	call	2218 <__swsetup_r>
     9d4:	1000f31e 	bne	r2,zero,da4 <__sfvwrite_r+0x4b0>
     9d8:	81c0030b 	ldhu	r7,12(r16)
     9dc:	bc400017 	ldw	r17,0(r23)
     9e0:	3880008c 	andi	r2,r7,2
     9e4:	103fdb1e 	bne	r2,zero,954 <__sfvwrite_r+0x60>
     9e8:	3880004c 	andi	r2,r7,1
     9ec:	84800217 	ldw	r18,8(r16)
     9f0:	82000017 	ldw	r8,0(r16)
     9f4:	1000651e 	bne	r2,zero,b8c <__sfvwrite_r+0x298>
     9f8:	00a00034 	movhi	r2,32768
     9fc:	10bfff84 	addi	r2,r2,-2
     a00:	00e00034 	movhi	r3,32768
     a04:	d8800015 	stw	r2,0(sp)
     a08:	18bfffc4 	addi	r2,r3,-1
     a0c:	0039883a 	mov	fp,zero
     a10:	0027883a 	mov	r19,zero
     a14:	d8800115 	stw	r2,4(sp)
     a18:	98004026 	beq	r19,zero,b1c <__sfvwrite_r+0x228>
     a1c:	3880800c 	andi	r2,r7,512
     a20:	10009626 	beq	r2,zero,c7c <__sfvwrite_r+0x388>
     a24:	902d883a 	mov	r22,r18
     a28:	9c80ba36 	bltu	r19,r18,d14 <__sfvwrite_r+0x420>
     a2c:	3881200c 	andi	r2,r7,1152
     a30:	10002526 	beq	r2,zero,ac8 <__sfvwrite_r+0x1d4>
     a34:	81000517 	ldw	r4,20(r16)
     a38:	81400417 	ldw	r5,16(r16)
     a3c:	98800044 	addi	r2,r19,1
     a40:	210000e4 	muli	r4,r4,3
     a44:	4165c83a 	sub	r18,r8,r5
     a48:	1485883a 	add	r2,r2,r18
     a4c:	2028d7fa 	srli	r20,r4,31
     a50:	a109883a 	add	r4,r20,r4
     a54:	2029d07a 	srai	r20,r4,1
     a58:	a00d883a 	mov	r6,r20
     a5c:	a080022e 	bgeu	r20,r2,a68 <__sfvwrite_r+0x174>
     a60:	1029883a 	mov	r20,r2
     a64:	100d883a 	mov	r6,r2
     a68:	39c1000c 	andi	r7,r7,1024
     a6c:	3800bd26 	beq	r7,zero,d64 <__sfvwrite_r+0x470>
     a70:	a809883a 	mov	r4,r21
     a74:	300b883a 	mov	r5,r6
     a78:	0000eec0 	call	eec <_malloc_r>
     a7c:	1009883a 	mov	r4,r2
     a80:	1000c426 	beq	r2,zero,d94 <__sfvwrite_r+0x4a0>
     a84:	81400417 	ldw	r5,16(r16)
     a88:	900d883a 	mov	r6,r18
     a8c:	000179c0 	call	179c <memcpy>
     a90:	1009883a 	mov	r4,r2
     a94:	8080030b 	ldhu	r2,12(r16)
     a98:	00fedfc4 	movi	r3,-1153
     a9c:	10c4703a 	and	r2,r2,r3
     aa0:	10802014 	ori	r2,r2,128
     aa4:	8080030d 	sth	r2,12(r16)
     aa8:	2491883a 	add	r8,r4,r18
     aac:	a485c83a 	sub	r2,r20,r18
     ab0:	81000415 	stw	r4,16(r16)
     ab4:	82000015 	stw	r8,0(r16)
     ab8:	85000515 	stw	r20,20(r16)
     abc:	9825883a 	mov	r18,r19
     ac0:	80800215 	stw	r2,8(r16)
     ac4:	982d883a 	mov	r22,r19
     ac8:	4009883a 	mov	r4,r8
     acc:	b00d883a 	mov	r6,r22
     ad0:	e00b883a 	mov	r5,fp
     ad4:	000189c0 	call	189c <memmove>
     ad8:	81000217 	ldw	r4,8(r16)
     adc:	80800017 	ldw	r2,0(r16)
     ae0:	9829883a 	mov	r20,r19
     ae4:	24a5c83a 	sub	r18,r4,r18
     ae8:	1585883a 	add	r2,r2,r22
     aec:	84800215 	stw	r18,8(r16)
     af0:	80800015 	stw	r2,0(r16)
     af4:	0027883a 	mov	r19,zero
     af8:	b8800217 	ldw	r2,8(r23)
     afc:	e539883a 	add	fp,fp,r20
     b00:	1529c83a 	sub	r20,r2,r20
     b04:	bd000215 	stw	r20,8(r23)
     b08:	a0000826 	beq	r20,zero,b2c <__sfvwrite_r+0x238>
     b0c:	81c0030b 	ldhu	r7,12(r16)
     b10:	84800217 	ldw	r18,8(r16)
     b14:	82000017 	ldw	r8,0(r16)
     b18:	983fc01e 	bne	r19,zero,a1c <__sfvwrite_r+0x128>
     b1c:	8f000017 	ldw	fp,0(r17)
     b20:	8cc00117 	ldw	r19,4(r17)
     b24:	8c400204 	addi	r17,r17,8
     b28:	003fbb06 	br	a18 <__sfvwrite_r+0x124>
     b2c:	0005883a 	mov	r2,zero
     b30:	dfc00b17 	ldw	ra,44(sp)
     b34:	df000a17 	ldw	fp,40(sp)
     b38:	ddc00917 	ldw	r23,36(sp)
     b3c:	dd800817 	ldw	r22,32(sp)
     b40:	dd400717 	ldw	r21,28(sp)
     b44:	dd000617 	ldw	r20,24(sp)
     b48:	dcc00517 	ldw	r19,20(sp)
     b4c:	dc800417 	ldw	r18,16(sp)
     b50:	dc400317 	ldw	r17,12(sp)
     b54:	dc000217 	ldw	r16,8(sp)
     b58:	dec00c04 	addi	sp,sp,48
     b5c:	f800283a 	ret
     b60:	800b883a 	mov	r5,r16
     b64:	a809883a 	mov	r4,r21
     b68:	000279c0 	call	279c <_fflush_r>
     b6c:	10002026 	beq	r2,zero,bf0 <__sfvwrite_r+0x2fc>
     b70:	8080030b 	ldhu	r2,12(r16)
     b74:	10801014 	ori	r2,r2,64
     b78:	8080030d 	sth	r2,12(r16)
     b7c:	00bfffc4 	movi	r2,-1
     b80:	003feb06 	br	b30 <__sfvwrite_r+0x23c>
     b84:	0005883a 	mov	r2,zero
     b88:	f800283a 	ret
     b8c:	002d883a 	mov	r22,zero
     b90:	0027883a 	mov	r19,zero
     b94:	0005883a 	mov	r2,zero
     b98:	0039883a 	mov	fp,zero
     b9c:	b0001d26 	beq	r22,zero,c14 <__sfvwrite_r+0x320>
     ba0:	10002026 	beq	r2,zero,c24 <__sfvwrite_r+0x330>
     ba4:	9829883a 	mov	r20,r19
     ba8:	b500012e 	bgeu	r22,r20,bb0 <__sfvwrite_r+0x2bc>
     bac:	b029883a 	mov	r20,r22
     bb0:	80800417 	ldw	r2,16(r16)
     bb4:	81c00517 	ldw	r7,20(r16)
     bb8:	1200022e 	bgeu	r2,r8,bc4 <__sfvwrite_r+0x2d0>
     bbc:	3ca5883a 	add	r18,r7,r18
     bc0:	95002216 	blt	r18,r20,c4c <__sfvwrite_r+0x358>
     bc4:	a1c05616 	blt	r20,r7,d20 <__sfvwrite_r+0x42c>
     bc8:	80800917 	ldw	r2,36(r16)
     bcc:	81400717 	ldw	r5,28(r16)
     bd0:	e00d883a 	mov	r6,fp
     bd4:	a809883a 	mov	r4,r21
     bd8:	103ee83a 	callr	r2
     bdc:	1025883a 	mov	r18,r2
     be0:	00bfe30e 	bge	zero,r2,b70 <__sfvwrite_r+0x27c>
     be4:	9ca7c83a 	sub	r19,r19,r18
     be8:	983fdd26 	beq	r19,zero,b60 <__sfvwrite_r+0x26c>
     bec:	00800044 	movi	r2,1
     bf0:	b9800217 	ldw	r6,8(r23)
     bf4:	e4b9883a 	add	fp,fp,r18
     bf8:	b4adc83a 	sub	r22,r22,r18
     bfc:	34a5c83a 	sub	r18,r6,r18
     c00:	bc800215 	stw	r18,8(r23)
     c04:	903fc926 	beq	r18,zero,b2c <__sfvwrite_r+0x238>
     c08:	84800217 	ldw	r18,8(r16)
     c0c:	82000017 	ldw	r8,0(r16)
     c10:	b03fe31e 	bne	r22,zero,ba0 <__sfvwrite_r+0x2ac>
     c14:	8d800117 	ldw	r22,4(r17)
     c18:	8f000017 	ldw	fp,0(r17)
     c1c:	8c400204 	addi	r17,r17,8
     c20:	b03ffc26 	beq	r22,zero,c14 <__sfvwrite_r+0x320>
     c24:	b00d883a 	mov	r6,r22
     c28:	01400284 	movi	r5,10
     c2c:	e009883a 	mov	r4,fp
     c30:	da000015 	stw	r8,0(sp)
     c34:	00016cc0 	call	16cc <memchr>
     c38:	da000017 	ldw	r8,0(sp)
     c3c:	10004626 	beq	r2,zero,d58 <__sfvwrite_r+0x464>
     c40:	10800044 	addi	r2,r2,1
     c44:	1727c83a 	sub	r19,r2,fp
     c48:	003fd606 	br	ba4 <__sfvwrite_r+0x2b0>
     c4c:	e00b883a 	mov	r5,fp
     c50:	4009883a 	mov	r4,r8
     c54:	900d883a 	mov	r6,r18
     c58:	000189c0 	call	189c <memmove>
     c5c:	80800017 	ldw	r2,0(r16)
     c60:	800b883a 	mov	r5,r16
     c64:	a809883a 	mov	r4,r21
     c68:	1485883a 	add	r2,r2,r18
     c6c:	80800015 	stw	r2,0(r16)
     c70:	000279c0 	call	279c <_fflush_r>
     c74:	103fdb26 	beq	r2,zero,be4 <__sfvwrite_r+0x2f0>
     c78:	003fbd06 	br	b70 <__sfvwrite_r+0x27c>
     c7c:	80800417 	ldw	r2,16(r16)
     c80:	12001136 	bltu	r2,r8,cc8 <__sfvwrite_r+0x3d4>
     c84:	85000517 	ldw	r20,20(r16)
     c88:	9d000f36 	bltu	r19,r20,cc8 <__sfvwrite_r+0x3d4>
     c8c:	d8800017 	ldw	r2,0(sp)
     c90:	14c02f2e 	bgeu	r2,r19,d50 <__sfvwrite_r+0x45c>
     c94:	d9000117 	ldw	r4,4(sp)
     c98:	a00b883a 	mov	r5,r20
     c9c:	00030600 	call	3060 <__divsi3>
     ca0:	150f383a 	mul	r7,r2,r20
     ca4:	82000917 	ldw	r8,36(r16)
     ca8:	81400717 	ldw	r5,28(r16)
     cac:	e00d883a 	mov	r6,fp
     cb0:	a809883a 	mov	r4,r21
     cb4:	403ee83a 	callr	r8
     cb8:	1029883a 	mov	r20,r2
     cbc:	00bfac0e 	bge	zero,r2,b70 <__sfvwrite_r+0x27c>
     cc0:	9d27c83a 	sub	r19,r19,r20
     cc4:	003f8c06 	br	af8 <__sfvwrite_r+0x204>
     cc8:	9029883a 	mov	r20,r18
     ccc:	9c80012e 	bgeu	r19,r18,cd4 <__sfvwrite_r+0x3e0>
     cd0:	9829883a 	mov	r20,r19
     cd4:	4009883a 	mov	r4,r8
     cd8:	a00d883a 	mov	r6,r20
     cdc:	e00b883a 	mov	r5,fp
     ce0:	000189c0 	call	189c <memmove>
     ce4:	80800217 	ldw	r2,8(r16)
     ce8:	81000017 	ldw	r4,0(r16)
     cec:	1505c83a 	sub	r2,r2,r20
     cf0:	2509883a 	add	r4,r4,r20
     cf4:	80800215 	stw	r2,8(r16)
     cf8:	81000015 	stw	r4,0(r16)
     cfc:	103ff01e 	bne	r2,zero,cc0 <__sfvwrite_r+0x3cc>
     d00:	800b883a 	mov	r5,r16
     d04:	a809883a 	mov	r4,r21
     d08:	000279c0 	call	279c <_fflush_r>
     d0c:	103fec26 	beq	r2,zero,cc0 <__sfvwrite_r+0x3cc>
     d10:	003f9706 	br	b70 <__sfvwrite_r+0x27c>
     d14:	9825883a 	mov	r18,r19
     d18:	982d883a 	mov	r22,r19
     d1c:	003f6a06 	br	ac8 <__sfvwrite_r+0x1d4>
     d20:	4009883a 	mov	r4,r8
     d24:	a00d883a 	mov	r6,r20
     d28:	e00b883a 	mov	r5,fp
     d2c:	000189c0 	call	189c <memmove>
     d30:	81000217 	ldw	r4,8(r16)
     d34:	80800017 	ldw	r2,0(r16)
     d38:	a025883a 	mov	r18,r20
     d3c:	2509c83a 	sub	r4,r4,r20
     d40:	1505883a 	add	r2,r2,r20
     d44:	81000215 	stw	r4,8(r16)
     d48:	80800015 	stw	r2,0(r16)
     d4c:	003fa506 	br	be4 <__sfvwrite_r+0x2f0>
     d50:	9809883a 	mov	r4,r19
     d54:	003fd006 	br	c98 <__sfvwrite_r+0x3a4>
     d58:	b5000044 	addi	r20,r22,1
     d5c:	a027883a 	mov	r19,r20
     d60:	003f9106 	br	ba8 <__sfvwrite_r+0x2b4>
     d64:	a809883a 	mov	r4,r21
     d68:	0001ab80 	call	1ab8 <_realloc_r>
     d6c:	1009883a 	mov	r4,r2
     d70:	103f4d1e 	bne	r2,zero,aa8 <__sfvwrite_r+0x1b4>
     d74:	81400417 	ldw	r5,16(r16)
     d78:	a809883a 	mov	r4,r21
     d7c:	000299c0 	call	299c <_free_r>
     d80:	8080030b 	ldhu	r2,12(r16)
     d84:	00c00304 	movi	r3,12
     d88:	a8c00015 	stw	r3,0(r21)
     d8c:	10bfdfcc 	andi	r2,r2,65407
     d90:	003f7806 	br	b74 <__sfvwrite_r+0x280>
     d94:	00c00304 	movi	r3,12
     d98:	8080030b 	ldhu	r2,12(r16)
     d9c:	a8c00015 	stw	r3,0(r21)
     da0:	003f7406 	br	b74 <__sfvwrite_r+0x280>
     da4:	00bfffc4 	movi	r2,-1
     da8:	003f6106 	br	b30 <__sfvwrite_r+0x23c>

00000dac <_fwalk>:
     dac:	defffa04 	addi	sp,sp,-24
     db0:	dd000415 	stw	r20,16(sp)
     db4:	dcc00315 	stw	r19,12(sp)
     db8:	dc800215 	stw	r18,8(sp)
     dbc:	dfc00515 	stw	ra,20(sp)
     dc0:	dc400115 	stw	r17,4(sp)
     dc4:	dc000015 	stw	r16,0(sp)
     dc8:	2827883a 	mov	r19,r5
     dcc:	2480b804 	addi	r18,r4,736
     dd0:	0029883a 	mov	r20,zero
     dd4:	94400117 	ldw	r17,4(r18)
     dd8:	94000217 	ldw	r16,8(r18)
     ddc:	8c7fffc4 	addi	r17,r17,-1
     de0:	88000d16 	blt	r17,zero,e18 <_fwalk+0x6c>
     de4:	8080030b 	ldhu	r2,12(r16)
     de8:	8c7fffc4 	addi	r17,r17,-1
     dec:	108000b0 	cmpltui	r2,r2,2
     df0:	1000061e 	bne	r2,zero,e0c <_fwalk+0x60>
     df4:	8080038f 	ldh	r2,14(r16)
     df8:	8009883a 	mov	r4,r16
     dfc:	10bfffe0 	cmpeqi	r2,r2,-1
     e00:	1000021e 	bne	r2,zero,e0c <_fwalk+0x60>
     e04:	983ee83a 	callr	r19
     e08:	a0a8b03a 	or	r20,r20,r2
     e0c:	88bfffd8 	cmpnei	r2,r17,-1
     e10:	84001a04 	addi	r16,r16,104
     e14:	103ff31e 	bne	r2,zero,de4 <_fwalk+0x38>
     e18:	94800017 	ldw	r18,0(r18)
     e1c:	903fed1e 	bne	r18,zero,dd4 <_fwalk+0x28>
     e20:	a005883a 	mov	r2,r20
     e24:	dfc00517 	ldw	ra,20(sp)
     e28:	dd000417 	ldw	r20,16(sp)
     e2c:	dcc00317 	ldw	r19,12(sp)
     e30:	dc800217 	ldw	r18,8(sp)
     e34:	dc400117 	ldw	r17,4(sp)
     e38:	dc000017 	ldw	r16,0(sp)
     e3c:	dec00604 	addi	sp,sp,24
     e40:	f800283a 	ret

00000e44 <_fwalk_reent>:
     e44:	defff904 	addi	sp,sp,-28
     e48:	dd400515 	stw	r21,20(sp)
     e4c:	dd000415 	stw	r20,16(sp)
     e50:	dcc00315 	stw	r19,12(sp)
     e54:	dc800215 	stw	r18,8(sp)
     e58:	dfc00615 	stw	ra,24(sp)
     e5c:	dc400115 	stw	r17,4(sp)
     e60:	dc000015 	stw	r16,0(sp)
     e64:	202b883a 	mov	r21,r4
     e68:	2827883a 	mov	r19,r5
     e6c:	2480b804 	addi	r18,r4,736
     e70:	0029883a 	mov	r20,zero
     e74:	94400117 	ldw	r17,4(r18)
     e78:	94000217 	ldw	r16,8(r18)
     e7c:	8c7fffc4 	addi	r17,r17,-1
     e80:	88000e16 	blt	r17,zero,ebc <_fwalk_reent+0x78>
     e84:	8080030b 	ldhu	r2,12(r16)
     e88:	8c7fffc4 	addi	r17,r17,-1
     e8c:	108000b0 	cmpltui	r2,r2,2
     e90:	1000071e 	bne	r2,zero,eb0 <_fwalk_reent+0x6c>
     e94:	8080038f 	ldh	r2,14(r16)
     e98:	800b883a 	mov	r5,r16
     e9c:	a809883a 	mov	r4,r21
     ea0:	10bfffe0 	cmpeqi	r2,r2,-1
     ea4:	1000021e 	bne	r2,zero,eb0 <_fwalk_reent+0x6c>
     ea8:	983ee83a 	callr	r19
     eac:	a0a8b03a 	or	r20,r20,r2
     eb0:	88bfffd8 	cmpnei	r2,r17,-1
     eb4:	84001a04 	addi	r16,r16,104
     eb8:	103ff21e 	bne	r2,zero,e84 <_fwalk_reent+0x40>
     ebc:	94800017 	ldw	r18,0(r18)
     ec0:	903fec1e 	bne	r18,zero,e74 <_fwalk_reent+0x30>
     ec4:	a005883a 	mov	r2,r20
     ec8:	dfc00617 	ldw	ra,24(sp)
     ecc:	dd400517 	ldw	r21,20(sp)
     ed0:	dd000417 	ldw	r20,16(sp)
     ed4:	dcc00317 	ldw	r19,12(sp)
     ed8:	dc800217 	ldw	r18,8(sp)
     edc:	dc400117 	ldw	r17,4(sp)
     ee0:	dc000017 	ldw	r16,0(sp)
     ee4:	dec00704 	addi	sp,sp,28
     ee8:	f800283a 	ret

00000eec <_malloc_r>:
     eec:	defff604 	addi	sp,sp,-40
     ef0:	dc400115 	stw	r17,4(sp)
     ef4:	2c4002c4 	addi	r17,r5,11
     ef8:	dc800215 	stw	r18,8(sp)
     efc:	dfc00915 	stw	ra,36(sp)
     f00:	df000815 	stw	fp,32(sp)
     f04:	ddc00715 	stw	r23,28(sp)
     f08:	dd800615 	stw	r22,24(sp)
     f0c:	dd400515 	stw	r21,20(sp)
     f10:	dd000415 	stw	r20,16(sp)
     f14:	dcc00315 	stw	r19,12(sp)
     f18:	dc000015 	stw	r16,0(sp)
     f1c:	888005e8 	cmpgeui	r2,r17,23
     f20:	2025883a 	mov	r18,r4
     f24:	10001b1e 	bne	r2,zero,f94 <_malloc_r+0xa8>
     f28:	29400468 	cmpgeui	r5,r5,17
     f2c:	2800821e 	bne	r5,zero,1138 <_malloc_r+0x24c>
     f30:	0003c700 	call	3c70 <__malloc_lock>
     f34:	04400404 	movi	r17,16
     f38:	00800604 	movi	r2,24
     f3c:	01c00084 	movi	r7,2
     f40:	04c00074 	movhi	r19,1
     f44:	9cfede04 	addi	r19,r19,-1160
     f48:	9885883a 	add	r2,r19,r2
     f4c:	14000117 	ldw	r16,4(r2)
     f50:	10fffe04 	addi	r3,r2,-8
     f54:	80c08b26 	beq	r16,r3,1184 <_malloc_r+0x298>
     f58:	80800117 	ldw	r2,4(r16)
     f5c:	81000317 	ldw	r4,12(r16)
     f60:	00ffff04 	movi	r3,-4
     f64:	10c4703a 	and	r2,r2,r3
     f68:	81400217 	ldw	r5,8(r16)
     f6c:	8085883a 	add	r2,r16,r2
     f70:	10c00117 	ldw	r3,4(r2)
     f74:	29000315 	stw	r4,12(r5)
     f78:	21400215 	stw	r5,8(r4)
     f7c:	18c00054 	ori	r3,r3,1
     f80:	10c00115 	stw	r3,4(r2)
     f84:	9009883a 	mov	r4,r18
     f88:	0003d980 	call	3d98 <__malloc_unlock>
     f8c:	80800204 	addi	r2,r16,8
     f90:	00006c06 	br	1144 <_malloc_r+0x258>
     f94:	00bffe04 	movi	r2,-8
     f98:	88a2703a 	and	r17,r17,r2
     f9c:	88006616 	blt	r17,zero,1138 <_malloc_r+0x24c>
     fa0:	89406536 	bltu	r17,r5,1138 <_malloc_r+0x24c>
     fa4:	0003c700 	call	3c70 <__malloc_lock>
     fa8:	88807e28 	cmpgeui	r2,r17,504
     fac:	10012226 	beq	r2,zero,1438 <_malloc_r+0x54c>
     fb0:	8804d27a 	srli	r2,r17,9
     fb4:	10006f26 	beq	r2,zero,1174 <_malloc_r+0x288>
     fb8:	10c00168 	cmpgeui	r3,r2,5
     fbc:	1800fe1e 	bne	r3,zero,13b8 <_malloc_r+0x4cc>
     fc0:	8804d1ba 	srli	r2,r17,6
     fc4:	11c00e44 	addi	r7,r2,57
     fc8:	380890fa 	slli	r4,r7,3
     fcc:	12000e04 	addi	r8,r2,56
     fd0:	04c00074 	movhi	r19,1
     fd4:	9cfede04 	addi	r19,r19,-1160
     fd8:	9909883a 	add	r4,r19,r4
     fdc:	24000117 	ldw	r16,4(r4)
     fe0:	213ffe04 	addi	r4,r4,-8
     fe4:	24000b26 	beq	r4,r16,1014 <_malloc_r+0x128>
     fe8:	01bfff04 	movi	r6,-4
     fec:	00000306 	br	ffc <_malloc_r+0x110>
     ff0:	1800d60e 	bge	r3,zero,134c <_malloc_r+0x460>
     ff4:	84000317 	ldw	r16,12(r16)
     ff8:	24000626 	beq	r4,r16,1014 <_malloc_r+0x128>
     ffc:	80800117 	ldw	r2,4(r16)
    1000:	1184703a 	and	r2,r2,r6
    1004:	1447c83a 	sub	r3,r2,r17
    1008:	19400408 	cmpgei	r5,r3,16
    100c:	283ff826 	beq	r5,zero,ff0 <_malloc_r+0x104>
    1010:	400f883a 	mov	r7,r8
    1014:	9c000417 	ldw	r16,16(r19)
    1018:	02400074 	movhi	r9,1
    101c:	4a7ee004 	addi	r9,r9,-1152
    1020:	82405f26 	beq	r16,r9,11a0 <_malloc_r+0x2b4>
    1024:	80c00117 	ldw	r3,4(r16)
    1028:	00bfff04 	movi	r2,-4
    102c:	1884703a 	and	r2,r3,r2
    1030:	1447c83a 	sub	r3,r2,r17
    1034:	19000410 	cmplti	r4,r3,16
    1038:	20010a26 	beq	r4,zero,1464 <_malloc_r+0x578>
    103c:	9a400515 	stw	r9,20(r19)
    1040:	9a400415 	stw	r9,16(r19)
    1044:	1800ff0e 	bge	r3,zero,1444 <_malloc_r+0x558>
    1048:	10c08028 	cmpgeui	r3,r2,512
    104c:	1800c11e 	bne	r3,zero,1354 <_malloc_r+0x468>
    1050:	1006d0fa 	srli	r3,r2,3
    1054:	1008d17a 	srli	r4,r2,5
    1058:	00800044 	movi	r2,1
    105c:	18c00044 	addi	r3,r3,1
    1060:	180690fa 	slli	r3,r3,3
    1064:	99400117 	ldw	r5,4(r19)
    1068:	1104983a 	sll	r2,r2,r4
    106c:	98c7883a 	add	r3,r19,r3
    1070:	19000017 	ldw	r4,0(r3)
    1074:	1144b03a 	or	r2,r2,r5
    1078:	197ffe04 	addi	r5,r3,-8
    107c:	81400315 	stw	r5,12(r16)
    1080:	81000215 	stw	r4,8(r16)
    1084:	98800115 	stw	r2,4(r19)
    1088:	1c000015 	stw	r16,0(r3)
    108c:	24000315 	stw	r16,12(r4)
    1090:	3807d0ba 	srai	r3,r7,2
    1094:	01000044 	movi	r4,1
    1098:	20c8983a 	sll	r4,r4,r3
    109c:	11004536 	bltu	r2,r4,11b4 <_malloc_r+0x2c8>
    10a0:	2086703a 	and	r3,r4,r2
    10a4:	18000a1e 	bne	r3,zero,10d0 <_malloc_r+0x1e4>
    10a8:	00ffff04 	movi	r3,-4
    10ac:	2109883a 	add	r4,r4,r4
    10b0:	38ce703a 	and	r7,r7,r3
    10b4:	2086703a 	and	r3,r4,r2
    10b8:	39c00104 	addi	r7,r7,4
    10bc:	1800041e 	bne	r3,zero,10d0 <_malloc_r+0x1e4>
    10c0:	2109883a 	add	r4,r4,r4
    10c4:	2086703a 	and	r3,r4,r2
    10c8:	39c00104 	addi	r7,r7,4
    10cc:	183ffc26 	beq	r3,zero,10c0 <_malloc_r+0x1d4>
    10d0:	02bfff04 	movi	r10,-4
    10d4:	381690fa 	slli	r11,r7,3
    10d8:	3819883a 	mov	r12,r7
    10dc:	9ad7883a 	add	r11,r19,r11
    10e0:	5811883a 	mov	r8,r11
    10e4:	40800317 	ldw	r2,12(r8)
    10e8:	4080bc26 	beq	r8,r2,13dc <_malloc_r+0x4f0>
    10ec:	10c00117 	ldw	r3,4(r2)
    10f0:	1021883a 	mov	r16,r2
    10f4:	10800317 	ldw	r2,12(r2)
    10f8:	1a86703a 	and	r3,r3,r10
    10fc:	1c4bc83a 	sub	r5,r3,r17
    1100:	29800410 	cmplti	r6,r5,16
    1104:	3000ba26 	beq	r6,zero,13f0 <_malloc_r+0x504>
    1108:	283ff716 	blt	r5,zero,10e8 <_malloc_r+0x1fc>
    110c:	80c7883a 	add	r3,r16,r3
    1110:	19400117 	ldw	r5,4(r3)
    1114:	81800217 	ldw	r6,8(r16)
    1118:	9009883a 	mov	r4,r18
    111c:	29400054 	ori	r5,r5,1
    1120:	19400115 	stw	r5,4(r3)
    1124:	30800315 	stw	r2,12(r6)
    1128:	11800215 	stw	r6,8(r2)
    112c:	0003d980 	call	3d98 <__malloc_unlock>
    1130:	80800204 	addi	r2,r16,8
    1134:	00000306 	br	1144 <_malloc_r+0x258>
    1138:	00800304 	movi	r2,12
    113c:	90800015 	stw	r2,0(r18)
    1140:	0005883a 	mov	r2,zero
    1144:	dfc00917 	ldw	ra,36(sp)
    1148:	df000817 	ldw	fp,32(sp)
    114c:	ddc00717 	ldw	r23,28(sp)
    1150:	dd800617 	ldw	r22,24(sp)
    1154:	dd400517 	ldw	r21,20(sp)
    1158:	dd000417 	ldw	r20,16(sp)
    115c:	dcc00317 	ldw	r19,12(sp)
    1160:	dc800217 	ldw	r18,8(sp)
    1164:	dc400117 	ldw	r17,4(sp)
    1168:	dc000017 	ldw	r16,0(sp)
    116c:	dec00a04 	addi	sp,sp,40
    1170:	f800283a 	ret
    1174:	01008004 	movi	r4,512
    1178:	01c01004 	movi	r7,64
    117c:	02000fc4 	movi	r8,63
    1180:	003f9306 	br	fd0 <_malloc_r+0xe4>
    1184:	14000317 	ldw	r16,12(r2)
    1188:	39c00084 	addi	r7,r7,2
    118c:	143f721e 	bne	r2,r16,f58 <_malloc_r+0x6c>
    1190:	9c000417 	ldw	r16,16(r19)
    1194:	02400074 	movhi	r9,1
    1198:	4a7ee004 	addi	r9,r9,-1152
    119c:	827fa11e 	bne	r16,r9,1024 <_malloc_r+0x138>
    11a0:	3807d0ba 	srai	r3,r7,2
    11a4:	01000044 	movi	r4,1
    11a8:	98800117 	ldw	r2,4(r19)
    11ac:	20c8983a 	sll	r4,r4,r3
    11b0:	113fbb2e 	bgeu	r2,r4,10a0 <_malloc_r+0x1b4>
    11b4:	9c000217 	ldw	r16,8(r19)
    11b8:	00bfff04 	movi	r2,-4
    11bc:	85400117 	ldw	r21,4(r16)
    11c0:	a8ac703a 	and	r22,r21,r2
    11c4:	b4400336 	bltu	r22,r17,11d4 <_malloc_r+0x2e8>
    11c8:	b445c83a 	sub	r2,r22,r17
    11cc:	10c00408 	cmpgei	r3,r2,16
    11d0:	1800541e 	bne	r3,zero,1324 <_malloc_r+0x438>
    11d4:	00800074 	movhi	r2,1
    11d8:	10852a17 	ldw	r2,5288(r2)
    11dc:	00c00074 	movhi	r3,1
    11e0:	1d4cd717 	ldw	r21,13148(r3)
    11e4:	10bfffd8 	cmpnei	r2,r2,-1
    11e8:	85b9883a 	add	fp,r16,r22
    11ec:	8d6b883a 	add	r21,r17,r21
    11f0:	1000d626 	beq	r2,zero,154c <_malloc_r+0x660>
    11f4:	ad4403c4 	addi	r21,r21,4111
    11f8:	00bc0004 	movi	r2,-4096
    11fc:	a8aa703a 	and	r21,r21,r2
    1200:	a80b883a 	mov	r5,r21
    1204:	9009883a 	mov	r4,r18
    1208:	000201c0 	call	201c <_sbrk_r>
    120c:	102f883a 	mov	r23,r2
    1210:	10bfffd8 	cmpnei	r2,r2,-1
    1214:	1000a826 	beq	r2,zero,14b8 <_malloc_r+0x5cc>
    1218:	bf00a636 	bltu	r23,fp,14b4 <_malloc_r+0x5c8>
    121c:	00800074 	movhi	r2,1
    1220:	151cf717 	ldw	r20,29660(r2)
    1224:	ad29883a 	add	r20,r21,r20
    1228:	151cf715 	stw	r20,29660(r2)
    122c:	a007883a 	mov	r3,r20
    1230:	e5c0ec26 	beq	fp,r23,15e4 <_malloc_r+0x6f8>
    1234:	00800074 	movhi	r2,1
    1238:	10852a17 	ldw	r2,5288(r2)
    123c:	10bfffd8 	cmpnei	r2,r2,-1
    1240:	1000ef26 	beq	r2,zero,1600 <_malloc_r+0x714>
    1244:	bf39c83a 	sub	fp,r23,fp
    1248:	e0c7883a 	add	r3,fp,r3
    124c:	00800074 	movhi	r2,1
    1250:	10dcf715 	stw	r3,29660(r2)
    1254:	bf0001cc 	andi	fp,r23,7
    1258:	e000c526 	beq	fp,zero,1570 <_malloc_r+0x684>
    125c:	bf2fc83a 	sub	r23,r23,fp
    1260:	bdc00204 	addi	r23,r23,8
    1264:	05040204 	movi	r20,4104
    1268:	a729c83a 	sub	r20,r20,fp
    126c:	bd6b883a 	add	r21,r23,r21
    1270:	a569c83a 	sub	r20,r20,r21
    1274:	a503ffcc 	andi	r20,r20,4095
    1278:	a00b883a 	mov	r5,r20
    127c:	9009883a 	mov	r4,r18
    1280:	000201c0 	call	201c <_sbrk_r>
    1284:	10ffffe0 	cmpeqi	r3,r2,-1
    1288:	1800f31e 	bne	r3,zero,1658 <_malloc_r+0x76c>
    128c:	15c5c83a 	sub	r2,r2,r23
    1290:	152b883a 	add	r21,r2,r20
    1294:	00800074 	movhi	r2,1
    1298:	115cf717 	ldw	r5,29660(r2)
    129c:	9dc00215 	stw	r23,8(r19)
    12a0:	ad400054 	ori	r21,r21,1
    12a4:	a169883a 	add	r20,r20,r5
    12a8:	151cf715 	stw	r20,29660(r2)
    12ac:	bd400115 	stw	r21,4(r23)
    12b0:	84c0d626 	beq	r16,r19,160c <_malloc_r+0x720>
    12b4:	b0800428 	cmpgeui	r2,r22,16
    12b8:	1000d626 	beq	r2,zero,1614 <_malloc_r+0x728>
    12bc:	80c00117 	ldw	r3,4(r16)
    12c0:	013ffe04 	movi	r4,-8
    12c4:	b0bffd04 	addi	r2,r22,-12
    12c8:	1104703a 	and	r2,r2,r4
    12cc:	18c0004c 	andi	r3,r3,1
    12d0:	1886b03a 	or	r3,r3,r2
    12d4:	80c00115 	stw	r3,4(r16)
    12d8:	01000144 	movi	r4,5
    12dc:	8087883a 	add	r3,r16,r2
    12e0:	19000115 	stw	r4,4(r3)
    12e4:	19000215 	stw	r4,8(r3)
    12e8:	10800428 	cmpgeui	r2,r2,16
    12ec:	1000df1e 	bne	r2,zero,166c <_malloc_r+0x780>
    12f0:	bd400117 	ldw	r21,4(r23)
    12f4:	b821883a 	mov	r16,r23
    12f8:	00800074 	movhi	r2,1
    12fc:	108cd617 	ldw	r2,13144(r2)
    1300:	1500022e 	bgeu	r2,r20,130c <_malloc_r+0x420>
    1304:	00800074 	movhi	r2,1
    1308:	150cd615 	stw	r20,13144(r2)
    130c:	00800074 	movhi	r2,1
    1310:	108cd517 	ldw	r2,13140(r2)
    1314:	15006a2e 	bgeu	r2,r20,14c0 <_malloc_r+0x5d4>
    1318:	00800074 	movhi	r2,1
    131c:	150cd515 	stw	r20,13140(r2)
    1320:	00006706 	br	14c0 <_malloc_r+0x5d4>
    1324:	88c00054 	ori	r3,r17,1
    1328:	80c00115 	stw	r3,4(r16)
    132c:	8463883a 	add	r17,r16,r17
    1330:	10800054 	ori	r2,r2,1
    1334:	9c400215 	stw	r17,8(r19)
    1338:	88800115 	stw	r2,4(r17)
    133c:	9009883a 	mov	r4,r18
    1340:	0003d980 	call	3d98 <__malloc_unlock>
    1344:	80800204 	addi	r2,r16,8
    1348:	003f7e06 	br	1144 <_malloc_r+0x258>
    134c:	81000317 	ldw	r4,12(r16)
    1350:	003f0506 	br	f68 <_malloc_r+0x7c>
    1354:	1006d27a 	srli	r3,r2,9
    1358:	19000168 	cmpgeui	r4,r3,5
    135c:	20005026 	beq	r4,zero,14a0 <_malloc_r+0x5b4>
    1360:	19000568 	cmpgeui	r4,r3,21
    1364:	20008c1e 	bne	r4,zero,1598 <_malloc_r+0x6ac>
    1368:	19401704 	addi	r5,r3,92
    136c:	280a90fa 	slli	r5,r5,3
    1370:	190016c4 	addi	r4,r3,91
    1374:	994b883a 	add	r5,r19,r5
    1378:	28c00017 	ldw	r3,0(r5)
    137c:	297ffe04 	addi	r5,r5,-8
    1380:	28c07426 	beq	r5,r3,1554 <_malloc_r+0x668>
    1384:	01bfff04 	movi	r6,-4
    1388:	19000117 	ldw	r4,4(r3)
    138c:	2188703a 	and	r4,r4,r6
    1390:	1100022e 	bgeu	r2,r4,139c <_malloc_r+0x4b0>
    1394:	18c00217 	ldw	r3,8(r3)
    1398:	28fffb1e 	bne	r5,r3,1388 <_malloc_r+0x49c>
    139c:	19400317 	ldw	r5,12(r3)
    13a0:	98800117 	ldw	r2,4(r19)
    13a4:	81400315 	stw	r5,12(r16)
    13a8:	80c00215 	stw	r3,8(r16)
    13ac:	2c000215 	stw	r16,8(r5)
    13b0:	1c000315 	stw	r16,12(r3)
    13b4:	003f3606 	br	1090 <_malloc_r+0x1a4>
    13b8:	10c00568 	cmpgeui	r3,r2,21
    13bc:	18004a26 	beq	r3,zero,14e8 <_malloc_r+0x5fc>
    13c0:	10c01568 	cmpgeui	r3,r2,85
    13c4:	18007b1e 	bne	r3,zero,15b4 <_malloc_r+0x6c8>
    13c8:	8804d33a 	srli	r2,r17,12
    13cc:	11c01bc4 	addi	r7,r2,111
    13d0:	380890fa 	slli	r4,r7,3
    13d4:	12001b84 	addi	r8,r2,110
    13d8:	003efd06 	br	fd0 <_malloc_r+0xe4>
    13dc:	63000044 	addi	r12,r12,1
    13e0:	608000cc 	andi	r2,r12,3
    13e4:	42000204 	addi	r8,r8,8
    13e8:	103f3e1e 	bne	r2,zero,10e4 <_malloc_r+0x1f8>
    13ec:	00004506 	br	1504 <_malloc_r+0x618>
    13f0:	81000217 	ldw	r4,8(r16)
    13f4:	89800054 	ori	r6,r17,1
    13f8:	81800115 	stw	r6,4(r16)
    13fc:	20800315 	stw	r2,12(r4)
    1400:	11000215 	stw	r4,8(r2)
    1404:	8463883a 	add	r17,r16,r17
    1408:	9c400515 	stw	r17,20(r19)
    140c:	9c400415 	stw	r17,16(r19)
    1410:	28800054 	ori	r2,r5,1
    1414:	88800115 	stw	r2,4(r17)
    1418:	8a400315 	stw	r9,12(r17)
    141c:	8a400215 	stw	r9,8(r17)
    1420:	80c7883a 	add	r3,r16,r3
    1424:	19400015 	stw	r5,0(r3)
    1428:	9009883a 	mov	r4,r18
    142c:	0003d980 	call	3d98 <__malloc_unlock>
    1430:	80800204 	addi	r2,r16,8
    1434:	003f4306 	br	1144 <_malloc_r+0x258>
    1438:	880ed0fa 	srli	r7,r17,3
    143c:	88800204 	addi	r2,r17,8
    1440:	003ebf06 	br	f40 <_malloc_r+0x54>
    1444:	8085883a 	add	r2,r16,r2
    1448:	10c00117 	ldw	r3,4(r2)
    144c:	9009883a 	mov	r4,r18
    1450:	18c00054 	ori	r3,r3,1
    1454:	10c00115 	stw	r3,4(r2)
    1458:	0003d980 	call	3d98 <__malloc_unlock>
    145c:	80800204 	addi	r2,r16,8
    1460:	003f3806 	br	1144 <_malloc_r+0x258>
    1464:	89000054 	ori	r4,r17,1
    1468:	81000115 	stw	r4,4(r16)
    146c:	8463883a 	add	r17,r16,r17
    1470:	9c400515 	stw	r17,20(r19)
    1474:	9c400415 	stw	r17,16(r19)
    1478:	19000054 	ori	r4,r3,1
    147c:	89000115 	stw	r4,4(r17)
    1480:	8085883a 	add	r2,r16,r2
    1484:	8a400315 	stw	r9,12(r17)
    1488:	8a400215 	stw	r9,8(r17)
    148c:	10c00015 	stw	r3,0(r2)
    1490:	9009883a 	mov	r4,r18
    1494:	0003d980 	call	3d98 <__malloc_unlock>
    1498:	80800204 	addi	r2,r16,8
    149c:	003f2906 	br	1144 <_malloc_r+0x258>
    14a0:	1006d1ba 	srli	r3,r2,6
    14a4:	19400e44 	addi	r5,r3,57
    14a8:	280a90fa 	slli	r5,r5,3
    14ac:	19000e04 	addi	r4,r3,56
    14b0:	003fb006 	br	1374 <_malloc_r+0x488>
    14b4:	84c04626 	beq	r16,r19,15d0 <_malloc_r+0x6e4>
    14b8:	9c000217 	ldw	r16,8(r19)
    14bc:	85400117 	ldw	r21,4(r16)
    14c0:	00bfff04 	movi	r2,-4
    14c4:	a8aa703a 	and	r21,r21,r2
    14c8:	ac45c83a 	sub	r2,r21,r17
    14cc:	ac400236 	bltu	r21,r17,14d8 <_malloc_r+0x5ec>
    14d0:	10c00408 	cmpgei	r3,r2,16
    14d4:	183f931e 	bne	r3,zero,1324 <_malloc_r+0x438>
    14d8:	9009883a 	mov	r4,r18
    14dc:	0003d980 	call	3d98 <__malloc_unlock>
    14e0:	0005883a 	mov	r2,zero
    14e4:	003f1706 	br	1144 <_malloc_r+0x258>
    14e8:	11c01704 	addi	r7,r2,92
    14ec:	380890fa 	slli	r4,r7,3
    14f0:	120016c4 	addi	r8,r2,91
    14f4:	003eb606 	br	fd0 <_malloc_r+0xe4>
    14f8:	58800217 	ldw	r2,8(r11)
    14fc:	39ffffc4 	addi	r7,r7,-1
    1500:	12c0701e 	bne	r2,r11,16c4 <_malloc_r+0x7d8>
    1504:	388000cc 	andi	r2,r7,3
    1508:	5afffe04 	addi	r11,r11,-8
    150c:	103ffa1e 	bne	r2,zero,14f8 <_malloc_r+0x60c>
    1510:	98c00117 	ldw	r3,4(r19)
    1514:	0104303a 	nor	r2,zero,r4
    1518:	10c4703a 	and	r2,r2,r3
    151c:	98800115 	stw	r2,4(r19)
    1520:	2109883a 	add	r4,r4,r4
    1524:	113f2336 	bltu	r2,r4,11b4 <_malloc_r+0x2c8>
    1528:	203f2226 	beq	r4,zero,11b4 <_malloc_r+0x2c8>
    152c:	2086703a 	and	r3,r4,r2
    1530:	1800041e 	bne	r3,zero,1544 <_malloc_r+0x658>
    1534:	2109883a 	add	r4,r4,r4
    1538:	2086703a 	and	r3,r4,r2
    153c:	63000104 	addi	r12,r12,4
    1540:	183ffc26 	beq	r3,zero,1534 <_malloc_r+0x648>
    1544:	600f883a 	mov	r7,r12
    1548:	003ee206 	br	10d4 <_malloc_r+0x1e8>
    154c:	ad400404 	addi	r21,r21,16
    1550:	003f2b06 	br	1200 <_malloc_r+0x314>
    1554:	2009d0ba 	srai	r4,r4,2
    1558:	00800044 	movi	r2,1
    155c:	99800117 	ldw	r6,4(r19)
    1560:	1104983a 	sll	r2,r2,r4
    1564:	1184b03a 	or	r2,r2,r6
    1568:	98800115 	stw	r2,4(r19)
    156c:	003f8d06 	br	13a4 <_malloc_r+0x4b8>
    1570:	bd69883a 	add	r20,r23,r21
    1574:	0529c83a 	sub	r20,zero,r20
    1578:	a503ffcc 	andi	r20,r20,4095
    157c:	a00b883a 	mov	r5,r20
    1580:	9009883a 	mov	r4,r18
    1584:	000201c0 	call	201c <_sbrk_r>
    1588:	10ffffe0 	cmpeqi	r3,r2,-1
    158c:	183f3f26 	beq	r3,zero,128c <_malloc_r+0x3a0>
    1590:	0029883a 	mov	r20,zero
    1594:	003f3f06 	br	1294 <_malloc_r+0x3a8>
    1598:	19001568 	cmpgeui	r4,r3,85
    159c:	2000201e 	bne	r4,zero,1620 <_malloc_r+0x734>
    15a0:	1006d33a 	srli	r3,r2,12
    15a4:	19401bc4 	addi	r5,r3,111
    15a8:	280a90fa 	slli	r5,r5,3
    15ac:	19001b84 	addi	r4,r3,110
    15b0:	003f7006 	br	1374 <_malloc_r+0x488>
    15b4:	10c05568 	cmpgeui	r3,r2,341
    15b8:	1800201e 	bne	r3,zero,163c <_malloc_r+0x750>
    15bc:	8804d3fa 	srli	r2,r17,15
    15c0:	11c01e04 	addi	r7,r2,120
    15c4:	380890fa 	slli	r4,r7,3
    15c8:	12001dc4 	addi	r8,r2,119
    15cc:	003e8006 	br	fd0 <_malloc_r+0xe4>
    15d0:	00800074 	movhi	r2,1
    15d4:	10dcf717 	ldw	r3,29660(r2)
    15d8:	a8c7883a 	add	r3,r21,r3
    15dc:	10dcf715 	stw	r3,29660(r2)
    15e0:	003f1406 	br	1234 <_malloc_r+0x348>
    15e4:	e083ffcc 	andi	r2,fp,4095
    15e8:	103f121e 	bne	r2,zero,1234 <_malloc_r+0x348>
    15ec:	9c000217 	ldw	r16,8(r19)
    15f0:	b56b883a 	add	r21,r22,r21
    15f4:	ad400054 	ori	r21,r21,1
    15f8:	85400115 	stw	r21,4(r16)
    15fc:	003f3e06 	br	12f8 <_malloc_r+0x40c>
    1600:	00800074 	movhi	r2,1
    1604:	15c52a15 	stw	r23,5288(r2)
    1608:	003f1206 	br	1254 <_malloc_r+0x368>
    160c:	b821883a 	mov	r16,r23
    1610:	003f3906 	br	12f8 <_malloc_r+0x40c>
    1614:	00800044 	movi	r2,1
    1618:	b8800115 	stw	r2,4(r23)
    161c:	003fae06 	br	14d8 <_malloc_r+0x5ec>
    1620:	19005568 	cmpgeui	r4,r3,341
    1624:	2000191e 	bne	r4,zero,168c <_malloc_r+0x7a0>
    1628:	1006d3fa 	srli	r3,r2,15
    162c:	19401e04 	addi	r5,r3,120
    1630:	280a90fa 	slli	r5,r5,3
    1634:	19001dc4 	addi	r4,r3,119
    1638:	003f4e06 	br	1374 <_malloc_r+0x488>
    163c:	10815568 	cmpgeui	r2,r2,1365
    1640:	1000191e 	bne	r2,zero,16a8 <_malloc_r+0x7bc>
    1644:	8804d4ba 	srli	r2,r17,18
    1648:	11c01f44 	addi	r7,r2,125
    164c:	380890fa 	slli	r4,r7,3
    1650:	12001f04 	addi	r8,r2,124
    1654:	003e5e06 	br	fd0 <_malloc_r+0xe4>
    1658:	e73ffe04 	addi	fp,fp,-8
    165c:	af2b883a 	add	r21,r21,fp
    1660:	adebc83a 	sub	r21,r21,r23
    1664:	0029883a 	mov	r20,zero
    1668:	003f0a06 	br	1294 <_malloc_r+0x3a8>
    166c:	81400204 	addi	r5,r16,8
    1670:	9009883a 	mov	r4,r18
    1674:	000299c0 	call	299c <_free_r>
    1678:	9c000217 	ldw	r16,8(r19)
    167c:	00800074 	movhi	r2,1
    1680:	151cf717 	ldw	r20,29660(r2)
    1684:	85400117 	ldw	r21,4(r16)
    1688:	003f1b06 	br	12f8 <_malloc_r+0x40c>
    168c:	18c15568 	cmpgeui	r3,r3,1365
    1690:	1800091e 	bne	r3,zero,16b8 <_malloc_r+0x7cc>
    1694:	1006d4ba 	srli	r3,r2,18
    1698:	19401f44 	addi	r5,r3,125
    169c:	280a90fa 	slli	r5,r5,3
    16a0:	19001f04 	addi	r4,r3,124
    16a4:	003f3306 	br	1374 <_malloc_r+0x488>
    16a8:	0100fe04 	movi	r4,1016
    16ac:	01c01fc4 	movi	r7,127
    16b0:	02001f84 	movi	r8,126
    16b4:	003e4606 	br	fd0 <_malloc_r+0xe4>
    16b8:	0140fe04 	movi	r5,1016
    16bc:	01001f84 	movi	r4,126
    16c0:	003f2c06 	br	1374 <_malloc_r+0x488>
    16c4:	98800117 	ldw	r2,4(r19)
    16c8:	003f9506 	br	1520 <_malloc_r+0x634>

000016cc <memchr>:
    16cc:	208000cc 	andi	r2,r4,3
    16d0:	280f883a 	mov	r7,r5
    16d4:	10000e26 	beq	r2,zero,1710 <memchr+0x44>
    16d8:	30bfffc4 	addi	r2,r6,-1
    16dc:	30001726 	beq	r6,zero,173c <memchr+0x70>
    16e0:	29803fcc 	andi	r6,r5,255
    16e4:	00000606 	br	1700 <memchr+0x34>
    16e8:	21000044 	addi	r4,r4,1
    16ec:	20c000cc 	andi	r3,r4,3
    16f0:	18000826 	beq	r3,zero,1714 <memchr+0x48>
    16f4:	10bfffc4 	addi	r2,r2,-1
    16f8:	10ffffe0 	cmpeqi	r3,r2,-1
    16fc:	18000f1e 	bne	r3,zero,173c <memchr+0x70>
    1700:	20c00003 	ldbu	r3,0(r4)
    1704:	19bff81e 	bne	r3,r6,16e8 <memchr+0x1c>
    1708:	2005883a 	mov	r2,r4
    170c:	f800283a 	ret
    1710:	3005883a 	mov	r2,r6
    1714:	10c00128 	cmpgeui	r3,r2,4
    1718:	18000a1e 	bne	r3,zero,1744 <memchr+0x78>
    171c:	10001e26 	beq	r2,zero,1798 <memchr+0xcc>
    1720:	2087883a 	add	r3,r4,r2
    1724:	39803fcc 	andi	r6,r7,255
    1728:	2005883a 	mov	r2,r4
    172c:	11000003 	ldbu	r4,0(r2)
    1730:	21bff626 	beq	r4,r6,170c <memchr+0x40>
    1734:	10800044 	addi	r2,r2,1
    1738:	18bffc1e 	bne	r3,r2,172c <memchr+0x60>
    173c:	0005883a 	mov	r2,zero
    1740:	f800283a 	ret
    1744:	29403fcc 	andi	r5,r5,255
    1748:	280c923a 	slli	r6,r5,8
    174c:	027fbff4 	movhi	r9,65279
    1750:	02202074 	movhi	r8,32897
    1754:	314ab03a 	or	r5,r6,r5
    1758:	280c943a 	slli	r6,r5,16
    175c:	4a7fbfc4 	addi	r9,r9,-257
    1760:	42202004 	addi	r8,r8,-32640
    1764:	314cb03a 	or	r6,r6,r5
    1768:	20c00017 	ldw	r3,0(r4)
    176c:	30c6f03a 	xor	r3,r6,r3
    1770:	1a4b883a 	add	r5,r3,r9
    1774:	00c6303a 	nor	r3,zero,r3
    1778:	28c6703a 	and	r3,r5,r3
    177c:	1a06703a 	and	r3,r3,r8
    1780:	183fe71e 	bne	r3,zero,1720 <memchr+0x54>
    1784:	10bfff04 	addi	r2,r2,-4
    1788:	10c00128 	cmpgeui	r3,r2,4
    178c:	21000104 	addi	r4,r4,4
    1790:	183ff51e 	bne	r3,zero,1768 <memchr+0x9c>
    1794:	003fe106 	br	171c <memchr+0x50>
    1798:	f800283a 	ret

0000179c <memcpy>:
    179c:	30c00430 	cmpltui	r3,r6,16
    17a0:	2005883a 	mov	r2,r4
    17a4:	18002d1e 	bne	r3,zero,185c <memcpy+0xc0>
    17a8:	2906b03a 	or	r3,r5,r4
    17ac:	18c000cc 	andi	r3,r3,3
    17b0:	1800351e 	bne	r3,zero,1888 <memcpy+0xec>
    17b4:	32fffc04 	addi	r11,r6,-16
    17b8:	5816d13a 	srli	r11,r11,4
    17bc:	280f883a 	mov	r7,r5
    17c0:	2007883a 	mov	r3,r4
    17c4:	5ac00044 	addi	r11,r11,1
    17c8:	5816913a 	slli	r11,r11,4
    17cc:	22d5883a 	add	r10,r4,r11
    17d0:	39000117 	ldw	r4,4(r7)
    17d4:	3a400017 	ldw	r9,0(r7)
    17d8:	3a000217 	ldw	r8,8(r7)
    17dc:	19000115 	stw	r4,4(r3)
    17e0:	39000317 	ldw	r4,12(r7)
    17e4:	1a400015 	stw	r9,0(r3)
    17e8:	1a000215 	stw	r8,8(r3)
    17ec:	19000315 	stw	r4,12(r3)
    17f0:	18c00404 	addi	r3,r3,16
    17f4:	39c00404 	addi	r7,r7,16
    17f8:	50fff51e 	bne	r10,r3,17d0 <memcpy+0x34>
    17fc:	3100030c 	andi	r4,r6,12
    1800:	2acb883a 	add	r5,r5,r11
    1804:	320003cc 	andi	r8,r6,15
    1808:	20002226 	beq	r4,zero,1894 <memcpy+0xf8>
    180c:	280f883a 	mov	r7,r5
    1810:	1813883a 	mov	r9,r3
    1814:	39c00104 	addi	r7,r7,4
    1818:	3abfff17 	ldw	r10,-4(r7)
    181c:	41c9c83a 	sub	r4,r8,r7
    1820:	2909883a 	add	r4,r5,r4
    1824:	4a800015 	stw	r10,0(r9)
    1828:	21000128 	cmpgeui	r4,r4,4
    182c:	4a400104 	addi	r9,r9,4
    1830:	203ff81e 	bne	r4,zero,1814 <memcpy+0x78>
    1834:	413fff04 	addi	r4,r8,-4
    1838:	2008d0ba 	srli	r4,r4,2
    183c:	318000cc 	andi	r6,r6,3
    1840:	31ffffc4 	addi	r7,r6,-1
    1844:	21000044 	addi	r4,r4,1
    1848:	200890ba 	slli	r4,r4,2
    184c:	1907883a 	add	r3,r3,r4
    1850:	290b883a 	add	r5,r5,r4
    1854:	3000041e 	bne	r6,zero,1868 <memcpy+0xcc>
    1858:	f800283a 	ret
    185c:	2007883a 	mov	r3,r4
    1860:	31ffffc4 	addi	r7,r6,-1
    1864:	303ffc26 	beq	r6,zero,1858 <memcpy+0xbc>
    1868:	39c00044 	addi	r7,r7,1
    186c:	19cf883a 	add	r7,r3,r7
    1870:	29800003 	ldbu	r6,0(r5)
    1874:	18c00044 	addi	r3,r3,1
    1878:	29400044 	addi	r5,r5,1
    187c:	19bfffc5 	stb	r6,-1(r3)
    1880:	38fffb1e 	bne	r7,r3,1870 <memcpy+0xd4>
    1884:	f800283a 	ret
    1888:	31ffffc4 	addi	r7,r6,-1
    188c:	2007883a 	mov	r3,r4
    1890:	003ff506 	br	1868 <memcpy+0xcc>
    1894:	400d883a 	mov	r6,r8
    1898:	003ff106 	br	1860 <memcpy+0xc4>

0000189c <memmove>:
    189c:	2005883a 	mov	r2,r4
    18a0:	29000a2e 	bgeu	r5,r4,18cc <memmove+0x30>
    18a4:	2989883a 	add	r4,r5,r6
    18a8:	1100082e 	bgeu	r2,r4,18cc <memmove+0x30>
    18ac:	1187883a 	add	r3,r2,r6
    18b0:	30003e26 	beq	r6,zero,19ac <memmove+0x110>
    18b4:	217fffc3 	ldbu	r5,-1(r4)
    18b8:	18ffffc4 	addi	r3,r3,-1
    18bc:	213fffc4 	addi	r4,r4,-1
    18c0:	19400005 	stb	r5,0(r3)
    18c4:	10fffb1e 	bne	r2,r3,18b4 <memmove+0x18>
    18c8:	f800283a 	ret
    18cc:	30c00430 	cmpltui	r3,r6,16
    18d0:	18000b26 	beq	r3,zero,1900 <memmove+0x64>
    18d4:	1007883a 	mov	r3,r2
    18d8:	31ffffc4 	addi	r7,r6,-1
    18dc:	30003726 	beq	r6,zero,19bc <memmove+0x120>
    18e0:	39c00044 	addi	r7,r7,1
    18e4:	29cf883a 	add	r7,r5,r7
    18e8:	29800003 	ldbu	r6,0(r5)
    18ec:	29400044 	addi	r5,r5,1
    18f0:	18c00044 	addi	r3,r3,1
    18f4:	19bfffc5 	stb	r6,-1(r3)
    18f8:	29fffb1e 	bne	r5,r7,18e8 <memmove+0x4c>
    18fc:	f800283a 	ret
    1900:	2886b03a 	or	r3,r5,r2
    1904:	18c000cc 	andi	r3,r3,3
    1908:	1800291e 	bne	r3,zero,19b0 <memmove+0x114>
    190c:	327ffc04 	addi	r9,r6,-16
    1910:	4812d13a 	srli	r9,r9,4
    1914:	280f883a 	mov	r7,r5
    1918:	1007883a 	mov	r3,r2
    191c:	4a400044 	addi	r9,r9,1
    1920:	4812913a 	slli	r9,r9,4
    1924:	1251883a 	add	r8,r2,r9
    1928:	39000017 	ldw	r4,0(r7)
    192c:	39c00404 	addi	r7,r7,16
    1930:	18c00404 	addi	r3,r3,16
    1934:	193ffc15 	stw	r4,-16(r3)
    1938:	393ffd17 	ldw	r4,-12(r7)
    193c:	193ffd15 	stw	r4,-12(r3)
    1940:	393ffe17 	ldw	r4,-8(r7)
    1944:	193ffe15 	stw	r4,-8(r3)
    1948:	393fff17 	ldw	r4,-4(r7)
    194c:	193fff15 	stw	r4,-4(r3)
    1950:	40fff51e 	bne	r8,r3,1928 <memmove+0x8c>
    1954:	3100030c 	andi	r4,r6,12
    1958:	2a4b883a 	add	r5,r5,r9
    195c:	320003cc 	andi	r8,r6,15
    1960:	20001726 	beq	r4,zero,19c0 <memmove+0x124>
    1964:	2813883a 	mov	r9,r5
    1968:	180f883a 	mov	r7,r3
    196c:	4a800017 	ldw	r10,0(r9)
    1970:	39c00104 	addi	r7,r7,4
    1974:	41c9c83a 	sub	r4,r8,r7
    1978:	1909883a 	add	r4,r3,r4
    197c:	21000128 	cmpgeui	r4,r4,4
    1980:	3abfff15 	stw	r10,-4(r7)
    1984:	4a400104 	addi	r9,r9,4
    1988:	203ff81e 	bne	r4,zero,196c <memmove+0xd0>
    198c:	413fff04 	addi	r4,r8,-4
    1990:	2008d0ba 	srli	r4,r4,2
    1994:	318000cc 	andi	r6,r6,3
    1998:	21000044 	addi	r4,r4,1
    199c:	200890ba 	slli	r4,r4,2
    19a0:	1907883a 	add	r3,r3,r4
    19a4:	290b883a 	add	r5,r5,r4
    19a8:	003fcb06 	br	18d8 <memmove+0x3c>
    19ac:	f800283a 	ret
    19b0:	31ffffc4 	addi	r7,r6,-1
    19b4:	1007883a 	mov	r3,r2
    19b8:	003fc906 	br	18e0 <memmove+0x44>
    19bc:	f800283a 	ret
    19c0:	400d883a 	mov	r6,r8
    19c4:	003fc406 	br	18d8 <memmove+0x3c>

000019c8 <memset>:
    19c8:	20c000cc 	andi	r3,r4,3
    19cc:	2005883a 	mov	r2,r4
    19d0:	18003626 	beq	r3,zero,1aac <memset+0xe4>
    19d4:	31ffffc4 	addi	r7,r6,-1
    19d8:	30003326 	beq	r6,zero,1aa8 <memset+0xe0>
    19dc:	2811883a 	mov	r8,r5
    19e0:	2007883a 	mov	r3,r4
    19e4:	00000306 	br	19f4 <memset+0x2c>
    19e8:	39ffffc4 	addi	r7,r7,-1
    19ec:	39bfffe0 	cmpeqi	r6,r7,-1
    19f0:	30002d1e 	bne	r6,zero,1aa8 <memset+0xe0>
    19f4:	18c00044 	addi	r3,r3,1
    19f8:	198000cc 	andi	r6,r3,3
    19fc:	1a3fffc5 	stb	r8,-1(r3)
    1a00:	303ff91e 	bne	r6,zero,19e8 <memset+0x20>
    1a04:	39000130 	cmpltui	r4,r7,4
    1a08:	2000221e 	bne	r4,zero,1a94 <memset+0xcc>
    1a0c:	29003fcc 	andi	r4,r5,255
    1a10:	200c923a 	slli	r6,r4,8
    1a14:	3a000430 	cmpltui	r8,r7,16
    1a18:	3108b03a 	or	r4,r6,r4
    1a1c:	200c943a 	slli	r6,r4,16
    1a20:	310cb03a 	or	r6,r6,r4
    1a24:	40000e1e 	bne	r8,zero,1a60 <memset+0x98>
    1a28:	393ffc04 	addi	r4,r7,-16
    1a2c:	2008d13a 	srli	r4,r4,4
    1a30:	21000044 	addi	r4,r4,1
    1a34:	2008913a 	slli	r4,r4,4
    1a38:	1909883a 	add	r4,r3,r4
    1a3c:	19800015 	stw	r6,0(r3)
    1a40:	19800115 	stw	r6,4(r3)
    1a44:	19800215 	stw	r6,8(r3)
    1a48:	19800315 	stw	r6,12(r3)
    1a4c:	18c00404 	addi	r3,r3,16
    1a50:	20fffa1e 	bne	r4,r3,1a3c <memset+0x74>
    1a54:	3900030c 	andi	r4,r7,12
    1a58:	39c003cc 	andi	r7,r7,15
    1a5c:	20000d26 	beq	r4,zero,1a94 <memset+0xcc>
    1a60:	1811883a 	mov	r8,r3
    1a64:	42000104 	addi	r8,r8,4
    1a68:	3a09c83a 	sub	r4,r7,r8
    1a6c:	1909883a 	add	r4,r3,r4
    1a70:	21000128 	cmpgeui	r4,r4,4
    1a74:	41bfff15 	stw	r6,-4(r8)
    1a78:	203ffa1e 	bne	r4,zero,1a64 <memset+0x9c>
    1a7c:	393fff04 	addi	r4,r7,-4
    1a80:	2008d0ba 	srli	r4,r4,2
    1a84:	39c000cc 	andi	r7,r7,3
    1a88:	21000044 	addi	r4,r4,1
    1a8c:	200890ba 	slli	r4,r4,2
    1a90:	1907883a 	add	r3,r3,r4
    1a94:	38000426 	beq	r7,zero,1aa8 <memset+0xe0>
    1a98:	19cf883a 	add	r7,r3,r7
    1a9c:	18c00044 	addi	r3,r3,1
    1aa0:	197fffc5 	stb	r5,-1(r3)
    1aa4:	38fffd1e 	bne	r7,r3,1a9c <memset+0xd4>
    1aa8:	f800283a 	ret
    1aac:	2007883a 	mov	r3,r4
    1ab0:	300f883a 	mov	r7,r6
    1ab4:	003fd306 	br	1a04 <memset+0x3c>

00001ab8 <_realloc_r>:
    1ab8:	defff504 	addi	sp,sp,-44
    1abc:	dc800315 	stw	r18,12(sp)
    1ac0:	dfc00a15 	stw	ra,40(sp)
    1ac4:	df000915 	stw	fp,36(sp)
    1ac8:	ddc00815 	stw	r23,32(sp)
    1acc:	dd800715 	stw	r22,28(sp)
    1ad0:	dd400615 	stw	r21,24(sp)
    1ad4:	dd000515 	stw	r20,20(sp)
    1ad8:	dcc00415 	stw	r19,16(sp)
    1adc:	dc400215 	stw	r17,8(sp)
    1ae0:	dc000115 	stw	r16,4(sp)
    1ae4:	3025883a 	mov	r18,r6
    1ae8:	28008b26 	beq	r5,zero,1d18 <_realloc_r+0x260>
    1aec:	2821883a 	mov	r16,r5
    1af0:	2027883a 	mov	r19,r4
    1af4:	944002c4 	addi	r17,r18,11
    1af8:	0003c700 	call	3c70 <__malloc_lock>
    1afc:	888005f0 	cmpltui	r2,r17,23
    1b00:	1000521e 	bne	r2,zero,1c4c <_realloc_r+0x194>
    1b04:	017ffe04 	movi	r5,-8
    1b08:	8962703a 	and	r17,r17,r5
    1b0c:	8807883a 	mov	r3,r17
    1b10:	88005116 	blt	r17,zero,1c58 <_realloc_r+0x1a0>
    1b14:	8c805036 	bltu	r17,r18,1c58 <_realloc_r+0x1a0>
    1b18:	80bfff17 	ldw	r2,-4(r16)
    1b1c:	017fff04 	movi	r5,-4
    1b20:	857ffe04 	addi	r21,r16,-8
    1b24:	1168703a 	and	r20,r2,r5
    1b28:	ad2d883a 	add	r22,r21,r20
    1b2c:	a0c0390e 	bge	r20,r3,1c14 <_realloc_r+0x15c>
    1b30:	07000074 	movhi	fp,1
    1b34:	e73ede04 	addi	fp,fp,-1160
    1b38:	e2000217 	ldw	r8,8(fp)
    1b3c:	b1000117 	ldw	r4,4(r22)
    1b40:	45808e26 	beq	r8,r22,1d7c <_realloc_r+0x2c4>
    1b44:	01bfff84 	movi	r6,-2
    1b48:	218c703a 	and	r6,r4,r6
    1b4c:	b18d883a 	add	r6,r22,r6
    1b50:	31800117 	ldw	r6,4(r6)
    1b54:	3180004c 	andi	r6,r6,1
    1b58:	30004f1e 	bne	r6,zero,1c98 <_realloc_r+0x1e0>
    1b5c:	2148703a 	and	r4,r4,r5
    1b60:	a10b883a 	add	r5,r20,r4
    1b64:	28c0bf0e 	bge	r5,r3,1e64 <_realloc_r+0x3ac>
    1b68:	1080004c 	andi	r2,r2,1
    1b6c:	10004c1e 	bne	r2,zero,1ca0 <_realloc_r+0x1e8>
    1b70:	81fffe17 	ldw	r7,-8(r16)
    1b74:	00bfff04 	movi	r2,-4
    1b78:	a9cfc83a 	sub	r7,r21,r7
    1b7c:	39400117 	ldw	r5,4(r7)
    1b80:	288a703a 	and	r5,r5,r2
    1b84:	b0000426 	beq	r22,zero,1b98 <_realloc_r+0xe0>
    1b88:	a16f883a 	add	r23,r20,r5
    1b8c:	b92f883a 	add	r23,r23,r4
    1b90:	4580bf26 	beq	r8,r22,1e90 <_realloc_r+0x3d8>
    1b94:	b8c0930e 	bge	r23,r3,1de4 <_realloc_r+0x32c>
    1b98:	38004126 	beq	r7,zero,1ca0 <_realloc_r+0x1e8>
    1b9c:	a16f883a 	add	r23,r20,r5
    1ba0:	b8c03f16 	blt	r23,r3,1ca0 <_realloc_r+0x1e8>
    1ba4:	38800317 	ldw	r2,12(r7)
    1ba8:	38c00217 	ldw	r3,8(r7)
    1bac:	a1bfff04 	addi	r6,r20,-4
    1bb0:	31400968 	cmpgeui	r5,r6,37
    1bb4:	18800315 	stw	r2,12(r3)
    1bb8:	10c00215 	stw	r3,8(r2)
    1bbc:	39000204 	addi	r4,r7,8
    1bc0:	3ded883a 	add	r22,r7,r23
    1bc4:	2800941e 	bne	r5,zero,1e18 <_realloc_r+0x360>
    1bc8:	30800530 	cmpltui	r2,r6,20
    1bcc:	80c00017 	ldw	r3,0(r16)
    1bd0:	1000df1e 	bne	r2,zero,1f50 <_realloc_r+0x498>
    1bd4:	38c00215 	stw	r3,8(r7)
    1bd8:	80c00117 	ldw	r3,4(r16)
    1bdc:	30800728 	cmpgeui	r2,r6,28
    1be0:	38c00315 	stw	r3,12(r7)
    1be4:	1000dc1e 	bne	r2,zero,1f58 <_realloc_r+0x4a0>
    1be8:	80c00217 	ldw	r3,8(r16)
    1bec:	38800404 	addi	r2,r7,16
    1bf0:	84000204 	addi	r16,r16,8
    1bf4:	10c00015 	stw	r3,0(r2)
    1bf8:	80c00117 	ldw	r3,4(r16)
    1bfc:	b829883a 	mov	r20,r23
    1c00:	382b883a 	mov	r21,r7
    1c04:	10c00115 	stw	r3,4(r2)
    1c08:	80c00217 	ldw	r3,8(r16)
    1c0c:	2021883a 	mov	r16,r4
    1c10:	10c00215 	stw	r3,8(r2)
    1c14:	a9800117 	ldw	r6,4(r21)
    1c18:	a445c83a 	sub	r2,r20,r17
    1c1c:	10c00430 	cmpltui	r3,r2,16
    1c20:	3180004c 	andi	r6,r6,1
    1c24:	18004926 	beq	r3,zero,1d4c <_realloc_r+0x294>
    1c28:	a18cb03a 	or	r6,r20,r6
    1c2c:	a9800115 	stw	r6,4(r21)
    1c30:	b0800117 	ldw	r2,4(r22)
    1c34:	10800054 	ori	r2,r2,1
    1c38:	b0800115 	stw	r2,4(r22)
    1c3c:	9809883a 	mov	r4,r19
    1c40:	0003d980 	call	3d98 <__malloc_unlock>
    1c44:	8025883a 	mov	r18,r16
    1c48:	00000606 	br	1c64 <_realloc_r+0x1ac>
    1c4c:	04400404 	movi	r17,16
    1c50:	00c00404 	movi	r3,16
    1c54:	8cbfb02e 	bgeu	r17,r18,1b18 <_realloc_r+0x60>
    1c58:	00800304 	movi	r2,12
    1c5c:	98800015 	stw	r2,0(r19)
    1c60:	0025883a 	mov	r18,zero
    1c64:	9005883a 	mov	r2,r18
    1c68:	dfc00a17 	ldw	ra,40(sp)
    1c6c:	df000917 	ldw	fp,36(sp)
    1c70:	ddc00817 	ldw	r23,32(sp)
    1c74:	dd800717 	ldw	r22,28(sp)
    1c78:	dd400617 	ldw	r21,24(sp)
    1c7c:	dd000517 	ldw	r20,20(sp)
    1c80:	dcc00417 	ldw	r19,16(sp)
    1c84:	dc800317 	ldw	r18,12(sp)
    1c88:	dc400217 	ldw	r17,8(sp)
    1c8c:	dc000117 	ldw	r16,4(sp)
    1c90:	dec00b04 	addi	sp,sp,44
    1c94:	f800283a 	ret
    1c98:	1080004c 	andi	r2,r2,1
    1c9c:	10006c26 	beq	r2,zero,1e50 <_realloc_r+0x398>
    1ca0:	900b883a 	mov	r5,r18
    1ca4:	9809883a 	mov	r4,r19
    1ca8:	0000eec0 	call	eec <_malloc_r>
    1cac:	1025883a 	mov	r18,r2
    1cb0:	10001626 	beq	r2,zero,1d0c <_realloc_r+0x254>
    1cb4:	80bfff17 	ldw	r2,-4(r16)
    1cb8:	013fff84 	movi	r4,-2
    1cbc:	90fffe04 	addi	r3,r18,-8
    1cc0:	1104703a 	and	r2,r2,r4
    1cc4:	a885883a 	add	r2,r21,r2
    1cc8:	10c05b26 	beq	r2,r3,1e38 <_realloc_r+0x380>
    1ccc:	a1bfff04 	addi	r6,r20,-4
    1cd0:	30800968 	cmpgeui	r2,r6,37
    1cd4:	10006a1e 	bne	r2,zero,1e80 <_realloc_r+0x3c8>
    1cd8:	30800530 	cmpltui	r2,r6,20
    1cdc:	81000017 	ldw	r4,0(r16)
    1ce0:	10003726 	beq	r2,zero,1dc0 <_realloc_r+0x308>
    1ce4:	9005883a 	mov	r2,r18
    1ce8:	8007883a 	mov	r3,r16
    1cec:	11000015 	stw	r4,0(r2)
    1cf0:	19000117 	ldw	r4,4(r3)
    1cf4:	11000115 	stw	r4,4(r2)
    1cf8:	18c00217 	ldw	r3,8(r3)
    1cfc:	10c00215 	stw	r3,8(r2)
    1d00:	800b883a 	mov	r5,r16
    1d04:	9809883a 	mov	r4,r19
    1d08:	000299c0 	call	299c <_free_r>
    1d0c:	9809883a 	mov	r4,r19
    1d10:	0003d980 	call	3d98 <__malloc_unlock>
    1d14:	003fd306 	br	1c64 <_realloc_r+0x1ac>
    1d18:	300b883a 	mov	r5,r6
    1d1c:	dfc00a17 	ldw	ra,40(sp)
    1d20:	df000917 	ldw	fp,36(sp)
    1d24:	ddc00817 	ldw	r23,32(sp)
    1d28:	dd800717 	ldw	r22,28(sp)
    1d2c:	dd400617 	ldw	r21,24(sp)
    1d30:	dd000517 	ldw	r20,20(sp)
    1d34:	dcc00417 	ldw	r19,16(sp)
    1d38:	dc800317 	ldw	r18,12(sp)
    1d3c:	dc400217 	ldw	r17,8(sp)
    1d40:	dc000117 	ldw	r16,4(sp)
    1d44:	dec00b04 	addi	sp,sp,44
    1d48:	0000eec1 	jmpi	eec <_malloc_r>
    1d4c:	344cb03a 	or	r6,r6,r17
    1d50:	a9800115 	stw	r6,4(r21)
    1d54:	ac4b883a 	add	r5,r21,r17
    1d58:	10800054 	ori	r2,r2,1
    1d5c:	28800115 	stw	r2,4(r5)
    1d60:	b0800117 	ldw	r2,4(r22)
    1d64:	29400204 	addi	r5,r5,8
    1d68:	9809883a 	mov	r4,r19
    1d6c:	10800054 	ori	r2,r2,1
    1d70:	b0800115 	stw	r2,4(r22)
    1d74:	000299c0 	call	299c <_free_r>
    1d78:	003fb006 	br	1c3c <_realloc_r+0x184>
    1d7c:	2148703a 	and	r4,r4,r5
    1d80:	a10b883a 	add	r5,r20,r4
    1d84:	89800404 	addi	r6,r17,16
    1d88:	29bf7716 	blt	r5,r6,1b68 <_realloc_r+0xb0>
    1d8c:	ac6b883a 	add	r21,r21,r17
    1d90:	2c45c83a 	sub	r2,r5,r17
    1d94:	e5400215 	stw	r21,8(fp)
    1d98:	10800054 	ori	r2,r2,1
    1d9c:	a8800115 	stw	r2,4(r21)
    1da0:	80bfff17 	ldw	r2,-4(r16)
    1da4:	9809883a 	mov	r4,r19
    1da8:	8025883a 	mov	r18,r16
    1dac:	1080004c 	andi	r2,r2,1
    1db0:	1462b03a 	or	r17,r2,r17
    1db4:	847fff15 	stw	r17,-4(r16)
    1db8:	0003d980 	call	3d98 <__malloc_unlock>
    1dbc:	003fa906 	br	1c64 <_realloc_r+0x1ac>
    1dc0:	91000015 	stw	r4,0(r18)
    1dc4:	80c00117 	ldw	r3,4(r16)
    1dc8:	30800728 	cmpgeui	r2,r6,28
    1dcc:	90c00115 	stw	r3,4(r18)
    1dd0:	1000551e 	bne	r2,zero,1f28 <_realloc_r+0x470>
    1dd4:	81000217 	ldw	r4,8(r16)
    1dd8:	80c00204 	addi	r3,r16,8
    1ddc:	90800204 	addi	r2,r18,8
    1de0:	003fc206 	br	1cec <_realloc_r+0x234>
    1de4:	b0800317 	ldw	r2,12(r22)
    1de8:	b0c00217 	ldw	r3,8(r22)
    1dec:	a1bfff04 	addi	r6,r20,-4
    1df0:	31400968 	cmpgeui	r5,r6,37
    1df4:	18800315 	stw	r2,12(r3)
    1df8:	10c00215 	stw	r3,8(r2)
    1dfc:	38c00217 	ldw	r3,8(r7)
    1e00:	38800317 	ldw	r2,12(r7)
    1e04:	39000204 	addi	r4,r7,8
    1e08:	3ded883a 	add	r22,r7,r23
    1e0c:	18800315 	stw	r2,12(r3)
    1e10:	10c00215 	stw	r3,8(r2)
    1e14:	283f6c26 	beq	r5,zero,1bc8 <_realloc_r+0x110>
    1e18:	800b883a 	mov	r5,r16
    1e1c:	d9c00015 	stw	r7,0(sp)
    1e20:	000189c0 	call	189c <memmove>
    1e24:	d9c00017 	ldw	r7,0(sp)
    1e28:	1021883a 	mov	r16,r2
    1e2c:	b829883a 	mov	r20,r23
    1e30:	382b883a 	mov	r21,r7
    1e34:	003f7706 	br	1c14 <_realloc_r+0x15c>
    1e38:	90bfff17 	ldw	r2,-4(r18)
    1e3c:	00ffff04 	movi	r3,-4
    1e40:	10c4703a 	and	r2,r2,r3
    1e44:	a0a9883a 	add	r20,r20,r2
    1e48:	ad2d883a 	add	r22,r21,r20
    1e4c:	003f7106 	br	1c14 <_realloc_r+0x15c>
    1e50:	81fffe17 	ldw	r7,-8(r16)
    1e54:	a9cfc83a 	sub	r7,r21,r7
    1e58:	38800117 	ldw	r2,4(r7)
    1e5c:	114a703a 	and	r5,r2,r5
    1e60:	003f4d06 	br	1b98 <_realloc_r+0xe0>
    1e64:	b0800317 	ldw	r2,12(r22)
    1e68:	b0c00217 	ldw	r3,8(r22)
    1e6c:	2829883a 	mov	r20,r5
    1e70:	a96d883a 	add	r22,r21,r5
    1e74:	18800315 	stw	r2,12(r3)
    1e78:	10c00215 	stw	r3,8(r2)
    1e7c:	003f6506 	br	1c14 <_realloc_r+0x15c>
    1e80:	800b883a 	mov	r5,r16
    1e84:	9009883a 	mov	r4,r18
    1e88:	000189c0 	call	189c <memmove>
    1e8c:	003f9c06 	br	1d00 <_realloc_r+0x248>
    1e90:	88800404 	addi	r2,r17,16
    1e94:	b8bf4016 	blt	r23,r2,1b98 <_realloc_r+0xe0>
    1e98:	38800317 	ldw	r2,12(r7)
    1e9c:	38c00217 	ldw	r3,8(r7)
    1ea0:	a1bfff04 	addi	r6,r20,-4
    1ea4:	31000968 	cmpgeui	r4,r6,37
    1ea8:	18800315 	stw	r2,12(r3)
    1eac:	10c00215 	stw	r3,8(r2)
    1eb0:	3c800204 	addi	r18,r7,8
    1eb4:	20003b1e 	bne	r4,zero,1fa4 <_realloc_r+0x4ec>
    1eb8:	30800530 	cmpltui	r2,r6,20
    1ebc:	80c00017 	ldw	r3,0(r16)
    1ec0:	1000361e 	bne	r2,zero,1f9c <_realloc_r+0x4e4>
    1ec4:	38c00215 	stw	r3,8(r7)
    1ec8:	80c00117 	ldw	r3,4(r16)
    1ecc:	30800728 	cmpgeui	r2,r6,28
    1ed0:	38c00315 	stw	r3,12(r7)
    1ed4:	1000401e 	bne	r2,zero,1fd8 <_realloc_r+0x520>
    1ed8:	80c00217 	ldw	r3,8(r16)
    1edc:	38800404 	addi	r2,r7,16
    1ee0:	84000204 	addi	r16,r16,8
    1ee4:	10c00015 	stw	r3,0(r2)
    1ee8:	80c00117 	ldw	r3,4(r16)
    1eec:	10c00115 	stw	r3,4(r2)
    1ef0:	80c00217 	ldw	r3,8(r16)
    1ef4:	10c00215 	stw	r3,8(r2)
    1ef8:	3c47883a 	add	r3,r7,r17
    1efc:	bc45c83a 	sub	r2,r23,r17
    1f00:	e0c00215 	stw	r3,8(fp)
    1f04:	10800054 	ori	r2,r2,1
    1f08:	18800115 	stw	r2,4(r3)
    1f0c:	38800117 	ldw	r2,4(r7)
    1f10:	9809883a 	mov	r4,r19
    1f14:	1080004c 	andi	r2,r2,1
    1f18:	1462b03a 	or	r17,r2,r17
    1f1c:	3c400115 	stw	r17,4(r7)
    1f20:	0003d980 	call	3d98 <__malloc_unlock>
    1f24:	003f4f06 	br	1c64 <_realloc_r+0x1ac>
    1f28:	80800217 	ldw	r2,8(r16)
    1f2c:	31800920 	cmpeqi	r6,r6,36
    1f30:	90800215 	stw	r2,8(r18)
    1f34:	80800317 	ldw	r2,12(r16)
    1f38:	90800315 	stw	r2,12(r18)
    1f3c:	81000417 	ldw	r4,16(r16)
    1f40:	30000f1e 	bne	r6,zero,1f80 <_realloc_r+0x4c8>
    1f44:	80c00404 	addi	r3,r16,16
    1f48:	90800404 	addi	r2,r18,16
    1f4c:	003f6706 	br	1cec <_realloc_r+0x234>
    1f50:	2005883a 	mov	r2,r4
    1f54:	003f2706 	br	1bf4 <_realloc_r+0x13c>
    1f58:	80800217 	ldw	r2,8(r16)
    1f5c:	31800920 	cmpeqi	r6,r6,36
    1f60:	38800415 	stw	r2,16(r7)
    1f64:	80800317 	ldw	r2,12(r16)
    1f68:	38800515 	stw	r2,20(r7)
    1f6c:	80c00417 	ldw	r3,16(r16)
    1f70:	3000121e 	bne	r6,zero,1fbc <_realloc_r+0x504>
    1f74:	38800604 	addi	r2,r7,24
    1f78:	84000404 	addi	r16,r16,16
    1f7c:	003f1d06 	br	1bf4 <_realloc_r+0x13c>
    1f80:	91000415 	stw	r4,16(r18)
    1f84:	81000517 	ldw	r4,20(r16)
    1f88:	80c00604 	addi	r3,r16,24
    1f8c:	90800604 	addi	r2,r18,24
    1f90:	91000515 	stw	r4,20(r18)
    1f94:	81000617 	ldw	r4,24(r16)
    1f98:	003f5406 	br	1cec <_realloc_r+0x234>
    1f9c:	9005883a 	mov	r2,r18
    1fa0:	003fd006 	br	1ee4 <_realloc_r+0x42c>
    1fa4:	800b883a 	mov	r5,r16
    1fa8:	9009883a 	mov	r4,r18
    1fac:	d9c00015 	stw	r7,0(sp)
    1fb0:	000189c0 	call	189c <memmove>
    1fb4:	d9c00017 	ldw	r7,0(sp)
    1fb8:	003fcf06 	br	1ef8 <_realloc_r+0x440>
    1fbc:	84000604 	addi	r16,r16,24
    1fc0:	38c00615 	stw	r3,24(r7)
    1fc4:	80ffff17 	ldw	r3,-4(r16)
    1fc8:	38800804 	addi	r2,r7,32
    1fcc:	38c00715 	stw	r3,28(r7)
    1fd0:	80c00017 	ldw	r3,0(r16)
    1fd4:	003f0706 	br	1bf4 <_realloc_r+0x13c>
    1fd8:	80800217 	ldw	r2,8(r16)
    1fdc:	31800920 	cmpeqi	r6,r6,36
    1fe0:	38800415 	stw	r2,16(r7)
    1fe4:	80800317 	ldw	r2,12(r16)
    1fe8:	38800515 	stw	r2,20(r7)
    1fec:	80c00417 	ldw	r3,16(r16)
    1ff0:	3000031e 	bne	r6,zero,2000 <_realloc_r+0x548>
    1ff4:	38800604 	addi	r2,r7,24
    1ff8:	84000404 	addi	r16,r16,16
    1ffc:	003fb906 	br	1ee4 <_realloc_r+0x42c>
    2000:	84000604 	addi	r16,r16,24
    2004:	38c00615 	stw	r3,24(r7)
    2008:	80ffff17 	ldw	r3,-4(r16)
    200c:	38800804 	addi	r2,r7,32
    2010:	38c00715 	stw	r3,28(r7)
    2014:	80c00017 	ldw	r3,0(r16)
    2018:	003fb206 	br	1ee4 <_realloc_r+0x42c>

0000201c <_sbrk_r>:
    201c:	defffe04 	addi	sp,sp,-8
    2020:	dc000015 	stw	r16,0(sp)
    2024:	00800074 	movhi	r2,1
    2028:	2021883a 	mov	r16,r4
    202c:	2809883a 	mov	r4,r5
    2030:	dfc00115 	stw	ra,4(sp)
    2034:	100cd815 	stw	zero,13152(r2)
    2038:	00039640 	call	3964 <sbrk>
    203c:	10ffffd8 	cmpnei	r3,r2,-1
    2040:	18000426 	beq	r3,zero,2054 <_sbrk_r+0x38>
    2044:	dfc00117 	ldw	ra,4(sp)
    2048:	dc000017 	ldw	r16,0(sp)
    204c:	dec00204 	addi	sp,sp,8
    2050:	f800283a 	ret
    2054:	00c00074 	movhi	r3,1
    2058:	18ccd817 	ldw	r3,13152(r3)
    205c:	183ff926 	beq	r3,zero,2044 <_sbrk_r+0x28>
    2060:	80c00015 	stw	r3,0(r16)
    2064:	dfc00117 	ldw	ra,4(sp)
    2068:	dc000017 	ldw	r16,0(sp)
    206c:	dec00204 	addi	sp,sp,8
    2070:	f800283a 	ret

00002074 <__sread>:
    2074:	defffe04 	addi	sp,sp,-8
    2078:	dc000015 	stw	r16,0(sp)
    207c:	2821883a 	mov	r16,r5
    2080:	2940038f 	ldh	r5,14(r5)
    2084:	dfc00115 	stw	ra,4(sp)
    2088:	0002f440 	call	2f44 <_read_r>
    208c:	10000716 	blt	r2,zero,20ac <__sread+0x38>
    2090:	80c01417 	ldw	r3,80(r16)
    2094:	1887883a 	add	r3,r3,r2
    2098:	80c01415 	stw	r3,80(r16)
    209c:	dfc00117 	ldw	ra,4(sp)
    20a0:	dc000017 	ldw	r16,0(sp)
    20a4:	dec00204 	addi	sp,sp,8
    20a8:	f800283a 	ret
    20ac:	80c0030b 	ldhu	r3,12(r16)
    20b0:	18fbffcc 	andi	r3,r3,61439
    20b4:	80c0030d 	sth	r3,12(r16)
    20b8:	dfc00117 	ldw	ra,4(sp)
    20bc:	dc000017 	ldw	r16,0(sp)
    20c0:	dec00204 	addi	sp,sp,8
    20c4:	f800283a 	ret

000020c8 <__seofread>:
    20c8:	0005883a 	mov	r2,zero
    20cc:	f800283a 	ret

000020d0 <__swrite>:
    20d0:	2880030b 	ldhu	r2,12(r5)
    20d4:	defffb04 	addi	sp,sp,-20
    20d8:	dcc00315 	stw	r19,12(sp)
    20dc:	dc800215 	stw	r18,8(sp)
    20e0:	dc400115 	stw	r17,4(sp)
    20e4:	dc000015 	stw	r16,0(sp)
    20e8:	dfc00415 	stw	ra,16(sp)
    20ec:	10c0400c 	andi	r3,r2,256
    20f0:	2821883a 	mov	r16,r5
    20f4:	2023883a 	mov	r17,r4
    20f8:	2940038f 	ldh	r5,14(r5)
    20fc:	3025883a 	mov	r18,r6
    2100:	3827883a 	mov	r19,r7
    2104:	18000c1e 	bne	r3,zero,2138 <__swrite+0x68>
    2108:	10bbffcc 	andi	r2,r2,61439
    210c:	980f883a 	mov	r7,r19
    2110:	900d883a 	mov	r6,r18
    2114:	8809883a 	mov	r4,r17
    2118:	8080030d 	sth	r2,12(r16)
    211c:	dfc00417 	ldw	ra,16(sp)
    2120:	dcc00317 	ldw	r19,12(sp)
    2124:	dc800217 	ldw	r18,8(sp)
    2128:	dc400117 	ldw	r17,4(sp)
    212c:	dc000017 	ldw	r16,0(sp)
    2130:	dec00504 	addi	sp,sp,20
    2134:	00021b41 	jmpi	21b4 <_write_r>
    2138:	01c00084 	movi	r7,2
    213c:	000d883a 	mov	r6,zero
    2140:	0002c980 	call	2c98 <_lseek_r>
    2144:	8080030b 	ldhu	r2,12(r16)
    2148:	8140038f 	ldh	r5,14(r16)
    214c:	003fee06 	br	2108 <__swrite+0x38>

00002150 <__sseek>:
    2150:	defffe04 	addi	sp,sp,-8
    2154:	dc000015 	stw	r16,0(sp)
    2158:	2821883a 	mov	r16,r5
    215c:	2940038f 	ldh	r5,14(r5)
    2160:	dfc00115 	stw	ra,4(sp)
    2164:	0002c980 	call	2c98 <_lseek_r>
    2168:	10ffffd8 	cmpnei	r3,r2,-1
    216c:	18000826 	beq	r3,zero,2190 <__sseek+0x40>
    2170:	80c0030b 	ldhu	r3,12(r16)
    2174:	80801415 	stw	r2,80(r16)
    2178:	18c40014 	ori	r3,r3,4096
    217c:	80c0030d 	sth	r3,12(r16)
    2180:	dfc00117 	ldw	ra,4(sp)
    2184:	dc000017 	ldw	r16,0(sp)
    2188:	dec00204 	addi	sp,sp,8
    218c:	f800283a 	ret
    2190:	80c0030b 	ldhu	r3,12(r16)
    2194:	18fbffcc 	andi	r3,r3,61439
    2198:	80c0030d 	sth	r3,12(r16)
    219c:	dfc00117 	ldw	ra,4(sp)
    21a0:	dc000017 	ldw	r16,0(sp)
    21a4:	dec00204 	addi	sp,sp,8
    21a8:	f800283a 	ret

000021ac <__sclose>:
    21ac:	2940038f 	ldh	r5,14(r5)
    21b0:	000237c1 	jmpi	237c <_close_r>

000021b4 <_write_r>:
    21b4:	2807883a 	mov	r3,r5
    21b8:	defffe04 	addi	sp,sp,-8
    21bc:	dc000015 	stw	r16,0(sp)
    21c0:	300b883a 	mov	r5,r6
    21c4:	00800074 	movhi	r2,1
    21c8:	380d883a 	mov	r6,r7
    21cc:	2021883a 	mov	r16,r4
    21d0:	1809883a 	mov	r4,r3
    21d4:	dfc00115 	stw	ra,4(sp)
    21d8:	100cd815 	stw	zero,13152(r2)
    21dc:	0003a580 	call	3a58 <write>
    21e0:	10ffffd8 	cmpnei	r3,r2,-1
    21e4:	18000426 	beq	r3,zero,21f8 <_write_r+0x44>
    21e8:	dfc00117 	ldw	ra,4(sp)
    21ec:	dc000017 	ldw	r16,0(sp)
    21f0:	dec00204 	addi	sp,sp,8
    21f4:	f800283a 	ret
    21f8:	00c00074 	movhi	r3,1
    21fc:	18ccd817 	ldw	r3,13152(r3)
    2200:	183ff926 	beq	r3,zero,21e8 <_write_r+0x34>
    2204:	80c00015 	stw	r3,0(r16)
    2208:	dfc00117 	ldw	ra,4(sp)
    220c:	dc000017 	ldw	r16,0(sp)
    2210:	dec00204 	addi	sp,sp,8
    2214:	f800283a 	ret

00002218 <__swsetup_r>:
    2218:	00800074 	movhi	r2,1
    221c:	10852917 	ldw	r2,5284(r2)
    2220:	defffd04 	addi	sp,sp,-12
    2224:	dc400115 	stw	r17,4(sp)
    2228:	dc000015 	stw	r16,0(sp)
    222c:	dfc00215 	stw	ra,8(sp)
    2230:	2023883a 	mov	r17,r4
    2234:	2821883a 	mov	r16,r5
    2238:	10000226 	beq	r2,zero,2244 <__swsetup_r+0x2c>
    223c:	10c00e17 	ldw	r3,56(r2)
    2240:	18001f26 	beq	r3,zero,22c0 <__swsetup_r+0xa8>
    2244:	8180030b 	ldhu	r6,12(r16)
    2248:	30c0020c 	andi	r3,r6,8
    224c:	3005883a 	mov	r2,r6
    2250:	18002126 	beq	r3,zero,22d8 <__swsetup_r+0xc0>
    2254:	80c00417 	ldw	r3,16(r16)
    2258:	18002826 	beq	r3,zero,22fc <__swsetup_r+0xe4>
    225c:	1100004c 	andi	r4,r2,1
    2260:	20000b1e 	bne	r4,zero,2290 <__swsetup_r+0x78>
    2264:	1100008c 	andi	r4,r2,2
    2268:	20002e1e 	bne	r4,zero,2324 <__swsetup_r+0x10c>
    226c:	81000517 	ldw	r4,20(r16)
    2270:	81000215 	stw	r4,8(r16)
    2274:	18000b26 	beq	r3,zero,22a4 <__swsetup_r+0x8c>
    2278:	0005883a 	mov	r2,zero
    227c:	dfc00217 	ldw	ra,8(sp)
    2280:	dc400117 	ldw	r17,4(sp)
    2284:	dc000017 	ldw	r16,0(sp)
    2288:	dec00304 	addi	sp,sp,12
    228c:	f800283a 	ret
    2290:	81000517 	ldw	r4,20(r16)
    2294:	80000215 	stw	zero,8(r16)
    2298:	0109c83a 	sub	r4,zero,r4
    229c:	81000615 	stw	r4,24(r16)
    22a0:	183ff51e 	bne	r3,zero,2278 <__swsetup_r+0x60>
    22a4:	10c0200c 	andi	r3,r2,128
    22a8:	0005883a 	mov	r2,zero
    22ac:	183ff326 	beq	r3,zero,227c <__swsetup_r+0x64>
    22b0:	31801014 	ori	r6,r6,64
    22b4:	8180030d 	sth	r6,12(r16)
    22b8:	00bfffc4 	movi	r2,-1
    22bc:	003fef06 	br	227c <__swsetup_r+0x64>
    22c0:	1009883a 	mov	r4,r2
    22c4:	00008ac0 	call	8ac <__sinit>
    22c8:	8180030b 	ldhu	r6,12(r16)
    22cc:	30c0020c 	andi	r3,r6,8
    22d0:	3005883a 	mov	r2,r6
    22d4:	183fdf1e 	bne	r3,zero,2254 <__swsetup_r+0x3c>
    22d8:	3080040c 	andi	r2,r6,16
    22dc:	10002126 	beq	r2,zero,2364 <__swsetup_r+0x14c>
    22e0:	3080010c 	andi	r2,r6,4
    22e4:	1000111e 	bne	r2,zero,232c <__swsetup_r+0x114>
    22e8:	80c00417 	ldw	r3,16(r16)
    22ec:	30800214 	ori	r2,r6,8
    22f0:	8080030d 	sth	r2,12(r16)
    22f4:	100d883a 	mov	r6,r2
    22f8:	183fd81e 	bne	r3,zero,225c <__swsetup_r+0x44>
    22fc:	1100a00c 	andi	r4,r2,640
    2300:	21008020 	cmpeqi	r4,r4,512
    2304:	203fd51e 	bne	r4,zero,225c <__swsetup_r+0x44>
    2308:	800b883a 	mov	r5,r16
    230c:	8809883a 	mov	r4,r17
    2310:	0002cfc0 	call	2cfc <__smakebuf_r>
    2314:	8180030b 	ldhu	r6,12(r16)
    2318:	80c00417 	ldw	r3,16(r16)
    231c:	3005883a 	mov	r2,r6
    2320:	003fce06 	br	225c <__swsetup_r+0x44>
    2324:	0009883a 	mov	r4,zero
    2328:	003fd106 	br	2270 <__swsetup_r+0x58>
    232c:	81400c17 	ldw	r5,48(r16)
    2330:	28000626 	beq	r5,zero,234c <__swsetup_r+0x134>
    2334:	80801004 	addi	r2,r16,64
    2338:	28800326 	beq	r5,r2,2348 <__swsetup_r+0x130>
    233c:	8809883a 	mov	r4,r17
    2340:	000299c0 	call	299c <_free_r>
    2344:	8180030b 	ldhu	r6,12(r16)
    2348:	80000c15 	stw	zero,48(r16)
    234c:	80c00417 	ldw	r3,16(r16)
    2350:	00bff6c4 	movi	r2,-37
    2354:	118c703a 	and	r6,r2,r6
    2358:	80000115 	stw	zero,4(r16)
    235c:	80c00015 	stw	r3,0(r16)
    2360:	003fe206 	br	22ec <__swsetup_r+0xd4>
    2364:	00800244 	movi	r2,9
    2368:	88800015 	stw	r2,0(r17)
    236c:	31801014 	ori	r6,r6,64
    2370:	8180030d 	sth	r6,12(r16)
    2374:	00bfffc4 	movi	r2,-1
    2378:	003fc006 	br	227c <__swsetup_r+0x64>

0000237c <_close_r>:
    237c:	defffe04 	addi	sp,sp,-8
    2380:	dc000015 	stw	r16,0(sp)
    2384:	00800074 	movhi	r2,1
    2388:	2021883a 	mov	r16,r4
    238c:	2809883a 	mov	r4,r5
    2390:	dfc00115 	stw	ra,4(sp)
    2394:	100cd815 	stw	zero,13152(r2)
    2398:	00032500 	call	3250 <close>
    239c:	10ffffd8 	cmpnei	r3,r2,-1
    23a0:	18000426 	beq	r3,zero,23b4 <_close_r+0x38>
    23a4:	dfc00117 	ldw	ra,4(sp)
    23a8:	dc000017 	ldw	r16,0(sp)
    23ac:	dec00204 	addi	sp,sp,8
    23b0:	f800283a 	ret
    23b4:	00c00074 	movhi	r3,1
    23b8:	18ccd817 	ldw	r3,13152(r3)
    23bc:	183ff926 	beq	r3,zero,23a4 <_close_r+0x28>
    23c0:	80c00015 	stw	r3,0(r16)
    23c4:	dfc00117 	ldw	ra,4(sp)
    23c8:	dc000017 	ldw	r16,0(sp)
    23cc:	dec00204 	addi	sp,sp,8
    23d0:	f800283a 	ret

000023d4 <_fclose_r.part.0>:
    23d4:	defffc04 	addi	sp,sp,-16
    23d8:	dc800215 	stw	r18,8(sp)
    23dc:	dc400115 	stw	r17,4(sp)
    23e0:	dc000015 	stw	r16,0(sp)
    23e4:	dfc00315 	stw	ra,12(sp)
    23e8:	2821883a 	mov	r16,r5
    23ec:	2023883a 	mov	r17,r4
    23f0:	00025740 	call	2574 <__sflush_r>
    23f4:	80c00b17 	ldw	r3,44(r16)
    23f8:	1025883a 	mov	r18,r2
    23fc:	18000426 	beq	r3,zero,2410 <_fclose_r.part.0+0x3c>
    2400:	81400717 	ldw	r5,28(r16)
    2404:	8809883a 	mov	r4,r17
    2408:	183ee83a 	callr	r3
    240c:	10001916 	blt	r2,zero,2474 <_fclose_r.part.0+0xa0>
    2410:	8080030b 	ldhu	r2,12(r16)
    2414:	1080200c 	andi	r2,r2,128
    2418:	10001a1e 	bne	r2,zero,2484 <_fclose_r.part.0+0xb0>
    241c:	81400c17 	ldw	r5,48(r16)
    2420:	28000526 	beq	r5,zero,2438 <_fclose_r.part.0+0x64>
    2424:	80801004 	addi	r2,r16,64
    2428:	28800226 	beq	r5,r2,2434 <_fclose_r.part.0+0x60>
    242c:	8809883a 	mov	r4,r17
    2430:	000299c0 	call	299c <_free_r>
    2434:	80000c15 	stw	zero,48(r16)
    2438:	81401117 	ldw	r5,68(r16)
    243c:	28000326 	beq	r5,zero,244c <_fclose_r.part.0+0x78>
    2440:	8809883a 	mov	r4,r17
    2444:	000299c0 	call	299c <_free_r>
    2448:	80001115 	stw	zero,68(r16)
    244c:	00008bc0 	call	8bc <__sfp_lock_acquire>
    2450:	8000030d 	sth	zero,12(r16)
    2454:	00008c00 	call	8c0 <__sfp_lock_release>
    2458:	9005883a 	mov	r2,r18
    245c:	dfc00317 	ldw	ra,12(sp)
    2460:	dc800217 	ldw	r18,8(sp)
    2464:	dc400117 	ldw	r17,4(sp)
    2468:	dc000017 	ldw	r16,0(sp)
    246c:	dec00404 	addi	sp,sp,16
    2470:	f800283a 	ret
    2474:	8080030b 	ldhu	r2,12(r16)
    2478:	04bfffc4 	movi	r18,-1
    247c:	1080200c 	andi	r2,r2,128
    2480:	103fe626 	beq	r2,zero,241c <_fclose_r.part.0+0x48>
    2484:	81400417 	ldw	r5,16(r16)
    2488:	8809883a 	mov	r4,r17
    248c:	000299c0 	call	299c <_free_r>
    2490:	003fe206 	br	241c <_fclose_r.part.0+0x48>

00002494 <_fclose_r>:
    2494:	28001926 	beq	r5,zero,24fc <_fclose_r+0x68>
    2498:	defffd04 	addi	sp,sp,-12
    249c:	dc000115 	stw	r16,4(sp)
    24a0:	dfc00215 	stw	ra,8(sp)
    24a4:	2021883a 	mov	r16,r4
    24a8:	20000226 	beq	r4,zero,24b4 <_fclose_r+0x20>
    24ac:	20800e17 	ldw	r2,56(r4)
    24b0:	10000c26 	beq	r2,zero,24e4 <_fclose_r+0x50>
    24b4:	2880030f 	ldh	r2,12(r5)
    24b8:	1000051e 	bne	r2,zero,24d0 <_fclose_r+0x3c>
    24bc:	0005883a 	mov	r2,zero
    24c0:	dfc00217 	ldw	ra,8(sp)
    24c4:	dc000117 	ldw	r16,4(sp)
    24c8:	dec00304 	addi	sp,sp,12
    24cc:	f800283a 	ret
    24d0:	8009883a 	mov	r4,r16
    24d4:	dfc00217 	ldw	ra,8(sp)
    24d8:	dc000117 	ldw	r16,4(sp)
    24dc:	dec00304 	addi	sp,sp,12
    24e0:	00023d41 	jmpi	23d4 <_fclose_r.part.0>
    24e4:	d9400015 	stw	r5,0(sp)
    24e8:	00008ac0 	call	8ac <__sinit>
    24ec:	d9400017 	ldw	r5,0(sp)
    24f0:	2880030f 	ldh	r2,12(r5)
    24f4:	103ff126 	beq	r2,zero,24bc <_fclose_r+0x28>
    24f8:	003ff506 	br	24d0 <_fclose_r+0x3c>
    24fc:	0005883a 	mov	r2,zero
    2500:	f800283a 	ret

00002504 <fclose>:
    2504:	20000826 	beq	r4,zero,2528 <fclose+0x24>
    2508:	00800074 	movhi	r2,1
    250c:	200b883a 	mov	r5,r4
    2510:	11052917 	ldw	r4,5284(r2)
    2514:	20000226 	beq	r4,zero,2520 <fclose+0x1c>
    2518:	20800e17 	ldw	r2,56(r4)
    251c:	10000526 	beq	r2,zero,2534 <fclose+0x30>
    2520:	2880030f 	ldh	r2,12(r5)
    2524:	1000021e 	bne	r2,zero,2530 <fclose+0x2c>
    2528:	0005883a 	mov	r2,zero
    252c:	f800283a 	ret
    2530:	00023d41 	jmpi	23d4 <_fclose_r.part.0>
    2534:	defffd04 	addi	sp,sp,-12
    2538:	d9400115 	stw	r5,4(sp)
    253c:	d9000015 	stw	r4,0(sp)
    2540:	dfc00215 	stw	ra,8(sp)
    2544:	00008ac0 	call	8ac <__sinit>
    2548:	d9400117 	ldw	r5,4(sp)
    254c:	d9000017 	ldw	r4,0(sp)
    2550:	2880030f 	ldh	r2,12(r5)
    2554:	10000326 	beq	r2,zero,2564 <fclose+0x60>
    2558:	dfc00217 	ldw	ra,8(sp)
    255c:	dec00304 	addi	sp,sp,12
    2560:	00023d41 	jmpi	23d4 <_fclose_r.part.0>
    2564:	0005883a 	mov	r2,zero
    2568:	dfc00217 	ldw	ra,8(sp)
    256c:	dec00304 	addi	sp,sp,12
    2570:	f800283a 	ret

00002574 <__sflush_r>:
    2574:	2880030b 	ldhu	r2,12(r5)
    2578:	defffb04 	addi	sp,sp,-20
    257c:	dcc00315 	stw	r19,12(sp)
    2580:	dc000015 	stw	r16,0(sp)
    2584:	dfc00415 	stw	ra,16(sp)
    2588:	dc800215 	stw	r18,8(sp)
    258c:	dc400115 	stw	r17,4(sp)
    2590:	10c0020c 	andi	r3,r2,8
    2594:	2821883a 	mov	r16,r5
    2598:	2027883a 	mov	r19,r4
    259c:	18003f1e 	bne	r3,zero,269c <__sflush_r+0x128>
    25a0:	28c00117 	ldw	r3,4(r5)
    25a4:	10820014 	ori	r2,r2,2048
    25a8:	2880030d 	sth	r2,12(r5)
    25ac:	00c0550e 	bge	zero,r3,2704 <__sflush_r+0x190>
    25b0:	82000a17 	ldw	r8,40(r16)
    25b4:	40003126 	beq	r8,zero,267c <__sflush_r+0x108>
    25b8:	9c400017 	ldw	r17,0(r19)
    25bc:	1104000c 	andi	r4,r2,4096
    25c0:	98000015 	stw	zero,0(r19)
    25c4:	81400717 	ldw	r5,28(r16)
    25c8:	1007883a 	mov	r3,r2
    25cc:	2000521e 	bne	r4,zero,2718 <__sflush_r+0x1a4>
    25d0:	01c00044 	movi	r7,1
    25d4:	000d883a 	mov	r6,zero
    25d8:	9809883a 	mov	r4,r19
    25dc:	403ee83a 	callr	r8
    25e0:	10ffffd8 	cmpnei	r3,r2,-1
    25e4:	18005826 	beq	r3,zero,2748 <__sflush_r+0x1d4>
    25e8:	80c0030b 	ldhu	r3,12(r16)
    25ec:	82000a17 	ldw	r8,40(r16)
    25f0:	81400717 	ldw	r5,28(r16)
    25f4:	18c0010c 	andi	r3,r3,4
    25f8:	18000626 	beq	r3,zero,2614 <__sflush_r+0xa0>
    25fc:	81000117 	ldw	r4,4(r16)
    2600:	80c00c17 	ldw	r3,48(r16)
    2604:	1105c83a 	sub	r2,r2,r4
    2608:	18000226 	beq	r3,zero,2614 <__sflush_r+0xa0>
    260c:	80c00f17 	ldw	r3,60(r16)
    2610:	10c5c83a 	sub	r2,r2,r3
    2614:	100d883a 	mov	r6,r2
    2618:	000f883a 	mov	r7,zero
    261c:	9809883a 	mov	r4,r19
    2620:	403ee83a 	callr	r8
    2624:	10ffffd8 	cmpnei	r3,r2,-1
    2628:	18003d1e 	bne	r3,zero,2720 <__sflush_r+0x1ac>
    262c:	99000017 	ldw	r4,0(r19)
    2630:	80c0030b 	ldhu	r3,12(r16)
    2634:	20004e26 	beq	r4,zero,2770 <__sflush_r+0x1fc>
    2638:	21400760 	cmpeqi	r5,r4,29
    263c:	2800021e 	bne	r5,zero,2648 <__sflush_r+0xd4>
    2640:	210005a0 	cmpeqi	r4,r4,22
    2644:	20002c26 	beq	r4,zero,26f8 <__sflush_r+0x184>
    2648:	80800417 	ldw	r2,16(r16)
    264c:	18fdffcc 	andi	r3,r3,63487
    2650:	80c0030d 	sth	r3,12(r16)
    2654:	80000115 	stw	zero,4(r16)
    2658:	80800015 	stw	r2,0(r16)
    265c:	81400c17 	ldw	r5,48(r16)
    2660:	9c400015 	stw	r17,0(r19)
    2664:	28000526 	beq	r5,zero,267c <__sflush_r+0x108>
    2668:	80801004 	addi	r2,r16,64
    266c:	28800226 	beq	r5,r2,2678 <__sflush_r+0x104>
    2670:	9809883a 	mov	r4,r19
    2674:	000299c0 	call	299c <_free_r>
    2678:	80000c15 	stw	zero,48(r16)
    267c:	0005883a 	mov	r2,zero
    2680:	dfc00417 	ldw	ra,16(sp)
    2684:	dcc00317 	ldw	r19,12(sp)
    2688:	dc800217 	ldw	r18,8(sp)
    268c:	dc400117 	ldw	r17,4(sp)
    2690:	dc000017 	ldw	r16,0(sp)
    2694:	dec00504 	addi	sp,sp,20
    2698:	f800283a 	ret
    269c:	2c800417 	ldw	r18,16(r5)
    26a0:	903ff626 	beq	r18,zero,267c <__sflush_r+0x108>
    26a4:	2c400017 	ldw	r17,0(r5)
    26a8:	108000cc 	andi	r2,r2,3
    26ac:	2c800015 	stw	r18,0(r5)
    26b0:	8ca3c83a 	sub	r17,r17,r18
    26b4:	1000161e 	bne	r2,zero,2710 <__sflush_r+0x19c>
    26b8:	28800517 	ldw	r2,20(r5)
    26bc:	80800215 	stw	r2,8(r16)
    26c0:	04400316 	blt	zero,r17,26d0 <__sflush_r+0x15c>
    26c4:	003fed06 	br	267c <__sflush_r+0x108>
    26c8:	90a5883a 	add	r18,r18,r2
    26cc:	047feb0e 	bge	zero,r17,267c <__sflush_r+0x108>
    26d0:	80800917 	ldw	r2,36(r16)
    26d4:	81400717 	ldw	r5,28(r16)
    26d8:	880f883a 	mov	r7,r17
    26dc:	900d883a 	mov	r6,r18
    26e0:	9809883a 	mov	r4,r19
    26e4:	103ee83a 	callr	r2
    26e8:	88a3c83a 	sub	r17,r17,r2
    26ec:	00bff616 	blt	zero,r2,26c8 <__sflush_r+0x154>
    26f0:	80c0030b 	ldhu	r3,12(r16)
    26f4:	00bfffc4 	movi	r2,-1
    26f8:	18c01014 	ori	r3,r3,64
    26fc:	80c0030d 	sth	r3,12(r16)
    2700:	003fdf06 	br	2680 <__sflush_r+0x10c>
    2704:	28c00f17 	ldw	r3,60(r5)
    2708:	00ffa916 	blt	zero,r3,25b0 <__sflush_r+0x3c>
    270c:	003fdb06 	br	267c <__sflush_r+0x108>
    2710:	0005883a 	mov	r2,zero
    2714:	003fe906 	br	26bc <__sflush_r+0x148>
    2718:	80801417 	ldw	r2,80(r16)
    271c:	003fb506 	br	25f4 <__sflush_r+0x80>
    2720:	80c0030b 	ldhu	r3,12(r16)
    2724:	81000417 	ldw	r4,16(r16)
    2728:	80000115 	stw	zero,4(r16)
    272c:	197dffcc 	andi	r5,r3,63487
    2730:	8140030d 	sth	r5,12(r16)
    2734:	81000015 	stw	r4,0(r16)
    2738:	18c4000c 	andi	r3,r3,4096
    273c:	183fc726 	beq	r3,zero,265c <__sflush_r+0xe8>
    2740:	80801415 	stw	r2,80(r16)
    2744:	003fc506 	br	265c <__sflush_r+0xe8>
    2748:	98c00017 	ldw	r3,0(r19)
    274c:	183fa626 	beq	r3,zero,25e8 <__sflush_r+0x74>
    2750:	19000760 	cmpeqi	r4,r3,29
    2754:	20000e1e 	bne	r4,zero,2790 <__sflush_r+0x21c>
    2758:	18c00598 	cmpnei	r3,r3,22
    275c:	18000c26 	beq	r3,zero,2790 <__sflush_r+0x21c>
    2760:	80c0030b 	ldhu	r3,12(r16)
    2764:	18c01014 	ori	r3,r3,64
    2768:	80c0030d 	sth	r3,12(r16)
    276c:	003fc406 	br	2680 <__sflush_r+0x10c>
    2770:	81000417 	ldw	r4,16(r16)
    2774:	197dffcc 	andi	r5,r3,63487
    2778:	8140030d 	sth	r5,12(r16)
    277c:	80000115 	stw	zero,4(r16)
    2780:	81000015 	stw	r4,0(r16)
    2784:	18c4000c 	andi	r3,r3,4096
    2788:	183fb426 	beq	r3,zero,265c <__sflush_r+0xe8>
    278c:	003fec06 	br	2740 <__sflush_r+0x1cc>
    2790:	9c400015 	stw	r17,0(r19)
    2794:	0005883a 	mov	r2,zero
    2798:	003fb906 	br	2680 <__sflush_r+0x10c>

0000279c <_fflush_r>:
    279c:	defffd04 	addi	sp,sp,-12
    27a0:	dc000115 	stw	r16,4(sp)
    27a4:	dfc00215 	stw	ra,8(sp)
    27a8:	2021883a 	mov	r16,r4
    27ac:	20000226 	beq	r4,zero,27b8 <_fflush_r+0x1c>
    27b0:	20800e17 	ldw	r2,56(r4)
    27b4:	10000726 	beq	r2,zero,27d4 <_fflush_r+0x38>
    27b8:	2880030f 	ldh	r2,12(r5)
    27bc:	10000a1e 	bne	r2,zero,27e8 <_fflush_r+0x4c>
    27c0:	0005883a 	mov	r2,zero
    27c4:	dfc00217 	ldw	ra,8(sp)
    27c8:	dc000117 	ldw	r16,4(sp)
    27cc:	dec00304 	addi	sp,sp,12
    27d0:	f800283a 	ret
    27d4:	d9400015 	stw	r5,0(sp)
    27d8:	00008ac0 	call	8ac <__sinit>
    27dc:	d9400017 	ldw	r5,0(sp)
    27e0:	2880030f 	ldh	r2,12(r5)
    27e4:	103ff626 	beq	r2,zero,27c0 <_fflush_r+0x24>
    27e8:	8009883a 	mov	r4,r16
    27ec:	dfc00217 	ldw	ra,8(sp)
    27f0:	dc000117 	ldw	r16,4(sp)
    27f4:	dec00304 	addi	sp,sp,12
    27f8:	00025741 	jmpi	2574 <__sflush_r>

000027fc <fflush>:
    27fc:	20001726 	beq	r4,zero,285c <fflush+0x60>
    2800:	00800074 	movhi	r2,1
    2804:	200b883a 	mov	r5,r4
    2808:	11052917 	ldw	r4,5284(r2)
    280c:	20000226 	beq	r4,zero,2818 <fflush+0x1c>
    2810:	20800e17 	ldw	r2,56(r4)
    2814:	10000526 	beq	r2,zero,282c <fflush+0x30>
    2818:	2880030f 	ldh	r2,12(r5)
    281c:	1000021e 	bne	r2,zero,2828 <fflush+0x2c>
    2820:	0005883a 	mov	r2,zero
    2824:	f800283a 	ret
    2828:	00025741 	jmpi	2574 <__sflush_r>
    282c:	defffd04 	addi	sp,sp,-12
    2830:	d9400115 	stw	r5,4(sp)
    2834:	d9000015 	stw	r4,0(sp)
    2838:	dfc00215 	stw	ra,8(sp)
    283c:	00008ac0 	call	8ac <__sinit>
    2840:	d9400117 	ldw	r5,4(sp)
    2844:	d9000017 	ldw	r4,0(sp)
    2848:	2880030f 	ldh	r2,12(r5)
    284c:	10000826 	beq	r2,zero,2870 <fflush+0x74>
    2850:	dfc00217 	ldw	ra,8(sp)
    2854:	dec00304 	addi	sp,sp,12
    2858:	00025741 	jmpi	2574 <__sflush_r>
    285c:	00800074 	movhi	r2,1
    2860:	11052817 	ldw	r4,5280(r2)
    2864:	01400034 	movhi	r5,0
    2868:	2949e704 	addi	r5,r5,10140
    286c:	0000e441 	jmpi	e44 <_fwalk_reent>
    2870:	0005883a 	mov	r2,zero
    2874:	dfc00217 	ldw	ra,8(sp)
    2878:	dec00304 	addi	sp,sp,12
    287c:	f800283a 	ret

00002880 <_malloc_trim_r>:
    2880:	defffb04 	addi	sp,sp,-20
    2884:	dcc00315 	stw	r19,12(sp)
    2888:	04c00074 	movhi	r19,1
    288c:	dc800215 	stw	r18,8(sp)
    2890:	dc400115 	stw	r17,4(sp)
    2894:	dc000015 	stw	r16,0(sp)
    2898:	dfc00415 	stw	ra,16(sp)
    289c:	2821883a 	mov	r16,r5
    28a0:	9cfede04 	addi	r19,r19,-1160
    28a4:	2025883a 	mov	r18,r4
    28a8:	0003c700 	call	3c70 <__malloc_lock>
    28ac:	98800217 	ldw	r2,8(r19)
    28b0:	14400117 	ldw	r17,4(r2)
    28b4:	00bfff04 	movi	r2,-4
    28b8:	88a2703a 	and	r17,r17,r2
    28bc:	8c21c83a 	sub	r16,r17,r16
    28c0:	8403fbc4 	addi	r16,r16,4079
    28c4:	8020d33a 	srli	r16,r16,12
    28c8:	843fffc4 	addi	r16,r16,-1
    28cc:	8020933a 	slli	r16,r16,12
    28d0:	80840008 	cmpgei	r2,r16,4096
    28d4:	10000626 	beq	r2,zero,28f0 <_malloc_trim_r+0x70>
    28d8:	000b883a 	mov	r5,zero
    28dc:	9009883a 	mov	r4,r18
    28e0:	000201c0 	call	201c <_sbrk_r>
    28e4:	98c00217 	ldw	r3,8(r19)
    28e8:	1c47883a 	add	r3,r3,r17
    28ec:	10c00a26 	beq	r2,r3,2918 <_malloc_trim_r+0x98>
    28f0:	9009883a 	mov	r4,r18
    28f4:	0003d980 	call	3d98 <__malloc_unlock>
    28f8:	0005883a 	mov	r2,zero
    28fc:	dfc00417 	ldw	ra,16(sp)
    2900:	dcc00317 	ldw	r19,12(sp)
    2904:	dc800217 	ldw	r18,8(sp)
    2908:	dc400117 	ldw	r17,4(sp)
    290c:	dc000017 	ldw	r16,0(sp)
    2910:	dec00504 	addi	sp,sp,20
    2914:	f800283a 	ret
    2918:	040bc83a 	sub	r5,zero,r16
    291c:	9009883a 	mov	r4,r18
    2920:	000201c0 	call	201c <_sbrk_r>
    2924:	10bfffd8 	cmpnei	r2,r2,-1
    2928:	10000d26 	beq	r2,zero,2960 <_malloc_trim_r+0xe0>
    292c:	00800074 	movhi	r2,1
    2930:	109cf717 	ldw	r2,29660(r2)
    2934:	98c00217 	ldw	r3,8(r19)
    2938:	8c23c83a 	sub	r17,r17,r16
    293c:	8c400054 	ori	r17,r17,1
    2940:	1421c83a 	sub	r16,r2,r16
    2944:	1c400115 	stw	r17,4(r3)
    2948:	00800074 	movhi	r2,1
    294c:	9009883a 	mov	r4,r18
    2950:	141cf715 	stw	r16,29660(r2)
    2954:	0003d980 	call	3d98 <__malloc_unlock>
    2958:	00800044 	movi	r2,1
    295c:	003fe706 	br	28fc <_malloc_trim_r+0x7c>
    2960:	000b883a 	mov	r5,zero
    2964:	9009883a 	mov	r4,r18
    2968:	000201c0 	call	201c <_sbrk_r>
    296c:	99000217 	ldw	r4,8(r19)
    2970:	1107c83a 	sub	r3,r2,r4
    2974:	19400410 	cmplti	r5,r3,16
    2978:	283fdd1e 	bne	r5,zero,28f0 <_malloc_trim_r+0x70>
    297c:	01400074 	movhi	r5,1
    2980:	29452a17 	ldw	r5,5288(r5)
    2984:	18c00054 	ori	r3,r3,1
    2988:	20c00115 	stw	r3,4(r4)
    298c:	1145c83a 	sub	r2,r2,r5
    2990:	01400074 	movhi	r5,1
    2994:	289cf715 	stw	r2,29660(r5)
    2998:	003fd506 	br	28f0 <_malloc_trim_r+0x70>

0000299c <_free_r>:
    299c:	28004f26 	beq	r5,zero,2adc <_free_r+0x140>
    29a0:	defffd04 	addi	sp,sp,-12
    29a4:	dc400115 	stw	r17,4(sp)
    29a8:	dc000015 	stw	r16,0(sp)
    29ac:	2023883a 	mov	r17,r4
    29b0:	2821883a 	mov	r16,r5
    29b4:	dfc00215 	stw	ra,8(sp)
    29b8:	0003c700 	call	3c70 <__malloc_lock>
    29bc:	81ffff17 	ldw	r7,-4(r16)
    29c0:	00bfff84 	movi	r2,-2
    29c4:	80fffe04 	addi	r3,r16,-8
    29c8:	3884703a 	and	r2,r7,r2
    29cc:	01000074 	movhi	r4,1
    29d0:	188d883a 	add	r6,r3,r2
    29d4:	213ede04 	addi	r4,r4,-1160
    29d8:	31400117 	ldw	r5,4(r6)
    29dc:	22000217 	ldw	r8,8(r4)
    29e0:	027fff04 	movi	r9,-4
    29e4:	2a4a703a 	and	r5,r5,r9
    29e8:	41806426 	beq	r8,r6,2b7c <_free_r+0x1e0>
    29ec:	31400115 	stw	r5,4(r6)
    29f0:	39c0004c 	andi	r7,r7,1
    29f4:	3151883a 	add	r8,r6,r5
    29f8:	3800281e 	bne	r7,zero,2a9c <_free_r+0x100>
    29fc:	82bffe17 	ldw	r10,-8(r16)
    2a00:	42000117 	ldw	r8,4(r8)
    2a04:	01c00074 	movhi	r7,1
    2a08:	1a87c83a 	sub	r3,r3,r10
    2a0c:	1a400217 	ldw	r9,8(r3)
    2a10:	39fee004 	addi	r7,r7,-1152
    2a14:	1285883a 	add	r2,r2,r10
    2a18:	4200004c 	andi	r8,r8,1
    2a1c:	49c04c26 	beq	r9,r7,2b50 <_free_r+0x1b4>
    2a20:	1a800317 	ldw	r10,12(r3)
    2a24:	4a800315 	stw	r10,12(r9)
    2a28:	52400215 	stw	r9,8(r10)
    2a2c:	40007126 	beq	r8,zero,2bf4 <_free_r+0x258>
    2a30:	11400054 	ori	r5,r2,1
    2a34:	19400115 	stw	r5,4(r3)
    2a38:	30800015 	stw	r2,0(r6)
    2a3c:	11408028 	cmpgeui	r5,r2,512
    2a40:	28002c1e 	bne	r5,zero,2af4 <_free_r+0x158>
    2a44:	100ad0fa 	srli	r5,r2,3
    2a48:	100cd17a 	srli	r6,r2,5
    2a4c:	00800044 	movi	r2,1
    2a50:	29400044 	addi	r5,r5,1
    2a54:	280a90fa 	slli	r5,r5,3
    2a58:	21c00117 	ldw	r7,4(r4)
    2a5c:	1184983a 	sll	r2,r2,r6
    2a60:	214b883a 	add	r5,r4,r5
    2a64:	29800017 	ldw	r6,0(r5)
    2a68:	11c4b03a 	or	r2,r2,r7
    2a6c:	29fffe04 	addi	r7,r5,-8
    2a70:	19c00315 	stw	r7,12(r3)
    2a74:	19800215 	stw	r6,8(r3)
    2a78:	20800115 	stw	r2,4(r4)
    2a7c:	28c00015 	stw	r3,0(r5)
    2a80:	30c00315 	stw	r3,12(r6)
    2a84:	8809883a 	mov	r4,r17
    2a88:	dfc00217 	ldw	ra,8(sp)
    2a8c:	dc400117 	ldw	r17,4(sp)
    2a90:	dc000017 	ldw	r16,0(sp)
    2a94:	dec00304 	addi	sp,sp,12
    2a98:	0003d981 	jmpi	3d98 <__malloc_unlock>
    2a9c:	41c00117 	ldw	r7,4(r8)
    2aa0:	39c0004c 	andi	r7,r7,1
    2aa4:	38000e1e 	bne	r7,zero,2ae0 <_free_r+0x144>
    2aa8:	01c00074 	movhi	r7,1
    2aac:	1145883a 	add	r2,r2,r5
    2ab0:	39fee004 	addi	r7,r7,-1152
    2ab4:	31400217 	ldw	r5,8(r6)
    2ab8:	12400054 	ori	r9,r2,1
    2abc:	1891883a 	add	r8,r3,r2
    2ac0:	29c05226 	beq	r5,r7,2c0c <_free_r+0x270>
    2ac4:	31800317 	ldw	r6,12(r6)
    2ac8:	29800315 	stw	r6,12(r5)
    2acc:	31400215 	stw	r5,8(r6)
    2ad0:	1a400115 	stw	r9,4(r3)
    2ad4:	40800015 	stw	r2,0(r8)
    2ad8:	003fd806 	br	2a3c <_free_r+0xa0>
    2adc:	f800283a 	ret
    2ae0:	11400054 	ori	r5,r2,1
    2ae4:	817fff15 	stw	r5,-4(r16)
    2ae8:	30800015 	stw	r2,0(r6)
    2aec:	11408028 	cmpgeui	r5,r2,512
    2af0:	283fd426 	beq	r5,zero,2a44 <_free_r+0xa8>
    2af4:	100ad27a 	srli	r5,r2,9
    2af8:	29800168 	cmpgeui	r6,r5,5
    2afc:	3000341e 	bne	r6,zero,2bd0 <_free_r+0x234>
    2b00:	100ad1ba 	srli	r5,r2,6
    2b04:	29800e44 	addi	r6,r5,57
    2b08:	300c90fa 	slli	r6,r6,3
    2b0c:	29c00e04 	addi	r7,r5,56
    2b10:	218d883a 	add	r6,r4,r6
    2b14:	31400017 	ldw	r5,0(r6)
    2b18:	31bffe04 	addi	r6,r6,-8
    2b1c:	31404226 	beq	r6,r5,2c28 <_free_r+0x28c>
    2b20:	01ffff04 	movi	r7,-4
    2b24:	29000117 	ldw	r4,4(r5)
    2b28:	21c8703a 	and	r4,r4,r7
    2b2c:	1100022e 	bgeu	r2,r4,2b38 <_free_r+0x19c>
    2b30:	29400217 	ldw	r5,8(r5)
    2b34:	317ffb1e 	bne	r6,r5,2b24 <_free_r+0x188>
    2b38:	29800317 	ldw	r6,12(r5)
    2b3c:	19800315 	stw	r6,12(r3)
    2b40:	19400215 	stw	r5,8(r3)
    2b44:	30c00215 	stw	r3,8(r6)
    2b48:	28c00315 	stw	r3,12(r5)
    2b4c:	003fcd06 	br	2a84 <_free_r+0xe8>
    2b50:	40004d1e 	bne	r8,zero,2c88 <_free_r+0x2ec>
    2b54:	31000317 	ldw	r4,12(r6)
    2b58:	31800217 	ldw	r6,8(r6)
    2b5c:	2885883a 	add	r2,r5,r2
    2b60:	11400054 	ori	r5,r2,1
    2b64:	31000315 	stw	r4,12(r6)
    2b68:	21800215 	stw	r6,8(r4)
    2b6c:	19400115 	stw	r5,4(r3)
    2b70:	1887883a 	add	r3,r3,r2
    2b74:	18800015 	stw	r2,0(r3)
    2b78:	003fc206 	br	2a84 <_free_r+0xe8>
    2b7c:	39c0004c 	andi	r7,r7,1
    2b80:	1145883a 	add	r2,r2,r5
    2b84:	3800071e 	bne	r7,zero,2ba4 <_free_r+0x208>
    2b88:	81fffe17 	ldw	r7,-8(r16)
    2b8c:	19c7c83a 	sub	r3,r3,r7
    2b90:	19400317 	ldw	r5,12(r3)
    2b94:	19800217 	ldw	r6,8(r3)
    2b98:	11c5883a 	add	r2,r2,r7
    2b9c:	31400315 	stw	r5,12(r6)
    2ba0:	29800215 	stw	r6,8(r5)
    2ba4:	01400074 	movhi	r5,1
    2ba8:	11800054 	ori	r6,r2,1
    2bac:	29452b17 	ldw	r5,5292(r5)
    2bb0:	19800115 	stw	r6,4(r3)
    2bb4:	20c00215 	stw	r3,8(r4)
    2bb8:	117fb236 	bltu	r2,r5,2a84 <_free_r+0xe8>
    2bbc:	00800074 	movhi	r2,1
    2bc0:	114cd717 	ldw	r5,13148(r2)
    2bc4:	8809883a 	mov	r4,r17
    2bc8:	00028800 	call	2880 <_malloc_trim_r>
    2bcc:	003fad06 	br	2a84 <_free_r+0xe8>
    2bd0:	29800568 	cmpgeui	r6,r5,21
    2bd4:	30000926 	beq	r6,zero,2bfc <_free_r+0x260>
    2bd8:	29801568 	cmpgeui	r6,r5,85
    2bdc:	3000191e 	bne	r6,zero,2c44 <_free_r+0x2a8>
    2be0:	100ad33a 	srli	r5,r2,12
    2be4:	29801bc4 	addi	r6,r5,111
    2be8:	300c90fa 	slli	r6,r6,3
    2bec:	29c01b84 	addi	r7,r5,110
    2bf0:	003fc706 	br	2b10 <_free_r+0x174>
    2bf4:	1145883a 	add	r2,r2,r5
    2bf8:	003fae06 	br	2ab4 <_free_r+0x118>
    2bfc:	29801704 	addi	r6,r5,92
    2c00:	300c90fa 	slli	r6,r6,3
    2c04:	29c016c4 	addi	r7,r5,91
    2c08:	003fc106 	br	2b10 <_free_r+0x174>
    2c0c:	20c00515 	stw	r3,20(r4)
    2c10:	20c00415 	stw	r3,16(r4)
    2c14:	19c00315 	stw	r7,12(r3)
    2c18:	19c00215 	stw	r7,8(r3)
    2c1c:	1a400115 	stw	r9,4(r3)
    2c20:	40800015 	stw	r2,0(r8)
    2c24:	003f9706 	br	2a84 <_free_r+0xe8>
    2c28:	380fd0ba 	srai	r7,r7,2
    2c2c:	00800044 	movi	r2,1
    2c30:	22000117 	ldw	r8,4(r4)
    2c34:	11ce983a 	sll	r7,r2,r7
    2c38:	3a0eb03a 	or	r7,r7,r8
    2c3c:	21c00115 	stw	r7,4(r4)
    2c40:	003fbe06 	br	2b3c <_free_r+0x1a0>
    2c44:	29805568 	cmpgeui	r6,r5,341
    2c48:	3000051e 	bne	r6,zero,2c60 <_free_r+0x2c4>
    2c4c:	100ad3fa 	srli	r5,r2,15
    2c50:	29801e04 	addi	r6,r5,120
    2c54:	300c90fa 	slli	r6,r6,3
    2c58:	29c01dc4 	addi	r7,r5,119
    2c5c:	003fac06 	br	2b10 <_free_r+0x174>
    2c60:	29415568 	cmpgeui	r5,r5,1365
    2c64:	2800051e 	bne	r5,zero,2c7c <_free_r+0x2e0>
    2c68:	100ad4ba 	srli	r5,r2,18
    2c6c:	29801f44 	addi	r6,r5,125
    2c70:	300c90fa 	slli	r6,r6,3
    2c74:	29c01f04 	addi	r7,r5,124
    2c78:	003fa506 	br	2b10 <_free_r+0x174>
    2c7c:	0180fe04 	movi	r6,1016
    2c80:	01c01f84 	movi	r7,126
    2c84:	003fa206 	br	2b10 <_free_r+0x174>
    2c88:	11000054 	ori	r4,r2,1
    2c8c:	19000115 	stw	r4,4(r3)
    2c90:	30800015 	stw	r2,0(r6)
    2c94:	003f7b06 	br	2a84 <_free_r+0xe8>

00002c98 <_lseek_r>:
    2c98:	2807883a 	mov	r3,r5
    2c9c:	defffe04 	addi	sp,sp,-8
    2ca0:	dc000015 	stw	r16,0(sp)
    2ca4:	300b883a 	mov	r5,r6
    2ca8:	00800074 	movhi	r2,1
    2cac:	380d883a 	mov	r6,r7
    2cb0:	2021883a 	mov	r16,r4
    2cb4:	1809883a 	mov	r4,r3
    2cb8:	dfc00115 	stw	ra,4(sp)
    2cbc:	100cd815 	stw	zero,13152(r2)
    2cc0:	00036400 	call	3640 <lseek>
    2cc4:	10ffffd8 	cmpnei	r3,r2,-1
    2cc8:	18000426 	beq	r3,zero,2cdc <_lseek_r+0x44>
    2ccc:	dfc00117 	ldw	ra,4(sp)
    2cd0:	dc000017 	ldw	r16,0(sp)
    2cd4:	dec00204 	addi	sp,sp,8
    2cd8:	f800283a 	ret
    2cdc:	00c00074 	movhi	r3,1
    2ce0:	18ccd817 	ldw	r3,13152(r3)
    2ce4:	183ff926 	beq	r3,zero,2ccc <_lseek_r+0x34>
    2ce8:	80c00015 	stw	r3,0(r16)
    2cec:	dfc00117 	ldw	ra,4(sp)
    2cf0:	dc000017 	ldw	r16,0(sp)
    2cf4:	dec00204 	addi	sp,sp,8
    2cf8:	f800283a 	ret

00002cfc <__smakebuf_r>:
    2cfc:	2880030b 	ldhu	r2,12(r5)
    2d00:	deffe804 	addi	sp,sp,-96
    2d04:	dc001215 	stw	r16,72(sp)
    2d08:	dfc01715 	stw	ra,92(sp)
    2d0c:	dd001615 	stw	r20,88(sp)
    2d10:	dcc01515 	stw	r19,84(sp)
    2d14:	dc801415 	stw	r18,80(sp)
    2d18:	dc401315 	stw	r17,76(sp)
    2d1c:	10c0008c 	andi	r3,r2,2
    2d20:	2821883a 	mov	r16,r5
    2d24:	18000d26 	beq	r3,zero,2d5c <__smakebuf_r+0x60>
    2d28:	288010c4 	addi	r2,r5,67
    2d2c:	28800015 	stw	r2,0(r5)
    2d30:	28800415 	stw	r2,16(r5)
    2d34:	00800044 	movi	r2,1
    2d38:	28800515 	stw	r2,20(r5)
    2d3c:	dfc01717 	ldw	ra,92(sp)
    2d40:	dd001617 	ldw	r20,88(sp)
    2d44:	dcc01517 	ldw	r19,84(sp)
    2d48:	dc801417 	ldw	r18,80(sp)
    2d4c:	dc401317 	ldw	r17,76(sp)
    2d50:	dc001217 	ldw	r16,72(sp)
    2d54:	dec01804 	addi	sp,sp,96
    2d58:	f800283a 	ret
    2d5c:	2940038f 	ldh	r5,14(r5)
    2d60:	2023883a 	mov	r17,r4
    2d64:	28002816 	blt	r5,zero,2e08 <__smakebuf_r+0x10c>
    2d68:	d80d883a 	mov	r6,sp
    2d6c:	0002fa80 	call	2fa8 <_fstat_r>
    2d70:	10002416 	blt	r2,zero,2e04 <__smakebuf_r+0x108>
    2d74:	d8800117 	ldw	r2,4(sp)
    2d78:	10bc000c 	andi	r2,r2,61440
    2d7c:	10880018 	cmpnei	r2,r2,8192
    2d80:	1000461e 	bne	r2,zero,2e9c <__smakebuf_r+0x1a0>
    2d84:	8140038f 	ldh	r5,14(r16)
    2d88:	8809883a 	mov	r4,r17
    2d8c:	00030080 	call	3008 <_isatty_r>
    2d90:	10003e26 	beq	r2,zero,2e8c <__smakebuf_r+0x190>
    2d94:	8080030b 	ldhu	r2,12(r16)
    2d98:	80c010c4 	addi	r3,r16,67
    2d9c:	80c00015 	stw	r3,0(r16)
    2da0:	10800054 	ori	r2,r2,1
    2da4:	8080030d 	sth	r2,12(r16)
    2da8:	00800044 	movi	r2,1
    2dac:	80c00415 	stw	r3,16(r16)
    2db0:	80800515 	stw	r2,20(r16)
    2db4:	04c00044 	movi	r19,1
    2db8:	05010004 	movi	r20,1024
    2dbc:	04820004 	movi	r18,2048
    2dc0:	a00b883a 	mov	r5,r20
    2dc4:	8809883a 	mov	r4,r17
    2dc8:	0000eec0 	call	eec <_malloc_r>
    2dcc:	10001726 	beq	r2,zero,2e2c <__smakebuf_r+0x130>
    2dd0:	80c0030b 	ldhu	r3,12(r16)
    2dd4:	01000034 	movhi	r4,0
    2dd8:	21015804 	addi	r4,r4,1376
    2ddc:	89000f15 	stw	r4,60(r17)
    2de0:	18c02014 	ori	r3,r3,128
    2de4:	80c0030d 	sth	r3,12(r16)
    2de8:	80800015 	stw	r2,0(r16)
    2dec:	80800415 	stw	r2,16(r16)
    2df0:	85000515 	stw	r20,20(r16)
    2df4:	98001d1e 	bne	r19,zero,2e6c <__smakebuf_r+0x170>
    2df8:	90c6b03a 	or	r3,r18,r3
    2dfc:	80c0030d 	sth	r3,12(r16)
    2e00:	003fce06 	br	2d3c <__smakebuf_r+0x40>
    2e04:	8080030b 	ldhu	r2,12(r16)
    2e08:	1080200c 	andi	r2,r2,128
    2e0c:	0027883a 	mov	r19,zero
    2e10:	10001326 	beq	r2,zero,2e60 <__smakebuf_r+0x164>
    2e14:	05001004 	movi	r20,64
    2e18:	a00b883a 	mov	r5,r20
    2e1c:	8809883a 	mov	r4,r17
    2e20:	0025883a 	mov	r18,zero
    2e24:	0000eec0 	call	eec <_malloc_r>
    2e28:	103fe91e 	bne	r2,zero,2dd0 <__smakebuf_r+0xd4>
    2e2c:	8080030b 	ldhu	r2,12(r16)
    2e30:	10c0800c 	andi	r3,r2,512
    2e34:	183fc11e 	bne	r3,zero,2d3c <__smakebuf_r+0x40>
    2e38:	00ffff04 	movi	r3,-4
    2e3c:	10c4703a 	and	r2,r2,r3
    2e40:	10800094 	ori	r2,r2,2
    2e44:	80c010c4 	addi	r3,r16,67
    2e48:	8080030d 	sth	r2,12(r16)
    2e4c:	00800044 	movi	r2,1
    2e50:	80c00015 	stw	r3,0(r16)
    2e54:	80c00415 	stw	r3,16(r16)
    2e58:	80800515 	stw	r2,20(r16)
    2e5c:	003fb706 	br	2d3c <__smakebuf_r+0x40>
    2e60:	05010004 	movi	r20,1024
    2e64:	0025883a 	mov	r18,zero
    2e68:	003fd506 	br	2dc0 <__smakebuf_r+0xc4>
    2e6c:	8140038f 	ldh	r5,14(r16)
    2e70:	8809883a 	mov	r4,r17
    2e74:	00030080 	call	3008 <_isatty_r>
    2e78:	80c0030b 	ldhu	r3,12(r16)
    2e7c:	103fde26 	beq	r2,zero,2df8 <__smakebuf_r+0xfc>
    2e80:	18ffff0c 	andi	r3,r3,65532
    2e84:	18c00054 	ori	r3,r3,1
    2e88:	003fdb06 	br	2df8 <__smakebuf_r+0xfc>
    2e8c:	04c00044 	movi	r19,1
    2e90:	05010004 	movi	r20,1024
    2e94:	04820004 	movi	r18,2048
    2e98:	003fc906 	br	2dc0 <__smakebuf_r+0xc4>
    2e9c:	0027883a 	mov	r19,zero
    2ea0:	05010004 	movi	r20,1024
    2ea4:	04820004 	movi	r18,2048
    2ea8:	003fc506 	br	2dc0 <__smakebuf_r+0xc4>

00002eac <__swhatbuf_r>:
    2eac:	deffea04 	addi	sp,sp,-88
    2eb0:	dc001215 	stw	r16,72(sp)
    2eb4:	2821883a 	mov	r16,r5
    2eb8:	2940038f 	ldh	r5,14(r5)
    2ebc:	dc801415 	stw	r18,80(sp)
    2ec0:	dc401315 	stw	r17,76(sp)
    2ec4:	dfc01515 	stw	ra,84(sp)
    2ec8:	3023883a 	mov	r17,r6
    2ecc:	3825883a 	mov	r18,r7
    2ed0:	28001016 	blt	r5,zero,2f14 <__swhatbuf_r+0x68>
    2ed4:	d80d883a 	mov	r6,sp
    2ed8:	0002fa80 	call	2fa8 <_fstat_r>
    2edc:	10000d16 	blt	r2,zero,2f14 <__swhatbuf_r+0x68>
    2ee0:	d8c00117 	ldw	r3,4(sp)
    2ee4:	00820004 	movi	r2,2048
    2ee8:	18fc000c 	andi	r3,r3,61440
    2eec:	18c80020 	cmpeqi	r3,r3,8192
    2ef0:	90c00015 	stw	r3,0(r18)
    2ef4:	00c10004 	movi	r3,1024
    2ef8:	88c00015 	stw	r3,0(r17)
    2efc:	dfc01517 	ldw	ra,84(sp)
    2f00:	dc801417 	ldw	r18,80(sp)
    2f04:	dc401317 	ldw	r17,76(sp)
    2f08:	dc001217 	ldw	r16,72(sp)
    2f0c:	dec01604 	addi	sp,sp,88
    2f10:	f800283a 	ret
    2f14:	8080030b 	ldhu	r2,12(r16)
    2f18:	90000015 	stw	zero,0(r18)
    2f1c:	1080200c 	andi	r2,r2,128
    2f20:	10000426 	beq	r2,zero,2f34 <__swhatbuf_r+0x88>
    2f24:	00801004 	movi	r2,64
    2f28:	88800015 	stw	r2,0(r17)
    2f2c:	0005883a 	mov	r2,zero
    2f30:	003ff206 	br	2efc <__swhatbuf_r+0x50>
    2f34:	00810004 	movi	r2,1024
    2f38:	88800015 	stw	r2,0(r17)
    2f3c:	0005883a 	mov	r2,zero
    2f40:	003fee06 	br	2efc <__swhatbuf_r+0x50>

00002f44 <_read_r>:
    2f44:	2807883a 	mov	r3,r5
    2f48:	defffe04 	addi	sp,sp,-8
    2f4c:	dc000015 	stw	r16,0(sp)
    2f50:	300b883a 	mov	r5,r6
    2f54:	00800074 	movhi	r2,1
    2f58:	380d883a 	mov	r6,r7
    2f5c:	2021883a 	mov	r16,r4
    2f60:	1809883a 	mov	r4,r3
    2f64:	dfc00115 	stw	ra,4(sp)
    2f68:	100cd815 	stw	zero,13152(r2)
    2f6c:	00038100 	call	3810 <read>
    2f70:	10ffffd8 	cmpnei	r3,r2,-1
    2f74:	18000426 	beq	r3,zero,2f88 <_read_r+0x44>
    2f78:	dfc00117 	ldw	ra,4(sp)
    2f7c:	dc000017 	ldw	r16,0(sp)
    2f80:	dec00204 	addi	sp,sp,8
    2f84:	f800283a 	ret
    2f88:	00c00074 	movhi	r3,1
    2f8c:	18ccd817 	ldw	r3,13152(r3)
    2f90:	183ff926 	beq	r3,zero,2f78 <_read_r+0x34>
    2f94:	80c00015 	stw	r3,0(r16)
    2f98:	dfc00117 	ldw	ra,4(sp)
    2f9c:	dc000017 	ldw	r16,0(sp)
    2fa0:	dec00204 	addi	sp,sp,8
    2fa4:	f800283a 	ret

00002fa8 <_fstat_r>:
    2fa8:	2807883a 	mov	r3,r5
    2fac:	defffe04 	addi	sp,sp,-8
    2fb0:	dc000015 	stw	r16,0(sp)
    2fb4:	00800074 	movhi	r2,1
    2fb8:	300b883a 	mov	r5,r6
    2fbc:	2021883a 	mov	r16,r4
    2fc0:	1809883a 	mov	r4,r3
    2fc4:	dfc00115 	stw	ra,4(sp)
    2fc8:	100cd815 	stw	zero,13152(r2)
    2fcc:	00033880 	call	3388 <fstat>
    2fd0:	10ffffd8 	cmpnei	r3,r2,-1
    2fd4:	18000426 	beq	r3,zero,2fe8 <_fstat_r+0x40>
    2fd8:	dfc00117 	ldw	ra,4(sp)
    2fdc:	dc000017 	ldw	r16,0(sp)
    2fe0:	dec00204 	addi	sp,sp,8
    2fe4:	f800283a 	ret
    2fe8:	00c00074 	movhi	r3,1
    2fec:	18ccd817 	ldw	r3,13152(r3)
    2ff0:	183ff926 	beq	r3,zero,2fd8 <_fstat_r+0x30>
    2ff4:	80c00015 	stw	r3,0(r16)
    2ff8:	dfc00117 	ldw	ra,4(sp)
    2ffc:	dc000017 	ldw	r16,0(sp)
    3000:	dec00204 	addi	sp,sp,8
    3004:	f800283a 	ret

00003008 <_isatty_r>:
    3008:	defffe04 	addi	sp,sp,-8
    300c:	dc000015 	stw	r16,0(sp)
    3010:	00800074 	movhi	r2,1
    3014:	2021883a 	mov	r16,r4
    3018:	2809883a 	mov	r4,r5
    301c:	dfc00115 	stw	ra,4(sp)
    3020:	100cd815 	stw	zero,13152(r2)
    3024:	00034740 	call	3474 <isatty>
    3028:	10ffffd8 	cmpnei	r3,r2,-1
    302c:	18000426 	beq	r3,zero,3040 <_isatty_r+0x38>
    3030:	dfc00117 	ldw	ra,4(sp)
    3034:	dc000017 	ldw	r16,0(sp)
    3038:	dec00204 	addi	sp,sp,8
    303c:	f800283a 	ret
    3040:	00c00074 	movhi	r3,1
    3044:	18ccd817 	ldw	r3,13152(r3)
    3048:	183ff926 	beq	r3,zero,3030 <_isatty_r+0x28>
    304c:	80c00015 	stw	r3,0(r16)
    3050:	dfc00117 	ldw	ra,4(sp)
    3054:	dc000017 	ldw	r16,0(sp)
    3058:	dec00204 	addi	sp,sp,8
    305c:	f800283a 	ret

00003060 <__divsi3>:
    3060:	20001a16 	blt	r4,zero,30cc <__divsi3+0x6c>
    3064:	000f883a 	mov	r7,zero
    3068:	2800020e 	bge	r5,zero,3074 <__divsi3+0x14>
    306c:	014bc83a 	sub	r5,zero,r5
    3070:	39c0005c 	xori	r7,r7,1
    3074:	200d883a 	mov	r6,r4
    3078:	00c00044 	movi	r3,1
    307c:	2900092e 	bgeu	r5,r4,30a4 <__divsi3+0x44>
    3080:	00800804 	movi	r2,32
    3084:	00c00044 	movi	r3,1
    3088:	00000106 	br	3090 <__divsi3+0x30>
    308c:	10001226 	beq	r2,zero,30d8 <__divsi3+0x78>
    3090:	294b883a 	add	r5,r5,r5
    3094:	10bfffc4 	addi	r2,r2,-1
    3098:	18c7883a 	add	r3,r3,r3
    309c:	293ffb36 	bltu	r5,r4,308c <__divsi3+0x2c>
    30a0:	18000d26 	beq	r3,zero,30d8 <__divsi3+0x78>
    30a4:	0005883a 	mov	r2,zero
    30a8:	31400236 	bltu	r6,r5,30b4 <__divsi3+0x54>
    30ac:	314dc83a 	sub	r6,r6,r5
    30b0:	10c4b03a 	or	r2,r2,r3
    30b4:	1806d07a 	srli	r3,r3,1
    30b8:	280ad07a 	srli	r5,r5,1
    30bc:	183ffa1e 	bne	r3,zero,30a8 <__divsi3+0x48>
    30c0:	38000126 	beq	r7,zero,30c8 <__divsi3+0x68>
    30c4:	0085c83a 	sub	r2,zero,r2
    30c8:	f800283a 	ret
    30cc:	0109c83a 	sub	r4,zero,r4
    30d0:	01c00044 	movi	r7,1
    30d4:	003fe406 	br	3068 <__divsi3+0x8>
    30d8:	0005883a 	mov	r2,zero
    30dc:	003ff806 	br	30c0 <__divsi3+0x60>

000030e0 <__modsi3>:
    30e0:	20001916 	blt	r4,zero,3148 <__modsi3+0x68>
    30e4:	000f883a 	mov	r7,zero
    30e8:	2005883a 	mov	r2,r4
    30ec:	2800010e 	bge	r5,zero,30f4 <__modsi3+0x14>
    30f0:	014bc83a 	sub	r5,zero,r5
    30f4:	00c00044 	movi	r3,1
    30f8:	2900092e 	bgeu	r5,r4,3120 <__modsi3+0x40>
    30fc:	01800804 	movi	r6,32
    3100:	00c00044 	movi	r3,1
    3104:	00000106 	br	310c <__modsi3+0x2c>
    3108:	30000d26 	beq	r6,zero,3140 <__modsi3+0x60>
    310c:	294b883a 	add	r5,r5,r5
    3110:	31bfffc4 	addi	r6,r6,-1
    3114:	18c7883a 	add	r3,r3,r3
    3118:	293ffb36 	bltu	r5,r4,3108 <__modsi3+0x28>
    311c:	18000826 	beq	r3,zero,3140 <__modsi3+0x60>
    3120:	1806d07a 	srli	r3,r3,1
    3124:	11400136 	bltu	r2,r5,312c <__modsi3+0x4c>
    3128:	1145c83a 	sub	r2,r2,r5
    312c:	280ad07a 	srli	r5,r5,1
    3130:	183ffb1e 	bne	r3,zero,3120 <__modsi3+0x40>
    3134:	38000126 	beq	r7,zero,313c <__modsi3+0x5c>
    3138:	0085c83a 	sub	r2,zero,r2
    313c:	f800283a 	ret
    3140:	2005883a 	mov	r2,r4
    3144:	003ffb06 	br	3134 <__modsi3+0x54>
    3148:	0109c83a 	sub	r4,zero,r4
    314c:	01c00044 	movi	r7,1
    3150:	003fe506 	br	30e8 <__modsi3+0x8>

00003154 <__udivsi3>:
    3154:	200d883a 	mov	r6,r4
    3158:	2900152e 	bgeu	r5,r4,31b0 <__udivsi3+0x5c>
    315c:	28001416 	blt	r5,zero,31b0 <__udivsi3+0x5c>
    3160:	00800804 	movi	r2,32
    3164:	00c00044 	movi	r3,1
    3168:	00000206 	br	3174 <__udivsi3+0x20>
    316c:	10000e26 	beq	r2,zero,31a8 <__udivsi3+0x54>
    3170:	28000516 	blt	r5,zero,3188 <__udivsi3+0x34>
    3174:	294b883a 	add	r5,r5,r5
    3178:	10bfffc4 	addi	r2,r2,-1
    317c:	18c7883a 	add	r3,r3,r3
    3180:	293ffa36 	bltu	r5,r4,316c <__udivsi3+0x18>
    3184:	18000826 	beq	r3,zero,31a8 <__udivsi3+0x54>
    3188:	0005883a 	mov	r2,zero
    318c:	31400236 	bltu	r6,r5,3198 <__udivsi3+0x44>
    3190:	314dc83a 	sub	r6,r6,r5
    3194:	10c4b03a 	or	r2,r2,r3
    3198:	1806d07a 	srli	r3,r3,1
    319c:	280ad07a 	srli	r5,r5,1
    31a0:	183ffa1e 	bne	r3,zero,318c <__udivsi3+0x38>
    31a4:	f800283a 	ret
    31a8:	0005883a 	mov	r2,zero
    31ac:	f800283a 	ret
    31b0:	00c00044 	movi	r3,1
    31b4:	003ff406 	br	3188 <__udivsi3+0x34>

000031b8 <__umodsi3>:
    31b8:	2005883a 	mov	r2,r4
    31bc:	2900132e 	bgeu	r5,r4,320c <__umodsi3+0x54>
    31c0:	28001216 	blt	r5,zero,320c <__umodsi3+0x54>
    31c4:	01800804 	movi	r6,32
    31c8:	00c00044 	movi	r3,1
    31cc:	00000206 	br	31d8 <__umodsi3+0x20>
    31d0:	30000c26 	beq	r6,zero,3204 <__umodsi3+0x4c>
    31d4:	28000516 	blt	r5,zero,31ec <__umodsi3+0x34>
    31d8:	294b883a 	add	r5,r5,r5
    31dc:	31bfffc4 	addi	r6,r6,-1
    31e0:	18c7883a 	add	r3,r3,r3
    31e4:	293ffa36 	bltu	r5,r4,31d0 <__umodsi3+0x18>
    31e8:	18000626 	beq	r3,zero,3204 <__umodsi3+0x4c>
    31ec:	1806d07a 	srli	r3,r3,1
    31f0:	11400136 	bltu	r2,r5,31f8 <__umodsi3+0x40>
    31f4:	1145c83a 	sub	r2,r2,r5
    31f8:	280ad07a 	srli	r5,r5,1
    31fc:	183ffb1e 	bne	r3,zero,31ec <__umodsi3+0x34>
    3200:	f800283a 	ret
    3204:	2005883a 	mov	r2,r4
    3208:	f800283a 	ret
    320c:	00c00044 	movi	r3,1
    3210:	003ff606 	br	31ec <__umodsi3+0x34>

00003214 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    3214:	defffe04 	addi	sp,sp,-8
    3218:	dfc00115 	stw	ra,4(sp)
    321c:	df000015 	stw	fp,0(sp)
    3220:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    3224:	d0a00917 	ldw	r2,-32732(gp)
    3228:	10000326 	beq	r2,zero,3238 <alt_get_errno+0x24>
    322c:	d0a00917 	ldw	r2,-32732(gp)
    3230:	103ee83a 	callr	r2
    3234:	00000106 	br	323c <alt_get_errno+0x28>
    3238:	d0a7b004 	addi	r2,gp,-24896
}
    323c:	e037883a 	mov	sp,fp
    3240:	dfc00117 	ldw	ra,4(sp)
    3244:	df000017 	ldw	fp,0(sp)
    3248:	dec00204 	addi	sp,sp,8
    324c:	f800283a 	ret

00003250 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    3250:	defffb04 	addi	sp,sp,-20
    3254:	dfc00415 	stw	ra,16(sp)
    3258:	df000315 	stw	fp,12(sp)
    325c:	df000304 	addi	fp,sp,12
    3260:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    3264:	e0bffd17 	ldw	r2,-12(fp)
    3268:	10000616 	blt	r2,zero,3284 <close+0x34>
    326c:	e0bffd17 	ldw	r2,-12(fp)
    3270:	10c00324 	muli	r3,r2,12
    3274:	00800074 	movhi	r2,1
    3278:	10bfea04 	addi	r2,r2,-88
    327c:	1885883a 	add	r2,r3,r2
    3280:	00000106 	br	3288 <close+0x38>
    3284:	0005883a 	mov	r2,zero
    3288:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
    328c:	e0bfff17 	ldw	r2,-4(fp)
    3290:	10001926 	beq	r2,zero,32f8 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    3294:	e0bfff17 	ldw	r2,-4(fp)
    3298:	10800017 	ldw	r2,0(r2)
    329c:	10800417 	ldw	r2,16(r2)
    32a0:	10000626 	beq	r2,zero,32bc <close+0x6c>
    32a4:	e0bfff17 	ldw	r2,-4(fp)
    32a8:	10800017 	ldw	r2,0(r2)
    32ac:	10800417 	ldw	r2,16(r2)
    32b0:	e13fff17 	ldw	r4,-4(fp)
    32b4:	103ee83a 	callr	r2
    32b8:	00000106 	br	32c0 <close+0x70>
    32bc:	0005883a 	mov	r2,zero
    32c0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    32c4:	e13ffd17 	ldw	r4,-12(fp)
    32c8:	000390c0 	call	390c <alt_release_fd>
    if (rval < 0)
    32cc:	e0bffe17 	ldw	r2,-8(fp)
    32d0:	1000070e 	bge	r2,zero,32f0 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    32d4:	00032140 	call	3214 <alt_get_errno>
    32d8:	1007883a 	mov	r3,r2
    32dc:	e0bffe17 	ldw	r2,-8(fp)
    32e0:	0085c83a 	sub	r2,zero,r2
    32e4:	18800015 	stw	r2,0(r3)
      return -1;
    32e8:	00bfffc4 	movi	r2,-1
    32ec:	00000706 	br	330c <close+0xbc>
    }
    return 0;
    32f0:	0005883a 	mov	r2,zero
    32f4:	00000506 	br	330c <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    32f8:	00032140 	call	3214 <alt_get_errno>
    32fc:	1007883a 	mov	r3,r2
    3300:	00801444 	movi	r2,81
    3304:	18800015 	stw	r2,0(r3)
    return -1;
    3308:	00bfffc4 	movi	r2,-1
  }
}
    330c:	e037883a 	mov	sp,fp
    3310:	dfc00117 	ldw	ra,4(sp)
    3314:	df000017 	ldw	fp,0(sp)
    3318:	dec00204 	addi	sp,sp,8
    331c:	f800283a 	ret

00003320 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    3320:	defffc04 	addi	sp,sp,-16
    3324:	df000315 	stw	fp,12(sp)
    3328:	df000304 	addi	fp,sp,12
    332c:	e13fff15 	stw	r4,-4(fp)
    3330:	e17ffe15 	stw	r5,-8(fp)
    3334:	e1bffd15 	stw	r6,-12(fp)
  return len;
    3338:	e0bffd17 	ldw	r2,-12(fp)
}
    333c:	e037883a 	mov	sp,fp
    3340:	df000017 	ldw	fp,0(sp)
    3344:	dec00104 	addi	sp,sp,4
    3348:	f800283a 	ret

0000334c <alt_get_errno>:
{
    334c:	defffe04 	addi	sp,sp,-8
    3350:	dfc00115 	stw	ra,4(sp)
    3354:	df000015 	stw	fp,0(sp)
    3358:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    335c:	d0a00917 	ldw	r2,-32732(gp)
    3360:	10000326 	beq	r2,zero,3370 <alt_get_errno+0x24>
    3364:	d0a00917 	ldw	r2,-32732(gp)
    3368:	103ee83a 	callr	r2
    336c:	00000106 	br	3374 <alt_get_errno+0x28>
    3370:	d0a7b004 	addi	r2,gp,-24896
}
    3374:	e037883a 	mov	sp,fp
    3378:	dfc00117 	ldw	ra,4(sp)
    337c:	df000017 	ldw	fp,0(sp)
    3380:	dec00204 	addi	sp,sp,8
    3384:	f800283a 	ret

00003388 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    3388:	defffb04 	addi	sp,sp,-20
    338c:	dfc00415 	stw	ra,16(sp)
    3390:	df000315 	stw	fp,12(sp)
    3394:	df000304 	addi	fp,sp,12
    3398:	e13ffe15 	stw	r4,-8(fp)
    339c:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    33a0:	e0bffe17 	ldw	r2,-8(fp)
    33a4:	10000616 	blt	r2,zero,33c0 <fstat+0x38>
    33a8:	e0bffe17 	ldw	r2,-8(fp)
    33ac:	10c00324 	muli	r3,r2,12
    33b0:	00800074 	movhi	r2,1
    33b4:	10bfea04 	addi	r2,r2,-88
    33b8:	1885883a 	add	r2,r3,r2
    33bc:	00000106 	br	33c4 <fstat+0x3c>
    33c0:	0005883a 	mov	r2,zero
    33c4:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
    33c8:	e0bfff17 	ldw	r2,-4(fp)
    33cc:	10001026 	beq	r2,zero,3410 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    33d0:	e0bfff17 	ldw	r2,-4(fp)
    33d4:	10800017 	ldw	r2,0(r2)
    33d8:	10800817 	ldw	r2,32(r2)
    33dc:	10000726 	beq	r2,zero,33fc <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    33e0:	e0bfff17 	ldw	r2,-4(fp)
    33e4:	10800017 	ldw	r2,0(r2)
    33e8:	10800817 	ldw	r2,32(r2)
    33ec:	e17ffd17 	ldw	r5,-12(fp)
    33f0:	e13fff17 	ldw	r4,-4(fp)
    33f4:	103ee83a 	callr	r2
    33f8:	00000a06 	br	3424 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    33fc:	e0bffd17 	ldw	r2,-12(fp)
    3400:	00c80004 	movi	r3,8192
    3404:	10c00115 	stw	r3,4(r2)
      return 0;
    3408:	0005883a 	mov	r2,zero
    340c:	00000506 	br	3424 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    3410:	000334c0 	call	334c <alt_get_errno>
    3414:	1007883a 	mov	r3,r2
    3418:	00801444 	movi	r2,81
    341c:	18800015 	stw	r2,0(r3)
    return -1;
    3420:	00bfffc4 	movi	r2,-1
  }
}
    3424:	e037883a 	mov	sp,fp
    3428:	dfc00117 	ldw	ra,4(sp)
    342c:	df000017 	ldw	fp,0(sp)
    3430:	dec00204 	addi	sp,sp,8
    3434:	f800283a 	ret

00003438 <alt_get_errno>:
{
    3438:	defffe04 	addi	sp,sp,-8
    343c:	dfc00115 	stw	ra,4(sp)
    3440:	df000015 	stw	fp,0(sp)
    3444:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    3448:	d0a00917 	ldw	r2,-32732(gp)
    344c:	10000326 	beq	r2,zero,345c <alt_get_errno+0x24>
    3450:	d0a00917 	ldw	r2,-32732(gp)
    3454:	103ee83a 	callr	r2
    3458:	00000106 	br	3460 <alt_get_errno+0x28>
    345c:	d0a7b004 	addi	r2,gp,-24896
}
    3460:	e037883a 	mov	sp,fp
    3464:	dfc00117 	ldw	ra,4(sp)
    3468:	df000017 	ldw	fp,0(sp)
    346c:	dec00204 	addi	sp,sp,8
    3470:	f800283a 	ret

00003474 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    3474:	deffea04 	addi	sp,sp,-88
    3478:	dfc01515 	stw	ra,84(sp)
    347c:	df001415 	stw	fp,80(sp)
    3480:	df001404 	addi	fp,sp,80
    3484:	e13fec15 	stw	r4,-80(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    3488:	e0bfec17 	ldw	r2,-80(fp)
    348c:	10000616 	blt	r2,zero,34a8 <isatty+0x34>
    3490:	e0bfec17 	ldw	r2,-80(fp)
    3494:	10c00324 	muli	r3,r2,12
    3498:	00800074 	movhi	r2,1
    349c:	10bfea04 	addi	r2,r2,-88
    34a0:	1885883a 	add	r2,r3,r2
    34a4:	00000106 	br	34ac <isatty+0x38>
    34a8:	0005883a 	mov	r2,zero
    34ac:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
    34b0:	e0bfff17 	ldw	r2,-4(fp)
    34b4:	10000e26 	beq	r2,zero,34f0 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    34b8:	e0bfff17 	ldw	r2,-4(fp)
    34bc:	10800017 	ldw	r2,0(r2)
    34c0:	10800817 	ldw	r2,32(r2)
    34c4:	1000021e 	bne	r2,zero,34d0 <isatty+0x5c>
    {
      return 1;
    34c8:	00800044 	movi	r2,1
    34cc:	00000d06 	br	3504 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    34d0:	e0bfed04 	addi	r2,fp,-76
    34d4:	100b883a 	mov	r5,r2
    34d8:	e13fec17 	ldw	r4,-80(fp)
    34dc:	00033880 	call	3388 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    34e0:	e0bfee17 	ldw	r2,-72(fp)
    34e4:	10880020 	cmpeqi	r2,r2,8192
    34e8:	10803fcc 	andi	r2,r2,255
    34ec:	00000506 	br	3504 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    34f0:	00034380 	call	3438 <alt_get_errno>
    34f4:	1007883a 	mov	r3,r2
    34f8:	00801444 	movi	r2,81
    34fc:	18800015 	stw	r2,0(r3)
    return 0;
    3500:	0005883a 	mov	r2,zero
  }
}
    3504:	e037883a 	mov	sp,fp
    3508:	dfc00117 	ldw	ra,4(sp)
    350c:	df000017 	ldw	fp,0(sp)
    3510:	dec00204 	addi	sp,sp,8
    3514:	f800283a 	ret

00003518 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    3518:	defffc04 	addi	sp,sp,-16
    351c:	df000315 	stw	fp,12(sp)
    3520:	df000304 	addi	fp,sp,12
    3524:	e13fff15 	stw	r4,-4(fp)
    3528:	e17ffe15 	stw	r5,-8(fp)
    352c:	e1bffd15 	stw	r6,-12(fp)
  if (to != from)
    3530:	e0fffe17 	ldw	r3,-8(fp)
    3534:	e0bfff17 	ldw	r2,-4(fp)
    3538:	18800c26 	beq	r3,r2,356c <alt_load_section+0x54>
  {
    while( to != end )
    353c:	00000806 	br	3560 <alt_load_section+0x48>
    {
      *to++ = *from++;
    3540:	e0ffff17 	ldw	r3,-4(fp)
    3544:	18800104 	addi	r2,r3,4
    3548:	e0bfff15 	stw	r2,-4(fp)
    354c:	e0bffe17 	ldw	r2,-8(fp)
    3550:	11000104 	addi	r4,r2,4
    3554:	e13ffe15 	stw	r4,-8(fp)
    3558:	18c00017 	ldw	r3,0(r3)
    355c:	10c00015 	stw	r3,0(r2)
    while( to != end )
    3560:	e0fffe17 	ldw	r3,-8(fp)
    3564:	e0bffd17 	ldw	r2,-12(fp)
    3568:	18bff51e 	bne	r3,r2,3540 <alt_load_section+0x28>
    }
  }
}
    356c:	0001883a 	nop
    3570:	e037883a 	mov	sp,fp
    3574:	df000017 	ldw	fp,0(sp)
    3578:	dec00104 	addi	sp,sp,4
    357c:	f800283a 	ret

00003580 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    3580:	defffe04 	addi	sp,sp,-8
    3584:	dfc00115 	stw	ra,4(sp)
    3588:	df000015 	stw	fp,0(sp)
    358c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    3590:	01800074 	movhi	r6,1
    3594:	31855504 	addi	r6,r6,5460
    3598:	01400074 	movhi	r5,1
    359c:	297dd504 	addi	r5,r5,-2220
    35a0:	01000074 	movhi	r4,1
    35a4:	21055504 	addi	r4,r4,5460
    35a8:	00035180 	call	3518 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    35ac:	01800034 	movhi	r6,0
    35b0:	31808f04 	addi	r6,r6,572
    35b4:	01400034 	movhi	r5,0
    35b8:	29400804 	addi	r5,r5,32
    35bc:	01000034 	movhi	r4,0
    35c0:	21000804 	addi	r4,r4,32
    35c4:	00035180 	call	3518 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    35c8:	01800074 	movhi	r6,1
    35cc:	31bdd504 	addi	r6,r6,-2220
    35d0:	01400074 	movhi	r5,1
    35d4:	297d2804 	addi	r5,r5,-2912
    35d8:	01000074 	movhi	r4,1
    35dc:	213d2804 	addi	r4,r4,-2912
    35e0:	00035180 	call	3518 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    35e4:	000e2540 	call	e254 <alt_dcache_flush_all>
  alt_icache_flush_all();
    35e8:	000e4b00 	call	e4b0 <alt_icache_flush_all>
}
    35ec:	0001883a 	nop
    35f0:	e037883a 	mov	sp,fp
    35f4:	dfc00117 	ldw	ra,4(sp)
    35f8:	df000017 	ldw	fp,0(sp)
    35fc:	dec00204 	addi	sp,sp,8
    3600:	f800283a 	ret

00003604 <alt_get_errno>:
{
    3604:	defffe04 	addi	sp,sp,-8
    3608:	dfc00115 	stw	ra,4(sp)
    360c:	df000015 	stw	fp,0(sp)
    3610:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    3614:	d0a00917 	ldw	r2,-32732(gp)
    3618:	10000326 	beq	r2,zero,3628 <alt_get_errno+0x24>
    361c:	d0a00917 	ldw	r2,-32732(gp)
    3620:	103ee83a 	callr	r2
    3624:	00000106 	br	362c <alt_get_errno+0x28>
    3628:	d0a7b004 	addi	r2,gp,-24896
}
    362c:	e037883a 	mov	sp,fp
    3630:	dfc00117 	ldw	ra,4(sp)
    3634:	df000017 	ldw	fp,0(sp)
    3638:	dec00204 	addi	sp,sp,8
    363c:	f800283a 	ret

00003640 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    3640:	defff904 	addi	sp,sp,-28
    3644:	dfc00615 	stw	ra,24(sp)
    3648:	df000515 	stw	fp,20(sp)
    364c:	df000504 	addi	fp,sp,20
    3650:	e13ffd15 	stw	r4,-12(fp)
    3654:	e17ffc15 	stw	r5,-16(fp)
    3658:	e1bffb15 	stw	r6,-20(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    365c:	e03fff15 	stw	zero,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    3660:	e0bffd17 	ldw	r2,-12(fp)
    3664:	10000616 	blt	r2,zero,3680 <lseek+0x40>
    3668:	e0bffd17 	ldw	r2,-12(fp)
    366c:	10c00324 	muli	r3,r2,12
    3670:	00800074 	movhi	r2,1
    3674:	10bfea04 	addi	r2,r2,-88
    3678:	1885883a 	add	r2,r3,r2
    367c:	00000106 	br	3684 <lseek+0x44>
    3680:	0005883a 	mov	r2,zero
    3684:	e0bffe15 	stw	r2,-8(fp)
  
  if (fd) 
    3688:	e0bffe17 	ldw	r2,-8(fp)
    368c:	10001026 	beq	r2,zero,36d0 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    3690:	e0bffe17 	ldw	r2,-8(fp)
    3694:	10800017 	ldw	r2,0(r2)
    3698:	10800717 	ldw	r2,28(r2)
    369c:	10000926 	beq	r2,zero,36c4 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    36a0:	e0bffe17 	ldw	r2,-8(fp)
    36a4:	10800017 	ldw	r2,0(r2)
    36a8:	10800717 	ldw	r2,28(r2)
    36ac:	e1bffb17 	ldw	r6,-20(fp)
    36b0:	e17ffc17 	ldw	r5,-16(fp)
    36b4:	e13ffe17 	ldw	r4,-8(fp)
    36b8:	103ee83a 	callr	r2
    36bc:	e0bfff15 	stw	r2,-4(fp)
    36c0:	00000506 	br	36d8 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    36c4:	00bfde84 	movi	r2,-134
    36c8:	e0bfff15 	stw	r2,-4(fp)
    36cc:	00000206 	br	36d8 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    36d0:	00bfebc4 	movi	r2,-81
    36d4:	e0bfff15 	stw	r2,-4(fp)
  }

  if (rc < 0)
    36d8:	e0bfff17 	ldw	r2,-4(fp)
    36dc:	1000070e 	bge	r2,zero,36fc <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    36e0:	00036040 	call	3604 <alt_get_errno>
    36e4:	1007883a 	mov	r3,r2
    36e8:	e0bfff17 	ldw	r2,-4(fp)
    36ec:	0085c83a 	sub	r2,zero,r2
    36f0:	18800015 	stw	r2,0(r3)
    rc = -1;
    36f4:	00bfffc4 	movi	r2,-1
    36f8:	e0bfff15 	stw	r2,-4(fp)
  }

  return rc;
    36fc:	e0bfff17 	ldw	r2,-4(fp)
}
    3700:	e037883a 	mov	sp,fp
    3704:	dfc00117 	ldw	ra,4(sp)
    3708:	df000017 	ldw	fp,0(sp)
    370c:	dec00204 	addi	sp,sp,8
    3710:	f800283a 	ret

00003714 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    3714:	defffb04 	addi	sp,sp,-20
    3718:	dfc00415 	stw	ra,16(sp)
    371c:	df000315 	stw	fp,12(sp)
    3720:	df000304 	addi	fp,sp,12
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    3724:	0009883a 	mov	r4,zero
    3728:	000b7f00 	call	b7f0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    372c:	00047100 	call	4710 <OSInit>
    3730:	01000044 	movi	r4,1
    3734:	00091880 	call	9188 <OSSemCreate>
    3738:	d0a7b515 	stw	r2,-24876(gp)
    373c:	01000044 	movi	r4,1
    3740:	00091880 	call	9188 <OSSemCreate>
    3744:	d0a7b715 	stw	r2,-24868(gp)
    3748:	d0a7b104 	addi	r2,gp,-24892
    374c:	e0bffe15 	stw	r2,-8(fp)
    3750:	00800044 	movi	r2,1
    3754:	e0bffd8d 	sth	r2,-10(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
    3758:	e0bffd8b 	ldhu	r2,-10(fp)
    375c:	1009883a 	mov	r4,r2
    3760:	00091880 	call	9188 <OSSemCreate>
    3764:	1007883a 	mov	r3,r2
    3768:	e0bffe17 	ldw	r2,-8(fp)
    376c:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
    3770:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    3774:	000b82c0 	call	b82c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    3778:	01800074 	movhi	r6,1
    377c:	31bd3204 	addi	r6,r6,-2872
    3780:	01400074 	movhi	r5,1
    3784:	297d3204 	addi	r5,r5,-2872
    3788:	01000074 	movhi	r4,1
    378c:	213d3204 	addi	r4,r4,-2872
    3790:	000e5940 	call	e594 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    3794:	000e3580 	call	e358 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    3798:	01000074 	movhi	r4,1
    379c:	2138ef04 	addi	r4,r4,-7236
    37a0:	000f1f80 	call	f1f8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    37a4:	d0a7b217 	ldw	r2,-24888(gp)
    37a8:	d0e7b317 	ldw	r3,-24884(gp)
    37ac:	d127b417 	ldw	r4,-24880(gp)
    37b0:	200d883a 	mov	r6,r4
    37b4:	180b883a 	mov	r5,r3
    37b8:	1009883a 	mov	r4,r2
    37bc:	00002780 	call	278 <main>
    37c0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    37c4:	01000044 	movi	r4,1
    37c8:	00032500 	call	3250 <close>
  exit (result);
    37cc:	e13fff17 	ldw	r4,-4(fp)
    37d0:	000f20c0 	call	f20c <exit>

000037d4 <alt_get_errno>:
{
    37d4:	defffe04 	addi	sp,sp,-8
    37d8:	dfc00115 	stw	ra,4(sp)
    37dc:	df000015 	stw	fp,0(sp)
    37e0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    37e4:	d0a00917 	ldw	r2,-32732(gp)
    37e8:	10000326 	beq	r2,zero,37f8 <alt_get_errno+0x24>
    37ec:	d0a00917 	ldw	r2,-32732(gp)
    37f0:	103ee83a 	callr	r2
    37f4:	00000106 	br	37fc <alt_get_errno+0x28>
    37f8:	d0a7b004 	addi	r2,gp,-24896
}
    37fc:	e037883a 	mov	sp,fp
    3800:	dfc00117 	ldw	ra,4(sp)
    3804:	df000017 	ldw	fp,0(sp)
    3808:	dec00204 	addi	sp,sp,8
    380c:	f800283a 	ret

00003810 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    3810:	defff904 	addi	sp,sp,-28
    3814:	dfc00615 	stw	ra,24(sp)
    3818:	df000515 	stw	fp,20(sp)
    381c:	df000504 	addi	fp,sp,20
    3820:	e13ffd15 	stw	r4,-12(fp)
    3824:	e17ffc15 	stw	r5,-16(fp)
    3828:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    382c:	e0bffd17 	ldw	r2,-12(fp)
    3830:	10000616 	blt	r2,zero,384c <read+0x3c>
    3834:	e0bffd17 	ldw	r2,-12(fp)
    3838:	10c00324 	muli	r3,r2,12
    383c:	00800074 	movhi	r2,1
    3840:	10bfea04 	addi	r2,r2,-88
    3844:	1885883a 	add	r2,r3,r2
    3848:	00000106 	br	3850 <read+0x40>
    384c:	0005883a 	mov	r2,zero
    3850:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
    3854:	e0bfff17 	ldw	r2,-4(fp)
    3858:	10002226 	beq	r2,zero,38e4 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    385c:	e0bfff17 	ldw	r2,-4(fp)
    3860:	10800217 	ldw	r2,8(r2)
    3864:	108000cc 	andi	r2,r2,3
    3868:	10800060 	cmpeqi	r2,r2,1
    386c:	1000181e 	bne	r2,zero,38d0 <read+0xc0>
        (fd->dev->read))
    3870:	e0bfff17 	ldw	r2,-4(fp)
    3874:	10800017 	ldw	r2,0(r2)
    3878:	10800517 	ldw	r2,20(r2)
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    387c:	10001426 	beq	r2,zero,38d0 <read+0xc0>
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    3880:	e0bfff17 	ldw	r2,-4(fp)
    3884:	10800017 	ldw	r2,0(r2)
    3888:	10800517 	ldw	r2,20(r2)
    388c:	e0fffb17 	ldw	r3,-20(fp)
    3890:	180d883a 	mov	r6,r3
    3894:	e17ffc17 	ldw	r5,-16(fp)
    3898:	e13fff17 	ldw	r4,-4(fp)
    389c:	103ee83a 	callr	r2
    38a0:	e0bffe15 	stw	r2,-8(fp)
    38a4:	e0bffe17 	ldw	r2,-8(fp)
    38a8:	1000070e 	bge	r2,zero,38c8 <read+0xb8>
        {
          ALT_ERRNO = -rval;
    38ac:	00037d40 	call	37d4 <alt_get_errno>
    38b0:	1007883a 	mov	r3,r2
    38b4:	e0bffe17 	ldw	r2,-8(fp)
    38b8:	0085c83a 	sub	r2,zero,r2
    38bc:	18800015 	stw	r2,0(r3)
          return -1;
    38c0:	00bfffc4 	movi	r2,-1
    38c4:	00000c06 	br	38f8 <read+0xe8>
        }
        return rval;
    38c8:	e0bffe17 	ldw	r2,-8(fp)
    38cc:	00000a06 	br	38f8 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    38d0:	00037d40 	call	37d4 <alt_get_errno>
    38d4:	1007883a 	mov	r3,r2
    38d8:	00800344 	movi	r2,13
    38dc:	18800015 	stw	r2,0(r3)
    38e0:	00000406 	br	38f4 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    38e4:	00037d40 	call	37d4 <alt_get_errno>
    38e8:	1007883a 	mov	r3,r2
    38ec:	00801444 	movi	r2,81
    38f0:	18800015 	stw	r2,0(r3)
  }
  return -1;
    38f4:	00bfffc4 	movi	r2,-1
}
    38f8:	e037883a 	mov	sp,fp
    38fc:	dfc00117 	ldw	ra,4(sp)
    3900:	df000017 	ldw	fp,0(sp)
    3904:	dec00204 	addi	sp,sp,8
    3908:	f800283a 	ret

0000390c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    390c:	defffe04 	addi	sp,sp,-8
    3910:	df000115 	stw	fp,4(sp)
    3914:	df000104 	addi	fp,sp,4
    3918:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    391c:	e0bfff17 	ldw	r2,-4(fp)
    3920:	108000d0 	cmplti	r2,r2,3
    3924:	10000a1e 	bne	r2,zero,3950 <alt_release_fd+0x44>
  {
    alt_fd_list[fd].fd_flags = 0;
    3928:	e0bfff17 	ldw	r2,-4(fp)
    392c:	10c00324 	muli	r3,r2,12
    3930:	00800074 	movhi	r2,1
    3934:	1885883a 	add	r2,r3,r2
    3938:	103fec15 	stw	zero,-80(r2)
    alt_fd_list[fd].dev      = 0;
    393c:	e0bfff17 	ldw	r2,-4(fp)
    3940:	10c00324 	muli	r3,r2,12
    3944:	00800074 	movhi	r2,1
    3948:	1885883a 	add	r2,r3,r2
    394c:	103fea15 	stw	zero,-88(r2)
  }
}
    3950:	0001883a 	nop
    3954:	e037883a 	mov	sp,fp
    3958:	df000017 	ldw	fp,0(sp)
    395c:	dec00104 	addi	sp,sp,4
    3960:	f800283a 	ret

00003964 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    3964:	defff904 	addi	sp,sp,-28
    3968:	df000615 	stw	fp,24(sp)
    396c:	df000604 	addi	fp,sp,24
    3970:	e13ffa15 	stw	r4,-24(fp)
  NIOS2_READ_STATUS (context);
    3974:	0005303a 	rdctl	r2,status
    3978:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    397c:	e0fffd17 	ldw	r3,-12(fp)
    3980:	00bfff84 	movi	r2,-2
    3984:	1884703a 	and	r2,r3,r2
    3988:	1001703a 	wrctl	status,r2
  return context;
    398c:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    3990:	e0bfff15 	stw	r2,-4(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    3994:	d0a00a17 	ldw	r2,-32728(gp)
    3998:	10c000c4 	addi	r3,r2,3
    399c:	00bfff04 	movi	r2,-4
    39a0:	1884703a 	and	r2,r3,r2
    39a4:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    39a8:	d0e00a17 	ldw	r3,-32728(gp)
    39ac:	e0bffa17 	ldw	r2,-24(fp)
    39b0:	1887883a 	add	r3,r3,r2
    39b4:	00810034 	movhi	r2,1024
    39b8:	10800004 	addi	r2,r2,0
    39bc:	10c0072e 	bgeu	r2,r3,39dc <sbrk+0x78>
    39c0:	e0bfff17 	ldw	r2,-4(fp)
    39c4:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    39c8:	e0bffc17 	ldw	r2,-16(fp)
    39cc:	1001703a 	wrctl	status,r2
}
    39d0:	0001883a 	nop
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    39d4:	00bfffc4 	movi	r2,-1
    39d8:	00000c06 	br	3a0c <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
    39dc:	d0a00a17 	ldw	r2,-32728(gp)
    39e0:	e0bffe15 	stw	r2,-8(fp)
  heap_end += incr; 
    39e4:	d0e00a17 	ldw	r3,-32728(gp)
    39e8:	e0bffa17 	ldw	r2,-24(fp)
    39ec:	1885883a 	add	r2,r3,r2
    39f0:	d0a00a15 	stw	r2,-32728(gp)
    39f4:	e0bfff17 	ldw	r2,-4(fp)
    39f8:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    39fc:	e0bffb17 	ldw	r2,-20(fp)
    3a00:	1001703a 	wrctl	status,r2
}
    3a04:	0001883a 	nop

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    3a08:	e0bffe17 	ldw	r2,-8(fp)
} 
    3a0c:	e037883a 	mov	sp,fp
    3a10:	df000017 	ldw	fp,0(sp)
    3a14:	dec00104 	addi	sp,sp,4
    3a18:	f800283a 	ret

00003a1c <alt_get_errno>:
{
    3a1c:	defffe04 	addi	sp,sp,-8
    3a20:	dfc00115 	stw	ra,4(sp)
    3a24:	df000015 	stw	fp,0(sp)
    3a28:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    3a2c:	d0a00917 	ldw	r2,-32732(gp)
    3a30:	10000326 	beq	r2,zero,3a40 <alt_get_errno+0x24>
    3a34:	d0a00917 	ldw	r2,-32732(gp)
    3a38:	103ee83a 	callr	r2
    3a3c:	00000106 	br	3a44 <alt_get_errno+0x28>
    3a40:	d0a7b004 	addi	r2,gp,-24896
}
    3a44:	e037883a 	mov	sp,fp
    3a48:	dfc00117 	ldw	ra,4(sp)
    3a4c:	df000017 	ldw	fp,0(sp)
    3a50:	dec00204 	addi	sp,sp,8
    3a54:	f800283a 	ret

00003a58 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    3a58:	defff904 	addi	sp,sp,-28
    3a5c:	dfc00615 	stw	ra,24(sp)
    3a60:	df000515 	stw	fp,20(sp)
    3a64:	df000504 	addi	fp,sp,20
    3a68:	e13ffd15 	stw	r4,-12(fp)
    3a6c:	e17ffc15 	stw	r5,-16(fp)
    3a70:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    3a74:	e0bffd17 	ldw	r2,-12(fp)
    3a78:	10000616 	blt	r2,zero,3a94 <write+0x3c>
    3a7c:	e0bffd17 	ldw	r2,-12(fp)
    3a80:	10c00324 	muli	r3,r2,12
    3a84:	00800074 	movhi	r2,1
    3a88:	10bfea04 	addi	r2,r2,-88
    3a8c:	1885883a 	add	r2,r3,r2
    3a90:	00000106 	br	3a98 <write+0x40>
    3a94:	0005883a 	mov	r2,zero
    3a98:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
    3a9c:	e0bfff17 	ldw	r2,-4(fp)
    3aa0:	10002126 	beq	r2,zero,3b28 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    3aa4:	e0bfff17 	ldw	r2,-4(fp)
    3aa8:	10800217 	ldw	r2,8(r2)
    3aac:	108000cc 	andi	r2,r2,3
    3ab0:	10001826 	beq	r2,zero,3b14 <write+0xbc>
    3ab4:	e0bfff17 	ldw	r2,-4(fp)
    3ab8:	10800017 	ldw	r2,0(r2)
    3abc:	10800617 	ldw	r2,24(r2)
    3ac0:	10001426 	beq	r2,zero,3b14 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    3ac4:	e0bfff17 	ldw	r2,-4(fp)
    3ac8:	10800017 	ldw	r2,0(r2)
    3acc:	10800617 	ldw	r2,24(r2)
    3ad0:	e0fffb17 	ldw	r3,-20(fp)
    3ad4:	180d883a 	mov	r6,r3
    3ad8:	e17ffc17 	ldw	r5,-16(fp)
    3adc:	e13fff17 	ldw	r4,-4(fp)
    3ae0:	103ee83a 	callr	r2
    3ae4:	e0bffe15 	stw	r2,-8(fp)
    3ae8:	e0bffe17 	ldw	r2,-8(fp)
    3aec:	1000070e 	bge	r2,zero,3b0c <write+0xb4>
      {
        ALT_ERRNO = -rval;
    3af0:	0003a1c0 	call	3a1c <alt_get_errno>
    3af4:	1007883a 	mov	r3,r2
    3af8:	e0bffe17 	ldw	r2,-8(fp)
    3afc:	0085c83a 	sub	r2,zero,r2
    3b00:	18800015 	stw	r2,0(r3)
        return -1;
    3b04:	00bfffc4 	movi	r2,-1
    3b08:	00000c06 	br	3b3c <write+0xe4>
      }
      return rval;
    3b0c:	e0bffe17 	ldw	r2,-8(fp)
    3b10:	00000a06 	br	3b3c <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    3b14:	0003a1c0 	call	3a1c <alt_get_errno>
    3b18:	1007883a 	mov	r3,r2
    3b1c:	00800344 	movi	r2,13
    3b20:	18800015 	stw	r2,0(r3)
    3b24:	00000406 	br	3b38 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    3b28:	0003a1c0 	call	3a1c <alt_get_errno>
    3b2c:	1007883a 	mov	r3,r2
    3b30:	00801444 	movi	r2,81
    3b34:	18800015 	stw	r2,0(r3)
  }
  return -1;
    3b38:	00bfffc4 	movi	r2,-1
}
    3b3c:	e037883a 	mov	sp,fp
    3b40:	dfc00117 	ldw	ra,4(sp)
    3b44:	df000017 	ldw	fp,0(sp)
    3b48:	dec00204 	addi	sp,sp,8
    3b4c:	f800283a 	ret

00003b50 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
    3b50:	deffdf04 	addi	sp,sp,-132
    3b54:	dfc02015 	stw	ra,128(sp)
    3b58:	df001f15 	stw	fp,124(sp)
    3b5c:	df001f04 	addi	fp,sp,124
    3b60:	e13fe115 	stw	r4,-124(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
    3b64:	e0bfe404 	addi	r2,fp,-112
    3b68:	100b883a 	mov	r5,r2
    3b6c:	01003fc4 	movi	r4,255
    3b70:	000b1240 	call	b124 <OSTaskQuery>
    3b74:	e0bfe245 	stb	r2,-119(fp)
  if (err != OS_NO_ERR)
    3b78:	e0bfe243 	ldbu	r2,-119(fp)
    3b7c:	10803fcc 	andi	r2,r2,255
    3b80:	10001d1e 	bne	r2,zero,3bf8 <__env_lock+0xa8>
    return;

  id = tcb.OSTCBPrio;
    3b84:	e0bff083 	ldbu	r2,-62(fp)
    3b88:	10803fcc 	andi	r2,r2,255
    3b8c:	e0bfff15 	stw	r2,-4(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
    3b90:	d0a7b517 	ldw	r2,-24876(gp)
    3b94:	e0ffe284 	addi	r3,fp,-118
    3b98:	180b883a 	mov	r5,r3
    3b9c:	1009883a 	mov	r4,r2
    3ba0:	00099580 	call	9958 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
    3ba4:	e0bfe3c3 	ldbu	r2,-113(fp)
    3ba8:	10803fcc 	andi	r2,r2,255
    3bac:	10000726 	beq	r2,zero,3bcc <__env_lock+0x7c>
    3bb0:	d0a00b17 	ldw	r2,-32724(gp)
    3bb4:	e0ffff17 	ldw	r3,-4(fp)
    3bb8:	1880041e 	bne	r3,r2,3bcc <__env_lock+0x7c>
  {
    /* we do; just count the recursion */

    locks++;
    3bbc:	d0a7b617 	ldw	r2,-24872(gp)
    3bc0:	10800044 	addi	r2,r2,1
    3bc4:	d0a7b615 	stw	r2,-24872(gp)
    locks  = 1;
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
    3bc8:	00000c06 	br	3bfc <__env_lock+0xac>
    OSSemPend( alt_envsem, 0, &err );
    3bcc:	d0a7b517 	ldw	r2,-24876(gp)
    3bd0:	e0ffe244 	addi	r3,fp,-119
    3bd4:	180d883a 	mov	r6,r3
    3bd8:	000b883a 	mov	r5,zero
    3bdc:	1009883a 	mov	r4,r2
    3be0:	00094b40 	call	94b4 <OSSemPend>
    locks  = 1;
    3be4:	00800044 	movi	r2,1
    3be8:	d0a7b615 	stw	r2,-24872(gp)
    lockid = id;
    3bec:	e0bfff17 	ldw	r2,-4(fp)
    3bf0:	d0a00b15 	stw	r2,-32724(gp)
  return;
    3bf4:	00000106 	br	3bfc <__env_lock+0xac>
    return;
    3bf8:	0001883a 	nop
}
    3bfc:	e037883a 	mov	sp,fp
    3c00:	dfc00117 	ldw	ra,4(sp)
    3c04:	df000017 	ldw	fp,0(sp)
    3c08:	dec00204 	addi	sp,sp,8
    3c0c:	f800283a 	ret

00003c10 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
    3c10:	defffd04 	addi	sp,sp,-12
    3c14:	dfc00215 	stw	ra,8(sp)
    3c18:	df000115 	stw	fp,4(sp)
    3c1c:	df000104 	addi	fp,sp,4
    3c20:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    3c24:	d0a7b617 	ldw	r2,-24872(gp)
    3c28:	10000b26 	beq	r2,zero,3c58 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
    3c2c:	d0a7b617 	ldw	r2,-24872(gp)
    3c30:	10bfffc4 	addi	r2,r2,-1
    3c34:	d0a7b615 	stw	r2,-24872(gp)
    3c38:	d0a7b617 	ldw	r2,-24872(gp)
    3c3c:	1000071e 	bne	r2,zero,3c5c <__env_unlock+0x4c>
  {
    lockid = -1;
    3c40:	00bfffc4 	movi	r2,-1
    3c44:	d0a00b15 	stw	r2,-32724(gp)
    OSSemPost( alt_envsem );
    3c48:	d0a7b517 	ldw	r2,-24876(gp)
    3c4c:	1009883a 	mov	r4,r2
    3c50:	000983c0 	call	983c <OSSemPost>
    3c54:	00000106 	br	3c5c <__env_unlock+0x4c>
    return;
    3c58:	0001883a 	nop
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
    3c5c:	e037883a 	mov	sp,fp
    3c60:	dfc00117 	ldw	ra,4(sp)
    3c64:	df000017 	ldw	fp,0(sp)
    3c68:	dec00204 	addi	sp,sp,8
    3c6c:	f800283a 	ret

00003c70 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
    3c70:	deffdb04 	addi	sp,sp,-148
    3c74:	dfc02415 	stw	ra,144(sp)
    3c78:	df002315 	stw	fp,140(sp)
    3c7c:	df002304 	addi	fp,sp,140
    3c80:	e13fdd15 	stw	r4,-140(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    3c84:	e03fff15 	stw	zero,-4(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
    3c88:	d0a7c143 	ldbu	r2,-24827(gp)
    3c8c:	10803fcc 	andi	r2,r2,255
    3c90:	10800060 	cmpeqi	r2,r2,1
    3c94:	10003826 	beq	r2,zero,3d78 <__malloc_lock+0x108>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
    3c98:	e0bfe004 	addi	r2,fp,-128
    3c9c:	100b883a 	mov	r5,r2
    3ca0:	01003fc4 	movi	r4,255
    3ca4:	000b1240 	call	b124 <OSTaskQuery>
    3ca8:	e0bfde45 	stb	r2,-135(fp)
  if (err != OS_NO_ERR)
    3cac:	e0bfde43 	ldbu	r2,-135(fp)
    3cb0:	10803fcc 	andi	r2,r2,255
    3cb4:	1000321e 	bne	r2,zero,3d80 <__malloc_lock+0x110>
    return;

  id = tcb.OSTCBPrio;
    3cb8:	e0bfec83 	ldbu	r2,-78(fp)
    3cbc:	10803fcc 	andi	r2,r2,255
    3cc0:	e0bffe15 	stw	r2,-8(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
    3cc4:	d0a7b717 	ldw	r2,-24868(gp)
    3cc8:	e0ffde84 	addi	r3,fp,-134
    3ccc:	180b883a 	mov	r5,r3
    3cd0:	1009883a 	mov	r4,r2
    3cd4:	00099580 	call	9958 <OSSemQuery>
  NIOS2_READ_STATUS (context);
    3cd8:	0005303a 	rdctl	r2,status
    3cdc:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3ce0:	e0fffd17 	ldw	r3,-12(fp)
    3ce4:	00bfff84 	movi	r2,-2
    3ce8:	1884703a 	and	r2,r3,r2
    3cec:	1001703a 	wrctl	status,r2
  return context;
    3cf0:	e0bffd17 	ldw	r2,-12(fp)
  
  OS_ENTER_CRITICAL();
    3cf4:	e0bfff15 	stw	r2,-4(fp)

  if( !semdata.OSCnt && id == lockid ) 
    3cf8:	e0bfde8b 	ldhu	r2,-134(fp)
    3cfc:	10bfffcc 	andi	r2,r2,65535
    3d00:	10000d1e 	bne	r2,zero,3d38 <__malloc_lock+0xc8>
    3d04:	d0a00c17 	ldw	r2,-32720(gp)
    3d08:	e0fffe17 	ldw	r3,-8(fp)
    3d0c:	18800a1e 	bne	r3,r2,3d38 <__malloc_lock+0xc8>
  {
    /* we do; just count the recursion */
    locks++;
    3d10:	d0a7b817 	ldw	r2,-24864(gp)
    3d14:	10800044 	addi	r2,r2,1
    3d18:	d0a7b815 	stw	r2,-24864(gp)
    3d1c:	e0bfff17 	ldw	r2,-4(fp)
    3d20:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    3d24:	e0bffc17 	ldw	r2,-16(fp)
    3d28:	1001703a 	wrctl	status,r2
}
    3d2c:	0001883a 	nop
    OS_EXIT_CRITICAL();
    3d30:	0001883a 	nop
    locks  = 1;
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
    3d34:	00001306 	br	3d84 <__malloc_lock+0x114>
    3d38:	e0bfff17 	ldw	r2,-4(fp)
    3d3c:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    3d40:	e0bffb17 	ldw	r2,-20(fp)
    3d44:	1001703a 	wrctl	status,r2
}
    3d48:	0001883a 	nop
    OSSemPend( alt_heapsem, 0, &err );
    3d4c:	d0a7b717 	ldw	r2,-24868(gp)
    3d50:	e0ffde44 	addi	r3,fp,-135
    3d54:	180d883a 	mov	r6,r3
    3d58:	000b883a 	mov	r5,zero
    3d5c:	1009883a 	mov	r4,r2
    3d60:	00094b40 	call	94b4 <OSSemPend>
    locks  = 1;
    3d64:	00800044 	movi	r2,1
    3d68:	d0a7b815 	stw	r2,-24864(gp)
    lockid = id;
    3d6c:	e0bffe17 	ldw	r2,-8(fp)
    3d70:	d0a00c15 	stw	r2,-32720(gp)
  return;
    3d74:	00000306 	br	3d84 <__malloc_lock+0x114>
      return;
    3d78:	0001883a 	nop
    3d7c:	00000106 	br	3d84 <__malloc_lock+0x114>
    return;
    3d80:	0001883a 	nop
}
    3d84:	e037883a 	mov	sp,fp
    3d88:	dfc00117 	ldw	ra,4(sp)
    3d8c:	df000017 	ldw	fp,0(sp)
    3d90:	dec00204 	addi	sp,sp,8
    3d94:	f800283a 	ret

00003d98 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    3d98:	defff804 	addi	sp,sp,-32
    3d9c:	dfc00715 	stw	ra,28(sp)
    3da0:	df000615 	stw	fp,24(sp)
    3da4:	df000604 	addi	fp,sp,24
    3da8:	e13ffa15 	stw	r4,-24(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    3dac:	e03fff15 	stw	zero,-4(fp)
#endif 

  if (OSRunning != OS_TRUE)
    3db0:	d0a7c143 	ldbu	r2,-24827(gp)
    3db4:	10803fcc 	andi	r2,r2,255
    3db8:	10800060 	cmpeqi	r2,r2,1
    3dbc:	10002526 	beq	r2,zero,3e54 <__malloc_unlock+0xbc>
  NIOS2_READ_STATUS (context);
    3dc0:	0005303a 	rdctl	r2,status
    3dc4:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3dc8:	e0fffe17 	ldw	r3,-8(fp)
    3dcc:	00bfff84 	movi	r2,-2
    3dd0:	1884703a 	and	r2,r3,r2
    3dd4:	1001703a 	wrctl	status,r2
  return context;
    3dd8:	e0bffe17 	ldw	r2,-8(fp)
      return;

  OS_ENTER_CRITICAL();
    3ddc:	e0bfff15 	stw	r2,-4(fp)
  if (locks == 0)
    3de0:	d0a7b817 	ldw	r2,-24864(gp)
    3de4:	1000061e 	bne	r2,zero,3e00 <__malloc_unlock+0x68>
    3de8:	e0bfff17 	ldw	r2,-4(fp)
    3dec:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
    3df0:	e0bffd17 	ldw	r2,-12(fp)
    3df4:	1001703a 	wrctl	status,r2
}
    3df8:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
      return;
    3dfc:	00001606 	br	3e58 <__malloc_unlock+0xc0>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
    3e00:	d0a7b817 	ldw	r2,-24864(gp)
    3e04:	10bfffc4 	addi	r2,r2,-1
    3e08:	d0a7b815 	stw	r2,-24864(gp)
    3e0c:	d0a7b817 	ldw	r2,-24864(gp)
    3e10:	10000b1e 	bne	r2,zero,3e40 <__malloc_unlock+0xa8>
  {
    lockid = -1;
    3e14:	00bfffc4 	movi	r2,-1
    3e18:	d0a00c15 	stw	r2,-32720(gp)
    3e1c:	e0bfff17 	ldw	r2,-4(fp)
    3e20:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    3e24:	e0bffc17 	ldw	r2,-16(fp)
    3e28:	1001703a 	wrctl	status,r2
}
    3e2c:	0001883a 	nop
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
    3e30:	d0a7b717 	ldw	r2,-24868(gp)
    3e34:	1009883a 	mov	r4,r2
    3e38:	000983c0 	call	983c <OSSemPost>
    3e3c:	00000606 	br	3e58 <__malloc_unlock+0xc0>
    3e40:	e0bfff17 	ldw	r2,-4(fp)
    3e44:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    3e48:	e0bffb17 	ldw	r2,-20(fp)
    3e4c:	1001703a 	wrctl	status,r2
}
    3e50:	00000106 	br	3e58 <__malloc_unlock+0xc0>
      return;
    3e54:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
    3e58:	e037883a 	mov	sp,fp
    3e5c:	dfc00117 	ldw	ra,4(sp)
    3e60:	df000017 	ldw	fp,0(sp)
    3e64:	dec00204 	addi	sp,sp,8
    3e68:	f800283a 	ret

00003e6c <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
    3e6c:	defff704 	addi	sp,sp,-36
    3e70:	dfc00815 	stw	ra,32(sp)
    3e74:	df000715 	stw	fp,28(sp)
    3e78:	df000704 	addi	fp,sp,28
    3e7c:	e13ffb15 	stw	r4,-20(fp)
    3e80:	e17ffa15 	stw	r5,-24(fp)
    3e84:	e1bff915 	stw	r6,-28(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    3e88:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    3e8c:	e0bff917 	ldw	r2,-28(fp)
    3e90:	1000021e 	bne	r2,zero,3e9c <OSEventNameGet+0x30>
        return (0);
    3e94:	0005883a 	mov	r2,zero
    3e98:	00003806 	br	3f7c <OSEventNameGet+0x110>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
    3e9c:	e0bffb17 	ldw	r2,-20(fp)
    3ea0:	1000051e 	bne	r2,zero,3eb8 <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
    3ea4:	e0bff917 	ldw	r2,-28(fp)
    3ea8:	00c00104 	movi	r3,4
    3eac:	10c00005 	stb	r3,0(r2)
        return (0);
    3eb0:	0005883a 	mov	r2,zero
    3eb4:	00003106 	br	3f7c <OSEventNameGet+0x110>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    3eb8:	e0bffa17 	ldw	r2,-24(fp)
    3ebc:	1000051e 	bne	r2,zero,3ed4 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
    3ec0:	e0bff917 	ldw	r2,-28(fp)
    3ec4:	00c00304 	movi	r3,12
    3ec8:	10c00005 	stb	r3,0(r2)
        return (0);
    3ecc:	0005883a 	mov	r2,zero
    3ed0:	00002a06 	br	3f7c <OSEventNameGet+0x110>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    3ed4:	d0a7bf43 	ldbu	r2,-24835(gp)
    3ed8:	10803fcc 	andi	r2,r2,255
    3edc:	10000526 	beq	r2,zero,3ef4 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
    3ee0:	e0bff917 	ldw	r2,-28(fp)
    3ee4:	00c00444 	movi	r3,17
    3ee8:	10c00005 	stb	r3,0(r2)
        return (0);
    3eec:	0005883a 	mov	r2,zero
    3ef0:	00002206 	br	3f7c <OSEventNameGet+0x110>
    }
    switch (pevent->OSEventType) {
    3ef4:	e0bffb17 	ldw	r2,-20(fp)
    3ef8:	10800003 	ldbu	r2,0(r2)
    3efc:	10803fcc 	andi	r2,r2,255
    3f00:	10bfffc4 	addi	r2,r2,-1
    3f04:	10800128 	cmpgeui	r2,r2,4
    3f08:	10000526 	beq	r2,zero,3f20 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
    3f0c:	e0bff917 	ldw	r2,-28(fp)
    3f10:	00c00044 	movi	r3,1
    3f14:	10c00005 	stb	r3,0(r2)
             return (0);
    3f18:	0005883a 	mov	r2,zero
    3f1c:	00001706 	br	3f7c <OSEventNameGet+0x110>
             break;
    3f20:	0001883a 	nop
  NIOS2_READ_STATUS (context);
    3f24:	0005303a 	rdctl	r2,status
    3f28:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3f2c:	e0fffc17 	ldw	r3,-16(fp)
    3f30:	00bfff84 	movi	r2,-2
    3f34:	1884703a 	and	r2,r3,r2
    3f38:	1001703a 	wrctl	status,r2
  return context;
    3f3c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    3f40:	e0bfff15 	stw	r2,-4(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    3f44:	e0bffb17 	ldw	r2,-20(fp)
    3f48:	10800384 	addi	r2,r2,14
    3f4c:	100b883a 	mov	r5,r2
    3f50:	e13ffa17 	ldw	r4,-24(fp)
    3f54:	000591c0 	call	591c <OS_StrCopy>
    3f58:	e0bffec5 	stb	r2,-5(fp)
    3f5c:	e0bfff17 	ldw	r2,-4(fp)
    3f60:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
    3f64:	e0bffd17 	ldw	r2,-12(fp)
    3f68:	1001703a 	wrctl	status,r2
}
    3f6c:	0001883a 	nop
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    3f70:	e0bff917 	ldw	r2,-28(fp)
    3f74:	10000005 	stb	zero,0(r2)
    return (len);
    3f78:	e0bffec3 	ldbu	r2,-5(fp)
}
    3f7c:	e037883a 	mov	sp,fp
    3f80:	dfc00117 	ldw	ra,4(sp)
    3f84:	df000017 	ldw	fp,0(sp)
    3f88:	dec00204 	addi	sp,sp,8
    3f8c:	f800283a 	ret

00003f90 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
    3f90:	defff604 	addi	sp,sp,-40
    3f94:	dfc00915 	stw	ra,36(sp)
    3f98:	df000815 	stw	fp,32(sp)
    3f9c:	df000804 	addi	fp,sp,32
    3fa0:	e13ffa15 	stw	r4,-24(fp)
    3fa4:	e17ff915 	stw	r5,-28(fp)
    3fa8:	e1bff815 	stw	r6,-32(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    3fac:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    3fb0:	e0bff817 	ldw	r2,-32(fp)
    3fb4:	10004226 	beq	r2,zero,40c0 <OSEventNameSet+0x130>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
    3fb8:	e0bffa17 	ldw	r2,-24(fp)
    3fbc:	1000041e 	bne	r2,zero,3fd0 <OSEventNameSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
    3fc0:	e0bff817 	ldw	r2,-32(fp)
    3fc4:	00c00104 	movi	r3,4
    3fc8:	10c00005 	stb	r3,0(r2)
        return;
    3fcc:	00003d06 	br	40c4 <OSEventNameSet+0x134>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    3fd0:	e0bff917 	ldw	r2,-28(fp)
    3fd4:	1000041e 	bne	r2,zero,3fe8 <OSEventNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
    3fd8:	e0bff817 	ldw	r2,-32(fp)
    3fdc:	00c00304 	movi	r3,12
    3fe0:	10c00005 	stb	r3,0(r2)
        return;
    3fe4:	00003706 	br	40c4 <OSEventNameSet+0x134>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    3fe8:	d0a7bf43 	ldbu	r2,-24835(gp)
    3fec:	10803fcc 	andi	r2,r2,255
    3ff0:	10000426 	beq	r2,zero,4004 <OSEventNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
    3ff4:	e0bff817 	ldw	r2,-32(fp)
    3ff8:	00c00484 	movi	r3,18
    3ffc:	10c00005 	stb	r3,0(r2)
        return;
    4000:	00003006 	br	40c4 <OSEventNameSet+0x134>
    }
    switch (pevent->OSEventType) {
    4004:	e0bffa17 	ldw	r2,-24(fp)
    4008:	10800003 	ldbu	r2,0(r2)
    400c:	10803fcc 	andi	r2,r2,255
    4010:	10bfffc4 	addi	r2,r2,-1
    4014:	10800128 	cmpgeui	r2,r2,4
    4018:	10000426 	beq	r2,zero,402c <OSEventNameSet+0x9c>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
    401c:	e0bff817 	ldw	r2,-32(fp)
    4020:	00c00044 	movi	r3,1
    4024:	10c00005 	stb	r3,0(r2)
             return;
    4028:	00002606 	br	40c4 <OSEventNameSet+0x134>
             break;
    402c:	0001883a 	nop
  NIOS2_READ_STATUS (context);
    4030:	0005303a 	rdctl	r2,status
    4034:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4038:	e0fffd17 	ldw	r3,-12(fp)
    403c:	00bfff84 	movi	r2,-2
    4040:	1884703a 	and	r2,r3,r2
    4044:	1001703a 	wrctl	status,r2
  return context;
    4048:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    404c:	e0bfff15 	stw	r2,-4(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    4050:	e13ff917 	ldw	r4,-28(fp)
    4054:	00059900 	call	5990 <OS_StrLen>
    4058:	e0bffec5 	stb	r2,-5(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
    405c:	e0bffec3 	ldbu	r2,-5(fp)
    4060:	10800830 	cmpltui	r2,r2,32
    4064:	1000091e 	bne	r2,zero,408c <OSEventNameSet+0xfc>
    4068:	e0bfff17 	ldw	r2,-4(fp)
    406c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    4070:	e0bffc17 	ldw	r2,-16(fp)
    4074:	1001703a 	wrctl	status,r2
}
    4078:	0001883a 	nop
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
    407c:	e0bff817 	ldw	r2,-32(fp)
    4080:	00c002c4 	movi	r3,11
    4084:	10c00005 	stb	r3,0(r2)
        return;
    4088:	00000e06 	br	40c4 <OSEventNameSet+0x134>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    408c:	e0bffa17 	ldw	r2,-24(fp)
    4090:	10800384 	addi	r2,r2,14
    4094:	e17ff917 	ldw	r5,-28(fp)
    4098:	1009883a 	mov	r4,r2
    409c:	000591c0 	call	591c <OS_StrCopy>
    40a0:	e0bfff17 	ldw	r2,-4(fp)
    40a4:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    40a8:	e0bffb17 	ldw	r2,-20(fp)
    40ac:	1001703a 	wrctl	status,r2
}
    40b0:	0001883a 	nop
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    40b4:	e0bff817 	ldw	r2,-32(fp)
    40b8:	10000005 	stb	zero,0(r2)
    40bc:	00000106 	br	40c4 <OSEventNameSet+0x134>
        return;
    40c0:	0001883a 	nop
}
    40c4:	e037883a 	mov	sp,fp
    40c8:	dfc00117 	ldw	ra,4(sp)
    40cc:	df000017 	ldw	fp,0(sp)
    40d0:	dec00204 	addi	sp,sp,8
    40d4:	f800283a 	ret

000040d8 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
    40d8:	deffed04 	addi	sp,sp,-76
    40dc:	dfc01215 	stw	ra,72(sp)
    40e0:	df001115 	stw	fp,68(sp)
    40e4:	df001104 	addi	fp,sp,68
    40e8:	e13ff215 	stw	r4,-56(fp)
    40ec:	e17ff115 	stw	r5,-60(fp)
    40f0:	e1bff015 	stw	r6,-64(fp)
    40f4:	3805883a 	mov	r2,r7
    40f8:	e0bfef0d 	sth	r2,-68(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
    40fc:	e03ffb15 	stw	zero,-20(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
    4100:	e0800217 	ldw	r2,8(fp)
    4104:	1000021e 	bne	r2,zero,4110 <OSEventPendMulti+0x38>
        return (0);
    4108:	0005883a 	mov	r2,zero
    410c:	00017b06 	br	46fc <OSEventPendMulti+0x624>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
    4110:	e0bff217 	ldw	r2,-56(fp)
    4114:	1000051e 	bne	r2,zero,412c <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
    4118:	e0800217 	ldw	r2,8(fp)
    411c:	00c00104 	movi	r3,4
    4120:	10c00005 	stb	r3,0(r2)
        return (0);
    4124:	0005883a 	mov	r2,zero
    4128:	00017406 	br	46fc <OSEventPendMulti+0x624>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
    412c:	e0bff117 	ldw	r2,-60(fp)
    4130:	1000051e 	bne	r2,zero,4148 <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
    4134:	e0800217 	ldw	r2,8(fp)
    4138:	00c00104 	movi	r3,4
    413c:	10c00005 	stb	r3,0(r2)
        return (0);
    4140:	0005883a 	mov	r2,zero
    4144:	00016d06 	br	46fc <OSEventPendMulti+0x624>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
    4148:	e0bff017 	ldw	r2,-64(fp)
    414c:	1000051e 	bne	r2,zero,4164 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
    4150:	e0800217 	ldw	r2,8(fp)
    4154:	00c00104 	movi	r3,4
    4158:	10c00005 	stb	r3,0(r2)
        return (0);
    415c:	0005883a 	mov	r2,zero
    4160:	00016606 	br	46fc <OSEventPendMulti+0x624>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
    4164:	e0bff117 	ldw	r2,-60(fp)
    4168:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
    416c:	e0bff217 	ldw	r2,-56(fp)
    4170:	e0bfff15 	stw	r2,-4(fp)
    pevent      = *pevents;
    4174:	e0bfff17 	ldw	r2,-4(fp)
    4178:	10800017 	ldw	r2,0(r2)
    417c:	e0bffe15 	stw	r2,-8(fp)
    while  (pevent != (OS_EVENT *)0) {
    4180:	00001b06 	br	41f0 <OSEventPendMulti+0x118>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
    4184:	e0bffe17 	ldw	r2,-8(fp)
    4188:	10800003 	ldbu	r2,0(r2)
    418c:	10803fcc 	andi	r2,r2,255
    4190:	10c000e0 	cmpeqi	r3,r2,3
    4194:	18000b1e 	bne	r3,zero,41c4 <OSEventPendMulti+0xec>
    4198:	10c00108 	cmpgei	r3,r2,4
    419c:	1800041e 	bne	r3,zero,41b0 <OSEventPendMulti+0xd8>
    41a0:	10c00060 	cmpeqi	r3,r2,1
    41a4:	1800091e 	bne	r3,zero,41cc <OSEventPendMulti+0xf4>
    41a8:	108000a0 	cmpeqi	r2,r2,2
    41ac:	1000091e 	bne	r2,zero,41d4 <OSEventPendMulti+0xfc>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
    41b0:	e0800217 	ldw	r2,8(fp)
    41b4:	00c00044 	movi	r3,1
    41b8:	10c00005 	stb	r3,0(r2)
                 return (0);
    41bc:	0005883a 	mov	r2,zero
    41c0:	00014e06 	br	46fc <OSEventPendMulti+0x624>
                 break;
    41c4:	0001883a 	nop
    41c8:	00000306 	br	41d8 <OSEventPendMulti+0x100>
                 break;
    41cc:	0001883a 	nop
    41d0:	00000106 	br	41d8 <OSEventPendMulti+0x100>
                 break;
    41d4:	0001883a 	nop
        }
        pevents++;
    41d8:	e0bfff17 	ldw	r2,-4(fp)
    41dc:	10800104 	addi	r2,r2,4
    41e0:	e0bfff15 	stw	r2,-4(fp)
        pevent = *pevents;
    41e4:	e0bfff17 	ldw	r2,-4(fp)
    41e8:	10800017 	ldw	r2,0(r2)
    41ec:	e0bffe15 	stw	r2,-8(fp)
    while  (pevent != (OS_EVENT *)0) {
    41f0:	e0bffe17 	ldw	r2,-8(fp)
    41f4:	103fe31e 	bne	r2,zero,4184 <OSEventPendMulti+0xac>
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
    41f8:	d0a7bf43 	ldbu	r2,-24835(gp)
    41fc:	10803fcc 	andi	r2,r2,255
    4200:	10000526 	beq	r2,zero,4218 <OSEventPendMulti+0x140>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
    4204:	e0800217 	ldw	r2,8(fp)
    4208:	00c00084 	movi	r3,2
    420c:	10c00005 	stb	r3,0(r2)
        return (0);
    4210:	0005883a 	mov	r2,zero
    4214:	00013906 	br	46fc <OSEventPendMulti+0x624>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
    4218:	d0a7bf83 	ldbu	r2,-24834(gp)
    421c:	10803fcc 	andi	r2,r2,255
    4220:	10000526 	beq	r2,zero,4238 <OSEventPendMulti+0x160>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
    4224:	e0800217 	ldw	r2,8(fp)
    4228:	00c00344 	movi	r3,13
    422c:	10c00005 	stb	r3,0(r2)
        return (0);
    4230:	0005883a 	mov	r2,zero
    4234:	00013106 	br	46fc <OSEventPendMulti+0x624>
  NIOS2_READ_STATUS (context);
    4238:	0005303a 	rdctl	r2,status
    423c:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4240:	e0fff917 	ldw	r3,-28(fp)
    4244:	00bfff84 	movi	r2,-2
    4248:	1884703a 	and	r2,r3,r2
    424c:	1001703a 	wrctl	status,r2
  return context;
    4250:	e0bff917 	ldw	r2,-28(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
    4254:	e0bffb15 	stw	r2,-20(fp)
    events_rdy     =  OS_FALSE;
    4258:	e03ffdc5 	stb	zero,-9(fp)
    events_rdy_nbr =  0;
    425c:	e03ffd0d 	sth	zero,-12(fp)
    events_stat    =  OS_STAT_RDY;
    4260:	e03ffcc5 	stb	zero,-13(fp)
    pevents        =  pevents_pend;
    4264:	e0bff217 	ldw	r2,-56(fp)
    4268:	e0bfff15 	stw	r2,-4(fp)
    pevent         = *pevents;
    426c:	e0bfff17 	ldw	r2,-4(fp)
    4270:	10800017 	ldw	r2,0(r2)
    4274:	e0bffe15 	stw	r2,-8(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
    4278:	00008406 	br	448c <OSEventPendMulti+0x3b4>
        switch (pevent->OSEventType) {
    427c:	e0bffe17 	ldw	r2,-8(fp)
    4280:	10800003 	ldbu	r2,0(r2)
    4284:	10803fcc 	andi	r2,r2,255
    4288:	10c000e0 	cmpeqi	r3,r2,3
    428c:	1800071e 	bne	r3,zero,42ac <OSEventPendMulti+0x1d4>
    4290:	10c00108 	cmpgei	r3,r2,4
    4294:	18006b1e 	bne	r3,zero,4444 <OSEventPendMulti+0x36c>
    4298:	10c00060 	cmpeqi	r3,r2,1
    429c:	1800201e 	bne	r3,zero,4320 <OSEventPendMulti+0x248>
    42a0:	108000a0 	cmpeqi	r2,r2,2
    42a4:	1000381e 	bne	r2,zero,4388 <OSEventPendMulti+0x2b0>
    42a8:	00006606 	br	4444 <OSEventPendMulti+0x36c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
    42ac:	e0bffe17 	ldw	r2,-8(fp)
    42b0:	1080020b 	ldhu	r2,8(r2)
    42b4:	10bfffcc 	andi	r2,r2,65535
    42b8:	10001526 	beq	r2,zero,4310 <OSEventPendMulti+0x238>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
    42bc:	e0bffe17 	ldw	r2,-8(fp)
    42c0:	1080020b 	ldhu	r2,8(r2)
    42c4:	10bfffc4 	addi	r2,r2,-1
    42c8:	1007883a 	mov	r3,r2
    42cc:	e0bffe17 	ldw	r2,-8(fp)
    42d0:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
    42d4:	e0bff117 	ldw	r2,-60(fp)
    42d8:	10c00104 	addi	r3,r2,4
    42dc:	e0fff115 	stw	r3,-60(fp)
    42e0:	e0fffe17 	ldw	r3,-8(fp)
    42e4:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
    42e8:	00800044 	movi	r2,1
    42ec:	e0bffdc5 	stb	r2,-9(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
    42f0:	e0bff017 	ldw	r2,-64(fp)
    42f4:	10c00104 	addi	r3,r2,4
    42f8:	e0fff015 	stw	r3,-64(fp)
    42fc:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
    4300:	e0bffd0b 	ldhu	r2,-12(fp)
    4304:	10800044 	addi	r2,r2,1
    4308:	e0bffd0d 	sth	r2,-12(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
    430c:	00005906 	br	4474 <OSEventPendMulti+0x39c>
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
    4310:	e0bffcc3 	ldbu	r2,-13(fp)
    4314:	10800054 	ori	r2,r2,1
    4318:	e0bffcc5 	stb	r2,-13(fp)
                 break;
    431c:	00005506 	br	4474 <OSEventPendMulti+0x39c>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
    4320:	e0bffe17 	ldw	r2,-8(fp)
    4324:	10800117 	ldw	r2,4(r2)
    4328:	10001326 	beq	r2,zero,4378 <OSEventPendMulti+0x2a0>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
    432c:	e0bff017 	ldw	r2,-64(fp)
    4330:	10c00104 	addi	r3,r2,4
    4334:	e0fff015 	stw	r3,-64(fp)
    4338:	e0fffe17 	ldw	r3,-8(fp)
    433c:	18c00117 	ldw	r3,4(r3)
    4340:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
    4344:	e0bffe17 	ldw	r2,-8(fp)
    4348:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
    434c:	e0bff117 	ldw	r2,-60(fp)
    4350:	10c00104 	addi	r3,r2,4
    4354:	e0fff115 	stw	r3,-60(fp)
    4358:	e0fffe17 	ldw	r3,-8(fp)
    435c:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
    4360:	00800044 	movi	r2,1
    4364:	e0bffdc5 	stb	r2,-9(fp)
                      events_rdy_nbr++;
    4368:	e0bffd0b 	ldhu	r2,-12(fp)
    436c:	10800044 	addi	r2,r2,1
    4370:	e0bffd0d 	sth	r2,-12(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
    4374:	00003f06 	br	4474 <OSEventPendMulti+0x39c>
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
    4378:	e0bffcc3 	ldbu	r2,-13(fp)
    437c:	10800094 	ori	r2,r2,2
    4380:	e0bffcc5 	stb	r2,-13(fp)
                 break;
    4384:	00003b06 	br	4474 <OSEventPendMulti+0x39c>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
    4388:	e0bffe17 	ldw	r2,-8(fp)
    438c:	10800117 	ldw	r2,4(r2)
    4390:	e0bffa15 	stw	r2,-24(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
    4394:	e0bffa17 	ldw	r2,-24(fp)
    4398:	1080058b 	ldhu	r2,22(r2)
    439c:	10bfffcc 	andi	r2,r2,65535
    43a0:	10002426 	beq	r2,zero,4434 <OSEventPendMulti+0x35c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
    43a4:	e0bffa17 	ldw	r2,-24(fp)
    43a8:	10c00417 	ldw	r3,16(r2)
    43ac:	19000104 	addi	r4,r3,4
    43b0:	e0bffa17 	ldw	r2,-24(fp)
    43b4:	11000415 	stw	r4,16(r2)
    43b8:	e0bff017 	ldw	r2,-64(fp)
    43bc:	11000104 	addi	r4,r2,4
    43c0:	e13ff015 	stw	r4,-64(fp)
    43c4:	18c00017 	ldw	r3,0(r3)
    43c8:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
    43cc:	e0bffa17 	ldw	r2,-24(fp)
    43d0:	10c00417 	ldw	r3,16(r2)
    43d4:	e0bffa17 	ldw	r2,-24(fp)
    43d8:	10800217 	ldw	r2,8(r2)
    43dc:	1880041e 	bne	r3,r2,43f0 <OSEventPendMulti+0x318>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
    43e0:	e0bffa17 	ldw	r2,-24(fp)
    43e4:	10c00117 	ldw	r3,4(r2)
    43e8:	e0bffa17 	ldw	r2,-24(fp)
    43ec:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
    43f0:	e0bffa17 	ldw	r2,-24(fp)
    43f4:	1080058b 	ldhu	r2,22(r2)
    43f8:	10bfffc4 	addi	r2,r2,-1
    43fc:	1007883a 	mov	r3,r2
    4400:	e0bffa17 	ldw	r2,-24(fp)
    4404:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
    4408:	e0bff117 	ldw	r2,-60(fp)
    440c:	10c00104 	addi	r3,r2,4
    4410:	e0fff115 	stw	r3,-60(fp)
    4414:	e0fffe17 	ldw	r3,-8(fp)
    4418:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
    441c:	00800044 	movi	r2,1
    4420:	e0bffdc5 	stb	r2,-9(fp)
                      events_rdy_nbr++;
    4424:	e0bffd0b 	ldhu	r2,-12(fp)
    4428:	10800044 	addi	r2,r2,1
    442c:	e0bffd0d 	sth	r2,-12(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
    4430:	00001006 	br	4474 <OSEventPendMulti+0x39c>
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
    4434:	e0bffcc3 	ldbu	r2,-13(fp)
    4438:	10800114 	ori	r2,r2,4
    443c:	e0bffcc5 	stb	r2,-13(fp)
                 break;
    4440:	00000c06 	br	4474 <OSEventPendMulti+0x39c>
    4444:	e0bffb17 	ldw	r2,-20(fp)
    4448:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
    444c:	e0bff817 	ldw	r2,-32(fp)
    4450:	1001703a 	wrctl	status,r2
}
    4454:	0001883a 	nop

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
    4458:	e0bff117 	ldw	r2,-60(fp)
    445c:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
    4460:	e0800217 	ldw	r2,8(fp)
    4464:	00c00044 	movi	r3,1
    4468:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
    446c:	e0bffd0b 	ldhu	r2,-12(fp)
    4470:	0000a206 	br	46fc <OSEventPendMulti+0x624>
        }
        pevents++;
    4474:	e0bfff17 	ldw	r2,-4(fp)
    4478:	10800104 	addi	r2,r2,4
    447c:	e0bfff15 	stw	r2,-4(fp)
        pevent = *pevents;
    4480:	e0bfff17 	ldw	r2,-4(fp)
    4484:	10800017 	ldw	r2,0(r2)
    4488:	e0bffe15 	stw	r2,-8(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
    448c:	e0bffe17 	ldw	r2,-8(fp)
    4490:	103f7a1e 	bne	r2,zero,427c <OSEventPendMulti+0x1a4>
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
    4494:	e0bffdc3 	ldbu	r2,-9(fp)
    4498:	10800058 	cmpnei	r2,r2,1
    449c:	10000b1e 	bne	r2,zero,44cc <OSEventPendMulti+0x3f4>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
    44a0:	e0bff117 	ldw	r2,-60(fp)
    44a4:	10000015 	stw	zero,0(r2)
    44a8:	e0bffb17 	ldw	r2,-20(fp)
    44ac:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context);
    44b0:	e0bff717 	ldw	r2,-36(fp)
    44b4:	1001703a 	wrctl	status,r2
}
    44b8:	0001883a 	nop
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
    44bc:	e0800217 	ldw	r2,8(fp)
    44c0:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
    44c4:	e0bffd0b 	ldhu	r2,-12(fp)
    44c8:	00008c06 	br	46fc <OSEventPendMulti+0x624>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
    44cc:	d0a7c317 	ldw	r2,-24820(gp)
    44d0:	10800c03 	ldbu	r2,48(r2)
    44d4:	e0fffcc3 	ldbu	r3,-13(fp)
    44d8:	1884b03a 	or	r2,r3,r2
    44dc:	1009883a 	mov	r4,r2
    44e0:	d0a7c317 	ldw	r2,-24820(gp)
    44e4:	00ffe004 	movi	r3,-128
    44e8:	20c6b03a 	or	r3,r4,r3
    44ec:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    44f0:	d0a7c317 	ldw	r2,-24820(gp)
    44f4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
    44f8:	d0a7c317 	ldw	r2,-24820(gp)
    44fc:	e0ffef0b 	ldhu	r3,-68(fp)
    4500:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
    4504:	e13ff217 	ldw	r4,-56(fp)
    4508:	00050400 	call	5040 <OS_EventTaskWaitMulti>
    450c:	e0bffb17 	ldw	r2,-20(fp)
    4510:	e0bff515 	stw	r2,-44(fp)
  NIOS2_WRITE_STATUS (context);
    4514:	e0bff517 	ldw	r2,-44(fp)
    4518:	1001703a 	wrctl	status,r2
}
    451c:	0001883a 	nop

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
    4520:	00057e40 	call	57e4 <OS_Sched>
  NIOS2_READ_STATUS (context);
    4524:	0005303a 	rdctl	r2,status
    4528:	e0bff615 	stw	r2,-40(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    452c:	e0fff617 	ldw	r3,-40(fp)
    4530:	00bfff84 	movi	r2,-2
    4534:	1884703a 	and	r2,r3,r2
    4538:	1001703a 	wrctl	status,r2
  return context;
    453c:	e0bff617 	ldw	r2,-40(fp)
    OS_ENTER_CRITICAL();
    4540:	e0bffb15 	stw	r2,-20(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
    4544:	d0a7c317 	ldw	r2,-24820(gp)
    4548:	10800c43 	ldbu	r2,49(r2)
    454c:	10803fcc 	andi	r2,r2,255
    4550:	10000226 	beq	r2,zero,455c <OSEventPendMulti+0x484>
    4554:	10800098 	cmpnei	r2,r2,2
    4558:	1000181e 	bne	r2,zero,45bc <OSEventPendMulti+0x4e4>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
    455c:	d0a7c317 	ldw	r2,-24820(gp)
    4560:	10800717 	ldw	r2,28(r2)
    4564:	e0bffe15 	stw	r2,-8(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
    4568:	e0bffe17 	ldw	r2,-8(fp)
    456c:	10000b26 	beq	r2,zero,459c <OSEventPendMulti+0x4c4>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
    4570:	e0bff117 	ldw	r2,-60(fp)
    4574:	10c00104 	addi	r3,r2,4
    4578:	e0fff115 	stw	r3,-60(fp)
    457c:	e0fffe17 	ldw	r3,-8(fp)
    4580:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
    4584:	e0bff117 	ldw	r2,-60(fp)
    4588:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
    458c:	e0bffd0b 	ldhu	r2,-12(fp)
    4590:	10800044 	addi	r2,r2,1
    4594:	e0bffd0d 	sth	r2,-12(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
    4598:	00000d06 	br	45d0 <OSEventPendMulti+0x4f8>
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
    459c:	d0a7c317 	ldw	r2,-24820(gp)
    45a0:	00c00044 	movi	r3,1
    45a4:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
    45a8:	d0a7c317 	ldw	r2,-24820(gp)
    45ac:	e17ff217 	ldw	r5,-56(fp)
    45b0:	1009883a 	mov	r4,r2
    45b4:	00052380 	call	5238 <OS_EventTaskRemoveMulti>
			 break;
    45b8:	00000506 	br	45d0 <OSEventPendMulti+0x4f8>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
    45bc:	d0a7c317 	ldw	r2,-24820(gp)
    45c0:	e17ff217 	ldw	r5,-56(fp)
    45c4:	1009883a 	mov	r4,r2
    45c8:	00052380 	call	5238 <OS_EventTaskRemoveMulti>
             break;
    45cc:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
    45d0:	d0a7c317 	ldw	r2,-24820(gp)
    45d4:	10800c43 	ldbu	r2,49(r2)
    45d8:	10803fcc 	andi	r2,r2,255
    45dc:	10000326 	beq	r2,zero,45ec <OSEventPendMulti+0x514>
    45e0:	108000a0 	cmpeqi	r2,r2,2
    45e4:	1000251e 	bne	r2,zero,467c <OSEventPendMulti+0x5a4>
    45e8:	00002c06 	br	469c <OSEventPendMulti+0x5c4>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
    45ec:	e0bffe17 	ldw	r2,-8(fp)
    45f0:	10800003 	ldbu	r2,0(r2)
    45f4:	10803fcc 	andi	r2,r2,255
    45f8:	10c000c8 	cmpgei	r3,r2,3
    45fc:	1800021e 	bne	r3,zero,4608 <OSEventPendMulti+0x530>
    4600:	00800816 	blt	zero,r2,4624 <OSEventPendMulti+0x54c>
    4604:	00000e06 	br	4640 <OSEventPendMulti+0x568>
    4608:	108000d8 	cmpnei	r2,r2,3
    460c:	10000c1e 	bne	r2,zero,4640 <OSEventPendMulti+0x568>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
    4610:	e0bff017 	ldw	r2,-64(fp)
    4614:	10c00104 	addi	r3,r2,4
    4618:	e0fff015 	stw	r3,-64(fp)
    461c:	10000015 	stw	zero,0(r2)
                      break;
    4620:	00001306 	br	4670 <OSEventPendMulti+0x598>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
    4624:	d0e7c317 	ldw	r3,-24820(gp)
    4628:	e0bff017 	ldw	r2,-64(fp)
    462c:	11000104 	addi	r4,r2,4
    4630:	e13ff015 	stw	r4,-64(fp)
    4634:	18c00917 	ldw	r3,36(r3)
    4638:	10c00015 	stw	r3,0(r2)
                      break;
    463c:	00000c06 	br	4670 <OSEventPendMulti+0x598>
    4640:	e0bffb17 	ldw	r2,-20(fp)
    4644:	e0bff415 	stw	r2,-48(fp)
  NIOS2_WRITE_STATUS (context);
    4648:	e0bff417 	ldw	r2,-48(fp)
    464c:	1001703a 	wrctl	status,r2
}
    4650:	0001883a 	nop

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
    4654:	e0bff117 	ldw	r2,-60(fp)
    4658:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
    465c:	e0800217 	ldw	r2,8(fp)
    4660:	00c00044 	movi	r3,1
    4664:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
    4668:	e0bffd0b 	ldhu	r2,-12(fp)
    466c:	00002306 	br	46fc <OSEventPendMulti+0x624>
             }
            *perr = OS_ERR_NONE;
    4670:	e0800217 	ldw	r2,8(fp)
    4674:	10000005 	stb	zero,0(r2)
             break;
    4678:	00001006 	br	46bc <OSEventPendMulti+0x5e4>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
    467c:	e0bff017 	ldw	r2,-64(fp)
    4680:	10c00104 	addi	r3,r2,4
    4684:	e0fff015 	stw	r3,-64(fp)
    4688:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
    468c:	e0800217 	ldw	r2,8(fp)
    4690:	00c00384 	movi	r3,14
    4694:	10c00005 	stb	r3,0(r2)
             break;
    4698:	00000806 	br	46bc <OSEventPendMulti+0x5e4>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
    469c:	e0bff017 	ldw	r2,-64(fp)
    46a0:	10c00104 	addi	r3,r2,4
    46a4:	e0fff015 	stw	r3,-64(fp)
    46a8:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
    46ac:	e0800217 	ldw	r2,8(fp)
    46b0:	00c00284 	movi	r3,10
    46b4:	10c00005 	stb	r3,0(r2)
             break;
    46b8:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
    46bc:	d0a7c317 	ldw	r2,-24820(gp)
    46c0:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
    46c4:	d0a7c317 	ldw	r2,-24820(gp)
    46c8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
    46cc:	d0a7c317 	ldw	r2,-24820(gp)
    46d0:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    46d4:	d0a7c317 	ldw	r2,-24820(gp)
    46d8:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
    46dc:	d0a7c317 	ldw	r2,-24820(gp)
    46e0:	10000915 	stw	zero,36(r2)
    46e4:	e0bffb17 	ldw	r2,-20(fp)
    46e8:	e0bff315 	stw	r2,-52(fp)
  NIOS2_WRITE_STATUS (context);
    46ec:	e0bff317 	ldw	r2,-52(fp)
    46f0:	1001703a 	wrctl	status,r2
}
    46f4:	0001883a 	nop
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
    46f8:	e0bffd0b 	ldhu	r2,-12(fp)
}
    46fc:	e037883a 	mov	sp,fp
    4700:	dfc00117 	ldw	ra,4(sp)
    4704:	df000017 	ldw	fp,0(sp)
    4708:	dec00204 	addi	sp,sp,8
    470c:	f800283a 	ret

00004710 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
    4710:	defffe04 	addi	sp,sp,-8
    4714:	dfc00115 	stw	ra,4(sp)
    4718:	df000015 	stw	fp,0(sp)
    471c:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
    4720:	000ee6c0 	call	ee6c <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
    4724:	00054800 	call	5480 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
    4728:	00054c80 	call	54c8 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
    472c:	000563c0 	call	563c <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
    4730:	00053a00 	call	53a0 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
    4734:	00075880 	call	7588 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
    4738:	0007eac0 	call	7eac <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
    473c:	000902c0 	call	902c <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
    4740:	00055340 	call	5534 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
    4744:	00055b80 	call	55b8 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
    4748:	000ee8c0 	call	ee8c <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
    474c:	0005eac0 	call	5eac <OSDebugInit>
#endif
}
    4750:	0001883a 	nop
    4754:	e037883a 	mov	sp,fp
    4758:	dfc00117 	ldw	ra,4(sp)
    475c:	df000017 	ldw	fp,0(sp)
    4760:	dec00204 	addi	sp,sp,8
    4764:	f800283a 	ret

00004768 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
    4768:	deffff04 	addi	sp,sp,-4
    476c:	df000015 	stw	fp,0(sp)
    4770:	d839883a 	mov	fp,sp
    if (OSRunning == OS_TRUE) {
    4774:	d0a7c143 	ldbu	r2,-24827(gp)
    4778:	10803fcc 	andi	r2,r2,255
    477c:	10800058 	cmpnei	r2,r2,1
    4780:	1000071e 	bne	r2,zero,47a0 <OSIntEnter+0x38>
        if (OSIntNesting < 255u) {
    4784:	d0a7bf43 	ldbu	r2,-24835(gp)
    4788:	10803fcc 	andi	r2,r2,255
    478c:	10803fe0 	cmpeqi	r2,r2,255
    4790:	1000031e 	bne	r2,zero,47a0 <OSIntEnter+0x38>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
    4794:	d0a7bf43 	ldbu	r2,-24835(gp)
    4798:	10800044 	addi	r2,r2,1
    479c:	d0a7bf45 	stb	r2,-24835(gp)
        }
    }
}
    47a0:	0001883a 	nop
    47a4:	e037883a 	mov	sp,fp
    47a8:	df000017 	ldw	fp,0(sp)
    47ac:	dec00104 	addi	sp,sp,4
    47b0:	f800283a 	ret

000047b4 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
    47b4:	defffb04 	addi	sp,sp,-20
    47b8:	dfc00415 	stw	ra,16(sp)
    47bc:	df000315 	stw	fp,12(sp)
    47c0:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    47c4:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {
    47c8:	d0a7c143 	ldbu	r2,-24827(gp)
    47cc:	10803fcc 	andi	r2,r2,255
    47d0:	10800058 	cmpnei	r2,r2,1
    47d4:	10002e1e 	bne	r2,zero,4890 <OSIntExit+0xdc>
  NIOS2_READ_STATUS (context);
    47d8:	0005303a 	rdctl	r2,status
    47dc:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    47e0:	e0fffe17 	ldw	r3,-8(fp)
    47e4:	00bfff84 	movi	r2,-2
    47e8:	1884703a 	and	r2,r3,r2
    47ec:	1001703a 	wrctl	status,r2
  return context;
    47f0:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
    47f4:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
    47f8:	d0a7bf43 	ldbu	r2,-24835(gp)
    47fc:	10803fcc 	andi	r2,r2,255
    4800:	10000326 	beq	r2,zero,4810 <OSIntExit+0x5c>
            OSIntNesting--;
    4804:	d0a7bf43 	ldbu	r2,-24835(gp)
    4808:	10bfffc4 	addi	r2,r2,-1
    480c:	d0a7bf45 	stb	r2,-24835(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
    4810:	d0a7bf43 	ldbu	r2,-24835(gp)
    4814:	10803fcc 	andi	r2,r2,255
    4818:	1000181e 	bne	r2,zero,487c <OSIntExit+0xc8>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
    481c:	d0a7bf83 	ldbu	r2,-24834(gp)
    4820:	10803fcc 	andi	r2,r2,255
    4824:	1000151e 	bne	r2,zero,487c <OSIntExit+0xc8>
                OS_SchedNew();
    4828:	00058b00 	call	58b0 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
    482c:	d0e7c003 	ldbu	r3,-24832(gp)
    4830:	d0a7bfc3 	ldbu	r2,-24833(gp)
    4834:	18c03fcc 	andi	r3,r3,255
    4838:	10803fcc 	andi	r2,r2,255
    483c:	18800f26 	beq	r3,r2,487c <OSIntExit+0xc8>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
    4840:	d0a7c003 	ldbu	r2,-24832(gp)
    4844:	10803fcc 	andi	r2,r2,255
    4848:	100690ba 	slli	r3,r2,2
    484c:	008000b4 	movhi	r2,2
    4850:	1885883a 	add	r2,r3,r2
    4854:	10a4ad17 	ldw	r2,-27980(r2)
    4858:	d0a7c515 	stw	r2,-24812(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
    485c:	d0a7c517 	ldw	r2,-24812(gp)
    4860:	10c00e17 	ldw	r3,56(r2)
    4864:	18c00044 	addi	r3,r3,1
    4868:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
    486c:	d0a7b917 	ldw	r2,-24860(gp)
    4870:	10800044 	addi	r2,r2,1
    4874:	d0a7b915 	stw	r2,-24860(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
    4878:	000eba80 	call	eba8 <OSCtxSw>
    487c:	e0bfff17 	ldw	r2,-4(fp)
    4880:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
    4884:	e0bffd17 	ldw	r2,-12(fp)
    4888:	1001703a 	wrctl	status,r2
}
    488c:	0001883a 	nop
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
    4890:	0001883a 	nop
    4894:	e037883a 	mov	sp,fp
    4898:	dfc00117 	ldw	ra,4(sp)
    489c:	df000017 	ldw	fp,0(sp)
    48a0:	dec00204 	addi	sp,sp,8
    48a4:	f800283a 	ret

000048a8 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
    48a8:	defffc04 	addi	sp,sp,-16
    48ac:	df000315 	stw	fp,12(sp)
    48b0:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    48b4:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
    48b8:	d0a7c143 	ldbu	r2,-24827(gp)
    48bc:	10803fcc 	andi	r2,r2,255
    48c0:	10800058 	cmpnei	r2,r2,1
    48c4:	1000171e 	bne	r2,zero,4924 <OSSchedLock+0x7c>
  NIOS2_READ_STATUS (context);
    48c8:	0005303a 	rdctl	r2,status
    48cc:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    48d0:	e0fffe17 	ldw	r3,-8(fp)
    48d4:	00bfff84 	movi	r2,-2
    48d8:	1884703a 	and	r2,r3,r2
    48dc:	1001703a 	wrctl	status,r2
  return context;
    48e0:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
    48e4:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
    48e8:	d0a7bf43 	ldbu	r2,-24835(gp)
    48ec:	10803fcc 	andi	r2,r2,255
    48f0:	1000071e 	bne	r2,zero,4910 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
    48f4:	d0a7bf83 	ldbu	r2,-24834(gp)
    48f8:	10803fcc 	andi	r2,r2,255
    48fc:	10803fe0 	cmpeqi	r2,r2,255
    4900:	1000031e 	bne	r2,zero,4910 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
    4904:	d0a7bf83 	ldbu	r2,-24834(gp)
    4908:	10800044 	addi	r2,r2,1
    490c:	d0a7bf85 	stb	r2,-24834(gp)
    4910:	e0bfff17 	ldw	r2,-4(fp)
    4914:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
    4918:	e0bffd17 	ldw	r2,-12(fp)
    491c:	1001703a 	wrctl	status,r2
}
    4920:	0001883a 	nop
            }
        }
        OS_EXIT_CRITICAL();
    }
}
    4924:	0001883a 	nop
    4928:	e037883a 	mov	sp,fp
    492c:	df000017 	ldw	fp,0(sp)
    4930:	dec00104 	addi	sp,sp,4
    4934:	f800283a 	ret

00004938 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
    4938:	defff804 	addi	sp,sp,-32
    493c:	dfc00715 	stw	ra,28(sp)
    4940:	df000615 	stw	fp,24(sp)
    4944:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    4948:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
    494c:	d0a7c143 	ldbu	r2,-24827(gp)
    4950:	10803fcc 	andi	r2,r2,255
    4954:	10800058 	cmpnei	r2,r2,1
    4958:	10002a1e 	bne	r2,zero,4a04 <OSSchedUnlock+0xcc>
  NIOS2_READ_STATUS (context);
    495c:	0005303a 	rdctl	r2,status
    4960:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4964:	e0fffe17 	ldw	r3,-8(fp)
    4968:	00bfff84 	movi	r2,-2
    496c:	1884703a 	and	r2,r3,r2
    4970:	1001703a 	wrctl	status,r2
  return context;
    4974:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
    4978:	e0bfff15 	stw	r2,-4(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
    497c:	d0a7bf83 	ldbu	r2,-24834(gp)
    4980:	10803fcc 	andi	r2,r2,255
    4984:	10001a26 	beq	r2,zero,49f0 <OSSchedUnlock+0xb8>
            OSLockNesting--;                               /* Decrement lock nesting level             */
    4988:	d0a7bf83 	ldbu	r2,-24834(gp)
    498c:	10bfffc4 	addi	r2,r2,-1
    4990:	d0a7bf85 	stb	r2,-24834(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
    4994:	d0a7bf83 	ldbu	r2,-24834(gp)
    4998:	10803fcc 	andi	r2,r2,255
    499c:	10000f1e 	bne	r2,zero,49dc <OSSchedUnlock+0xa4>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
    49a0:	d0a7bf43 	ldbu	r2,-24835(gp)
    49a4:	10803fcc 	andi	r2,r2,255
    49a8:	1000071e 	bne	r2,zero,49c8 <OSSchedUnlock+0x90>
    49ac:	e0bfff17 	ldw	r2,-4(fp)
    49b0:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
    49b4:	e0bffd17 	ldw	r2,-12(fp)
    49b8:	1001703a 	wrctl	status,r2
}
    49bc:	0001883a 	nop
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
    49c0:	00057e40 	call	57e4 <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
    49c4:	00000f06 	br	4a04 <OSSchedUnlock+0xcc>
    49c8:	e0bfff17 	ldw	r2,-4(fp)
    49cc:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    49d0:	e0bffc17 	ldw	r2,-16(fp)
    49d4:	1001703a 	wrctl	status,r2
}
    49d8:	00000a06 	br	4a04 <OSSchedUnlock+0xcc>
    49dc:	e0bfff17 	ldw	r2,-4(fp)
    49e0:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    49e4:	e0bffb17 	ldw	r2,-20(fp)
    49e8:	1001703a 	wrctl	status,r2
}
    49ec:	00000506 	br	4a04 <OSSchedUnlock+0xcc>
    49f0:	e0bfff17 	ldw	r2,-4(fp)
    49f4:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
    49f8:	e0bffa17 	ldw	r2,-24(fp)
    49fc:	1001703a 	wrctl	status,r2
}
    4a00:	0001883a 	nop
    4a04:	0001883a 	nop
    4a08:	e037883a 	mov	sp,fp
    4a0c:	dfc00117 	ldw	ra,4(sp)
    4a10:	df000017 	ldw	fp,0(sp)
    4a14:	dec00204 	addi	sp,sp,8
    4a18:	f800283a 	ret

00004a1c <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
    4a1c:	defffe04 	addi	sp,sp,-8
    4a20:	dfc00115 	stw	ra,4(sp)
    4a24:	df000015 	stw	fp,0(sp)
    4a28:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
    4a2c:	d0a7c143 	ldbu	r2,-24827(gp)
    4a30:	10803fcc 	andi	r2,r2,255
    4a34:	10000d1e 	bne	r2,zero,4a6c <OSStart+0x50>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
    4a38:	00058b00 	call	58b0 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
    4a3c:	d0a7c003 	ldbu	r2,-24832(gp)
    4a40:	d0a7bfc5 	stb	r2,-24833(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
    4a44:	d0a7c003 	ldbu	r2,-24832(gp)
    4a48:	10803fcc 	andi	r2,r2,255
    4a4c:	100690ba 	slli	r3,r2,2
    4a50:	008000b4 	movhi	r2,2
    4a54:	1885883a 	add	r2,r3,r2
    4a58:	10a4ad17 	ldw	r2,-27980(r2)
    4a5c:	d0a7c515 	stw	r2,-24812(gp)
        OSTCBCur      = OSTCBHighRdy;
    4a60:	d0a7c517 	ldw	r2,-24812(gp)
    4a64:	d0a7c315 	stw	r2,-24820(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
    4a68:	000ec340 	call	ec34 <OSStartHighRdy>
    }
}
    4a6c:	0001883a 	nop
    4a70:	e037883a 	mov	sp,fp
    4a74:	dfc00117 	ldw	ra,4(sp)
    4a78:	df000017 	ldw	fp,0(sp)
    4a7c:	dec00204 	addi	sp,sp,8
    4a80:	f800283a 	ret

00004a84 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
    4a84:	defff904 	addi	sp,sp,-28
    4a88:	dfc00615 	stw	ra,24(sp)
    4a8c:	df000515 	stw	fp,20(sp)
    4a90:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    4a94:	e03fff15 	stw	zero,-4(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
    4a98:	01000084 	movi	r4,2
    4a9c:	000b2bc0 	call	b2bc <OSTimeDly>
  NIOS2_READ_STATUS (context);
    4aa0:	0005303a 	rdctl	r2,status
    4aa4:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4aa8:	e0fffb17 	ldw	r3,-20(fp)
    4aac:	00bfff84 	movi	r2,-2
    4ab0:	1884703a 	and	r2,r3,r2
    4ab4:	1001703a 	wrctl	status,r2
  return context;
    4ab8:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
    4abc:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
    4ac0:	d027c215 	stw	zero,-24824(gp)
    4ac4:	e0bfff17 	ldw	r2,-4(fp)
    4ac8:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    4acc:	e0bffc17 	ldw	r2,-16(fp)
    4ad0:	1001703a 	wrctl	status,r2
}
    4ad4:	0001883a 	nop
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
    4ad8:	0009883a 	mov	r4,zero
    4adc:	000b2bc0 	call	b2bc <OSTimeDly>
  NIOS2_READ_STATUS (context);
    4ae0:	0005303a 	rdctl	r2,status
    4ae4:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4ae8:	e0fffd17 	ldw	r3,-12(fp)
    4aec:	00bfff84 	movi	r2,-2
    4af0:	1884703a 	and	r2,r3,r2
    4af4:	1001703a 	wrctl	status,r2
  return context;
    4af8:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
    4afc:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
    4b00:	d0a7c217 	ldw	r2,-24824(gp)
    4b04:	d0a7bd15 	stw	r2,-24844(gp)
    OSStatRdy    = OS_TRUE;
    4b08:	00800044 	movi	r2,1
    4b0c:	d0a7bf05 	stb	r2,-24836(gp)
    4b10:	e0bfff17 	ldw	r2,-4(fp)
    4b14:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
    4b18:	e0bffe17 	ldw	r2,-8(fp)
    4b1c:	1001703a 	wrctl	status,r2
}
    4b20:	0001883a 	nop
    OS_EXIT_CRITICAL();
}
    4b24:	0001883a 	nop
    4b28:	e037883a 	mov	sp,fp
    4b2c:	dfc00117 	ldw	ra,4(sp)
    4b30:	df000017 	ldw	fp,0(sp)
    4b34:	dec00204 	addi	sp,sp,8
    4b38:	f800283a 	ret

00004b3c <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
    4b3c:	defff704 	addi	sp,sp,-36
    4b40:	dfc00815 	stw	ra,32(sp)
    4b44:	df000715 	stw	fp,28(sp)
    4b48:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    4b4c:	e03ffd15 	stw	zero,-12(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
    4b50:	000ee4c0 	call	ee4c <OSTimeTickHook>
  NIOS2_READ_STATUS (context);
    4b54:	0005303a 	rdctl	r2,status
    4b58:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4b5c:	e0fffb17 	ldw	r3,-20(fp)
    4b60:	00bfff84 	movi	r2,-2
    4b64:	1884703a 	and	r2,r3,r2
    4b68:	1001703a 	wrctl	status,r2
  return context;
    4b6c:	e0bffb17 	ldw	r2,-20(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
    4b70:	e0bffd15 	stw	r2,-12(fp)
    OSTime++;
    4b74:	d0a7ca17 	ldw	r2,-24792(gp)
    4b78:	10800044 	addi	r2,r2,1
    4b7c:	d0a7ca15 	stw	r2,-24792(gp)
    4b80:	e0bffd17 	ldw	r2,-12(fp)
    4b84:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    4b88:	e0bffc17 	ldw	r2,-16(fp)
    4b8c:	1001703a 	wrctl	status,r2
}
    4b90:	0001883a 	nop
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
    4b94:	d0a7c143 	ldbu	r2,-24827(gp)
    4b98:	10803fcc 	andi	r2,r2,255
    4b9c:	10800058 	cmpnei	r2,r2,1
    4ba0:	10006e1e 	bne	r2,zero,4d5c <OSTimeTick+0x220>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
    4ba4:	d0a7c703 	ldbu	r2,-24804(gp)
    4ba8:	10803fcc 	andi	r2,r2,255
    4bac:	10c000a0 	cmpeqi	r3,r2,2
    4bb0:	18000b1e 	bne	r3,zero,4be0 <OSTimeTick+0xa4>
    4bb4:	10c000c8 	cmpgei	r3,r2,3
    4bb8:	18000e1e 	bne	r3,zero,4bf4 <OSTimeTick+0xb8>
    4bbc:	10000326 	beq	r2,zero,4bcc <OSTimeTick+0x90>
    4bc0:	10800060 	cmpeqi	r2,r2,1
    4bc4:	1000041e 	bne	r2,zero,4bd8 <OSTimeTick+0x9c>
    4bc8:	00000a06 	br	4bf4 <OSTimeTick+0xb8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
    4bcc:	00800044 	movi	r2,1
    4bd0:	e0bffec5 	stb	r2,-5(fp)
                 break;
    4bd4:	00000b06 	br	4c04 <OSTimeTick+0xc8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
    4bd8:	e03ffec5 	stb	zero,-5(fp)
                 break;
    4bdc:	00000906 	br	4c04 <OSTimeTick+0xc8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
    4be0:	00800044 	movi	r2,1
    4be4:	e0bffec5 	stb	r2,-5(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
    4be8:	00800044 	movi	r2,1
    4bec:	d0a7c705 	stb	r2,-24804(gp)
                 break;
    4bf0:	00000406 	br	4c04 <OSTimeTick+0xc8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
    4bf4:	00800044 	movi	r2,1
    4bf8:	e0bffec5 	stb	r2,-5(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
    4bfc:	d027c705 	stb	zero,-24804(gp)
                 break;
    4c00:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
    4c04:	e0bffec3 	ldbu	r2,-5(fp)
    4c08:	10005326 	beq	r2,zero,4d58 <OSTimeTick+0x21c>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
    4c0c:	d0a7c617 	ldw	r2,-24808(gp)
    4c10:	e0bfff15 	stw	r2,-4(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
    4c14:	00004a06 	br	4d40 <OSTimeTick+0x204>
  NIOS2_READ_STATUS (context);
    4c18:	0005303a 	rdctl	r2,status
    4c1c:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4c20:	e0fffa17 	ldw	r3,-24(fp)
    4c24:	00bfff84 	movi	r2,-2
    4c28:	1884703a 	and	r2,r3,r2
    4c2c:	1001703a 	wrctl	status,r2
  return context;
    4c30:	e0bffa17 	ldw	r2,-24(fp)
            OS_ENTER_CRITICAL();
    4c34:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
    4c38:	e0bfff17 	ldw	r2,-4(fp)
    4c3c:	10800b8b 	ldhu	r2,46(r2)
    4c40:	10bfffcc 	andi	r2,r2,65535
    4c44:	10003626 	beq	r2,zero,4d20 <OSTimeTick+0x1e4>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
    4c48:	e0bfff17 	ldw	r2,-4(fp)
    4c4c:	10800b8b 	ldhu	r2,46(r2)
    4c50:	10bfffc4 	addi	r2,r2,-1
    4c54:	1007883a 	mov	r3,r2
    4c58:	e0bfff17 	ldw	r2,-4(fp)
    4c5c:	10c00b8d 	sth	r3,46(r2)
    4c60:	e0bfff17 	ldw	r2,-4(fp)
    4c64:	10800b8b 	ldhu	r2,46(r2)
    4c68:	10bfffcc 	andi	r2,r2,65535
    4c6c:	10002c1e 	bne	r2,zero,4d20 <OSTimeTick+0x1e4>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
    4c70:	e0bfff17 	ldw	r2,-4(fp)
    4c74:	10800c03 	ldbu	r2,48(r2)
    4c78:	10803fcc 	andi	r2,r2,255
    4c7c:	10800dcc 	andi	r2,r2,55
    4c80:	10000b26 	beq	r2,zero,4cb0 <OSTimeTick+0x174>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
    4c84:	e0bfff17 	ldw	r2,-4(fp)
    4c88:	10c00c03 	ldbu	r3,48(r2)
    4c8c:	00bff204 	movi	r2,-56
    4c90:	1884703a 	and	r2,r3,r2
    4c94:	1007883a 	mov	r3,r2
    4c98:	e0bfff17 	ldw	r2,-4(fp)
    4c9c:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
    4ca0:	e0bfff17 	ldw	r2,-4(fp)
    4ca4:	00c00044 	movi	r3,1
    4ca8:	10c00c45 	stb	r3,49(r2)
    4cac:	00000206 	br	4cb8 <OSTimeTick+0x17c>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
    4cb0:	e0bfff17 	ldw	r2,-4(fp)
    4cb4:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
    4cb8:	e0bfff17 	ldw	r2,-4(fp)
    4cbc:	10800c03 	ldbu	r2,48(r2)
    4cc0:	10803fcc 	andi	r2,r2,255
    4cc4:	1080020c 	andi	r2,r2,8
    4cc8:	1000151e 	bne	r2,zero,4d20 <OSTimeTick+0x1e4>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
    4ccc:	e0bfff17 	ldw	r2,-4(fp)
    4cd0:	10c00d83 	ldbu	r3,54(r2)
    4cd4:	d0a7c043 	ldbu	r2,-24831(gp)
    4cd8:	1884b03a 	or	r2,r3,r2
    4cdc:	d0a7c045 	stb	r2,-24831(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    4ce0:	e0bfff17 	ldw	r2,-4(fp)
    4ce4:	10800d03 	ldbu	r2,52(r2)
    4ce8:	10c03fcc 	andi	r3,r2,255
    4cec:	d0a7c084 	addi	r2,gp,-24830
    4cf0:	1885883a 	add	r2,r3,r2
    4cf4:	11000003 	ldbu	r4,0(r2)
    4cf8:	e0bfff17 	ldw	r2,-4(fp)
    4cfc:	10800d43 	ldbu	r2,53(r2)
    4d00:	e0ffff17 	ldw	r3,-4(fp)
    4d04:	18c00d03 	ldbu	r3,52(r3)
    4d08:	18c03fcc 	andi	r3,r3,255
    4d0c:	2084b03a 	or	r2,r4,r2
    4d10:	1009883a 	mov	r4,r2
    4d14:	d0a7c084 	addi	r2,gp,-24830
    4d18:	1885883a 	add	r2,r3,r2
    4d1c:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
    4d20:	e0bfff17 	ldw	r2,-4(fp)
    4d24:	10800517 	ldw	r2,20(r2)
    4d28:	e0bfff15 	stw	r2,-4(fp)
    4d2c:	e0bffd17 	ldw	r2,-12(fp)
    4d30:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
    4d34:	e0bff917 	ldw	r2,-28(fp)
    4d38:	1001703a 	wrctl	status,r2
}
    4d3c:	0001883a 	nop
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
    4d40:	e0bfff17 	ldw	r2,-4(fp)
    4d44:	10800c83 	ldbu	r2,50(r2)
    4d48:	10803fcc 	andi	r2,r2,255
    4d4c:	10800518 	cmpnei	r2,r2,20
    4d50:	103fb11e 	bne	r2,zero,4c18 <OSTimeTick+0xdc>
    4d54:	00000106 	br	4d5c <OSTimeTick+0x220>
            return;
    4d58:	0001883a 	nop
            OS_EXIT_CRITICAL();
        }
    }
}
    4d5c:	e037883a 	mov	sp,fp
    4d60:	dfc00117 	ldw	ra,4(sp)
    4d64:	df000017 	ldw	fp,0(sp)
    4d68:	dec00204 	addi	sp,sp,8
    4d6c:	f800283a 	ret

00004d70 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
    4d70:	deffff04 	addi	sp,sp,-4
    4d74:	df000015 	stw	fp,0(sp)
    4d78:	d839883a 	mov	fp,sp
    return (OS_VERSION);
    4d7c:	00804784 	movi	r2,286
}
    4d80:	e037883a 	mov	sp,fp
    4d84:	df000017 	ldw	fp,0(sp)
    4d88:	dec00104 	addi	sp,sp,4
    4d8c:	f800283a 	ret

00004d90 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
    4d90:	deffff04 	addi	sp,sp,-4
    4d94:	df000015 	stw	fp,0(sp)
    4d98:	d839883a 	mov	fp,sp
}
    4d9c:	0001883a 	nop
    4da0:	e037883a 	mov	sp,fp
    4da4:	df000017 	ldw	fp,0(sp)
    4da8:	dec00104 	addi	sp,sp,4
    4dac:	f800283a 	ret

00004db0 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
    4db0:	defff804 	addi	sp,sp,-32
    4db4:	dfc00715 	stw	ra,28(sp)
    4db8:	df000615 	stw	fp,24(sp)
    4dbc:	df000604 	addi	fp,sp,24
    4dc0:	e13ffd15 	stw	r4,-12(fp)
    4dc4:	e17ffc15 	stw	r5,-16(fp)
    4dc8:	3005883a 	mov	r2,r6
    4dcc:	3807883a 	mov	r3,r7
    4dd0:	e0bffb05 	stb	r2,-20(fp)
    4dd4:	1805883a 	mov	r2,r3
    4dd8:	e0bffa05 	stb	r2,-24(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
    4ddc:	e0bffd17 	ldw	r2,-12(fp)
    4de0:	10800283 	ldbu	r2,10(r2)
    4de4:	10c03fcc 	andi	r3,r2,255
    4de8:	00800074 	movhi	r2,1
    4dec:	1885883a 	add	r2,r3,r2
    4df0:	10bd3603 	ldbu	r2,-2856(r2)
    4df4:	e0bfffc5 	stb	r2,-1(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
    4df8:	e0bfffc3 	ldbu	r2,-1(fp)
    4dfc:	e0fffd17 	ldw	r3,-12(fp)
    4e00:	1885883a 	add	r2,r3,r2
    4e04:	108002c3 	ldbu	r2,11(r2)
    4e08:	10c03fcc 	andi	r3,r2,255
    4e0c:	00800074 	movhi	r2,1
    4e10:	1885883a 	add	r2,r3,r2
    4e14:	10bd3603 	ldbu	r2,-2856(r2)
    4e18:	e0bfff85 	stb	r2,-2(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
    4e1c:	e0bfffc3 	ldbu	r2,-1(fp)
    4e20:	100490fa 	slli	r2,r2,3
    4e24:	1007883a 	mov	r3,r2
    4e28:	e0bfff83 	ldbu	r2,-2(fp)
    4e2c:	10c5883a 	add	r2,r2,r3
    4e30:	e0bfff45 	stb	r2,-3(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
    4e34:	e0bfff43 	ldbu	r2,-3(fp)
    4e38:	100690ba 	slli	r3,r2,2
    4e3c:	008000b4 	movhi	r2,2
    4e40:	1885883a 	add	r2,r3,r2
    4e44:	10a4ad17 	ldw	r2,-27980(r2)
    4e48:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
    4e4c:	e0bffe17 	ldw	r2,-8(fp)
    4e50:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
    4e54:	e0bffe17 	ldw	r2,-8(fp)
    4e58:	e0fffc17 	ldw	r3,-16(fp)
    4e5c:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
    4e60:	e0bffe17 	ldw	r2,-8(fp)
    4e64:	10800c03 	ldbu	r2,48(r2)
    4e68:	1007883a 	mov	r3,r2
    4e6c:	e0bffb03 	ldbu	r2,-20(fp)
    4e70:	0084303a 	nor	r2,zero,r2
    4e74:	1884703a 	and	r2,r3,r2
    4e78:	1007883a 	mov	r3,r2
    4e7c:	e0bffe17 	ldw	r2,-8(fp)
    4e80:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
    4e84:	e0bffe17 	ldw	r2,-8(fp)
    4e88:	e0fffa03 	ldbu	r3,-24(fp)
    4e8c:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
    4e90:	e0bffe17 	ldw	r2,-8(fp)
    4e94:	10800c03 	ldbu	r2,48(r2)
    4e98:	10803fcc 	andi	r2,r2,255
    4e9c:	1080020c 	andi	r2,r2,8
    4ea0:	1000111e 	bne	r2,zero,4ee8 <OS_EventTaskRdy+0x138>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
    4ea4:	e0bffe17 	ldw	r2,-8(fp)
    4ea8:	10c00d83 	ldbu	r3,54(r2)
    4eac:	d0a7c043 	ldbu	r2,-24831(gp)
    4eb0:	1884b03a 	or	r2,r3,r2
    4eb4:	d0a7c045 	stb	r2,-24831(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
    4eb8:	e0ffffc3 	ldbu	r3,-1(fp)
    4ebc:	d0a7c084 	addi	r2,gp,-24830
    4ec0:	1885883a 	add	r2,r3,r2
    4ec4:	11000003 	ldbu	r4,0(r2)
    4ec8:	e0bffe17 	ldw	r2,-8(fp)
    4ecc:	10800d43 	ldbu	r2,53(r2)
    4ed0:	e0ffffc3 	ldbu	r3,-1(fp)
    4ed4:	2084b03a 	or	r2,r4,r2
    4ed8:	1009883a 	mov	r4,r2
    4edc:	d0a7c084 	addi	r2,gp,-24830
    4ee0:	1885883a 	add	r2,r3,r2
    4ee4:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
    4ee8:	e17ffd17 	ldw	r5,-12(fp)
    4eec:	e13ffe17 	ldw	r4,-8(fp)
    4ef0:	00051880 	call	5188 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
    4ef4:	e0bffe17 	ldw	r2,-8(fp)
    4ef8:	10800817 	ldw	r2,32(r2)
    4efc:	10000826 	beq	r2,zero,4f20 <OS_EventTaskRdy+0x170>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
    4f00:	e0bffe17 	ldw	r2,-8(fp)
    4f04:	10800817 	ldw	r2,32(r2)
    4f08:	100b883a 	mov	r5,r2
    4f0c:	e13ffe17 	ldw	r4,-8(fp)
    4f10:	00052380 	call	5238 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
    4f14:	e0bffe17 	ldw	r2,-8(fp)
    4f18:	e0fffd17 	ldw	r3,-12(fp)
    4f1c:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
    4f20:	e0bfff43 	ldbu	r2,-3(fp)
}
    4f24:	e037883a 	mov	sp,fp
    4f28:	dfc00117 	ldw	ra,4(sp)
    4f2c:	df000017 	ldw	fp,0(sp)
    4f30:	dec00204 	addi	sp,sp,8
    4f34:	f800283a 	ret

00004f38 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
    4f38:	defffd04 	addi	sp,sp,-12
    4f3c:	df000215 	stw	fp,8(sp)
    4f40:	df000204 	addi	fp,sp,8
    4f44:	e13ffe15 	stw	r4,-8(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
    4f48:	d0a7c317 	ldw	r2,-24820(gp)
    4f4c:	e0fffe17 	ldw	r3,-8(fp)
    4f50:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
    4f54:	d0a7c317 	ldw	r2,-24820(gp)
    4f58:	10800d03 	ldbu	r2,52(r2)
    4f5c:	10803fcc 	andi	r2,r2,255
    4f60:	e0fffe17 	ldw	r3,-8(fp)
    4f64:	1885883a 	add	r2,r3,r2
    4f68:	110002c3 	ldbu	r4,11(r2)
    4f6c:	d0a7c317 	ldw	r2,-24820(gp)
    4f70:	10c00d43 	ldbu	r3,53(r2)
    4f74:	d0a7c317 	ldw	r2,-24820(gp)
    4f78:	10800d03 	ldbu	r2,52(r2)
    4f7c:	10803fcc 	andi	r2,r2,255
    4f80:	20c6b03a 	or	r3,r4,r3
    4f84:	1809883a 	mov	r4,r3
    4f88:	e0fffe17 	ldw	r3,-8(fp)
    4f8c:	1885883a 	add	r2,r3,r2
    4f90:	110002c5 	stb	r4,11(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
    4f94:	e0bffe17 	ldw	r2,-8(fp)
    4f98:	10c00283 	ldbu	r3,10(r2)
    4f9c:	d0a7c317 	ldw	r2,-24820(gp)
    4fa0:	10800d83 	ldbu	r2,54(r2)
    4fa4:	1884b03a 	or	r2,r3,r2
    4fa8:	1007883a 	mov	r3,r2
    4fac:	e0bffe17 	ldw	r2,-8(fp)
    4fb0:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    4fb4:	d0a7c317 	ldw	r2,-24820(gp)
    4fb8:	10800d03 	ldbu	r2,52(r2)
    4fbc:	e0bfffc5 	stb	r2,-1(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
    4fc0:	e0ffffc3 	ldbu	r3,-1(fp)
    4fc4:	d0a7c084 	addi	r2,gp,-24830
    4fc8:	1885883a 	add	r2,r3,r2
    4fcc:	10800003 	ldbu	r2,0(r2)
    4fd0:	1007883a 	mov	r3,r2
    4fd4:	d0a7c317 	ldw	r2,-24820(gp)
    4fd8:	10800d43 	ldbu	r2,53(r2)
    4fdc:	0084303a 	nor	r2,zero,r2
    4fe0:	1884703a 	and	r2,r3,r2
    4fe4:	e0ffffc3 	ldbu	r3,-1(fp)
    4fe8:	1009883a 	mov	r4,r2
    4fec:	d0a7c084 	addi	r2,gp,-24830
    4ff0:	1885883a 	add	r2,r3,r2
    4ff4:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
    4ff8:	e0ffffc3 	ldbu	r3,-1(fp)
    4ffc:	d0a7c084 	addi	r2,gp,-24830
    5000:	1885883a 	add	r2,r3,r2
    5004:	10800003 	ldbu	r2,0(r2)
    5008:	10803fcc 	andi	r2,r2,255
    500c:	1000071e 	bne	r2,zero,502c <OS_EventTaskWait+0xf4>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
    5010:	d0a7c317 	ldw	r2,-24820(gp)
    5014:	10800d83 	ldbu	r2,54(r2)
    5018:	0084303a 	nor	r2,zero,r2
    501c:	1007883a 	mov	r3,r2
    5020:	d0a7c043 	ldbu	r2,-24831(gp)
    5024:	1884703a 	and	r2,r3,r2
    5028:	d0a7c045 	stb	r2,-24831(gp)
    }
}
    502c:	0001883a 	nop
    5030:	e037883a 	mov	sp,fp
    5034:	df000017 	ldw	fp,0(sp)
    5038:	dec00104 	addi	sp,sp,4
    503c:	f800283a 	ret

00005040 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
    5040:	defffb04 	addi	sp,sp,-20
    5044:	df000415 	stw	fp,16(sp)
    5048:	df000404 	addi	fp,sp,16
    504c:	e13ffc15 	stw	r4,-16(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    5050:	d0a7c317 	ldw	r2,-24820(gp)
    5054:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
    5058:	d0a7c317 	ldw	r2,-24820(gp)
    505c:	e0fffc17 	ldw	r3,-16(fp)
    5060:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
    5064:	e0bffc17 	ldw	r2,-16(fp)
    5068:	e0bfff15 	stw	r2,-4(fp)
    pevent  = *pevents;
    506c:	e0bfff17 	ldw	r2,-4(fp)
    5070:	10800017 	ldw	r2,0(r2)
    5074:	e0bffe15 	stw	r2,-8(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
    5078:	00001e06 	br	50f4 <OS_EventTaskWaitMulti+0xb4>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
    507c:	d0a7c317 	ldw	r2,-24820(gp)
    5080:	10800d03 	ldbu	r2,52(r2)
    5084:	10803fcc 	andi	r2,r2,255
    5088:	e0fffe17 	ldw	r3,-8(fp)
    508c:	1885883a 	add	r2,r3,r2
    5090:	110002c3 	ldbu	r4,11(r2)
    5094:	d0a7c317 	ldw	r2,-24820(gp)
    5098:	10c00d43 	ldbu	r3,53(r2)
    509c:	d0a7c317 	ldw	r2,-24820(gp)
    50a0:	10800d03 	ldbu	r2,52(r2)
    50a4:	10803fcc 	andi	r2,r2,255
    50a8:	20c6b03a 	or	r3,r4,r3
    50ac:	1809883a 	mov	r4,r3
    50b0:	e0fffe17 	ldw	r3,-8(fp)
    50b4:	1885883a 	add	r2,r3,r2
    50b8:	110002c5 	stb	r4,11(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
    50bc:	e0bffe17 	ldw	r2,-8(fp)
    50c0:	10c00283 	ldbu	r3,10(r2)
    50c4:	d0a7c317 	ldw	r2,-24820(gp)
    50c8:	10800d83 	ldbu	r2,54(r2)
    50cc:	1884b03a 	or	r2,r3,r2
    50d0:	1007883a 	mov	r3,r2
    50d4:	e0bffe17 	ldw	r2,-8(fp)
    50d8:	10c00285 	stb	r3,10(r2)
        pevents++;
    50dc:	e0bfff17 	ldw	r2,-4(fp)
    50e0:	10800104 	addi	r2,r2,4
    50e4:	e0bfff15 	stw	r2,-4(fp)
        pevent = *pevents;
    50e8:	e0bfff17 	ldw	r2,-4(fp)
    50ec:	10800017 	ldw	r2,0(r2)
    50f0:	e0bffe15 	stw	r2,-8(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
    50f4:	e0bffe17 	ldw	r2,-8(fp)
    50f8:	103fe01e 	bne	r2,zero,507c <OS_EventTaskWaitMulti+0x3c>
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    50fc:	d0a7c317 	ldw	r2,-24820(gp)
    5100:	10800d03 	ldbu	r2,52(r2)
    5104:	e0bffdc5 	stb	r2,-9(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
    5108:	e0fffdc3 	ldbu	r3,-9(fp)
    510c:	d0a7c084 	addi	r2,gp,-24830
    5110:	1885883a 	add	r2,r3,r2
    5114:	10800003 	ldbu	r2,0(r2)
    5118:	1007883a 	mov	r3,r2
    511c:	d0a7c317 	ldw	r2,-24820(gp)
    5120:	10800d43 	ldbu	r2,53(r2)
    5124:	0084303a 	nor	r2,zero,r2
    5128:	1884703a 	and	r2,r3,r2
    512c:	e0fffdc3 	ldbu	r3,-9(fp)
    5130:	1009883a 	mov	r4,r2
    5134:	d0a7c084 	addi	r2,gp,-24830
    5138:	1885883a 	add	r2,r3,r2
    513c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
    5140:	e0fffdc3 	ldbu	r3,-9(fp)
    5144:	d0a7c084 	addi	r2,gp,-24830
    5148:	1885883a 	add	r2,r3,r2
    514c:	10800003 	ldbu	r2,0(r2)
    5150:	10803fcc 	andi	r2,r2,255
    5154:	1000071e 	bne	r2,zero,5174 <OS_EventTaskWaitMulti+0x134>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
    5158:	d0a7c317 	ldw	r2,-24820(gp)
    515c:	10800d83 	ldbu	r2,54(r2)
    5160:	0084303a 	nor	r2,zero,r2
    5164:	1007883a 	mov	r3,r2
    5168:	d0a7c043 	ldbu	r2,-24831(gp)
    516c:	1884703a 	and	r2,r3,r2
    5170:	d0a7c045 	stb	r2,-24831(gp)
    }
}
    5174:	0001883a 	nop
    5178:	e037883a 	mov	sp,fp
    517c:	df000017 	ldw	fp,0(sp)
    5180:	dec00104 	addi	sp,sp,4
    5184:	f800283a 	ret

00005188 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
    5188:	defffc04 	addi	sp,sp,-16
    518c:	df000315 	stw	fp,12(sp)
    5190:	df000304 	addi	fp,sp,12
    5194:	e13ffe15 	stw	r4,-8(fp)
    5198:	e17ffd15 	stw	r5,-12(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
    519c:	e0bffe17 	ldw	r2,-8(fp)
    51a0:	10800d03 	ldbu	r2,52(r2)
    51a4:	e0bfffc5 	stb	r2,-1(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
    51a8:	e0bfffc3 	ldbu	r2,-1(fp)
    51ac:	e0fffd17 	ldw	r3,-12(fp)
    51b0:	1885883a 	add	r2,r3,r2
    51b4:	108002c3 	ldbu	r2,11(r2)
    51b8:	1007883a 	mov	r3,r2
    51bc:	e0bffe17 	ldw	r2,-8(fp)
    51c0:	10800d43 	ldbu	r2,53(r2)
    51c4:	0084303a 	nor	r2,zero,r2
    51c8:	1884703a 	and	r2,r3,r2
    51cc:	1007883a 	mov	r3,r2
    51d0:	e0bfffc3 	ldbu	r2,-1(fp)
    51d4:	1809883a 	mov	r4,r3
    51d8:	e0fffd17 	ldw	r3,-12(fp)
    51dc:	1885883a 	add	r2,r3,r2
    51e0:	110002c5 	stb	r4,11(r2)
    if (pevent->OSEventTbl[y] == 0) {
    51e4:	e0bfffc3 	ldbu	r2,-1(fp)
    51e8:	e0fffd17 	ldw	r3,-12(fp)
    51ec:	1885883a 	add	r2,r3,r2
    51f0:	108002c3 	ldbu	r2,11(r2)
    51f4:	10803fcc 	andi	r2,r2,255
    51f8:	10000a1e 	bne	r2,zero,5224 <OS_EventTaskRemove+0x9c>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
    51fc:	e0bffd17 	ldw	r2,-12(fp)
    5200:	10800283 	ldbu	r2,10(r2)
    5204:	1007883a 	mov	r3,r2
    5208:	e0bffe17 	ldw	r2,-8(fp)
    520c:	10800d83 	ldbu	r2,54(r2)
    5210:	0084303a 	nor	r2,zero,r2
    5214:	1884703a 	and	r2,r3,r2
    5218:	1007883a 	mov	r3,r2
    521c:	e0bffd17 	ldw	r2,-12(fp)
    5220:	10c00285 	stb	r3,10(r2)
    }
}
    5224:	0001883a 	nop
    5228:	e037883a 	mov	sp,fp
    522c:	df000017 	ldw	fp,0(sp)
    5230:	dec00104 	addi	sp,sp,4
    5234:	f800283a 	ret

00005238 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
    5238:	defffa04 	addi	sp,sp,-24
    523c:	df000515 	stw	fp,20(sp)
    5240:	df000504 	addi	fp,sp,20
    5244:	e13ffc15 	stw	r4,-16(fp)
    5248:	e17ffb15 	stw	r5,-20(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
    524c:	e0bffc17 	ldw	r2,-16(fp)
    5250:	10800d03 	ldbu	r2,52(r2)
    5254:	e0bffdc5 	stb	r2,-9(fp)
    bity    =  ptcb->OSTCBBitY;
    5258:	e0bffc17 	ldw	r2,-16(fp)
    525c:	10800d83 	ldbu	r2,54(r2)
    5260:	e0bffd85 	stb	r2,-10(fp)
    bitx    =  ptcb->OSTCBBitX;
    5264:	e0bffc17 	ldw	r2,-16(fp)
    5268:	10800d43 	ldbu	r2,53(r2)
    526c:	e0bffd45 	stb	r2,-11(fp)
    pevents =  pevents_multi;
    5270:	e0bffb17 	ldw	r2,-20(fp)
    5274:	e0bfff15 	stw	r2,-4(fp)
    pevent  = *pevents;
    5278:	e0bfff17 	ldw	r2,-4(fp)
    527c:	10800017 	ldw	r2,0(r2)
    5280:	e0bffe15 	stw	r2,-8(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
    5284:	00002306 	br	5314 <OS_EventTaskRemoveMulti+0xdc>
        pevent->OSEventTbl[y]  &= ~bitx;
    5288:	e0bffdc3 	ldbu	r2,-9(fp)
    528c:	e0fffe17 	ldw	r3,-8(fp)
    5290:	1885883a 	add	r2,r3,r2
    5294:	108002c3 	ldbu	r2,11(r2)
    5298:	1007883a 	mov	r3,r2
    529c:	e0bffd43 	ldbu	r2,-11(fp)
    52a0:	0084303a 	nor	r2,zero,r2
    52a4:	1884703a 	and	r2,r3,r2
    52a8:	1007883a 	mov	r3,r2
    52ac:	e0bffdc3 	ldbu	r2,-9(fp)
    52b0:	1809883a 	mov	r4,r3
    52b4:	e0fffe17 	ldw	r3,-8(fp)
    52b8:	1885883a 	add	r2,r3,r2
    52bc:	110002c5 	stb	r4,11(r2)
        if (pevent->OSEventTbl[y] == 0) {
    52c0:	e0bffdc3 	ldbu	r2,-9(fp)
    52c4:	e0fffe17 	ldw	r3,-8(fp)
    52c8:	1885883a 	add	r2,r3,r2
    52cc:	108002c3 	ldbu	r2,11(r2)
    52d0:	10803fcc 	andi	r2,r2,255
    52d4:	1000091e 	bne	r2,zero,52fc <OS_EventTaskRemoveMulti+0xc4>
            pevent->OSEventGrp &= ~bity;
    52d8:	e0bffe17 	ldw	r2,-8(fp)
    52dc:	10800283 	ldbu	r2,10(r2)
    52e0:	1007883a 	mov	r3,r2
    52e4:	e0bffd83 	ldbu	r2,-10(fp)
    52e8:	0084303a 	nor	r2,zero,r2
    52ec:	1884703a 	and	r2,r3,r2
    52f0:	1007883a 	mov	r3,r2
    52f4:	e0bffe17 	ldw	r2,-8(fp)
    52f8:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
    52fc:	e0bfff17 	ldw	r2,-4(fp)
    5300:	10800104 	addi	r2,r2,4
    5304:	e0bfff15 	stw	r2,-4(fp)
        pevent = *pevents;
    5308:	e0bfff17 	ldw	r2,-4(fp)
    530c:	10800017 	ldw	r2,0(r2)
    5310:	e0bffe15 	stw	r2,-8(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
    5314:	e0bffe17 	ldw	r2,-8(fp)
    5318:	103fdb1e 	bne	r2,zero,5288 <OS_EventTaskRemoveMulti+0x50>
    }
}
    531c:	0001883a 	nop
    5320:	0001883a 	nop
    5324:	e037883a 	mov	sp,fp
    5328:	df000017 	ldw	fp,0(sp)
    532c:	dec00104 	addi	sp,sp,4
    5330:	f800283a 	ret

00005334 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
    5334:	defffc04 	addi	sp,sp,-16
    5338:	df000315 	stw	fp,12(sp)
    533c:	df000304 	addi	fp,sp,12
    5340:	e13ffd15 	stw	r4,-12(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    5344:	e0bffd17 	ldw	r2,-12(fp)
    5348:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
    534c:	e0bffd17 	ldw	r2,-12(fp)
    5350:	108002c4 	addi	r2,r2,11
    5354:	e0bfff15 	stw	r2,-4(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    5358:	e03ffec5 	stb	zero,-5(fp)
    535c:	00000706 	br	537c <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
    5360:	e0bfff17 	ldw	r2,-4(fp)
    5364:	10c00044 	addi	r3,r2,1
    5368:	e0ffff15 	stw	r3,-4(fp)
    536c:	10000005 	stb	zero,0(r2)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    5370:	e0bffec3 	ldbu	r2,-5(fp)
    5374:	10800044 	addi	r2,r2,1
    5378:	e0bffec5 	stb	r2,-5(fp)
    537c:	e0bffec3 	ldbu	r2,-5(fp)
    5380:	108000f0 	cmpltui	r2,r2,3
    5384:	103ff61e 	bne	r2,zero,5360 <OS_EventWaitListInit+0x2c>
    }
}
    5388:	0001883a 	nop
    538c:	0001883a 	nop
    5390:	e037883a 	mov	sp,fp
    5394:	df000017 	ldw	fp,0(sp)
    5398:	dec00104 	addi	sp,sp,4
    539c:	f800283a 	ret

000053a0 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
    53a0:	defffb04 	addi	sp,sp,-20
    53a4:	dfc00415 	stw	ra,16(sp)
    53a8:	df000315 	stw	fp,12(sp)
    53ac:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    53b0:	0142d004 	movi	r5,2880
    53b4:	01000074 	movhi	r4,1
    53b8:	211d0104 	addi	r4,r4,29700
    53bc:	00057200 	call	5720 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
    53c0:	00800074 	movhi	r2,1
    53c4:	109d0104 	addi	r2,r2,29700
    53c8:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
    53cc:	00800074 	movhi	r2,1
    53d0:	109d0d04 	addi	r2,r2,29748
    53d4:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
    53d8:	e03fff8d 	sth	zero,-2(fp)
    53dc:	00001306 	br	542c <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
    53e0:	e0bffe17 	ldw	r2,-8(fp)
    53e4:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
    53e8:	e0bffe17 	ldw	r2,-8(fp)
    53ec:	e0fffd17 	ldw	r3,-12(fp)
    53f0:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
    53f4:	e0bffe17 	ldw	r2,-8(fp)
    53f8:	00c00fc4 	movi	r3,63
    53fc:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
    5400:	e0bffe17 	ldw	r2,-8(fp)
    5404:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
    5408:	e0bffe17 	ldw	r2,-8(fp)
    540c:	10800c04 	addi	r2,r2,48
    5410:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
    5414:	e0bffd17 	ldw	r2,-12(fp)
    5418:	10800c04 	addi	r2,r2,48
    541c:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
    5420:	e0bfff8b 	ldhu	r2,-2(fp)
    5424:	10800044 	addi	r2,r2,1
    5428:	e0bfff8d 	sth	r2,-2(fp)
    542c:	e0bfff8b 	ldhu	r2,-2(fp)
    5430:	10800ef0 	cmpltui	r2,r2,59
    5434:	103fea1e 	bne	r2,zero,53e0 <OS_InitEventList+0x40>
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
    5438:	e0bffe17 	ldw	r2,-8(fp)
    543c:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
    5440:	e0bffe17 	ldw	r2,-8(fp)
    5444:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
    5448:	e0bffe17 	ldw	r2,-8(fp)
    544c:	00c00fc4 	movi	r3,63
    5450:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
    5454:	e0bffe17 	ldw	r2,-8(fp)
    5458:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
    545c:	00800074 	movhi	r2,1
    5460:	109d0104 	addi	r2,r2,29700
    5464:	d0a7ba15 	stw	r2,-24856(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
    5468:	0001883a 	nop
    546c:	e037883a 	mov	sp,fp
    5470:	dfc00117 	ldw	ra,4(sp)
    5474:	df000017 	ldw	fp,0(sp)
    5478:	dec00204 	addi	sp,sp,8
    547c:	f800283a 	ret

00005480 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
    5480:	deffff04 	addi	sp,sp,-4
    5484:	df000015 	stw	fp,0(sp)
    5488:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
    548c:	d027ca15 	stw	zero,-24792(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
    5490:	d027bf45 	stb	zero,-24835(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
    5494:	d027bf85 	stb	zero,-24834(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
    5498:	d027c185 	stb	zero,-24826(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
    549c:	d027c145 	stb	zero,-24827(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
    54a0:	d027b915 	stw	zero,-24860(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
    54a4:	d027c215 	stw	zero,-24824(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
    54a8:	d027be15 	stw	zero,-24840(gp)
    OSIdleCtrMax  = 0L;
    54ac:	d027bd15 	stw	zero,-24844(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
    54b0:	d027bf05 	stb	zero,-24836(gp)
#endif
}
    54b4:	0001883a 	nop
    54b8:	e037883a 	mov	sp,fp
    54bc:	df000017 	ldw	fp,0(sp)
    54c0:	dec00104 	addi	sp,sp,4
    54c4:	f800283a 	ret

000054c8 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
    54c8:	defffd04 	addi	sp,sp,-12
    54cc:	df000215 	stw	fp,8(sp)
    54d0:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    54d4:	d027c045 	stb	zero,-24831(gp)
    prdytbl       = &OSRdyTbl[0];
    54d8:	d0a7c084 	addi	r2,gp,-24830
    54dc:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
    54e0:	e03fffc5 	stb	zero,-1(fp)
    54e4:	00000706 	br	5504 <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
    54e8:	e0bffe17 	ldw	r2,-8(fp)
    54ec:	10c00044 	addi	r3,r2,1
    54f0:	e0fffe15 	stw	r3,-8(fp)
    54f4:	10000005 	stb	zero,0(r2)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
    54f8:	e0bfffc3 	ldbu	r2,-1(fp)
    54fc:	10800044 	addi	r2,r2,1
    5500:	e0bfffc5 	stb	r2,-1(fp)
    5504:	e0bfffc3 	ldbu	r2,-1(fp)
    5508:	108000f0 	cmpltui	r2,r2,3
    550c:	103ff61e 	bne	r2,zero,54e8 <OS_InitRdyList+0x20>
    }

    OSPrioCur     = 0;
    5510:	d027bfc5 	stb	zero,-24833(gp)
    OSPrioHighRdy = 0;
    5514:	d027c005 	stb	zero,-24832(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
    5518:	d027c515 	stw	zero,-24812(gp)
    OSTCBCur      = (OS_TCB *)0;
    551c:	d027c315 	stw	zero,-24820(gp)
}
    5520:	0001883a 	nop
    5524:	e037883a 	mov	sp,fp
    5528:	df000017 	ldw	fp,0(sp)
    552c:	dec00104 	addi	sp,sp,4
    5530:	f800283a 	ret

00005534 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
    5534:	defff804 	addi	sp,sp,-32
    5538:	dfc00715 	stw	ra,28(sp)
    553c:	df000615 	stw	fp,24(sp)
    5540:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
    5544:	008000c4 	movi	r2,3
    5548:	d8800415 	stw	r2,16(sp)
    554c:	d8000315 	stw	zero,12(sp)
    5550:	00808004 	movi	r2,512
    5554:	d8800215 	stw	r2,8(sp)
    5558:	008000b4 	movhi	r2,2
    555c:	10a2ad04 	addi	r2,r2,-30028
    5560:	d8800115 	stw	r2,4(sp)
    5564:	00bfffd4 	movui	r2,65535
    5568:	d8800015 	stw	r2,0(sp)
    556c:	01c00504 	movi	r7,20
    5570:	018000b4 	movhi	r6,2
    5574:	31a4ac04 	addi	r6,r6,-27984
    5578:	000b883a 	mov	r5,zero
    557c:	01000034 	movhi	r4,0
    5580:	21167904 	addi	r4,r4,23012
    5584:	000a1d40 	call	a1d4 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
    5588:	e0bfffc4 	addi	r2,fp,-1
    558c:	100d883a 	mov	r6,r2
    5590:	01400074 	movhi	r5,1
    5594:	297d7604 	addi	r5,r5,-2600
    5598:	01000504 	movi	r4,20
    559c:	000a9e80 	call	a9e8 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
    55a0:	0001883a 	nop
    55a4:	e037883a 	mov	sp,fp
    55a8:	dfc00117 	ldw	ra,4(sp)
    55ac:	df000017 	ldw	fp,0(sp)
    55b0:	dec00204 	addi	sp,sp,8
    55b4:	f800283a 	ret

000055b8 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
    55b8:	defff804 	addi	sp,sp,-32
    55bc:	dfc00715 	stw	ra,28(sp)
    55c0:	df000615 	stw	fp,24(sp)
    55c4:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
    55c8:	008000c4 	movi	r2,3
    55cc:	d8800415 	stw	r2,16(sp)
    55d0:	d8000315 	stw	zero,12(sp)
    55d4:	00808004 	movi	r2,512
    55d8:	d8800215 	stw	r2,8(sp)
    55dc:	008000b4 	movhi	r2,2
    55e0:	10a0ad04 	addi	r2,r2,-32076
    55e4:	d8800115 	stw	r2,4(sp)
    55e8:	00bfff94 	movui	r2,65534
    55ec:	d8800015 	stw	r2,0(sp)
    55f0:	01c004c4 	movi	r7,19
    55f4:	018000b4 	movhi	r6,2
    55f8:	31a2ac04 	addi	r6,r6,-30032
    55fc:	000b883a 	mov	r5,zero
    5600:	01000034 	movhi	r4,0
    5604:	21169104 	addi	r4,r4,23108
    5608:	000a1d40 	call	a1d4 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
    560c:	e0bfffc4 	addi	r2,fp,-1
    5610:	100d883a 	mov	r6,r2
    5614:	01400074 	movhi	r5,1
    5618:	297d7a04 	addi	r5,r5,-2584
    561c:	010004c4 	movi	r4,19
    5620:	000a9e80 	call	a9e8 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
    5624:	0001883a 	nop
    5628:	e037883a 	mov	sp,fp
    562c:	dfc00117 	ldw	ra,4(sp)
    5630:	df000017 	ldw	fp,0(sp)
    5634:	dec00204 	addi	sp,sp,8
    5638:	f800283a 	ret

0000563c <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
    563c:	defffb04 	addi	sp,sp,-20
    5640:	dfc00415 	stw	ra,16(sp)
    5644:	df000315 	stw	fp,12(sp)
    5648:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    564c:	01414404 	movi	r5,1296
    5650:	010000b4 	movhi	r4,2
    5654:	2124c204 	addi	r4,r4,-27896
    5658:	00057200 	call	5720 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    565c:	01401504 	movi	r5,84
    5660:	010000b4 	movhi	r4,2
    5664:	2124ad04 	addi	r4,r4,-27980
    5668:	00057200 	call	5720 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
    566c:	008000b4 	movhi	r2,2
    5670:	10a4c204 	addi	r2,r2,-27896
    5674:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
    5678:	008000b4 	movhi	r2,2
    567c:	10a4dd04 	addi	r2,r2,-27788
    5680:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
    5684:	e03fffc5 	stb	zero,-1(fp)
    5688:	00001106 	br	56d0 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
    568c:	e0bffe17 	ldw	r2,-8(fp)
    5690:	e0fffd17 	ldw	r3,-12(fp)
    5694:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
    5698:	e0bffe17 	ldw	r2,-8(fp)
    569c:	00c00fc4 	movi	r3,63
    56a0:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
    56a4:	e0bffe17 	ldw	r2,-8(fp)
    56a8:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
    56ac:	e0bffe17 	ldw	r2,-8(fp)
    56b0:	10801b04 	addi	r2,r2,108
    56b4:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
    56b8:	e0bffd17 	ldw	r2,-12(fp)
    56bc:	10801b04 	addi	r2,r2,108
    56c0:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
    56c4:	e0bfffc3 	ldbu	r2,-1(fp)
    56c8:	10800044 	addi	r2,r2,1
    56cc:	e0bfffc5 	stb	r2,-1(fp)
    56d0:	e0bfffc3 	ldbu	r2,-1(fp)
    56d4:	108002f0 	cmpltui	r2,r2,11
    56d8:	103fec1e 	bne	r2,zero,568c <OS_InitTCBList+0x50>
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
    56dc:	e0bffe17 	ldw	r2,-8(fp)
    56e0:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
    56e4:	e0bffe17 	ldw	r2,-8(fp)
    56e8:	00c00fc4 	movi	r3,63
    56ec:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
    56f0:	e0bffe17 	ldw	r2,-8(fp)
    56f4:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
    56f8:	d027c615 	stw	zero,-24808(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
    56fc:	008000b4 	movhi	r2,2
    5700:	10a4c204 	addi	r2,r2,-27896
    5704:	d0a7c415 	stw	r2,-24816(gp)
}
    5708:	0001883a 	nop
    570c:	e037883a 	mov	sp,fp
    5710:	dfc00117 	ldw	ra,4(sp)
    5714:	df000017 	ldw	fp,0(sp)
    5718:	dec00204 	addi	sp,sp,8
    571c:	f800283a 	ret

00005720 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    5720:	defffd04 	addi	sp,sp,-12
    5724:	df000215 	stw	fp,8(sp)
    5728:	df000204 	addi	fp,sp,8
    572c:	e13fff15 	stw	r4,-4(fp)
    5730:	2805883a 	mov	r2,r5
    5734:	e0bffe0d 	sth	r2,-8(fp)
    while (size > 0) {
    5738:	00000706 	br	5758 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
    573c:	e0bfff17 	ldw	r2,-4(fp)
    5740:	10c00044 	addi	r3,r2,1
    5744:	e0ffff15 	stw	r3,-4(fp)
    5748:	10000005 	stb	zero,0(r2)
        size--;
    574c:	e0bffe0b 	ldhu	r2,-8(fp)
    5750:	10bfffc4 	addi	r2,r2,-1
    5754:	e0bffe0d 	sth	r2,-8(fp)
    while (size > 0) {
    5758:	e0bffe0b 	ldhu	r2,-8(fp)
    575c:	103ff71e 	bne	r2,zero,573c <OS_MemClr+0x1c>
    }
}
    5760:	0001883a 	nop
    5764:	0001883a 	nop
    5768:	e037883a 	mov	sp,fp
    576c:	df000017 	ldw	fp,0(sp)
    5770:	dec00104 	addi	sp,sp,4
    5774:	f800283a 	ret

00005778 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    5778:	defffc04 	addi	sp,sp,-16
    577c:	df000315 	stw	fp,12(sp)
    5780:	df000304 	addi	fp,sp,12
    5784:	e13fff15 	stw	r4,-4(fp)
    5788:	e17ffe15 	stw	r5,-8(fp)
    578c:	3005883a 	mov	r2,r6
    5790:	e0bffd0d 	sth	r2,-12(fp)
    while (size > 0) {
    5794:	00000b06 	br	57c4 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
    5798:	e0fffe17 	ldw	r3,-8(fp)
    579c:	18800044 	addi	r2,r3,1
    57a0:	e0bffe15 	stw	r2,-8(fp)
    57a4:	e0bfff17 	ldw	r2,-4(fp)
    57a8:	11000044 	addi	r4,r2,1
    57ac:	e13fff15 	stw	r4,-4(fp)
    57b0:	18c00003 	ldbu	r3,0(r3)
    57b4:	10c00005 	stb	r3,0(r2)
        size--;
    57b8:	e0bffd0b 	ldhu	r2,-12(fp)
    57bc:	10bfffc4 	addi	r2,r2,-1
    57c0:	e0bffd0d 	sth	r2,-12(fp)
    while (size > 0) {
    57c4:	e0bffd0b 	ldhu	r2,-12(fp)
    57c8:	103ff31e 	bne	r2,zero,5798 <OS_MemCopy+0x20>
    }
}
    57cc:	0001883a 	nop
    57d0:	0001883a 	nop
    57d4:	e037883a 	mov	sp,fp
    57d8:	df000017 	ldw	fp,0(sp)
    57dc:	dec00104 	addi	sp,sp,4
    57e0:	f800283a 	ret

000057e4 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
    57e4:	defffb04 	addi	sp,sp,-20
    57e8:	dfc00415 	stw	ra,16(sp)
    57ec:	df000315 	stw	fp,12(sp)
    57f0:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    57f4:	e03fff15 	stw	zero,-4(fp)
  NIOS2_READ_STATUS (context);
    57f8:	0005303a 	rdctl	r2,status
    57fc:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5800:	e0fffe17 	ldw	r3,-8(fp)
    5804:	00bfff84 	movi	r2,-2
    5808:	1884703a 	and	r2,r3,r2
    580c:	1001703a 	wrctl	status,r2
  return context;
    5810:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
    5814:	e0bfff15 	stw	r2,-4(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
    5818:	d0a7bf43 	ldbu	r2,-24835(gp)
    581c:	10803fcc 	andi	r2,r2,255
    5820:	1000181e 	bne	r2,zero,5884 <OS_Sched+0xa0>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
    5824:	d0a7bf83 	ldbu	r2,-24834(gp)
    5828:	10803fcc 	andi	r2,r2,255
    582c:	1000151e 	bne	r2,zero,5884 <OS_Sched+0xa0>
            OS_SchedNew();
    5830:	00058b00 	call	58b0 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
    5834:	d0e7c003 	ldbu	r3,-24832(gp)
    5838:	d0a7bfc3 	ldbu	r2,-24833(gp)
    583c:	18c03fcc 	andi	r3,r3,255
    5840:	10803fcc 	andi	r2,r2,255
    5844:	18800f26 	beq	r3,r2,5884 <OS_Sched+0xa0>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
    5848:	d0a7c003 	ldbu	r2,-24832(gp)
    584c:	10803fcc 	andi	r2,r2,255
    5850:	100690ba 	slli	r3,r2,2
    5854:	008000b4 	movhi	r2,2
    5858:	1885883a 	add	r2,r3,r2
    585c:	10a4ad17 	ldw	r2,-27980(r2)
    5860:	d0a7c515 	stw	r2,-24812(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
    5864:	d0a7c517 	ldw	r2,-24812(gp)
    5868:	10c00e17 	ldw	r3,56(r2)
    586c:	18c00044 	addi	r3,r3,1
    5870:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
    5874:	d0a7b917 	ldw	r2,-24860(gp)
    5878:	10800044 	addi	r2,r2,1
    587c:	d0a7b915 	stw	r2,-24860(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
    5880:	000eba80 	call	eba8 <OSCtxSw>
    5884:	e0bfff17 	ldw	r2,-4(fp)
    5888:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
    588c:	e0bffd17 	ldw	r2,-12(fp)
    5890:	1001703a 	wrctl	status,r2
}
    5894:	0001883a 	nop
            }
        }
    }
    OS_EXIT_CRITICAL();
}
    5898:	0001883a 	nop
    589c:	e037883a 	mov	sp,fp
    58a0:	dfc00117 	ldw	ra,4(sp)
    58a4:	df000017 	ldw	fp,0(sp)
    58a8:	dec00204 	addi	sp,sp,8
    58ac:	f800283a 	ret

000058b0 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
    58b0:	defffe04 	addi	sp,sp,-8
    58b4:	df000115 	stw	fp,4(sp)
    58b8:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
    58bc:	d0a7c043 	ldbu	r2,-24831(gp)
    58c0:	10c03fcc 	andi	r3,r2,255
    58c4:	00800074 	movhi	r2,1
    58c8:	1885883a 	add	r2,r3,r2
    58cc:	10bd3603 	ldbu	r2,-2856(r2)
    58d0:	e0bfffc5 	stb	r2,-1(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
    58d4:	e0bfffc3 	ldbu	r2,-1(fp)
    58d8:	100490fa 	slli	r2,r2,3
    58dc:	1009883a 	mov	r4,r2
    58e0:	e0ffffc3 	ldbu	r3,-1(fp)
    58e4:	d0a7c084 	addi	r2,gp,-24830
    58e8:	1885883a 	add	r2,r3,r2
    58ec:	10800003 	ldbu	r2,0(r2)
    58f0:	10c03fcc 	andi	r3,r2,255
    58f4:	00800074 	movhi	r2,1
    58f8:	1885883a 	add	r2,r3,r2
    58fc:	10bd3603 	ldbu	r2,-2856(r2)
    5900:	2085883a 	add	r2,r4,r2
    5904:	d0a7c005 	stb	r2,-24832(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
    5908:	0001883a 	nop
    590c:	e037883a 	mov	sp,fp
    5910:	df000017 	ldw	fp,0(sp)
    5914:	dec00104 	addi	sp,sp,4
    5918:	f800283a 	ret

0000591c <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
    591c:	defffc04 	addi	sp,sp,-16
    5920:	df000315 	stw	fp,12(sp)
    5924:	df000304 	addi	fp,sp,12
    5928:	e13ffe15 	stw	r4,-8(fp)
    592c:	e17ffd15 	stw	r5,-12(fp)
    INT8U  len;


    len = 0;
    5930:	e03fffc5 	stb	zero,-1(fp)
    while (*psrc != OS_ASCII_NUL) {
    5934:	00000b06 	br	5964 <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
    5938:	e0fffd17 	ldw	r3,-12(fp)
    593c:	18800044 	addi	r2,r3,1
    5940:	e0bffd15 	stw	r2,-12(fp)
    5944:	e0bffe17 	ldw	r2,-8(fp)
    5948:	11000044 	addi	r4,r2,1
    594c:	e13ffe15 	stw	r4,-8(fp)
    5950:	18c00003 	ldbu	r3,0(r3)
    5954:	10c00005 	stb	r3,0(r2)
        len++;
    5958:	e0bfffc3 	ldbu	r2,-1(fp)
    595c:	10800044 	addi	r2,r2,1
    5960:	e0bfffc5 	stb	r2,-1(fp)
    while (*psrc != OS_ASCII_NUL) {
    5964:	e0bffd17 	ldw	r2,-12(fp)
    5968:	10800003 	ldbu	r2,0(r2)
    596c:	10803fcc 	andi	r2,r2,255
    5970:	103ff11e 	bne	r2,zero,5938 <OS_StrCopy+0x1c>
    }
    *pdest = OS_ASCII_NUL;
    5974:	e0bffe17 	ldw	r2,-8(fp)
    5978:	10000005 	stb	zero,0(r2)
    return (len);
    597c:	e0bfffc3 	ldbu	r2,-1(fp)
}
    5980:	e037883a 	mov	sp,fp
    5984:	df000017 	ldw	fp,0(sp)
    5988:	dec00104 	addi	sp,sp,4
    598c:	f800283a 	ret

00005990 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
    5990:	defffd04 	addi	sp,sp,-12
    5994:	df000215 	stw	fp,8(sp)
    5998:	df000204 	addi	fp,sp,8
    599c:	e13ffe15 	stw	r4,-8(fp)
    INT8U  len;


    len = 0;
    59a0:	e03fffc5 	stb	zero,-1(fp)
    while (*psrc != OS_ASCII_NUL) {
    59a4:	00000606 	br	59c0 <OS_StrLen+0x30>
        psrc++;
    59a8:	e0bffe17 	ldw	r2,-8(fp)
    59ac:	10800044 	addi	r2,r2,1
    59b0:	e0bffe15 	stw	r2,-8(fp)
        len++;
    59b4:	e0bfffc3 	ldbu	r2,-1(fp)
    59b8:	10800044 	addi	r2,r2,1
    59bc:	e0bfffc5 	stb	r2,-1(fp)
    while (*psrc != OS_ASCII_NUL) {
    59c0:	e0bffe17 	ldw	r2,-8(fp)
    59c4:	10800003 	ldbu	r2,0(r2)
    59c8:	10803fcc 	andi	r2,r2,255
    59cc:	103ff61e 	bne	r2,zero,59a8 <OS_StrLen+0x18>
    }
    return (len);
    59d0:	e0bfffc3 	ldbu	r2,-1(fp)
}
    59d4:	e037883a 	mov	sp,fp
    59d8:	df000017 	ldw	fp,0(sp)
    59dc:	dec00104 	addi	sp,sp,4
    59e0:	f800283a 	ret

000059e4 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
    59e4:	defffa04 	addi	sp,sp,-24
    59e8:	dfc00515 	stw	ra,20(sp)
    59ec:	df000415 	stw	fp,16(sp)
    59f0:	df000404 	addi	fp,sp,16
    59f4:	e13ffc15 	stw	r4,-16(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    59f8:	e03fff15 	stw	zero,-4(fp)
  NIOS2_READ_STATUS (context);
    59fc:	0005303a 	rdctl	r2,status
    5a00:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5a04:	e0fffd17 	ldw	r3,-12(fp)
    5a08:	00bfff84 	movi	r2,-2
    5a0c:	1884703a 	and	r2,r3,r2
    5a10:	1001703a 	wrctl	status,r2
  return context;
    5a14:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
    5a18:	e0bfff15 	stw	r2,-4(fp)
        OSIdleCtr++;
    5a1c:	d0a7c217 	ldw	r2,-24824(gp)
    5a20:	10800044 	addi	r2,r2,1
    5a24:	d0a7c215 	stw	r2,-24824(gp)
    5a28:	e0bfff17 	ldw	r2,-4(fp)
    5a2c:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
    5a30:	e0bffe17 	ldw	r2,-8(fp)
    5a34:	1001703a 	wrctl	status,r2
}
    5a38:	0001883a 	nop
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
    5a3c:	000eeac0 	call	eeac <OSTaskIdleHook>
        OS_ENTER_CRITICAL();
    5a40:	003fee06 	br	59fc <OS_TaskIdle+0x18>

00005a44 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
    5a44:	defffa04 	addi	sp,sp,-24
    5a48:	dfc00515 	stw	ra,20(sp)
    5a4c:	df000415 	stw	fp,16(sp)
    5a50:	df000404 	addi	fp,sp,16
    5a54:	e13ffc15 	stw	r4,-16(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    5a58:	e03fff15 	stw	zero,-4(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
    5a5c:	00000206 	br	5a68 <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    5a60:	01000044 	movi	r4,1
    5a64:	000b2bc0 	call	b2bc <OSTimeDly>
    while (OSStatRdy == OS_FALSE) {
    5a68:	d0a7bf03 	ldbu	r2,-24836(gp)
    5a6c:	10803fcc 	andi	r2,r2,255
    5a70:	103ffb26 	beq	r2,zero,5a60 <OS_TaskStat+0x1c>
    }
    OSIdleCtrMax /= 100L;
    5a74:	d0e7bd17 	ldw	r3,-24844(gp)
    5a78:	00801904 	movi	r2,100
    5a7c:	1885203a 	divu	r2,r3,r2
    5a80:	d0a7bd15 	stw	r2,-24844(gp)
    if (OSIdleCtrMax == 0L) {
    5a84:	d0a7bd17 	ldw	r2,-24844(gp)
    5a88:	1000031e 	bne	r2,zero,5a98 <OS_TaskStat+0x54>
        OSCPUUsage = 0;
    5a8c:	d027bc05 	stb	zero,-24848(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
    5a90:	01003fc4 	movi	r4,255
    5a94:	000af3c0 	call	af3c <OSTaskSuspend>
  NIOS2_READ_STATUS (context);
    5a98:	0005303a 	rdctl	r2,status
    5a9c:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5aa0:	e0fffd17 	ldw	r3,-12(fp)
    5aa4:	00bfff84 	movi	r2,-2
    5aa8:	1884703a 	and	r2,r3,r2
    5aac:	1001703a 	wrctl	status,r2
  return context;
    5ab0:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
    5ab4:	e0bfff15 	stw	r2,-4(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
    5ab8:	d0a7c217 	ldw	r2,-24824(gp)
    5abc:	d0a7be15 	stw	r2,-24840(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
    5ac0:	d027c215 	stw	zero,-24824(gp)
    5ac4:	e0bfff17 	ldw	r2,-4(fp)
    5ac8:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
    5acc:	e0bffe17 	ldw	r2,-8(fp)
    5ad0:	1001703a 	wrctl	status,r2
}
    5ad4:	0001883a 	nop
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
    5ad8:	d0e7be17 	ldw	r3,-24840(gp)
    5adc:	d0a7bd17 	ldw	r2,-24844(gp)
    5ae0:	1885203a 	divu	r2,r3,r2
    5ae4:	1007883a 	mov	r3,r2
    5ae8:	00801904 	movi	r2,100
    5aec:	10c5c83a 	sub	r2,r2,r3
    5af0:	d0a7bc05 	stb	r2,-24848(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
    5af4:	000ee2c0 	call	ee2c <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
    5af8:	0005b080 	call	5b08 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
    5afc:	0009883a 	mov	r4,zero
    5b00:	000b2bc0 	call	b2bc <OSTimeDly>
        OS_ENTER_CRITICAL();
    5b04:	003fe406 	br	5a98 <OS_TaskStat+0x54>

00005b08 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
    5b08:	defffa04 	addi	sp,sp,-24
    5b0c:	dfc00515 	stw	ra,20(sp)
    5b10:	df000415 	stw	fp,16(sp)
    5b14:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
    5b18:	e03fffc5 	stb	zero,-1(fp)
    5b1c:	00002106 	br	5ba4 <OS_TaskStatStkChk+0x9c>
        err = OSTaskStkChk(prio, &stk_data);
    5b20:	e0bfffc3 	ldbu	r2,-1(fp)
    5b24:	e0fffc04 	addi	r3,fp,-16
    5b28:	180b883a 	mov	r5,r3
    5b2c:	1009883a 	mov	r4,r2
    5b30:	000ad840 	call	ad84 <OSTaskStkChk>
    5b34:	e0bfff85 	stb	r2,-2(fp)
        if (err == OS_ERR_NONE) {
    5b38:	e0bfff83 	ldbu	r2,-2(fp)
    5b3c:	1000161e 	bne	r2,zero,5b98 <OS_TaskStatStkChk+0x90>
            ptcb = OSTCBPrioTbl[prio];
    5b40:	e0bfffc3 	ldbu	r2,-1(fp)
    5b44:	100690ba 	slli	r3,r2,2
    5b48:	008000b4 	movhi	r2,2
    5b4c:	1885883a 	add	r2,r3,r2
    5b50:	10a4ad17 	ldw	r2,-27980(r2)
    5b54:	e0bffe15 	stw	r2,-8(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
    5b58:	e0bffe17 	ldw	r2,-8(fp)
    5b5c:	10000e26 	beq	r2,zero,5b98 <OS_TaskStatStkChk+0x90>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
    5b60:	e0bffe17 	ldw	r2,-8(fp)
    5b64:	10800060 	cmpeqi	r2,r2,1
    5b68:	10000b1e 	bne	r2,zero,5b98 <OS_TaskStatStkChk+0x90>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
    5b6c:	e0bffe17 	ldw	r2,-8(fp)
    5b70:	10c00217 	ldw	r3,8(r2)
    5b74:	e0bffe17 	ldw	r2,-8(fp)
    5b78:	10800317 	ldw	r2,12(r2)
    5b7c:	100490ba 	slli	r2,r2,2
    5b80:	1887883a 	add	r3,r3,r2
    5b84:	e0bffe17 	ldw	r2,-8(fp)
    5b88:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
    5b8c:	e0fffd17 	ldw	r3,-12(fp)
    5b90:	e0bffe17 	ldw	r2,-8(fp)
    5b94:	10c01215 	stw	r3,72(r2)
    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
    5b98:	e0bfffc3 	ldbu	r2,-1(fp)
    5b9c:	10800044 	addi	r2,r2,1
    5ba0:	e0bfffc5 	stb	r2,-1(fp)
    5ba4:	e0bfffc3 	ldbu	r2,-1(fp)
    5ba8:	10800570 	cmpltui	r2,r2,21
    5bac:	103fdc1e 	bne	r2,zero,5b20 <OS_TaskStatStkChk+0x18>
#endif
                }
            }
        }
    }
}
    5bb0:	0001883a 	nop
    5bb4:	0001883a 	nop
    5bb8:	e037883a 	mov	sp,fp
    5bbc:	dfc00117 	ldw	ra,4(sp)
    5bc0:	df000017 	ldw	fp,0(sp)
    5bc4:	dec00204 	addi	sp,sp,8
    5bc8:	f800283a 	ret

00005bcc <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
    5bcc:	defff204 	addi	sp,sp,-56
    5bd0:	dfc00d15 	stw	ra,52(sp)
    5bd4:	df000c15 	stw	fp,48(sp)
    5bd8:	df000c04 	addi	fp,sp,48
    5bdc:	2007883a 	mov	r3,r4
    5be0:	e17ff715 	stw	r5,-36(fp)
    5be4:	e1bff615 	stw	r6,-40(fp)
    5be8:	3809883a 	mov	r4,r7
    5bec:	e0800417 	ldw	r2,16(fp)
    5bf0:	e0fff805 	stb	r3,-32(fp)
    5bf4:	2007883a 	mov	r3,r4
    5bf8:	e0fff50d 	sth	r3,-44(fp)
    5bfc:	e0bff40d 	sth	r2,-48(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    5c00:	e03fff15 	stw	zero,-4(fp)
  NIOS2_READ_STATUS (context);
    5c04:	0005303a 	rdctl	r2,status
    5c08:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5c0c:	e0fffd17 	ldw	r3,-12(fp)
    5c10:	00bfff84 	movi	r2,-2
    5c14:	1884703a 	and	r2,r3,r2
    5c18:	1001703a 	wrctl	status,r2
  return context;
    5c1c:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
    5c20:	e0bfff15 	stw	r2,-4(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
    5c24:	d0a7c417 	ldw	r2,-24816(gp)
    5c28:	e0bffe15 	stw	r2,-8(fp)
    if (ptcb != (OS_TCB *)0) {
    5c2c:	e0bffe17 	ldw	r2,-8(fp)
    5c30:	10009326 	beq	r2,zero,5e80 <OS_TCBInit+0x2b4>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
    5c34:	e0bffe17 	ldw	r2,-8(fp)
    5c38:	10800517 	ldw	r2,20(r2)
    5c3c:	d0a7c415 	stw	r2,-24816(gp)
    5c40:	e0bfff17 	ldw	r2,-4(fp)
    5c44:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    5c48:	e0bffb17 	ldw	r2,-20(fp)
    5c4c:	1001703a 	wrctl	status,r2
}
    5c50:	0001883a 	nop
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
    5c54:	e0bffe17 	ldw	r2,-8(fp)
    5c58:	e0fff717 	ldw	r3,-36(fp)
    5c5c:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
    5c60:	e0bffe17 	ldw	r2,-8(fp)
    5c64:	e0fff803 	ldbu	r3,-32(fp)
    5c68:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
    5c6c:	e0bffe17 	ldw	r2,-8(fp)
    5c70:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
    5c74:	e0bffe17 	ldw	r2,-8(fp)
    5c78:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
    5c7c:	e0bffe17 	ldw	r2,-8(fp)
    5c80:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
    5c84:	e0bffe17 	ldw	r2,-8(fp)
    5c88:	e0c00317 	ldw	r3,12(fp)
    5c8c:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
    5c90:	e0bffe17 	ldw	r2,-8(fp)
    5c94:	e0c00217 	ldw	r3,8(fp)
    5c98:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
    5c9c:	e0bffe17 	ldw	r2,-8(fp)
    5ca0:	e0fff617 	ldw	r3,-40(fp)
    5ca4:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
    5ca8:	e0bffe17 	ldw	r2,-8(fp)
    5cac:	e0fff40b 	ldhu	r3,-48(fp)
    5cb0:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
    5cb4:	e0bffe17 	ldw	r2,-8(fp)
    5cb8:	e0fff50b 	ldhu	r3,-44(fp)
    5cbc:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
    5cc0:	e0bffe17 	ldw	r2,-8(fp)
    5cc4:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
    5cc8:	e0bff803 	ldbu	r2,-32(fp)
    5ccc:	1004d0fa 	srli	r2,r2,3
    5cd0:	1007883a 	mov	r3,r2
    5cd4:	e0bffe17 	ldw	r2,-8(fp)
    5cd8:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
    5cdc:	e0bff803 	ldbu	r2,-32(fp)
    5ce0:	108001cc 	andi	r2,r2,7
    5ce4:	1007883a 	mov	r3,r2
    5ce8:	e0bffe17 	ldw	r2,-8(fp)
    5cec:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
    5cf0:	e0bffe17 	ldw	r2,-8(fp)
    5cf4:	10800d03 	ldbu	r2,52(r2)
    5cf8:	10803fcc 	andi	r2,r2,255
    5cfc:	00c00044 	movi	r3,1
    5d00:	1884983a 	sll	r2,r3,r2
    5d04:	1007883a 	mov	r3,r2
    5d08:	e0bffe17 	ldw	r2,-8(fp)
    5d0c:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
    5d10:	e0bffe17 	ldw	r2,-8(fp)
    5d14:	10800cc3 	ldbu	r2,51(r2)
    5d18:	10803fcc 	andi	r2,r2,255
    5d1c:	00c00044 	movi	r3,1
    5d20:	1884983a 	sll	r2,r3,r2
    5d24:	1007883a 	mov	r3,r2
    5d28:	e0bffe17 	ldw	r2,-8(fp)
    5d2c:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
    5d30:	e0bffe17 	ldw	r2,-8(fp)
    5d34:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
    5d38:	e0bffe17 	ldw	r2,-8(fp)
    5d3c:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
    5d40:	e0bffe17 	ldw	r2,-8(fp)
    5d44:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
    5d48:	e0bffe17 	ldw	r2,-8(fp)
    5d4c:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
    5d50:	e0bffe17 	ldw	r2,-8(fp)
    5d54:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
    5d58:	e0bffe17 	ldw	r2,-8(fp)
    5d5c:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
    5d60:	e0bffe17 	ldw	r2,-8(fp)
    5d64:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
    5d68:	e0bffe17 	ldw	r2,-8(fp)
    5d6c:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
    5d70:	e0bffe17 	ldw	r2,-8(fp)
    5d74:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
    5d78:	e0bffe17 	ldw	r2,-8(fp)
    5d7c:	00c00fc4 	movi	r3,63
    5d80:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
    5d84:	e0bffe17 	ldw	r2,-8(fp)
    5d88:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
    5d8c:	e13ffe17 	ldw	r4,-8(fp)
    5d90:	000eecc0 	call	eecc <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
    5d94:	e13ffe17 	ldw	r4,-8(fp)
    5d98:	000edc40 	call	edc4 <OSTaskCreateHook>
  NIOS2_READ_STATUS (context);
    5d9c:	0005303a 	rdctl	r2,status
    5da0:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5da4:	e0fffc17 	ldw	r3,-16(fp)
    5da8:	00bfff84 	movi	r2,-2
    5dac:	1884703a 	and	r2,r3,r2
    5db0:	1001703a 	wrctl	status,r2
  return context;
    5db4:	e0bffc17 	ldw	r2,-16(fp)

        OS_ENTER_CRITICAL();
    5db8:	e0bfff15 	stw	r2,-4(fp)
        OSTCBPrioTbl[prio] = ptcb;
    5dbc:	e0bff803 	ldbu	r2,-32(fp)
    5dc0:	100890ba 	slli	r4,r2,2
    5dc4:	e0fffe17 	ldw	r3,-8(fp)
    5dc8:	008000b4 	movhi	r2,2
    5dcc:	2085883a 	add	r2,r4,r2
    5dd0:	10e4ad15 	stw	r3,-27980(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
    5dd4:	d0e7c617 	ldw	r3,-24808(gp)
    5dd8:	e0bffe17 	ldw	r2,-8(fp)
    5ddc:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
    5de0:	e0bffe17 	ldw	r2,-8(fp)
    5de4:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
    5de8:	d0a7c617 	ldw	r2,-24808(gp)
    5dec:	10000326 	beq	r2,zero,5dfc <OS_TCBInit+0x230>
            OSTCBList->OSTCBPrev = ptcb;
    5df0:	d0a7c617 	ldw	r2,-24808(gp)
    5df4:	e0fffe17 	ldw	r3,-8(fp)
    5df8:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
    5dfc:	e0bffe17 	ldw	r2,-8(fp)
    5e00:	d0a7c615 	stw	r2,-24808(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
    5e04:	e0bffe17 	ldw	r2,-8(fp)
    5e08:	10c00d83 	ldbu	r3,54(r2)
    5e0c:	d0a7c043 	ldbu	r2,-24831(gp)
    5e10:	1884b03a 	or	r2,r3,r2
    5e14:	d0a7c045 	stb	r2,-24831(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    5e18:	e0bffe17 	ldw	r2,-8(fp)
    5e1c:	10800d03 	ldbu	r2,52(r2)
    5e20:	10c03fcc 	andi	r3,r2,255
    5e24:	d0a7c084 	addi	r2,gp,-24830
    5e28:	1885883a 	add	r2,r3,r2
    5e2c:	11000003 	ldbu	r4,0(r2)
    5e30:	e0bffe17 	ldw	r2,-8(fp)
    5e34:	10800d43 	ldbu	r2,53(r2)
    5e38:	e0fffe17 	ldw	r3,-8(fp)
    5e3c:	18c00d03 	ldbu	r3,52(r3)
    5e40:	18c03fcc 	andi	r3,r3,255
    5e44:	2084b03a 	or	r2,r4,r2
    5e48:	1009883a 	mov	r4,r2
    5e4c:	d0a7c084 	addi	r2,gp,-24830
    5e50:	1885883a 	add	r2,r3,r2
    5e54:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
    5e58:	d0a7c183 	ldbu	r2,-24826(gp)
    5e5c:	10800044 	addi	r2,r2,1
    5e60:	d0a7c185 	stb	r2,-24826(gp)
    5e64:	e0bfff17 	ldw	r2,-4(fp)
    5e68:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
    5e6c:	e0bffa17 	ldw	r2,-24(fp)
    5e70:	1001703a 	wrctl	status,r2
}
    5e74:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
    5e78:	0005883a 	mov	r2,zero
    5e7c:	00000606 	br	5e98 <OS_TCBInit+0x2cc>
    5e80:	e0bfff17 	ldw	r2,-4(fp)
    5e84:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
    5e88:	e0bff917 	ldw	r2,-28(fp)
    5e8c:	1001703a 	wrctl	status,r2
}
    5e90:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
    5e94:	00801084 	movi	r2,66
}
    5e98:	e037883a 	mov	sp,fp
    5e9c:	dfc00117 	ldw	ra,4(sp)
    5ea0:	df000017 	ldw	fp,0(sp)
    5ea4:	dec00204 	addi	sp,sp,8
    5ea8:	f800283a 	ret

00005eac <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
    5eac:	defffe04 	addi	sp,sp,-8
    5eb0:	df000115 	stw	fp,4(sp)
    5eb4:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
    5eb8:	d0a00d04 	addi	r2,gp,-32716
    5ebc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
    5ec0:	d0a00e04 	addi	r2,gp,-32712
    5ec4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
    5ec8:	d0a00f84 	addi	r2,gp,-32706
    5ecc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
    5ed0:	d0a01004 	addi	r2,gp,-32704
    5ed4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
    5ed8:	d0a00f04 	addi	r2,gp,-32708
    5edc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
    5ee0:	d0a01084 	addi	r2,gp,-32702
    5ee4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
    5ee8:	d0a01104 	addi	r2,gp,-32700
    5eec:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
    5ef0:	d0a01184 	addi	r2,gp,-32698
    5ef4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
    5ef8:	d0a01204 	addi	r2,gp,-32696
    5efc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
    5f00:	d0a01284 	addi	r2,gp,-32694
    5f04:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
    5f08:	d0a01304 	addi	r2,gp,-32692
    5f0c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
    5f10:	d0a01384 	addi	r2,gp,-32690
    5f14:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
    5f18:	d0a01404 	addi	r2,gp,-32688
    5f1c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
    5f20:	d0a01484 	addi	r2,gp,-32686
    5f24:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
    5f28:	d0a01504 	addi	r2,gp,-32684
    5f2c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
    5f30:	d0a01584 	addi	r2,gp,-32682
    5f34:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
    5f38:	d0a01604 	addi	r2,gp,-32680
    5f3c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
    5f40:	d0a01684 	addi	r2,gp,-32678
    5f44:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
    5f48:	d0a01704 	addi	r2,gp,-32676
    5f4c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
    5f50:	d0a01784 	addi	r2,gp,-32674
    5f54:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
    5f58:	d0a01804 	addi	r2,gp,-32672
    5f5c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
    5f60:	d0a01884 	addi	r2,gp,-32670
    5f64:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
    5f68:	d0a01904 	addi	r2,gp,-32668
    5f6c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
    5f70:	d0a01984 	addi	r2,gp,-32666
    5f74:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
    5f78:	d0a01a04 	addi	r2,gp,-32664
    5f7c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
    5f80:	d0a01a84 	addi	r2,gp,-32662
    5f84:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
    5f88:	d0a01b04 	addi	r2,gp,-32660
    5f8c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
    5f90:	d0a01b84 	addi	r2,gp,-32658
    5f94:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
    5f98:	d0a01c04 	addi	r2,gp,-32656
    5f9c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
    5fa0:	d0a01c84 	addi	r2,gp,-32654
    5fa4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
    5fa8:	d0a01d04 	addi	r2,gp,-32652
    5fac:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
    5fb0:	d0a01d84 	addi	r2,gp,-32650
    5fb4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
    5fb8:	d0a01e04 	addi	r2,gp,-32648
    5fbc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
    5fc0:	d0a01e84 	addi	r2,gp,-32646
    5fc4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
    5fc8:	d0a01f04 	addi	r2,gp,-32644
    5fcc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
    5fd0:	d0a01f84 	addi	r2,gp,-32642
    5fd4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
    5fd8:	d0a02004 	addi	r2,gp,-32640
    5fdc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
    5fe0:	d0a02084 	addi	r2,gp,-32638
    5fe4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
    5fe8:	d0a02104 	addi	r2,gp,-32636
    5fec:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
    5ff0:	d0a02184 	addi	r2,gp,-32634
    5ff4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
    5ff8:	d0a02204 	addi	r2,gp,-32632
    5ffc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
    6000:	d0a02284 	addi	r2,gp,-32630
    6004:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
    6008:	d0a02304 	addi	r2,gp,-32628
    600c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
    6010:	d0a02384 	addi	r2,gp,-32626
    6014:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
    6018:	d0a02404 	addi	r2,gp,-32624
    601c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
    6020:	d0a02904 	addi	r2,gp,-32604
    6024:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
    6028:	0001883a 	nop
    602c:	e037883a 	mov	sp,fp
    6030:	df000017 	ldw	fp,0(sp)
    6034:	dec00104 	addi	sp,sp,4
    6038:	f800283a 	ret

0000603c <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
    603c:	defff204 	addi	sp,sp,-56
    6040:	df000d15 	stw	fp,52(sp)
    6044:	df000d04 	addi	fp,sp,52
    6048:	e13ff615 	stw	r4,-40(fp)
    604c:	2805883a 	mov	r2,r5
    6050:	3007883a 	mov	r3,r6
    6054:	e1fff315 	stw	r7,-52(fp)
    6058:	e0bff50d 	sth	r2,-44(fp)
    605c:	1805883a 	mov	r2,r3
    6060:	e0bff405 	stb	r2,-48(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    6064:	e03ffe15 	stw	zero,-8(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    6068:	e0bff317 	ldw	r2,-52(fp)
    606c:	1000021e 	bne	r2,zero,6078 <OSFlagAccept+0x3c>
        return ((OS_FLAGS)0);
    6070:	0005883a 	mov	r2,zero
    6074:	0000b606 	br	6350 <OSFlagAccept+0x314>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
    6078:	e0bff617 	ldw	r2,-40(fp)
    607c:	1000051e 	bne	r2,zero,6094 <OSFlagAccept+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    6080:	e0bff317 	ldw	r2,-52(fp)
    6084:	00c01b84 	movi	r3,110
    6088:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    608c:	0005883a 	mov	r2,zero
    6090:	0000af06 	br	6350 <OSFlagAccept+0x314>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
    6094:	e0bff617 	ldw	r2,-40(fp)
    6098:	10800003 	ldbu	r2,0(r2)
    609c:	10803fcc 	andi	r2,r2,255
    60a0:	10800160 	cmpeqi	r2,r2,5
    60a4:	1000051e 	bne	r2,zero,60bc <OSFlagAccept+0x80>
        *perr = OS_ERR_EVENT_TYPE;
    60a8:	e0bff317 	ldw	r2,-52(fp)
    60ac:	00c00044 	movi	r3,1
    60b0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    60b4:	0005883a 	mov	r2,zero
    60b8:	0000a506 	br	6350 <OSFlagAccept+0x314>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
    60bc:	e0fff403 	ldbu	r3,-48(fp)
    60c0:	00bfe004 	movi	r2,-128
    60c4:	1884703a 	and	r2,r3,r2
    60c8:	e0bffdc5 	stb	r2,-9(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
    60cc:	e0bffdc3 	ldbu	r2,-9(fp)
    60d0:	10000626 	beq	r2,zero,60ec <OSFlagAccept+0xb0>
        wait_type &= ~OS_FLAG_CONSUME;
    60d4:	e0bff403 	ldbu	r2,-48(fp)
    60d8:	10801fcc 	andi	r2,r2,127
    60dc:	e0bff405 	stb	r2,-48(fp)
        consume    = OS_TRUE;
    60e0:	00800044 	movi	r2,1
    60e4:	e0bfff45 	stb	r2,-3(fp)
    60e8:	00000106 	br	60f0 <OSFlagAccept+0xb4>
    } else {
        consume    = OS_FALSE;
    60ec:	e03fff45 	stb	zero,-3(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
    60f0:	e0bff317 	ldw	r2,-52(fp)
    60f4:	10000005 	stb	zero,0(r2)
  NIOS2_READ_STATUS (context);
    60f8:	0005303a 	rdctl	r2,status
    60fc:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6100:	e0fffc17 	ldw	r3,-16(fp)
    6104:	00bfff84 	movi	r2,-2
    6108:	1884703a 	and	r2,r3,r2
    610c:	1001703a 	wrctl	status,r2
  return context;
    6110:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
    6114:	e0bffe15 	stw	r2,-8(fp)
    switch (wait_type) {
    6118:	e0bff403 	ldbu	r2,-48(fp)
    611c:	10c000e0 	cmpeqi	r3,r2,3
    6120:	1800281e 	bne	r3,zero,61c4 <OSFlagAccept+0x188>
    6124:	10c00108 	cmpgei	r3,r2,4
    6128:	18007e1e 	bne	r3,zero,6324 <OSFlagAccept+0x2e8>
    612c:	10c000a0 	cmpeqi	r3,r2,2
    6130:	1800061e 	bne	r3,zero,614c <OSFlagAccept+0x110>
    6134:	10c000c8 	cmpgei	r3,r2,3
    6138:	18007a1e 	bne	r3,zero,6324 <OSFlagAccept+0x2e8>
    613c:	10003e26 	beq	r2,zero,6238 <OSFlagAccept+0x1fc>
    6140:	10800060 	cmpeqi	r2,r2,1
    6144:	10005a1e 	bne	r2,zero,62b0 <OSFlagAccept+0x274>
    6148:	00007606 	br	6324 <OSFlagAccept+0x2e8>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
    614c:	e0bff617 	ldw	r2,-40(fp)
    6150:	1080020b 	ldhu	r2,8(r2)
    6154:	e0fff50b 	ldhu	r3,-44(fp)
    6158:	1884703a 	and	r2,r3,r2
    615c:	e0bfff8d 	sth	r2,-2(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    6160:	e0ffff8b 	ldhu	r3,-2(fp)
    6164:	e0bff50b 	ldhu	r2,-44(fp)
    6168:	18800d1e 	bne	r3,r2,61a0 <OSFlagAccept+0x164>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    616c:	e0bfff43 	ldbu	r2,-3(fp)
    6170:	10800058 	cmpnei	r2,r2,1
    6174:	10000d1e 	bne	r2,zero,61ac <OSFlagAccept+0x170>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
    6178:	e0bff617 	ldw	r2,-40(fp)
    617c:	1080020b 	ldhu	r2,8(r2)
    6180:	1007883a 	mov	r3,r2
    6184:	e0bfff8b 	ldhu	r2,-2(fp)
    6188:	0084303a 	nor	r2,zero,r2
    618c:	1884703a 	and	r2,r3,r2
    6190:	1007883a 	mov	r3,r2
    6194:	e0bff617 	ldw	r2,-40(fp)
    6198:	10c0020d 	sth	r3,8(r2)
    619c:	00000306 	br	61ac <OSFlagAccept+0x170>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    61a0:	e0bff317 	ldw	r2,-52(fp)
    61a4:	00c01c04 	movi	r3,112
    61a8:	10c00005 	stb	r3,0(r2)
    61ac:	e0bffe17 	ldw	r2,-8(fp)
    61b0:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    61b4:	e0bffb17 	ldw	r2,-20(fp)
    61b8:	1001703a 	wrctl	status,r2
}
    61bc:	0001883a 	nop
             }
             OS_EXIT_CRITICAL();
             break;
    61c0:	00006206 	br	634c <OSFlagAccept+0x310>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
    61c4:	e0bff617 	ldw	r2,-40(fp)
    61c8:	1080020b 	ldhu	r2,8(r2)
    61cc:	e0fff50b 	ldhu	r3,-44(fp)
    61d0:	1884703a 	and	r2,r3,r2
    61d4:	e0bfff8d 	sth	r2,-2(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
    61d8:	e0bfff8b 	ldhu	r2,-2(fp)
    61dc:	10000d26 	beq	r2,zero,6214 <OSFlagAccept+0x1d8>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    61e0:	e0bfff43 	ldbu	r2,-3(fp)
    61e4:	10800058 	cmpnei	r2,r2,1
    61e8:	10000d1e 	bne	r2,zero,6220 <OSFlagAccept+0x1e4>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
    61ec:	e0bff617 	ldw	r2,-40(fp)
    61f0:	1080020b 	ldhu	r2,8(r2)
    61f4:	1007883a 	mov	r3,r2
    61f8:	e0bfff8b 	ldhu	r2,-2(fp)
    61fc:	0084303a 	nor	r2,zero,r2
    6200:	1884703a 	and	r2,r3,r2
    6204:	1007883a 	mov	r3,r2
    6208:	e0bff617 	ldw	r2,-40(fp)
    620c:	10c0020d 	sth	r3,8(r2)
    6210:	00000306 	br	6220 <OSFlagAccept+0x1e4>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    6214:	e0bff317 	ldw	r2,-52(fp)
    6218:	00c01c04 	movi	r3,112
    621c:	10c00005 	stb	r3,0(r2)
    6220:	e0bffe17 	ldw	r2,-8(fp)
    6224:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
    6228:	e0bffa17 	ldw	r2,-24(fp)
    622c:	1001703a 	wrctl	status,r2
}
    6230:	0001883a 	nop
             }
             OS_EXIT_CRITICAL();
             break;
    6234:	00004506 	br	634c <OSFlagAccept+0x310>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
    6238:	e0bff617 	ldw	r2,-40(fp)
    623c:	1080020b 	ldhu	r2,8(r2)
    6240:	0084303a 	nor	r2,zero,r2
    6244:	1007883a 	mov	r3,r2
    6248:	e0bff50b 	ldhu	r2,-44(fp)
    624c:	1884703a 	and	r2,r3,r2
    6250:	e0bfff8d 	sth	r2,-2(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    6254:	e0ffff8b 	ldhu	r3,-2(fp)
    6258:	e0bff50b 	ldhu	r2,-44(fp)
    625c:	18800b1e 	bne	r3,r2,628c <OSFlagAccept+0x250>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    6260:	e0bfff43 	ldbu	r2,-3(fp)
    6264:	10800058 	cmpnei	r2,r2,1
    6268:	10000b1e 	bne	r2,zero,6298 <OSFlagAccept+0x25c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
    626c:	e0bff617 	ldw	r2,-40(fp)
    6270:	1080020b 	ldhu	r2,8(r2)
    6274:	e0ffff8b 	ldhu	r3,-2(fp)
    6278:	1884b03a 	or	r2,r3,r2
    627c:	1007883a 	mov	r3,r2
    6280:	e0bff617 	ldw	r2,-40(fp)
    6284:	10c0020d 	sth	r3,8(r2)
    6288:	00000306 	br	6298 <OSFlagAccept+0x25c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    628c:	e0bff317 	ldw	r2,-52(fp)
    6290:	00c01c04 	movi	r3,112
    6294:	10c00005 	stb	r3,0(r2)
    6298:	e0bffe17 	ldw	r2,-8(fp)
    629c:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
    62a0:	e0bff917 	ldw	r2,-28(fp)
    62a4:	1001703a 	wrctl	status,r2
}
    62a8:	0001883a 	nop
             }
             OS_EXIT_CRITICAL();
             break;
    62ac:	00002706 	br	634c <OSFlagAccept+0x310>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
    62b0:	e0bff617 	ldw	r2,-40(fp)
    62b4:	1080020b 	ldhu	r2,8(r2)
    62b8:	0084303a 	nor	r2,zero,r2
    62bc:	1007883a 	mov	r3,r2
    62c0:	e0bff50b 	ldhu	r2,-44(fp)
    62c4:	1884703a 	and	r2,r3,r2
    62c8:	e0bfff8d 	sth	r2,-2(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
    62cc:	e0bfff8b 	ldhu	r2,-2(fp)
    62d0:	10000b26 	beq	r2,zero,6300 <OSFlagAccept+0x2c4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    62d4:	e0bfff43 	ldbu	r2,-3(fp)
    62d8:	10800058 	cmpnei	r2,r2,1
    62dc:	10000b1e 	bne	r2,zero,630c <OSFlagAccept+0x2d0>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
    62e0:	e0bff617 	ldw	r2,-40(fp)
    62e4:	1080020b 	ldhu	r2,8(r2)
    62e8:	e0ffff8b 	ldhu	r3,-2(fp)
    62ec:	1884b03a 	or	r2,r3,r2
    62f0:	1007883a 	mov	r3,r2
    62f4:	e0bff617 	ldw	r2,-40(fp)
    62f8:	10c0020d 	sth	r3,8(r2)
    62fc:	00000306 	br	630c <OSFlagAccept+0x2d0>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    6300:	e0bff317 	ldw	r2,-52(fp)
    6304:	00c01c04 	movi	r3,112
    6308:	10c00005 	stb	r3,0(r2)
    630c:	e0bffe17 	ldw	r2,-8(fp)
    6310:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
    6314:	e0bff817 	ldw	r2,-32(fp)
    6318:	1001703a 	wrctl	status,r2
}
    631c:	0001883a 	nop
             }
             OS_EXIT_CRITICAL();
             break;
    6320:	00000a06 	br	634c <OSFlagAccept+0x310>
    6324:	e0bffe17 	ldw	r2,-8(fp)
    6328:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context);
    632c:	e0bff717 	ldw	r2,-36(fp)
    6330:	1001703a 	wrctl	status,r2
}
    6334:	0001883a 	nop
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
    6338:	e03fff8d 	sth	zero,-2(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
    633c:	e0bff317 	ldw	r2,-52(fp)
    6340:	00c01bc4 	movi	r3,111
    6344:	10c00005 	stb	r3,0(r2)
             break;
    6348:	0001883a 	nop
    }
    return (flags_rdy);
    634c:	e0bfff8b 	ldhu	r2,-2(fp)
}
    6350:	e037883a 	mov	sp,fp
    6354:	df000017 	ldw	fp,0(sp)
    6358:	dec00104 	addi	sp,sp,4
    635c:	f800283a 	ret

00006360 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
    6360:	defff804 	addi	sp,sp,-32
    6364:	df000715 	stw	fp,28(sp)
    6368:	df000704 	addi	fp,sp,28
    636c:	2005883a 	mov	r2,r4
    6370:	e17ff915 	stw	r5,-28(fp)
    6374:	e0bffa0d 	sth	r2,-24(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
    6378:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
    637c:	e0bff917 	ldw	r2,-28(fp)
    6380:	1000021e 	bne	r2,zero,638c <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
    6384:	0005883a 	mov	r2,zero
    6388:	00003506 	br	6460 <OSFlagCreate+0x100>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
    638c:	d0a7bf43 	ldbu	r2,-24835(gp)
    6390:	10803fcc 	andi	r2,r2,255
    6394:	10000526 	beq	r2,zero,63ac <OSFlagCreate+0x4c>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
    6398:	e0bff917 	ldw	r2,-28(fp)
    639c:	00c00404 	movi	r3,16
    63a0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
    63a4:	0005883a 	mov	r2,zero
    63a8:	00002d06 	br	6460 <OSFlagCreate+0x100>
  NIOS2_READ_STATUS (context);
    63ac:	0005303a 	rdctl	r2,status
    63b0:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    63b4:	e0fffd17 	ldw	r3,-12(fp)
    63b8:	00bfff84 	movi	r2,-2
    63bc:	1884703a 	and	r2,r3,r2
    63c0:	1001703a 	wrctl	status,r2
  return context;
    63c4:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    63c8:	e0bfff15 	stw	r2,-4(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
    63cc:	d0a7bb17 	ldw	r2,-24852(gp)
    63d0:	e0bffe15 	stw	r2,-8(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
    63d4:	e0bffe17 	ldw	r2,-8(fp)
    63d8:	10001826 	beq	r2,zero,643c <OSFlagCreate+0xdc>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
    63dc:	d0a7bb17 	ldw	r2,-24852(gp)
    63e0:	10800117 	ldw	r2,4(r2)
    63e4:	d0a7bb15 	stw	r2,-24852(gp)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
    63e8:	e0bffe17 	ldw	r2,-8(fp)
    63ec:	00c00144 	movi	r3,5
    63f0:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
    63f4:	e0bffe17 	ldw	r2,-8(fp)
    63f8:	e0fffa0b 	ldhu	r3,-24(fp)
    63fc:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
    6400:	e0bffe17 	ldw	r2,-8(fp)
    6404:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
    6408:	e0bffe17 	ldw	r2,-8(fp)
    640c:	00c00fc4 	movi	r3,63
    6410:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
    6414:	e0bffe17 	ldw	r2,-8(fp)
    6418:	100002c5 	stb	zero,11(r2)
    641c:	e0bfff17 	ldw	r2,-4(fp)
    6420:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    6424:	e0bffc17 	ldw	r2,-16(fp)
    6428:	1001703a 	wrctl	status,r2
}
    642c:	0001883a 	nop
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
    6430:	e0bff917 	ldw	r2,-28(fp)
    6434:	10000005 	stb	zero,0(r2)
    6438:	00000806 	br	645c <OSFlagCreate+0xfc>
    643c:	e0bfff17 	ldw	r2,-4(fp)
    6440:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    6444:	e0bffb17 	ldw	r2,-20(fp)
    6448:	1001703a 	wrctl	status,r2
}
    644c:	0001883a 	nop
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
    6450:	e0bff917 	ldw	r2,-28(fp)
    6454:	00c01c84 	movi	r3,114
    6458:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
    645c:	e0bffe17 	ldw	r2,-8(fp)
}
    6460:	e037883a 	mov	sp,fp
    6464:	df000017 	ldw	fp,0(sp)
    6468:	dec00104 	addi	sp,sp,4
    646c:	f800283a 	ret

00006470 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
    6470:	defff204 	addi	sp,sp,-56
    6474:	dfc00d15 	stw	ra,52(sp)
    6478:	df000c15 	stw	fp,48(sp)
    647c:	df000c04 	addi	fp,sp,48
    6480:	e13ff615 	stw	r4,-40(fp)
    6484:	2805883a 	mov	r2,r5
    6488:	e1bff415 	stw	r6,-48(fp)
    648c:	e0bff505 	stb	r2,-44(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    6490:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    6494:	e0bff417 	ldw	r2,-48(fp)
    6498:	1000021e 	bne	r2,zero,64a4 <OSFlagDel+0x34>
        return (pgrp);
    649c:	e0bff617 	ldw	r2,-40(fp)
    64a0:	00008406 	br	66b4 <OSFlagDel+0x244>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
    64a4:	e0bff617 	ldw	r2,-40(fp)
    64a8:	1000051e 	bne	r2,zero,64c0 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    64ac:	e0bff417 	ldw	r2,-48(fp)
    64b0:	00c01b84 	movi	r3,110
    64b4:	10c00005 	stb	r3,0(r2)
        return (pgrp);
    64b8:	e0bff617 	ldw	r2,-40(fp)
    64bc:	00007d06 	br	66b4 <OSFlagDel+0x244>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    64c0:	d0a7bf43 	ldbu	r2,-24835(gp)
    64c4:	10803fcc 	andi	r2,r2,255
    64c8:	10000526 	beq	r2,zero,64e0 <OSFlagDel+0x70>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
    64cc:	e0bff417 	ldw	r2,-48(fp)
    64d0:	00c003c4 	movi	r3,15
    64d4:	10c00005 	stb	r3,0(r2)
        return (pgrp);
    64d8:	e0bff617 	ldw	r2,-40(fp)
    64dc:	00007506 	br	66b4 <OSFlagDel+0x244>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
    64e0:	e0bff617 	ldw	r2,-40(fp)
    64e4:	10800003 	ldbu	r2,0(r2)
    64e8:	10803fcc 	andi	r2,r2,255
    64ec:	10800160 	cmpeqi	r2,r2,5
    64f0:	1000051e 	bne	r2,zero,6508 <OSFlagDel+0x98>
        *perr = OS_ERR_EVENT_TYPE;
    64f4:	e0bff417 	ldw	r2,-48(fp)
    64f8:	00c00044 	movi	r3,1
    64fc:	10c00005 	stb	r3,0(r2)
        return (pgrp);
    6500:	e0bff617 	ldw	r2,-40(fp)
    6504:	00006b06 	br	66b4 <OSFlagDel+0x244>
  NIOS2_READ_STATUS (context);
    6508:	0005303a 	rdctl	r2,status
    650c:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6510:	e0fffb17 	ldw	r3,-20(fp)
    6514:	00bfff84 	movi	r2,-2
    6518:	1884703a 	and	r2,r3,r2
    651c:	1001703a 	wrctl	status,r2
  return context;
    6520:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
    6524:	e0bffc15 	stw	r2,-16(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
    6528:	e0bff617 	ldw	r2,-40(fp)
    652c:	10800117 	ldw	r2,4(r2)
    6530:	10000326 	beq	r2,zero,6540 <OSFlagDel+0xd0>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    6534:	00800044 	movi	r2,1
    6538:	e0bfffc5 	stb	r2,-1(fp)
    653c:	00000106 	br	6544 <OSFlagDel+0xd4>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    6540:	e03fffc5 	stb	zero,-1(fp)
    }
    switch (opt) {
    6544:	e0bff503 	ldbu	r2,-44(fp)
    6548:	10000326 	beq	r2,zero,6558 <OSFlagDel+0xe8>
    654c:	10800060 	cmpeqi	r2,r2,1
    6550:	1000251e 	bne	r2,zero,65e8 <OSFlagDel+0x178>
    6554:	00004b06 	br	6684 <OSFlagDel+0x214>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
    6558:	e0bfffc3 	ldbu	r2,-1(fp)
    655c:	1000171e 	bne	r2,zero,65bc <OSFlagDel+0x14c>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
    6560:	e0bff617 	ldw	r2,-40(fp)
    6564:	00c00fc4 	movi	r3,63
    6568:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
    656c:	e0bff617 	ldw	r2,-40(fp)
    6570:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    6574:	e0bff617 	ldw	r2,-40(fp)
    6578:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
    657c:	d0e7bb17 	ldw	r3,-24852(gp)
    6580:	e0bff617 	ldw	r2,-40(fp)
    6584:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
    6588:	e0bff617 	ldw	r2,-40(fp)
    658c:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
    6590:	e0bff617 	ldw	r2,-40(fp)
    6594:	d0a7bb15 	stw	r2,-24852(gp)
    6598:	e0bffc17 	ldw	r2,-16(fp)
    659c:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
    65a0:	e0bffa17 	ldw	r2,-24(fp)
    65a4:	1001703a 	wrctl	status,r2
}
    65a8:	0001883a 	nop
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
    65ac:	e0bff417 	ldw	r2,-48(fp)
    65b0:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
    65b4:	e03ffd15 	stw	zero,-12(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
    65b8:	00003d06 	br	66b0 <OSFlagDel+0x240>
    65bc:	e0bffc17 	ldw	r2,-16(fp)
    65c0:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
    65c4:	e0bff917 	ldw	r2,-28(fp)
    65c8:	1001703a 	wrctl	status,r2
}
    65cc:	0001883a 	nop
                 *perr                = OS_ERR_TASK_WAITING;
    65d0:	e0bff417 	ldw	r2,-48(fp)
    65d4:	00c01244 	movi	r3,73
    65d8:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
    65dc:	e0bff617 	ldw	r2,-40(fp)
    65e0:	e0bffd15 	stw	r2,-12(fp)
             break;
    65e4:	00003206 	br	66b0 <OSFlagDel+0x240>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    65e8:	e0bff617 	ldw	r2,-40(fp)
    65ec:	10800117 	ldw	r2,4(r2)
    65f0:	e0bffe15 	stw	r2,-8(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
    65f4:	00000606 	br	6610 <OSFlagDel+0x1a0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
    65f8:	000b883a 	mov	r5,zero
    65fc:	e13ffe17 	ldw	r4,-8(fp)
    6600:	00076680 	call	7668 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
    6604:	e0bffe17 	ldw	r2,-8(fp)
    6608:	10800017 	ldw	r2,0(r2)
    660c:	e0bffe15 	stw	r2,-8(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
    6610:	e0bffe17 	ldw	r2,-8(fp)
    6614:	103ff81e 	bne	r2,zero,65f8 <OSFlagDel+0x188>
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
    6618:	e0bff617 	ldw	r2,-40(fp)
    661c:	00c00fc4 	movi	r3,63
    6620:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
    6624:	e0bff617 	ldw	r2,-40(fp)
    6628:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    662c:	e0bff617 	ldw	r2,-40(fp)
    6630:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
    6634:	d0e7bb17 	ldw	r3,-24852(gp)
    6638:	e0bff617 	ldw	r2,-40(fp)
    663c:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
    6640:	e0bff617 	ldw	r2,-40(fp)
    6644:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
    6648:	e0bff617 	ldw	r2,-40(fp)
    664c:	d0a7bb15 	stw	r2,-24852(gp)
    6650:	e0bffc17 	ldw	r2,-16(fp)
    6654:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
    6658:	e0bff817 	ldw	r2,-32(fp)
    665c:	1001703a 	wrctl	status,r2
}
    6660:	0001883a 	nop
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
    6664:	e0bfffc3 	ldbu	r2,-1(fp)
    6668:	10800058 	cmpnei	r2,r2,1
    666c:	1000011e 	bne	r2,zero,6674 <OSFlagDel+0x204>
                 OS_Sched();                               /* Find highest priority task ready to run  */
    6670:	00057e40 	call	57e4 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
    6674:	e0bff417 	ldw	r2,-48(fp)
    6678:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
    667c:	e03ffd15 	stw	zero,-12(fp)
             break;
    6680:	00000b06 	br	66b0 <OSFlagDel+0x240>
    6684:	e0bffc17 	ldw	r2,-16(fp)
    6688:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context);
    668c:	e0bff717 	ldw	r2,-36(fp)
    6690:	1001703a 	wrctl	status,r2
}
    6694:	0001883a 	nop

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
    6698:	e0bff417 	ldw	r2,-48(fp)
    669c:	00c001c4 	movi	r3,7
    66a0:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
    66a4:	e0bff617 	ldw	r2,-40(fp)
    66a8:	e0bffd15 	stw	r2,-12(fp)
             break;
    66ac:	0001883a 	nop
    }
    return (pgrp_return);
    66b0:	e0bffd17 	ldw	r2,-12(fp)
}
    66b4:	e037883a 	mov	sp,fp
    66b8:	dfc00117 	ldw	ra,4(sp)
    66bc:	df000017 	ldw	fp,0(sp)
    66c0:	dec00204 	addi	sp,sp,8
    66c4:	f800283a 	ret

000066c8 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
    66c8:	defff604 	addi	sp,sp,-40
    66cc:	dfc00915 	stw	ra,36(sp)
    66d0:	df000815 	stw	fp,32(sp)
    66d4:	df000804 	addi	fp,sp,32
    66d8:	e13ffa15 	stw	r4,-24(fp)
    66dc:	e17ff915 	stw	r5,-28(fp)
    66e0:	e1bff815 	stw	r6,-32(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    66e4:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    66e8:	e0bff817 	ldw	r2,-32(fp)
    66ec:	1000021e 	bne	r2,zero,66f8 <OSFlagNameGet+0x30>
        return (0);
    66f0:	0005883a 	mov	r2,zero
    66f4:	00003b06 	br	67e4 <OSFlagNameGet+0x11c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
    66f8:	e0bffa17 	ldw	r2,-24(fp)
    66fc:	1000051e 	bne	r2,zero,6714 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    6700:	e0bff817 	ldw	r2,-32(fp)
    6704:	00c01b84 	movi	r3,110
    6708:	10c00005 	stb	r3,0(r2)
        return (0);
    670c:	0005883a 	mov	r2,zero
    6710:	00003406 	br	67e4 <OSFlagNameGet+0x11c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    6714:	e0bff917 	ldw	r2,-28(fp)
    6718:	1000051e 	bne	r2,zero,6730 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
    671c:	e0bff817 	ldw	r2,-32(fp)
    6720:	00c00304 	movi	r3,12
    6724:	10c00005 	stb	r3,0(r2)
        return (0);
    6728:	0005883a 	mov	r2,zero
    672c:	00002d06 	br	67e4 <OSFlagNameGet+0x11c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    6730:	d0a7bf43 	ldbu	r2,-24835(gp)
    6734:	10803fcc 	andi	r2,r2,255
    6738:	10000526 	beq	r2,zero,6750 <OSFlagNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
    673c:	e0bff817 	ldw	r2,-32(fp)
    6740:	00c00444 	movi	r3,17
    6744:	10c00005 	stb	r3,0(r2)
        return (0);
    6748:	0005883a 	mov	r2,zero
    674c:	00002506 	br	67e4 <OSFlagNameGet+0x11c>
  NIOS2_READ_STATUS (context);
    6750:	0005303a 	rdctl	r2,status
    6754:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6758:	e0fffd17 	ldw	r3,-12(fp)
    675c:	00bfff84 	movi	r2,-2
    6760:	1884703a 	and	r2,r3,r2
    6764:	1001703a 	wrctl	status,r2
  return context;
    6768:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    676c:	e0bfff15 	stw	r2,-4(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
    6770:	e0bffa17 	ldw	r2,-24(fp)
    6774:	10800003 	ldbu	r2,0(r2)
    6778:	10803fcc 	andi	r2,r2,255
    677c:	10800160 	cmpeqi	r2,r2,5
    6780:	10000a1e 	bne	r2,zero,67ac <OSFlagNameGet+0xe4>
    6784:	e0bfff17 	ldw	r2,-4(fp)
    6788:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    678c:	e0bffc17 	ldw	r2,-16(fp)
    6790:	1001703a 	wrctl	status,r2
}
    6794:	0001883a 	nop
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
    6798:	e0bff817 	ldw	r2,-32(fp)
    679c:	00c00044 	movi	r3,1
    67a0:	10c00005 	stb	r3,0(r2)
        return (0);
    67a4:	0005883a 	mov	r2,zero
    67a8:	00000e06 	br	67e4 <OSFlagNameGet+0x11c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
    67ac:	e0bffa17 	ldw	r2,-24(fp)
    67b0:	10800284 	addi	r2,r2,10
    67b4:	100b883a 	mov	r5,r2
    67b8:	e13ff917 	ldw	r4,-28(fp)
    67bc:	000591c0 	call	591c <OS_StrCopy>
    67c0:	e0bffec5 	stb	r2,-5(fp)
    67c4:	e0bfff17 	ldw	r2,-4(fp)
    67c8:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    67cc:	e0bffb17 	ldw	r2,-20(fp)
    67d0:	1001703a 	wrctl	status,r2
}
    67d4:	0001883a 	nop
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    67d8:	e0bff817 	ldw	r2,-32(fp)
    67dc:	10000005 	stb	zero,0(r2)
    return (len);
    67e0:	e0bffec3 	ldbu	r2,-5(fp)
}
    67e4:	e037883a 	mov	sp,fp
    67e8:	dfc00117 	ldw	ra,4(sp)
    67ec:	df000017 	ldw	fp,0(sp)
    67f0:	dec00204 	addi	sp,sp,8
    67f4:	f800283a 	ret

000067f8 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
    67f8:	defff504 	addi	sp,sp,-44
    67fc:	dfc00a15 	stw	ra,40(sp)
    6800:	df000915 	stw	fp,36(sp)
    6804:	df000904 	addi	fp,sp,36
    6808:	e13ff915 	stw	r4,-28(fp)
    680c:	e17ff815 	stw	r5,-32(fp)
    6810:	e1bff715 	stw	r6,-36(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    6814:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    6818:	e0bff717 	ldw	r2,-36(fp)
    681c:	10004526 	beq	r2,zero,6934 <OSFlagNameSet+0x13c>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
    6820:	e0bff917 	ldw	r2,-28(fp)
    6824:	1000041e 	bne	r2,zero,6838 <OSFlagNameSet+0x40>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    6828:	e0bff717 	ldw	r2,-36(fp)
    682c:	00c01b84 	movi	r3,110
    6830:	10c00005 	stb	r3,0(r2)
        return;
    6834:	00004006 	br	6938 <OSFlagNameSet+0x140>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    6838:	e0bff817 	ldw	r2,-32(fp)
    683c:	1000041e 	bne	r2,zero,6850 <OSFlagNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
    6840:	e0bff717 	ldw	r2,-36(fp)
    6844:	00c00304 	movi	r3,12
    6848:	10c00005 	stb	r3,0(r2)
        return;
    684c:	00003a06 	br	6938 <OSFlagNameSet+0x140>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    6850:	d0a7bf43 	ldbu	r2,-24835(gp)
    6854:	10803fcc 	andi	r2,r2,255
    6858:	10000426 	beq	r2,zero,686c <OSFlagNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
    685c:	e0bff717 	ldw	r2,-36(fp)
    6860:	00c00484 	movi	r3,18
    6864:	10c00005 	stb	r3,0(r2)
        return;
    6868:	00003306 	br	6938 <OSFlagNameSet+0x140>
  NIOS2_READ_STATUS (context);
    686c:	0005303a 	rdctl	r2,status
    6870:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6874:	e0fffd17 	ldw	r3,-12(fp)
    6878:	00bfff84 	movi	r2,-2
    687c:	1884703a 	and	r2,r3,r2
    6880:	1001703a 	wrctl	status,r2
  return context;
    6884:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    6888:	e0bfff15 	stw	r2,-4(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
    688c:	e0bff917 	ldw	r2,-28(fp)
    6890:	10800003 	ldbu	r2,0(r2)
    6894:	10803fcc 	andi	r2,r2,255
    6898:	10800160 	cmpeqi	r2,r2,5
    689c:	1000091e 	bne	r2,zero,68c4 <OSFlagNameSet+0xcc>
    68a0:	e0bfff17 	ldw	r2,-4(fp)
    68a4:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    68a8:	e0bffc17 	ldw	r2,-16(fp)
    68ac:	1001703a 	wrctl	status,r2
}
    68b0:	0001883a 	nop
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
    68b4:	e0bff717 	ldw	r2,-36(fp)
    68b8:	00c00044 	movi	r3,1
    68bc:	10c00005 	stb	r3,0(r2)
        return;
    68c0:	00001d06 	br	6938 <OSFlagNameSet+0x140>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
    68c4:	e13ff817 	ldw	r4,-32(fp)
    68c8:	00059900 	call	5990 <OS_StrLen>
    68cc:	e0bffec5 	stb	r2,-5(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
    68d0:	e0bffec3 	ldbu	r2,-5(fp)
    68d4:	10800830 	cmpltui	r2,r2,32
    68d8:	1000091e 	bne	r2,zero,6900 <OSFlagNameSet+0x108>
    68dc:	e0bfff17 	ldw	r2,-4(fp)
    68e0:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    68e4:	e0bffb17 	ldw	r2,-20(fp)
    68e8:	1001703a 	wrctl	status,r2
}
    68ec:	0001883a 	nop
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
    68f0:	e0bff717 	ldw	r2,-36(fp)
    68f4:	00c01cc4 	movi	r3,115
    68f8:	10c00005 	stb	r3,0(r2)
        return;
    68fc:	00000e06 	br	6938 <OSFlagNameSet+0x140>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    6900:	e0bff917 	ldw	r2,-28(fp)
    6904:	10800284 	addi	r2,r2,10
    6908:	e17ff817 	ldw	r5,-32(fp)
    690c:	1009883a 	mov	r4,r2
    6910:	000591c0 	call	591c <OS_StrCopy>
    6914:	e0bfff17 	ldw	r2,-4(fp)
    6918:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
    691c:	e0bffa17 	ldw	r2,-24(fp)
    6920:	1001703a 	wrctl	status,r2
}
    6924:	0001883a 	nop
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    6928:	e0bff717 	ldw	r2,-36(fp)
    692c:	10000005 	stb	zero,0(r2)
    return;
    6930:	00000106 	br	6938 <OSFlagNameSet+0x140>
        return;
    6934:	0001883a 	nop
}
    6938:	e037883a 	mov	sp,fp
    693c:	dfc00117 	ldw	ra,4(sp)
    6940:	df000017 	ldw	fp,0(sp)
    6944:	dec00204 	addi	sp,sp,8
    6948:	f800283a 	ret

0000694c <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
    694c:	deffe204 	addi	sp,sp,-120
    6950:	dfc01d15 	stw	ra,116(sp)
    6954:	df001c15 	stw	fp,112(sp)
    6958:	df001c04 	addi	fp,sp,112
    695c:	e13fe815 	stw	r4,-96(fp)
    6960:	2805883a 	mov	r2,r5
    6964:	3009883a 	mov	r4,r6
    6968:	3807883a 	mov	r3,r7
    696c:	e0bfe70d 	sth	r2,-100(fp)
    6970:	2005883a 	mov	r2,r4
    6974:	e0bfe605 	stb	r2,-104(fp)
    6978:	1805883a 	mov	r2,r3
    697c:	e0bfe50d 	sth	r2,-108(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    6980:	e03ffe15 	stw	zero,-8(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    6984:	e0800217 	ldw	r2,8(fp)
    6988:	1000021e 	bne	r2,zero,6994 <OSFlagPend+0x48>
        return ((OS_FLAGS)0);
    698c:	0005883a 	mov	r2,zero
    6990:	00016906 	br	6f38 <OSFlagPend+0x5ec>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
    6994:	e0bfe817 	ldw	r2,-96(fp)
    6998:	1000051e 	bne	r2,zero,69b0 <OSFlagPend+0x64>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    699c:	e0800217 	ldw	r2,8(fp)
    69a0:	00c01b84 	movi	r3,110
    69a4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    69a8:	0005883a 	mov	r2,zero
    69ac:	00016206 	br	6f38 <OSFlagPend+0x5ec>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    69b0:	d0a7bf43 	ldbu	r2,-24835(gp)
    69b4:	10803fcc 	andi	r2,r2,255
    69b8:	10000526 	beq	r2,zero,69d0 <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
    69bc:	e0800217 	ldw	r2,8(fp)
    69c0:	00c00084 	movi	r3,2
    69c4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    69c8:	0005883a 	mov	r2,zero
    69cc:	00015a06 	br	6f38 <OSFlagPend+0x5ec>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
    69d0:	d0a7bf83 	ldbu	r2,-24834(gp)
    69d4:	10803fcc 	andi	r2,r2,255
    69d8:	10000526 	beq	r2,zero,69f0 <OSFlagPend+0xa4>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
    69dc:	e0800217 	ldw	r2,8(fp)
    69e0:	00c00344 	movi	r3,13
    69e4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    69e8:	0005883a 	mov	r2,zero
    69ec:	00015206 	br	6f38 <OSFlagPend+0x5ec>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
    69f0:	e0bfe817 	ldw	r2,-96(fp)
    69f4:	10800003 	ldbu	r2,0(r2)
    69f8:	10803fcc 	andi	r2,r2,255
    69fc:	10800160 	cmpeqi	r2,r2,5
    6a00:	1000051e 	bne	r2,zero,6a18 <OSFlagPend+0xcc>
        *perr = OS_ERR_EVENT_TYPE;
    6a04:	e0800217 	ldw	r2,8(fp)
    6a08:	00c00044 	movi	r3,1
    6a0c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    6a10:	0005883a 	mov	r2,zero
    6a14:	00014806 	br	6f38 <OSFlagPend+0x5ec>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
    6a18:	e0ffe603 	ldbu	r3,-104(fp)
    6a1c:	00bfe004 	movi	r2,-128
    6a20:	1884703a 	and	r2,r3,r2
    6a24:	e0bffdc5 	stb	r2,-9(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
    6a28:	e0bffdc3 	ldbu	r2,-9(fp)
    6a2c:	10000626 	beq	r2,zero,6a48 <OSFlagPend+0xfc>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
    6a30:	e0bfe603 	ldbu	r2,-104(fp)
    6a34:	10801fcc 	andi	r2,r2,127
    6a38:	e0bfe605 	stb	r2,-104(fp)
        consume    = OS_TRUE;
    6a3c:	00800044 	movi	r2,1
    6a40:	e0bfffc5 	stb	r2,-1(fp)
    6a44:	00000106 	br	6a4c <OSFlagPend+0x100>
    } else {
        consume    = OS_FALSE;
    6a48:	e03fffc5 	stb	zero,-1(fp)
  NIOS2_READ_STATUS (context);
    6a4c:	0005303a 	rdctl	r2,status
    6a50:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6a54:	e0fffb17 	ldw	r3,-20(fp)
    6a58:	00bfff84 	movi	r2,-2
    6a5c:	1884703a 	and	r2,r3,r2
    6a60:	1001703a 	wrctl	status,r2
  return context;
    6a64:	e0bffb17 	ldw	r2,-20(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
    6a68:	e0bffe15 	stw	r2,-8(fp)
    switch (wait_type) {
    6a6c:	e0bfe603 	ldbu	r2,-104(fp)
    6a70:	10c000e0 	cmpeqi	r3,r2,3
    6a74:	18003a1e 	bne	r3,zero,6b60 <OSFlagPend+0x214>
    6a78:	10c00108 	cmpgei	r3,r2,4
    6a7c:	1800c61e 	bne	r3,zero,6d98 <OSFlagPend+0x44c>
    6a80:	10c000a0 	cmpeqi	r3,r2,2
    6a84:	1800061e 	bne	r3,zero,6aa0 <OSFlagPend+0x154>
    6a88:	10c000c8 	cmpgei	r3,r2,3
    6a8c:	1800c21e 	bne	r3,zero,6d98 <OSFlagPend+0x44c>
    6a90:	10006226 	beq	r2,zero,6c1c <OSFlagPend+0x2d0>
    6a94:	10800060 	cmpeqi	r2,r2,1
    6a98:	1000901e 	bne	r2,zero,6cdc <OSFlagPend+0x390>
    6a9c:	0000be06 	br	6d98 <OSFlagPend+0x44c>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
    6aa0:	e0bfe817 	ldw	r2,-96(fp)
    6aa4:	1080020b 	ldhu	r2,8(r2)
    6aa8:	e0ffe70b 	ldhu	r3,-100(fp)
    6aac:	1884703a 	and	r2,r3,r2
    6ab0:	e0bffd0d 	sth	r2,-12(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    6ab4:	e0fffd0b 	ldhu	r3,-12(fp)
    6ab8:	e0bfe70b 	ldhu	r2,-100(fp)
    6abc:	1880181e 	bne	r3,r2,6b20 <OSFlagPend+0x1d4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    6ac0:	e0bfffc3 	ldbu	r2,-1(fp)
    6ac4:	10800058 	cmpnei	r2,r2,1
    6ac8:	1000091e 	bne	r2,zero,6af0 <OSFlagPend+0x1a4>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
    6acc:	e0bfe817 	ldw	r2,-96(fp)
    6ad0:	1080020b 	ldhu	r2,8(r2)
    6ad4:	1007883a 	mov	r3,r2
    6ad8:	e0bffd0b 	ldhu	r2,-12(fp)
    6adc:	0084303a 	nor	r2,zero,r2
    6ae0:	1884703a 	and	r2,r3,r2
    6ae4:	1007883a 	mov	r3,r2
    6ae8:	e0bfe817 	ldw	r2,-96(fp)
    6aec:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    6af0:	d0a7c317 	ldw	r2,-24820(gp)
    6af4:	e0fffd0b 	ldhu	r3,-12(fp)
    6af8:	10c00b0d 	sth	r3,44(r2)
    6afc:	e0bffe17 	ldw	r2,-8(fp)
    6b00:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
    6b04:	e0bffa17 	ldw	r2,-24(fp)
    6b08:	1001703a 	wrctl	status,r2
}
    6b0c:	0001883a 	nop
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    6b10:	e0800217 	ldw	r2,8(fp)
    6b14:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
    6b18:	e0bffd0b 	ldhu	r2,-12(fp)
    6b1c:	00010606 	br	6f38 <OSFlagPend+0x5ec>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    6b20:	e13fe70b 	ldhu	r4,-100(fp)
    6b24:	e17fe603 	ldbu	r5,-104(fp)
    6b28:	e0bfe50b 	ldhu	r2,-108(fp)
    6b2c:	e0ffe904 	addi	r3,fp,-92
    6b30:	d8800015 	stw	r2,0(sp)
    6b34:	280f883a 	mov	r7,r5
    6b38:	200d883a 	mov	r6,r4
    6b3c:	180b883a 	mov	r5,r3
    6b40:	e13fe817 	ldw	r4,-96(fp)
    6b44:	00074240 	call	7424 <OS_FlagBlock>
    6b48:	e0bffe17 	ldw	r2,-8(fp)
    6b4c:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
    6b50:	e0bff917 	ldw	r2,-28(fp)
    6b54:	1001703a 	wrctl	status,r2
}
    6b58:	0001883a 	nop
                 OS_EXIT_CRITICAL();
             }
             break;
    6b5c:	00009906 	br	6dc4 <OSFlagPend+0x478>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
    6b60:	e0bfe817 	ldw	r2,-96(fp)
    6b64:	1080020b 	ldhu	r2,8(r2)
    6b68:	e0ffe70b 	ldhu	r3,-100(fp)
    6b6c:	1884703a 	and	r2,r3,r2
    6b70:	e0bffd0d 	sth	r2,-12(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
    6b74:	e0bffd0b 	ldhu	r2,-12(fp)
    6b78:	10001826 	beq	r2,zero,6bdc <OSFlagPend+0x290>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    6b7c:	e0bfffc3 	ldbu	r2,-1(fp)
    6b80:	10800058 	cmpnei	r2,r2,1
    6b84:	1000091e 	bne	r2,zero,6bac <OSFlagPend+0x260>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
    6b88:	e0bfe817 	ldw	r2,-96(fp)
    6b8c:	1080020b 	ldhu	r2,8(r2)
    6b90:	1007883a 	mov	r3,r2
    6b94:	e0bffd0b 	ldhu	r2,-12(fp)
    6b98:	0084303a 	nor	r2,zero,r2
    6b9c:	1884703a 	and	r2,r3,r2
    6ba0:	1007883a 	mov	r3,r2
    6ba4:	e0bfe817 	ldw	r2,-96(fp)
    6ba8:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    6bac:	d0a7c317 	ldw	r2,-24820(gp)
    6bb0:	e0fffd0b 	ldhu	r3,-12(fp)
    6bb4:	10c00b0d 	sth	r3,44(r2)
    6bb8:	e0bffe17 	ldw	r2,-8(fp)
    6bbc:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
    6bc0:	e0bff817 	ldw	r2,-32(fp)
    6bc4:	1001703a 	wrctl	status,r2
}
    6bc8:	0001883a 	nop
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    6bcc:	e0800217 	ldw	r2,8(fp)
    6bd0:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
    6bd4:	e0bffd0b 	ldhu	r2,-12(fp)
    6bd8:	0000d706 	br	6f38 <OSFlagPend+0x5ec>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    6bdc:	e13fe70b 	ldhu	r4,-100(fp)
    6be0:	e17fe603 	ldbu	r5,-104(fp)
    6be4:	e0bfe50b 	ldhu	r2,-108(fp)
    6be8:	e0ffe904 	addi	r3,fp,-92
    6bec:	d8800015 	stw	r2,0(sp)
    6bf0:	280f883a 	mov	r7,r5
    6bf4:	200d883a 	mov	r6,r4
    6bf8:	180b883a 	mov	r5,r3
    6bfc:	e13fe817 	ldw	r4,-96(fp)
    6c00:	00074240 	call	7424 <OS_FlagBlock>
    6c04:	e0bffe17 	ldw	r2,-8(fp)
    6c08:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context);
    6c0c:	e0bff717 	ldw	r2,-36(fp)
    6c10:	1001703a 	wrctl	status,r2
}
    6c14:	0001883a 	nop
                 OS_EXIT_CRITICAL();
             }
             break;
    6c18:	00006a06 	br	6dc4 <OSFlagPend+0x478>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
    6c1c:	e0bfe817 	ldw	r2,-96(fp)
    6c20:	1080020b 	ldhu	r2,8(r2)
    6c24:	0084303a 	nor	r2,zero,r2
    6c28:	1007883a 	mov	r3,r2
    6c2c:	e0bfe70b 	ldhu	r2,-100(fp)
    6c30:	1884703a 	and	r2,r3,r2
    6c34:	e0bffd0d 	sth	r2,-12(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    6c38:	e0fffd0b 	ldhu	r3,-12(fp)
    6c3c:	e0bfe70b 	ldhu	r2,-100(fp)
    6c40:	1880161e 	bne	r3,r2,6c9c <OSFlagPend+0x350>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    6c44:	e0bfffc3 	ldbu	r2,-1(fp)
    6c48:	10800058 	cmpnei	r2,r2,1
    6c4c:	1000071e 	bne	r2,zero,6c6c <OSFlagPend+0x320>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
    6c50:	e0bfe817 	ldw	r2,-96(fp)
    6c54:	1080020b 	ldhu	r2,8(r2)
    6c58:	e0fffd0b 	ldhu	r3,-12(fp)
    6c5c:	1884b03a 	or	r2,r3,r2
    6c60:	1007883a 	mov	r3,r2
    6c64:	e0bfe817 	ldw	r2,-96(fp)
    6c68:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    6c6c:	d0a7c317 	ldw	r2,-24820(gp)
    6c70:	e0fffd0b 	ldhu	r3,-12(fp)
    6c74:	10c00b0d 	sth	r3,44(r2)
    6c78:	e0bffe17 	ldw	r2,-8(fp)
    6c7c:	e0bff615 	stw	r2,-40(fp)
  NIOS2_WRITE_STATUS (context);
    6c80:	e0bff617 	ldw	r2,-40(fp)
    6c84:	1001703a 	wrctl	status,r2
}
    6c88:	0001883a 	nop
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    6c8c:	e0800217 	ldw	r2,8(fp)
    6c90:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
    6c94:	e0bffd0b 	ldhu	r2,-12(fp)
    6c98:	0000a706 	br	6f38 <OSFlagPend+0x5ec>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    6c9c:	e13fe70b 	ldhu	r4,-100(fp)
    6ca0:	e17fe603 	ldbu	r5,-104(fp)
    6ca4:	e0bfe50b 	ldhu	r2,-108(fp)
    6ca8:	e0ffe904 	addi	r3,fp,-92
    6cac:	d8800015 	stw	r2,0(sp)
    6cb0:	280f883a 	mov	r7,r5
    6cb4:	200d883a 	mov	r6,r4
    6cb8:	180b883a 	mov	r5,r3
    6cbc:	e13fe817 	ldw	r4,-96(fp)
    6cc0:	00074240 	call	7424 <OS_FlagBlock>
    6cc4:	e0bffe17 	ldw	r2,-8(fp)
    6cc8:	e0bff515 	stw	r2,-44(fp)
  NIOS2_WRITE_STATUS (context);
    6ccc:	e0bff517 	ldw	r2,-44(fp)
    6cd0:	1001703a 	wrctl	status,r2
}
    6cd4:	0001883a 	nop
                 OS_EXIT_CRITICAL();
             }
             break;
    6cd8:	00003a06 	br	6dc4 <OSFlagPend+0x478>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
    6cdc:	e0bfe817 	ldw	r2,-96(fp)
    6ce0:	1080020b 	ldhu	r2,8(r2)
    6ce4:	0084303a 	nor	r2,zero,r2
    6ce8:	1007883a 	mov	r3,r2
    6cec:	e0bfe70b 	ldhu	r2,-100(fp)
    6cf0:	1884703a 	and	r2,r3,r2
    6cf4:	e0bffd0d 	sth	r2,-12(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
    6cf8:	e0bffd0b 	ldhu	r2,-12(fp)
    6cfc:	10001626 	beq	r2,zero,6d58 <OSFlagPend+0x40c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    6d00:	e0bfffc3 	ldbu	r2,-1(fp)
    6d04:	10800058 	cmpnei	r2,r2,1
    6d08:	1000071e 	bne	r2,zero,6d28 <OSFlagPend+0x3dc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
    6d0c:	e0bfe817 	ldw	r2,-96(fp)
    6d10:	1080020b 	ldhu	r2,8(r2)
    6d14:	e0fffd0b 	ldhu	r3,-12(fp)
    6d18:	1884b03a 	or	r2,r3,r2
    6d1c:	1007883a 	mov	r3,r2
    6d20:	e0bfe817 	ldw	r2,-96(fp)
    6d24:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    6d28:	d0a7c317 	ldw	r2,-24820(gp)
    6d2c:	e0fffd0b 	ldhu	r3,-12(fp)
    6d30:	10c00b0d 	sth	r3,44(r2)
    6d34:	e0bffe17 	ldw	r2,-8(fp)
    6d38:	e0bff415 	stw	r2,-48(fp)
  NIOS2_WRITE_STATUS (context);
    6d3c:	e0bff417 	ldw	r2,-48(fp)
    6d40:	1001703a 	wrctl	status,r2
}
    6d44:	0001883a 	nop
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    6d48:	e0800217 	ldw	r2,8(fp)
    6d4c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
    6d50:	e0bffd0b 	ldhu	r2,-12(fp)
    6d54:	00007806 	br	6f38 <OSFlagPend+0x5ec>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    6d58:	e13fe70b 	ldhu	r4,-100(fp)
    6d5c:	e17fe603 	ldbu	r5,-104(fp)
    6d60:	e0bfe50b 	ldhu	r2,-108(fp)
    6d64:	e0ffe904 	addi	r3,fp,-92
    6d68:	d8800015 	stw	r2,0(sp)
    6d6c:	280f883a 	mov	r7,r5
    6d70:	200d883a 	mov	r6,r4
    6d74:	180b883a 	mov	r5,r3
    6d78:	e13fe817 	ldw	r4,-96(fp)
    6d7c:	00074240 	call	7424 <OS_FlagBlock>
    6d80:	e0bffe17 	ldw	r2,-8(fp)
    6d84:	e0bff315 	stw	r2,-52(fp)
  NIOS2_WRITE_STATUS (context);
    6d88:	e0bff317 	ldw	r2,-52(fp)
    6d8c:	1001703a 	wrctl	status,r2
}
    6d90:	0001883a 	nop
                 OS_EXIT_CRITICAL();
             }
             break;
    6d94:	00000b06 	br	6dc4 <OSFlagPend+0x478>
    6d98:	e0bffe17 	ldw	r2,-8(fp)
    6d9c:	e0bff215 	stw	r2,-56(fp)
  NIOS2_WRITE_STATUS (context);
    6da0:	e0bff217 	ldw	r2,-56(fp)
    6da4:	1001703a 	wrctl	status,r2
}
    6da8:	0001883a 	nop
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
    6dac:	e03ffd0d 	sth	zero,-12(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
    6db0:	e0800217 	ldw	r2,8(fp)
    6db4:	00c01bc4 	movi	r3,111
    6db8:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
    6dbc:	e0bffd0b 	ldhu	r2,-12(fp)
    6dc0:	00005d06 	br	6f38 <OSFlagPend+0x5ec>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
    6dc4:	00057e40 	call	57e4 <OS_Sched>
  NIOS2_READ_STATUS (context);
    6dc8:	0005303a 	rdctl	r2,status
    6dcc:	e0bff115 	stw	r2,-60(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6dd0:	e0fff117 	ldw	r3,-60(fp)
    6dd4:	00bfff84 	movi	r2,-2
    6dd8:	1884703a 	and	r2,r3,r2
    6ddc:	1001703a 	wrctl	status,r2
  return context;
    6de0:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
    6de4:	e0bffe15 	stw	r2,-8(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
    6de8:	d0a7c317 	ldw	r2,-24820(gp)
    6dec:	10800c43 	ldbu	r2,49(r2)
    6df0:	10803fcc 	andi	r2,r2,255
    6df4:	10001d26 	beq	r2,zero,6e6c <OSFlagPend+0x520>
        pend_stat                = OSTCBCur->OSTCBStatPend;
    6df8:	d0a7c317 	ldw	r2,-24820(gp)
    6dfc:	10800c43 	ldbu	r2,49(r2)
    6e00:	e0bffcc5 	stb	r2,-13(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    6e04:	d0a7c317 	ldw	r2,-24820(gp)
    6e08:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
    6e0c:	e0bfe904 	addi	r2,fp,-92
    6e10:	1009883a 	mov	r4,r2
    6e14:	000775c0 	call	775c <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
    6e18:	d0a7c317 	ldw	r2,-24820(gp)
    6e1c:	10000c05 	stb	zero,48(r2)
    6e20:	e0bffe17 	ldw	r2,-8(fp)
    6e24:	e0bff015 	stw	r2,-64(fp)
  NIOS2_WRITE_STATUS (context);
    6e28:	e0bff017 	ldw	r2,-64(fp)
    6e2c:	1001703a 	wrctl	status,r2
}
    6e30:	0001883a 	nop
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
    6e34:	e03ffd0d 	sth	zero,-12(fp)
        switch (pend_stat) {
    6e38:	e0bffcc3 	ldbu	r2,-13(fp)
    6e3c:	10800098 	cmpnei	r2,r2,2
    6e40:	1000041e 	bne	r2,zero,6e54 <OSFlagPend+0x508>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
    6e44:	e0800217 	ldw	r2,8(fp)
    6e48:	00c00384 	movi	r3,14
    6e4c:	10c00005 	stb	r3,0(r2)
                 break;
    6e50:	00000406 	br	6e64 <OSFlagPend+0x518>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
    6e54:	e0800217 	ldw	r2,8(fp)
    6e58:	00c00284 	movi	r3,10
    6e5c:	10c00005 	stb	r3,0(r2)
                 break;
    6e60:	0001883a 	nop
        }
        return (flags_rdy);
    6e64:	e0bffd0b 	ldhu	r2,-12(fp)
    6e68:	00003306 	br	6f38 <OSFlagPend+0x5ec>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
    6e6c:	d0a7c317 	ldw	r2,-24820(gp)
    6e70:	10800b0b 	ldhu	r2,44(r2)
    6e74:	e0bffd0d 	sth	r2,-12(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
    6e78:	e0bfffc3 	ldbu	r2,-1(fp)
    6e7c:	10800058 	cmpnei	r2,r2,1
    6e80:	1000241e 	bne	r2,zero,6f14 <OSFlagPend+0x5c8>
        switch (wait_type) {
    6e84:	e0bfe603 	ldbu	r2,-104(fp)
    6e88:	10c00088 	cmpgei	r3,r2,2
    6e8c:	1800021e 	bne	r3,zero,6e98 <OSFlagPend+0x54c>
    6e90:	10000e0e 	bge	r2,zero,6ecc <OSFlagPend+0x580>
    6e94:	00001506 	br	6eec <OSFlagPend+0x5a0>
    6e98:	10bfff84 	addi	r2,r2,-2
    6e9c:	108000a8 	cmpgeui	r2,r2,2
    6ea0:	1000121e 	bne	r2,zero,6eec <OSFlagPend+0x5a0>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
    6ea4:	e0bfe817 	ldw	r2,-96(fp)
    6ea8:	1080020b 	ldhu	r2,8(r2)
    6eac:	1007883a 	mov	r3,r2
    6eb0:	e0bffd0b 	ldhu	r2,-12(fp)
    6eb4:	0084303a 	nor	r2,zero,r2
    6eb8:	1884703a 	and	r2,r3,r2
    6ebc:	1007883a 	mov	r3,r2
    6ec0:	e0bfe817 	ldw	r2,-96(fp)
    6ec4:	10c0020d 	sth	r3,8(r2)
                 break;
    6ec8:	00001306 	br	6f18 <OSFlagPend+0x5cc>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
    6ecc:	e0bfe817 	ldw	r2,-96(fp)
    6ed0:	1080020b 	ldhu	r2,8(r2)
    6ed4:	e0fffd0b 	ldhu	r3,-12(fp)
    6ed8:	1884b03a 	or	r2,r3,r2
    6edc:	1007883a 	mov	r3,r2
    6ee0:	e0bfe817 	ldw	r2,-96(fp)
    6ee4:	10c0020d 	sth	r3,8(r2)
                 break;
    6ee8:	00000b06 	br	6f18 <OSFlagPend+0x5cc>
    6eec:	e0bffe17 	ldw	r2,-8(fp)
    6ef0:	e0bfef15 	stw	r2,-68(fp)
  NIOS2_WRITE_STATUS (context);
    6ef4:	e0bfef17 	ldw	r2,-68(fp)
    6ef8:	1001703a 	wrctl	status,r2
}
    6efc:	0001883a 	nop
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
    6f00:	e0800217 	ldw	r2,8(fp)
    6f04:	00c01bc4 	movi	r3,111
    6f08:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
    6f0c:	0005883a 	mov	r2,zero
    6f10:	00000906 	br	6f38 <OSFlagPend+0x5ec>
        }
    }
    6f14:	0001883a 	nop
    6f18:	e0bffe17 	ldw	r2,-8(fp)
    6f1c:	e0bfee15 	stw	r2,-72(fp)
  NIOS2_WRITE_STATUS (context);
    6f20:	e0bfee17 	ldw	r2,-72(fp)
    6f24:	1001703a 	wrctl	status,r2
}
    6f28:	0001883a 	nop
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
    6f2c:	e0800217 	ldw	r2,8(fp)
    6f30:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
    6f34:	e0bffd0b 	ldhu	r2,-12(fp)
}
    6f38:	e037883a 	mov	sp,fp
    6f3c:	dfc00117 	ldw	ra,4(sp)
    6f40:	df000017 	ldw	fp,0(sp)
    6f44:	dec00204 	addi	sp,sp,8
    6f48:	f800283a 	ret

00006f4c <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
    6f4c:	defffb04 	addi	sp,sp,-20
    6f50:	df000415 	stw	fp,16(sp)
    6f54:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    6f58:	e03fff15 	stw	zero,-4(fp)
  NIOS2_READ_STATUS (context);
    6f5c:	0005303a 	rdctl	r2,status
    6f60:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6f64:	e0fffc17 	ldw	r3,-16(fp)
    6f68:	00bfff84 	movi	r2,-2
    6f6c:	1884703a 	and	r2,r3,r2
    6f70:	1001703a 	wrctl	status,r2
  return context;
    6f74:	e0bffc17 	ldw	r2,-16(fp)
#endif



    OS_ENTER_CRITICAL();
    6f78:	e0bfff15 	stw	r2,-4(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
    6f7c:	d0a7c317 	ldw	r2,-24820(gp)
    6f80:	10800b0b 	ldhu	r2,44(r2)
    6f84:	e0bffe8d 	sth	r2,-6(fp)
    6f88:	e0bfff17 	ldw	r2,-4(fp)
    6f8c:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
    6f90:	e0bffd17 	ldw	r2,-12(fp)
    6f94:	1001703a 	wrctl	status,r2
}
    6f98:	0001883a 	nop
    OS_EXIT_CRITICAL();
    return (flags);
    6f9c:	e0bffe8b 	ldhu	r2,-6(fp)
}
    6fa0:	e037883a 	mov	sp,fp
    6fa4:	df000017 	ldw	fp,0(sp)
    6fa8:	dec00104 	addi	sp,sp,4
    6fac:	f800283a 	ret

00006fb0 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
    6fb0:	deffef04 	addi	sp,sp,-68
    6fb4:	dfc01015 	stw	ra,64(sp)
    6fb8:	df000f15 	stw	fp,60(sp)
    6fbc:	df000f04 	addi	fp,sp,60
    6fc0:	e13ff415 	stw	r4,-48(fp)
    6fc4:	2805883a 	mov	r2,r5
    6fc8:	3007883a 	mov	r3,r6
    6fcc:	e1fff115 	stw	r7,-60(fp)
    6fd0:	e0bff30d 	sth	r2,-52(fp)
    6fd4:	1805883a 	mov	r2,r3
    6fd8:	e0bff205 	stb	r2,-56(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
    6fdc:	e03ffd15 	stw	zero,-12(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
    6fe0:	e0bff117 	ldw	r2,-60(fp)
    6fe4:	1000021e 	bne	r2,zero,6ff0 <OSFlagPost+0x40>
        return ((OS_FLAGS)0);
    6fe8:	0005883a 	mov	r2,zero
    6fec:	0000d606 	br	7348 <OSFlagPost+0x398>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
    6ff0:	e0bff417 	ldw	r2,-48(fp)
    6ff4:	1000051e 	bne	r2,zero,700c <OSFlagPost+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    6ff8:	e0bff117 	ldw	r2,-60(fp)
    6ffc:	00c01b84 	movi	r3,110
    7000:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    7004:	0005883a 	mov	r2,zero
    7008:	0000cf06 	br	7348 <OSFlagPost+0x398>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
    700c:	e0bff417 	ldw	r2,-48(fp)
    7010:	10800003 	ldbu	r2,0(r2)
    7014:	10803fcc 	andi	r2,r2,255
    7018:	10800160 	cmpeqi	r2,r2,5
    701c:	1000051e 	bne	r2,zero,7034 <OSFlagPost+0x84>
        *perr = OS_ERR_EVENT_TYPE;
    7020:	e0bff117 	ldw	r2,-60(fp)
    7024:	00c00044 	movi	r3,1
    7028:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    702c:	0005883a 	mov	r2,zero
    7030:	0000c506 	br	7348 <OSFlagPost+0x398>
  NIOS2_READ_STATUS (context);
    7034:	0005303a 	rdctl	r2,status
    7038:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    703c:	e0fffa17 	ldw	r3,-24(fp)
    7040:	00bfff84 	movi	r2,-2
    7044:	1884703a 	and	r2,r3,r2
    7048:	1001703a 	wrctl	status,r2
  return context;
    704c:	e0bffa17 	ldw	r2,-24(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
    7050:	e0bffd15 	stw	r2,-12(fp)
    switch (opt) {
    7054:	e0bff203 	ldbu	r2,-56(fp)
    7058:	10000326 	beq	r2,zero,7068 <OSFlagPost+0xb8>
    705c:	10800060 	cmpeqi	r2,r2,1
    7060:	10000b1e 	bne	r2,zero,7090 <OSFlagPost+0xe0>
    7064:	00001206 	br	70b0 <OSFlagPost+0x100>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
    7068:	e0bff417 	ldw	r2,-48(fp)
    706c:	1080020b 	ldhu	r2,8(r2)
    7070:	1007883a 	mov	r3,r2
    7074:	e0bff30b 	ldhu	r2,-52(fp)
    7078:	0084303a 	nor	r2,zero,r2
    707c:	1884703a 	and	r2,r3,r2
    7080:	1007883a 	mov	r3,r2
    7084:	e0bff417 	ldw	r2,-48(fp)
    7088:	10c0020d 	sth	r3,8(r2)
             break;
    708c:	00001206 	br	70d8 <OSFlagPost+0x128>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
    7090:	e0bff417 	ldw	r2,-48(fp)
    7094:	1080020b 	ldhu	r2,8(r2)
    7098:	e0fff30b 	ldhu	r3,-52(fp)
    709c:	1884b03a 	or	r2,r3,r2
    70a0:	1007883a 	mov	r3,r2
    70a4:	e0bff417 	ldw	r2,-48(fp)
    70a8:	10c0020d 	sth	r3,8(r2)
             break;
    70ac:	00000a06 	br	70d8 <OSFlagPost+0x128>
    70b0:	e0bffd17 	ldw	r2,-12(fp)
    70b4:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
    70b8:	e0bff917 	ldw	r2,-28(fp)
    70bc:	1001703a 	wrctl	status,r2
}
    70c0:	0001883a 	nop

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
    70c4:	e0bff117 	ldw	r2,-60(fp)
    70c8:	00c01c44 	movi	r3,113
    70cc:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
    70d0:	0005883a 	mov	r2,zero
    70d4:	00009c06 	br	7348 <OSFlagPost+0x398>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    70d8:	e03ffec5 	stb	zero,-5(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    70dc:	e0bff417 	ldw	r2,-48(fp)
    70e0:	10800117 	ldw	r2,4(r2)
    70e4:	e0bfff15 	stw	r2,-4(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
    70e8:	00007906 	br	72d0 <OSFlagPost+0x320>
        switch (pnode->OSFlagNodeWaitType) {
    70ec:	e0bfff17 	ldw	r2,-4(fp)
    70f0:	10800483 	ldbu	r2,18(r2)
    70f4:	10803fcc 	andi	r2,r2,255
    70f8:	10c000e0 	cmpeqi	r3,r2,3
    70fc:	1800201e 	bne	r3,zero,7180 <OSFlagPost+0x1d0>
    7100:	10c00108 	cmpgei	r3,r2,4
    7104:	18005e1e 	bne	r3,zero,7280 <OSFlagPost+0x2d0>
    7108:	10c000a0 	cmpeqi	r3,r2,2
    710c:	1800061e 	bne	r3,zero,7128 <OSFlagPost+0x178>
    7110:	10c000c8 	cmpgei	r3,r2,3
    7114:	18005a1e 	bne	r3,zero,7280 <OSFlagPost+0x2d0>
    7118:	10002c26 	beq	r2,zero,71cc <OSFlagPost+0x21c>
    711c:	10800060 	cmpeqi	r2,r2,1
    7120:	1000421e 	bne	r2,zero,722c <OSFlagPost+0x27c>
    7124:	00005606 	br	7280 <OSFlagPost+0x2d0>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    7128:	e0bff417 	ldw	r2,-48(fp)
    712c:	10c0020b 	ldhu	r3,8(r2)
    7130:	e0bfff17 	ldw	r2,-4(fp)
    7134:	1080040b 	ldhu	r2,16(r2)
    7138:	1884703a 	and	r2,r3,r2
    713c:	e0bffc0d 	sth	r2,-16(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
    7140:	e0bfff17 	ldw	r2,-4(fp)
    7144:	1080040b 	ldhu	r2,16(r2)
    7148:	e0fffc0b 	ldhu	r3,-16(fp)
    714c:	10bfffcc 	andi	r2,r2,65535
    7150:	1880551e 	bne	r3,r2,72a8 <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
    7154:	e0bffc0b 	ldhu	r2,-16(fp)
    7158:	100b883a 	mov	r5,r2
    715c:	e13fff17 	ldw	r4,-4(fp)
    7160:	00076680 	call	7668 <OS_FlagTaskRdy>
    7164:	e0bffbc5 	stb	r2,-17(fp)
                     if (rdy == OS_TRUE) {
    7168:	e0bffbc3 	ldbu	r2,-17(fp)
    716c:	10800058 	cmpnei	r2,r2,1
    7170:	10004d1e 	bne	r2,zero,72a8 <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    7174:	00800044 	movi	r2,1
    7178:	e0bffec5 	stb	r2,-5(fp)
                     }
                 }
                 break;
    717c:	00004a06 	br	72a8 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    7180:	e0bff417 	ldw	r2,-48(fp)
    7184:	10c0020b 	ldhu	r3,8(r2)
    7188:	e0bfff17 	ldw	r2,-4(fp)
    718c:	1080040b 	ldhu	r2,16(r2)
    7190:	1884703a 	and	r2,r3,r2
    7194:	e0bffc0d 	sth	r2,-16(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
    7198:	e0bffc0b 	ldhu	r2,-16(fp)
    719c:	10004426 	beq	r2,zero,72b0 <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
    71a0:	e0bffc0b 	ldhu	r2,-16(fp)
    71a4:	100b883a 	mov	r5,r2
    71a8:	e13fff17 	ldw	r4,-4(fp)
    71ac:	00076680 	call	7668 <OS_FlagTaskRdy>
    71b0:	e0bffbc5 	stb	r2,-17(fp)
                     if (rdy == OS_TRUE) {
    71b4:	e0bffbc3 	ldbu	r2,-17(fp)
    71b8:	10800058 	cmpnei	r2,r2,1
    71bc:	10003c1e 	bne	r2,zero,72b0 <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    71c0:	00800044 	movi	r2,1
    71c4:	e0bffec5 	stb	r2,-5(fp)
                     }
                 }
                 break;
    71c8:	00003906 	br	72b0 <OSFlagPost+0x300>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    71cc:	e0bff417 	ldw	r2,-48(fp)
    71d0:	1080020b 	ldhu	r2,8(r2)
    71d4:	0084303a 	nor	r2,zero,r2
    71d8:	1007883a 	mov	r3,r2
    71dc:	e0bfff17 	ldw	r2,-4(fp)
    71e0:	1080040b 	ldhu	r2,16(r2)
    71e4:	1884703a 	and	r2,r3,r2
    71e8:	e0bffc0d 	sth	r2,-16(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
    71ec:	e0bfff17 	ldw	r2,-4(fp)
    71f0:	1080040b 	ldhu	r2,16(r2)
    71f4:	e0fffc0b 	ldhu	r3,-16(fp)
    71f8:	10bfffcc 	andi	r2,r2,65535
    71fc:	18802e1e 	bne	r3,r2,72b8 <OSFlagPost+0x308>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
    7200:	e0bffc0b 	ldhu	r2,-16(fp)
    7204:	100b883a 	mov	r5,r2
    7208:	e13fff17 	ldw	r4,-4(fp)
    720c:	00076680 	call	7668 <OS_FlagTaskRdy>
    7210:	e0bffbc5 	stb	r2,-17(fp)
                     if (rdy == OS_TRUE) {
    7214:	e0bffbc3 	ldbu	r2,-17(fp)
    7218:	10800058 	cmpnei	r2,r2,1
    721c:	1000261e 	bne	r2,zero,72b8 <OSFlagPost+0x308>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    7220:	00800044 	movi	r2,1
    7224:	e0bffec5 	stb	r2,-5(fp)
                     }
                 }
                 break;
    7228:	00002306 	br	72b8 <OSFlagPost+0x308>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    722c:	e0bff417 	ldw	r2,-48(fp)
    7230:	1080020b 	ldhu	r2,8(r2)
    7234:	0084303a 	nor	r2,zero,r2
    7238:	1007883a 	mov	r3,r2
    723c:	e0bfff17 	ldw	r2,-4(fp)
    7240:	1080040b 	ldhu	r2,16(r2)
    7244:	1884703a 	and	r2,r3,r2
    7248:	e0bffc0d 	sth	r2,-16(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
    724c:	e0bffc0b 	ldhu	r2,-16(fp)
    7250:	10001b26 	beq	r2,zero,72c0 <OSFlagPost+0x310>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
    7254:	e0bffc0b 	ldhu	r2,-16(fp)
    7258:	100b883a 	mov	r5,r2
    725c:	e13fff17 	ldw	r4,-4(fp)
    7260:	00076680 	call	7668 <OS_FlagTaskRdy>
    7264:	e0bffbc5 	stb	r2,-17(fp)
                     if (rdy == OS_TRUE) {
    7268:	e0bffbc3 	ldbu	r2,-17(fp)
    726c:	10800058 	cmpnei	r2,r2,1
    7270:	1000131e 	bne	r2,zero,72c0 <OSFlagPost+0x310>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    7274:	00800044 	movi	r2,1
    7278:	e0bffec5 	stb	r2,-5(fp)
                     }
                 }
                 break;
    727c:	00001006 	br	72c0 <OSFlagPost+0x310>
    7280:	e0bffd17 	ldw	r2,-12(fp)
    7284:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
    7288:	e0bff817 	ldw	r2,-32(fp)
    728c:	1001703a 	wrctl	status,r2
}
    7290:	0001883a 	nop
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
    7294:	e0bff117 	ldw	r2,-60(fp)
    7298:	00c01bc4 	movi	r3,111
    729c:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
    72a0:	0005883a 	mov	r2,zero
    72a4:	00002806 	br	7348 <OSFlagPost+0x398>
                 break;
    72a8:	0001883a 	nop
    72ac:	00000506 	br	72c4 <OSFlagPost+0x314>
                 break;
    72b0:	0001883a 	nop
    72b4:	00000306 	br	72c4 <OSFlagPost+0x314>
                 break;
    72b8:	0001883a 	nop
    72bc:	00000106 	br	72c4 <OSFlagPost+0x314>
                 break;
    72c0:	0001883a 	nop
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    72c4:	e0bfff17 	ldw	r2,-4(fp)
    72c8:	10800017 	ldw	r2,0(r2)
    72cc:	e0bfff15 	stw	r2,-4(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
    72d0:	e0bfff17 	ldw	r2,-4(fp)
    72d4:	103f851e 	bne	r2,zero,70ec <OSFlagPost+0x13c>
    72d8:	e0bffd17 	ldw	r2,-12(fp)
    72dc:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context);
    72e0:	e0bff717 	ldw	r2,-36(fp)
    72e4:	1001703a 	wrctl	status,r2
}
    72e8:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
    72ec:	e0bffec3 	ldbu	r2,-5(fp)
    72f0:	10800058 	cmpnei	r2,r2,1
    72f4:	1000011e 	bne	r2,zero,72fc <OSFlagPost+0x34c>
        OS_Sched();
    72f8:	00057e40 	call	57e4 <OS_Sched>
  NIOS2_READ_STATUS (context);
    72fc:	0005303a 	rdctl	r2,status
    7300:	e0bff515 	stw	r2,-44(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7304:	e0fff517 	ldw	r3,-44(fp)
    7308:	00bfff84 	movi	r2,-2
    730c:	1884703a 	and	r2,r3,r2
    7310:	1001703a 	wrctl	status,r2
  return context;
    7314:	e0bff517 	ldw	r2,-44(fp)
    }
    OS_ENTER_CRITICAL();
    7318:	e0bffd15 	stw	r2,-12(fp)
    flags_cur = pgrp->OSFlagFlags;
    731c:	e0bff417 	ldw	r2,-48(fp)
    7320:	1080020b 	ldhu	r2,8(r2)
    7324:	e0bffc8d 	sth	r2,-14(fp)
    7328:	e0bffd17 	ldw	r2,-12(fp)
    732c:	e0bff615 	stw	r2,-40(fp)
  NIOS2_WRITE_STATUS (context);
    7330:	e0bff617 	ldw	r2,-40(fp)
    7334:	1001703a 	wrctl	status,r2
}
    7338:	0001883a 	nop
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
    733c:	e0bff117 	ldw	r2,-60(fp)
    7340:	10000005 	stb	zero,0(r2)
    return (flags_cur);
    7344:	e0bffc8b 	ldhu	r2,-14(fp)
}
    7348:	e037883a 	mov	sp,fp
    734c:	dfc00117 	ldw	ra,4(sp)
    7350:	df000017 	ldw	fp,0(sp)
    7354:	dec00204 	addi	sp,sp,8
    7358:	f800283a 	ret

0000735c <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
    735c:	defff904 	addi	sp,sp,-28
    7360:	df000615 	stw	fp,24(sp)
    7364:	df000604 	addi	fp,sp,24
    7368:	e13ffb15 	stw	r4,-20(fp)
    736c:	e17ffa15 	stw	r5,-24(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
    7370:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
    7374:	e0bffa17 	ldw	r2,-24(fp)
    7378:	1000021e 	bne	r2,zero,7384 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
    737c:	0005883a 	mov	r2,zero
    7380:	00002406 	br	7414 <OSFlagQuery+0xb8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
    7384:	e0bffb17 	ldw	r2,-20(fp)
    7388:	1000051e 	bne	r2,zero,73a0 <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    738c:	e0bffa17 	ldw	r2,-24(fp)
    7390:	00c01b84 	movi	r3,110
    7394:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    7398:	0005883a 	mov	r2,zero
    739c:	00001d06 	br	7414 <OSFlagQuery+0xb8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
    73a0:	e0bffb17 	ldw	r2,-20(fp)
    73a4:	10800003 	ldbu	r2,0(r2)
    73a8:	10803fcc 	andi	r2,r2,255
    73ac:	10800160 	cmpeqi	r2,r2,5
    73b0:	1000051e 	bne	r2,zero,73c8 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
    73b4:	e0bffa17 	ldw	r2,-24(fp)
    73b8:	00c00044 	movi	r3,1
    73bc:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    73c0:	0005883a 	mov	r2,zero
    73c4:	00001306 	br	7414 <OSFlagQuery+0xb8>
  NIOS2_READ_STATUS (context);
    73c8:	0005303a 	rdctl	r2,status
    73cc:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    73d0:	e0fffc17 	ldw	r3,-16(fp)
    73d4:	00bfff84 	movi	r2,-2
    73d8:	1884703a 	and	r2,r3,r2
    73dc:	1001703a 	wrctl	status,r2
  return context;
    73e0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    73e4:	e0bfff15 	stw	r2,-4(fp)
    flags = pgrp->OSFlagFlags;
    73e8:	e0bffb17 	ldw	r2,-20(fp)
    73ec:	1080020b 	ldhu	r2,8(r2)
    73f0:	e0bffe8d 	sth	r2,-6(fp)
    73f4:	e0bfff17 	ldw	r2,-4(fp)
    73f8:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
    73fc:	e0bffd17 	ldw	r2,-12(fp)
    7400:	1001703a 	wrctl	status,r2
}
    7404:	0001883a 	nop
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    7408:	e0bffa17 	ldw	r2,-24(fp)
    740c:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
    7410:	e0bffe8b 	ldhu	r2,-6(fp)
}
    7414:	e037883a 	mov	sp,fp
    7418:	df000017 	ldw	fp,0(sp)
    741c:	dec00104 	addi	sp,sp,4
    7420:	f800283a 	ret

00007424 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
    7424:	defff804 	addi	sp,sp,-32
    7428:	df000715 	stw	fp,28(sp)
    742c:	df000704 	addi	fp,sp,28
    7430:	e13ffd15 	stw	r4,-12(fp)
    7434:	e17ffc15 	stw	r5,-16(fp)
    7438:	3007883a 	mov	r3,r6
    743c:	3809883a 	mov	r4,r7
    7440:	e0800117 	ldw	r2,4(fp)
    7444:	e0fffb0d 	sth	r3,-20(fp)
    7448:	2007883a 	mov	r3,r4
    744c:	e0fffa05 	stb	r3,-24(fp)
    7450:	e0bff90d 	sth	r2,-28(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
    7454:	d0a7c317 	ldw	r2,-24820(gp)
    7458:	10c00c03 	ldbu	r3,48(r2)
    745c:	d0a7c317 	ldw	r2,-24820(gp)
    7460:	18c00814 	ori	r3,r3,32
    7464:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
    7468:	d0a7c317 	ldw	r2,-24820(gp)
    746c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
    7470:	d0a7c317 	ldw	r2,-24820(gp)
    7474:	e0fff90b 	ldhu	r3,-28(fp)
    7478:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
    747c:	d0a7c317 	ldw	r2,-24820(gp)
    7480:	e0fffc17 	ldw	r3,-16(fp)
    7484:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
    7488:	e0bffc17 	ldw	r2,-16(fp)
    748c:	e0fffb0b 	ldhu	r3,-20(fp)
    7490:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
    7494:	e0bffc17 	ldw	r2,-16(fp)
    7498:	e0fffa03 	ldbu	r3,-24(fp)
    749c:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
    74a0:	d0e7c317 	ldw	r3,-24820(gp)
    74a4:	e0bffc17 	ldw	r2,-16(fp)
    74a8:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
    74ac:	e0bffd17 	ldw	r2,-12(fp)
    74b0:	10c00117 	ldw	r3,4(r2)
    74b4:	e0bffc17 	ldw	r2,-16(fp)
    74b8:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
    74bc:	e0bffc17 	ldw	r2,-16(fp)
    74c0:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
    74c4:	e0bffc17 	ldw	r2,-16(fp)
    74c8:	e0fffd17 	ldw	r3,-12(fp)
    74cc:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    74d0:	e0bffd17 	ldw	r2,-12(fp)
    74d4:	10800117 	ldw	r2,4(r2)
    74d8:	e0bfff15 	stw	r2,-4(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
    74dc:	e0bfff17 	ldw	r2,-4(fp)
    74e0:	10000326 	beq	r2,zero,74f0 <OS_FlagBlock+0xcc>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
    74e4:	e0bfff17 	ldw	r2,-4(fp)
    74e8:	e0fffc17 	ldw	r3,-16(fp)
    74ec:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
    74f0:	e0bffd17 	ldw	r2,-12(fp)
    74f4:	e0fffc17 	ldw	r3,-16(fp)
    74f8:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
    74fc:	d0a7c317 	ldw	r2,-24820(gp)
    7500:	10800d03 	ldbu	r2,52(r2)
    7504:	e0bffec5 	stb	r2,-5(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
    7508:	e0fffec3 	ldbu	r3,-5(fp)
    750c:	d0a7c084 	addi	r2,gp,-24830
    7510:	1885883a 	add	r2,r3,r2
    7514:	10800003 	ldbu	r2,0(r2)
    7518:	1007883a 	mov	r3,r2
    751c:	d0a7c317 	ldw	r2,-24820(gp)
    7520:	10800d43 	ldbu	r2,53(r2)
    7524:	0084303a 	nor	r2,zero,r2
    7528:	1884703a 	and	r2,r3,r2
    752c:	e0fffec3 	ldbu	r3,-5(fp)
    7530:	1009883a 	mov	r4,r2
    7534:	d0a7c084 	addi	r2,gp,-24830
    7538:	1885883a 	add	r2,r3,r2
    753c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
    7540:	e0fffec3 	ldbu	r3,-5(fp)
    7544:	d0a7c084 	addi	r2,gp,-24830
    7548:	1885883a 	add	r2,r3,r2
    754c:	10800003 	ldbu	r2,0(r2)
    7550:	10803fcc 	andi	r2,r2,255
    7554:	1000071e 	bne	r2,zero,7574 <OS_FlagBlock+0x150>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
    7558:	d0a7c317 	ldw	r2,-24820(gp)
    755c:	10800d83 	ldbu	r2,54(r2)
    7560:	0084303a 	nor	r2,zero,r2
    7564:	1007883a 	mov	r3,r2
    7568:	d0a7c043 	ldbu	r2,-24831(gp)
    756c:	1884703a 	and	r2,r3,r2
    7570:	d0a7c045 	stb	r2,-24831(gp)
    }
}
    7574:	0001883a 	nop
    7578:	e037883a 	mov	sp,fp
    757c:	df000017 	ldw	fp,0(sp)
    7580:	dec00104 	addi	sp,sp,4
    7584:	f800283a 	ret

00007588 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
    7588:	defffb04 	addi	sp,sp,-20
    758c:	dfc00415 	stw	ra,16(sp)
    7590:	df000315 	stw	fp,12(sp)
    7594:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    7598:	0140dc04 	movi	r5,880
    759c:	01000074 	movhi	r4,1
    75a0:	211fd104 	addi	r4,r4,32580
    75a4:	00057200 	call	5720 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
    75a8:	00800074 	movhi	r2,1
    75ac:	109fd104 	addi	r2,r2,32580
    75b0:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
    75b4:	00800074 	movhi	r2,1
    75b8:	109fdc04 	addi	r2,r2,32624
    75bc:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
    75c0:	e03fff8d 	sth	zero,-2(fp)
    75c4:	00001306 	br	7614 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    75c8:	e0bffe17 	ldw	r2,-8(fp)
    75cc:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
    75d0:	e0bffe17 	ldw	r2,-8(fp)
    75d4:	e0fffd17 	ldw	r3,-12(fp)
    75d8:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
    75dc:	e0bffe17 	ldw	r2,-8(fp)
    75e0:	00c00fc4 	movi	r3,63
    75e4:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
    75e8:	e0bffe17 	ldw	r2,-8(fp)
    75ec:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
    75f0:	e0bffe17 	ldw	r2,-8(fp)
    75f4:	10800b04 	addi	r2,r2,44
    75f8:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
    75fc:	e0bffd17 	ldw	r2,-12(fp)
    7600:	10800b04 	addi	r2,r2,44
    7604:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
    7608:	e0bfff8b 	ldhu	r2,-2(fp)
    760c:	10800044 	addi	r2,r2,1
    7610:	e0bfff8d 	sth	r2,-2(fp)
    7614:	e0bfff8b 	ldhu	r2,-2(fp)
    7618:	108004f0 	cmpltui	r2,r2,19
    761c:	103fea1e 	bne	r2,zero,75c8 <OS_FlagInit+0x40>
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    7620:	e0bffe17 	ldw	r2,-8(fp)
    7624:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
    7628:	e0bffe17 	ldw	r2,-8(fp)
    762c:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
    7630:	e0bffe17 	ldw	r2,-8(fp)
    7634:	00c00fc4 	movi	r3,63
    7638:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
    763c:	e0bffe17 	ldw	r2,-8(fp)
    7640:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
    7644:	00800074 	movhi	r2,1
    7648:	109fd104 	addi	r2,r2,32580
    764c:	d0a7bb15 	stw	r2,-24852(gp)
#endif
}
    7650:	0001883a 	nop
    7654:	e037883a 	mov	sp,fp
    7658:	dfc00117 	ldw	ra,4(sp)
    765c:	df000017 	ldw	fp,0(sp)
    7660:	dec00204 	addi	sp,sp,8
    7664:	f800283a 	ret

00007668 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
    7668:	defffa04 	addi	sp,sp,-24
    766c:	dfc00515 	stw	ra,20(sp)
    7670:	df000415 	stw	fp,16(sp)
    7674:	df000404 	addi	fp,sp,16
    7678:	e13ffd15 	stw	r4,-12(fp)
    767c:	2805883a 	mov	r2,r5
    7680:	e0bffc0d 	sth	r2,-16(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
    7684:	e0bffd17 	ldw	r2,-12(fp)
    7688:	10800217 	ldw	r2,8(r2)
    768c:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBDly       = 0;
    7690:	e0bffe17 	ldw	r2,-8(fp)
    7694:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
    7698:	e0bffe17 	ldw	r2,-8(fp)
    769c:	e0fffc0b 	ldhu	r3,-16(fp)
    76a0:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
    76a4:	e0bffe17 	ldw	r2,-8(fp)
    76a8:	10c00c03 	ldbu	r3,48(r2)
    76ac:	00bff7c4 	movi	r2,-33
    76b0:	1884703a 	and	r2,r3,r2
    76b4:	1007883a 	mov	r3,r2
    76b8:	e0bffe17 	ldw	r2,-8(fp)
    76bc:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
    76c0:	e0bffe17 	ldw	r2,-8(fp)
    76c4:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
    76c8:	e0bffe17 	ldw	r2,-8(fp)
    76cc:	10800c03 	ldbu	r2,48(r2)
    76d0:	10803fcc 	andi	r2,r2,255
    76d4:	1000181e 	bne	r2,zero,7738 <OS_FlagTaskRdy+0xd0>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
    76d8:	e0bffe17 	ldw	r2,-8(fp)
    76dc:	10c00d83 	ldbu	r3,54(r2)
    76e0:	d0a7c043 	ldbu	r2,-24831(gp)
    76e4:	1884b03a 	or	r2,r3,r2
    76e8:	d0a7c045 	stb	r2,-24831(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    76ec:	e0bffe17 	ldw	r2,-8(fp)
    76f0:	10800d03 	ldbu	r2,52(r2)
    76f4:	10c03fcc 	andi	r3,r2,255
    76f8:	d0a7c084 	addi	r2,gp,-24830
    76fc:	1885883a 	add	r2,r3,r2
    7700:	11000003 	ldbu	r4,0(r2)
    7704:	e0bffe17 	ldw	r2,-8(fp)
    7708:	10800d43 	ldbu	r2,53(r2)
    770c:	e0fffe17 	ldw	r3,-8(fp)
    7710:	18c00d03 	ldbu	r3,52(r3)
    7714:	18c03fcc 	andi	r3,r3,255
    7718:	2084b03a 	or	r2,r4,r2
    771c:	1009883a 	mov	r4,r2
    7720:	d0a7c084 	addi	r2,gp,-24830
    7724:	1885883a 	add	r2,r3,r2
    7728:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
    772c:	00800044 	movi	r2,1
    7730:	e0bfffc5 	stb	r2,-1(fp)
    7734:	00000106 	br	773c <OS_FlagTaskRdy+0xd4>
    } else {
        sched                   = OS_FALSE;
    7738:	e03fffc5 	stb	zero,-1(fp)
    }
    OS_FlagUnlink(pnode);
    773c:	e13ffd17 	ldw	r4,-12(fp)
    7740:	000775c0 	call	775c <OS_FlagUnlink>
    return (sched);
    7744:	e0bfffc3 	ldbu	r2,-1(fp)
}
    7748:	e037883a 	mov	sp,fp
    774c:	dfc00117 	ldw	ra,4(sp)
    7750:	df000017 	ldw	fp,0(sp)
    7754:	dec00204 	addi	sp,sp,8
    7758:	f800283a 	ret

0000775c <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
    775c:	defffa04 	addi	sp,sp,-24
    7760:	df000515 	stw	fp,20(sp)
    7764:	df000504 	addi	fp,sp,20
    7768:	e13ffb15 	stw	r4,-20(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
    776c:	e0bffb17 	ldw	r2,-20(fp)
    7770:	10800117 	ldw	r2,4(r2)
    7774:	e0bfff15 	stw	r2,-4(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
    7778:	e0bffb17 	ldw	r2,-20(fp)
    777c:	10800017 	ldw	r2,0(r2)
    7780:	e0bffe15 	stw	r2,-8(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
    7784:	e0bfff17 	ldw	r2,-4(fp)
    7788:	10000b1e 	bne	r2,zero,77b8 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
    778c:	e0bffb17 	ldw	r2,-20(fp)
    7790:	10800317 	ldw	r2,12(r2)
    7794:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
    7798:	e0bffd17 	ldw	r2,-12(fp)
    779c:	e0fffe17 	ldw	r3,-8(fp)
    77a0:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
    77a4:	e0bffe17 	ldw	r2,-8(fp)
    77a8:	10000b26 	beq	r2,zero,77d8 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
    77ac:	e0bffe17 	ldw	r2,-8(fp)
    77b0:	10000115 	stw	zero,4(r2)
    77b4:	00000806 	br	77d8 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
    77b8:	e0bfff17 	ldw	r2,-4(fp)
    77bc:	e0fffe17 	ldw	r3,-8(fp)
    77c0:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
    77c4:	e0bffe17 	ldw	r2,-8(fp)
    77c8:	10000326 	beq	r2,zero,77d8 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
    77cc:	e0bffe17 	ldw	r2,-8(fp)
    77d0:	e0ffff17 	ldw	r3,-4(fp)
    77d4:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
    77d8:	e0bffb17 	ldw	r2,-20(fp)
    77dc:	10800217 	ldw	r2,8(r2)
    77e0:	e0bffc15 	stw	r2,-16(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
    77e4:	e0bffc17 	ldw	r2,-16(fp)
    77e8:	10000a15 	stw	zero,40(r2)
#endif
}
    77ec:	0001883a 	nop
    77f0:	e037883a 	mov	sp,fp
    77f4:	df000017 	ldw	fp,0(sp)
    77f8:	dec00104 	addi	sp,sp,4
    77fc:	f800283a 	ret

00007800 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
    7800:	defff404 	addi	sp,sp,-48
    7804:	df000b15 	stw	fp,44(sp)
    7808:	df000b04 	addi	fp,sp,44
    780c:	e13ff815 	stw	r4,-32(fp)
    7810:	e17ff715 	stw	r5,-36(fp)
    7814:	e1bff615 	stw	r6,-40(fp)
    7818:	e1fff515 	stw	r7,-44(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    781c:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    7820:	e0bff517 	ldw	r2,-44(fp)
    7824:	1000021e 	bne	r2,zero,7830 <OSMemCreate+0x30>
        return ((OS_MEM *)0);
    7828:	0005883a 	mov	r2,zero
    782c:	00006606 	br	79c8 <OSMemCreate+0x1c8>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
    7830:	e0bff817 	ldw	r2,-32(fp)
    7834:	1000051e 	bne	r2,zero,784c <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
    7838:	e0bff517 	ldw	r2,-44(fp)
    783c:	00c01884 	movi	r3,98
    7840:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    7844:	0005883a 	mov	r2,zero
    7848:	00005f06 	br	79c8 <OSMemCreate+0x1c8>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
    784c:	e0bff817 	ldw	r2,-32(fp)
    7850:	108000cc 	andi	r2,r2,3
    7854:	10000526 	beq	r2,zero,786c <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
    7858:	e0bff517 	ldw	r2,-44(fp)
    785c:	00c01884 	movi	r3,98
    7860:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    7864:	0005883a 	mov	r2,zero
    7868:	00005706 	br	79c8 <OSMemCreate+0x1c8>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
    786c:	e0bff717 	ldw	r2,-36(fp)
    7870:	108000a8 	cmpgeui	r2,r2,2
    7874:	1000051e 	bne	r2,zero,788c <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
    7878:	e0bff517 	ldw	r2,-44(fp)
    787c:	00c016c4 	movi	r3,91
    7880:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    7884:	0005883a 	mov	r2,zero
    7888:	00004f06 	br	79c8 <OSMemCreate+0x1c8>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
    788c:	e0bff617 	ldw	r2,-40(fp)
    7890:	10800128 	cmpgeui	r2,r2,4
    7894:	1000051e 	bne	r2,zero,78ac <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
    7898:	e0bff517 	ldw	r2,-44(fp)
    789c:	00c01704 	movi	r3,92
    78a0:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    78a4:	0005883a 	mov	r2,zero
    78a8:	00004706 	br	79c8 <OSMemCreate+0x1c8>
  NIOS2_READ_STATUS (context);
    78ac:	0005303a 	rdctl	r2,status
    78b0:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    78b4:	e0fffa17 	ldw	r3,-24(fp)
    78b8:	00bfff84 	movi	r2,-2
    78bc:	1884703a 	and	r2,r3,r2
    78c0:	1001703a 	wrctl	status,r2
  return context;
    78c4:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    78c8:	e0bffc15 	stw	r2,-16(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
    78cc:	d0a7c817 	ldw	r2,-24800(gp)
    78d0:	e0bffb15 	stw	r2,-20(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
    78d4:	d0a7c817 	ldw	r2,-24800(gp)
    78d8:	10000326 	beq	r2,zero,78e8 <OSMemCreate+0xe8>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
    78dc:	d0a7c817 	ldw	r2,-24800(gp)
    78e0:	10800117 	ldw	r2,4(r2)
    78e4:	d0a7c815 	stw	r2,-24800(gp)
    78e8:	e0bffc17 	ldw	r2,-16(fp)
    78ec:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
    78f0:	e0bff917 	ldw	r2,-28(fp)
    78f4:	1001703a 	wrctl	status,r2
}
    78f8:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
    78fc:	e0bffb17 	ldw	r2,-20(fp)
    7900:	1000051e 	bne	r2,zero,7918 <OSMemCreate+0x118>
        *perr = OS_ERR_MEM_INVALID_PART;
    7904:	e0bff517 	ldw	r2,-44(fp)
    7908:	00c01684 	movi	r3,90
    790c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    7910:	0005883a 	mov	r2,zero
    7914:	00002c06 	br	79c8 <OSMemCreate+0x1c8>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    7918:	e0bff817 	ldw	r2,-32(fp)
    791c:	e0bffe15 	stw	r2,-8(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
    7920:	e0fff817 	ldw	r3,-32(fp)
    7924:	e0bff617 	ldw	r2,-40(fp)
    7928:	1885883a 	add	r2,r3,r2
    792c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (nblks - 1); i++) {
    7930:	e03ffd15 	stw	zero,-12(fp)
    7934:	00000c06 	br	7968 <OSMemCreate+0x168>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
    7938:	e0bffe17 	ldw	r2,-8(fp)
    793c:	e0ffff17 	ldw	r3,-4(fp)
    7940:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
    7944:	e0bfff17 	ldw	r2,-4(fp)
    7948:	e0bffe15 	stw	r2,-8(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    794c:	e0ffff17 	ldw	r3,-4(fp)
    7950:	e0bff617 	ldw	r2,-40(fp)
    7954:	1885883a 	add	r2,r3,r2
    7958:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (nblks - 1); i++) {
    795c:	e0bffd17 	ldw	r2,-12(fp)
    7960:	10800044 	addi	r2,r2,1
    7964:	e0bffd15 	stw	r2,-12(fp)
    7968:	e0bff717 	ldw	r2,-36(fp)
    796c:	10bfffc4 	addi	r2,r2,-1
    7970:	e0fffd17 	ldw	r3,-12(fp)
    7974:	18bff036 	bltu	r3,r2,7938 <OSMemCreate+0x138>
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
    7978:	e0bffe17 	ldw	r2,-8(fp)
    797c:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
    7980:	e0bffb17 	ldw	r2,-20(fp)
    7984:	e0fff817 	ldw	r3,-32(fp)
    7988:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
    798c:	e0bffb17 	ldw	r2,-20(fp)
    7990:	e0fff817 	ldw	r3,-32(fp)
    7994:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
    7998:	e0bffb17 	ldw	r2,-20(fp)
    799c:	e0fff717 	ldw	r3,-36(fp)
    79a0:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
    79a4:	e0bffb17 	ldw	r2,-20(fp)
    79a8:	e0fff717 	ldw	r3,-36(fp)
    79ac:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
    79b0:	e0bffb17 	ldw	r2,-20(fp)
    79b4:	e0fff617 	ldw	r3,-40(fp)
    79b8:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
    79bc:	e0bff517 	ldw	r2,-44(fp)
    79c0:	10000005 	stb	zero,0(r2)
    return (pmem);
    79c4:	e0bffb17 	ldw	r2,-20(fp)
}
    79c8:	e037883a 	mov	sp,fp
    79cc:	df000017 	ldw	fp,0(sp)
    79d0:	dec00104 	addi	sp,sp,4
    79d4:	f800283a 	ret

000079d8 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
    79d8:	defff804 	addi	sp,sp,-32
    79dc:	df000715 	stw	fp,28(sp)
    79e0:	df000704 	addi	fp,sp,28
    79e4:	e13ffa15 	stw	r4,-24(fp)
    79e8:	e17ff915 	stw	r5,-28(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    79ec:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    79f0:	e0bff917 	ldw	r2,-28(fp)
    79f4:	1000021e 	bne	r2,zero,7a00 <OSMemGet+0x28>
        return ((void *)0);
    79f8:	0005883a 	mov	r2,zero
    79fc:	00003006 	br	7ac0 <OSMemGet+0xe8>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
    7a00:	e0bffa17 	ldw	r2,-24(fp)
    7a04:	1000051e 	bne	r2,zero,7a1c <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
    7a08:	e0bff917 	ldw	r2,-28(fp)
    7a0c:	00c01804 	movi	r3,96
    7a10:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    7a14:	0005883a 	mov	r2,zero
    7a18:	00002906 	br	7ac0 <OSMemGet+0xe8>
  NIOS2_READ_STATUS (context);
    7a1c:	0005303a 	rdctl	r2,status
    7a20:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7a24:	e0fffd17 	ldw	r3,-12(fp)
    7a28:	00bfff84 	movi	r2,-2
    7a2c:	1884703a 	and	r2,r3,r2
    7a30:	1001703a 	wrctl	status,r2
  return context;
    7a34:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    7a38:	e0bfff15 	stw	r2,-4(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
    7a3c:	e0bffa17 	ldw	r2,-24(fp)
    7a40:	10800417 	ldw	r2,16(r2)
    7a44:	10001526 	beq	r2,zero,7a9c <OSMemGet+0xc4>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
    7a48:	e0bffa17 	ldw	r2,-24(fp)
    7a4c:	10800117 	ldw	r2,4(r2)
    7a50:	e0bffe15 	stw	r2,-8(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
    7a54:	e0bffe17 	ldw	r2,-8(fp)
    7a58:	10c00017 	ldw	r3,0(r2)
    7a5c:	e0bffa17 	ldw	r2,-24(fp)
    7a60:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
    7a64:	e0bffa17 	ldw	r2,-24(fp)
    7a68:	10800417 	ldw	r2,16(r2)
    7a6c:	10ffffc4 	addi	r3,r2,-1
    7a70:	e0bffa17 	ldw	r2,-24(fp)
    7a74:	10c00415 	stw	r3,16(r2)
    7a78:	e0bfff17 	ldw	r2,-4(fp)
    7a7c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    7a80:	e0bffc17 	ldw	r2,-16(fp)
    7a84:	1001703a 	wrctl	status,r2
}
    7a88:	0001883a 	nop
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
    7a8c:	e0bff917 	ldw	r2,-28(fp)
    7a90:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
    7a94:	e0bffe17 	ldw	r2,-8(fp)
    7a98:	00000906 	br	7ac0 <OSMemGet+0xe8>
    7a9c:	e0bfff17 	ldw	r2,-4(fp)
    7aa0:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    7aa4:	e0bffb17 	ldw	r2,-20(fp)
    7aa8:	1001703a 	wrctl	status,r2
}
    7aac:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
    7ab0:	e0bff917 	ldw	r2,-28(fp)
    7ab4:	00c01744 	movi	r3,93
    7ab8:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
    7abc:	0005883a 	mov	r2,zero
}
    7ac0:	e037883a 	mov	sp,fp
    7ac4:	df000017 	ldw	fp,0(sp)
    7ac8:	dec00104 	addi	sp,sp,4
    7acc:	f800283a 	ret

00007ad0 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
    7ad0:	defff704 	addi	sp,sp,-36
    7ad4:	dfc00815 	stw	ra,32(sp)
    7ad8:	df000715 	stw	fp,28(sp)
    7adc:	df000704 	addi	fp,sp,28
    7ae0:	e13ffb15 	stw	r4,-20(fp)
    7ae4:	e17ffa15 	stw	r5,-24(fp)
    7ae8:	e1bff915 	stw	r6,-28(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    7aec:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    7af0:	e0bff917 	ldw	r2,-28(fp)
    7af4:	1000021e 	bne	r2,zero,7b00 <OSMemNameGet+0x30>
        return (0);
    7af8:	0005883a 	mov	r2,zero
    7afc:	00002c06 	br	7bb0 <OSMemNameGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
    7b00:	e0bffb17 	ldw	r2,-20(fp)
    7b04:	1000051e 	bne	r2,zero,7b1c <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
    7b08:	e0bff917 	ldw	r2,-28(fp)
    7b0c:	00c01804 	movi	r3,96
    7b10:	10c00005 	stb	r3,0(r2)
        return (0);
    7b14:	0005883a 	mov	r2,zero
    7b18:	00002506 	br	7bb0 <OSMemNameGet+0xe0>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    7b1c:	e0bffa17 	ldw	r2,-24(fp)
    7b20:	1000051e 	bne	r2,zero,7b38 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
    7b24:	e0bff917 	ldw	r2,-28(fp)
    7b28:	00c00304 	movi	r3,12
    7b2c:	10c00005 	stb	r3,0(r2)
        return (0);
    7b30:	0005883a 	mov	r2,zero
    7b34:	00001e06 	br	7bb0 <OSMemNameGet+0xe0>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    7b38:	d0a7bf43 	ldbu	r2,-24835(gp)
    7b3c:	10803fcc 	andi	r2,r2,255
    7b40:	10000526 	beq	r2,zero,7b58 <OSMemNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
    7b44:	e0bff917 	ldw	r2,-28(fp)
    7b48:	00c00444 	movi	r3,17
    7b4c:	10c00005 	stb	r3,0(r2)
        return (0);
    7b50:	0005883a 	mov	r2,zero
    7b54:	00001606 	br	7bb0 <OSMemNameGet+0xe0>
  NIOS2_READ_STATUS (context);
    7b58:	0005303a 	rdctl	r2,status
    7b5c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7b60:	e0fffc17 	ldw	r3,-16(fp)
    7b64:	00bfff84 	movi	r2,-2
    7b68:	1884703a 	and	r2,r3,r2
    7b6c:	1001703a 	wrctl	status,r2
  return context;
    7b70:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    7b74:	e0bfff15 	stw	r2,-4(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
    7b78:	e0bffb17 	ldw	r2,-20(fp)
    7b7c:	10800504 	addi	r2,r2,20
    7b80:	100b883a 	mov	r5,r2
    7b84:	e13ffa17 	ldw	r4,-24(fp)
    7b88:	000591c0 	call	591c <OS_StrCopy>
    7b8c:	e0bffec5 	stb	r2,-5(fp)
    7b90:	e0bfff17 	ldw	r2,-4(fp)
    7b94:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
    7b98:	e0bffd17 	ldw	r2,-12(fp)
    7b9c:	1001703a 	wrctl	status,r2
}
    7ba0:	0001883a 	nop
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    7ba4:	e0bff917 	ldw	r2,-28(fp)
    7ba8:	10000005 	stb	zero,0(r2)
    return (len);
    7bac:	e0bffec3 	ldbu	r2,-5(fp)
}
    7bb0:	e037883a 	mov	sp,fp
    7bb4:	dfc00117 	ldw	ra,4(sp)
    7bb8:	df000017 	ldw	fp,0(sp)
    7bbc:	dec00204 	addi	sp,sp,8
    7bc0:	f800283a 	ret

00007bc4 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
    7bc4:	defff604 	addi	sp,sp,-40
    7bc8:	dfc00915 	stw	ra,36(sp)
    7bcc:	df000815 	stw	fp,32(sp)
    7bd0:	df000804 	addi	fp,sp,32
    7bd4:	e13ffa15 	stw	r4,-24(fp)
    7bd8:	e17ff915 	stw	r5,-28(fp)
    7bdc:	e1bff815 	stw	r6,-32(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    7be0:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    7be4:	e0bff817 	ldw	r2,-32(fp)
    7be8:	10003726 	beq	r2,zero,7cc8 <OSMemNameSet+0x104>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
    7bec:	e0bffa17 	ldw	r2,-24(fp)
    7bf0:	1000041e 	bne	r2,zero,7c04 <OSMemNameSet+0x40>
        *perr = OS_ERR_MEM_INVALID_PMEM;
    7bf4:	e0bff817 	ldw	r2,-32(fp)
    7bf8:	00c01804 	movi	r3,96
    7bfc:	10c00005 	stb	r3,0(r2)
        return;
    7c00:	00003206 	br	7ccc <OSMemNameSet+0x108>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    7c04:	e0bff917 	ldw	r2,-28(fp)
    7c08:	1000041e 	bne	r2,zero,7c1c <OSMemNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
    7c0c:	e0bff817 	ldw	r2,-32(fp)
    7c10:	00c00304 	movi	r3,12
    7c14:	10c00005 	stb	r3,0(r2)
        return;
    7c18:	00002c06 	br	7ccc <OSMemNameSet+0x108>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    7c1c:	d0a7bf43 	ldbu	r2,-24835(gp)
    7c20:	10803fcc 	andi	r2,r2,255
    7c24:	10000426 	beq	r2,zero,7c38 <OSMemNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
    7c28:	e0bff817 	ldw	r2,-32(fp)
    7c2c:	00c00484 	movi	r3,18
    7c30:	10c00005 	stb	r3,0(r2)
        return;
    7c34:	00002506 	br	7ccc <OSMemNameSet+0x108>
  NIOS2_READ_STATUS (context);
    7c38:	0005303a 	rdctl	r2,status
    7c3c:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7c40:	e0fffd17 	ldw	r3,-12(fp)
    7c44:	00bfff84 	movi	r2,-2
    7c48:	1884703a 	and	r2,r3,r2
    7c4c:	1001703a 	wrctl	status,r2
  return context;
    7c50:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    7c54:	e0bfff15 	stw	r2,-4(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
    7c58:	e13ff917 	ldw	r4,-28(fp)
    7c5c:	00059900 	call	5990 <OS_StrLen>
    7c60:	e0bffec5 	stb	r2,-5(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
    7c64:	e0bffec3 	ldbu	r2,-5(fp)
    7c68:	10800830 	cmpltui	r2,r2,32
    7c6c:	1000091e 	bne	r2,zero,7c94 <OSMemNameSet+0xd0>
    7c70:	e0bfff17 	ldw	r2,-4(fp)
    7c74:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    7c78:	e0bffc17 	ldw	r2,-16(fp)
    7c7c:	1001703a 	wrctl	status,r2
}
    7c80:	0001883a 	nop
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
    7c84:	e0bff817 	ldw	r2,-32(fp)
    7c88:	00c018c4 	movi	r3,99
    7c8c:	10c00005 	stb	r3,0(r2)
        return;
    7c90:	00000e06 	br	7ccc <OSMemNameSet+0x108>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    7c94:	e0bffa17 	ldw	r2,-24(fp)
    7c98:	10800504 	addi	r2,r2,20
    7c9c:	e17ff917 	ldw	r5,-28(fp)
    7ca0:	1009883a 	mov	r4,r2
    7ca4:	000591c0 	call	591c <OS_StrCopy>
    7ca8:	e0bfff17 	ldw	r2,-4(fp)
    7cac:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    7cb0:	e0bffb17 	ldw	r2,-20(fp)
    7cb4:	1001703a 	wrctl	status,r2
}
    7cb8:	0001883a 	nop
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    7cbc:	e0bff817 	ldw	r2,-32(fp)
    7cc0:	10000005 	stb	zero,0(r2)
    7cc4:	00000106 	br	7ccc <OSMemNameSet+0x108>
        return;
    7cc8:	0001883a 	nop
}
    7ccc:	e037883a 	mov	sp,fp
    7cd0:	dfc00117 	ldw	ra,4(sp)
    7cd4:	df000017 	ldw	fp,0(sp)
    7cd8:	dec00204 	addi	sp,sp,8
    7cdc:	f800283a 	ret

00007ce0 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
    7ce0:	defff904 	addi	sp,sp,-28
    7ce4:	df000615 	stw	fp,24(sp)
    7ce8:	df000604 	addi	fp,sp,24
    7cec:	e13ffb15 	stw	r4,-20(fp)
    7cf0:	e17ffa15 	stw	r5,-24(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    7cf4:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
    7cf8:	e0bffb17 	ldw	r2,-20(fp)
    7cfc:	1000021e 	bne	r2,zero,7d08 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
    7d00:	00801804 	movi	r2,96
    7d04:	00002a06 	br	7db0 <OSMemPut+0xd0>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
    7d08:	e0bffa17 	ldw	r2,-24(fp)
    7d0c:	1000021e 	bne	r2,zero,7d18 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
    7d10:	008017c4 	movi	r2,95
    7d14:	00002606 	br	7db0 <OSMemPut+0xd0>
  NIOS2_READ_STATUS (context);
    7d18:	0005303a 	rdctl	r2,status
    7d1c:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7d20:	e0fffe17 	ldw	r3,-8(fp)
    7d24:	00bfff84 	movi	r2,-2
    7d28:	1884703a 	and	r2,r3,r2
    7d2c:	1001703a 	wrctl	status,r2
  return context;
    7d30:	e0bffe17 	ldw	r2,-8(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    7d34:	e0bfff15 	stw	r2,-4(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
    7d38:	e0bffb17 	ldw	r2,-20(fp)
    7d3c:	10c00417 	ldw	r3,16(r2)
    7d40:	e0bffb17 	ldw	r2,-20(fp)
    7d44:	10800317 	ldw	r2,12(r2)
    7d48:	18800736 	bltu	r3,r2,7d68 <OSMemPut+0x88>
    7d4c:	e0bfff17 	ldw	r2,-4(fp)
    7d50:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
    7d54:	e0bffd17 	ldw	r2,-12(fp)
    7d58:	1001703a 	wrctl	status,r2
}
    7d5c:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
    7d60:	00801784 	movi	r2,94
    7d64:	00001206 	br	7db0 <OSMemPut+0xd0>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
    7d68:	e0bffb17 	ldw	r2,-20(fp)
    7d6c:	10c00117 	ldw	r3,4(r2)
    7d70:	e0bffa17 	ldw	r2,-24(fp)
    7d74:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
    7d78:	e0bffb17 	ldw	r2,-20(fp)
    7d7c:	e0fffa17 	ldw	r3,-24(fp)
    7d80:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
    7d84:	e0bffb17 	ldw	r2,-20(fp)
    7d88:	10800417 	ldw	r2,16(r2)
    7d8c:	10c00044 	addi	r3,r2,1
    7d90:	e0bffb17 	ldw	r2,-20(fp)
    7d94:	10c00415 	stw	r3,16(r2)
    7d98:	e0bfff17 	ldw	r2,-4(fp)
    7d9c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    7da0:	e0bffc17 	ldw	r2,-16(fp)
    7da4:	1001703a 	wrctl	status,r2
}
    7da8:	0001883a 	nop
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
    7dac:	0005883a 	mov	r2,zero
}
    7db0:	e037883a 	mov	sp,fp
    7db4:	df000017 	ldw	fp,0(sp)
    7db8:	dec00104 	addi	sp,sp,4
    7dbc:	f800283a 	ret

00007dc0 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
    7dc0:	defffa04 	addi	sp,sp,-24
    7dc4:	df000515 	stw	fp,20(sp)
    7dc8:	df000504 	addi	fp,sp,20
    7dcc:	e13ffc15 	stw	r4,-16(fp)
    7dd0:	e17ffb15 	stw	r5,-20(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    7dd4:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
    7dd8:	e0bffc17 	ldw	r2,-16(fp)
    7ddc:	1000021e 	bne	r2,zero,7de8 <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
    7de0:	00801804 	movi	r2,96
    7de4:	00002d06 	br	7e9c <OSMemQuery+0xdc>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
    7de8:	e0bffb17 	ldw	r2,-20(fp)
    7dec:	1000021e 	bne	r2,zero,7df8 <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
    7df0:	00801844 	movi	r2,97
    7df4:	00002906 	br	7e9c <OSMemQuery+0xdc>
  NIOS2_READ_STATUS (context);
    7df8:	0005303a 	rdctl	r2,status
    7dfc:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7e00:	e0fffd17 	ldw	r3,-12(fp)
    7e04:	00bfff84 	movi	r2,-2
    7e08:	1884703a 	and	r2,r3,r2
    7e0c:	1001703a 	wrctl	status,r2
  return context;
    7e10:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    7e14:	e0bfff15 	stw	r2,-4(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
    7e18:	e0bffc17 	ldw	r2,-16(fp)
    7e1c:	10c00017 	ldw	r3,0(r2)
    7e20:	e0bffb17 	ldw	r2,-20(fp)
    7e24:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
    7e28:	e0bffc17 	ldw	r2,-16(fp)
    7e2c:	10c00117 	ldw	r3,4(r2)
    7e30:	e0bffb17 	ldw	r2,-20(fp)
    7e34:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
    7e38:	e0bffc17 	ldw	r2,-16(fp)
    7e3c:	10c00217 	ldw	r3,8(r2)
    7e40:	e0bffb17 	ldw	r2,-20(fp)
    7e44:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
    7e48:	e0bffc17 	ldw	r2,-16(fp)
    7e4c:	10c00317 	ldw	r3,12(r2)
    7e50:	e0bffb17 	ldw	r2,-20(fp)
    7e54:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
    7e58:	e0bffc17 	ldw	r2,-16(fp)
    7e5c:	10c00417 	ldw	r3,16(r2)
    7e60:	e0bffb17 	ldw	r2,-20(fp)
    7e64:	10c00415 	stw	r3,16(r2)
    7e68:	e0bfff17 	ldw	r2,-4(fp)
    7e6c:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
    7e70:	e0bffe17 	ldw	r2,-8(fp)
    7e74:	1001703a 	wrctl	status,r2
}
    7e78:	0001883a 	nop
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
    7e7c:	e0bffb17 	ldw	r2,-20(fp)
    7e80:	10c00317 	ldw	r3,12(r2)
    7e84:	e0bffb17 	ldw	r2,-20(fp)
    7e88:	10800417 	ldw	r2,16(r2)
    7e8c:	1887c83a 	sub	r3,r3,r2
    7e90:	e0bffb17 	ldw	r2,-20(fp)
    7e94:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
    7e98:	0005883a 	mov	r2,zero
}
    7e9c:	e037883a 	mov	sp,fp
    7ea0:	df000017 	ldw	fp,0(sp)
    7ea4:	dec00104 	addi	sp,sp,4
    7ea8:	f800283a 	ret

00007eac <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
    7eac:	defffc04 	addi	sp,sp,-16
    7eb0:	dfc00315 	stw	ra,12(sp)
    7eb4:	df000215 	stw	fp,8(sp)
    7eb8:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    7ebc:	01430c04 	movi	r5,3120
    7ec0:	010000b4 	movhi	r4,2
    7ec4:	21260604 	addi	r4,r4,-26600
    7ec8:	00057200 	call	5720 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    7ecc:	008000b4 	movhi	r2,2
    7ed0:	10a60604 	addi	r2,r2,-26600
    7ed4:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
    7ed8:	e03ffe8d 	sth	zero,-6(fp)
    7edc:	00001306 	br	7f2c <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
    7ee0:	e0bffe8b 	ldhu	r2,-6(fp)
    7ee4:	10800044 	addi	r2,r2,1
    7ee8:	10c00d24 	muli	r3,r2,52
    7eec:	008000b4 	movhi	r2,2
    7ef0:	10a60604 	addi	r2,r2,-26600
    7ef4:	1887883a 	add	r3,r3,r2
    7ef8:	e0bfff17 	ldw	r2,-4(fp)
    7efc:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
    7f00:	e0bfff17 	ldw	r2,-4(fp)
    7f04:	00c00fc4 	movi	r3,63
    7f08:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
    7f0c:	e0bfff17 	ldw	r2,-4(fp)
    7f10:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
    7f14:	e0bfff17 	ldw	r2,-4(fp)
    7f18:	10800d04 	addi	r2,r2,52
    7f1c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
    7f20:	e0bffe8b 	ldhu	r2,-6(fp)
    7f24:	10800044 	addi	r2,r2,1
    7f28:	e0bffe8d 	sth	r2,-6(fp)
    7f2c:	e0bffe8b 	ldhu	r2,-6(fp)
    7f30:	10800ef0 	cmpltui	r2,r2,59
    7f34:	103fea1e 	bne	r2,zero,7ee0 <OS_MemInit+0x34>
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
    7f38:	e0bfff17 	ldw	r2,-4(fp)
    7f3c:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
    7f40:	e0bfff17 	ldw	r2,-4(fp)
    7f44:	00c00fc4 	movi	r3,63
    7f48:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
    7f4c:	e0bfff17 	ldw	r2,-4(fp)
    7f50:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
    7f54:	008000b4 	movhi	r2,2
    7f58:	10a60604 	addi	r2,r2,-26600
    7f5c:	d0a7c815 	stw	r2,-24800(gp)
#endif
}
    7f60:	0001883a 	nop
    7f64:	e037883a 	mov	sp,fp
    7f68:	dfc00117 	ldw	ra,4(sp)
    7f6c:	df000017 	ldw	fp,0(sp)
    7f70:	dec00204 	addi	sp,sp,8
    7f74:	f800283a 	ret

00007f78 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
    7f78:	defff804 	addi	sp,sp,-32
    7f7c:	df000715 	stw	fp,28(sp)
    7f80:	df000704 	addi	fp,sp,28
    7f84:	e13ffa15 	stw	r4,-24(fp)
    7f88:	e17ff915 	stw	r5,-28(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    7f8c:	e03ffe15 	stw	zero,-8(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    7f90:	e0bff917 	ldw	r2,-28(fp)
    7f94:	1000021e 	bne	r2,zero,7fa0 <OSQAccept+0x28>
        return ((void *)0);
    7f98:	0005883a 	mov	r2,zero
    7f9c:	00004306 	br	80ac <OSQAccept+0x134>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
    7fa0:	e0bffa17 	ldw	r2,-24(fp)
    7fa4:	1000051e 	bne	r2,zero,7fbc <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
    7fa8:	e0bff917 	ldw	r2,-28(fp)
    7fac:	00c00104 	movi	r3,4
    7fb0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    7fb4:	0005883a 	mov	r2,zero
    7fb8:	00003c06 	br	80ac <OSQAccept+0x134>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
    7fbc:	e0bffa17 	ldw	r2,-24(fp)
    7fc0:	10800003 	ldbu	r2,0(r2)
    7fc4:	10803fcc 	andi	r2,r2,255
    7fc8:	108000a0 	cmpeqi	r2,r2,2
    7fcc:	1000051e 	bne	r2,zero,7fe4 <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
    7fd0:	e0bff917 	ldw	r2,-28(fp)
    7fd4:	00c00044 	movi	r3,1
    7fd8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    7fdc:	0005883a 	mov	r2,zero
    7fe0:	00003206 	br	80ac <OSQAccept+0x134>
  NIOS2_READ_STATUS (context);
    7fe4:	0005303a 	rdctl	r2,status
    7fe8:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7fec:	e0fffc17 	ldw	r3,-16(fp)
    7ff0:	00bfff84 	movi	r2,-2
    7ff4:	1884703a 	and	r2,r3,r2
    7ff8:	1001703a 	wrctl	status,r2
  return context;
    7ffc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    8000:	e0bffe15 	stw	r2,-8(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
    8004:	e0bffa17 	ldw	r2,-24(fp)
    8008:	10800117 	ldw	r2,4(r2)
    800c:	e0bffd15 	stw	r2,-12(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
    8010:	e0bffd17 	ldw	r2,-12(fp)
    8014:	1080058b 	ldhu	r2,22(r2)
    8018:	10bfffcc 	andi	r2,r2,65535
    801c:	10001926 	beq	r2,zero,8084 <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
    8020:	e0bffd17 	ldw	r2,-12(fp)
    8024:	10800417 	ldw	r2,16(r2)
    8028:	11000104 	addi	r4,r2,4
    802c:	e0fffd17 	ldw	r3,-12(fp)
    8030:	19000415 	stw	r4,16(r3)
    8034:	10800017 	ldw	r2,0(r2)
    8038:	e0bfff15 	stw	r2,-4(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
    803c:	e0bffd17 	ldw	r2,-12(fp)
    8040:	1080058b 	ldhu	r2,22(r2)
    8044:	10bfffc4 	addi	r2,r2,-1
    8048:	1007883a 	mov	r3,r2
    804c:	e0bffd17 	ldw	r2,-12(fp)
    8050:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
    8054:	e0bffd17 	ldw	r2,-12(fp)
    8058:	10c00417 	ldw	r3,16(r2)
    805c:	e0bffd17 	ldw	r2,-12(fp)
    8060:	10800217 	ldw	r2,8(r2)
    8064:	1880041e 	bne	r3,r2,8078 <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
    8068:	e0bffd17 	ldw	r2,-12(fp)
    806c:	10c00117 	ldw	r3,4(r2)
    8070:	e0bffd17 	ldw	r2,-12(fp)
    8074:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
    8078:	e0bff917 	ldw	r2,-28(fp)
    807c:	10000005 	stb	zero,0(r2)
    8080:	00000406 	br	8094 <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
    8084:	e0bff917 	ldw	r2,-28(fp)
    8088:	00c007c4 	movi	r3,31
    808c:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
    8090:	e03fff15 	stw	zero,-4(fp)
    8094:	e0bffe17 	ldw	r2,-8(fp)
    8098:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    809c:	e0bffb17 	ldw	r2,-20(fp)
    80a0:	1001703a 	wrctl	status,r2
}
    80a4:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
    80a8:	e0bfff17 	ldw	r2,-4(fp)
}
    80ac:	e037883a 	mov	sp,fp
    80b0:	df000017 	ldw	fp,0(sp)
    80b4:	dec00104 	addi	sp,sp,4
    80b8:	f800283a 	ret

000080bc <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
    80bc:	defff404 	addi	sp,sp,-48
    80c0:	dfc00b15 	stw	ra,44(sp)
    80c4:	df000a15 	stw	fp,40(sp)
    80c8:	df000a04 	addi	fp,sp,40
    80cc:	e13ff715 	stw	r4,-36(fp)
    80d0:	2805883a 	mov	r2,r5
    80d4:	e0bff60d 	sth	r2,-40(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    80d8:	e03ffe15 	stw	zero,-8(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
    80dc:	d0a7bf43 	ldbu	r2,-24835(gp)
    80e0:	10803fcc 	andi	r2,r2,255
    80e4:	10000226 	beq	r2,zero,80f0 <OSQCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
    80e8:	0005883a 	mov	r2,zero
    80ec:	00005a06 	br	8258 <OSQCreate+0x19c>
  NIOS2_READ_STATUS (context);
    80f0:	0005303a 	rdctl	r2,status
    80f4:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    80f8:	e0fffc17 	ldw	r3,-16(fp)
    80fc:	00bfff84 	movi	r2,-2
    8100:	1884703a 	and	r2,r3,r2
    8104:	1001703a 	wrctl	status,r2
  return context;
    8108:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    810c:	e0bffe15 	stw	r2,-8(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
    8110:	d0a7ba17 	ldw	r2,-24856(gp)
    8114:	e0bfff15 	stw	r2,-4(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
    8118:	d0a7ba17 	ldw	r2,-24856(gp)
    811c:	10000326 	beq	r2,zero,812c <OSQCreate+0x70>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
    8120:	d0a7ba17 	ldw	r2,-24856(gp)
    8124:	10800117 	ldw	r2,4(r2)
    8128:	d0a7ba15 	stw	r2,-24856(gp)
    812c:	e0bffe17 	ldw	r2,-8(fp)
    8130:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    8134:	e0bffb17 	ldw	r2,-20(fp)
    8138:	1001703a 	wrctl	status,r2
}
    813c:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
    8140:	e0bfff17 	ldw	r2,-4(fp)
    8144:	10004326 	beq	r2,zero,8254 <OSQCreate+0x198>
  NIOS2_READ_STATUS (context);
    8148:	0005303a 	rdctl	r2,status
    814c:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8150:	e0fffa17 	ldw	r3,-24(fp)
    8154:	00bfff84 	movi	r2,-2
    8158:	1884703a 	and	r2,r3,r2
    815c:	1001703a 	wrctl	status,r2
  return context;
    8160:	e0bffa17 	ldw	r2,-24(fp)
        OS_ENTER_CRITICAL();
    8164:	e0bffe15 	stw	r2,-8(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
    8168:	d0a7c917 	ldw	r2,-24796(gp)
    816c:	e0bffd15 	stw	r2,-12(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
    8170:	e0bffd17 	ldw	r2,-12(fp)
    8174:	10002c26 	beq	r2,zero,8228 <OSQCreate+0x16c>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
    8178:	d0a7c917 	ldw	r2,-24796(gp)
    817c:	10800017 	ldw	r2,0(r2)
    8180:	d0a7c915 	stw	r2,-24796(gp)
    8184:	e0bffe17 	ldw	r2,-8(fp)
    8188:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
    818c:	e0bff917 	ldw	r2,-28(fp)
    8190:	1001703a 	wrctl	status,r2
}
    8194:	0001883a 	nop
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
    8198:	e0bffd17 	ldw	r2,-12(fp)
    819c:	e0fff717 	ldw	r3,-36(fp)
    81a0:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
    81a4:	e0bff60b 	ldhu	r2,-40(fp)
    81a8:	100490ba 	slli	r2,r2,2
    81ac:	e0fff717 	ldw	r3,-36(fp)
    81b0:	1887883a 	add	r3,r3,r2
    81b4:	e0bffd17 	ldw	r2,-12(fp)
    81b8:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
    81bc:	e0bffd17 	ldw	r2,-12(fp)
    81c0:	e0fff717 	ldw	r3,-36(fp)
    81c4:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
    81c8:	e0bffd17 	ldw	r2,-12(fp)
    81cc:	e0fff717 	ldw	r3,-36(fp)
    81d0:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
    81d4:	e0bffd17 	ldw	r2,-12(fp)
    81d8:	e0fff60b 	ldhu	r3,-40(fp)
    81dc:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
    81e0:	e0bffd17 	ldw	r2,-12(fp)
    81e4:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
    81e8:	e0bfff17 	ldw	r2,-4(fp)
    81ec:	00c00084 	movi	r3,2
    81f0:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
    81f4:	e0bfff17 	ldw	r2,-4(fp)
    81f8:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
    81fc:	e0bfff17 	ldw	r2,-4(fp)
    8200:	e0fffd17 	ldw	r3,-12(fp)
    8204:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
    8208:	e0bfff17 	ldw	r2,-4(fp)
    820c:	00c00fc4 	movi	r3,63
    8210:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
    8214:	e0bfff17 	ldw	r2,-4(fp)
    8218:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
    821c:	e13fff17 	ldw	r4,-4(fp)
    8220:	00053340 	call	5334 <OS_EventWaitListInit>
    8224:	00000b06 	br	8254 <OSQCreate+0x198>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
    8228:	d0e7ba17 	ldw	r3,-24856(gp)
    822c:	e0bfff17 	ldw	r2,-4(fp)
    8230:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
    8234:	e0bfff17 	ldw	r2,-4(fp)
    8238:	d0a7ba15 	stw	r2,-24856(gp)
    823c:	e0bffe17 	ldw	r2,-8(fp)
    8240:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
    8244:	e0bff817 	ldw	r2,-32(fp)
    8248:	1001703a 	wrctl	status,r2
}
    824c:	0001883a 	nop
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
    8250:	e03fff15 	stw	zero,-4(fp)
        }
    }
    return (pevent);
    8254:	e0bfff17 	ldw	r2,-4(fp)
}
    8258:	e037883a 	mov	sp,fp
    825c:	dfc00117 	ldw	ra,4(sp)
    8260:	df000017 	ldw	fp,0(sp)
    8264:	dec00204 	addi	sp,sp,8
    8268:	f800283a 	ret

0000826c <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    826c:	defff204 	addi	sp,sp,-56
    8270:	dfc00d15 	stw	ra,52(sp)
    8274:	df000c15 	stw	fp,48(sp)
    8278:	df000c04 	addi	fp,sp,48
    827c:	e13ff615 	stw	r4,-40(fp)
    8280:	2805883a 	mov	r2,r5
    8284:	e1bff415 	stw	r6,-48(fp)
    8288:	e0bff505 	stb	r2,-44(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    828c:	e03ffd15 	stw	zero,-12(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    8290:	e0bff417 	ldw	r2,-48(fp)
    8294:	1000021e 	bne	r2,zero,82a0 <OSQDel+0x34>
        return (pevent);
    8298:	e0bff617 	ldw	r2,-40(fp)
    829c:	00009206 	br	84e8 <OSQDel+0x27c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    82a0:	e0bff617 	ldw	r2,-40(fp)
    82a4:	1000051e 	bne	r2,zero,82bc <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    82a8:	e0bff417 	ldw	r2,-48(fp)
    82ac:	00c00104 	movi	r3,4
    82b0:	10c00005 	stb	r3,0(r2)
        return (pevent);
    82b4:	e0bff617 	ldw	r2,-40(fp)
    82b8:	00008b06 	br	84e8 <OSQDel+0x27c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
    82bc:	e0bff617 	ldw	r2,-40(fp)
    82c0:	10800003 	ldbu	r2,0(r2)
    82c4:	10803fcc 	andi	r2,r2,255
    82c8:	108000a0 	cmpeqi	r2,r2,2
    82cc:	1000051e 	bne	r2,zero,82e4 <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    82d0:	e0bff417 	ldw	r2,-48(fp)
    82d4:	00c00044 	movi	r3,1
    82d8:	10c00005 	stb	r3,0(r2)
        return (pevent);
    82dc:	e0bff617 	ldw	r2,-40(fp)
    82e0:	00008106 	br	84e8 <OSQDel+0x27c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    82e4:	d0a7bf43 	ldbu	r2,-24835(gp)
    82e8:	10803fcc 	andi	r2,r2,255
    82ec:	10000526 	beq	r2,zero,8304 <OSQDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
    82f0:	e0bff417 	ldw	r2,-48(fp)
    82f4:	00c003c4 	movi	r3,15
    82f8:	10c00005 	stb	r3,0(r2)
        return (pevent);
    82fc:	e0bff617 	ldw	r2,-40(fp)
    8300:	00007906 	br	84e8 <OSQDel+0x27c>
  NIOS2_READ_STATUS (context);
    8304:	0005303a 	rdctl	r2,status
    8308:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    830c:	e0fffb17 	ldw	r3,-20(fp)
    8310:	00bfff84 	movi	r2,-2
    8314:	1884703a 	and	r2,r3,r2
    8318:	1001703a 	wrctl	status,r2
  return context;
    831c:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
    8320:	e0bffd15 	stw	r2,-12(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
    8324:	e0bff617 	ldw	r2,-40(fp)
    8328:	10800283 	ldbu	r2,10(r2)
    832c:	10803fcc 	andi	r2,r2,255
    8330:	10000326 	beq	r2,zero,8340 <OSQDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    8334:	00800044 	movi	r2,1
    8338:	e0bfffc5 	stb	r2,-1(fp)
    833c:	00000106 	br	8344 <OSQDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    8340:	e03fffc5 	stb	zero,-1(fp)
    }
    switch (opt) {
    8344:	e0bff503 	ldbu	r2,-44(fp)
    8348:	10000326 	beq	r2,zero,8358 <OSQDel+0xec>
    834c:	10800060 	cmpeqi	r2,r2,1
    8350:	1000321e 	bne	r2,zero,841c <OSQDel+0x1b0>
    8354:	00005806 	br	84b8 <OSQDel+0x24c>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
    8358:	e0bfffc3 	ldbu	r2,-1(fp)
    835c:	10001f1e 	bne	r2,zero,83dc <OSQDel+0x170>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
    8360:	e0bff617 	ldw	r2,-40(fp)
    8364:	00c00fc4 	movi	r3,63
    8368:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
    836c:	e0bff617 	ldw	r2,-40(fp)
    8370:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
    8374:	e0bff617 	ldw	r2,-40(fp)
    8378:	10800117 	ldw	r2,4(r2)
    837c:	e0bffc15 	stw	r2,-16(fp)
                 pq->OSQPtr             = OSQFreeList;
    8380:	d0e7c917 	ldw	r3,-24796(gp)
    8384:	e0bffc17 	ldw	r2,-16(fp)
    8388:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
    838c:	e0bffc17 	ldw	r2,-16(fp)
    8390:	d0a7c915 	stw	r2,-24796(gp)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    8394:	e0bff617 	ldw	r2,-40(fp)
    8398:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
    839c:	d0e7ba17 	ldw	r3,-24856(gp)
    83a0:	e0bff617 	ldw	r2,-40(fp)
    83a4:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
    83a8:	e0bff617 	ldw	r2,-40(fp)
    83ac:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
    83b0:	e0bff617 	ldw	r2,-40(fp)
    83b4:	d0a7ba15 	stw	r2,-24856(gp)
    83b8:	e0bffd17 	ldw	r2,-12(fp)
    83bc:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
    83c0:	e0bffa17 	ldw	r2,-24(fp)
    83c4:	1001703a 	wrctl	status,r2
}
    83c8:	0001883a 	nop
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
    83cc:	e0bff417 	ldw	r2,-48(fp)
    83d0:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
    83d4:	e03ffe15 	stw	zero,-8(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
    83d8:	00004206 	br	84e4 <OSQDel+0x278>
    83dc:	e0bffd17 	ldw	r2,-12(fp)
    83e0:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
    83e4:	e0bff917 	ldw	r2,-28(fp)
    83e8:	1001703a 	wrctl	status,r2
}
    83ec:	0001883a 	nop
                 *perr                  = OS_ERR_TASK_WAITING;
    83f0:	e0bff417 	ldw	r2,-48(fp)
    83f4:	00c01244 	movi	r3,73
    83f8:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
    83fc:	e0bff617 	ldw	r2,-40(fp)
    8400:	e0bffe15 	stw	r2,-8(fp)
             break;
    8404:	00003706 	br	84e4 <OSQDel+0x278>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
    8408:	000f883a 	mov	r7,zero
    840c:	01800104 	movi	r6,4
    8410:	000b883a 	mov	r5,zero
    8414:	e13ff617 	ldw	r4,-40(fp)
    8418:	0004db00 	call	4db0 <OS_EventTaskRdy>
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
    841c:	e0bff617 	ldw	r2,-40(fp)
    8420:	10800283 	ldbu	r2,10(r2)
    8424:	10803fcc 	andi	r2,r2,255
    8428:	103ff71e 	bne	r2,zero,8408 <OSQDel+0x19c>
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
    842c:	e0bff617 	ldw	r2,-40(fp)
    8430:	00c00fc4 	movi	r3,63
    8434:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
    8438:	e0bff617 	ldw	r2,-40(fp)
    843c:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
    8440:	e0bff617 	ldw	r2,-40(fp)
    8444:	10800117 	ldw	r2,4(r2)
    8448:	e0bffc15 	stw	r2,-16(fp)
             pq->OSQPtr             = OSQFreeList;
    844c:	d0e7c917 	ldw	r3,-24796(gp)
    8450:	e0bffc17 	ldw	r2,-16(fp)
    8454:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
    8458:	e0bffc17 	ldw	r2,-16(fp)
    845c:	d0a7c915 	stw	r2,-24796(gp)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    8460:	e0bff617 	ldw	r2,-40(fp)
    8464:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
    8468:	d0e7ba17 	ldw	r3,-24856(gp)
    846c:	e0bff617 	ldw	r2,-40(fp)
    8470:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
    8474:	e0bff617 	ldw	r2,-40(fp)
    8478:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
    847c:	e0bff617 	ldw	r2,-40(fp)
    8480:	d0a7ba15 	stw	r2,-24856(gp)
    8484:	e0bffd17 	ldw	r2,-12(fp)
    8488:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
    848c:	e0bff817 	ldw	r2,-32(fp)
    8490:	1001703a 	wrctl	status,r2
}
    8494:	0001883a 	nop
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
    8498:	e0bfffc3 	ldbu	r2,-1(fp)
    849c:	10800058 	cmpnei	r2,r2,1
    84a0:	1000011e 	bne	r2,zero,84a8 <OSQDel+0x23c>
                 OS_Sched();                               /* Find highest priority task ready to run  */
    84a4:	00057e40 	call	57e4 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
    84a8:	e0bff417 	ldw	r2,-48(fp)
    84ac:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
    84b0:	e03ffe15 	stw	zero,-8(fp)
             break;
    84b4:	00000b06 	br	84e4 <OSQDel+0x278>
    84b8:	e0bffd17 	ldw	r2,-12(fp)
    84bc:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context);
    84c0:	e0bff717 	ldw	r2,-36(fp)
    84c4:	1001703a 	wrctl	status,r2
}
    84c8:	0001883a 	nop

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
    84cc:	e0bff417 	ldw	r2,-48(fp)
    84d0:	00c001c4 	movi	r3,7
    84d4:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
    84d8:	e0bff617 	ldw	r2,-40(fp)
    84dc:	e0bffe15 	stw	r2,-8(fp)
             break;
    84e0:	0001883a 	nop
    }
    return (pevent_return);
    84e4:	e0bffe17 	ldw	r2,-8(fp)
}
    84e8:	e037883a 	mov	sp,fp
    84ec:	dfc00117 	ldw	ra,4(sp)
    84f0:	df000017 	ldw	fp,0(sp)
    84f4:	dec00204 	addi	sp,sp,8
    84f8:	f800283a 	ret

000084fc <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
    84fc:	defffa04 	addi	sp,sp,-24
    8500:	df000515 	stw	fp,20(sp)
    8504:	df000504 	addi	fp,sp,20
    8508:	e13ffb15 	stw	r4,-20(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    850c:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    8510:	e0bffb17 	ldw	r2,-20(fp)
    8514:	1000021e 	bne	r2,zero,8520 <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
    8518:	00800104 	movi	r2,4
    851c:	00002206 	br	85a8 <OSQFlush+0xac>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
    8520:	e0bffb17 	ldw	r2,-20(fp)
    8524:	10800003 	ldbu	r2,0(r2)
    8528:	10803fcc 	andi	r2,r2,255
    852c:	108000a0 	cmpeqi	r2,r2,2
    8530:	1000021e 	bne	r2,zero,853c <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
    8534:	00800044 	movi	r2,1
    8538:	00001b06 	br	85a8 <OSQFlush+0xac>
  NIOS2_READ_STATUS (context);
    853c:	0005303a 	rdctl	r2,status
    8540:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8544:	e0fffc17 	ldw	r3,-16(fp)
    8548:	00bfff84 	movi	r2,-2
    854c:	1884703a 	and	r2,r3,r2
    8550:	1001703a 	wrctl	status,r2
  return context;
    8554:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    8558:	e0bfff15 	stw	r2,-4(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
    855c:	e0bffb17 	ldw	r2,-20(fp)
    8560:	10800117 	ldw	r2,4(r2)
    8564:	e0bffe15 	stw	r2,-8(fp)
    pq->OSQIn      = pq->OSQStart;
    8568:	e0bffe17 	ldw	r2,-8(fp)
    856c:	10c00117 	ldw	r3,4(r2)
    8570:	e0bffe17 	ldw	r2,-8(fp)
    8574:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
    8578:	e0bffe17 	ldw	r2,-8(fp)
    857c:	10c00117 	ldw	r3,4(r2)
    8580:	e0bffe17 	ldw	r2,-8(fp)
    8584:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
    8588:	e0bffe17 	ldw	r2,-8(fp)
    858c:	1000058d 	sth	zero,22(r2)
    8590:	e0bfff17 	ldw	r2,-4(fp)
    8594:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
    8598:	e0bffd17 	ldw	r2,-12(fp)
    859c:	1001703a 	wrctl	status,r2
}
    85a0:	0001883a 	nop
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    85a4:	0005883a 	mov	r2,zero
}
    85a8:	e037883a 	mov	sp,fp
    85ac:	df000017 	ldw	fp,0(sp)
    85b0:	dec00104 	addi	sp,sp,4
    85b4:	f800283a 	ret

000085b8 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
    85b8:	defff304 	addi	sp,sp,-52
    85bc:	dfc00c15 	stw	ra,48(sp)
    85c0:	df000b15 	stw	fp,44(sp)
    85c4:	df000b04 	addi	fp,sp,44
    85c8:	e13ff715 	stw	r4,-36(fp)
    85cc:	2805883a 	mov	r2,r5
    85d0:	e1bff515 	stw	r6,-44(fp)
    85d4:	e0bff60d 	sth	r2,-40(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    85d8:	e03ffe15 	stw	zero,-8(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    85dc:	e0bff517 	ldw	r2,-44(fp)
    85e0:	1000021e 	bne	r2,zero,85ec <OSQPend+0x34>
        return ((void *)0);
    85e4:	0005883a 	mov	r2,zero
    85e8:	00009406 	br	883c <OSQPend+0x284>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
    85ec:	e0bff717 	ldw	r2,-36(fp)
    85f0:	1000051e 	bne	r2,zero,8608 <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    85f4:	e0bff517 	ldw	r2,-44(fp)
    85f8:	00c00104 	movi	r3,4
    85fc:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    8600:	0005883a 	mov	r2,zero
    8604:	00008d06 	br	883c <OSQPend+0x284>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
    8608:	e0bff717 	ldw	r2,-36(fp)
    860c:	10800003 	ldbu	r2,0(r2)
    8610:	10803fcc 	andi	r2,r2,255
    8614:	108000a0 	cmpeqi	r2,r2,2
    8618:	1000051e 	bne	r2,zero,8630 <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    861c:	e0bff517 	ldw	r2,-44(fp)
    8620:	00c00044 	movi	r3,1
    8624:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    8628:	0005883a 	mov	r2,zero
    862c:	00008306 	br	883c <OSQPend+0x284>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
    8630:	d0a7bf43 	ldbu	r2,-24835(gp)
    8634:	10803fcc 	andi	r2,r2,255
    8638:	10000526 	beq	r2,zero,8650 <OSQPend+0x98>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
    863c:	e0bff517 	ldw	r2,-44(fp)
    8640:	00c00084 	movi	r3,2
    8644:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    8648:	0005883a 	mov	r2,zero
    864c:	00007b06 	br	883c <OSQPend+0x284>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
    8650:	d0a7bf83 	ldbu	r2,-24834(gp)
    8654:	10803fcc 	andi	r2,r2,255
    8658:	10000526 	beq	r2,zero,8670 <OSQPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
    865c:	e0bff517 	ldw	r2,-44(fp)
    8660:	00c00344 	movi	r3,13
    8664:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    8668:	0005883a 	mov	r2,zero
    866c:	00007306 	br	883c <OSQPend+0x284>
  NIOS2_READ_STATUS (context);
    8670:	0005303a 	rdctl	r2,status
    8674:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8678:	e0fffc17 	ldw	r3,-16(fp)
    867c:	00bfff84 	movi	r2,-2
    8680:	1884703a 	and	r2,r3,r2
    8684:	1001703a 	wrctl	status,r2
  return context;
    8688:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    868c:	e0bffe15 	stw	r2,-8(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
    8690:	e0bff717 	ldw	r2,-36(fp)
    8694:	10800117 	ldw	r2,4(r2)
    8698:	e0bffd15 	stw	r2,-12(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
    869c:	e0bffd17 	ldw	r2,-12(fp)
    86a0:	1080058b 	ldhu	r2,22(r2)
    86a4:	10bfffcc 	andi	r2,r2,65535
    86a8:	10001f26 	beq	r2,zero,8728 <OSQPend+0x170>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
    86ac:	e0bffd17 	ldw	r2,-12(fp)
    86b0:	10800417 	ldw	r2,16(r2)
    86b4:	11000104 	addi	r4,r2,4
    86b8:	e0fffd17 	ldw	r3,-12(fp)
    86bc:	19000415 	stw	r4,16(r3)
    86c0:	10800017 	ldw	r2,0(r2)
    86c4:	e0bfff15 	stw	r2,-4(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
    86c8:	e0bffd17 	ldw	r2,-12(fp)
    86cc:	1080058b 	ldhu	r2,22(r2)
    86d0:	10bfffc4 	addi	r2,r2,-1
    86d4:	1007883a 	mov	r3,r2
    86d8:	e0bffd17 	ldw	r2,-12(fp)
    86dc:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
    86e0:	e0bffd17 	ldw	r2,-12(fp)
    86e4:	10c00417 	ldw	r3,16(r2)
    86e8:	e0bffd17 	ldw	r2,-12(fp)
    86ec:	10800217 	ldw	r2,8(r2)
    86f0:	1880041e 	bne	r3,r2,8704 <OSQPend+0x14c>
            pq->OSQOut = pq->OSQStart;
    86f4:	e0bffd17 	ldw	r2,-12(fp)
    86f8:	10c00117 	ldw	r3,4(r2)
    86fc:	e0bffd17 	ldw	r2,-12(fp)
    8700:	10c00415 	stw	r3,16(r2)
    8704:	e0bffe17 	ldw	r2,-8(fp)
    8708:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    870c:	e0bffb17 	ldw	r2,-20(fp)
    8710:	1001703a 	wrctl	status,r2
}
    8714:	0001883a 	nop
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
    8718:	e0bff517 	ldw	r2,-44(fp)
    871c:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
    8720:	e0bfff17 	ldw	r2,-4(fp)
    8724:	00004506 	br	883c <OSQPend+0x284>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
    8728:	d0a7c317 	ldw	r2,-24820(gp)
    872c:	10c00c03 	ldbu	r3,48(r2)
    8730:	d0a7c317 	ldw	r2,-24820(gp)
    8734:	18c00114 	ori	r3,r3,4
    8738:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    873c:	d0a7c317 	ldw	r2,-24820(gp)
    8740:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
    8744:	d0a7c317 	ldw	r2,-24820(gp)
    8748:	e0fff60b 	ldhu	r3,-40(fp)
    874c:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
    8750:	e13ff717 	ldw	r4,-36(fp)
    8754:	0004f380 	call	4f38 <OS_EventTaskWait>
    8758:	e0bffe17 	ldw	r2,-8(fp)
    875c:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
    8760:	e0bff917 	ldw	r2,-28(fp)
    8764:	1001703a 	wrctl	status,r2
}
    8768:	0001883a 	nop
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
    876c:	00057e40 	call	57e4 <OS_Sched>
  NIOS2_READ_STATUS (context);
    8770:	0005303a 	rdctl	r2,status
    8774:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8778:	e0fffa17 	ldw	r3,-24(fp)
    877c:	00bfff84 	movi	r2,-2
    8780:	1884703a 	and	r2,r3,r2
    8784:	1001703a 	wrctl	status,r2
  return context;
    8788:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();
    878c:	e0bffe15 	stw	r2,-8(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
    8790:	d0a7c317 	ldw	r2,-24820(gp)
    8794:	10800c43 	ldbu	r2,49(r2)
    8798:	10803fcc 	andi	r2,r2,255
    879c:	10000326 	beq	r2,zero,87ac <OSQPend+0x1f4>
    87a0:	108000a0 	cmpeqi	r2,r2,2
    87a4:	1000071e 	bne	r2,zero,87c4 <OSQPend+0x20c>
    87a8:	00000b06 	br	87d8 <OSQPend+0x220>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
    87ac:	d0a7c317 	ldw	r2,-24820(gp)
    87b0:	10800917 	ldw	r2,36(r2)
    87b4:	e0bfff15 	stw	r2,-4(fp)
            *perr =  OS_ERR_NONE;
    87b8:	e0bff517 	ldw	r2,-44(fp)
    87bc:	10000005 	stb	zero,0(r2)
             break;
    87c0:	00000e06 	br	87fc <OSQPend+0x244>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
    87c4:	e03fff15 	stw	zero,-4(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
    87c8:	e0bff517 	ldw	r2,-44(fp)
    87cc:	00c00384 	movi	r3,14
    87d0:	10c00005 	stb	r3,0(r2)
             break;
    87d4:	00000906 	br	87fc <OSQPend+0x244>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
    87d8:	d0a7c317 	ldw	r2,-24820(gp)
    87dc:	e17ff717 	ldw	r5,-36(fp)
    87e0:	1009883a 	mov	r4,r2
    87e4:	00051880 	call	5188 <OS_EventTaskRemove>
             pmsg = (void *)0;
    87e8:	e03fff15 	stw	zero,-4(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
    87ec:	e0bff517 	ldw	r2,-44(fp)
    87f0:	00c00284 	movi	r3,10
    87f4:	10c00005 	stb	r3,0(r2)
             break;
    87f8:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
    87fc:	d0a7c317 	ldw	r2,-24820(gp)
    8800:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
    8804:	d0a7c317 	ldw	r2,-24820(gp)
    8808:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
    880c:	d0a7c317 	ldw	r2,-24820(gp)
    8810:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    8814:	d0a7c317 	ldw	r2,-24820(gp)
    8818:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
    881c:	d0a7c317 	ldw	r2,-24820(gp)
    8820:	10000915 	stw	zero,36(r2)
    8824:	e0bffe17 	ldw	r2,-8(fp)
    8828:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
    882c:	e0bff817 	ldw	r2,-32(fp)
    8830:	1001703a 	wrctl	status,r2
}
    8834:	0001883a 	nop
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
    8838:	e0bfff17 	ldw	r2,-4(fp)
}
    883c:	e037883a 	mov	sp,fp
    8840:	dfc00117 	ldw	ra,4(sp)
    8844:	df000017 	ldw	fp,0(sp)
    8848:	dec00204 	addi	sp,sp,8
    884c:	f800283a 	ret

00008850 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    8850:	defff604 	addi	sp,sp,-40
    8854:	dfc00915 	stw	ra,36(sp)
    8858:	df000815 	stw	fp,32(sp)
    885c:	df000804 	addi	fp,sp,32
    8860:	e13ffa15 	stw	r4,-24(fp)
    8864:	2805883a 	mov	r2,r5
    8868:	e1bff815 	stw	r6,-32(fp)
    886c:	e0bff905 	stb	r2,-28(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    8870:	e03ffe15 	stw	zero,-8(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    8874:	e0bff817 	ldw	r2,-32(fp)
    8878:	1000021e 	bne	r2,zero,8884 <OSQPendAbort+0x34>
        return (0);
    887c:	0005883a 	mov	r2,zero
    8880:	00004b06 	br	89b0 <OSQPendAbort+0x160>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    8884:	e0bffa17 	ldw	r2,-24(fp)
    8888:	1000051e 	bne	r2,zero,88a0 <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    888c:	e0bff817 	ldw	r2,-32(fp)
    8890:	00c00104 	movi	r3,4
    8894:	10c00005 	stb	r3,0(r2)
        return (0);
    8898:	0005883a 	mov	r2,zero
    889c:	00004406 	br	89b0 <OSQPendAbort+0x160>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
    88a0:	e0bffa17 	ldw	r2,-24(fp)
    88a4:	10800003 	ldbu	r2,0(r2)
    88a8:	10803fcc 	andi	r2,r2,255
    88ac:	108000a0 	cmpeqi	r2,r2,2
    88b0:	1000051e 	bne	r2,zero,88c8 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    88b4:	e0bff817 	ldw	r2,-32(fp)
    88b8:	00c00044 	movi	r3,1
    88bc:	10c00005 	stb	r3,0(r2)
        return (0);
    88c0:	0005883a 	mov	r2,zero
    88c4:	00003a06 	br	89b0 <OSQPendAbort+0x160>
  NIOS2_READ_STATUS (context);
    88c8:	0005303a 	rdctl	r2,status
    88cc:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    88d0:	e0fffd17 	ldw	r3,-12(fp)
    88d4:	00bfff84 	movi	r2,-2
    88d8:	1884703a 	and	r2,r3,r2
    88dc:	1001703a 	wrctl	status,r2
  return context;
    88e0:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    88e4:	e0bffe15 	stw	r2,-8(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
    88e8:	e0bffa17 	ldw	r2,-24(fp)
    88ec:	10800283 	ldbu	r2,10(r2)
    88f0:	10803fcc 	andi	r2,r2,255
    88f4:	10002626 	beq	r2,zero,8990 <OSQPendAbort+0x140>
        nbr_tasks = 0;
    88f8:	e03fffc5 	stb	zero,-1(fp)
        switch (opt) {
    88fc:	e0bff903 	ldbu	r2,-28(fp)
    8900:	10800058 	cmpnei	r2,r2,1
    8904:	10000e1e 	bne	r2,zero,8940 <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
    8908:	00000806 	br	892c <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
    890c:	01c00084 	movi	r7,2
    8910:	01800104 	movi	r6,4
    8914:	000b883a 	mov	r5,zero
    8918:	e13ffa17 	ldw	r4,-24(fp)
    891c:	0004db00 	call	4db0 <OS_EventTaskRdy>
                     nbr_tasks++;
    8920:	e0bfffc3 	ldbu	r2,-1(fp)
    8924:	10800044 	addi	r2,r2,1
    8928:	e0bfffc5 	stb	r2,-1(fp)
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
    892c:	e0bffa17 	ldw	r2,-24(fp)
    8930:	10800283 	ldbu	r2,10(r2)
    8934:	10803fcc 	andi	r2,r2,255
    8938:	103ff41e 	bne	r2,zero,890c <OSQPendAbort+0xbc>
                 }
                 break;
    893c:	00000906 	br	8964 <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
    8940:	01c00084 	movi	r7,2
    8944:	01800104 	movi	r6,4
    8948:	000b883a 	mov	r5,zero
    894c:	e13ffa17 	ldw	r4,-24(fp)
    8950:	0004db00 	call	4db0 <OS_EventTaskRdy>
                 nbr_tasks++;
    8954:	e0bfffc3 	ldbu	r2,-1(fp)
    8958:	10800044 	addi	r2,r2,1
    895c:	e0bfffc5 	stb	r2,-1(fp)
                 break;
    8960:	0001883a 	nop
    8964:	e0bffe17 	ldw	r2,-8(fp)
    8968:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    896c:	e0bffc17 	ldw	r2,-16(fp)
    8970:	1001703a 	wrctl	status,r2
}
    8974:	0001883a 	nop
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
    8978:	00057e40 	call	57e4 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
    897c:	e0bff817 	ldw	r2,-32(fp)
    8980:	00c00384 	movi	r3,14
    8984:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
    8988:	e0bfffc3 	ldbu	r2,-1(fp)
    898c:	00000806 	br	89b0 <OSQPendAbort+0x160>
    8990:	e0bffe17 	ldw	r2,-8(fp)
    8994:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    8998:	e0bffb17 	ldw	r2,-20(fp)
    899c:	1001703a 	wrctl	status,r2
}
    89a0:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    89a4:	e0bff817 	ldw	r2,-32(fp)
    89a8:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
    89ac:	0005883a 	mov	r2,zero
}
    89b0:	e037883a 	mov	sp,fp
    89b4:	dfc00117 	ldw	ra,4(sp)
    89b8:	df000017 	ldw	fp,0(sp)
    89bc:	dec00204 	addi	sp,sp,8
    89c0:	f800283a 	ret

000089c4 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
    89c4:	defff604 	addi	sp,sp,-40
    89c8:	dfc00915 	stw	ra,36(sp)
    89cc:	df000815 	stw	fp,32(sp)
    89d0:	df000804 	addi	fp,sp,32
    89d4:	e13ff915 	stw	r4,-28(fp)
    89d8:	e17ff815 	stw	r5,-32(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    89dc:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
    89e0:	e0bff917 	ldw	r2,-28(fp)
    89e4:	1000021e 	bne	r2,zero,89f0 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
    89e8:	00800104 	movi	r2,4
    89ec:	00004d06 	br	8b24 <OSQPost+0x160>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
    89f0:	e0bff917 	ldw	r2,-28(fp)
    89f4:	10800003 	ldbu	r2,0(r2)
    89f8:	10803fcc 	andi	r2,r2,255
    89fc:	108000a0 	cmpeqi	r2,r2,2
    8a00:	1000021e 	bne	r2,zero,8a0c <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
    8a04:	00800044 	movi	r2,1
    8a08:	00004606 	br	8b24 <OSQPost+0x160>
  NIOS2_READ_STATUS (context);
    8a0c:	0005303a 	rdctl	r2,status
    8a10:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8a14:	e0fffd17 	ldw	r3,-12(fp)
    8a18:	00bfff84 	movi	r2,-2
    8a1c:	1884703a 	and	r2,r3,r2
    8a20:	1001703a 	wrctl	status,r2
  return context;
    8a24:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    8a28:	e0bfff15 	stw	r2,-4(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
    8a2c:	e0bff917 	ldw	r2,-28(fp)
    8a30:	10800283 	ldbu	r2,10(r2)
    8a34:	10803fcc 	andi	r2,r2,255
    8a38:	10000d26 	beq	r2,zero,8a70 <OSQPost+0xac>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    8a3c:	000f883a 	mov	r7,zero
    8a40:	01800104 	movi	r6,4
    8a44:	e17ff817 	ldw	r5,-32(fp)
    8a48:	e13ff917 	ldw	r4,-28(fp)
    8a4c:	0004db00 	call	4db0 <OS_EventTaskRdy>
    8a50:	e0bfff17 	ldw	r2,-4(fp)
    8a54:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    8a58:	e0bffc17 	ldw	r2,-16(fp)
    8a5c:	1001703a 	wrctl	status,r2
}
    8a60:	0001883a 	nop
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
    8a64:	00057e40 	call	57e4 <OS_Sched>
        return (OS_ERR_NONE);
    8a68:	0005883a 	mov	r2,zero
    8a6c:	00002d06 	br	8b24 <OSQPost+0x160>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
    8a70:	e0bff917 	ldw	r2,-28(fp)
    8a74:	10800117 	ldw	r2,4(r2)
    8a78:	e0bffe15 	stw	r2,-8(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
    8a7c:	e0bffe17 	ldw	r2,-8(fp)
    8a80:	10c0058b 	ldhu	r3,22(r2)
    8a84:	e0bffe17 	ldw	r2,-8(fp)
    8a88:	1080050b 	ldhu	r2,20(r2)
    8a8c:	18ffffcc 	andi	r3,r3,65535
    8a90:	10bfffcc 	andi	r2,r2,65535
    8a94:	18800736 	bltu	r3,r2,8ab4 <OSQPost+0xf0>
    8a98:	e0bfff17 	ldw	r2,-4(fp)
    8a9c:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    8aa0:	e0bffb17 	ldw	r2,-20(fp)
    8aa4:	1001703a 	wrctl	status,r2
}
    8aa8:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
    8aac:	00800784 	movi	r2,30
    8ab0:	00001c06 	br	8b24 <OSQPost+0x160>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
    8ab4:	e0bffe17 	ldw	r2,-8(fp)
    8ab8:	10800317 	ldw	r2,12(r2)
    8abc:	11000104 	addi	r4,r2,4
    8ac0:	e0fffe17 	ldw	r3,-8(fp)
    8ac4:	19000315 	stw	r4,12(r3)
    8ac8:	e0fff817 	ldw	r3,-32(fp)
    8acc:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
    8ad0:	e0bffe17 	ldw	r2,-8(fp)
    8ad4:	1080058b 	ldhu	r2,22(r2)
    8ad8:	10800044 	addi	r2,r2,1
    8adc:	1007883a 	mov	r3,r2
    8ae0:	e0bffe17 	ldw	r2,-8(fp)
    8ae4:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
    8ae8:	e0bffe17 	ldw	r2,-8(fp)
    8aec:	10c00317 	ldw	r3,12(r2)
    8af0:	e0bffe17 	ldw	r2,-8(fp)
    8af4:	10800217 	ldw	r2,8(r2)
    8af8:	1880041e 	bne	r3,r2,8b0c <OSQPost+0x148>
        pq->OSQIn = pq->OSQStart;
    8afc:	e0bffe17 	ldw	r2,-8(fp)
    8b00:	10c00117 	ldw	r3,4(r2)
    8b04:	e0bffe17 	ldw	r2,-8(fp)
    8b08:	10c00315 	stw	r3,12(r2)
    8b0c:	e0bfff17 	ldw	r2,-4(fp)
    8b10:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
    8b14:	e0bffa17 	ldw	r2,-24(fp)
    8b18:	1001703a 	wrctl	status,r2
}
    8b1c:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    8b20:	0005883a 	mov	r2,zero
}
    8b24:	e037883a 	mov	sp,fp
    8b28:	dfc00117 	ldw	ra,4(sp)
    8b2c:	df000017 	ldw	fp,0(sp)
    8b30:	dec00204 	addi	sp,sp,8
    8b34:	f800283a 	ret

00008b38 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
    8b38:	defff604 	addi	sp,sp,-40
    8b3c:	dfc00915 	stw	ra,36(sp)
    8b40:	df000815 	stw	fp,32(sp)
    8b44:	df000804 	addi	fp,sp,32
    8b48:	e13ff915 	stw	r4,-28(fp)
    8b4c:	e17ff815 	stw	r5,-32(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    8b50:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    8b54:	e0bff917 	ldw	r2,-28(fp)
    8b58:	1000021e 	bne	r2,zero,8b64 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
    8b5c:	00800104 	movi	r2,4
    8b60:	00004f06 	br	8ca0 <OSQPostFront+0x168>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
    8b64:	e0bff917 	ldw	r2,-28(fp)
    8b68:	10800003 	ldbu	r2,0(r2)
    8b6c:	10803fcc 	andi	r2,r2,255
    8b70:	108000a0 	cmpeqi	r2,r2,2
    8b74:	1000021e 	bne	r2,zero,8b80 <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
    8b78:	00800044 	movi	r2,1
    8b7c:	00004806 	br	8ca0 <OSQPostFront+0x168>
  NIOS2_READ_STATUS (context);
    8b80:	0005303a 	rdctl	r2,status
    8b84:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8b88:	e0fffd17 	ldw	r3,-12(fp)
    8b8c:	00bfff84 	movi	r2,-2
    8b90:	1884703a 	and	r2,r3,r2
    8b94:	1001703a 	wrctl	status,r2
  return context;
    8b98:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    8b9c:	e0bfff15 	stw	r2,-4(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
    8ba0:	e0bff917 	ldw	r2,-28(fp)
    8ba4:	10800283 	ldbu	r2,10(r2)
    8ba8:	10803fcc 	andi	r2,r2,255
    8bac:	10000d26 	beq	r2,zero,8be4 <OSQPostFront+0xac>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    8bb0:	000f883a 	mov	r7,zero
    8bb4:	01800104 	movi	r6,4
    8bb8:	e17ff817 	ldw	r5,-32(fp)
    8bbc:	e13ff917 	ldw	r4,-28(fp)
    8bc0:	0004db00 	call	4db0 <OS_EventTaskRdy>
    8bc4:	e0bfff17 	ldw	r2,-4(fp)
    8bc8:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    8bcc:	e0bffc17 	ldw	r2,-16(fp)
    8bd0:	1001703a 	wrctl	status,r2
}
    8bd4:	0001883a 	nop
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
    8bd8:	00057e40 	call	57e4 <OS_Sched>
        return (OS_ERR_NONE);
    8bdc:	0005883a 	mov	r2,zero
    8be0:	00002f06 	br	8ca0 <OSQPostFront+0x168>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
    8be4:	e0bff917 	ldw	r2,-28(fp)
    8be8:	10800117 	ldw	r2,4(r2)
    8bec:	e0bffe15 	stw	r2,-8(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
    8bf0:	e0bffe17 	ldw	r2,-8(fp)
    8bf4:	10c0058b 	ldhu	r3,22(r2)
    8bf8:	e0bffe17 	ldw	r2,-8(fp)
    8bfc:	1080050b 	ldhu	r2,20(r2)
    8c00:	18ffffcc 	andi	r3,r3,65535
    8c04:	10bfffcc 	andi	r2,r2,65535
    8c08:	18800736 	bltu	r3,r2,8c28 <OSQPostFront+0xf0>
    8c0c:	e0bfff17 	ldw	r2,-4(fp)
    8c10:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    8c14:	e0bffb17 	ldw	r2,-20(fp)
    8c18:	1001703a 	wrctl	status,r2
}
    8c1c:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
    8c20:	00800784 	movi	r2,30
    8c24:	00001e06 	br	8ca0 <OSQPostFront+0x168>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
    8c28:	e0bffe17 	ldw	r2,-8(fp)
    8c2c:	10c00417 	ldw	r3,16(r2)
    8c30:	e0bffe17 	ldw	r2,-8(fp)
    8c34:	10800117 	ldw	r2,4(r2)
    8c38:	1880041e 	bne	r3,r2,8c4c <OSQPostFront+0x114>
        pq->OSQOut = pq->OSQEnd;
    8c3c:	e0bffe17 	ldw	r2,-8(fp)
    8c40:	10c00217 	ldw	r3,8(r2)
    8c44:	e0bffe17 	ldw	r2,-8(fp)
    8c48:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
    8c4c:	e0bffe17 	ldw	r2,-8(fp)
    8c50:	10800417 	ldw	r2,16(r2)
    8c54:	10ffff04 	addi	r3,r2,-4
    8c58:	e0bffe17 	ldw	r2,-8(fp)
    8c5c:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
    8c60:	e0bffe17 	ldw	r2,-8(fp)
    8c64:	10800417 	ldw	r2,16(r2)
    8c68:	e0fff817 	ldw	r3,-32(fp)
    8c6c:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
    8c70:	e0bffe17 	ldw	r2,-8(fp)
    8c74:	1080058b 	ldhu	r2,22(r2)
    8c78:	10800044 	addi	r2,r2,1
    8c7c:	1007883a 	mov	r3,r2
    8c80:	e0bffe17 	ldw	r2,-8(fp)
    8c84:	10c0058d 	sth	r3,22(r2)
    8c88:	e0bfff17 	ldw	r2,-4(fp)
    8c8c:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
    8c90:	e0bffa17 	ldw	r2,-24(fp)
    8c94:	1001703a 	wrctl	status,r2
}
    8c98:	0001883a 	nop
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    8c9c:	0005883a 	mov	r2,zero
}
    8ca0:	e037883a 	mov	sp,fp
    8ca4:	dfc00117 	ldw	ra,4(sp)
    8ca8:	df000017 	ldw	fp,0(sp)
    8cac:	dec00204 	addi	sp,sp,8
    8cb0:	f800283a 	ret

00008cb4 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
    8cb4:	defff504 	addi	sp,sp,-44
    8cb8:	dfc00a15 	stw	ra,40(sp)
    8cbc:	df000915 	stw	fp,36(sp)
    8cc0:	df000904 	addi	fp,sp,36
    8cc4:	e13ff915 	stw	r4,-28(fp)
    8cc8:	e17ff815 	stw	r5,-32(fp)
    8ccc:	3005883a 	mov	r2,r6
    8cd0:	e0bff705 	stb	r2,-36(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    8cd4:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    8cd8:	e0bff917 	ldw	r2,-28(fp)
    8cdc:	1000021e 	bne	r2,zero,8ce8 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
    8ce0:	00800104 	movi	r2,4
    8ce4:	00007406 	br	8eb8 <OSQPostOpt+0x204>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
    8ce8:	e0bff917 	ldw	r2,-28(fp)
    8cec:	10800003 	ldbu	r2,0(r2)
    8cf0:	10803fcc 	andi	r2,r2,255
    8cf4:	108000a0 	cmpeqi	r2,r2,2
    8cf8:	1000021e 	bne	r2,zero,8d04 <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
    8cfc:	00800044 	movi	r2,1
    8d00:	00006d06 	br	8eb8 <OSQPostOpt+0x204>
  NIOS2_READ_STATUS (context);
    8d04:	0005303a 	rdctl	r2,status
    8d08:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8d0c:	e0fffd17 	ldw	r3,-12(fp)
    8d10:	00bfff84 	movi	r2,-2
    8d14:	1884703a 	and	r2,r3,r2
    8d18:	1001703a 	wrctl	status,r2
  return context;
    8d1c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    8d20:	e0bfff15 	stw	r2,-4(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
    8d24:	e0bff917 	ldw	r2,-28(fp)
    8d28:	10800283 	ldbu	r2,10(r2)
    8d2c:	10803fcc 	andi	r2,r2,255
    8d30:	10001e26 	beq	r2,zero,8dac <OSQPostOpt+0xf8>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
    8d34:	e0bff703 	ldbu	r2,-36(fp)
    8d38:	1080004c 	andi	r2,r2,1
    8d3c:	10000b26 	beq	r2,zero,8d6c <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
    8d40:	00000506 	br	8d58 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    8d44:	000f883a 	mov	r7,zero
    8d48:	01800104 	movi	r6,4
    8d4c:	e17ff817 	ldw	r5,-32(fp)
    8d50:	e13ff917 	ldw	r4,-28(fp)
    8d54:	0004db00 	call	4db0 <OS_EventTaskRdy>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
    8d58:	e0bff917 	ldw	r2,-28(fp)
    8d5c:	10800283 	ldbu	r2,10(r2)
    8d60:	10803fcc 	andi	r2,r2,255
    8d64:	103ff71e 	bne	r2,zero,8d44 <OSQPostOpt+0x90>
    8d68:	00000506 	br	8d80 <OSQPostOpt+0xcc>
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    8d6c:	000f883a 	mov	r7,zero
    8d70:	01800104 	movi	r6,4
    8d74:	e17ff817 	ldw	r5,-32(fp)
    8d78:	e13ff917 	ldw	r4,-28(fp)
    8d7c:	0004db00 	call	4db0 <OS_EventTaskRdy>
    8d80:	e0bfff17 	ldw	r2,-4(fp)
    8d84:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    8d88:	e0bffc17 	ldw	r2,-16(fp)
    8d8c:	1001703a 	wrctl	status,r2
}
    8d90:	0001883a 	nop
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
    8d94:	e0bff703 	ldbu	r2,-36(fp)
    8d98:	1080010c 	andi	r2,r2,4
    8d9c:	1000011e 	bne	r2,zero,8da4 <OSQPostOpt+0xf0>
            OS_Sched();                               /* Find highest priority task ready to run       */
    8da0:	00057e40 	call	57e4 <OS_Sched>
        }
        return (OS_ERR_NONE);
    8da4:	0005883a 	mov	r2,zero
    8da8:	00004306 	br	8eb8 <OSQPostOpt+0x204>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
    8dac:	e0bff917 	ldw	r2,-28(fp)
    8db0:	10800117 	ldw	r2,4(r2)
    8db4:	e0bffe15 	stw	r2,-8(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
    8db8:	e0bffe17 	ldw	r2,-8(fp)
    8dbc:	10c0058b 	ldhu	r3,22(r2)
    8dc0:	e0bffe17 	ldw	r2,-8(fp)
    8dc4:	1080050b 	ldhu	r2,20(r2)
    8dc8:	18ffffcc 	andi	r3,r3,65535
    8dcc:	10bfffcc 	andi	r2,r2,65535
    8dd0:	18800736 	bltu	r3,r2,8df0 <OSQPostOpt+0x13c>
    8dd4:	e0bfff17 	ldw	r2,-4(fp)
    8dd8:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    8ddc:	e0bffb17 	ldw	r2,-20(fp)
    8de0:	1001703a 	wrctl	status,r2
}
    8de4:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
    8de8:	00800784 	movi	r2,30
    8dec:	00003206 	br	8eb8 <OSQPostOpt+0x204>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
    8df0:	e0bff703 	ldbu	r2,-36(fp)
    8df4:	1080008c 	andi	r2,r2,2
    8df8:	10001326 	beq	r2,zero,8e48 <OSQPostOpt+0x194>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
    8dfc:	e0bffe17 	ldw	r2,-8(fp)
    8e00:	10c00417 	ldw	r3,16(r2)
    8e04:	e0bffe17 	ldw	r2,-8(fp)
    8e08:	10800117 	ldw	r2,4(r2)
    8e0c:	1880041e 	bne	r3,r2,8e20 <OSQPostOpt+0x16c>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
    8e10:	e0bffe17 	ldw	r2,-8(fp)
    8e14:	10c00217 	ldw	r3,8(r2)
    8e18:	e0bffe17 	ldw	r2,-8(fp)
    8e1c:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
    8e20:	e0bffe17 	ldw	r2,-8(fp)
    8e24:	10800417 	ldw	r2,16(r2)
    8e28:	10ffff04 	addi	r3,r2,-4
    8e2c:	e0bffe17 	ldw	r2,-8(fp)
    8e30:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
    8e34:	e0bffe17 	ldw	r2,-8(fp)
    8e38:	10800417 	ldw	r2,16(r2)
    8e3c:	e0fff817 	ldw	r3,-32(fp)
    8e40:	10c00015 	stw	r3,0(r2)
    8e44:	00001006 	br	8e88 <OSQPostOpt+0x1d4>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
    8e48:	e0bffe17 	ldw	r2,-8(fp)
    8e4c:	10800317 	ldw	r2,12(r2)
    8e50:	11000104 	addi	r4,r2,4
    8e54:	e0fffe17 	ldw	r3,-8(fp)
    8e58:	19000315 	stw	r4,12(r3)
    8e5c:	e0fff817 	ldw	r3,-32(fp)
    8e60:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
    8e64:	e0bffe17 	ldw	r2,-8(fp)
    8e68:	10c00317 	ldw	r3,12(r2)
    8e6c:	e0bffe17 	ldw	r2,-8(fp)
    8e70:	10800217 	ldw	r2,8(r2)
    8e74:	1880041e 	bne	r3,r2,8e88 <OSQPostOpt+0x1d4>
            pq->OSQIn = pq->OSQStart;
    8e78:	e0bffe17 	ldw	r2,-8(fp)
    8e7c:	10c00117 	ldw	r3,4(r2)
    8e80:	e0bffe17 	ldw	r2,-8(fp)
    8e84:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
    8e88:	e0bffe17 	ldw	r2,-8(fp)
    8e8c:	1080058b 	ldhu	r2,22(r2)
    8e90:	10800044 	addi	r2,r2,1
    8e94:	1007883a 	mov	r3,r2
    8e98:	e0bffe17 	ldw	r2,-8(fp)
    8e9c:	10c0058d 	sth	r3,22(r2)
    8ea0:	e0bfff17 	ldw	r2,-4(fp)
    8ea4:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
    8ea8:	e0bffa17 	ldw	r2,-24(fp)
    8eac:	1001703a 	wrctl	status,r2
}
    8eb0:	0001883a 	nop
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    8eb4:	0005883a 	mov	r2,zero
}
    8eb8:	e037883a 	mov	sp,fp
    8ebc:	dfc00117 	ldw	ra,4(sp)
    8ec0:	df000017 	ldw	fp,0(sp)
    8ec4:	dec00204 	addi	sp,sp,8
    8ec8:	f800283a 	ret

00008ecc <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
    8ecc:	defff604 	addi	sp,sp,-40
    8ed0:	df000915 	stw	fp,36(sp)
    8ed4:	df000904 	addi	fp,sp,36
    8ed8:	e13ff815 	stw	r4,-32(fp)
    8edc:	e17ff715 	stw	r5,-36(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    8ee0:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
    8ee4:	e0bff817 	ldw	r2,-32(fp)
    8ee8:	1000021e 	bne	r2,zero,8ef4 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
    8eec:	00800104 	movi	r2,4
    8ef0:	00004a06 	br	901c <OSQQuery+0x150>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
    8ef4:	e0bff717 	ldw	r2,-36(fp)
    8ef8:	1000021e 	bne	r2,zero,8f04 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
    8efc:	00800244 	movi	r2,9
    8f00:	00004606 	br	901c <OSQQuery+0x150>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
    8f04:	e0bff817 	ldw	r2,-32(fp)
    8f08:	10800003 	ldbu	r2,0(r2)
    8f0c:	10803fcc 	andi	r2,r2,255
    8f10:	108000a0 	cmpeqi	r2,r2,2
    8f14:	1000021e 	bne	r2,zero,8f20 <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
    8f18:	00800044 	movi	r2,1
    8f1c:	00003f06 	br	901c <OSQQuery+0x150>
  NIOS2_READ_STATUS (context);
    8f20:	0005303a 	rdctl	r2,status
    8f24:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8f28:	e0fffa17 	ldw	r3,-24(fp)
    8f2c:	00bfff84 	movi	r2,-2
    8f30:	1884703a 	and	r2,r3,r2
    8f34:	1001703a 	wrctl	status,r2
  return context;
    8f38:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    8f3c:	e0bffc15 	stw	r2,-16(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    8f40:	e0bff817 	ldw	r2,-32(fp)
    8f44:	10c00283 	ldbu	r3,10(r2)
    8f48:	e0bff717 	ldw	r2,-36(fp)
    8f4c:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
    8f50:	e0bff817 	ldw	r2,-32(fp)
    8f54:	108002c4 	addi	r2,r2,11
    8f58:	e0bffe15 	stw	r2,-8(fp)
    pdest                = &p_q_data->OSEventTbl[0];
    8f5c:	e0bff717 	ldw	r2,-36(fp)
    8f60:	10800204 	addi	r2,r2,8
    8f64:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    8f68:	e03fffc5 	stb	zero,-1(fp)
    8f6c:	00000b06 	br	8f9c <OSQQuery+0xd0>
        *pdest++ = *psrc++;
    8f70:	e0fffe17 	ldw	r3,-8(fp)
    8f74:	18800044 	addi	r2,r3,1
    8f78:	e0bffe15 	stw	r2,-8(fp)
    8f7c:	e0bffd17 	ldw	r2,-12(fp)
    8f80:	11000044 	addi	r4,r2,1
    8f84:	e13ffd15 	stw	r4,-12(fp)
    8f88:	18c00003 	ldbu	r3,0(r3)
    8f8c:	10c00005 	stb	r3,0(r2)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    8f90:	e0bfffc3 	ldbu	r2,-1(fp)
    8f94:	10800044 	addi	r2,r2,1
    8f98:	e0bfffc5 	stb	r2,-1(fp)
    8f9c:	e0bfffc3 	ldbu	r2,-1(fp)
    8fa0:	108000f0 	cmpltui	r2,r2,3
    8fa4:	103ff21e 	bne	r2,zero,8f70 <OSQQuery+0xa4>
    }
    pq = (OS_Q *)pevent->OSEventPtr;
    8fa8:	e0bff817 	ldw	r2,-32(fp)
    8fac:	10800117 	ldw	r2,4(r2)
    8fb0:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {
    8fb4:	e0bffb17 	ldw	r2,-20(fp)
    8fb8:	1080058b 	ldhu	r2,22(r2)
    8fbc:	10bfffcc 	andi	r2,r2,65535
    8fc0:	10000626 	beq	r2,zero,8fdc <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
    8fc4:	e0bffb17 	ldw	r2,-20(fp)
    8fc8:	10800417 	ldw	r2,16(r2)
    8fcc:	10c00017 	ldw	r3,0(r2)
    8fd0:	e0bff717 	ldw	r2,-36(fp)
    8fd4:	10c00015 	stw	r3,0(r2)
    8fd8:	00000206 	br	8fe4 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
    8fdc:	e0bff717 	ldw	r2,-36(fp)
    8fe0:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
    8fe4:	e0bffb17 	ldw	r2,-20(fp)
    8fe8:	10c0058b 	ldhu	r3,22(r2)
    8fec:	e0bff717 	ldw	r2,-36(fp)
    8ff0:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
    8ff4:	e0bffb17 	ldw	r2,-20(fp)
    8ff8:	10c0050b 	ldhu	r3,20(r2)
    8ffc:	e0bff717 	ldw	r2,-36(fp)
    9000:	10c0018d 	sth	r3,6(r2)
    9004:	e0bffc17 	ldw	r2,-16(fp)
    9008:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
    900c:	e0bff917 	ldw	r2,-28(fp)
    9010:	1001703a 	wrctl	status,r2
}
    9014:	0001883a 	nop
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    9018:	0005883a 	mov	r2,zero
}
    901c:	e037883a 	mov	sp,fp
    9020:	df000017 	ldw	fp,0(sp)
    9024:	dec00104 	addi	sp,sp,4
    9028:	f800283a 	ret

0000902c <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
    902c:	defffb04 	addi	sp,sp,-20
    9030:	dfc00415 	stw	ra,16(sp)
    9034:	df000315 	stw	fp,12(sp)
    9038:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    903c:	01407804 	movi	r5,480
    9040:	010000b4 	movhi	r4,2
    9044:	21291204 	addi	r4,r4,-23480
    9048:	00057200 	call	5720 <OS_MemClr>
    pq1 = &OSQTbl[0];
    904c:	008000b4 	movhi	r2,2
    9050:	10a91204 	addi	r2,r2,-23480
    9054:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
    9058:	008000b4 	movhi	r2,2
    905c:	10a91804 	addi	r2,r2,-23456
    9060:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
    9064:	e03fff8d 	sth	zero,-2(fp)
    9068:	00000c06 	br	909c <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
    906c:	e0bffe17 	ldw	r2,-8(fp)
    9070:	e0fffd17 	ldw	r3,-12(fp)
    9074:	10c00015 	stw	r3,0(r2)
        pq1++;
    9078:	e0bffe17 	ldw	r2,-8(fp)
    907c:	10800604 	addi	r2,r2,24
    9080:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
    9084:	e0bffd17 	ldw	r2,-12(fp)
    9088:	10800604 	addi	r2,r2,24
    908c:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
    9090:	e0bfff8b 	ldhu	r2,-2(fp)
    9094:	10800044 	addi	r2,r2,1
    9098:	e0bfff8d 	sth	r2,-2(fp)
    909c:	e0bfff8b 	ldhu	r2,-2(fp)
    90a0:	108004f0 	cmpltui	r2,r2,19
    90a4:	103ff11e 	bne	r2,zero,906c <OS_QInit+0x40>
    }
    pq1->OSQPtr = (OS_Q *)0;
    90a8:	e0bffe17 	ldw	r2,-8(fp)
    90ac:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
    90b0:	008000b4 	movhi	r2,2
    90b4:	10a91204 	addi	r2,r2,-23480
    90b8:	d0a7c915 	stw	r2,-24796(gp)
#endif
}
    90bc:	0001883a 	nop
    90c0:	e037883a 	mov	sp,fp
    90c4:	dfc00117 	ldw	ra,4(sp)
    90c8:	df000017 	ldw	fp,0(sp)
    90cc:	dec00204 	addi	sp,sp,8
    90d0:	f800283a 	ret

000090d4 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
    90d4:	defffa04 	addi	sp,sp,-24
    90d8:	df000515 	stw	fp,20(sp)
    90dc:	df000504 	addi	fp,sp,20
    90e0:	e13ffb15 	stw	r4,-20(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    90e4:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    90e8:	e0bffb17 	ldw	r2,-20(fp)
    90ec:	1000021e 	bne	r2,zero,90f8 <OSSemAccept+0x24>
        return (0);
    90f0:	0005883a 	mov	r2,zero
    90f4:	00002006 	br	9178 <OSSemAccept+0xa4>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    90f8:	e0bffb17 	ldw	r2,-20(fp)
    90fc:	10800003 	ldbu	r2,0(r2)
    9100:	10803fcc 	andi	r2,r2,255
    9104:	108000e0 	cmpeqi	r2,r2,3
    9108:	1000021e 	bne	r2,zero,9114 <OSSemAccept+0x40>
        return (0);
    910c:	0005883a 	mov	r2,zero
    9110:	00001906 	br	9178 <OSSemAccept+0xa4>
  NIOS2_READ_STATUS (context);
    9114:	0005303a 	rdctl	r2,status
    9118:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    911c:	e0fffd17 	ldw	r3,-12(fp)
    9120:	00bfff84 	movi	r2,-2
    9124:	1884703a 	and	r2,r3,r2
    9128:	1001703a 	wrctl	status,r2
  return context;
    912c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    9130:	e0bfff15 	stw	r2,-4(fp)
    cnt = pevent->OSEventCnt;
    9134:	e0bffb17 	ldw	r2,-20(fp)
    9138:	1080020b 	ldhu	r2,8(r2)
    913c:	e0bffe8d 	sth	r2,-6(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
    9140:	e0bffe8b 	ldhu	r2,-6(fp)
    9144:	10000626 	beq	r2,zero,9160 <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
    9148:	e0bffb17 	ldw	r2,-20(fp)
    914c:	1080020b 	ldhu	r2,8(r2)
    9150:	10bfffc4 	addi	r2,r2,-1
    9154:	1007883a 	mov	r3,r2
    9158:	e0bffb17 	ldw	r2,-20(fp)
    915c:	10c0020d 	sth	r3,8(r2)
    9160:	e0bfff17 	ldw	r2,-4(fp)
    9164:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    9168:	e0bffc17 	ldw	r2,-16(fp)
    916c:	1001703a 	wrctl	status,r2
}
    9170:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
    9174:	e0bffe8b 	ldhu	r2,-6(fp)
}
    9178:	e037883a 	mov	sp,fp
    917c:	df000017 	ldw	fp,0(sp)
    9180:	dec00104 	addi	sp,sp,4
    9184:	f800283a 	ret

00009188 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
    9188:	defff904 	addi	sp,sp,-28
    918c:	dfc00615 	stw	ra,24(sp)
    9190:	df000515 	stw	fp,20(sp)
    9194:	df000504 	addi	fp,sp,20
    9198:	2005883a 	mov	r2,r4
    919c:	e0bffb0d 	sth	r2,-20(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    91a0:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    91a4:	d0a7bf43 	ldbu	r2,-24835(gp)
    91a8:	10803fcc 	andi	r2,r2,255
    91ac:	10000226 	beq	r2,zero,91b8 <OSSemCreate+0x30>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
    91b0:	0005883a 	mov	r2,zero
    91b4:	00002606 	br	9250 <OSSemCreate+0xc8>
  NIOS2_READ_STATUS (context);
    91b8:	0005303a 	rdctl	r2,status
    91bc:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    91c0:	e0fffd17 	ldw	r3,-12(fp)
    91c4:	00bfff84 	movi	r2,-2
    91c8:	1884703a 	and	r2,r3,r2
    91cc:	1001703a 	wrctl	status,r2
  return context;
    91d0:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    91d4:	e0bfff15 	stw	r2,-4(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
    91d8:	d0a7ba17 	ldw	r2,-24856(gp)
    91dc:	e0bffe15 	stw	r2,-8(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
    91e0:	d0a7ba17 	ldw	r2,-24856(gp)
    91e4:	10000326 	beq	r2,zero,91f4 <OSSemCreate+0x6c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
    91e8:	d0a7ba17 	ldw	r2,-24856(gp)
    91ec:	10800117 	ldw	r2,4(r2)
    91f0:	d0a7ba15 	stw	r2,-24856(gp)
    91f4:	e0bfff17 	ldw	r2,-4(fp)
    91f8:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    91fc:	e0bffc17 	ldw	r2,-16(fp)
    9200:	1001703a 	wrctl	status,r2
}
    9204:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
    9208:	e0bffe17 	ldw	r2,-8(fp)
    920c:	10000f26 	beq	r2,zero,924c <OSSemCreate+0xc4>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
    9210:	e0bffe17 	ldw	r2,-8(fp)
    9214:	00c000c4 	movi	r3,3
    9218:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
    921c:	e0bffe17 	ldw	r2,-8(fp)
    9220:	e0fffb0b 	ldhu	r3,-20(fp)
    9224:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
    9228:	e0bffe17 	ldw	r2,-8(fp)
    922c:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
    9230:	e0bffe17 	ldw	r2,-8(fp)
    9234:	00c00fc4 	movi	r3,63
    9238:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
    923c:	e0bffe17 	ldw	r2,-8(fp)
    9240:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
    9244:	e13ffe17 	ldw	r4,-8(fp)
    9248:	00053340 	call	5334 <OS_EventWaitListInit>
    }
    return (pevent);
    924c:	e0bffe17 	ldw	r2,-8(fp)
}
    9250:	e037883a 	mov	sp,fp
    9254:	dfc00117 	ldw	ra,4(sp)
    9258:	df000017 	ldw	fp,0(sp)
    925c:	dec00204 	addi	sp,sp,8
    9260:	f800283a 	ret

00009264 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    9264:	defff304 	addi	sp,sp,-52
    9268:	dfc00c15 	stw	ra,48(sp)
    926c:	df000b15 	stw	fp,44(sp)
    9270:	df000b04 	addi	fp,sp,44
    9274:	e13ff715 	stw	r4,-36(fp)
    9278:	2805883a 	mov	r2,r5
    927c:	e1bff515 	stw	r6,-44(fp)
    9280:	e0bff605 	stb	r2,-40(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    9284:	e03ffd15 	stw	zero,-12(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    9288:	e0bff517 	ldw	r2,-44(fp)
    928c:	1000021e 	bne	r2,zero,9298 <OSSemDel+0x34>
        return (pevent);
    9290:	e0bff717 	ldw	r2,-36(fp)
    9294:	00008206 	br	94a0 <OSSemDel+0x23c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    9298:	e0bff717 	ldw	r2,-36(fp)
    929c:	1000051e 	bne	r2,zero,92b4 <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    92a0:	e0bff517 	ldw	r2,-44(fp)
    92a4:	00c00104 	movi	r3,4
    92a8:	10c00005 	stb	r3,0(r2)
        return (pevent);
    92ac:	e0bff717 	ldw	r2,-36(fp)
    92b0:	00007b06 	br	94a0 <OSSemDel+0x23c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
    92b4:	e0bff717 	ldw	r2,-36(fp)
    92b8:	10800003 	ldbu	r2,0(r2)
    92bc:	10803fcc 	andi	r2,r2,255
    92c0:	108000e0 	cmpeqi	r2,r2,3
    92c4:	1000051e 	bne	r2,zero,92dc <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    92c8:	e0bff517 	ldw	r2,-44(fp)
    92cc:	00c00044 	movi	r3,1
    92d0:	10c00005 	stb	r3,0(r2)
        return (pevent);
    92d4:	e0bff717 	ldw	r2,-36(fp)
    92d8:	00007106 	br	94a0 <OSSemDel+0x23c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    92dc:	d0a7bf43 	ldbu	r2,-24835(gp)
    92e0:	10803fcc 	andi	r2,r2,255
    92e4:	10000526 	beq	r2,zero,92fc <OSSemDel+0x98>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
    92e8:	e0bff517 	ldw	r2,-44(fp)
    92ec:	00c003c4 	movi	r3,15
    92f0:	10c00005 	stb	r3,0(r2)
        return (pevent);
    92f4:	e0bff717 	ldw	r2,-36(fp)
    92f8:	00006906 	br	94a0 <OSSemDel+0x23c>
  NIOS2_READ_STATUS (context);
    92fc:	0005303a 	rdctl	r2,status
    9300:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9304:	e0fffc17 	ldw	r3,-16(fp)
    9308:	00bfff84 	movi	r2,-2
    930c:	1884703a 	and	r2,r3,r2
    9310:	1001703a 	wrctl	status,r2
  return context;
    9314:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    9318:	e0bffd15 	stw	r2,-12(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
    931c:	e0bff717 	ldw	r2,-36(fp)
    9320:	10800283 	ldbu	r2,10(r2)
    9324:	10803fcc 	andi	r2,r2,255
    9328:	10000326 	beq	r2,zero,9338 <OSSemDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    932c:	00800044 	movi	r2,1
    9330:	e0bfffc5 	stb	r2,-1(fp)
    9334:	00000106 	br	933c <OSSemDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    9338:	e03fffc5 	stb	zero,-1(fp)
    }
    switch (opt) {
    933c:	e0bff603 	ldbu	r2,-40(fp)
    9340:	10000326 	beq	r2,zero,9350 <OSSemDel+0xec>
    9344:	10800060 	cmpeqi	r2,r2,1
    9348:	10002a1e 	bne	r2,zero,93f4 <OSSemDel+0x190>
    934c:	00004806 	br	9470 <OSSemDel+0x20c>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
    9350:	e0bfffc3 	ldbu	r2,-1(fp)
    9354:	1000171e 	bne	r2,zero,93b4 <OSSemDel+0x150>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
    9358:	e0bff717 	ldw	r2,-36(fp)
    935c:	00c00fc4 	movi	r3,63
    9360:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
    9364:	e0bff717 	ldw	r2,-36(fp)
    9368:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    936c:	e0bff717 	ldw	r2,-36(fp)
    9370:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
    9374:	d0e7ba17 	ldw	r3,-24856(gp)
    9378:	e0bff717 	ldw	r2,-36(fp)
    937c:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
    9380:	e0bff717 	ldw	r2,-36(fp)
    9384:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
    9388:	e0bff717 	ldw	r2,-36(fp)
    938c:	d0a7ba15 	stw	r2,-24856(gp)
    9390:	e0bffd17 	ldw	r2,-12(fp)
    9394:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    9398:	e0bffb17 	ldw	r2,-20(fp)
    939c:	1001703a 	wrctl	status,r2
}
    93a0:	0001883a 	nop
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
    93a4:	e0bff517 	ldw	r2,-44(fp)
    93a8:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
    93ac:	e03ffe15 	stw	zero,-8(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
    93b0:	00003a06 	br	949c <OSSemDel+0x238>
    93b4:	e0bffd17 	ldw	r2,-12(fp)
    93b8:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
    93bc:	e0bffa17 	ldw	r2,-24(fp)
    93c0:	1001703a 	wrctl	status,r2
}
    93c4:	0001883a 	nop
                 *perr                  = OS_ERR_TASK_WAITING;
    93c8:	e0bff517 	ldw	r2,-44(fp)
    93cc:	00c01244 	movi	r3,73
    93d0:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
    93d4:	e0bff717 	ldw	r2,-36(fp)
    93d8:	e0bffe15 	stw	r2,-8(fp)
             break;
    93dc:	00002f06 	br	949c <OSSemDel+0x238>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
    93e0:	000f883a 	mov	r7,zero
    93e4:	01800044 	movi	r6,1
    93e8:	000b883a 	mov	r5,zero
    93ec:	e13ff717 	ldw	r4,-36(fp)
    93f0:	0004db00 	call	4db0 <OS_EventTaskRdy>
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
    93f4:	e0bff717 	ldw	r2,-36(fp)
    93f8:	10800283 	ldbu	r2,10(r2)
    93fc:	10803fcc 	andi	r2,r2,255
    9400:	103ff71e 	bne	r2,zero,93e0 <OSSemDel+0x17c>
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
    9404:	e0bff717 	ldw	r2,-36(fp)
    9408:	00c00fc4 	movi	r3,63
    940c:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
    9410:	e0bff717 	ldw	r2,-36(fp)
    9414:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    9418:	e0bff717 	ldw	r2,-36(fp)
    941c:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
    9420:	d0e7ba17 	ldw	r3,-24856(gp)
    9424:	e0bff717 	ldw	r2,-36(fp)
    9428:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
    942c:	e0bff717 	ldw	r2,-36(fp)
    9430:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
    9434:	e0bff717 	ldw	r2,-36(fp)
    9438:	d0a7ba15 	stw	r2,-24856(gp)
    943c:	e0bffd17 	ldw	r2,-12(fp)
    9440:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
    9444:	e0bff917 	ldw	r2,-28(fp)
    9448:	1001703a 	wrctl	status,r2
}
    944c:	0001883a 	nop
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
    9450:	e0bfffc3 	ldbu	r2,-1(fp)
    9454:	10800058 	cmpnei	r2,r2,1
    9458:	1000011e 	bne	r2,zero,9460 <OSSemDel+0x1fc>
                 OS_Sched();                               /* Find highest priority task ready to run  */
    945c:	00057e40 	call	57e4 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
    9460:	e0bff517 	ldw	r2,-44(fp)
    9464:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
    9468:	e03ffe15 	stw	zero,-8(fp)
             break;
    946c:	00000b06 	br	949c <OSSemDel+0x238>
    9470:	e0bffd17 	ldw	r2,-12(fp)
    9474:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
    9478:	e0bff817 	ldw	r2,-32(fp)
    947c:	1001703a 	wrctl	status,r2
}
    9480:	0001883a 	nop

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
    9484:	e0bff517 	ldw	r2,-44(fp)
    9488:	00c001c4 	movi	r3,7
    948c:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
    9490:	e0bff717 	ldw	r2,-36(fp)
    9494:	e0bffe15 	stw	r2,-8(fp)
             break;
    9498:	0001883a 	nop
    }
    return (pevent_return);
    949c:	e0bffe17 	ldw	r2,-8(fp)
}
    94a0:	e037883a 	mov	sp,fp
    94a4:	dfc00117 	ldw	ra,4(sp)
    94a8:	df000017 	ldw	fp,0(sp)
    94ac:	dec00204 	addi	sp,sp,8
    94b0:	f800283a 	ret

000094b4 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
    94b4:	defff504 	addi	sp,sp,-44
    94b8:	dfc00a15 	stw	ra,40(sp)
    94bc:	df000915 	stw	fp,36(sp)
    94c0:	df000904 	addi	fp,sp,36
    94c4:	e13ff915 	stw	r4,-28(fp)
    94c8:	2805883a 	mov	r2,r5
    94cc:	e1bff715 	stw	r6,-36(fp)
    94d0:	e0bff80d 	sth	r2,-32(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    94d4:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    94d8:	e0bff717 	ldw	r2,-36(fp)
    94dc:	10007426 	beq	r2,zero,96b0 <OSSemPend+0x1fc>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    94e0:	e0bff917 	ldw	r2,-28(fp)
    94e4:	1000041e 	bne	r2,zero,94f8 <OSSemPend+0x44>
        *perr = OS_ERR_PEVENT_NULL;
    94e8:	e0bff717 	ldw	r2,-36(fp)
    94ec:	00c00104 	movi	r3,4
    94f0:	10c00005 	stb	r3,0(r2)
        return;
    94f4:	00006f06 	br	96b4 <OSSemPend+0x200>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    94f8:	e0bff917 	ldw	r2,-28(fp)
    94fc:	10800003 	ldbu	r2,0(r2)
    9500:	10803fcc 	andi	r2,r2,255
    9504:	108000e0 	cmpeqi	r2,r2,3
    9508:	1000041e 	bne	r2,zero,951c <OSSemPend+0x68>
        *perr = OS_ERR_EVENT_TYPE;
    950c:	e0bff717 	ldw	r2,-36(fp)
    9510:	00c00044 	movi	r3,1
    9514:	10c00005 	stb	r3,0(r2)
        return;
    9518:	00006606 	br	96b4 <OSSemPend+0x200>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
    951c:	d0a7bf43 	ldbu	r2,-24835(gp)
    9520:	10803fcc 	andi	r2,r2,255
    9524:	10000426 	beq	r2,zero,9538 <OSSemPend+0x84>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
    9528:	e0bff717 	ldw	r2,-36(fp)
    952c:	00c00084 	movi	r3,2
    9530:	10c00005 	stb	r3,0(r2)
        return;
    9534:	00005f06 	br	96b4 <OSSemPend+0x200>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
    9538:	d0a7bf83 	ldbu	r2,-24834(gp)
    953c:	10803fcc 	andi	r2,r2,255
    9540:	10000426 	beq	r2,zero,9554 <OSSemPend+0xa0>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
    9544:	e0bff717 	ldw	r2,-36(fp)
    9548:	00c00344 	movi	r3,13
    954c:	10c00005 	stb	r3,0(r2)
        return;
    9550:	00005806 	br	96b4 <OSSemPend+0x200>
  NIOS2_READ_STATUS (context);
    9554:	0005303a 	rdctl	r2,status
    9558:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    955c:	e0fffe17 	ldw	r3,-8(fp)
    9560:	00bfff84 	movi	r2,-2
    9564:	1884703a 	and	r2,r3,r2
    9568:	1001703a 	wrctl	status,r2
  return context;
    956c:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
    9570:	e0bfff15 	stw	r2,-4(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
    9574:	e0bff917 	ldw	r2,-28(fp)
    9578:	1080020b 	ldhu	r2,8(r2)
    957c:	10bfffcc 	andi	r2,r2,65535
    9580:	10000e26 	beq	r2,zero,95bc <OSSemPend+0x108>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
    9584:	e0bff917 	ldw	r2,-28(fp)
    9588:	1080020b 	ldhu	r2,8(r2)
    958c:	10bfffc4 	addi	r2,r2,-1
    9590:	1007883a 	mov	r3,r2
    9594:	e0bff917 	ldw	r2,-28(fp)
    9598:	10c0020d 	sth	r3,8(r2)
    959c:	e0bfff17 	ldw	r2,-4(fp)
    95a0:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
    95a4:	e0bffd17 	ldw	r2,-12(fp)
    95a8:	1001703a 	wrctl	status,r2
}
    95ac:	0001883a 	nop
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
    95b0:	e0bff717 	ldw	r2,-36(fp)
    95b4:	10000005 	stb	zero,0(r2)
        return;
    95b8:	00003e06 	br	96b4 <OSSemPend+0x200>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
    95bc:	d0a7c317 	ldw	r2,-24820(gp)
    95c0:	10c00c03 	ldbu	r3,48(r2)
    95c4:	d0a7c317 	ldw	r2,-24820(gp)
    95c8:	18c00054 	ori	r3,r3,1
    95cc:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    95d0:	d0a7c317 	ldw	r2,-24820(gp)
    95d4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
    95d8:	d0a7c317 	ldw	r2,-24820(gp)
    95dc:	e0fff80b 	ldhu	r3,-32(fp)
    95e0:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
    95e4:	e13ff917 	ldw	r4,-28(fp)
    95e8:	0004f380 	call	4f38 <OS_EventTaskWait>
    95ec:	e0bfff17 	ldw	r2,-4(fp)
    95f0:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    95f4:	e0bffb17 	ldw	r2,-20(fp)
    95f8:	1001703a 	wrctl	status,r2
}
    95fc:	0001883a 	nop
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
    9600:	00057e40 	call	57e4 <OS_Sched>
  NIOS2_READ_STATUS (context);
    9604:	0005303a 	rdctl	r2,status
    9608:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    960c:	e0fffc17 	ldw	r3,-16(fp)
    9610:	00bfff84 	movi	r2,-2
    9614:	1884703a 	and	r2,r3,r2
    9618:	1001703a 	wrctl	status,r2
  return context;
    961c:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
    9620:	e0bfff15 	stw	r2,-4(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
    9624:	d0a7c317 	ldw	r2,-24820(gp)
    9628:	10800c43 	ldbu	r2,49(r2)
    962c:	10803fcc 	andi	r2,r2,255
    9630:	10000326 	beq	r2,zero,9640 <OSSemPend+0x18c>
    9634:	108000a0 	cmpeqi	r2,r2,2
    9638:	1000041e 	bne	r2,zero,964c <OSSemPend+0x198>
    963c:	00000706 	br	965c <OSSemPend+0x1a8>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
    9640:	e0bff717 	ldw	r2,-36(fp)
    9644:	10000005 	stb	zero,0(r2)
             break;
    9648:	00000c06 	br	967c <OSSemPend+0x1c8>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
    964c:	e0bff717 	ldw	r2,-36(fp)
    9650:	00c00384 	movi	r3,14
    9654:	10c00005 	stb	r3,0(r2)
             break;
    9658:	00000806 	br	967c <OSSemPend+0x1c8>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
    965c:	d0a7c317 	ldw	r2,-24820(gp)
    9660:	e17ff917 	ldw	r5,-28(fp)
    9664:	1009883a 	mov	r4,r2
    9668:	00051880 	call	5188 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
    966c:	e0bff717 	ldw	r2,-36(fp)
    9670:	00c00284 	movi	r3,10
    9674:	10c00005 	stb	r3,0(r2)
             break;
    9678:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
    967c:	d0a7c317 	ldw	r2,-24820(gp)
    9680:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
    9684:	d0a7c317 	ldw	r2,-24820(gp)
    9688:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
    968c:	d0a7c317 	ldw	r2,-24820(gp)
    9690:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    9694:	d0a7c317 	ldw	r2,-24820(gp)
    9698:	10000815 	stw	zero,32(r2)
    969c:	e0bfff17 	ldw	r2,-4(fp)
    96a0:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
    96a4:	e0bffa17 	ldw	r2,-24(fp)
    96a8:	1001703a 	wrctl	status,r2
}
    96ac:	00000106 	br	96b4 <OSSemPend+0x200>
        return;
    96b0:	0001883a 	nop
#endif
    OS_EXIT_CRITICAL();
}
    96b4:	e037883a 	mov	sp,fp
    96b8:	dfc00117 	ldw	ra,4(sp)
    96bc:	df000017 	ldw	fp,0(sp)
    96c0:	dec00204 	addi	sp,sp,8
    96c4:	f800283a 	ret

000096c8 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    96c8:	defff604 	addi	sp,sp,-40
    96cc:	dfc00915 	stw	ra,36(sp)
    96d0:	df000815 	stw	fp,32(sp)
    96d4:	df000804 	addi	fp,sp,32
    96d8:	e13ffa15 	stw	r4,-24(fp)
    96dc:	2805883a 	mov	r2,r5
    96e0:	e1bff815 	stw	r6,-32(fp)
    96e4:	e0bff905 	stb	r2,-28(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    96e8:	e03ffe15 	stw	zero,-8(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    96ec:	e0bff817 	ldw	r2,-32(fp)
    96f0:	1000021e 	bne	r2,zero,96fc <OSSemPendAbort+0x34>
        return (0);
    96f4:	0005883a 	mov	r2,zero
    96f8:	00004b06 	br	9828 <OSSemPendAbort+0x160>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    96fc:	e0bffa17 	ldw	r2,-24(fp)
    9700:	1000051e 	bne	r2,zero,9718 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    9704:	e0bff817 	ldw	r2,-32(fp)
    9708:	00c00104 	movi	r3,4
    970c:	10c00005 	stb	r3,0(r2)
        return (0);
    9710:	0005883a 	mov	r2,zero
    9714:	00004406 	br	9828 <OSSemPendAbort+0x160>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    9718:	e0bffa17 	ldw	r2,-24(fp)
    971c:	10800003 	ldbu	r2,0(r2)
    9720:	10803fcc 	andi	r2,r2,255
    9724:	108000e0 	cmpeqi	r2,r2,3
    9728:	1000051e 	bne	r2,zero,9740 <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    972c:	e0bff817 	ldw	r2,-32(fp)
    9730:	00c00044 	movi	r3,1
    9734:	10c00005 	stb	r3,0(r2)
        return (0);
    9738:	0005883a 	mov	r2,zero
    973c:	00003a06 	br	9828 <OSSemPendAbort+0x160>
  NIOS2_READ_STATUS (context);
    9740:	0005303a 	rdctl	r2,status
    9744:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9748:	e0fffd17 	ldw	r3,-12(fp)
    974c:	00bfff84 	movi	r2,-2
    9750:	1884703a 	and	r2,r3,r2
    9754:	1001703a 	wrctl	status,r2
  return context;
    9758:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    975c:	e0bffe15 	stw	r2,-8(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
    9760:	e0bffa17 	ldw	r2,-24(fp)
    9764:	10800283 	ldbu	r2,10(r2)
    9768:	10803fcc 	andi	r2,r2,255
    976c:	10002626 	beq	r2,zero,9808 <OSSemPendAbort+0x140>
        nbr_tasks = 0;
    9770:	e03fffc5 	stb	zero,-1(fp)
        switch (opt) {
    9774:	e0bff903 	ldbu	r2,-28(fp)
    9778:	10800058 	cmpnei	r2,r2,1
    977c:	10000e1e 	bne	r2,zero,97b8 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
    9780:	00000806 	br	97a4 <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
    9784:	01c00084 	movi	r7,2
    9788:	01800044 	movi	r6,1
    978c:	000b883a 	mov	r5,zero
    9790:	e13ffa17 	ldw	r4,-24(fp)
    9794:	0004db00 	call	4db0 <OS_EventTaskRdy>
                     nbr_tasks++;
    9798:	e0bfffc3 	ldbu	r2,-1(fp)
    979c:	10800044 	addi	r2,r2,1
    97a0:	e0bfffc5 	stb	r2,-1(fp)
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
    97a4:	e0bffa17 	ldw	r2,-24(fp)
    97a8:	10800283 	ldbu	r2,10(r2)
    97ac:	10803fcc 	andi	r2,r2,255
    97b0:	103ff41e 	bne	r2,zero,9784 <OSSemPendAbort+0xbc>
                 }
                 break;
    97b4:	00000906 	br	97dc <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
    97b8:	01c00084 	movi	r7,2
    97bc:	01800044 	movi	r6,1
    97c0:	000b883a 	mov	r5,zero
    97c4:	e13ffa17 	ldw	r4,-24(fp)
    97c8:	0004db00 	call	4db0 <OS_EventTaskRdy>
                 nbr_tasks++;
    97cc:	e0bfffc3 	ldbu	r2,-1(fp)
    97d0:	10800044 	addi	r2,r2,1
    97d4:	e0bfffc5 	stb	r2,-1(fp)
                 break;
    97d8:	0001883a 	nop
    97dc:	e0bffe17 	ldw	r2,-8(fp)
    97e0:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    97e4:	e0bffc17 	ldw	r2,-16(fp)
    97e8:	1001703a 	wrctl	status,r2
}
    97ec:	0001883a 	nop
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
    97f0:	00057e40 	call	57e4 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
    97f4:	e0bff817 	ldw	r2,-32(fp)
    97f8:	00c00384 	movi	r3,14
    97fc:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
    9800:	e0bfffc3 	ldbu	r2,-1(fp)
    9804:	00000806 	br	9828 <OSSemPendAbort+0x160>
    9808:	e0bffe17 	ldw	r2,-8(fp)
    980c:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    9810:	e0bffb17 	ldw	r2,-20(fp)
    9814:	1001703a 	wrctl	status,r2
}
    9818:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    981c:	e0bff817 	ldw	r2,-32(fp)
    9820:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
    9824:	0005883a 	mov	r2,zero
}
    9828:	e037883a 	mov	sp,fp
    982c:	dfc00117 	ldw	ra,4(sp)
    9830:	df000017 	ldw	fp,0(sp)
    9834:	dec00204 	addi	sp,sp,8
    9838:	f800283a 	ret

0000983c <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
    983c:	defff804 	addi	sp,sp,-32
    9840:	dfc00715 	stw	ra,28(sp)
    9844:	df000615 	stw	fp,24(sp)
    9848:	df000604 	addi	fp,sp,24
    984c:	e13ffa15 	stw	r4,-24(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    9850:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    9854:	e0bffa17 	ldw	r2,-24(fp)
    9858:	1000021e 	bne	r2,zero,9864 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
    985c:	00800104 	movi	r2,4
    9860:	00003806 	br	9944 <OSSemPost+0x108>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    9864:	e0bffa17 	ldw	r2,-24(fp)
    9868:	10800003 	ldbu	r2,0(r2)
    986c:	10803fcc 	andi	r2,r2,255
    9870:	108000e0 	cmpeqi	r2,r2,3
    9874:	1000021e 	bne	r2,zero,9880 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
    9878:	00800044 	movi	r2,1
    987c:	00003106 	br	9944 <OSSemPost+0x108>
  NIOS2_READ_STATUS (context);
    9880:	0005303a 	rdctl	r2,status
    9884:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9888:	e0fffe17 	ldw	r3,-8(fp)
    988c:	00bfff84 	movi	r2,-2
    9890:	1884703a 	and	r2,r3,r2
    9894:	1001703a 	wrctl	status,r2
  return context;
    9898:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
    989c:	e0bfff15 	stw	r2,-4(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
    98a0:	e0bffa17 	ldw	r2,-24(fp)
    98a4:	10800283 	ldbu	r2,10(r2)
    98a8:	10803fcc 	andi	r2,r2,255
    98ac:	10000d26 	beq	r2,zero,98e4 <OSSemPost+0xa8>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
    98b0:	000f883a 	mov	r7,zero
    98b4:	01800044 	movi	r6,1
    98b8:	000b883a 	mov	r5,zero
    98bc:	e13ffa17 	ldw	r4,-24(fp)
    98c0:	0004db00 	call	4db0 <OS_EventTaskRdy>
    98c4:	e0bfff17 	ldw	r2,-4(fp)
    98c8:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
    98cc:	e0bffd17 	ldw	r2,-12(fp)
    98d0:	1001703a 	wrctl	status,r2
}
    98d4:	0001883a 	nop
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
    98d8:	00057e40 	call	57e4 <OS_Sched>
        return (OS_ERR_NONE);
    98dc:	0005883a 	mov	r2,zero
    98e0:	00001806 	br	9944 <OSSemPost+0x108>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
    98e4:	e0bffa17 	ldw	r2,-24(fp)
    98e8:	1080020b 	ldhu	r2,8(r2)
    98ec:	10ffffcc 	andi	r3,r2,65535
    98f0:	00bfffd4 	movui	r2,65535
    98f4:	18800d26 	beq	r3,r2,992c <OSSemPost+0xf0>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
    98f8:	e0bffa17 	ldw	r2,-24(fp)
    98fc:	1080020b 	ldhu	r2,8(r2)
    9900:	10800044 	addi	r2,r2,1
    9904:	1007883a 	mov	r3,r2
    9908:	e0bffa17 	ldw	r2,-24(fp)
    990c:	10c0020d 	sth	r3,8(r2)
    9910:	e0bfff17 	ldw	r2,-4(fp)
    9914:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    9918:	e0bffc17 	ldw	r2,-16(fp)
    991c:	1001703a 	wrctl	status,r2
}
    9920:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
    9924:	0005883a 	mov	r2,zero
    9928:	00000606 	br	9944 <OSSemPost+0x108>
    992c:	e0bfff17 	ldw	r2,-4(fp)
    9930:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    9934:	e0bffb17 	ldw	r2,-20(fp)
    9938:	1001703a 	wrctl	status,r2
}
    993c:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
    9940:	00800c84 	movi	r2,50
}
    9944:	e037883a 	mov	sp,fp
    9948:	dfc00117 	ldw	ra,4(sp)
    994c:	df000017 	ldw	fp,0(sp)
    9950:	dec00204 	addi	sp,sp,8
    9954:	f800283a 	ret

00009958 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
    9958:	defff704 	addi	sp,sp,-36
    995c:	df000815 	stw	fp,32(sp)
    9960:	df000804 	addi	fp,sp,32
    9964:	e13ff915 	stw	r4,-28(fp)
    9968:	e17ff815 	stw	r5,-32(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    996c:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    9970:	e0bff917 	ldw	r2,-28(fp)
    9974:	1000021e 	bne	r2,zero,9980 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
    9978:	00800104 	movi	r2,4
    997c:	00003706 	br	9a5c <OSSemQuery+0x104>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
    9980:	e0bff817 	ldw	r2,-32(fp)
    9984:	1000021e 	bne	r2,zero,9990 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
    9988:	00800244 	movi	r2,9
    998c:	00003306 	br	9a5c <OSSemQuery+0x104>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
    9990:	e0bff917 	ldw	r2,-28(fp)
    9994:	10800003 	ldbu	r2,0(r2)
    9998:	10803fcc 	andi	r2,r2,255
    999c:	108000e0 	cmpeqi	r2,r2,3
    99a0:	1000021e 	bne	r2,zero,99ac <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
    99a4:	00800044 	movi	r2,1
    99a8:	00002c06 	br	9a5c <OSSemQuery+0x104>
  NIOS2_READ_STATUS (context);
    99ac:	0005303a 	rdctl	r2,status
    99b0:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    99b4:	e0fffb17 	ldw	r3,-20(fp)
    99b8:	00bfff84 	movi	r2,-2
    99bc:	1884703a 	and	r2,r3,r2
    99c0:	1001703a 	wrctl	status,r2
  return context;
    99c4:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
    99c8:	e0bffc15 	stw	r2,-16(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    99cc:	e0bff917 	ldw	r2,-28(fp)
    99d0:	10c00283 	ldbu	r3,10(r2)
    99d4:	e0bff817 	ldw	r2,-32(fp)
    99d8:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
    99dc:	e0bff917 	ldw	r2,-28(fp)
    99e0:	108002c4 	addi	r2,r2,11
    99e4:	e0bfff15 	stw	r2,-4(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
    99e8:	e0bff817 	ldw	r2,-32(fp)
    99ec:	10800084 	addi	r2,r2,2
    99f0:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    99f4:	e03ffdc5 	stb	zero,-9(fp)
    99f8:	00000b06 	br	9a28 <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
    99fc:	e0ffff17 	ldw	r3,-4(fp)
    9a00:	18800044 	addi	r2,r3,1
    9a04:	e0bfff15 	stw	r2,-4(fp)
    9a08:	e0bffe17 	ldw	r2,-8(fp)
    9a0c:	11000044 	addi	r4,r2,1
    9a10:	e13ffe15 	stw	r4,-8(fp)
    9a14:	18c00003 	ldbu	r3,0(r3)
    9a18:	10c00005 	stb	r3,0(r2)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    9a1c:	e0bffdc3 	ldbu	r2,-9(fp)
    9a20:	10800044 	addi	r2,r2,1
    9a24:	e0bffdc5 	stb	r2,-9(fp)
    9a28:	e0bffdc3 	ldbu	r2,-9(fp)
    9a2c:	108000f0 	cmpltui	r2,r2,3
    9a30:	103ff21e 	bne	r2,zero,99fc <OSSemQuery+0xa4>
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
    9a34:	e0bff917 	ldw	r2,-28(fp)
    9a38:	10c0020b 	ldhu	r3,8(r2)
    9a3c:	e0bff817 	ldw	r2,-32(fp)
    9a40:	10c0000d 	sth	r3,0(r2)
    9a44:	e0bffc17 	ldw	r2,-16(fp)
    9a48:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
    9a4c:	e0bffa17 	ldw	r2,-24(fp)
    9a50:	1001703a 	wrctl	status,r2
}
    9a54:	0001883a 	nop
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    9a58:	0005883a 	mov	r2,zero
}
    9a5c:	e037883a 	mov	sp,fp
    9a60:	df000017 	ldw	fp,0(sp)
    9a64:	dec00104 	addi	sp,sp,4
    9a68:	f800283a 	ret

00009a6c <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
    9a6c:	defff904 	addi	sp,sp,-28
    9a70:	df000615 	stw	fp,24(sp)
    9a74:	df000604 	addi	fp,sp,24
    9a78:	e13ffc15 	stw	r4,-16(fp)
    9a7c:	2805883a 	mov	r2,r5
    9a80:	e1bffa15 	stw	r6,-24(fp)
    9a84:	e0bffb0d 	sth	r2,-20(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    9a88:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    9a8c:	e0bffa17 	ldw	r2,-24(fp)
    9a90:	10003126 	beq	r2,zero,9b58 <OSSemSet+0xec>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    9a94:	e0bffc17 	ldw	r2,-16(fp)
    9a98:	1000041e 	bne	r2,zero,9aac <OSSemSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
    9a9c:	e0bffa17 	ldw	r2,-24(fp)
    9aa0:	00c00104 	movi	r3,4
    9aa4:	10c00005 	stb	r3,0(r2)
        return;
    9aa8:	00002c06 	br	9b5c <OSSemSet+0xf0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    9aac:	e0bffc17 	ldw	r2,-16(fp)
    9ab0:	10800003 	ldbu	r2,0(r2)
    9ab4:	10803fcc 	andi	r2,r2,255
    9ab8:	108000e0 	cmpeqi	r2,r2,3
    9abc:	1000041e 	bne	r2,zero,9ad0 <OSSemSet+0x64>
        *perr = OS_ERR_EVENT_TYPE;
    9ac0:	e0bffa17 	ldw	r2,-24(fp)
    9ac4:	00c00044 	movi	r3,1
    9ac8:	10c00005 	stb	r3,0(r2)
        return;
    9acc:	00002306 	br	9b5c <OSSemSet+0xf0>
  NIOS2_READ_STATUS (context);
    9ad0:	0005303a 	rdctl	r2,status
    9ad4:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9ad8:	e0fffe17 	ldw	r3,-8(fp)
    9adc:	00bfff84 	movi	r2,-2
    9ae0:	1884703a 	and	r2,r3,r2
    9ae4:	1001703a 	wrctl	status,r2
  return context;
    9ae8:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
    9aec:	e0bfff15 	stw	r2,-4(fp)
    *perr = OS_ERR_NONE;
    9af0:	e0bffa17 	ldw	r2,-24(fp)
    9af4:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
    9af8:	e0bffc17 	ldw	r2,-16(fp)
    9afc:	1080020b 	ldhu	r2,8(r2)
    9b00:	10bfffcc 	andi	r2,r2,65535
    9b04:	10000426 	beq	r2,zero,9b18 <OSSemSet+0xac>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
    9b08:	e0bffc17 	ldw	r2,-16(fp)
    9b0c:	e0fffb0b 	ldhu	r3,-20(fp)
    9b10:	10c0020d 	sth	r3,8(r2)
    9b14:	00000b06 	br	9b44 <OSSemSet+0xd8>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
    9b18:	e0bffc17 	ldw	r2,-16(fp)
    9b1c:	10800283 	ldbu	r2,10(r2)
    9b20:	10803fcc 	andi	r2,r2,255
    9b24:	1000041e 	bne	r2,zero,9b38 <OSSemSet+0xcc>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
    9b28:	e0bffc17 	ldw	r2,-16(fp)
    9b2c:	e0fffb0b 	ldhu	r3,-20(fp)
    9b30:	10c0020d 	sth	r3,8(r2)
    9b34:	00000306 	br	9b44 <OSSemSet+0xd8>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
    9b38:	e0bffa17 	ldw	r2,-24(fp)
    9b3c:	00c01244 	movi	r3,73
    9b40:	10c00005 	stb	r3,0(r2)
    9b44:	e0bfff17 	ldw	r2,-4(fp)
    9b48:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
    9b4c:	e0bffd17 	ldw	r2,-12(fp)
    9b50:	1001703a 	wrctl	status,r2
}
    9b54:	00000106 	br	9b5c <OSSemSet+0xf0>
        return;
    9b58:	0001883a 	nop
        }
    }
    OS_EXIT_CRITICAL();
}
    9b5c:	e037883a 	mov	sp,fp
    9b60:	df000017 	ldw	fp,0(sp)
    9b64:	dec00104 	addi	sp,sp,4
    9b68:	f800283a 	ret

00009b6c <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
    9b6c:	defff104 	addi	sp,sp,-60
    9b70:	dfc00e15 	stw	ra,56(sp)
    9b74:	df000d15 	stw	fp,52(sp)
    9b78:	df000d04 	addi	fp,sp,52
    9b7c:	2005883a 	mov	r2,r4
    9b80:	2807883a 	mov	r3,r5
    9b84:	e0bff405 	stb	r2,-48(fp)
    9b88:	1805883a 	mov	r2,r3
    9b8c:	e0bff305 	stb	r2,-52(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
    9b90:	e03ffd15 	stw	zero,-12(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
    9b94:	e0bff403 	ldbu	r2,-48(fp)
    9b98:	10800530 	cmpltui	r2,r2,20
    9b9c:	1000051e 	bne	r2,zero,9bb4 <OSTaskChangePrio+0x48>
        if (oldprio != OS_PRIO_SELF) {
    9ba0:	e0bff403 	ldbu	r2,-48(fp)
    9ba4:	10803fe0 	cmpeqi	r2,r2,255
    9ba8:	1000021e 	bne	r2,zero,9bb4 <OSTaskChangePrio+0x48>
            return (OS_ERR_PRIO_INVALID);
    9bac:	00800a84 	movi	r2,42
    9bb0:	00011a06 	br	a01c <OSTaskChangePrio+0x4b0>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
    9bb4:	e0bff303 	ldbu	r2,-52(fp)
    9bb8:	10800530 	cmpltui	r2,r2,20
    9bbc:	1000021e 	bne	r2,zero,9bc8 <OSTaskChangePrio+0x5c>
        return (OS_ERR_PRIO_INVALID);
    9bc0:	00800a84 	movi	r2,42
    9bc4:	00011506 	br	a01c <OSTaskChangePrio+0x4b0>
  NIOS2_READ_STATUS (context);
    9bc8:	0005303a 	rdctl	r2,status
    9bcc:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9bd0:	e0fff917 	ldw	r3,-28(fp)
    9bd4:	00bfff84 	movi	r2,-2
    9bd8:	1884703a 	and	r2,r3,r2
    9bdc:	1001703a 	wrctl	status,r2
  return context;
    9be0:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    9be4:	e0bffd15 	stw	r2,-12(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
    9be8:	e0bff303 	ldbu	r2,-52(fp)
    9bec:	100690ba 	slli	r3,r2,2
    9bf0:	008000b4 	movhi	r2,2
    9bf4:	1885883a 	add	r2,r3,r2
    9bf8:	10a4ad17 	ldw	r2,-27980(r2)
    9bfc:	10000726 	beq	r2,zero,9c1c <OSTaskChangePrio+0xb0>
    9c00:	e0bffd17 	ldw	r2,-12(fp)
    9c04:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
    9c08:	e0bff817 	ldw	r2,-32(fp)
    9c0c:	1001703a 	wrctl	status,r2
}
    9c10:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
    9c14:	00800a04 	movi	r2,40
    9c18:	00010006 	br	a01c <OSTaskChangePrio+0x4b0>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
    9c1c:	e0bff403 	ldbu	r2,-48(fp)
    9c20:	10803fd8 	cmpnei	r2,r2,255
    9c24:	1000031e 	bne	r2,zero,9c34 <OSTaskChangePrio+0xc8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
    9c28:	d0a7c317 	ldw	r2,-24820(gp)
    9c2c:	10800c83 	ldbu	r2,50(r2)
    9c30:	e0bff405 	stb	r2,-48(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
    9c34:	e0bff403 	ldbu	r2,-48(fp)
    9c38:	100690ba 	slli	r3,r2,2
    9c3c:	008000b4 	movhi	r2,2
    9c40:	1885883a 	add	r2,r3,r2
    9c44:	10a4ad17 	ldw	r2,-27980(r2)
    9c48:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
    9c4c:	e0bffc17 	ldw	r2,-16(fp)
    9c50:	1000071e 	bne	r2,zero,9c70 <OSTaskChangePrio+0x104>
    9c54:	e0bffd17 	ldw	r2,-12(fp)
    9c58:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context);
    9c5c:	e0bff717 	ldw	r2,-36(fp)
    9c60:	1001703a 	wrctl	status,r2
}
    9c64:	0001883a 	nop
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
    9c68:	00800a44 	movi	r2,41
    9c6c:	0000eb06 	br	a01c <OSTaskChangePrio+0x4b0>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
    9c70:	e0bffc17 	ldw	r2,-16(fp)
    9c74:	10800058 	cmpnei	r2,r2,1
    9c78:	1000071e 	bne	r2,zero,9c98 <OSTaskChangePrio+0x12c>
    9c7c:	e0bffd17 	ldw	r2,-12(fp)
    9c80:	e0bff615 	stw	r2,-40(fp)
  NIOS2_WRITE_STATUS (context);
    9c84:	e0bff617 	ldw	r2,-40(fp)
    9c88:	1001703a 	wrctl	status,r2
}
    9c8c:	0001883a 	nop
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
    9c90:	008010c4 	movi	r2,67
    9c94:	0000e106 	br	a01c <OSTaskChangePrio+0x4b0>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
    9c98:	e0bff303 	ldbu	r2,-52(fp)
    9c9c:	1004d0fa 	srli	r2,r2,3
    9ca0:	e0bffbc5 	stb	r2,-17(fp)
    x_new                 = (INT8U)(newprio & 0x07);
    9ca4:	e0bff303 	ldbu	r2,-52(fp)
    9ca8:	108001cc 	andi	r2,r2,7
    9cac:	e0bffb85 	stb	r2,-18(fp)
    bity_new              = (INT8U)(1 << y_new);
    9cb0:	e0bffbc3 	ldbu	r2,-17(fp)
    9cb4:	00c00044 	movi	r3,1
    9cb8:	1884983a 	sll	r2,r3,r2
    9cbc:	e0bffb45 	stb	r2,-19(fp)
    bitx_new              = (INT8U)(1 << x_new);
    9cc0:	e0bffb83 	ldbu	r2,-18(fp)
    9cc4:	00c00044 	movi	r3,1
    9cc8:	1884983a 	sll	r2,r3,r2
    9ccc:	e0bffb05 	stb	r2,-20(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
    9cd0:	e0bff403 	ldbu	r2,-48(fp)
    9cd4:	100690ba 	slli	r3,r2,2
    9cd8:	008000b4 	movhi	r2,2
    9cdc:	1885883a 	add	r2,r3,r2
    9ce0:	1024ad15 	stw	zero,-27980(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
    9ce4:	e0bff303 	ldbu	r2,-52(fp)
    9ce8:	100890ba 	slli	r4,r2,2
    9cec:	e0fffc17 	ldw	r3,-16(fp)
    9cf0:	008000b4 	movhi	r2,2
    9cf4:	2085883a 	add	r2,r4,r2
    9cf8:	10e4ad15 	stw	r3,-27980(r2)
    y_old                 =  ptcb->OSTCBY;
    9cfc:	e0bffc17 	ldw	r2,-16(fp)
    9d00:	10800d03 	ldbu	r2,52(r2)
    9d04:	e0bffac5 	stb	r2,-21(fp)
    bity_old              =  ptcb->OSTCBBitY;
    9d08:	e0bffc17 	ldw	r2,-16(fp)
    9d0c:	10800d83 	ldbu	r2,54(r2)
    9d10:	e0bffa85 	stb	r2,-22(fp)
    bitx_old              =  ptcb->OSTCBBitX;
    9d14:	e0bffc17 	ldw	r2,-16(fp)
    9d18:	10800d43 	ldbu	r2,53(r2)
    9d1c:	e0bffa45 	stb	r2,-23(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
    9d20:	e0fffac3 	ldbu	r3,-21(fp)
    9d24:	d0a7c084 	addi	r2,gp,-24830
    9d28:	1885883a 	add	r2,r3,r2
    9d2c:	10800003 	ldbu	r2,0(r2)
    9d30:	e0fffa43 	ldbu	r3,-23(fp)
    9d34:	1884703a 	and	r2,r3,r2
    9d38:	10803fcc 	andi	r2,r2,255
    9d3c:	10002826 	beq	r2,zero,9de0 <OSTaskChangePrio+0x274>
         OSRdyTbl[y_old] &= ~bitx_old;
    9d40:	e0fffac3 	ldbu	r3,-21(fp)
    9d44:	d0a7c084 	addi	r2,gp,-24830
    9d48:	1885883a 	add	r2,r3,r2
    9d4c:	10800003 	ldbu	r2,0(r2)
    9d50:	1007883a 	mov	r3,r2
    9d54:	e0bffa43 	ldbu	r2,-23(fp)
    9d58:	0084303a 	nor	r2,zero,r2
    9d5c:	1884703a 	and	r2,r3,r2
    9d60:	e0fffac3 	ldbu	r3,-21(fp)
    9d64:	1009883a 	mov	r4,r2
    9d68:	d0a7c084 	addi	r2,gp,-24830
    9d6c:	1885883a 	add	r2,r3,r2
    9d70:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
    9d74:	e0fffac3 	ldbu	r3,-21(fp)
    9d78:	d0a7c084 	addi	r2,gp,-24830
    9d7c:	1885883a 	add	r2,r3,r2
    9d80:	10800003 	ldbu	r2,0(r2)
    9d84:	10803fcc 	andi	r2,r2,255
    9d88:	1000061e 	bne	r2,zero,9da4 <OSTaskChangePrio+0x238>
             OSRdyGrp &= ~bity_old;
    9d8c:	e0bffa83 	ldbu	r2,-22(fp)
    9d90:	0084303a 	nor	r2,zero,r2
    9d94:	1007883a 	mov	r3,r2
    9d98:	d0a7c043 	ldbu	r2,-24831(gp)
    9d9c:	1884703a 	and	r2,r3,r2
    9da0:	d0a7c045 	stb	r2,-24831(gp)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
    9da4:	d0a7c043 	ldbu	r2,-24831(gp)
    9da8:	e0fffb43 	ldbu	r3,-19(fp)
    9dac:	1884b03a 	or	r2,r3,r2
    9db0:	d0a7c045 	stb	r2,-24831(gp)
         OSRdyTbl[y_new] |= bitx_new;
    9db4:	e0fffbc3 	ldbu	r3,-17(fp)
    9db8:	d0a7c084 	addi	r2,gp,-24830
    9dbc:	1885883a 	add	r2,r3,r2
    9dc0:	10800003 	ldbu	r2,0(r2)
    9dc4:	e0fffbc3 	ldbu	r3,-17(fp)
    9dc8:	e13ffb03 	ldbu	r4,-20(fp)
    9dcc:	2084b03a 	or	r2,r4,r2
    9dd0:	1009883a 	mov	r4,r2
    9dd4:	d0a7c084 	addi	r2,gp,-24830
    9dd8:	1885883a 	add	r2,r3,r2
    9ddc:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
    9de0:	e0bffc17 	ldw	r2,-16(fp)
    9de4:	10800717 	ldw	r2,28(r2)
    9de8:	e0bfff15 	stw	r2,-4(fp)
    if (pevent != (OS_EVENT *)0) {
    9dec:	e0bfff17 	ldw	r2,-4(fp)
    9df0:	10002f26 	beq	r2,zero,9eb0 <OSTaskChangePrio+0x344>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
    9df4:	e0bffac3 	ldbu	r2,-21(fp)
    9df8:	e0ffff17 	ldw	r3,-4(fp)
    9dfc:	1885883a 	add	r2,r3,r2
    9e00:	108002c3 	ldbu	r2,11(r2)
    9e04:	1007883a 	mov	r3,r2
    9e08:	e0bffa43 	ldbu	r2,-23(fp)
    9e0c:	0084303a 	nor	r2,zero,r2
    9e10:	1884703a 	and	r2,r3,r2
    9e14:	1007883a 	mov	r3,r2
    9e18:	e0bffac3 	ldbu	r2,-21(fp)
    9e1c:	1809883a 	mov	r4,r3
    9e20:	e0ffff17 	ldw	r3,-4(fp)
    9e24:	1885883a 	add	r2,r3,r2
    9e28:	110002c5 	stb	r4,11(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
    9e2c:	e0bffac3 	ldbu	r2,-21(fp)
    9e30:	e0ffff17 	ldw	r3,-4(fp)
    9e34:	1885883a 	add	r2,r3,r2
    9e38:	108002c3 	ldbu	r2,11(r2)
    9e3c:	10803fcc 	andi	r2,r2,255
    9e40:	1000091e 	bne	r2,zero,9e68 <OSTaskChangePrio+0x2fc>
            pevent->OSEventGrp    &= ~bity_old;
    9e44:	e0bfff17 	ldw	r2,-4(fp)
    9e48:	10800283 	ldbu	r2,10(r2)
    9e4c:	1007883a 	mov	r3,r2
    9e50:	e0bffa83 	ldbu	r2,-22(fp)
    9e54:	0084303a 	nor	r2,zero,r2
    9e58:	1884703a 	and	r2,r3,r2
    9e5c:	1007883a 	mov	r3,r2
    9e60:	e0bfff17 	ldw	r2,-4(fp)
    9e64:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
    9e68:	e0bfff17 	ldw	r2,-4(fp)
    9e6c:	10800283 	ldbu	r2,10(r2)
    9e70:	e0fffb43 	ldbu	r3,-19(fp)
    9e74:	1884b03a 	or	r2,r3,r2
    9e78:	1007883a 	mov	r3,r2
    9e7c:	e0bfff17 	ldw	r2,-4(fp)
    9e80:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
    9e84:	e0bffbc3 	ldbu	r2,-17(fp)
    9e88:	e0ffff17 	ldw	r3,-4(fp)
    9e8c:	1885883a 	add	r2,r3,r2
    9e90:	10c002c3 	ldbu	r3,11(r2)
    9e94:	e0bffbc3 	ldbu	r2,-17(fp)
    9e98:	e13ffb03 	ldbu	r4,-20(fp)
    9e9c:	20c6b03a 	or	r3,r4,r3
    9ea0:	1809883a 	mov	r4,r3
    9ea4:	e0ffff17 	ldw	r3,-4(fp)
    9ea8:	1885883a 	add	r2,r3,r2
    9eac:	110002c5 	stb	r4,11(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
    9eb0:	e0bffc17 	ldw	r2,-16(fp)
    9eb4:	10800817 	ldw	r2,32(r2)
    9eb8:	10003e26 	beq	r2,zero,9fb4 <OSTaskChangePrio+0x448>
        pevents =  ptcb->OSTCBEventMultiPtr;
    9ebc:	e0bffc17 	ldw	r2,-16(fp)
    9ec0:	10800817 	ldw	r2,32(r2)
    9ec4:	e0bffe15 	stw	r2,-8(fp)
        pevent  = *pevents;
    9ec8:	e0bffe17 	ldw	r2,-8(fp)
    9ecc:	10800017 	ldw	r2,0(r2)
    9ed0:	e0bfff15 	stw	r2,-4(fp)
        while (pevent != (OS_EVENT *)0) {
    9ed4:	00003506 	br	9fac <OSTaskChangePrio+0x440>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
    9ed8:	e0bffac3 	ldbu	r2,-21(fp)
    9edc:	e0ffff17 	ldw	r3,-4(fp)
    9ee0:	1885883a 	add	r2,r3,r2
    9ee4:	108002c3 	ldbu	r2,11(r2)
    9ee8:	1007883a 	mov	r3,r2
    9eec:	e0bffa43 	ldbu	r2,-23(fp)
    9ef0:	0084303a 	nor	r2,zero,r2
    9ef4:	1884703a 	and	r2,r3,r2
    9ef8:	1007883a 	mov	r3,r2
    9efc:	e0bffac3 	ldbu	r2,-21(fp)
    9f00:	1809883a 	mov	r4,r3
    9f04:	e0ffff17 	ldw	r3,-4(fp)
    9f08:	1885883a 	add	r2,r3,r2
    9f0c:	110002c5 	stb	r4,11(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
    9f10:	e0bffac3 	ldbu	r2,-21(fp)
    9f14:	e0ffff17 	ldw	r3,-4(fp)
    9f18:	1885883a 	add	r2,r3,r2
    9f1c:	108002c3 	ldbu	r2,11(r2)
    9f20:	10803fcc 	andi	r2,r2,255
    9f24:	1000091e 	bne	r2,zero,9f4c <OSTaskChangePrio+0x3e0>
                pevent->OSEventGrp    &= ~bity_old;
    9f28:	e0bfff17 	ldw	r2,-4(fp)
    9f2c:	10800283 	ldbu	r2,10(r2)
    9f30:	1007883a 	mov	r3,r2
    9f34:	e0bffa83 	ldbu	r2,-22(fp)
    9f38:	0084303a 	nor	r2,zero,r2
    9f3c:	1884703a 	and	r2,r3,r2
    9f40:	1007883a 	mov	r3,r2
    9f44:	e0bfff17 	ldw	r2,-4(fp)
    9f48:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
    9f4c:	e0bfff17 	ldw	r2,-4(fp)
    9f50:	10800283 	ldbu	r2,10(r2)
    9f54:	e0fffb43 	ldbu	r3,-19(fp)
    9f58:	1884b03a 	or	r2,r3,r2
    9f5c:	1007883a 	mov	r3,r2
    9f60:	e0bfff17 	ldw	r2,-4(fp)
    9f64:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
    9f68:	e0bffbc3 	ldbu	r2,-17(fp)
    9f6c:	e0ffff17 	ldw	r3,-4(fp)
    9f70:	1885883a 	add	r2,r3,r2
    9f74:	10c002c3 	ldbu	r3,11(r2)
    9f78:	e0bffbc3 	ldbu	r2,-17(fp)
    9f7c:	e13ffb03 	ldbu	r4,-20(fp)
    9f80:	20c6b03a 	or	r3,r4,r3
    9f84:	1809883a 	mov	r4,r3
    9f88:	e0ffff17 	ldw	r3,-4(fp)
    9f8c:	1885883a 	add	r2,r3,r2
    9f90:	110002c5 	stb	r4,11(r2)
            pevents++;
    9f94:	e0bffe17 	ldw	r2,-8(fp)
    9f98:	10800104 	addi	r2,r2,4
    9f9c:	e0bffe15 	stw	r2,-8(fp)
            pevent                     = *pevents;
    9fa0:	e0bffe17 	ldw	r2,-8(fp)
    9fa4:	10800017 	ldw	r2,0(r2)
    9fa8:	e0bfff15 	stw	r2,-4(fp)
        while (pevent != (OS_EVENT *)0) {
    9fac:	e0bfff17 	ldw	r2,-4(fp)
    9fb0:	103fc91e 	bne	r2,zero,9ed8 <OSTaskChangePrio+0x36c>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
    9fb4:	e0bffc17 	ldw	r2,-16(fp)
    9fb8:	e0fff303 	ldbu	r3,-52(fp)
    9fbc:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
    9fc0:	e0bffc17 	ldw	r2,-16(fp)
    9fc4:	e0fffbc3 	ldbu	r3,-17(fp)
    9fc8:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
    9fcc:	e0bffc17 	ldw	r2,-16(fp)
    9fd0:	e0fffb83 	ldbu	r3,-18(fp)
    9fd4:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
    9fd8:	e0bffc17 	ldw	r2,-16(fp)
    9fdc:	e0fffb43 	ldbu	r3,-19(fp)
    9fe0:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
    9fe4:	e0bffc17 	ldw	r2,-16(fp)
    9fe8:	e0fffb03 	ldbu	r3,-20(fp)
    9fec:	10c00d45 	stb	r3,53(r2)
    9ff0:	e0bffd17 	ldw	r2,-12(fp)
    9ff4:	e0bff515 	stw	r2,-44(fp)
  NIOS2_WRITE_STATUS (context);
    9ff8:	e0bff517 	ldw	r2,-44(fp)
    9ffc:	1001703a 	wrctl	status,r2
}
    a000:	0001883a 	nop
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
    a004:	d0a7c143 	ldbu	r2,-24827(gp)
    a008:	10803fcc 	andi	r2,r2,255
    a00c:	10800058 	cmpnei	r2,r2,1
    a010:	1000011e 	bne	r2,zero,a018 <OSTaskChangePrio+0x4ac>
        OS_Sched();                                         /* Find new highest priority task          */
    a014:	00057e40 	call	57e4 <OS_Sched>
    }
    return (OS_ERR_NONE);
    a018:	0005883a 	mov	r2,zero
}
    a01c:	e037883a 	mov	sp,fp
    a020:	dfc00117 	ldw	ra,4(sp)
    a024:	df000017 	ldw	fp,0(sp)
    a028:	dec00204 	addi	sp,sp,8
    a02c:	f800283a 	ret

0000a030 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
    a030:	deffee04 	addi	sp,sp,-72
    a034:	dfc01115 	stw	ra,68(sp)
    a038:	df001015 	stw	fp,64(sp)
    a03c:	df001004 	addi	fp,sp,64
    a040:	e13ff615 	stw	r4,-40(fp)
    a044:	e17ff515 	stw	r5,-44(fp)
    a048:	e1bff415 	stw	r6,-48(fp)
    a04c:	3805883a 	mov	r2,r7
    a050:	e0bff305 	stb	r2,-52(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
    a054:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
    a058:	e0bff303 	ldbu	r2,-52(fp)
    a05c:	10800570 	cmpltui	r2,r2,21
    a060:	1000021e 	bne	r2,zero,a06c <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
    a064:	00800a84 	movi	r2,42
    a068:	00005506 	br	a1c0 <OSTaskCreate+0x190>
  NIOS2_READ_STATUS (context);
    a06c:	0005303a 	rdctl	r2,status
    a070:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a074:	e0fffc17 	ldw	r3,-16(fp)
    a078:	00bfff84 	movi	r2,-2
    a07c:	1884703a 	and	r2,r3,r2
    a080:	1001703a 	wrctl	status,r2
  return context;
    a084:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    a088:	e0bfff15 	stw	r2,-4(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
    a08c:	d0a7bf43 	ldbu	r2,-24835(gp)
    a090:	10803fcc 	andi	r2,r2,255
    a094:	10000726 	beq	r2,zero,a0b4 <OSTaskCreate+0x84>
    a098:	e0bfff17 	ldw	r2,-4(fp)
    a09c:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    a0a0:	e0bffb17 	ldw	r2,-20(fp)
    a0a4:	1001703a 	wrctl	status,r2
}
    a0a8:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
    a0ac:	00800f04 	movi	r2,60
    a0b0:	00004306 	br	a1c0 <OSTaskCreate+0x190>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
    a0b4:	e0bff303 	ldbu	r2,-52(fp)
    a0b8:	100690ba 	slli	r3,r2,2
    a0bc:	008000b4 	movhi	r2,2
    a0c0:	1885883a 	add	r2,r3,r2
    a0c4:	10a4ad17 	ldw	r2,-27980(r2)
    a0c8:	1000371e 	bne	r2,zero,a1a8 <OSTaskCreate+0x178>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
    a0cc:	e0bff303 	ldbu	r2,-52(fp)
    a0d0:	100890ba 	slli	r4,r2,2
    a0d4:	00c00044 	movi	r3,1
    a0d8:	008000b4 	movhi	r2,2
    a0dc:	2085883a 	add	r2,r4,r2
    a0e0:	10e4ad15 	stw	r3,-27980(r2)
    a0e4:	e0bfff17 	ldw	r2,-4(fp)
    a0e8:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
    a0ec:	e0bffa17 	ldw	r2,-24(fp)
    a0f0:	1001703a 	wrctl	status,r2
}
    a0f4:	0001883a 	nop
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
    a0f8:	000f883a 	mov	r7,zero
    a0fc:	e1bff417 	ldw	r6,-48(fp)
    a100:	e17ff517 	ldw	r5,-44(fp)
    a104:	e13ff617 	ldw	r4,-40(fp)
    a108:	000ec780 	call	ec78 <OSTaskStkInit>
    a10c:	e0bffe15 	stw	r2,-8(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
    a110:	e0bff303 	ldbu	r2,-52(fp)
    a114:	d8000215 	stw	zero,8(sp)
    a118:	d8000115 	stw	zero,4(sp)
    a11c:	d8000015 	stw	zero,0(sp)
    a120:	000f883a 	mov	r7,zero
    a124:	000d883a 	mov	r6,zero
    a128:	e17ffe17 	ldw	r5,-8(fp)
    a12c:	1009883a 	mov	r4,r2
    a130:	0005bcc0 	call	5bcc <OS_TCBInit>
    a134:	e0bffdc5 	stb	r2,-9(fp)
        if (err == OS_ERR_NONE) {
    a138:	e0bffdc3 	ldbu	r2,-9(fp)
    a13c:	1000061e 	bne	r2,zero,a158 <OSTaskCreate+0x128>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
    a140:	d0a7c143 	ldbu	r2,-24827(gp)
    a144:	10803fcc 	andi	r2,r2,255
    a148:	10800058 	cmpnei	r2,r2,1
    a14c:	1000141e 	bne	r2,zero,a1a0 <OSTaskCreate+0x170>
                OS_Sched();
    a150:	00057e40 	call	57e4 <OS_Sched>
    a154:	00001206 	br	a1a0 <OSTaskCreate+0x170>
  NIOS2_READ_STATUS (context);
    a158:	0005303a 	rdctl	r2,status
    a15c:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a160:	e0fff817 	ldw	r3,-32(fp)
    a164:	00bfff84 	movi	r2,-2
    a168:	1884703a 	and	r2,r3,r2
    a16c:	1001703a 	wrctl	status,r2
  return context;
    a170:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
    a174:	e0bfff15 	stw	r2,-4(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
    a178:	e0bff303 	ldbu	r2,-52(fp)
    a17c:	100690ba 	slli	r3,r2,2
    a180:	008000b4 	movhi	r2,2
    a184:	1885883a 	add	r2,r3,r2
    a188:	1024ad15 	stw	zero,-27980(r2)
    a18c:	e0bfff17 	ldw	r2,-4(fp)
    a190:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
    a194:	e0bff917 	ldw	r2,-28(fp)
    a198:	1001703a 	wrctl	status,r2
}
    a19c:	0001883a 	nop
            OS_EXIT_CRITICAL();
        }
        return (err);
    a1a0:	e0bffdc3 	ldbu	r2,-9(fp)
    a1a4:	00000606 	br	a1c0 <OSTaskCreate+0x190>
    a1a8:	e0bfff17 	ldw	r2,-4(fp)
    a1ac:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context);
    a1b0:	e0bff717 	ldw	r2,-36(fp)
    a1b4:	1001703a 	wrctl	status,r2
}
    a1b8:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
    a1bc:	00800a04 	movi	r2,40
}
    a1c0:	e037883a 	mov	sp,fp
    a1c4:	dfc00117 	ldw	ra,4(sp)
    a1c8:	df000017 	ldw	fp,0(sp)
    a1cc:	dec00204 	addi	sp,sp,8
    a1d0:	f800283a 	ret

0000a1d4 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
    a1d4:	deffec04 	addi	sp,sp,-80
    a1d8:	dfc01315 	stw	ra,76(sp)
    a1dc:	df001215 	stw	fp,72(sp)
    a1e0:	df001204 	addi	fp,sp,72
    a1e4:	e13ff615 	stw	r4,-40(fp)
    a1e8:	e17ff515 	stw	r5,-44(fp)
    a1ec:	e1bff415 	stw	r6,-48(fp)
    a1f0:	3809883a 	mov	r4,r7
    a1f4:	e0c00217 	ldw	r3,8(fp)
    a1f8:	e0800617 	ldw	r2,24(fp)
    a1fc:	e13ff305 	stb	r4,-52(fp)
    a200:	e0fff20d 	sth	r3,-56(fp)
    a204:	e0bff10d 	sth	r2,-60(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
    a208:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
    a20c:	e0bff303 	ldbu	r2,-52(fp)
    a210:	10800570 	cmpltui	r2,r2,21
    a214:	1000021e 	bne	r2,zero,a220 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
    a218:	00800a84 	movi	r2,42
    a21c:	00005f06 	br	a39c <OSTaskCreateExt+0x1c8>
  NIOS2_READ_STATUS (context);
    a220:	0005303a 	rdctl	r2,status
    a224:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a228:	e0fffc17 	ldw	r3,-16(fp)
    a22c:	00bfff84 	movi	r2,-2
    a230:	1884703a 	and	r2,r3,r2
    a234:	1001703a 	wrctl	status,r2
  return context;
    a238:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    a23c:	e0bfff15 	stw	r2,-4(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
    a240:	d0a7bf43 	ldbu	r2,-24835(gp)
    a244:	10803fcc 	andi	r2,r2,255
    a248:	10000726 	beq	r2,zero,a268 <OSTaskCreateExt+0x94>
    a24c:	e0bfff17 	ldw	r2,-4(fp)
    a250:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    a254:	e0bffb17 	ldw	r2,-20(fp)
    a258:	1001703a 	wrctl	status,r2
}
    a25c:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
    a260:	00800f04 	movi	r2,60
    a264:	00004d06 	br	a39c <OSTaskCreateExt+0x1c8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
    a268:	e0bff303 	ldbu	r2,-52(fp)
    a26c:	100690ba 	slli	r3,r2,2
    a270:	008000b4 	movhi	r2,2
    a274:	1885883a 	add	r2,r3,r2
    a278:	10a4ad17 	ldw	r2,-27980(r2)
    a27c:	1000411e 	bne	r2,zero,a384 <OSTaskCreateExt+0x1b0>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
    a280:	e0bff303 	ldbu	r2,-52(fp)
    a284:	100890ba 	slli	r4,r2,2
    a288:	00c00044 	movi	r3,1
    a28c:	008000b4 	movhi	r2,2
    a290:	2085883a 	add	r2,r4,r2
    a294:	10e4ad15 	stw	r3,-27980(r2)
    a298:	e0bfff17 	ldw	r2,-4(fp)
    a29c:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
    a2a0:	e0bffa17 	ldw	r2,-24(fp)
    a2a4:	1001703a 	wrctl	status,r2
}
    a2a8:	0001883a 	nop
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
    a2ac:	e0bff10b 	ldhu	r2,-60(fp)
    a2b0:	100d883a 	mov	r6,r2
    a2b4:	e1400417 	ldw	r5,16(fp)
    a2b8:	e1000317 	ldw	r4,12(fp)
    a2bc:	000b24c0 	call	b24c <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
    a2c0:	e0bff10b 	ldhu	r2,-60(fp)
    a2c4:	100f883a 	mov	r7,r2
    a2c8:	e1bff417 	ldw	r6,-48(fp)
    a2cc:	e17ff517 	ldw	r5,-44(fp)
    a2d0:	e13ff617 	ldw	r4,-40(fp)
    a2d4:	000ec780 	call	ec78 <OSTaskStkInit>
    a2d8:	e0bffe15 	stw	r2,-8(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
    a2dc:	e0fff303 	ldbu	r3,-52(fp)
    a2e0:	e13ff20b 	ldhu	r4,-56(fp)
    a2e4:	e0bff10b 	ldhu	r2,-60(fp)
    a2e8:	d8800215 	stw	r2,8(sp)
    a2ec:	e0800517 	ldw	r2,20(fp)
    a2f0:	d8800115 	stw	r2,4(sp)
    a2f4:	e0800417 	ldw	r2,16(fp)
    a2f8:	d8800015 	stw	r2,0(sp)
    a2fc:	200f883a 	mov	r7,r4
    a300:	e1800317 	ldw	r6,12(fp)
    a304:	e17ffe17 	ldw	r5,-8(fp)
    a308:	1809883a 	mov	r4,r3
    a30c:	0005bcc0 	call	5bcc <OS_TCBInit>
    a310:	e0bffdc5 	stb	r2,-9(fp)
        if (err == OS_ERR_NONE) {
    a314:	e0bffdc3 	ldbu	r2,-9(fp)
    a318:	1000061e 	bne	r2,zero,a334 <OSTaskCreateExt+0x160>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
    a31c:	d0a7c143 	ldbu	r2,-24827(gp)
    a320:	10803fcc 	andi	r2,r2,255
    a324:	10800058 	cmpnei	r2,r2,1
    a328:	1000141e 	bne	r2,zero,a37c <OSTaskCreateExt+0x1a8>
                OS_Sched();
    a32c:	00057e40 	call	57e4 <OS_Sched>
    a330:	00001206 	br	a37c <OSTaskCreateExt+0x1a8>
  NIOS2_READ_STATUS (context);
    a334:	0005303a 	rdctl	r2,status
    a338:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a33c:	e0fff817 	ldw	r3,-32(fp)
    a340:	00bfff84 	movi	r2,-2
    a344:	1884703a 	and	r2,r3,r2
    a348:	1001703a 	wrctl	status,r2
  return context;
    a34c:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
    a350:	e0bfff15 	stw	r2,-4(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
    a354:	e0bff303 	ldbu	r2,-52(fp)
    a358:	100690ba 	slli	r3,r2,2
    a35c:	008000b4 	movhi	r2,2
    a360:	1885883a 	add	r2,r3,r2
    a364:	1024ad15 	stw	zero,-27980(r2)
    a368:	e0bfff17 	ldw	r2,-4(fp)
    a36c:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
    a370:	e0bff917 	ldw	r2,-28(fp)
    a374:	1001703a 	wrctl	status,r2
}
    a378:	0001883a 	nop
            OS_EXIT_CRITICAL();
        }
        return (err);
    a37c:	e0bffdc3 	ldbu	r2,-9(fp)
    a380:	00000606 	br	a39c <OSTaskCreateExt+0x1c8>
    a384:	e0bfff17 	ldw	r2,-4(fp)
    a388:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context);
    a38c:	e0bff717 	ldw	r2,-36(fp)
    a390:	1001703a 	wrctl	status,r2
}
    a394:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
    a398:	00800a04 	movi	r2,40
}
    a39c:	e037883a 	mov	sp,fp
    a3a0:	dfc00117 	ldw	ra,4(sp)
    a3a4:	df000017 	ldw	fp,0(sp)
    a3a8:	dec00204 	addi	sp,sp,8
    a3ac:	f800283a 	ret

0000a3b0 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
    a3b0:	defff404 	addi	sp,sp,-48
    a3b4:	dfc00b15 	stw	ra,44(sp)
    a3b8:	df000a15 	stw	fp,40(sp)
    a3bc:	df000a04 	addi	fp,sp,40
    a3c0:	2005883a 	mov	r2,r4
    a3c4:	e0bff605 	stb	r2,-40(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
    a3c8:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
    a3cc:	d0a7bf43 	ldbu	r2,-24835(gp)
    a3d0:	10803fcc 	andi	r2,r2,255
    a3d4:	10000226 	beq	r2,zero,a3e0 <OSTaskDel+0x30>
        return (OS_ERR_TASK_DEL_ISR);
    a3d8:	00801004 	movi	r2,64
    a3dc:	0000c006 	br	a6e0 <OSTaskDel+0x330>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
    a3e0:	e0bff603 	ldbu	r2,-40(fp)
    a3e4:	10800518 	cmpnei	r2,r2,20
    a3e8:	1000021e 	bne	r2,zero,a3f4 <OSTaskDel+0x44>
        return (OS_ERR_TASK_DEL_IDLE);
    a3ec:	00800f84 	movi	r2,62
    a3f0:	0000bb06 	br	a6e0 <OSTaskDel+0x330>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
    a3f4:	e0bff603 	ldbu	r2,-40(fp)
    a3f8:	10800530 	cmpltui	r2,r2,20
    a3fc:	1000051e 	bne	r2,zero,a414 <OSTaskDel+0x64>
        if (prio != OS_PRIO_SELF) {
    a400:	e0bff603 	ldbu	r2,-40(fp)
    a404:	10803fe0 	cmpeqi	r2,r2,255
    a408:	1000021e 	bne	r2,zero,a414 <OSTaskDel+0x64>
            return (OS_ERR_PRIO_INVALID);
    a40c:	00800a84 	movi	r2,42
    a410:	0000b306 	br	a6e0 <OSTaskDel+0x330>
  NIOS2_READ_STATUS (context);
    a414:	0005303a 	rdctl	r2,status
    a418:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a41c:	e0fffc17 	ldw	r3,-16(fp)
    a420:	00bfff84 	movi	r2,-2
    a424:	1884703a 	and	r2,r3,r2
    a428:	1001703a 	wrctl	status,r2
  return context;
    a42c:	e0bffc17 	ldw	r2,-16(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
    a430:	e0bfff15 	stw	r2,-4(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
    a434:	e0bff603 	ldbu	r2,-40(fp)
    a438:	10803fd8 	cmpnei	r2,r2,255
    a43c:	1000031e 	bne	r2,zero,a44c <OSTaskDel+0x9c>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
    a440:	d0a7c317 	ldw	r2,-24820(gp)
    a444:	10800c83 	ldbu	r2,50(r2)
    a448:	e0bff605 	stb	r2,-40(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    a44c:	e0bff603 	ldbu	r2,-40(fp)
    a450:	100690ba 	slli	r3,r2,2
    a454:	008000b4 	movhi	r2,2
    a458:	1885883a 	add	r2,r3,r2
    a45c:	10a4ad17 	ldw	r2,-27980(r2)
    a460:	e0bffe15 	stw	r2,-8(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
    a464:	e0bffe17 	ldw	r2,-8(fp)
    a468:	1000071e 	bne	r2,zero,a488 <OSTaskDel+0xd8>
    a46c:	e0bfff17 	ldw	r2,-4(fp)
    a470:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    a474:	e0bffb17 	ldw	r2,-20(fp)
    a478:	1001703a 	wrctl	status,r2
}
    a47c:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    a480:	008010c4 	movi	r2,67
    a484:	00009606 	br	a6e0 <OSTaskDel+0x330>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
    a488:	e0bffe17 	ldw	r2,-8(fp)
    a48c:	10800058 	cmpnei	r2,r2,1
    a490:	1000071e 	bne	r2,zero,a4b0 <OSTaskDel+0x100>
    a494:	e0bfff17 	ldw	r2,-4(fp)
    a498:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
    a49c:	e0bffa17 	ldw	r2,-24(fp)
    a4a0:	1001703a 	wrctl	status,r2
}
    a4a4:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
    a4a8:	00800f44 	movi	r2,61
    a4ac:	00008c06 	br	a6e0 <OSTaskDel+0x330>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
    a4b0:	e0bffe17 	ldw	r2,-8(fp)
    a4b4:	10800d03 	ldbu	r2,52(r2)
    a4b8:	10c03fcc 	andi	r3,r2,255
    a4bc:	d0a7c084 	addi	r2,gp,-24830
    a4c0:	1885883a 	add	r2,r3,r2
    a4c4:	10800003 	ldbu	r2,0(r2)
    a4c8:	1007883a 	mov	r3,r2
    a4cc:	e0bffe17 	ldw	r2,-8(fp)
    a4d0:	10800d43 	ldbu	r2,53(r2)
    a4d4:	0084303a 	nor	r2,zero,r2
    a4d8:	1884703a 	and	r2,r3,r2
    a4dc:	1009883a 	mov	r4,r2
    a4e0:	e0bffe17 	ldw	r2,-8(fp)
    a4e4:	10800d03 	ldbu	r2,52(r2)
    a4e8:	10c03fcc 	andi	r3,r2,255
    a4ec:	d0a7c084 	addi	r2,gp,-24830
    a4f0:	1885883a 	add	r2,r3,r2
    a4f4:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
    a4f8:	e0bffe17 	ldw	r2,-8(fp)
    a4fc:	10800d03 	ldbu	r2,52(r2)
    a500:	10c03fcc 	andi	r3,r2,255
    a504:	d0a7c084 	addi	r2,gp,-24830
    a508:	1885883a 	add	r2,r3,r2
    a50c:	10800003 	ldbu	r2,0(r2)
    a510:	10803fcc 	andi	r2,r2,255
    a514:	1000071e 	bne	r2,zero,a534 <OSTaskDel+0x184>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
    a518:	e0bffe17 	ldw	r2,-8(fp)
    a51c:	10800d83 	ldbu	r2,54(r2)
    a520:	0084303a 	nor	r2,zero,r2
    a524:	1007883a 	mov	r3,r2
    a528:	d0a7c043 	ldbu	r2,-24831(gp)
    a52c:	1884703a 	and	r2,r3,r2
    a530:	d0a7c045 	stb	r2,-24831(gp)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
    a534:	e0bffe17 	ldw	r2,-8(fp)
    a538:	10800717 	ldw	r2,28(r2)
    a53c:	10000526 	beq	r2,zero,a554 <OSTaskDel+0x1a4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
    a540:	e0bffe17 	ldw	r2,-8(fp)
    a544:	10800717 	ldw	r2,28(r2)
    a548:	100b883a 	mov	r5,r2
    a54c:	e13ffe17 	ldw	r4,-8(fp)
    a550:	00051880 	call	5188 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
    a554:	e0bffe17 	ldw	r2,-8(fp)
    a558:	10800817 	ldw	r2,32(r2)
    a55c:	10000526 	beq	r2,zero,a574 <OSTaskDel+0x1c4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
    a560:	e0bffe17 	ldw	r2,-8(fp)
    a564:	10800817 	ldw	r2,32(r2)
    a568:	100b883a 	mov	r5,r2
    a56c:	e13ffe17 	ldw	r4,-8(fp)
    a570:	00052380 	call	5238 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
    a574:	e0bffe17 	ldw	r2,-8(fp)
    a578:	10800a17 	ldw	r2,40(r2)
    a57c:	e0bffd15 	stw	r2,-12(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
    a580:	e0bffd17 	ldw	r2,-12(fp)
    a584:	10000226 	beq	r2,zero,a590 <OSTaskDel+0x1e0>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
    a588:	e13ffd17 	ldw	r4,-12(fp)
    a58c:	000775c0 	call	775c <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
    a590:	e0bffe17 	ldw	r2,-8(fp)
    a594:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
    a598:	e0bffe17 	ldw	r2,-8(fp)
    a59c:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
    a5a0:	e0bffe17 	ldw	r2,-8(fp)
    a5a4:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
    a5a8:	d0a7bf83 	ldbu	r2,-24834(gp)
    a5ac:	10803fcc 	andi	r2,r2,255
    a5b0:	10803fe0 	cmpeqi	r2,r2,255
    a5b4:	1000031e 	bne	r2,zero,a5c4 <OSTaskDel+0x214>
        OSLockNesting++;
    a5b8:	d0a7bf83 	ldbu	r2,-24834(gp)
    a5bc:	10800044 	addi	r2,r2,1
    a5c0:	d0a7bf85 	stb	r2,-24834(gp)
    a5c4:	e0bfff17 	ldw	r2,-4(fp)
    a5c8:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
    a5cc:	e0bff817 	ldw	r2,-32(fp)
    a5d0:	1001703a 	wrctl	status,r2
}
    a5d4:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
    a5d8:	0004d900 	call	4d90 <OS_Dummy>
  NIOS2_READ_STATUS (context);
    a5dc:	0005303a 	rdctl	r2,status
    a5e0:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a5e4:	e0fff917 	ldw	r3,-28(fp)
    a5e8:	00bfff84 	movi	r2,-2
    a5ec:	1884703a 	and	r2,r3,r2
    a5f0:	1001703a 	wrctl	status,r2
  return context;
    a5f4:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
    a5f8:	e0bfff15 	stw	r2,-4(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
    a5fc:	d0a7bf83 	ldbu	r2,-24834(gp)
    a600:	10803fcc 	andi	r2,r2,255
    a604:	10000326 	beq	r2,zero,a614 <OSTaskDel+0x264>
        OSLockNesting--;
    a608:	d0a7bf83 	ldbu	r2,-24834(gp)
    a60c:	10bfffc4 	addi	r2,r2,-1
    a610:	d0a7bf85 	stb	r2,-24834(gp)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
    a614:	e13ffe17 	ldw	r4,-8(fp)
    a618:	000ede80 	call	ede8 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
    a61c:	d0a7c183 	ldbu	r2,-24826(gp)
    a620:	10bfffc4 	addi	r2,r2,-1
    a624:	d0a7c185 	stb	r2,-24826(gp)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
    a628:	e0bff603 	ldbu	r2,-40(fp)
    a62c:	100690ba 	slli	r3,r2,2
    a630:	008000b4 	movhi	r2,2
    a634:	1885883a 	add	r2,r3,r2
    a638:	1024ad15 	stw	zero,-27980(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
    a63c:	e0bffe17 	ldw	r2,-8(fp)
    a640:	10800617 	ldw	r2,24(r2)
    a644:	1000071e 	bne	r2,zero,a664 <OSTaskDel+0x2b4>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
    a648:	e0bffe17 	ldw	r2,-8(fp)
    a64c:	10800517 	ldw	r2,20(r2)
    a650:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
    a654:	e0bffe17 	ldw	r2,-8(fp)
    a658:	10800517 	ldw	r2,20(r2)
    a65c:	d0a7c615 	stw	r2,-24808(gp)
    a660:	00000a06 	br	a68c <OSTaskDel+0x2dc>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
    a664:	e0bffe17 	ldw	r2,-8(fp)
    a668:	10800617 	ldw	r2,24(r2)
    a66c:	e0fffe17 	ldw	r3,-8(fp)
    a670:	18c00517 	ldw	r3,20(r3)
    a674:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
    a678:	e0bffe17 	ldw	r2,-8(fp)
    a67c:	10800517 	ldw	r2,20(r2)
    a680:	e0fffe17 	ldw	r3,-8(fp)
    a684:	18c00617 	ldw	r3,24(r3)
    a688:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
    a68c:	d0e7c417 	ldw	r3,-24816(gp)
    a690:	e0bffe17 	ldw	r2,-8(fp)
    a694:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
    a698:	e0bffe17 	ldw	r2,-8(fp)
    a69c:	d0a7c415 	stw	r2,-24816(gp)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
    a6a0:	e0bffe17 	ldw	r2,-8(fp)
    a6a4:	00c00fc4 	movi	r3,63
    a6a8:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
    a6ac:	e0bffe17 	ldw	r2,-8(fp)
    a6b0:	10001345 	stb	zero,77(r2)
    a6b4:	e0bfff17 	ldw	r2,-4(fp)
    a6b8:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context);
    a6bc:	e0bff717 	ldw	r2,-36(fp)
    a6c0:	1001703a 	wrctl	status,r2
}
    a6c4:	0001883a 	nop
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
    a6c8:	d0a7c143 	ldbu	r2,-24827(gp)
    a6cc:	10803fcc 	andi	r2,r2,255
    a6d0:	10800058 	cmpnei	r2,r2,1
    a6d4:	1000011e 	bne	r2,zero,a6dc <OSTaskDel+0x32c>
        OS_Sched();                                     /* Find new highest priority task              */
    a6d8:	00057e40 	call	57e4 <OS_Sched>
    }
    return (OS_ERR_NONE);
    a6dc:	0005883a 	mov	r2,zero
}
    a6e0:	e037883a 	mov	sp,fp
    a6e4:	dfc00117 	ldw	ra,4(sp)
    a6e8:	df000017 	ldw	fp,0(sp)
    a6ec:	dec00204 	addi	sp,sp,8
    a6f0:	f800283a 	ret

0000a6f4 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
    a6f4:	defff504 	addi	sp,sp,-44
    a6f8:	df000a15 	stw	fp,40(sp)
    a6fc:	df000a04 	addi	fp,sp,40
    a700:	2005883a 	mov	r2,r4
    a704:	e0bff605 	stb	r2,-40(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    a708:	e03fff15 	stw	zero,-4(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
    a70c:	e0bff603 	ldbu	r2,-40(fp)
    a710:	10800518 	cmpnei	r2,r2,20
    a714:	1000021e 	bne	r2,zero,a720 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
    a718:	00800f84 	movi	r2,62
    a71c:	00004706 	br	a83c <OSTaskDelReq+0x148>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
    a720:	e0bff603 	ldbu	r2,-40(fp)
    a724:	10800530 	cmpltui	r2,r2,20
    a728:	1000051e 	bne	r2,zero,a740 <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
    a72c:	e0bff603 	ldbu	r2,-40(fp)
    a730:	10803fe0 	cmpeqi	r2,r2,255
    a734:	1000021e 	bne	r2,zero,a740 <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
    a738:	00800a84 	movi	r2,42
    a73c:	00003f06 	br	a83c <OSTaskDelReq+0x148>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
    a740:	e0bff603 	ldbu	r2,-40(fp)
    a744:	10803fd8 	cmpnei	r2,r2,255
    a748:	1000121e 	bne	r2,zero,a794 <OSTaskDelReq+0xa0>
  NIOS2_READ_STATUS (context);
    a74c:	0005303a 	rdctl	r2,status
    a750:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a754:	e0fffb17 	ldw	r3,-20(fp)
    a758:	00bfff84 	movi	r2,-2
    a75c:	1884703a 	and	r2,r3,r2
    a760:	1001703a 	wrctl	status,r2
  return context;
    a764:	e0bffb17 	ldw	r2,-20(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
    a768:	e0bfff15 	stw	r2,-4(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
    a76c:	d0a7c317 	ldw	r2,-24820(gp)
    a770:	10800dc3 	ldbu	r2,55(r2)
    a774:	e0bffdc5 	stb	r2,-9(fp)
    a778:	e0bfff17 	ldw	r2,-4(fp)
    a77c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    a780:	e0bffc17 	ldw	r2,-16(fp)
    a784:	1001703a 	wrctl	status,r2
}
    a788:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (stat);
    a78c:	e0bffdc3 	ldbu	r2,-9(fp)
    a790:	00002a06 	br	a83c <OSTaskDelReq+0x148>
  NIOS2_READ_STATUS (context);
    a794:	0005303a 	rdctl	r2,status
    a798:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a79c:	e0fffa17 	ldw	r3,-24(fp)
    a7a0:	00bfff84 	movi	r2,-2
    a7a4:	1884703a 	and	r2,r3,r2
    a7a8:	1001703a 	wrctl	status,r2
  return context;
    a7ac:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    a7b0:	e0bfff15 	stw	r2,-4(fp)
    ptcb = OSTCBPrioTbl[prio];
    a7b4:	e0bff603 	ldbu	r2,-40(fp)
    a7b8:	100690ba 	slli	r3,r2,2
    a7bc:	008000b4 	movhi	r2,2
    a7c0:	1885883a 	add	r2,r3,r2
    a7c4:	10a4ad17 	ldw	r2,-27980(r2)
    a7c8:	e0bffe15 	stw	r2,-8(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
    a7cc:	e0bffe17 	ldw	r2,-8(fp)
    a7d0:	1000071e 	bne	r2,zero,a7f0 <OSTaskDelReq+0xfc>
    a7d4:	e0bfff17 	ldw	r2,-4(fp)
    a7d8:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
    a7dc:	e0bff917 	ldw	r2,-28(fp)
    a7e0:	1001703a 	wrctl	status,r2
}
    a7e4:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
    a7e8:	008010c4 	movi	r2,67
    a7ec:	00001306 	br	a83c <OSTaskDelReq+0x148>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
    a7f0:	e0bffe17 	ldw	r2,-8(fp)
    a7f4:	10800058 	cmpnei	r2,r2,1
    a7f8:	1000071e 	bne	r2,zero,a818 <OSTaskDelReq+0x124>
    a7fc:	e0bfff17 	ldw	r2,-4(fp)
    a800:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
    a804:	e0bff817 	ldw	r2,-32(fp)
    a808:	1001703a 	wrctl	status,r2
}
    a80c:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
    a810:	00800f44 	movi	r2,61
    a814:	00000906 	br	a83c <OSTaskDelReq+0x148>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
    a818:	e0bffe17 	ldw	r2,-8(fp)
    a81c:	00c00fc4 	movi	r3,63
    a820:	10c00dc5 	stb	r3,55(r2)
    a824:	e0bfff17 	ldw	r2,-4(fp)
    a828:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context);
    a82c:	e0bff717 	ldw	r2,-36(fp)
    a830:	1001703a 	wrctl	status,r2
}
    a834:	0001883a 	nop
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    a838:	0005883a 	mov	r2,zero
}
    a83c:	e037883a 	mov	sp,fp
    a840:	df000017 	ldw	fp,0(sp)
    a844:	dec00104 	addi	sp,sp,4
    a848:	f800283a 	ret

0000a84c <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
    a84c:	defff404 	addi	sp,sp,-48
    a850:	dfc00b15 	stw	ra,44(sp)
    a854:	df000a15 	stw	fp,40(sp)
    a858:	df000a04 	addi	fp,sp,40
    a85c:	2005883a 	mov	r2,r4
    a860:	e17ff715 	stw	r5,-36(fp)
    a864:	e1bff615 	stw	r6,-40(fp)
    a868:	e0bff805 	stb	r2,-32(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
    a86c:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
    a870:	e0bff617 	ldw	r2,-40(fp)
    a874:	1000021e 	bne	r2,zero,a880 <OSTaskNameGet+0x34>
        return (0);
    a878:	0005883a 	mov	r2,zero
    a87c:	00005506 	br	a9d4 <OSTaskNameGet+0x188>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
    a880:	e0bff803 	ldbu	r2,-32(fp)
    a884:	10800570 	cmpltui	r2,r2,21
    a888:	1000081e 	bne	r2,zero,a8ac <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
    a88c:	e0bff803 	ldbu	r2,-32(fp)
    a890:	10803fe0 	cmpeqi	r2,r2,255
    a894:	1000051e 	bne	r2,zero,a8ac <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
    a898:	e0bff617 	ldw	r2,-40(fp)
    a89c:	00c00a84 	movi	r3,42
    a8a0:	10c00005 	stb	r3,0(r2)
            return (0);
    a8a4:	0005883a 	mov	r2,zero
    a8a8:	00004a06 	br	a9d4 <OSTaskNameGet+0x188>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
    a8ac:	e0bff717 	ldw	r2,-36(fp)
    a8b0:	1000051e 	bne	r2,zero,a8c8 <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
    a8b4:	e0bff617 	ldw	r2,-40(fp)
    a8b8:	00c00304 	movi	r3,12
    a8bc:	10c00005 	stb	r3,0(r2)
        return (0);
    a8c0:	0005883a 	mov	r2,zero
    a8c4:	00004306 	br	a9d4 <OSTaskNameGet+0x188>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
    a8c8:	d0a7bf43 	ldbu	r2,-24835(gp)
    a8cc:	10803fcc 	andi	r2,r2,255
    a8d0:	10000526 	beq	r2,zero,a8e8 <OSTaskNameGet+0x9c>
        *perr = OS_ERR_NAME_GET_ISR;
    a8d4:	e0bff617 	ldw	r2,-40(fp)
    a8d8:	00c00444 	movi	r3,17
    a8dc:	10c00005 	stb	r3,0(r2)
        return (0);
    a8e0:	0005883a 	mov	r2,zero
    a8e4:	00003b06 	br	a9d4 <OSTaskNameGet+0x188>
  NIOS2_READ_STATUS (context);
    a8e8:	0005303a 	rdctl	r2,status
    a8ec:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a8f0:	e0fffc17 	ldw	r3,-16(fp)
    a8f4:	00bfff84 	movi	r2,-2
    a8f8:	1884703a 	and	r2,r3,r2
    a8fc:	1001703a 	wrctl	status,r2
  return context;
    a900:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    a904:	e0bfff15 	stw	r2,-4(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
    a908:	e0bff803 	ldbu	r2,-32(fp)
    a90c:	10803fd8 	cmpnei	r2,r2,255
    a910:	1000031e 	bne	r2,zero,a920 <OSTaskNameGet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
    a914:	d0a7c317 	ldw	r2,-24820(gp)
    a918:	10800c83 	ldbu	r2,50(r2)
    a91c:	e0bff805 	stb	r2,-32(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    a920:	e0bff803 	ldbu	r2,-32(fp)
    a924:	100690ba 	slli	r3,r2,2
    a928:	008000b4 	movhi	r2,2
    a92c:	1885883a 	add	r2,r3,r2
    a930:	10a4ad17 	ldw	r2,-27980(r2)
    a934:	e0bffe15 	stw	r2,-8(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
    a938:	e0bffe17 	ldw	r2,-8(fp)
    a93c:	10000a1e 	bne	r2,zero,a968 <OSTaskNameGet+0x11c>
    a940:	e0bfff17 	ldw	r2,-4(fp)
    a944:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    a948:	e0bffb17 	ldw	r2,-20(fp)
    a94c:	1001703a 	wrctl	status,r2
}
    a950:	0001883a 	nop
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
    a954:	e0bff617 	ldw	r2,-40(fp)
    a958:	00c010c4 	movi	r3,67
    a95c:	10c00005 	stb	r3,0(r2)
        return (0);
    a960:	0005883a 	mov	r2,zero
    a964:	00001b06 	br	a9d4 <OSTaskNameGet+0x188>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
    a968:	e0bffe17 	ldw	r2,-8(fp)
    a96c:	10800058 	cmpnei	r2,r2,1
    a970:	10000a1e 	bne	r2,zero,a99c <OSTaskNameGet+0x150>
    a974:	e0bfff17 	ldw	r2,-4(fp)
    a978:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
    a97c:	e0bffa17 	ldw	r2,-24(fp)
    a980:	1001703a 	wrctl	status,r2
}
    a984:	0001883a 	nop
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
    a988:	e0bff617 	ldw	r2,-40(fp)
    a98c:	00c010c4 	movi	r3,67
    a990:	10c00005 	stb	r3,0(r2)
        return (0);
    a994:	0005883a 	mov	r2,zero
    a998:	00000e06 	br	a9d4 <OSTaskNameGet+0x188>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
    a99c:	e0bffe17 	ldw	r2,-8(fp)
    a9a0:	10801304 	addi	r2,r2,76
    a9a4:	100b883a 	mov	r5,r2
    a9a8:	e13ff717 	ldw	r4,-36(fp)
    a9ac:	000591c0 	call	591c <OS_StrCopy>
    a9b0:	e0bffdc5 	stb	r2,-9(fp)
    a9b4:	e0bfff17 	ldw	r2,-4(fp)
    a9b8:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
    a9bc:	e0bff917 	ldw	r2,-28(fp)
    a9c0:	1001703a 	wrctl	status,r2
}
    a9c4:	0001883a 	nop
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    a9c8:	e0bff617 	ldw	r2,-40(fp)
    a9cc:	10000005 	stb	zero,0(r2)
    return (len);
    a9d0:	e0bffdc3 	ldbu	r2,-9(fp)
}
    a9d4:	e037883a 	mov	sp,fp
    a9d8:	dfc00117 	ldw	ra,4(sp)
    a9dc:	df000017 	ldw	fp,0(sp)
    a9e0:	dec00204 	addi	sp,sp,8
    a9e4:	f800283a 	ret

0000a9e8 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
    a9e8:	defff304 	addi	sp,sp,-52
    a9ec:	dfc00c15 	stw	ra,48(sp)
    a9f0:	df000b15 	stw	fp,44(sp)
    a9f4:	df000b04 	addi	fp,sp,44
    a9f8:	2005883a 	mov	r2,r4
    a9fc:	e17ff615 	stw	r5,-40(fp)
    aa00:	e1bff515 	stw	r6,-44(fp)
    aa04:	e0bff705 	stb	r2,-36(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
    aa08:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
    aa0c:	e0bff517 	ldw	r2,-44(fp)
    aa10:	10005e26 	beq	r2,zero,ab8c <OSTaskNameSet+0x1a4>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
    aa14:	e0bff703 	ldbu	r2,-36(fp)
    aa18:	10800570 	cmpltui	r2,r2,21
    aa1c:	1000071e 	bne	r2,zero,aa3c <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
    aa20:	e0bff703 	ldbu	r2,-36(fp)
    aa24:	10803fe0 	cmpeqi	r2,r2,255
    aa28:	1000041e 	bne	r2,zero,aa3c <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
    aa2c:	e0bff517 	ldw	r2,-44(fp)
    aa30:	00c00a84 	movi	r3,42
    aa34:	10c00005 	stb	r3,0(r2)
            return;
    aa38:	00005506 	br	ab90 <OSTaskNameSet+0x1a8>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
    aa3c:	e0bff617 	ldw	r2,-40(fp)
    aa40:	1000041e 	bne	r2,zero,aa54 <OSTaskNameSet+0x6c>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
    aa44:	e0bff517 	ldw	r2,-44(fp)
    aa48:	00c00304 	movi	r3,12
    aa4c:	10c00005 	stb	r3,0(r2)
        return;
    aa50:	00004f06 	br	ab90 <OSTaskNameSet+0x1a8>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
    aa54:	d0a7bf43 	ldbu	r2,-24835(gp)
    aa58:	10803fcc 	andi	r2,r2,255
    aa5c:	10000426 	beq	r2,zero,aa70 <OSTaskNameSet+0x88>
        *perr = OS_ERR_NAME_SET_ISR;
    aa60:	e0bff517 	ldw	r2,-44(fp)
    aa64:	00c00484 	movi	r3,18
    aa68:	10c00005 	stb	r3,0(r2)
        return;
    aa6c:	00004806 	br	ab90 <OSTaskNameSet+0x1a8>
  NIOS2_READ_STATUS (context);
    aa70:	0005303a 	rdctl	r2,status
    aa74:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    aa78:	e0fffc17 	ldw	r3,-16(fp)
    aa7c:	00bfff84 	movi	r2,-2
    aa80:	1884703a 	and	r2,r3,r2
    aa84:	1001703a 	wrctl	status,r2
  return context;
    aa88:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    aa8c:	e0bfff15 	stw	r2,-4(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
    aa90:	e0bff703 	ldbu	r2,-36(fp)
    aa94:	10803fd8 	cmpnei	r2,r2,255
    aa98:	1000031e 	bne	r2,zero,aaa8 <OSTaskNameSet+0xc0>
        prio = OSTCBCur->OSTCBPrio;
    aa9c:	d0a7c317 	ldw	r2,-24820(gp)
    aaa0:	10800c83 	ldbu	r2,50(r2)
    aaa4:	e0bff705 	stb	r2,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    aaa8:	e0bff703 	ldbu	r2,-36(fp)
    aaac:	100690ba 	slli	r3,r2,2
    aab0:	008000b4 	movhi	r2,2
    aab4:	1885883a 	add	r2,r3,r2
    aab8:	10a4ad17 	ldw	r2,-27980(r2)
    aabc:	e0bffe15 	stw	r2,-8(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
    aac0:	e0bffe17 	ldw	r2,-8(fp)
    aac4:	1000091e 	bne	r2,zero,aaec <OSTaskNameSet+0x104>
    aac8:	e0bfff17 	ldw	r2,-4(fp)
    aacc:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    aad0:	e0bffb17 	ldw	r2,-20(fp)
    aad4:	1001703a 	wrctl	status,r2
}
    aad8:	0001883a 	nop
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
    aadc:	e0bff517 	ldw	r2,-44(fp)
    aae0:	00c010c4 	movi	r3,67
    aae4:	10c00005 	stb	r3,0(r2)
        return;
    aae8:	00002906 	br	ab90 <OSTaskNameSet+0x1a8>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
    aaec:	e0bffe17 	ldw	r2,-8(fp)
    aaf0:	10800058 	cmpnei	r2,r2,1
    aaf4:	1000091e 	bne	r2,zero,ab1c <OSTaskNameSet+0x134>
    aaf8:	e0bfff17 	ldw	r2,-4(fp)
    aafc:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
    ab00:	e0bffa17 	ldw	r2,-24(fp)
    ab04:	1001703a 	wrctl	status,r2
}
    ab08:	0001883a 	nop
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
    ab0c:	e0bff517 	ldw	r2,-44(fp)
    ab10:	00c010c4 	movi	r3,67
    ab14:	10c00005 	stb	r3,0(r2)
        return;
    ab18:	00001d06 	br	ab90 <OSTaskNameSet+0x1a8>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
    ab1c:	e13ff617 	ldw	r4,-40(fp)
    ab20:	00059900 	call	5990 <OS_StrLen>
    ab24:	e0bffdc5 	stb	r2,-9(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
    ab28:	e0bffdc3 	ldbu	r2,-9(fp)
    ab2c:	10800830 	cmpltui	r2,r2,32
    ab30:	1000091e 	bne	r2,zero,ab58 <OSTaskNameSet+0x170>
    ab34:	e0bfff17 	ldw	r2,-4(fp)
    ab38:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
    ab3c:	e0bff917 	ldw	r2,-28(fp)
    ab40:	1001703a 	wrctl	status,r2
}
    ab44:	0001883a 	nop
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
    ab48:	e0bff517 	ldw	r2,-44(fp)
    ab4c:	00c01044 	movi	r3,65
    ab50:	10c00005 	stb	r3,0(r2)
        return;
    ab54:	00000e06 	br	ab90 <OSTaskNameSet+0x1a8>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    ab58:	e0bffe17 	ldw	r2,-8(fp)
    ab5c:	10801304 	addi	r2,r2,76
    ab60:	e17ff617 	ldw	r5,-40(fp)
    ab64:	1009883a 	mov	r4,r2
    ab68:	000591c0 	call	591c <OS_StrCopy>
    ab6c:	e0bfff17 	ldw	r2,-4(fp)
    ab70:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
    ab74:	e0bff817 	ldw	r2,-32(fp)
    ab78:	1001703a 	wrctl	status,r2
}
    ab7c:	0001883a 	nop
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    ab80:	e0bff517 	ldw	r2,-44(fp)
    ab84:	10000005 	stb	zero,0(r2)
    ab88:	00000106 	br	ab90 <OSTaskNameSet+0x1a8>
        return;
    ab8c:	0001883a 	nop
}
    ab90:	e037883a 	mov	sp,fp
    ab94:	dfc00117 	ldw	ra,4(sp)
    ab98:	df000017 	ldw	fp,0(sp)
    ab9c:	dec00204 	addi	sp,sp,8
    aba0:	f800283a 	ret

0000aba4 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
    aba4:	defff404 	addi	sp,sp,-48
    aba8:	dfc00b15 	stw	ra,44(sp)
    abac:	df000a15 	stw	fp,40(sp)
    abb0:	df000a04 	addi	fp,sp,40
    abb4:	2005883a 	mov	r2,r4
    abb8:	e0bff605 	stb	r2,-40(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
    abbc:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
    abc0:	e0bff603 	ldbu	r2,-40(fp)
    abc4:	10800530 	cmpltui	r2,r2,20
    abc8:	1000021e 	bne	r2,zero,abd4 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
    abcc:	00800a84 	movi	r2,42
    abd0:	00006706 	br	ad70 <OSTaskResume+0x1cc>
  NIOS2_READ_STATUS (context);
    abd4:	0005303a 	rdctl	r2,status
    abd8:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    abdc:	e0fffd17 	ldw	r3,-12(fp)
    abe0:	00bfff84 	movi	r2,-2
    abe4:	1884703a 	and	r2,r3,r2
    abe8:	1001703a 	wrctl	status,r2
  return context;
    abec:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    abf0:	e0bfff15 	stw	r2,-4(fp)
    ptcb = OSTCBPrioTbl[prio];
    abf4:	e0bff603 	ldbu	r2,-40(fp)
    abf8:	100690ba 	slli	r3,r2,2
    abfc:	008000b4 	movhi	r2,2
    ac00:	1885883a 	add	r2,r3,r2
    ac04:	10a4ad17 	ldw	r2,-27980(r2)
    ac08:	e0bffe15 	stw	r2,-8(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
    ac0c:	e0bffe17 	ldw	r2,-8(fp)
    ac10:	1000071e 	bne	r2,zero,ac30 <OSTaskResume+0x8c>
    ac14:	e0bfff17 	ldw	r2,-4(fp)
    ac18:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    ac1c:	e0bffc17 	ldw	r2,-16(fp)
    ac20:	1001703a 	wrctl	status,r2
}
    ac24:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
    ac28:	00801184 	movi	r2,70
    ac2c:	00005006 	br	ad70 <OSTaskResume+0x1cc>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
    ac30:	e0bffe17 	ldw	r2,-8(fp)
    ac34:	10800058 	cmpnei	r2,r2,1
    ac38:	1000071e 	bne	r2,zero,ac58 <OSTaskResume+0xb4>
    ac3c:	e0bfff17 	ldw	r2,-4(fp)
    ac40:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    ac44:	e0bffb17 	ldw	r2,-20(fp)
    ac48:	1001703a 	wrctl	status,r2
}
    ac4c:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    ac50:	008010c4 	movi	r2,67
    ac54:	00004606 	br	ad70 <OSTaskResume+0x1cc>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
    ac58:	e0bffe17 	ldw	r2,-8(fp)
    ac5c:	10800c03 	ldbu	r2,48(r2)
    ac60:	10803fcc 	andi	r2,r2,255
    ac64:	1080020c 	andi	r2,r2,8
    ac68:	10003b26 	beq	r2,zero,ad58 <OSTaskResume+0x1b4>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
    ac6c:	e0bffe17 	ldw	r2,-8(fp)
    ac70:	10c00c03 	ldbu	r3,48(r2)
    ac74:	00bffdc4 	movi	r2,-9
    ac78:	1884703a 	and	r2,r3,r2
    ac7c:	1007883a 	mov	r3,r2
    ac80:	e0bffe17 	ldw	r2,-8(fp)
    ac84:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
    ac88:	e0bffe17 	ldw	r2,-8(fp)
    ac8c:	10800c03 	ldbu	r2,48(r2)
    ac90:	10803fcc 	andi	r2,r2,255
    ac94:	1000291e 	bne	r2,zero,ad3c <OSTaskResume+0x198>
            if (ptcb->OSTCBDly == 0) {
    ac98:	e0bffe17 	ldw	r2,-8(fp)
    ac9c:	10800b8b 	ldhu	r2,46(r2)
    aca0:	10bfffcc 	andi	r2,r2,65535
    aca4:	1000201e 	bne	r2,zero,ad28 <OSTaskResume+0x184>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
    aca8:	e0bffe17 	ldw	r2,-8(fp)
    acac:	10c00d83 	ldbu	r3,54(r2)
    acb0:	d0a7c043 	ldbu	r2,-24831(gp)
    acb4:	1884b03a 	or	r2,r3,r2
    acb8:	d0a7c045 	stb	r2,-24831(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    acbc:	e0bffe17 	ldw	r2,-8(fp)
    acc0:	10800d03 	ldbu	r2,52(r2)
    acc4:	10c03fcc 	andi	r3,r2,255
    acc8:	d0a7c084 	addi	r2,gp,-24830
    accc:	1885883a 	add	r2,r3,r2
    acd0:	11000003 	ldbu	r4,0(r2)
    acd4:	e0bffe17 	ldw	r2,-8(fp)
    acd8:	10800d43 	ldbu	r2,53(r2)
    acdc:	e0fffe17 	ldw	r3,-8(fp)
    ace0:	18c00d03 	ldbu	r3,52(r3)
    ace4:	18c03fcc 	andi	r3,r3,255
    ace8:	2084b03a 	or	r2,r4,r2
    acec:	1009883a 	mov	r4,r2
    acf0:	d0a7c084 	addi	r2,gp,-24830
    acf4:	1885883a 	add	r2,r3,r2
    acf8:	11000005 	stb	r4,0(r2)
    acfc:	e0bfff17 	ldw	r2,-4(fp)
    ad00:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
    ad04:	e0bffa17 	ldw	r2,-24(fp)
    ad08:	1001703a 	wrctl	status,r2
}
    ad0c:	0001883a 	nop
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
    ad10:	d0a7c143 	ldbu	r2,-24827(gp)
    ad14:	10803fcc 	andi	r2,r2,255
    ad18:	10800058 	cmpnei	r2,r2,1
    ad1c:	10000c1e 	bne	r2,zero,ad50 <OSTaskResume+0x1ac>
                    OS_Sched();                               /* Find new highest priority task        */
    ad20:	00057e40 	call	57e4 <OS_Sched>
    ad24:	00000a06 	br	ad50 <OSTaskResume+0x1ac>
    ad28:	e0bfff17 	ldw	r2,-4(fp)
    ad2c:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
    ad30:	e0bff917 	ldw	r2,-28(fp)
    ad34:	1001703a 	wrctl	status,r2
}
    ad38:	00000506 	br	ad50 <OSTaskResume+0x1ac>
    ad3c:	e0bfff17 	ldw	r2,-4(fp)
    ad40:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
    ad44:	e0bff817 	ldw	r2,-32(fp)
    ad48:	1001703a 	wrctl	status,r2
}
    ad4c:	0001883a 	nop
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
    ad50:	0005883a 	mov	r2,zero
    ad54:	00000606 	br	ad70 <OSTaskResume+0x1cc>
    ad58:	e0bfff17 	ldw	r2,-4(fp)
    ad5c:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context);
    ad60:	e0bff717 	ldw	r2,-36(fp)
    ad64:	1001703a 	wrctl	status,r2
}
    ad68:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
    ad6c:	00801104 	movi	r2,68
}
    ad70:	e037883a 	mov	sp,fp
    ad74:	dfc00117 	ldw	ra,4(sp)
    ad78:	df000017 	ldw	fp,0(sp)
    ad7c:	dec00204 	addi	sp,sp,8
    ad80:	f800283a 	ret

0000ad84 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
    ad84:	defff304 	addi	sp,sp,-52
    ad88:	df000c15 	stw	fp,48(sp)
    ad8c:	df000c04 	addi	fp,sp,48
    ad90:	2005883a 	mov	r2,r4
    ad94:	e17ff415 	stw	r5,-48(fp)
    ad98:	e0bff505 	stb	r2,-44(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    ad9c:	e03ffd15 	stw	zero,-12(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
    ada0:	e0bff503 	ldbu	r2,-44(fp)
    ada4:	10800570 	cmpltui	r2,r2,21
    ada8:	1000051e 	bne	r2,zero,adc0 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
    adac:	e0bff503 	ldbu	r2,-44(fp)
    adb0:	10803fe0 	cmpeqi	r2,r2,255
    adb4:	1000021e 	bne	r2,zero,adc0 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
    adb8:	00800a84 	movi	r2,42
    adbc:	00005b06 	br	af2c <OSTaskStkChk+0x1a8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
    adc0:	e0bff417 	ldw	r2,-48(fp)
    adc4:	1000021e 	bne	r2,zero,add0 <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
    adc8:	00800244 	movi	r2,9
    adcc:	00005706 	br	af2c <OSTaskStkChk+0x1a8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
    add0:	e0bff417 	ldw	r2,-48(fp)
    add4:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
    add8:	e0bff417 	ldw	r2,-48(fp)
    addc:	10000115 	stw	zero,4(r2)
  NIOS2_READ_STATUS (context);
    ade0:	0005303a 	rdctl	r2,status
    ade4:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ade8:	e0fffa17 	ldw	r3,-24(fp)
    adec:	00bfff84 	movi	r2,-2
    adf0:	1884703a 	and	r2,r3,r2
    adf4:	1001703a 	wrctl	status,r2
  return context;
    adf8:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();
    adfc:	e0bffd15 	stw	r2,-12(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
    ae00:	e0bff503 	ldbu	r2,-44(fp)
    ae04:	10803fd8 	cmpnei	r2,r2,255
    ae08:	1000031e 	bne	r2,zero,ae18 <OSTaskStkChk+0x94>
        prio = OSTCBCur->OSTCBPrio;
    ae0c:	d0a7c317 	ldw	r2,-24820(gp)
    ae10:	10800c83 	ldbu	r2,50(r2)
    ae14:	e0bff505 	stb	r2,-44(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    ae18:	e0bff503 	ldbu	r2,-44(fp)
    ae1c:	100690ba 	slli	r3,r2,2
    ae20:	008000b4 	movhi	r2,2
    ae24:	1885883a 	add	r2,r3,r2
    ae28:	10a4ad17 	ldw	r2,-27980(r2)
    ae2c:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
    ae30:	e0bffc17 	ldw	r2,-16(fp)
    ae34:	1000071e 	bne	r2,zero,ae54 <OSTaskStkChk+0xd0>
    ae38:	e0bffd17 	ldw	r2,-12(fp)
    ae3c:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
    ae40:	e0bff917 	ldw	r2,-28(fp)
    ae44:	1001703a 	wrctl	status,r2
}
    ae48:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    ae4c:	008010c4 	movi	r2,67
    ae50:	00003606 	br	af2c <OSTaskStkChk+0x1a8>
    }
    if (ptcb == OS_TCB_RESERVED) {
    ae54:	e0bffc17 	ldw	r2,-16(fp)
    ae58:	10800058 	cmpnei	r2,r2,1
    ae5c:	1000071e 	bne	r2,zero,ae7c <OSTaskStkChk+0xf8>
    ae60:	e0bffd17 	ldw	r2,-12(fp)
    ae64:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
    ae68:	e0bff817 	ldw	r2,-32(fp)
    ae6c:	1001703a 	wrctl	status,r2
}
    ae70:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    ae74:	008010c4 	movi	r2,67
    ae78:	00002c06 	br	af2c <OSTaskStkChk+0x1a8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
    ae7c:	e0bffc17 	ldw	r2,-16(fp)
    ae80:	1080040b 	ldhu	r2,16(r2)
    ae84:	10bfffcc 	andi	r2,r2,65535
    ae88:	1080004c 	andi	r2,r2,1
    ae8c:	1000071e 	bne	r2,zero,aeac <OSTaskStkChk+0x128>
    ae90:	e0bffd17 	ldw	r2,-12(fp)
    ae94:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context);
    ae98:	e0bff717 	ldw	r2,-36(fp)
    ae9c:	1001703a 	wrctl	status,r2
}
    aea0:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
    aea4:	00801144 	movi	r2,69
    aea8:	00002006 	br	af2c <OSTaskStkChk+0x1a8>
    }
    nfree = 0;
    aeac:	e03ffe15 	stw	zero,-8(fp)
    size  = ptcb->OSTCBStkSize;
    aeb0:	e0bffc17 	ldw	r2,-16(fp)
    aeb4:	10800317 	ldw	r2,12(r2)
    aeb8:	e0bffb15 	stw	r2,-20(fp)
    pchk  = ptcb->OSTCBStkBottom;
    aebc:	e0bffc17 	ldw	r2,-16(fp)
    aec0:	10800217 	ldw	r2,8(r2)
    aec4:	e0bfff15 	stw	r2,-4(fp)
    aec8:	e0bffd17 	ldw	r2,-12(fp)
    aecc:	e0bff615 	stw	r2,-40(fp)
  NIOS2_WRITE_STATUS (context);
    aed0:	e0bff617 	ldw	r2,-40(fp)
    aed4:	1001703a 	wrctl	status,r2
}
    aed8:	0001883a 	nop
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
    aedc:	00000306 	br	aeec <OSTaskStkChk+0x168>
        nfree++;
    aee0:	e0bffe17 	ldw	r2,-8(fp)
    aee4:	10800044 	addi	r2,r2,1
    aee8:	e0bffe15 	stw	r2,-8(fp)
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
    aeec:	e0bfff17 	ldw	r2,-4(fp)
    aef0:	10c00104 	addi	r3,r2,4
    aef4:	e0ffff15 	stw	r3,-4(fp)
    aef8:	10800017 	ldw	r2,0(r2)
    aefc:	103ff826 	beq	r2,zero,aee0 <OSTaskStkChk+0x15c>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
    af00:	e0bffe17 	ldw	r2,-8(fp)
    af04:	100690ba 	slli	r3,r2,2
    af08:	e0bff417 	ldw	r2,-48(fp)
    af0c:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
    af10:	e0fffb17 	ldw	r3,-20(fp)
    af14:	e0bffe17 	ldw	r2,-8(fp)
    af18:	1885c83a 	sub	r2,r3,r2
    af1c:	100690ba 	slli	r3,r2,2
    af20:	e0bff417 	ldw	r2,-48(fp)
    af24:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
    af28:	0005883a 	mov	r2,zero
}
    af2c:	e037883a 	mov	sp,fp
    af30:	df000017 	ldw	fp,0(sp)
    af34:	dec00104 	addi	sp,sp,4
    af38:	f800283a 	ret

0000af3c <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
    af3c:	defff504 	addi	sp,sp,-44
    af40:	dfc00a15 	stw	ra,40(sp)
    af44:	df000915 	stw	fp,36(sp)
    af48:	df000904 	addi	fp,sp,36
    af4c:	2005883a 	mov	r2,r4
    af50:	e0bff705 	stb	r2,-36(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    af54:	e03ffe15 	stw	zero,-8(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
    af58:	e0bff703 	ldbu	r2,-36(fp)
    af5c:	10800518 	cmpnei	r2,r2,20
    af60:	1000021e 	bne	r2,zero,af6c <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
    af64:	008011c4 	movi	r2,71
    af68:	00006906 	br	b110 <OSTaskSuspend+0x1d4>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
    af6c:	e0bff703 	ldbu	r2,-36(fp)
    af70:	10800530 	cmpltui	r2,r2,20
    af74:	1000051e 	bne	r2,zero,af8c <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
    af78:	e0bff703 	ldbu	r2,-36(fp)
    af7c:	10803fe0 	cmpeqi	r2,r2,255
    af80:	1000021e 	bne	r2,zero,af8c <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
    af84:	00800a84 	movi	r2,42
    af88:	00006106 	br	b110 <OSTaskSuspend+0x1d4>
  NIOS2_READ_STATUS (context);
    af8c:	0005303a 	rdctl	r2,status
    af90:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    af94:	e0fffb17 	ldw	r3,-20(fp)
    af98:	00bfff84 	movi	r2,-2
    af9c:	1884703a 	and	r2,r3,r2
    afa0:	1001703a 	wrctl	status,r2
  return context;
    afa4:	e0bffb17 	ldw	r2,-20(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
    afa8:	e0bffe15 	stw	r2,-8(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
    afac:	e0bff703 	ldbu	r2,-36(fp)
    afb0:	10803fd8 	cmpnei	r2,r2,255
    afb4:	1000061e 	bne	r2,zero,afd0 <OSTaskSuspend+0x94>
        prio = OSTCBCur->OSTCBPrio;
    afb8:	d0a7c317 	ldw	r2,-24820(gp)
    afbc:	10800c83 	ldbu	r2,50(r2)
    afc0:	e0bff705 	stb	r2,-36(fp)
        self = OS_TRUE;
    afc4:	00800044 	movi	r2,1
    afc8:	e0bfffc5 	stb	r2,-1(fp)
    afcc:	00000906 	br	aff4 <OSTaskSuspend+0xb8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
    afd0:	d0a7c317 	ldw	r2,-24820(gp)
    afd4:	10800c83 	ldbu	r2,50(r2)
    afd8:	e0fff703 	ldbu	r3,-36(fp)
    afdc:	10803fcc 	andi	r2,r2,255
    afe0:	1880031e 	bne	r3,r2,aff0 <OSTaskSuspend+0xb4>
        self = OS_TRUE;
    afe4:	00800044 	movi	r2,1
    afe8:	e0bfffc5 	stb	r2,-1(fp)
    afec:	00000106 	br	aff4 <OSTaskSuspend+0xb8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
    aff0:	e03fffc5 	stb	zero,-1(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    aff4:	e0bff703 	ldbu	r2,-36(fp)
    aff8:	100690ba 	slli	r3,r2,2
    affc:	008000b4 	movhi	r2,2
    b000:	1885883a 	add	r2,r3,r2
    b004:	10a4ad17 	ldw	r2,-27980(r2)
    b008:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
    b00c:	e0bffd17 	ldw	r2,-12(fp)
    b010:	1000071e 	bne	r2,zero,b030 <OSTaskSuspend+0xf4>
    b014:	e0bffe17 	ldw	r2,-8(fp)
    b018:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
    b01c:	e0bffa17 	ldw	r2,-24(fp)
    b020:	1001703a 	wrctl	status,r2
}
    b024:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
    b028:	00801204 	movi	r2,72
    b02c:	00003806 	br	b110 <OSTaskSuspend+0x1d4>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
    b030:	e0bffd17 	ldw	r2,-12(fp)
    b034:	10800058 	cmpnei	r2,r2,1
    b038:	1000071e 	bne	r2,zero,b058 <OSTaskSuspend+0x11c>
    b03c:	e0bffe17 	ldw	r2,-8(fp)
    b040:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
    b044:	e0bff917 	ldw	r2,-28(fp)
    b048:	1001703a 	wrctl	status,r2
}
    b04c:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    b050:	008010c4 	movi	r2,67
    b054:	00002e06 	br	b110 <OSTaskSuspend+0x1d4>
    }
    y            = ptcb->OSTCBY;
    b058:	e0bffd17 	ldw	r2,-12(fp)
    b05c:	10800d03 	ldbu	r2,52(r2)
    b060:	e0bffcc5 	stb	r2,-13(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
    b064:	e0fffcc3 	ldbu	r3,-13(fp)
    b068:	d0a7c084 	addi	r2,gp,-24830
    b06c:	1885883a 	add	r2,r3,r2
    b070:	10800003 	ldbu	r2,0(r2)
    b074:	1007883a 	mov	r3,r2
    b078:	e0bffd17 	ldw	r2,-12(fp)
    b07c:	10800d43 	ldbu	r2,53(r2)
    b080:	0084303a 	nor	r2,zero,r2
    b084:	1884703a 	and	r2,r3,r2
    b088:	e0fffcc3 	ldbu	r3,-13(fp)
    b08c:	1009883a 	mov	r4,r2
    b090:	d0a7c084 	addi	r2,gp,-24830
    b094:	1885883a 	add	r2,r3,r2
    b098:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
    b09c:	e0fffcc3 	ldbu	r3,-13(fp)
    b0a0:	d0a7c084 	addi	r2,gp,-24830
    b0a4:	1885883a 	add	r2,r3,r2
    b0a8:	10800003 	ldbu	r2,0(r2)
    b0ac:	10803fcc 	andi	r2,r2,255
    b0b0:	1000071e 	bne	r2,zero,b0d0 <OSTaskSuspend+0x194>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
    b0b4:	e0bffd17 	ldw	r2,-12(fp)
    b0b8:	10800d83 	ldbu	r2,54(r2)
    b0bc:	0084303a 	nor	r2,zero,r2
    b0c0:	1007883a 	mov	r3,r2
    b0c4:	d0a7c043 	ldbu	r2,-24831(gp)
    b0c8:	1884703a 	and	r2,r3,r2
    b0cc:	d0a7c045 	stb	r2,-24831(gp)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
    b0d0:	e0bffd17 	ldw	r2,-12(fp)
    b0d4:	10800c03 	ldbu	r2,48(r2)
    b0d8:	10800214 	ori	r2,r2,8
    b0dc:	1007883a 	mov	r3,r2
    b0e0:	e0bffd17 	ldw	r2,-12(fp)
    b0e4:	10c00c05 	stb	r3,48(r2)
    b0e8:	e0bffe17 	ldw	r2,-8(fp)
    b0ec:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
    b0f0:	e0bff817 	ldw	r2,-32(fp)
    b0f4:	1001703a 	wrctl	status,r2
}
    b0f8:	0001883a 	nop
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
    b0fc:	e0bfffc3 	ldbu	r2,-1(fp)
    b100:	10800058 	cmpnei	r2,r2,1
    b104:	1000011e 	bne	r2,zero,b10c <OSTaskSuspend+0x1d0>
        OS_Sched();                                             /* Find new highest priority task      */
    b108:	00057e40 	call	57e4 <OS_Sched>
    }
    return (OS_ERR_NONE);
    b10c:	0005883a 	mov	r2,zero
}
    b110:	e037883a 	mov	sp,fp
    b114:	dfc00117 	ldw	ra,4(sp)
    b118:	df000017 	ldw	fp,0(sp)
    b11c:	dec00204 	addi	sp,sp,8
    b120:	f800283a 	ret

0000b124 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
    b124:	defff604 	addi	sp,sp,-40
    b128:	dfc00915 	stw	ra,36(sp)
    b12c:	df000815 	stw	fp,32(sp)
    b130:	df000804 	addi	fp,sp,32
    b134:	2005883a 	mov	r2,r4
    b138:	e17ff815 	stw	r5,-32(fp)
    b13c:	e0bff905 	stb	r2,-28(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    b140:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
    b144:	e0bff903 	ldbu	r2,-28(fp)
    b148:	10800570 	cmpltui	r2,r2,21
    b14c:	1000051e 	bne	r2,zero,b164 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
    b150:	e0bff903 	ldbu	r2,-28(fp)
    b154:	10803fe0 	cmpeqi	r2,r2,255
    b158:	1000021e 	bne	r2,zero,b164 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
    b15c:	00800a84 	movi	r2,42
    b160:	00003506 	br	b238 <OSTaskQuery+0x114>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
    b164:	e0bff817 	ldw	r2,-32(fp)
    b168:	1000021e 	bne	r2,zero,b174 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
    b16c:	00800244 	movi	r2,9
    b170:	00003106 	br	b238 <OSTaskQuery+0x114>
  NIOS2_READ_STATUS (context);
    b174:	0005303a 	rdctl	r2,status
    b178:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b17c:	e0fffd17 	ldw	r3,-12(fp)
    b180:	00bfff84 	movi	r2,-2
    b184:	1884703a 	and	r2,r3,r2
    b188:	1001703a 	wrctl	status,r2
  return context;
    b18c:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    b190:	e0bfff15 	stw	r2,-4(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
    b194:	e0bff903 	ldbu	r2,-28(fp)
    b198:	10803fd8 	cmpnei	r2,r2,255
    b19c:	1000031e 	bne	r2,zero,b1ac <OSTaskQuery+0x88>
        prio = OSTCBCur->OSTCBPrio;
    b1a0:	d0a7c317 	ldw	r2,-24820(gp)
    b1a4:	10800c83 	ldbu	r2,50(r2)
    b1a8:	e0bff905 	stb	r2,-28(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    b1ac:	e0bff903 	ldbu	r2,-28(fp)
    b1b0:	100690ba 	slli	r3,r2,2
    b1b4:	008000b4 	movhi	r2,2
    b1b8:	1885883a 	add	r2,r3,r2
    b1bc:	10a4ad17 	ldw	r2,-27980(r2)
    b1c0:	e0bffe15 	stw	r2,-8(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
    b1c4:	e0bffe17 	ldw	r2,-8(fp)
    b1c8:	1000071e 	bne	r2,zero,b1e8 <OSTaskQuery+0xc4>
    b1cc:	e0bfff17 	ldw	r2,-4(fp)
    b1d0:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    b1d4:	e0bffc17 	ldw	r2,-16(fp)
    b1d8:	1001703a 	wrctl	status,r2
}
    b1dc:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
    b1e0:	00800a44 	movi	r2,41
    b1e4:	00001406 	br	b238 <OSTaskQuery+0x114>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
    b1e8:	e0bffe17 	ldw	r2,-8(fp)
    b1ec:	10800058 	cmpnei	r2,r2,1
    b1f0:	1000071e 	bne	r2,zero,b210 <OSTaskQuery+0xec>
    b1f4:	e0bfff17 	ldw	r2,-4(fp)
    b1f8:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    b1fc:	e0bffb17 	ldw	r2,-20(fp)
    b200:	1001703a 	wrctl	status,r2
}
    b204:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    b208:	008010c4 	movi	r2,67
    b20c:	00000a06 	br	b238 <OSTaskQuery+0x114>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
    b210:	01801b04 	movi	r6,108
    b214:	e17ffe17 	ldw	r5,-8(fp)
    b218:	e13ff817 	ldw	r4,-32(fp)
    b21c:	00057780 	call	5778 <OS_MemCopy>
    b220:	e0bfff17 	ldw	r2,-4(fp)
    b224:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
    b228:	e0bffa17 	ldw	r2,-24(fp)
    b22c:	1001703a 	wrctl	status,r2
}
    b230:	0001883a 	nop
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    b234:	0005883a 	mov	r2,zero
}
    b238:	e037883a 	mov	sp,fp
    b23c:	dfc00117 	ldw	ra,4(sp)
    b240:	df000017 	ldw	fp,0(sp)
    b244:	dec00204 	addi	sp,sp,8
    b248:	f800283a 	ret

0000b24c <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    b24c:	defffc04 	addi	sp,sp,-16
    b250:	df000315 	stw	fp,12(sp)
    b254:	df000304 	addi	fp,sp,12
    b258:	e13fff15 	stw	r4,-4(fp)
    b25c:	e17ffe15 	stw	r5,-8(fp)
    b260:	3005883a 	mov	r2,r6
    b264:	e0bffd0d 	sth	r2,-12(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
    b268:	e0bffd0b 	ldhu	r2,-12(fp)
    b26c:	1080004c 	andi	r2,r2,1
    b270:	10000d26 	beq	r2,zero,b2a8 <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
    b274:	e0bffd0b 	ldhu	r2,-12(fp)
    b278:	1080008c 	andi	r2,r2,2
    b27c:	10000a26 	beq	r2,zero,b2a8 <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
    b280:	00000706 	br	b2a0 <OS_TaskStkClr+0x54>
                size--;
    b284:	e0bffe17 	ldw	r2,-8(fp)
    b288:	10bfffc4 	addi	r2,r2,-1
    b28c:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
    b290:	e0bfff17 	ldw	r2,-4(fp)
    b294:	10c00104 	addi	r3,r2,4
    b298:	e0ffff15 	stw	r3,-4(fp)
    b29c:	10000015 	stw	zero,0(r2)
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
    b2a0:	e0bffe17 	ldw	r2,-8(fp)
    b2a4:	103ff71e 	bne	r2,zero,b284 <OS_TaskStkClr+0x38>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
    b2a8:	0001883a 	nop
    b2ac:	e037883a 	mov	sp,fp
    b2b0:	df000017 	ldw	fp,0(sp)
    b2b4:	dec00104 	addi	sp,sp,4
    b2b8:	f800283a 	ret

0000b2bc <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
    b2bc:	defff904 	addi	sp,sp,-28
    b2c0:	dfc00615 	stw	ra,24(sp)
    b2c4:	df000515 	stw	fp,20(sp)
    b2c8:	df000504 	addi	fp,sp,20
    b2cc:	2005883a 	mov	r2,r4
    b2d0:	e0bffb0d 	sth	r2,-20(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    b2d4:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    b2d8:	d0a7bf43 	ldbu	r2,-24835(gp)
    b2dc:	10803fcc 	andi	r2,r2,255
    b2e0:	1000321e 	bne	r2,zero,b3ac <OSTimeDly+0xf0>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
    b2e4:	e0bffb0b 	ldhu	r2,-20(fp)
    b2e8:	10003126 	beq	r2,zero,b3b0 <OSTimeDly+0xf4>
  NIOS2_READ_STATUS (context);
    b2ec:	0005303a 	rdctl	r2,status
    b2f0:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b2f4:	e0fffd17 	ldw	r3,-12(fp)
    b2f8:	00bfff84 	movi	r2,-2
    b2fc:	1884703a 	and	r2,r3,r2
    b300:	1001703a 	wrctl	status,r2
  return context;
    b304:	e0bffd17 	ldw	r2,-12(fp)
        OS_ENTER_CRITICAL();
    b308:	e0bfff15 	stw	r2,-4(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
    b30c:	d0a7c317 	ldw	r2,-24820(gp)
    b310:	10800d03 	ldbu	r2,52(r2)
    b314:	e0bffec5 	stb	r2,-5(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
    b318:	e0fffec3 	ldbu	r3,-5(fp)
    b31c:	d0a7c084 	addi	r2,gp,-24830
    b320:	1885883a 	add	r2,r3,r2
    b324:	10800003 	ldbu	r2,0(r2)
    b328:	1007883a 	mov	r3,r2
    b32c:	d0a7c317 	ldw	r2,-24820(gp)
    b330:	10800d43 	ldbu	r2,53(r2)
    b334:	0084303a 	nor	r2,zero,r2
    b338:	1884703a 	and	r2,r3,r2
    b33c:	e0fffec3 	ldbu	r3,-5(fp)
    b340:	1009883a 	mov	r4,r2
    b344:	d0a7c084 	addi	r2,gp,-24830
    b348:	1885883a 	add	r2,r3,r2
    b34c:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
    b350:	e0fffec3 	ldbu	r3,-5(fp)
    b354:	d0a7c084 	addi	r2,gp,-24830
    b358:	1885883a 	add	r2,r3,r2
    b35c:	10800003 	ldbu	r2,0(r2)
    b360:	10803fcc 	andi	r2,r2,255
    b364:	1000071e 	bne	r2,zero,b384 <OSTimeDly+0xc8>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
    b368:	d0a7c317 	ldw	r2,-24820(gp)
    b36c:	10800d83 	ldbu	r2,54(r2)
    b370:	0084303a 	nor	r2,zero,r2
    b374:	1007883a 	mov	r3,r2
    b378:	d0a7c043 	ldbu	r2,-24831(gp)
    b37c:	1884703a 	and	r2,r3,r2
    b380:	d0a7c045 	stb	r2,-24831(gp)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
    b384:	d0a7c317 	ldw	r2,-24820(gp)
    b388:	e0fffb0b 	ldhu	r3,-20(fp)
    b38c:	10c00b8d 	sth	r3,46(r2)
    b390:	e0bfff17 	ldw	r2,-4(fp)
    b394:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    b398:	e0bffc17 	ldw	r2,-16(fp)
    b39c:	1001703a 	wrctl	status,r2
}
    b3a0:	0001883a 	nop
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    b3a4:	00057e40 	call	57e4 <OS_Sched>
    b3a8:	00000106 	br	b3b0 <OSTimeDly+0xf4>
        return;
    b3ac:	0001883a 	nop
    }
}
    b3b0:	e037883a 	mov	sp,fp
    b3b4:	dfc00117 	ldw	ra,4(sp)
    b3b8:	df000017 	ldw	fp,0(sp)
    b3bc:	dec00204 	addi	sp,sp,8
    b3c0:	f800283a 	ret

0000b3c4 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
    b3c4:	defff804 	addi	sp,sp,-32
    b3c8:	dfc00715 	stw	ra,28(sp)
    b3cc:	df000615 	stw	fp,24(sp)
    b3d0:	df000604 	addi	fp,sp,24
    b3d4:	2005883a 	mov	r2,r4
    b3d8:	3009883a 	mov	r4,r6
    b3dc:	3807883a 	mov	r3,r7
    b3e0:	e0bffd05 	stb	r2,-12(fp)
    b3e4:	2805883a 	mov	r2,r5
    b3e8:	e0bffc05 	stb	r2,-16(fp)
    b3ec:	2005883a 	mov	r2,r4
    b3f0:	e0bffb05 	stb	r2,-20(fp)
    b3f4:	1805883a 	mov	r2,r3
    b3f8:	e0bffa0d 	sth	r2,-24(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    b3fc:	d0a7bf43 	ldbu	r2,-24835(gp)
    b400:	10803fcc 	andi	r2,r2,255
    b404:	10000226 	beq	r2,zero,b410 <OSTimeDlyHMSM+0x4c>
        return (OS_ERR_TIME_DLY_ISR);
    b408:	00801544 	movi	r2,85
    b40c:	00003d06 	br	b504 <OSTimeDlyHMSM+0x140>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
    b410:	e0bffd03 	ldbu	r2,-12(fp)
    b414:	1000081e 	bne	r2,zero,b438 <OSTimeDlyHMSM+0x74>
        if (minutes == 0) {
    b418:	e0bffc03 	ldbu	r2,-16(fp)
    b41c:	1000061e 	bne	r2,zero,b438 <OSTimeDlyHMSM+0x74>
            if (seconds == 0) {
    b420:	e0bffb03 	ldbu	r2,-20(fp)
    b424:	1000041e 	bne	r2,zero,b438 <OSTimeDlyHMSM+0x74>
                if (ms == 0) {
    b428:	e0bffa0b 	ldhu	r2,-24(fp)
    b42c:	1000021e 	bne	r2,zero,b438 <OSTimeDlyHMSM+0x74>
                    return (OS_ERR_TIME_ZERO_DLY);
    b430:	00801504 	movi	r2,84
    b434:	00003306 	br	b504 <OSTimeDlyHMSM+0x140>
                }
            }
        }
    }
    if (minutes > 59) {
    b438:	e0bffc03 	ldbu	r2,-16(fp)
    b43c:	10800f30 	cmpltui	r2,r2,60
    b440:	1000021e 	bne	r2,zero,b44c <OSTimeDlyHMSM+0x88>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
    b444:	00801444 	movi	r2,81
    b448:	00002e06 	br	b504 <OSTimeDlyHMSM+0x140>
    }
    if (seconds > 59) {
    b44c:	e0bffb03 	ldbu	r2,-20(fp)
    b450:	10800f30 	cmpltui	r2,r2,60
    b454:	1000021e 	bne	r2,zero,b460 <OSTimeDlyHMSM+0x9c>
        return (OS_ERR_TIME_INVALID_SECONDS);
    b458:	00801484 	movi	r2,82
    b45c:	00002906 	br	b504 <OSTimeDlyHMSM+0x140>
    }
    if (ms > 999) {
    b460:	e0bffa0b 	ldhu	r2,-24(fp)
    b464:	1080fa30 	cmpltui	r2,r2,1000
    b468:	1000021e 	bne	r2,zero,b474 <OSTimeDlyHMSM+0xb0>
        return (OS_ERR_TIME_INVALID_MS);
    b46c:	008014c4 	movi	r2,83
    b470:	00002406 	br	b504 <OSTimeDlyHMSM+0x140>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
    b474:	e0bffd03 	ldbu	r2,-12(fp)
    b478:	10c38424 	muli	r3,r2,3600
    b47c:	e0bffc03 	ldbu	r2,-16(fp)
    b480:	10800f24 	muli	r2,r2,60
    b484:	1887883a 	add	r3,r3,r2
    b488:	e0bffb03 	ldbu	r2,-20(fp)
    b48c:	1885883a 	add	r2,r3,r2
    b490:	100690fa 	slli	r3,r2,3
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    b494:	e0bffa0b 	ldhu	r2,-24(fp)
    b498:	10800f84 	addi	r2,r2,62
    b49c:	100890fa 	slli	r4,r2,3
    b4a0:	0080fa04 	movi	r2,1000
    b4a4:	2085203a 	divu	r2,r4,r2
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
    b4a8:	1885883a 	add	r2,r3,r2
    b4ac:	e0bffe15 	stw	r2,-8(fp)
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    b4b0:	e0bffe17 	ldw	r2,-8(fp)
    b4b4:	1004d43a 	srli	r2,r2,16
    b4b8:	e0bfff8d 	sth	r2,-2(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    b4bc:	e0bffe17 	ldw	r2,-8(fp)
    b4c0:	10bfffcc 	andi	r2,r2,65535
    b4c4:	e0bffe15 	stw	r2,-8(fp)
    OSTimeDly((INT16U)ticks);
    b4c8:	e0bffe17 	ldw	r2,-8(fp)
    b4cc:	10bfffcc 	andi	r2,r2,65535
    b4d0:	1009883a 	mov	r4,r2
    b4d4:	000b2bc0 	call	b2bc <OSTimeDly>
    while (loops > 0) {
    b4d8:	00000706 	br	b4f8 <OSTimeDlyHMSM+0x134>
        OSTimeDly((INT16U)32768u);
    b4dc:	01200014 	movui	r4,32768
    b4e0:	000b2bc0 	call	b2bc <OSTimeDly>
        OSTimeDly((INT16U)32768u);
    b4e4:	01200014 	movui	r4,32768
    b4e8:	000b2bc0 	call	b2bc <OSTimeDly>
        loops--;
    b4ec:	e0bfff8b 	ldhu	r2,-2(fp)
    b4f0:	10bfffc4 	addi	r2,r2,-1
    b4f4:	e0bfff8d 	sth	r2,-2(fp)
    while (loops > 0) {
    b4f8:	e0bfff8b 	ldhu	r2,-2(fp)
    b4fc:	103ff71e 	bne	r2,zero,b4dc <OSTimeDlyHMSM+0x118>
    }
    return (OS_ERR_NONE);
    b500:	0005883a 	mov	r2,zero
}
    b504:	e037883a 	mov	sp,fp
    b508:	dfc00117 	ldw	ra,4(sp)
    b50c:	df000017 	ldw	fp,0(sp)
    b510:	dec00204 	addi	sp,sp,8
    b514:	f800283a 	ret

0000b518 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
    b518:	defff504 	addi	sp,sp,-44
    b51c:	dfc00a15 	stw	ra,40(sp)
    b520:	df000915 	stw	fp,36(sp)
    b524:	df000904 	addi	fp,sp,36
    b528:	2005883a 	mov	r2,r4
    b52c:	e0bff705 	stb	r2,-36(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    b530:	e03fff15 	stw	zero,-4(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
    b534:	e0bff703 	ldbu	r2,-36(fp)
    b538:	10800530 	cmpltui	r2,r2,20
    b53c:	1000021e 	bne	r2,zero,b548 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
    b540:	00800a84 	movi	r2,42
    b544:	00006706 	br	b6e4 <OSTimeDlyResume+0x1cc>
  NIOS2_READ_STATUS (context);
    b548:	0005303a 	rdctl	r2,status
    b54c:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b550:	e0fffd17 	ldw	r3,-12(fp)
    b554:	00bfff84 	movi	r2,-2
    b558:	1884703a 	and	r2,r3,r2
    b55c:	1001703a 	wrctl	status,r2
  return context;
    b560:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    b564:	e0bfff15 	stw	r2,-4(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
    b568:	e0bff703 	ldbu	r2,-36(fp)
    b56c:	100690ba 	slli	r3,r2,2
    b570:	008000b4 	movhi	r2,2
    b574:	1885883a 	add	r2,r3,r2
    b578:	10a4ad17 	ldw	r2,-27980(r2)
    b57c:	e0bffe15 	stw	r2,-8(fp)
    if (ptcb == (OS_TCB *)0) {
    b580:	e0bffe17 	ldw	r2,-8(fp)
    b584:	1000071e 	bne	r2,zero,b5a4 <OSTimeDlyResume+0x8c>
    b588:	e0bfff17 	ldw	r2,-4(fp)
    b58c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    b590:	e0bffc17 	ldw	r2,-16(fp)
    b594:	1001703a 	wrctl	status,r2
}
    b598:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
    b59c:	008010c4 	movi	r2,67
    b5a0:	00005006 	br	b6e4 <OSTimeDlyResume+0x1cc>
    }
    if (ptcb == OS_TCB_RESERVED) {
    b5a4:	e0bffe17 	ldw	r2,-8(fp)
    b5a8:	10800058 	cmpnei	r2,r2,1
    b5ac:	1000071e 	bne	r2,zero,b5cc <OSTimeDlyResume+0xb4>
    b5b0:	e0bfff17 	ldw	r2,-4(fp)
    b5b4:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    b5b8:	e0bffb17 	ldw	r2,-20(fp)
    b5bc:	1001703a 	wrctl	status,r2
}
    b5c0:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
    b5c4:	008010c4 	movi	r2,67
    b5c8:	00004606 	br	b6e4 <OSTimeDlyResume+0x1cc>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
    b5cc:	e0bffe17 	ldw	r2,-8(fp)
    b5d0:	10800b8b 	ldhu	r2,46(r2)
    b5d4:	10bfffcc 	andi	r2,r2,65535
    b5d8:	1000071e 	bne	r2,zero,b5f8 <OSTimeDlyResume+0xe0>
    b5dc:	e0bfff17 	ldw	r2,-4(fp)
    b5e0:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
    b5e4:	e0bffa17 	ldw	r2,-24(fp)
    b5e8:	1001703a 	wrctl	status,r2
}
    b5ec:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
    b5f0:	00801404 	movi	r2,80
    b5f4:	00003b06 	br	b6e4 <OSTimeDlyResume+0x1cc>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
    b5f8:	e0bffe17 	ldw	r2,-8(fp)
    b5fc:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
    b600:	e0bffe17 	ldw	r2,-8(fp)
    b604:	10800c03 	ldbu	r2,48(r2)
    b608:	10803fcc 	andi	r2,r2,255
    b60c:	10800dcc 	andi	r2,r2,55
    b610:	10000b26 	beq	r2,zero,b640 <OSTimeDlyResume+0x128>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
    b614:	e0bffe17 	ldw	r2,-8(fp)
    b618:	10c00c03 	ldbu	r3,48(r2)
    b61c:	00bff204 	movi	r2,-56
    b620:	1884703a 	and	r2,r3,r2
    b624:	1007883a 	mov	r3,r2
    b628:	e0bffe17 	ldw	r2,-8(fp)
    b62c:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
    b630:	e0bffe17 	ldw	r2,-8(fp)
    b634:	00c00044 	movi	r3,1
    b638:	10c00c45 	stb	r3,49(r2)
    b63c:	00000206 	br	b648 <OSTimeDlyResume+0x130>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
    b640:	e0bffe17 	ldw	r2,-8(fp)
    b644:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
    b648:	e0bffe17 	ldw	r2,-8(fp)
    b64c:	10800c03 	ldbu	r2,48(r2)
    b650:	10803fcc 	andi	r2,r2,255
    b654:	1080020c 	andi	r2,r2,8
    b658:	10001c1e 	bne	r2,zero,b6cc <OSTimeDlyResume+0x1b4>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
    b65c:	e0bffe17 	ldw	r2,-8(fp)
    b660:	10c00d83 	ldbu	r3,54(r2)
    b664:	d0a7c043 	ldbu	r2,-24831(gp)
    b668:	1884b03a 	or	r2,r3,r2
    b66c:	d0a7c045 	stb	r2,-24831(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    b670:	e0bffe17 	ldw	r2,-8(fp)
    b674:	10800d03 	ldbu	r2,52(r2)
    b678:	10c03fcc 	andi	r3,r2,255
    b67c:	d0a7c084 	addi	r2,gp,-24830
    b680:	1885883a 	add	r2,r3,r2
    b684:	11000003 	ldbu	r4,0(r2)
    b688:	e0bffe17 	ldw	r2,-8(fp)
    b68c:	10800d43 	ldbu	r2,53(r2)
    b690:	e0fffe17 	ldw	r3,-8(fp)
    b694:	18c00d03 	ldbu	r3,52(r3)
    b698:	18c03fcc 	andi	r3,r3,255
    b69c:	2084b03a 	or	r2,r4,r2
    b6a0:	1009883a 	mov	r4,r2
    b6a4:	d0a7c084 	addi	r2,gp,-24830
    b6a8:	1885883a 	add	r2,r3,r2
    b6ac:	11000005 	stb	r4,0(r2)
    b6b0:	e0bfff17 	ldw	r2,-4(fp)
    b6b4:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
    b6b8:	e0bff917 	ldw	r2,-28(fp)
    b6bc:	1001703a 	wrctl	status,r2
}
    b6c0:	0001883a 	nop
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
    b6c4:	00057e40 	call	57e4 <OS_Sched>
    b6c8:	00000506 	br	b6e0 <OSTimeDlyResume+0x1c8>
    b6cc:	e0bfff17 	ldw	r2,-4(fp)
    b6d0:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
    b6d4:	e0bff817 	ldw	r2,-32(fp)
    b6d8:	1001703a 	wrctl	status,r2
}
    b6dc:	0001883a 	nop
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
    b6e0:	0005883a 	mov	r2,zero
}
    b6e4:	e037883a 	mov	sp,fp
    b6e8:	dfc00117 	ldw	ra,4(sp)
    b6ec:	df000017 	ldw	fp,0(sp)
    b6f0:	dec00204 	addi	sp,sp,8
    b6f4:	f800283a 	ret

0000b6f8 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
    b6f8:	defffb04 	addi	sp,sp,-20
    b6fc:	df000415 	stw	fp,16(sp)
    b700:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    b704:	e03fff15 	stw	zero,-4(fp)
  NIOS2_READ_STATUS (context);
    b708:	0005303a 	rdctl	r2,status
    b70c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b710:	e0fffc17 	ldw	r3,-16(fp)
    b714:	00bfff84 	movi	r2,-2
    b718:	1884703a 	and	r2,r3,r2
    b71c:	1001703a 	wrctl	status,r2
  return context;
    b720:	e0bffc17 	ldw	r2,-16(fp)
#endif



    OS_ENTER_CRITICAL();
    b724:	e0bfff15 	stw	r2,-4(fp)
    ticks = OSTime;
    b728:	d0a7ca17 	ldw	r2,-24792(gp)
    b72c:	e0bffe15 	stw	r2,-8(fp)
    b730:	e0bfff17 	ldw	r2,-4(fp)
    b734:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
    b738:	e0bffd17 	ldw	r2,-12(fp)
    b73c:	1001703a 	wrctl	status,r2
}
    b740:	0001883a 	nop
    OS_EXIT_CRITICAL();
    return (ticks);
    b744:	e0bffe17 	ldw	r2,-8(fp)
}
    b748:	e037883a 	mov	sp,fp
    b74c:	df000017 	ldw	fp,0(sp)
    b750:	dec00104 	addi	sp,sp,4
    b754:	f800283a 	ret

0000b758 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
    b758:	defffb04 	addi	sp,sp,-20
    b75c:	df000415 	stw	fp,16(sp)
    b760:	df000404 	addi	fp,sp,16
    b764:	e13ffc15 	stw	r4,-16(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    b768:	e03fff15 	stw	zero,-4(fp)
  NIOS2_READ_STATUS (context);
    b76c:	0005303a 	rdctl	r2,status
    b770:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b774:	e0fffd17 	ldw	r3,-12(fp)
    b778:	00bfff84 	movi	r2,-2
    b77c:	1884703a 	and	r2,r3,r2
    b780:	1001703a 	wrctl	status,r2
  return context;
    b784:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
    b788:	e0bfff15 	stw	r2,-4(fp)
    OSTime = ticks;
    b78c:	e0bffc17 	ldw	r2,-16(fp)
    b790:	d0a7ca15 	stw	r2,-24792(gp)
    b794:	e0bfff17 	ldw	r2,-4(fp)
    b798:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
    b79c:	e0bffe17 	ldw	r2,-8(fp)
    b7a0:	1001703a 	wrctl	status,r2
}
    b7a4:	0001883a 	nop
    OS_EXIT_CRITICAL();
}
    b7a8:	0001883a 	nop
    b7ac:	e037883a 	mov	sp,fp
    b7b0:	df000017 	ldw	fp,0(sp)
    b7b4:	dec00104 	addi	sp,sp,4
    b7b8:	f800283a 	ret

0000b7bc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    b7bc:	defffd04 	addi	sp,sp,-12
    b7c0:	dfc00215 	stw	ra,8(sp)
    b7c4:	df000115 	stw	fp,4(sp)
    b7c8:	df000104 	addi	fp,sp,4
    b7cc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    b7d0:	d1600604 	addi	r5,gp,-32744
    b7d4:	e13fff17 	ldw	r4,-4(fp)
    b7d8:	000e2b00 	call	e2b0 <alt_dev_llist_insert>
}
    b7dc:	e037883a 	mov	sp,fp
    b7e0:	dfc00117 	ldw	ra,4(sp)
    b7e4:	df000017 	ldw	fp,0(sp)
    b7e8:	dec00204 	addi	sp,sp,8
    b7ec:	f800283a 	ret

0000b7f0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    b7f0:	defffd04 	addi	sp,sp,-12
    b7f4:	dfc00215 	stw	ra,8(sp)
    b7f8:	df000115 	stw	fp,4(sp)
    b7fc:	df000104 	addi	fp,sp,4
    b800:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, Nios2);
    b804:	000eb840 	call	eb84 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    b808:	00800044 	movi	r2,1
    b80c:	1001703a 	wrctl	status,r2
}
    b810:	0001883a 	nop
    alt_irq_cpu_enable_interrupts();
}
    b814:	0001883a 	nop
    b818:	e037883a 	mov	sp,fp
    b81c:	dfc00117 	ldw	ra,4(sp)
    b820:	df000017 	ldw	fp,0(sp)
    b824:	dec00204 	addi	sp,sp,8
    b828:	f800283a 	ret

0000b82c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    b82c:	defffb04 	addi	sp,sp,-20
    b830:	dfc00415 	stw	ra,16(sp)
    b834:	df000315 	stw	fp,12(sp)
    b838:	df000304 	addi	fp,sp,12
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
    b83c:	01c00204 	movi	r7,8
    b840:	000d883a 	mov	r6,zero
    b844:	000b883a 	mov	r5,zero
    b848:	013fc834 	movhi	r4,65312
    b84c:	21080004 	addi	r4,r4,8192
    b850:	000cdd80 	call	cdd8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER_2, Interval_Timer_2);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
    b854:	01800204 	movi	r6,8
    b858:	000b883a 	mov	r5,zero
    b85c:	01000074 	movhi	r4,1
    b860:	21005404 	addi	r4,r4,336
    b864:	000c1640 	call	c164 <altera_avalon_jtag_uart_init>
    b868:	01000074 	movhi	r4,1
    b86c:	21004a04 	addi	r4,r4,296
    b870:	000b7bc0 	call	b7bc <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, SysID);
    b874:	0001883a 	nop
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, AV_Config);
    b878:	01000074 	movhi	r4,1
    b87c:	21046504 	addi	r4,r4,4500
    b880:	000b7bc0 	call	b7bc <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_SUBSYSTEM_AUDIO, Audio_Subsystem_Audio);
    b884:	01000074 	movhi	r4,1
    b888:	21047104 	addi	r4,r4,4548
    b88c:	000b7bc0 	call	b7bc <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHAR_LCD_16X2, Char_LCD_16x2);
    b890:	01000074 	movhi	r4,1
    b894:	21047d04 	addi	r4,r4,4596
    b898:	000cf080 	call	cf08 <alt_up_character_lcd_init>
    b89c:	01000074 	movhi	r4,1
    b8a0:	21047d04 	addi	r4,r4,4596
    b8a4:	000b7bc0 	call	b7bc <alt_dev_reg>
    ALTERA_UP_AVALON_IRDA_INIT ( IRDA, IrDA);
    b8a8:	01000074 	movhi	r4,1
    b8ac:	21048804 	addi	r4,r4,4640
    b8b0:	000b7bc0 	call	b7bc <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT, PS2_Port);
    b8b4:	01000074 	movhi	r4,1
    b8b8:	21049304 	addi	r4,r4,4684
    b8bc:	000d8040 	call	d804 <alt_up_ps2_init>
    b8c0:	01000074 	movhi	r4,1
    b8c4:	21049304 	addi	r4,r4,4684
    b8c8:	000b7bc0 	call	b7bc <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT_DUAL, PS2_Port_Dual);
    b8cc:	01000074 	movhi	r4,1
    b8d0:	2104a104 	addi	r4,r4,4740
    b8d4:	000d8040 	call	d804 <alt_up_ps2_init>
    b8d8:	01000074 	movhi	r4,1
    b8dc:	2104a104 	addi	r4,r4,4740
    b8e0:	000b7bc0 	call	b7bc <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
    b8e4:	01000074 	movhi	r4,1
    b8e8:	2104af04 	addi	r4,r4,4796
    b8ec:	000b7bc0 	call	b7bc <alt_dev_reg>
    ALTERA_UP_AVALON_USB_INIT ( USB, USB);
    b8f0:	01000074 	movhi	r4,1
    b8f4:	2104ba04 	addi	r4,r4,4840
    b8f8:	000b7bc0 	call	b7bc <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_DMA_CONTROLLER_INIT ( VGA_SUBSYSTEM_CHAR_BUF_SUBSYSTEM_CHAR_BUF_DMA, VGA_Subsystem_Char_Buf_Subsystem_Char_Buf_DMA);
    b8fc:	00800074 	movhi	r2,1
    b900:	1084d117 	ldw	r2,4932(r2)
    b904:	10800017 	ldw	r2,0(r2)
    b908:	1007883a 	mov	r3,r2
    b90c:	00800074 	movhi	r2,1
    b910:	10c4d215 	stw	r3,4936(r2)
    b914:	00800074 	movhi	r2,1
    b918:	1084d117 	ldw	r2,4932(r2)
    b91c:	10800104 	addi	r2,r2,4
    b920:	10800017 	ldw	r2,0(r2)
    b924:	1007883a 	mov	r3,r2
    b928:	00800074 	movhi	r2,1
    b92c:	10c4d315 	stw	r3,4940(r2)
    b930:	00800074 	movhi	r2,1
    b934:	1084d117 	ldw	r2,4932(r2)
    b938:	10800204 	addi	r2,r2,8
    b93c:	10800017 	ldw	r2,0(r2)
    b940:	10ffffcc 	andi	r3,r2,65535
    b944:	00800074 	movhi	r2,1
    b948:	10c4d815 	stw	r3,4960(r2)
    b94c:	00800074 	movhi	r2,1
    b950:	1084d117 	ldw	r2,4932(r2)
    b954:	10800204 	addi	r2,r2,8
    b958:	10800017 	ldw	r2,0(r2)
    b95c:	1006d43a 	srli	r3,r2,16
    b960:	00800074 	movhi	r2,1
    b964:	10c4d915 	stw	r3,4964(r2)
    b968:	00800074 	movhi	r2,1
    b96c:	1084d117 	ldw	r2,4932(r2)
    b970:	10800304 	addi	r2,r2,12
    b974:	10800017 	ldw	r2,0(r2)
    b978:	1005d07a 	srai	r2,r2,1
    b97c:	10c0004c 	andi	r3,r2,1
    b980:	00800074 	movhi	r2,1
    b984:	10c4d415 	stw	r3,4944(r2)
    b988:	00800074 	movhi	r2,1
    b98c:	1084d117 	ldw	r2,4932(r2)
    b990:	10800304 	addi	r2,r2,12
    b994:	10800017 	ldw	r2,0(r2)
    b998:	1005d23a 	srai	r2,r2,8
    b99c:	108003cc 	andi	r2,r2,15
    b9a0:	10800044 	addi	r2,r2,1
    b9a4:	1007883a 	mov	r3,r2
    b9a8:	00800074 	movhi	r2,1
    b9ac:	10c4d515 	stw	r3,4948(r2)
    b9b0:	00800074 	movhi	r2,1
    b9b4:	1084d117 	ldw	r2,4932(r2)
    b9b8:	10800304 	addi	r2,r2,12
    b9bc:	10800017 	ldw	r2,0(r2)
    b9c0:	1005d1ba 	srai	r2,r2,6
    b9c4:	108000cc 	andi	r2,r2,3
    b9c8:	10800044 	addi	r2,r2,1
    b9cc:	1007883a 	mov	r3,r2
    b9d0:	00800074 	movhi	r2,1
    b9d4:	10c4d615 	stw	r3,4952(r2)
    b9d8:	00800074 	movhi	r2,1
    b9dc:	1084d517 	ldw	r2,4948(r2)
    b9e0:	1007883a 	mov	r3,r2
    b9e4:	00800074 	movhi	r2,1
    b9e8:	1084d617 	ldw	r2,4952(r2)
    b9ec:	1885383a 	mul	r2,r3,r2
    b9f0:	e0bfffc5 	stb	r2,-1(fp)
    b9f4:	e0bfffc3 	ldbu	r2,-1(fp)
    b9f8:	10800268 	cmpgeui	r2,r2,9
    b9fc:	1000041e 	bne	r2,zero,ba10 <alt_sys_init+0x1e4>
    ba00:	00c00044 	movi	r3,1
    ba04:	00800074 	movhi	r2,1
    ba08:	10c4d715 	stw	r3,4956(r2)
    ba0c:	00000a06 	br	ba38 <alt_sys_init+0x20c>
    ba10:	e0bfffc3 	ldbu	r2,-1(fp)
    ba14:	10800468 	cmpgeui	r2,r2,17
    ba18:	1000041e 	bne	r2,zero,ba2c <alt_sys_init+0x200>
    ba1c:	00c00084 	movi	r3,2
    ba20:	00800074 	movhi	r2,1
    ba24:	10c4d715 	stw	r3,4956(r2)
    ba28:	00000306 	br	ba38 <alt_sys_init+0x20c>
    ba2c:	00c00104 	movi	r3,4
    ba30:	00800074 	movhi	r2,1
    ba34:	10c4d715 	stw	r3,4956(r2)
    ba38:	00800074 	movhi	r2,1
    ba3c:	1084d117 	ldw	r2,4932(r2)
    ba40:	10800304 	addi	r2,r2,12
    ba44:	10800017 	ldw	r2,0(r2)
    ba48:	1005d43a 	srai	r2,r2,16
    ba4c:	e0bfff85 	stb	r2,-2(fp)
    ba50:	00800074 	movhi	r2,1
    ba54:	1084d117 	ldw	r2,4932(r2)
    ba58:	10800304 	addi	r2,r2,12
    ba5c:	10800017 	ldw	r2,0(r2)
    ba60:	1004d63a 	srli	r2,r2,24
    ba64:	e0bfff45 	stb	r2,-3(fp)
    ba68:	00800074 	movhi	r2,1
    ba6c:	1084d717 	ldw	r2,4956(r2)
    ba70:	10800058 	cmpnei	r2,r2,1
    ba74:	1000031e 	bne	r2,zero,ba84 <alt_sys_init+0x258>
    ba78:	00800074 	movhi	r2,1
    ba7c:	1004da15 	stw	zero,4968(r2)
    ba80:	00000b06 	br	bab0 <alt_sys_init+0x284>
    ba84:	00800074 	movhi	r2,1
    ba88:	1084d717 	ldw	r2,4956(r2)
    ba8c:	10800098 	cmpnei	r2,r2,2
    ba90:	1000041e 	bne	r2,zero,baa4 <alt_sys_init+0x278>
    ba94:	00c00044 	movi	r3,1
    ba98:	00800074 	movhi	r2,1
    ba9c:	10c4da15 	stw	r3,4968(r2)
    baa0:	00000306 	br	bab0 <alt_sys_init+0x284>
    baa4:	00c00084 	movi	r3,2
    baa8:	00800074 	movhi	r2,1
    baac:	10c4da15 	stw	r3,4968(r2)
    bab0:	e0bfff83 	ldbu	r2,-2(fp)
    bab4:	00c00804 	movi	r3,32
    bab8:	1885c83a 	sub	r2,r3,r2
    babc:	00ffffc4 	movi	r3,-1
    bac0:	1886d83a 	srl	r3,r3,r2
    bac4:	00800074 	movhi	r2,1
    bac8:	10c4db15 	stw	r3,4972(r2)
    bacc:	e0ffff83 	ldbu	r3,-2(fp)
    bad0:	00800074 	movhi	r2,1
    bad4:	1084da17 	ldw	r2,4968(r2)
    bad8:	1887883a 	add	r3,r3,r2
    badc:	00800074 	movhi	r2,1
    bae0:	10c4dc15 	stw	r3,4976(r2)
    bae4:	e0bfff43 	ldbu	r2,-3(fp)
    bae8:	00c00804 	movi	r3,32
    baec:	1885c83a 	sub	r2,r3,r2
    baf0:	00ffffc4 	movi	r3,-1
    baf4:	1886d83a 	srl	r3,r3,r2
    baf8:	00800074 	movhi	r2,1
    bafc:	10c4dd15 	stw	r3,4980(r2)
    bb00:	01000074 	movhi	r4,1
    bb04:	2104c704 	addi	r4,r4,4892
    bb08:	000b7bc0 	call	b7bc <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_DMA_CONTROLLER_INIT ( VGA_SUBSYSTEM_VGA_PIXEL_DMA, VGA_Subsystem_VGA_Pixel_DMA);
    bb0c:	00800074 	movhi	r2,1
    bb10:	1084e817 	ldw	r2,5024(r2)
    bb14:	10800017 	ldw	r2,0(r2)
    bb18:	1007883a 	mov	r3,r2
    bb1c:	00800074 	movhi	r2,1
    bb20:	10c4e915 	stw	r3,5028(r2)
    bb24:	00800074 	movhi	r2,1
    bb28:	1084e817 	ldw	r2,5024(r2)
    bb2c:	10800104 	addi	r2,r2,4
    bb30:	10800017 	ldw	r2,0(r2)
    bb34:	1007883a 	mov	r3,r2
    bb38:	00800074 	movhi	r2,1
    bb3c:	10c4ea15 	stw	r3,5032(r2)
    bb40:	00800074 	movhi	r2,1
    bb44:	1084e817 	ldw	r2,5024(r2)
    bb48:	10800204 	addi	r2,r2,8
    bb4c:	10800017 	ldw	r2,0(r2)
    bb50:	10ffffcc 	andi	r3,r2,65535
    bb54:	00800074 	movhi	r2,1
    bb58:	10c4ef15 	stw	r3,5052(r2)
    bb5c:	00800074 	movhi	r2,1
    bb60:	1084e817 	ldw	r2,5024(r2)
    bb64:	10800204 	addi	r2,r2,8
    bb68:	10800017 	ldw	r2,0(r2)
    bb6c:	1006d43a 	srli	r3,r2,16
    bb70:	00800074 	movhi	r2,1
    bb74:	10c4f015 	stw	r3,5056(r2)
    bb78:	00800074 	movhi	r2,1
    bb7c:	1084e817 	ldw	r2,5024(r2)
    bb80:	10800304 	addi	r2,r2,12
    bb84:	10800017 	ldw	r2,0(r2)
    bb88:	1005d07a 	srai	r2,r2,1
    bb8c:	10c0004c 	andi	r3,r2,1
    bb90:	00800074 	movhi	r2,1
    bb94:	10c4eb15 	stw	r3,5036(r2)
    bb98:	00800074 	movhi	r2,1
    bb9c:	1084e817 	ldw	r2,5024(r2)
    bba0:	10800304 	addi	r2,r2,12
    bba4:	10800017 	ldw	r2,0(r2)
    bba8:	1005d23a 	srai	r2,r2,8
    bbac:	108003cc 	andi	r2,r2,15
    bbb0:	10800044 	addi	r2,r2,1
    bbb4:	1007883a 	mov	r3,r2
    bbb8:	00800074 	movhi	r2,1
    bbbc:	10c4ec15 	stw	r3,5040(r2)
    bbc0:	00800074 	movhi	r2,1
    bbc4:	1084e817 	ldw	r2,5024(r2)
    bbc8:	10800304 	addi	r2,r2,12
    bbcc:	10800017 	ldw	r2,0(r2)
    bbd0:	1005d1ba 	srai	r2,r2,6
    bbd4:	108000cc 	andi	r2,r2,3
    bbd8:	10800044 	addi	r2,r2,1
    bbdc:	1007883a 	mov	r3,r2
    bbe0:	00800074 	movhi	r2,1
    bbe4:	10c4ed15 	stw	r3,5044(r2)
    bbe8:	00800074 	movhi	r2,1
    bbec:	1084ec17 	ldw	r2,5040(r2)
    bbf0:	1007883a 	mov	r3,r2
    bbf4:	00800074 	movhi	r2,1
    bbf8:	1084ed17 	ldw	r2,5044(r2)
    bbfc:	1885383a 	mul	r2,r3,r2
    bc00:	e0bfff05 	stb	r2,-4(fp)
    bc04:	e0bfff03 	ldbu	r2,-4(fp)
    bc08:	10800268 	cmpgeui	r2,r2,9
    bc0c:	1000041e 	bne	r2,zero,bc20 <alt_sys_init+0x3f4>
    bc10:	00c00044 	movi	r3,1
    bc14:	00800074 	movhi	r2,1
    bc18:	10c4ee15 	stw	r3,5048(r2)
    bc1c:	00000a06 	br	bc48 <alt_sys_init+0x41c>
    bc20:	e0bfff03 	ldbu	r2,-4(fp)
    bc24:	10800468 	cmpgeui	r2,r2,17
    bc28:	1000041e 	bne	r2,zero,bc3c <alt_sys_init+0x410>
    bc2c:	00c00084 	movi	r3,2
    bc30:	00800074 	movhi	r2,1
    bc34:	10c4ee15 	stw	r3,5048(r2)
    bc38:	00000306 	br	bc48 <alt_sys_init+0x41c>
    bc3c:	00c00104 	movi	r3,4
    bc40:	00800074 	movhi	r2,1
    bc44:	10c4ee15 	stw	r3,5048(r2)
    bc48:	00800074 	movhi	r2,1
    bc4c:	1084e817 	ldw	r2,5024(r2)
    bc50:	10800304 	addi	r2,r2,12
    bc54:	10800017 	ldw	r2,0(r2)
    bc58:	1005d43a 	srai	r2,r2,16
    bc5c:	e0bffec5 	stb	r2,-5(fp)
    bc60:	00800074 	movhi	r2,1
    bc64:	1084e817 	ldw	r2,5024(r2)
    bc68:	10800304 	addi	r2,r2,12
    bc6c:	10800017 	ldw	r2,0(r2)
    bc70:	1004d63a 	srli	r2,r2,24
    bc74:	e0bffe85 	stb	r2,-6(fp)
    bc78:	00800074 	movhi	r2,1
    bc7c:	1084ee17 	ldw	r2,5048(r2)
    bc80:	10800058 	cmpnei	r2,r2,1
    bc84:	1000031e 	bne	r2,zero,bc94 <alt_sys_init+0x468>
    bc88:	00800074 	movhi	r2,1
    bc8c:	1004f115 	stw	zero,5060(r2)
    bc90:	00000b06 	br	bcc0 <alt_sys_init+0x494>
    bc94:	00800074 	movhi	r2,1
    bc98:	1084ee17 	ldw	r2,5048(r2)
    bc9c:	10800098 	cmpnei	r2,r2,2
    bca0:	1000041e 	bne	r2,zero,bcb4 <alt_sys_init+0x488>
    bca4:	00c00044 	movi	r3,1
    bca8:	00800074 	movhi	r2,1
    bcac:	10c4f115 	stw	r3,5060(r2)
    bcb0:	00000306 	br	bcc0 <alt_sys_init+0x494>
    bcb4:	00c00084 	movi	r3,2
    bcb8:	00800074 	movhi	r2,1
    bcbc:	10c4f115 	stw	r3,5060(r2)
    bcc0:	e0bffec3 	ldbu	r2,-5(fp)
    bcc4:	00c00804 	movi	r3,32
    bcc8:	1885c83a 	sub	r2,r3,r2
    bccc:	00ffffc4 	movi	r3,-1
    bcd0:	1886d83a 	srl	r3,r3,r2
    bcd4:	00800074 	movhi	r2,1
    bcd8:	10c4f215 	stw	r3,5064(r2)
    bcdc:	e0fffec3 	ldbu	r3,-5(fp)
    bce0:	00800074 	movhi	r2,1
    bce4:	1084f117 	ldw	r2,5060(r2)
    bce8:	1887883a 	add	r3,r3,r2
    bcec:	00800074 	movhi	r2,1
    bcf0:	10c4f315 	stw	r3,5068(r2)
    bcf4:	e0bffe83 	ldbu	r2,-6(fp)
    bcf8:	00c00804 	movi	r3,32
    bcfc:	1885c83a 	sub	r2,r3,r2
    bd00:	00ffffc4 	movi	r3,-1
    bd04:	1886d83a 	srl	r3,r3,r2
    bd08:	00800074 	movhi	r2,1
    bd0c:	10c4f415 	stw	r3,5072(r2)
    bd10:	01000074 	movhi	r4,1
    bd14:	2104de04 	addi	r4,r4,4984
    bd18:	000b7bc0 	call	b7bc <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_DMA_CONTROLLER_INIT ( VIDEO_IN_SUBSYSTEM_VIDEO_IN_DMA, Video_In_Subsystem_Video_In_DMA);
    bd1c:	00800074 	movhi	r2,1
    bd20:	1084ff17 	ldw	r2,5116(r2)
    bd24:	10800017 	ldw	r2,0(r2)
    bd28:	1007883a 	mov	r3,r2
    bd2c:	00800074 	movhi	r2,1
    bd30:	10c50015 	stw	r3,5120(r2)
    bd34:	00800074 	movhi	r2,1
    bd38:	1084ff17 	ldw	r2,5116(r2)
    bd3c:	10800104 	addi	r2,r2,4
    bd40:	10800017 	ldw	r2,0(r2)
    bd44:	1007883a 	mov	r3,r2
    bd48:	00800074 	movhi	r2,1
    bd4c:	10c50115 	stw	r3,5124(r2)
    bd50:	00800074 	movhi	r2,1
    bd54:	1084ff17 	ldw	r2,5116(r2)
    bd58:	10800204 	addi	r2,r2,8
    bd5c:	10800017 	ldw	r2,0(r2)
    bd60:	10ffffcc 	andi	r3,r2,65535
    bd64:	00800074 	movhi	r2,1
    bd68:	10c50615 	stw	r3,5144(r2)
    bd6c:	00800074 	movhi	r2,1
    bd70:	1084ff17 	ldw	r2,5116(r2)
    bd74:	10800204 	addi	r2,r2,8
    bd78:	10800017 	ldw	r2,0(r2)
    bd7c:	1006d43a 	srli	r3,r2,16
    bd80:	00800074 	movhi	r2,1
    bd84:	10c50715 	stw	r3,5148(r2)
    bd88:	00800074 	movhi	r2,1
    bd8c:	1084ff17 	ldw	r2,5116(r2)
    bd90:	10800304 	addi	r2,r2,12
    bd94:	10800017 	ldw	r2,0(r2)
    bd98:	1005d07a 	srai	r2,r2,1
    bd9c:	10c0004c 	andi	r3,r2,1
    bda0:	00800074 	movhi	r2,1
    bda4:	10c50215 	stw	r3,5128(r2)
    bda8:	00800074 	movhi	r2,1
    bdac:	1084ff17 	ldw	r2,5116(r2)
    bdb0:	10800304 	addi	r2,r2,12
    bdb4:	10800017 	ldw	r2,0(r2)
    bdb8:	1005d23a 	srai	r2,r2,8
    bdbc:	108003cc 	andi	r2,r2,15
    bdc0:	10800044 	addi	r2,r2,1
    bdc4:	1007883a 	mov	r3,r2
    bdc8:	00800074 	movhi	r2,1
    bdcc:	10c50315 	stw	r3,5132(r2)
    bdd0:	00800074 	movhi	r2,1
    bdd4:	1084ff17 	ldw	r2,5116(r2)
    bdd8:	10800304 	addi	r2,r2,12
    bddc:	10800017 	ldw	r2,0(r2)
    bde0:	1005d1ba 	srai	r2,r2,6
    bde4:	108000cc 	andi	r2,r2,3
    bde8:	10800044 	addi	r2,r2,1
    bdec:	1007883a 	mov	r3,r2
    bdf0:	00800074 	movhi	r2,1
    bdf4:	10c50415 	stw	r3,5136(r2)
    bdf8:	00800074 	movhi	r2,1
    bdfc:	10850317 	ldw	r2,5132(r2)
    be00:	1007883a 	mov	r3,r2
    be04:	00800074 	movhi	r2,1
    be08:	10850417 	ldw	r2,5136(r2)
    be0c:	1885383a 	mul	r2,r3,r2
    be10:	e0bffe45 	stb	r2,-7(fp)
    be14:	e0bffe43 	ldbu	r2,-7(fp)
    be18:	10800268 	cmpgeui	r2,r2,9
    be1c:	1000041e 	bne	r2,zero,be30 <alt_sys_init+0x604>
    be20:	00c00044 	movi	r3,1
    be24:	00800074 	movhi	r2,1
    be28:	10c50515 	stw	r3,5140(r2)
    be2c:	00000a06 	br	be58 <alt_sys_init+0x62c>
    be30:	e0bffe43 	ldbu	r2,-7(fp)
    be34:	10800468 	cmpgeui	r2,r2,17
    be38:	1000041e 	bne	r2,zero,be4c <alt_sys_init+0x620>
    be3c:	00c00084 	movi	r3,2
    be40:	00800074 	movhi	r2,1
    be44:	10c50515 	stw	r3,5140(r2)
    be48:	00000306 	br	be58 <alt_sys_init+0x62c>
    be4c:	00c00104 	movi	r3,4
    be50:	00800074 	movhi	r2,1
    be54:	10c50515 	stw	r3,5140(r2)
    be58:	00800074 	movhi	r2,1
    be5c:	1084ff17 	ldw	r2,5116(r2)
    be60:	10800304 	addi	r2,r2,12
    be64:	10800017 	ldw	r2,0(r2)
    be68:	1005d43a 	srai	r2,r2,16
    be6c:	e0bffe05 	stb	r2,-8(fp)
    be70:	00800074 	movhi	r2,1
    be74:	1084ff17 	ldw	r2,5116(r2)
    be78:	10800304 	addi	r2,r2,12
    be7c:	10800017 	ldw	r2,0(r2)
    be80:	1004d63a 	srli	r2,r2,24
    be84:	e0bffdc5 	stb	r2,-9(fp)
    be88:	00800074 	movhi	r2,1
    be8c:	10850517 	ldw	r2,5140(r2)
    be90:	10800058 	cmpnei	r2,r2,1
    be94:	1000031e 	bne	r2,zero,bea4 <alt_sys_init+0x678>
    be98:	00800074 	movhi	r2,1
    be9c:	10050815 	stw	zero,5152(r2)
    bea0:	00000b06 	br	bed0 <alt_sys_init+0x6a4>
    bea4:	00800074 	movhi	r2,1
    bea8:	10850517 	ldw	r2,5140(r2)
    beac:	10800098 	cmpnei	r2,r2,2
    beb0:	1000041e 	bne	r2,zero,bec4 <alt_sys_init+0x698>
    beb4:	00c00044 	movi	r3,1
    beb8:	00800074 	movhi	r2,1
    bebc:	10c50815 	stw	r3,5152(r2)
    bec0:	00000306 	br	bed0 <alt_sys_init+0x6a4>
    bec4:	00c00084 	movi	r3,2
    bec8:	00800074 	movhi	r2,1
    becc:	10c50815 	stw	r3,5152(r2)
    bed0:	e0bffe03 	ldbu	r2,-8(fp)
    bed4:	00c00804 	movi	r3,32
    bed8:	1885c83a 	sub	r2,r3,r2
    bedc:	00ffffc4 	movi	r3,-1
    bee0:	1886d83a 	srl	r3,r3,r2
    bee4:	00800074 	movhi	r2,1
    bee8:	10c50915 	stw	r3,5156(r2)
    beec:	e0fffe03 	ldbu	r3,-8(fp)
    bef0:	00800074 	movhi	r2,1
    bef4:	10850817 	ldw	r2,5152(r2)
    bef8:	1887883a 	add	r3,r3,r2
    befc:	00800074 	movhi	r2,1
    bf00:	10c50a15 	stw	r3,5160(r2)
    bf04:	e0bffdc3 	ldbu	r2,-9(fp)
    bf08:	00c00804 	movi	r3,32
    bf0c:	1885c83a 	sub	r2,r3,r2
    bf10:	00ffffc4 	movi	r3,-1
    bf14:	1886d83a 	srl	r3,r3,r2
    bf18:	00800074 	movhi	r2,1
    bf1c:	10c50b15 	stw	r3,5164(r2)
    bf20:	01000074 	movhi	r4,1
    bf24:	2104f504 	addi	r4,r4,5076
    bf28:	000b7bc0 	call	b7bc <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_RGB_RESAMPLER_INIT ( VGA_SUBSYSTEM_VGA_PIXEL_RGB_RESAMPLER, VGA_Subsystem_VGA_Pixel_RGB_Resampler);
    bf2c:	00800074 	movhi	r2,1
    bf30:	10851617 	ldw	r2,5208(r2)
    bf34:	10800017 	ldw	r2,0(r2)
    bf38:	10c003cc 	andi	r3,r2,15
    bf3c:	00800074 	movhi	r2,1
    bf40:	10c51715 	stw	r3,5212(r2)
    bf44:	00800074 	movhi	r2,1
    bf48:	10851617 	ldw	r2,5208(r2)
    bf4c:	10800017 	ldw	r2,0(r2)
    bf50:	1005d13a 	srai	r2,r2,4
    bf54:	10c0004c 	andi	r3,r2,1
    bf58:	00800074 	movhi	r2,1
    bf5c:	10c51815 	stw	r3,5216(r2)
    bf60:	00800074 	movhi	r2,1
    bf64:	10851617 	ldw	r2,5208(r2)
    bf68:	10800017 	ldw	r2,0(r2)
    bf6c:	1005d17a 	srai	r2,r2,5
    bf70:	10c0004c 	andi	r3,r2,1
    bf74:	00800074 	movhi	r2,1
    bf78:	10c51915 	stw	r3,5220(r2)
    bf7c:	00800074 	movhi	r2,1
    bf80:	10851617 	ldw	r2,5208(r2)
    bf84:	10800017 	ldw	r2,0(r2)
    bf88:	1005d43a 	srai	r2,r2,16
    bf8c:	10c003cc 	andi	r3,r2,15
    bf90:	00800074 	movhi	r2,1
    bf94:	10c51a15 	stw	r3,5224(r2)
    bf98:	00800074 	movhi	r2,1
    bf9c:	10851617 	ldw	r2,5208(r2)
    bfa0:	10800017 	ldw	r2,0(r2)
    bfa4:	1005d53a 	srai	r2,r2,20
    bfa8:	10c0004c 	andi	r3,r2,1
    bfac:	00800074 	movhi	r2,1
    bfb0:	10c51b15 	stw	r3,5228(r2)
    bfb4:	00800074 	movhi	r2,1
    bfb8:	10851617 	ldw	r2,5208(r2)
    bfbc:	10800017 	ldw	r2,0(r2)
    bfc0:	1005d57a 	srai	r2,r2,21
    bfc4:	10c0004c 	andi	r3,r2,1
    bfc8:	00800074 	movhi	r2,1
    bfcc:	10c51c15 	stw	r3,5232(r2)
    bfd0:	01000074 	movhi	r4,1
    bfd4:	21050c04 	addi	r4,r4,5168
    bfd8:	000b7bc0 	call	b7bc <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD, SD_Card);
    bfdc:	01000074 	movhi	r4,1
    bfe0:	21051d04 	addi	r4,r4,5236
    bfe4:	000b7bc0 	call	b7bc <alt_dev_reg>
}
    bfe8:	0001883a 	nop
    bfec:	e037883a 	mov	sp,fp
    bff0:	dfc00117 	ldw	ra,4(sp)
    bff4:	df000017 	ldw	fp,0(sp)
    bff8:	dec00204 	addi	sp,sp,8
    bffc:	f800283a 	ret

0000c000 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    c000:	defffa04 	addi	sp,sp,-24
    c004:	dfc00515 	stw	ra,20(sp)
    c008:	df000415 	stw	fp,16(sp)
    c00c:	df000404 	addi	fp,sp,16
    c010:	e13ffe15 	stw	r4,-8(fp)
    c014:	e17ffd15 	stw	r5,-12(fp)
    c018:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    c01c:	e0bffe17 	ldw	r2,-8(fp)
    c020:	10800017 	ldw	r2,0(r2)
    c024:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    c028:	e0bfff17 	ldw	r2,-4(fp)
    c02c:	10c00a04 	addi	r3,r2,40
    c030:	e0bffe17 	ldw	r2,-8(fp)
    c034:	10800217 	ldw	r2,8(r2)
    c038:	100f883a 	mov	r7,r2
    c03c:	e1bffc17 	ldw	r6,-16(fp)
    c040:	e17ffd17 	ldw	r5,-12(fp)
    c044:	1809883a 	mov	r4,r3
    c048:	000c7c00 	call	c7c0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    c04c:	e037883a 	mov	sp,fp
    c050:	dfc00117 	ldw	ra,4(sp)
    c054:	df000017 	ldw	fp,0(sp)
    c058:	dec00204 	addi	sp,sp,8
    c05c:	f800283a 	ret

0000c060 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    c060:	defffa04 	addi	sp,sp,-24
    c064:	dfc00515 	stw	ra,20(sp)
    c068:	df000415 	stw	fp,16(sp)
    c06c:	df000404 	addi	fp,sp,16
    c070:	e13ffe15 	stw	r4,-8(fp)
    c074:	e17ffd15 	stw	r5,-12(fp)
    c078:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    c07c:	e0bffe17 	ldw	r2,-8(fp)
    c080:	10800017 	ldw	r2,0(r2)
    c084:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    c088:	e0bfff17 	ldw	r2,-4(fp)
    c08c:	10c00a04 	addi	r3,r2,40
    c090:	e0bffe17 	ldw	r2,-8(fp)
    c094:	10800217 	ldw	r2,8(r2)
    c098:	100f883a 	mov	r7,r2
    c09c:	e1bffc17 	ldw	r6,-16(fp)
    c0a0:	e17ffd17 	ldw	r5,-12(fp)
    c0a4:	1809883a 	mov	r4,r3
    c0a8:	000ca880 	call	ca88 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    c0ac:	e037883a 	mov	sp,fp
    c0b0:	dfc00117 	ldw	ra,4(sp)
    c0b4:	df000017 	ldw	fp,0(sp)
    c0b8:	dec00204 	addi	sp,sp,8
    c0bc:	f800283a 	ret

0000c0c0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    c0c0:	defffc04 	addi	sp,sp,-16
    c0c4:	dfc00315 	stw	ra,12(sp)
    c0c8:	df000215 	stw	fp,8(sp)
    c0cc:	df000204 	addi	fp,sp,8
    c0d0:	e13ffe15 	stw	r4,-8(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    c0d4:	e0bffe17 	ldw	r2,-8(fp)
    c0d8:	10800017 	ldw	r2,0(r2)
    c0dc:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    c0e0:	e0bfff17 	ldw	r2,-4(fp)
    c0e4:	10c00a04 	addi	r3,r2,40
    c0e8:	e0bffe17 	ldw	r2,-8(fp)
    c0ec:	10800217 	ldw	r2,8(r2)
    c0f0:	100b883a 	mov	r5,r2
    c0f4:	1809883a 	mov	r4,r3
    c0f8:	000c6640 	call	c664 <altera_avalon_jtag_uart_close>
}
    c0fc:	e037883a 	mov	sp,fp
    c100:	dfc00117 	ldw	ra,4(sp)
    c104:	df000017 	ldw	fp,0(sp)
    c108:	dec00204 	addi	sp,sp,8
    c10c:	f800283a 	ret

0000c110 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    c110:	defffa04 	addi	sp,sp,-24
    c114:	dfc00515 	stw	ra,20(sp)
    c118:	df000415 	stw	fp,16(sp)
    c11c:	df000404 	addi	fp,sp,16
    c120:	e13ffe15 	stw	r4,-8(fp)
    c124:	e17ffd15 	stw	r5,-12(fp)
    c128:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    c12c:	e0bffe17 	ldw	r2,-8(fp)
    c130:	10800017 	ldw	r2,0(r2)
    c134:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    c138:	e0bfff17 	ldw	r2,-4(fp)
    c13c:	10800a04 	addi	r2,r2,40
    c140:	e1bffc17 	ldw	r6,-16(fp)
    c144:	e17ffd17 	ldw	r5,-12(fp)
    c148:	1009883a 	mov	r4,r2
    c14c:	000c6cc0 	call	c6cc <altera_avalon_jtag_uart_ioctl>
}
    c150:	e037883a 	mov	sp,fp
    c154:	dfc00117 	ldw	ra,4(sp)
    c158:	df000017 	ldw	fp,0(sp)
    c15c:	dec00204 	addi	sp,sp,8
    c160:	f800283a 	ret

0000c164 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    c164:	defff504 	addi	sp,sp,-44
    c168:	dfc00a15 	stw	ra,40(sp)
    c16c:	df000915 	stw	fp,36(sp)
    c170:	df000904 	addi	fp,sp,36
    c174:	e13ff915 	stw	r4,-28(fp)
    c178:	e17ff815 	stw	r5,-32(fp)
    c17c:	e1bff715 	stw	r6,-36(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
    c180:	e0bff917 	ldw	r2,-28(fp)
    c184:	10800c04 	addi	r2,r2,48
    c188:	e0bffb15 	stw	r2,-20(fp)
    c18c:	e03ffa8d 	sth	zero,-22(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
    c190:	e0bffa8b 	ldhu	r2,-22(fp)
    c194:	e0fffa44 	addi	r3,fp,-23
    c198:	180b883a 	mov	r5,r3
    c19c:	1009883a 	mov	r4,r2
    c1a0:	00063600 	call	6360 <OSFlagCreate>
    c1a4:	1007883a 	mov	r3,r2
    c1a8:	e0bffb17 	ldw	r2,-20(fp)
    c1ac:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
    c1b0:	e0bff917 	ldw	r2,-28(fp)
    c1b4:	10800a04 	addi	r2,r2,40
    c1b8:	e0bffd15 	stw	r2,-12(fp)
    c1bc:	00800044 	movi	r2,1
    c1c0:	e0bffc8d 	sth	r2,-14(fp)
  *sem = OSSemCreate (value);
    c1c4:	e0bffc8b 	ldhu	r2,-14(fp)
    c1c8:	1009883a 	mov	r4,r2
    c1cc:	00091880 	call	9188 <OSSemCreate>
    c1d0:	1007883a 	mov	r3,r2
    c1d4:	e0bffd17 	ldw	r2,-12(fp)
    c1d8:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
    c1dc:	0001883a 	nop
  ALT_SEM_CREATE(&sp->write_lock, 1);
    c1e0:	e0bff917 	ldw	r2,-28(fp)
    c1e4:	10800b04 	addi	r2,r2,44
    c1e8:	e0bfff15 	stw	r2,-4(fp)
    c1ec:	00800044 	movi	r2,1
    c1f0:	e0bffe8d 	sth	r2,-6(fp)
  *sem = OSSemCreate (value);
    c1f4:	e0bffe8b 	ldhu	r2,-6(fp)
    c1f8:	1009883a 	mov	r4,r2
    c1fc:	00091880 	call	9188 <OSSemCreate>
    c200:	1007883a 	mov	r3,r2
    c204:	e0bfff17 	ldw	r2,-4(fp)
    c208:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
    c20c:	0001883a 	nop

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    c210:	e0bff917 	ldw	r2,-28(fp)
    c214:	00c00044 	movi	r3,1
    c218:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    c21c:	e0bff917 	ldw	r2,-28(fp)
    c220:	10800017 	ldw	r2,0(r2)
    c224:	10800104 	addi	r2,r2,4
    c228:	1007883a 	mov	r3,r2
    c22c:	e0bff917 	ldw	r2,-28(fp)
    c230:	10800817 	ldw	r2,32(r2)
    c234:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
    c238:	e0bff717 	ldw	r2,-36(fp)
    c23c:	01800074 	movhi	r6,1
    c240:	31b0aa04 	addi	r6,r6,-15704
    c244:	e17ff917 	ldw	r5,-28(fp)
    c248:	1009883a 	mov	r4,r2
    c24c:	000e6100 	call	e610 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    c250:	e0bff917 	ldw	r2,-28(fp)
    c254:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    c258:	e0bff917 	ldw	r2,-28(fp)
    c25c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    c260:	d0e7cc17 	ldw	r3,-24784(gp)
    c264:	e1fff917 	ldw	r7,-28(fp)
    c268:	01800074 	movhi	r6,1
    c26c:	31b15604 	addi	r6,r6,-15016
    c270:	180b883a 	mov	r5,r3
    c274:	1009883a 	mov	r4,r2
    c278:	000e1200 	call	e120 <alt_alarm_start>
    c27c:	1000040e 	bge	r2,zero,c290 <altera_avalon_jtag_uart_init+0x12c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    c280:	e0fff917 	ldw	r3,-28(fp)
    c284:	00a00034 	movhi	r2,32768
    c288:	10bfffc4 	addi	r2,r2,-1
    c28c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    c290:	0001883a 	nop
    c294:	e037883a 	mov	sp,fp
    c298:	dfc00117 	ldw	ra,4(sp)
    c29c:	df000017 	ldw	fp,0(sp)
    c2a0:	dec00204 	addi	sp,sp,8
    c2a4:	f800283a 	ret

0000c2a8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    c2a8:	defff104 	addi	sp,sp,-60
    c2ac:	dfc00e15 	stw	ra,56(sp)
    c2b0:	df000d15 	stw	fp,52(sp)
    c2b4:	df000d04 	addi	fp,sp,52
    c2b8:	e13ff415 	stw	r4,-48(fp)
    c2bc:	e17ff315 	stw	r5,-52(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    c2c0:	e0bff417 	ldw	r2,-48(fp)
    c2c4:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
    c2c8:	e0bffd17 	ldw	r2,-12(fp)
    c2cc:	10800017 	ldw	r2,0(r2)
    c2d0:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    c2d4:	e0bffc17 	ldw	r2,-16(fp)
    c2d8:	10800104 	addi	r2,r2,4
    c2dc:	10800037 	ldwio	r2,0(r2)
    c2e0:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    c2e4:	e0bffb17 	ldw	r2,-20(fp)
    c2e8:	1080c00c 	andi	r2,r2,768
    c2ec:	10009326 	beq	r2,zero,c53c <altera_avalon_jtag_uart_irq+0x294>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    c2f0:	e0bffb17 	ldw	r2,-20(fp)
    c2f4:	1080400c 	andi	r2,r2,256
    c2f8:	10004826 	beq	r2,zero,c41c <altera_avalon_jtag_uart_irq+0x174>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    c2fc:	00800074 	movhi	r2,1
    c300:	e0bfff15 	stw	r2,-4(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c304:	e0bffd17 	ldw	r2,-12(fp)
    c308:	10800d17 	ldw	r2,52(r2)
    c30c:	10800044 	addi	r2,r2,1
    c310:	1081ffcc 	andi	r2,r2,2047
    c314:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
    c318:	e0bffd17 	ldw	r2,-12(fp)
    c31c:	10800e17 	ldw	r2,56(r2)
    c320:	e0fffa17 	ldw	r3,-24(fp)
    c324:	18802826 	beq	r3,r2,c3c8 <altera_avalon_jtag_uart_irq+0x120>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    c328:	e0bffc17 	ldw	r2,-16(fp)
    c32c:	10800037 	ldwio	r2,0(r2)
    c330:	e0bfff15 	stw	r2,-4(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    c334:	e0bfff17 	ldw	r2,-4(fp)
    c338:	10a0000c 	andi	r2,r2,32768
    c33c:	10002426 	beq	r2,zero,c3d0 <altera_avalon_jtag_uart_irq+0x128>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    c340:	e0bffd17 	ldw	r2,-12(fp)
    c344:	10800d17 	ldw	r2,52(r2)
    c348:	e0ffff17 	ldw	r3,-4(fp)
    c34c:	1809883a 	mov	r4,r3
    c350:	e0fffd17 	ldw	r3,-12(fp)
    c354:	1885883a 	add	r2,r3,r2
    c358:	11001105 	stb	r4,68(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c35c:	e0bffd17 	ldw	r2,-12(fp)
    c360:	10800d17 	ldw	r2,52(r2)
    c364:	10800044 	addi	r2,r2,1
    c368:	10c1ffcc 	andi	r3,r2,2047
    c36c:	e0bffd17 	ldw	r2,-12(fp)
    c370:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
    c374:	e0bffd17 	ldw	r2,-12(fp)
    c378:	10800c17 	ldw	r2,48(r2)
    c37c:	e0bff915 	stw	r2,-28(fp)
    c380:	00800044 	movi	r2,1
    c384:	e0bff88d 	sth	r2,-30(fp)
    c388:	00800044 	movi	r2,1
    c38c:	e0bff845 	stb	r2,-31(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
    c390:	d0a7c143 	ldbu	r2,-24827(gp)
    c394:	10803fcc 	andi	r2,r2,255
    c398:	10000926 	beq	r2,zero,c3c0 <altera_avalon_jtag_uart_irq+0x118>
  {
    OSFlagPost (group, flags, opt, &err);
    c39c:	e0bff88b 	ldhu	r2,-30(fp)
    c3a0:	e0fff843 	ldbu	r3,-31(fp)
    c3a4:	e13ff604 	addi	r4,fp,-40
    c3a8:	200f883a 	mov	r7,r4
    c3ac:	180d883a 	mov	r6,r3
    c3b0:	100b883a 	mov	r5,r2
    c3b4:	e13ff917 	ldw	r4,-28(fp)
    c3b8:	0006fb00 	call	6fb0 <OSFlagPost>
    return err;
    c3bc:	00000106 	br	c3c4 <altera_avalon_jtag_uart_irq+0x11c>
  }
  return OS_ERR_PEND_ISR;
    c3c0:	0001883a 	nop
      {
    c3c4:	003fcf06 	br	c304 <altera_avalon_jtag_uart_irq+0x5c>
          break;
    c3c8:	0001883a 	nop
    c3cc:	00000106 	br	c3d4 <altera_avalon_jtag_uart_irq+0x12c>
          break;
    c3d0:	0001883a 	nop
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    c3d4:	e0bfff17 	ldw	r2,-4(fp)
    c3d8:	10bfffec 	andhi	r2,r2,65535
    c3dc:	10000f26 	beq	r2,zero,c41c <altera_avalon_jtag_uart_irq+0x174>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    c3e0:	e0bffd17 	ldw	r2,-12(fp)
    c3e4:	10c00817 	ldw	r3,32(r2)
    c3e8:	00bfff84 	movi	r2,-2
    c3ec:	1886703a 	and	r3,r3,r2
    c3f0:	e0bffd17 	ldw	r2,-12(fp)
    c3f4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    c3f8:	e0bffc17 	ldw	r2,-16(fp)
    c3fc:	10800104 	addi	r2,r2,4
    c400:	1007883a 	mov	r3,r2
    c404:	e0bffd17 	ldw	r2,-12(fp)
    c408:	10800817 	ldw	r2,32(r2)
    c40c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    c410:	e0bffc17 	ldw	r2,-16(fp)
    c414:	10800104 	addi	r2,r2,4
    c418:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    c41c:	e0bffb17 	ldw	r2,-20(fp)
    c420:	1080800c 	andi	r2,r2,512
    c424:	103fab26 	beq	r2,zero,c2d4 <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    c428:	e0bffb17 	ldw	r2,-20(fp)
    c42c:	1004d43a 	srli	r2,r2,16
    c430:	e0bffe15 	stw	r2,-8(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    c434:	00002706 	br	c4d4 <altera_avalon_jtag_uart_irq+0x22c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    c438:	e0bffc17 	ldw	r2,-16(fp)
    c43c:	e0fffd17 	ldw	r3,-12(fp)
    c440:	18c01017 	ldw	r3,64(r3)
    c444:	e13ffd17 	ldw	r4,-12(fp)
    c448:	20c7883a 	add	r3,r4,r3
    c44c:	18c21103 	ldbu	r3,2116(r3)
    c450:	18c03fcc 	andi	r3,r3,255
    c454:	18c0201c 	xori	r3,r3,128
    c458:	18ffe004 	addi	r3,r3,-128
    c45c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c460:	e0bffd17 	ldw	r2,-12(fp)
    c464:	10801017 	ldw	r2,64(r2)
    c468:	10800044 	addi	r2,r2,1
    c46c:	10c1ffcc 	andi	r3,r2,2047
    c470:	e0bffd17 	ldw	r2,-12(fp)
    c474:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
    c478:	e0bffd17 	ldw	r2,-12(fp)
    c47c:	10800c17 	ldw	r2,48(r2)
    c480:	e0bff715 	stw	r2,-36(fp)
    c484:	00800084 	movi	r2,2
    c488:	e0bff68d 	sth	r2,-38(fp)
    c48c:	00800044 	movi	r2,1
    c490:	e0bff645 	stb	r2,-39(fp)
  if (OSRunning)
    c494:	d0a7c143 	ldbu	r2,-24827(gp)
    c498:	10803fcc 	andi	r2,r2,255
    c49c:	10000926 	beq	r2,zero,c4c4 <altera_avalon_jtag_uart_irq+0x21c>
    OSFlagPost (group, flags, opt, &err);
    c4a0:	e0bff68b 	ldhu	r2,-38(fp)
    c4a4:	e0fff643 	ldbu	r3,-39(fp)
    c4a8:	e13ff5c4 	addi	r4,fp,-41
    c4ac:	200f883a 	mov	r7,r4
    c4b0:	180d883a 	mov	r6,r3
    c4b4:	100b883a 	mov	r5,r2
    c4b8:	e13ff717 	ldw	r4,-36(fp)
    c4bc:	0006fb00 	call	6fb0 <OSFlagPost>
    return err;
    c4c0:	00000106 	br	c4c8 <altera_avalon_jtag_uart_irq+0x220>
  return OS_ERR_PEND_ISR;
    c4c4:	0001883a 	nop

        space--;
    c4c8:	e0bffe17 	ldw	r2,-8(fp)
    c4cc:	10bfffc4 	addi	r2,r2,-1
    c4d0:	e0bffe15 	stw	r2,-8(fp)
      while (space > 0 && sp->tx_out != sp->tx_in)
    c4d4:	e0bffe17 	ldw	r2,-8(fp)
    c4d8:	10000526 	beq	r2,zero,c4f0 <altera_avalon_jtag_uart_irq+0x248>
    c4dc:	e0bffd17 	ldw	r2,-12(fp)
    c4e0:	10c01017 	ldw	r3,64(r2)
    c4e4:	e0bffd17 	ldw	r2,-12(fp)
    c4e8:	10800f17 	ldw	r2,60(r2)
    c4ec:	18bfd21e 	bne	r3,r2,c438 <altera_avalon_jtag_uart_irq+0x190>
      }

      if (space > 0)
    c4f0:	e0bffe17 	ldw	r2,-8(fp)
    c4f4:	103f7726 	beq	r2,zero,c2d4 <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    c4f8:	e0bffd17 	ldw	r2,-12(fp)
    c4fc:	10c00817 	ldw	r3,32(r2)
    c500:	00bfff44 	movi	r2,-3
    c504:	1886703a 	and	r3,r3,r2
    c508:	e0bffd17 	ldw	r2,-12(fp)
    c50c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    c510:	e0bffd17 	ldw	r2,-12(fp)
    c514:	10800017 	ldw	r2,0(r2)
    c518:	10800104 	addi	r2,r2,4
    c51c:	1007883a 	mov	r3,r2
    c520:	e0bffd17 	ldw	r2,-12(fp)
    c524:	10800817 	ldw	r2,32(r2)
    c528:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    c52c:	e0bffc17 	ldw	r2,-16(fp)
    c530:	10800104 	addi	r2,r2,4
    c534:	10800037 	ldwio	r2,0(r2)
  {
    c538:	003f6606 	br	c2d4 <altera_avalon_jtag_uart_irq+0x2c>
      break;
    c53c:	0001883a 	nop
      }
    }
  }
}
    c540:	0001883a 	nop
    c544:	e037883a 	mov	sp,fp
    c548:	dfc00117 	ldw	ra,4(sp)
    c54c:	df000017 	ldw	fp,0(sp)
    c550:	dec00204 	addi	sp,sp,8
    c554:	f800283a 	ret

0000c558 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    c558:	defff904 	addi	sp,sp,-28
    c55c:	dfc00615 	stw	ra,24(sp)
    c560:	df000515 	stw	fp,20(sp)
    c564:	df000504 	addi	fp,sp,20
    c568:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    c56c:	e0bffb17 	ldw	r2,-20(fp)
    c570:	e0bfff15 	stw	r2,-4(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    c574:	e0bfff17 	ldw	r2,-4(fp)
    c578:	10800017 	ldw	r2,0(r2)
    c57c:	10800104 	addi	r2,r2,4
    c580:	10800037 	ldwio	r2,0(r2)
    c584:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    c588:	e0bffe17 	ldw	r2,-8(fp)
    c58c:	1081000c 	andi	r2,r2,1024
    c590:	10000b26 	beq	r2,zero,c5c0 <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    c594:	e0bfff17 	ldw	r2,-4(fp)
    c598:	10800017 	ldw	r2,0(r2)
    c59c:	10800104 	addi	r2,r2,4
    c5a0:	1007883a 	mov	r3,r2
    c5a4:	e0bfff17 	ldw	r2,-4(fp)
    c5a8:	10800817 	ldw	r2,32(r2)
    c5ac:	10810014 	ori	r2,r2,1024
    c5b0:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    c5b4:	e0bfff17 	ldw	r2,-4(fp)
    c5b8:	10000915 	stw	zero,36(r2)
    c5bc:	00002306 	br	c64c <altera_avalon_jtag_uart_timeout+0xf4>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    c5c0:	e0bfff17 	ldw	r2,-4(fp)
    c5c4:	10c00917 	ldw	r3,36(r2)
    c5c8:	00a00034 	movhi	r2,32768
    c5cc:	10bfff04 	addi	r2,r2,-4
    c5d0:	10c01e36 	bltu	r2,r3,c64c <altera_avalon_jtag_uart_timeout+0xf4>
    sp->host_inactive++;
    c5d4:	e0bfff17 	ldw	r2,-4(fp)
    c5d8:	10800917 	ldw	r2,36(r2)
    c5dc:	10c00044 	addi	r3,r2,1
    c5e0:	e0bfff17 	ldw	r2,-4(fp)
    c5e4:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
    c5e8:	e0bfff17 	ldw	r2,-4(fp)
    c5ec:	10c00917 	ldw	r3,36(r2)
    c5f0:	e0bfff17 	ldw	r2,-4(fp)
    c5f4:	10800117 	ldw	r2,4(r2)
    c5f8:	18801436 	bltu	r3,r2,c64c <altera_avalon_jtag_uart_timeout+0xf4>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    c5fc:	e0bfff17 	ldw	r2,-4(fp)
    c600:	10800c17 	ldw	r2,48(r2)
    c604:	e0bffd15 	stw	r2,-12(fp)
    c608:	00800104 	movi	r2,4
    c60c:	e0bffc8d 	sth	r2,-14(fp)
    c610:	00800044 	movi	r2,1
    c614:	e0bffc45 	stb	r2,-15(fp)
  if (OSRunning)
    c618:	d0a7c143 	ldbu	r2,-24827(gp)
    c61c:	10803fcc 	andi	r2,r2,255
    c620:	10000926 	beq	r2,zero,c648 <altera_avalon_jtag_uart_timeout+0xf0>
    OSFlagPost (group, flags, opt, &err);
    c624:	e0bffc8b 	ldhu	r2,-14(fp)
    c628:	e0fffc43 	ldbu	r3,-15(fp)
    c62c:	e13ffc04 	addi	r4,fp,-16
    c630:	200f883a 	mov	r7,r4
    c634:	180d883a 	mov	r6,r3
    c638:	100b883a 	mov	r5,r2
    c63c:	e13ffd17 	ldw	r4,-12(fp)
    c640:	0006fb00 	call	6fb0 <OSFlagPost>
    return err;
    c644:	00000106 	br	c64c <altera_avalon_jtag_uart_timeout+0xf4>
  return OS_ERR_PEND_ISR;
    c648:	0001883a 	nop
    c64c:	d0a7cc17 	ldw	r2,-24784(gp)
    }
  }

  return alt_ticks_per_second();
}
    c650:	e037883a 	mov	sp,fp
    c654:	dfc00117 	ldw	ra,4(sp)
    c658:	df000017 	ldw	fp,0(sp)
    c65c:	dec00204 	addi	sp,sp,8
    c660:	f800283a 	ret

0000c664 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    c664:	defffd04 	addi	sp,sp,-12
    c668:	df000215 	stw	fp,8(sp)
    c66c:	df000204 	addi	fp,sp,8
    c670:	e13fff15 	stw	r4,-4(fp)
    c674:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    c678:	00000506 	br	c690 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    c67c:	e0bffe17 	ldw	r2,-8(fp)
    c680:	1090000c 	andi	r2,r2,16384
    c684:	10000226 	beq	r2,zero,c690 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    c688:	00bffd44 	movi	r2,-11
    c68c:	00000b06 	br	c6bc <altera_avalon_jtag_uart_close+0x58>
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    c690:	e0bfff17 	ldw	r2,-4(fp)
    c694:	10c01017 	ldw	r3,64(r2)
    c698:	e0bfff17 	ldw	r2,-4(fp)
    c69c:	10800f17 	ldw	r2,60(r2)
    c6a0:	18800526 	beq	r3,r2,c6b8 <altera_avalon_jtag_uart_close+0x54>
    c6a4:	e0bfff17 	ldw	r2,-4(fp)
    c6a8:	10c00917 	ldw	r3,36(r2)
    c6ac:	e0bfff17 	ldw	r2,-4(fp)
    c6b0:	10800117 	ldw	r2,4(r2)
    c6b4:	18bff136 	bltu	r3,r2,c67c <altera_avalon_jtag_uart_close+0x18>
    }
  }

  return 0;
    c6b8:	0005883a 	mov	r2,zero
}
    c6bc:	e037883a 	mov	sp,fp
    c6c0:	df000017 	ldw	fp,0(sp)
    c6c4:	dec00104 	addi	sp,sp,4
    c6c8:	f800283a 	ret

0000c6cc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    c6cc:	defffa04 	addi	sp,sp,-24
    c6d0:	df000515 	stw	fp,20(sp)
    c6d4:	df000504 	addi	fp,sp,20
    c6d8:	e13ffd15 	stw	r4,-12(fp)
    c6dc:	e17ffc15 	stw	r5,-16(fp)
    c6e0:	e1bffb15 	stw	r6,-20(fp)
  int rc = -ENOTTY;
    c6e4:	00bff9c4 	movi	r2,-25
    c6e8:	e0bfff15 	stw	r2,-4(fp)

  switch (req)
    c6ec:	e0bffc17 	ldw	r2,-16(fp)
    c6f0:	109a8060 	cmpeqi	r2,r2,27137
    c6f4:	1000041e 	bne	r2,zero,c708 <altera_avalon_jtag_uart_ioctl+0x3c>
    c6f8:	e0bffc17 	ldw	r2,-16(fp)
    c6fc:	109a80a0 	cmpeqi	r2,r2,27138
    c700:	1000181e 	bne	r2,zero,c764 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
    c704:	00002906 	br	c7ac <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    c708:	e0bffd17 	ldw	r2,-12(fp)
    c70c:	10c00117 	ldw	r3,4(r2)
    c710:	00a00034 	movhi	r2,32768
    c714:	10bfffc4 	addi	r2,r2,-1
    c718:	18802126 	beq	r3,r2,c7a0 <altera_avalon_jtag_uart_ioctl+0xd4>
      int timeout = *((int *)arg);
    c71c:	e0bffb17 	ldw	r2,-20(fp)
    c720:	10800017 	ldw	r2,0(r2)
    c724:	e0bffe15 	stw	r2,-8(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    c728:	e0bffe17 	ldw	r2,-8(fp)
    c72c:	10800090 	cmplti	r2,r2,2
    c730:	1000061e 	bne	r2,zero,c74c <altera_avalon_jtag_uart_ioctl+0x80>
    c734:	e0fffe17 	ldw	r3,-8(fp)
    c738:	00a00034 	movhi	r2,32768
    c73c:	10bfffc4 	addi	r2,r2,-1
    c740:	18800226 	beq	r3,r2,c74c <altera_avalon_jtag_uart_ioctl+0x80>
    c744:	e0bffe17 	ldw	r2,-8(fp)
    c748:	00000206 	br	c754 <altera_avalon_jtag_uart_ioctl+0x88>
    c74c:	00a00034 	movhi	r2,32768
    c750:	10bfff84 	addi	r2,r2,-2
    c754:	e0fffd17 	ldw	r3,-12(fp)
    c758:	18800115 	stw	r2,4(r3)
      rc = 0;
    c75c:	e03fff15 	stw	zero,-4(fp)
    break;
    c760:	00000f06 	br	c7a0 <altera_avalon_jtag_uart_ioctl+0xd4>
    if (sp->timeout != INT_MAX)
    c764:	e0bffd17 	ldw	r2,-12(fp)
    c768:	10c00117 	ldw	r3,4(r2)
    c76c:	00a00034 	movhi	r2,32768
    c770:	10bfffc4 	addi	r2,r2,-1
    c774:	18800c26 	beq	r3,r2,c7a8 <altera_avalon_jtag_uart_ioctl+0xdc>
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    c778:	e0bffd17 	ldw	r2,-12(fp)
    c77c:	10c00917 	ldw	r3,36(r2)
    c780:	e0bffd17 	ldw	r2,-12(fp)
    c784:	10800117 	ldw	r2,4(r2)
    c788:	1885803a 	cmpltu	r2,r3,r2
    c78c:	10c03fcc 	andi	r3,r2,255
    c790:	e0bffb17 	ldw	r2,-20(fp)
    c794:	10c00015 	stw	r3,0(r2)
      rc = 0;
    c798:	e03fff15 	stw	zero,-4(fp)
    break;
    c79c:	00000206 	br	c7a8 <altera_avalon_jtag_uart_ioctl+0xdc>
    break;
    c7a0:	0001883a 	nop
    c7a4:	00000106 	br	c7ac <altera_avalon_jtag_uart_ioctl+0xe0>
    break;
    c7a8:	0001883a 	nop
  }

  return rc;
    c7ac:	e0bfff17 	ldw	r2,-4(fp)
}
    c7b0:	e037883a 	mov	sp,fp
    c7b4:	df000017 	ldw	fp,0(sp)
    c7b8:	dec00104 	addi	sp,sp,4
    c7bc:	f800283a 	ret

0000c7c0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    c7c0:	deffec04 	addi	sp,sp,-80
    c7c4:	dfc01315 	stw	ra,76(sp)
    c7c8:	df001215 	stw	fp,72(sp)
    c7cc:	df001204 	addi	fp,sp,72
    c7d0:	e13ff215 	stw	r4,-56(fp)
    c7d4:	e17ff115 	stw	r5,-60(fp)
    c7d8:	e1bff015 	stw	r6,-64(fp)
    c7dc:	e1ffef15 	stw	r7,-68(fp)
  char * ptr = buffer;
    c7e0:	e0bff117 	ldw	r2,-60(fp)
    c7e4:	e0bfff15 	stw	r2,-4(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
    c7e8:	e0bff217 	ldw	r2,-56(fp)
    c7ec:	10800a17 	ldw	r2,40(r2)
    c7f0:	e0bffa15 	stw	r2,-24(fp)
    c7f4:	e03ff98d 	sth	zero,-26(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
    c7f8:	e0bff98b 	ldhu	r2,-26(fp)
    c7fc:	e0fff3c4 	addi	r3,fp,-49
    c800:	180d883a 	mov	r6,r3
    c804:	100b883a 	mov	r5,r2
    c808:	e13ffa17 	ldw	r4,-24(fp)
    c80c:	00094b40 	call	94b4 <OSSemPend>

  while (space > 0)
    c810:	00006306 	br	c9a0 <altera_avalon_jtag_uart_read+0x1e0>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    c814:	e0bff217 	ldw	r2,-56(fp)
    c818:	10800d17 	ldw	r2,52(r2)
    c81c:	e0bffd15 	stw	r2,-12(fp)
      out = sp->rx_out;
    c820:	e0bff217 	ldw	r2,-56(fp)
    c824:	10800e17 	ldw	r2,56(r2)
    c828:	e0bffc15 	stw	r2,-16(fp)

      if (in >= out)
    c82c:	e0fffd17 	ldw	r3,-12(fp)
    c830:	e0bffc17 	ldw	r2,-16(fp)
    c834:	18800536 	bltu	r3,r2,c84c <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
    c838:	e0fffd17 	ldw	r3,-12(fp)
    c83c:	e0bffc17 	ldw	r2,-16(fp)
    c840:	1885c83a 	sub	r2,r3,r2
    c844:	e0bffe15 	stw	r2,-8(fp)
    c848:	00000406 	br	c85c <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    c84c:	00c20004 	movi	r3,2048
    c850:	e0bffc17 	ldw	r2,-16(fp)
    c854:	1885c83a 	sub	r2,r3,r2
    c858:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
    c85c:	e0bffe17 	ldw	r2,-8(fp)
    c860:	10001e26 	beq	r2,zero,c8dc <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
    c864:	e0fff017 	ldw	r3,-64(fp)
    c868:	e0bffe17 	ldw	r2,-8(fp)
    c86c:	1880022e 	bgeu	r3,r2,c878 <altera_avalon_jtag_uart_read+0xb8>
        n = space;
    c870:	e0bff017 	ldw	r2,-64(fp)
    c874:	e0bffe15 	stw	r2,-8(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    c878:	e0bff217 	ldw	r2,-56(fp)
    c87c:	10c01104 	addi	r3,r2,68
    c880:	e0bffc17 	ldw	r2,-16(fp)
    c884:	1885883a 	add	r2,r3,r2
    c888:	e1bffe17 	ldw	r6,-8(fp)
    c88c:	100b883a 	mov	r5,r2
    c890:	e13fff17 	ldw	r4,-4(fp)
    c894:	000179c0 	call	179c <memcpy>
      ptr   += n;
    c898:	e0ffff17 	ldw	r3,-4(fp)
    c89c:	e0bffe17 	ldw	r2,-8(fp)
    c8a0:	1885883a 	add	r2,r3,r2
    c8a4:	e0bfff15 	stw	r2,-4(fp)
      space -= n;
    c8a8:	e0fff017 	ldw	r3,-64(fp)
    c8ac:	e0bffe17 	ldw	r2,-8(fp)
    c8b0:	1885c83a 	sub	r2,r3,r2
    c8b4:	e0bff015 	stw	r2,-64(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c8b8:	e0fffc17 	ldw	r3,-16(fp)
    c8bc:	e0bffe17 	ldw	r2,-8(fp)
    c8c0:	1885883a 	add	r2,r3,r2
    c8c4:	10c1ffcc 	andi	r3,r2,2047
    c8c8:	e0bff217 	ldw	r2,-56(fp)
    c8cc:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
    c8d0:	e0bff017 	ldw	r2,-64(fp)
    c8d4:	00bfcf16 	blt	zero,r2,c814 <altera_avalon_jtag_uart_read+0x54>
    c8d8:	00000106 	br	c8e0 <altera_avalon_jtag_uart_read+0x120>
        break; /* No more data available */
    c8dc:	0001883a 	nop

    /* If we read any data then return it */
    if (ptr != buffer)
    c8e0:	e0ffff17 	ldw	r3,-4(fp)
    c8e4:	e0bff117 	ldw	r2,-60(fp)
    c8e8:	1880301e 	bne	r3,r2,c9ac <altera_avalon_jtag_uart_read+0x1ec>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    c8ec:	e0bfef17 	ldw	r2,-68(fp)
    c8f0:	1090000c 	andi	r2,r2,16384
    c8f4:	10002f1e 	bne	r2,zero,c9b4 <altera_avalon_jtag_uart_read+0x1f4>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
    c8f8:	d0a7c143 	ldbu	r2,-24827(gp)
    c8fc:	10803fcc 	andi	r2,r2,255
    c900:	10800058 	cmpnei	r2,r2,1
    c904:	1000161e 	bne	r2,zero,c960 <altera_avalon_jtag_uart_read+0x1a0>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
    c908:	e0bff217 	ldw	r2,-56(fp)
    c90c:	10800c17 	ldw	r2,48(r2)
    c910:	e0bff815 	stw	r2,-32(fp)
    c914:	00800144 	movi	r2,5
    c918:	e0bff78d 	sth	r2,-34(fp)
    c91c:	00bfe0c4 	movi	r2,-125
    c920:	e0bff745 	stb	r2,-35(fp)
    c924:	e03ff68d 	sth	zero,-38(fp)
  if (OSRunning)
    c928:	d0a7c143 	ldbu	r2,-24827(gp)
    c92c:	10803fcc 	andi	r2,r2,255
    c930:	10001626 	beq	r2,zero,c98c <altera_avalon_jtag_uart_read+0x1cc>
    OSFlagPend (group, flags, wait_type, timeout, &err);
    c934:	e0fff78b 	ldhu	r3,-34(fp)
    c938:	e13ff743 	ldbu	r4,-35(fp)
    c93c:	e17ff68b 	ldhu	r5,-38(fp)
    c940:	e0bff384 	addi	r2,fp,-50
    c944:	d8800015 	stw	r2,0(sp)
    c948:	280f883a 	mov	r7,r5
    c94c:	200d883a 	mov	r6,r4
    c950:	180b883a 	mov	r5,r3
    c954:	e13ff817 	ldw	r4,-32(fp)
    c958:	000694c0 	call	694c <OSFlagPend>
    return err;
    c95c:	00000c06 	br	c990 <altera_avalon_jtag_uart_read+0x1d0>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    c960:	0001883a 	nop
    c964:	e0bff217 	ldw	r2,-56(fp)
    c968:	10800d17 	ldw	r2,52(r2)
    c96c:	e0fffd17 	ldw	r3,-12(fp)
    c970:	1880071e 	bne	r3,r2,c990 <altera_avalon_jtag_uart_read+0x1d0>
    c974:	e0bff217 	ldw	r2,-56(fp)
    c978:	10c00917 	ldw	r3,36(r2)
    c97c:	e0bff217 	ldw	r2,-56(fp)
    c980:	10800117 	ldw	r2,4(r2)
    c984:	18bff736 	bltu	r3,r2,c964 <altera_avalon_jtag_uart_read+0x1a4>
    c988:	00000106 	br	c990 <altera_avalon_jtag_uart_read+0x1d0>
  return OS_ERR_PEND_ISR;
    c98c:	0001883a 	nop
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    c990:	e0bff217 	ldw	r2,-56(fp)
    c994:	10800d17 	ldw	r2,52(r2)
    c998:	e0fffd17 	ldw	r3,-12(fp)
    c99c:	18800726 	beq	r3,r2,c9bc <altera_avalon_jtag_uart_read+0x1fc>
  while (space > 0)
    c9a0:	e0bff017 	ldw	r2,-64(fp)
    c9a4:	00bf9b16 	blt	zero,r2,c814 <altera_avalon_jtag_uart_read+0x54>
    c9a8:	00000506 	br	c9c0 <altera_avalon_jtag_uart_read+0x200>
      break;
    c9ac:	0001883a 	nop
    c9b0:	00000306 	br	c9c0 <altera_avalon_jtag_uart_read+0x200>
      break;
    c9b4:	0001883a 	nop
    c9b8:	00000106 	br	c9c0 <altera_avalon_jtag_uart_read+0x200>
      break;
    c9bc:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
    c9c0:	e0bff217 	ldw	r2,-56(fp)
    c9c4:	10800a17 	ldw	r2,40(r2)
    c9c8:	1009883a 	mov	r4,r2
    c9cc:	000983c0 	call	983c <OSSemPost>

  if (ptr != buffer)
    c9d0:	e0ffff17 	ldw	r3,-4(fp)
    c9d4:	e0bff117 	ldw	r2,-60(fp)
    c9d8:	18801926 	beq	r3,r2,ca40 <altera_avalon_jtag_uart_read+0x280>
  NIOS2_READ_STATUS (context);
    c9dc:	0005303a 	rdctl	r2,status
    c9e0:	e0bff415 	stw	r2,-48(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c9e4:	e0fff417 	ldw	r3,-48(fp)
    c9e8:	00bfff84 	movi	r2,-2
    c9ec:	1884703a 	and	r2,r3,r2
    c9f0:	1001703a 	wrctl	status,r2
  return context;
    c9f4:	e0bff417 	ldw	r2,-48(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    c9f8:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    c9fc:	e0bff217 	ldw	r2,-56(fp)
    ca00:	10800817 	ldw	r2,32(r2)
    ca04:	10c00054 	ori	r3,r2,1
    ca08:	e0bff217 	ldw	r2,-56(fp)
    ca0c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    ca10:	e0bff217 	ldw	r2,-56(fp)
    ca14:	10800017 	ldw	r2,0(r2)
    ca18:	10800104 	addi	r2,r2,4
    ca1c:	1007883a 	mov	r3,r2
    ca20:	e0bff217 	ldw	r2,-56(fp)
    ca24:	10800817 	ldw	r2,32(r2)
    ca28:	18800035 	stwio	r2,0(r3)
    ca2c:	e0bffb17 	ldw	r2,-20(fp)
    ca30:	e0bff515 	stw	r2,-44(fp)
  NIOS2_WRITE_STATUS (context);
    ca34:	e0bff517 	ldw	r2,-44(fp)
    ca38:	1001703a 	wrctl	status,r2
}
    ca3c:	0001883a 	nop
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    ca40:	e0ffff17 	ldw	r3,-4(fp)
    ca44:	e0bff117 	ldw	r2,-60(fp)
    ca48:	18800426 	beq	r3,r2,ca5c <altera_avalon_jtag_uart_read+0x29c>
    return ptr - buffer;
    ca4c:	e0ffff17 	ldw	r3,-4(fp)
    ca50:	e0bff117 	ldw	r2,-60(fp)
    ca54:	1885c83a 	sub	r2,r3,r2
    ca58:	00000606 	br	ca74 <altera_avalon_jtag_uart_read+0x2b4>
  else if (flags & O_NONBLOCK)
    ca5c:	e0bfef17 	ldw	r2,-68(fp)
    ca60:	1090000c 	andi	r2,r2,16384
    ca64:	10000226 	beq	r2,zero,ca70 <altera_avalon_jtag_uart_read+0x2b0>
    return -EWOULDBLOCK;
    ca68:	00bffd44 	movi	r2,-11
    ca6c:	00000106 	br	ca74 <altera_avalon_jtag_uart_read+0x2b4>
  else
    return -EIO;
    ca70:	00bffec4 	movi	r2,-5
}
    ca74:	e037883a 	mov	sp,fp
    ca78:	dfc00117 	ldw	ra,4(sp)
    ca7c:	df000017 	ldw	fp,0(sp)
    ca80:	dec00204 	addi	sp,sp,8
    ca84:	f800283a 	ret

0000ca88 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    ca88:	deffed04 	addi	sp,sp,-76
    ca8c:	dfc01215 	stw	ra,72(sp)
    ca90:	df001115 	stw	fp,68(sp)
    ca94:	df001104 	addi	fp,sp,68
    ca98:	e13ff315 	stw	r4,-52(fp)
    ca9c:	e17ff215 	stw	r5,-56(fp)
    caa0:	e1bff115 	stw	r6,-60(fp)
    caa4:	e1fff015 	stw	r7,-64(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    caa8:	e03fff15 	stw	zero,-4(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    caac:	e0bff217 	ldw	r2,-56(fp)
    cab0:	e0bffd15 	stw	r2,-12(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
    cab4:	e0bff317 	ldw	r2,-52(fp)
    cab8:	10800b17 	ldw	r2,44(r2)
    cabc:	e0bffa15 	stw	r2,-24(fp)
    cac0:	e03ff98d 	sth	zero,-26(fp)
    cac4:	e0bff98b 	ldhu	r2,-26(fp)
    cac8:	e0fff404 	addi	r3,fp,-48
    cacc:	180d883a 	mov	r6,r3
    cad0:	100b883a 	mov	r5,r2
    cad4:	e13ffa17 	ldw	r4,-24(fp)
    cad8:	00094b40 	call	94b4 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    cadc:	00003706 	br	cbbc <altera_avalon_jtag_uart_write+0x134>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    cae0:	e0bff317 	ldw	r2,-52(fp)
    cae4:	10800f17 	ldw	r2,60(r2)
    cae8:	e0bffc15 	stw	r2,-16(fp)
      out = sp->tx_out;
    caec:	e0bff317 	ldw	r2,-52(fp)
    caf0:	10801017 	ldw	r2,64(r2)
    caf4:	e0bfff15 	stw	r2,-4(fp)

      if (in < out)
    caf8:	e0fffc17 	ldw	r3,-16(fp)
    cafc:	e0bfff17 	ldw	r2,-4(fp)
    cb00:	1880062e 	bgeu	r3,r2,cb1c <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
    cb04:	e0ffff17 	ldw	r3,-4(fp)
    cb08:	e0bffc17 	ldw	r2,-16(fp)
    cb0c:	1885c83a 	sub	r2,r3,r2
    cb10:	10bfffc4 	addi	r2,r2,-1
    cb14:	e0bffe15 	stw	r2,-8(fp)
    cb18:	00000b06 	br	cb48 <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
    cb1c:	e0bfff17 	ldw	r2,-4(fp)
    cb20:	10000526 	beq	r2,zero,cb38 <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    cb24:	00c20004 	movi	r3,2048
    cb28:	e0bffc17 	ldw	r2,-16(fp)
    cb2c:	1885c83a 	sub	r2,r3,r2
    cb30:	e0bffe15 	stw	r2,-8(fp)
    cb34:	00000406 	br	cb48 <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    cb38:	00c1ffc4 	movi	r3,2047
    cb3c:	e0bffc17 	ldw	r2,-16(fp)
    cb40:	1885c83a 	sub	r2,r3,r2
    cb44:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
    cb48:	e0bffe17 	ldw	r2,-8(fp)
    cb4c:	10001e26 	beq	r2,zero,cbc8 <altera_avalon_jtag_uart_write+0x140>
        break;

      if (n > count)
    cb50:	e0fff117 	ldw	r3,-60(fp)
    cb54:	e0bffe17 	ldw	r2,-8(fp)
    cb58:	1880022e 	bgeu	r3,r2,cb64 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
    cb5c:	e0bff117 	ldw	r2,-60(fp)
    cb60:	e0bffe15 	stw	r2,-8(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    cb64:	e0bff317 	ldw	r2,-52(fp)
    cb68:	10c21104 	addi	r3,r2,2116
    cb6c:	e0bffc17 	ldw	r2,-16(fp)
    cb70:	1885883a 	add	r2,r3,r2
    cb74:	e1bffe17 	ldw	r6,-8(fp)
    cb78:	e17ff217 	ldw	r5,-56(fp)
    cb7c:	1009883a 	mov	r4,r2
    cb80:	000179c0 	call	179c <memcpy>
      ptr   += n;
    cb84:	e0fff217 	ldw	r3,-56(fp)
    cb88:	e0bffe17 	ldw	r2,-8(fp)
    cb8c:	1885883a 	add	r2,r3,r2
    cb90:	e0bff215 	stw	r2,-56(fp)
      count -= n;
    cb94:	e0fff117 	ldw	r3,-60(fp)
    cb98:	e0bffe17 	ldw	r2,-8(fp)
    cb9c:	1885c83a 	sub	r2,r3,r2
    cba0:	e0bff115 	stw	r2,-60(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    cba4:	e0fffc17 	ldw	r3,-16(fp)
    cba8:	e0bffe17 	ldw	r2,-8(fp)
    cbac:	1885883a 	add	r2,r3,r2
    cbb0:	10c1ffcc 	andi	r3,r2,2047
    cbb4:	e0bff317 	ldw	r2,-52(fp)
    cbb8:	10c00f15 	stw	r3,60(r2)
    while (count > 0)
    cbbc:	e0bff117 	ldw	r2,-60(fp)
    cbc0:	00bfc716 	blt	zero,r2,cae0 <altera_avalon_jtag_uart_write+0x58>
    cbc4:	00000106 	br	cbcc <altera_avalon_jtag_uart_write+0x144>
        break;
    cbc8:	0001883a 	nop
  NIOS2_READ_STATUS (context);
    cbcc:	0005303a 	rdctl	r2,status
    cbd0:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    cbd4:	e0fff717 	ldw	r3,-36(fp)
    cbd8:	00bfff84 	movi	r2,-2
    cbdc:	1884703a 	and	r2,r3,r2
    cbe0:	1001703a 	wrctl	status,r2
  return context;
    cbe4:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    cbe8:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    cbec:	e0bff317 	ldw	r2,-52(fp)
    cbf0:	10800817 	ldw	r2,32(r2)
    cbf4:	10c00094 	ori	r3,r2,2
    cbf8:	e0bff317 	ldw	r2,-52(fp)
    cbfc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    cc00:	e0bff317 	ldw	r2,-52(fp)
    cc04:	10800017 	ldw	r2,0(r2)
    cc08:	10800104 	addi	r2,r2,4
    cc0c:	1007883a 	mov	r3,r2
    cc10:	e0bff317 	ldw	r2,-52(fp)
    cc14:	10800817 	ldw	r2,32(r2)
    cc18:	18800035 	stwio	r2,0(r3)
    cc1c:	e0bffb17 	ldw	r2,-20(fp)
    cc20:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
    cc24:	e0bff817 	ldw	r2,-32(fp)
    cc28:	1001703a 	wrctl	status,r2
}
    cc2c:	0001883a 	nop
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    cc30:	e0bff117 	ldw	r2,-60(fp)
    cc34:	00802c0e 	bge	zero,r2,cce8 <altera_avalon_jtag_uart_write+0x260>
    {
      if (flags & O_NONBLOCK)
    cc38:	e0bff017 	ldw	r2,-64(fp)
    cc3c:	1090000c 	andi	r2,r2,16384
    cc40:	10002c1e 	bne	r2,zero,ccf4 <altera_avalon_jtag_uart_write+0x26c>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
    cc44:	d0a7c143 	ldbu	r2,-24827(gp)
    cc48:	10803fcc 	andi	r2,r2,255
    cc4c:	10800058 	cmpnei	r2,r2,1
    cc50:	1000161e 	bne	r2,zero,ccac <altera_avalon_jtag_uart_write+0x224>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
    cc54:	e0bff317 	ldw	r2,-52(fp)
    cc58:	10800c17 	ldw	r2,48(r2)
    cc5c:	e0bff615 	stw	r2,-40(fp)
    cc60:	00800184 	movi	r2,6
    cc64:	e0bff58d 	sth	r2,-42(fp)
    cc68:	00bfe0c4 	movi	r2,-125
    cc6c:	e0bff545 	stb	r2,-43(fp)
    cc70:	e03ff48d 	sth	zero,-46(fp)
  if (OSRunning)
    cc74:	d0a7c143 	ldbu	r2,-24827(gp)
    cc78:	10803fcc 	andi	r2,r2,255
    cc7c:	10001626 	beq	r2,zero,ccd8 <altera_avalon_jtag_uart_write+0x250>
    OSFlagPend (group, flags, wait_type, timeout, &err);
    cc80:	e0fff58b 	ldhu	r3,-42(fp)
    cc84:	e13ff543 	ldbu	r4,-43(fp)
    cc88:	e17ff48b 	ldhu	r5,-46(fp)
    cc8c:	e0bff444 	addi	r2,fp,-47
    cc90:	d8800015 	stw	r2,0(sp)
    cc94:	280f883a 	mov	r7,r5
    cc98:	200d883a 	mov	r6,r4
    cc9c:	180b883a 	mov	r5,r3
    cca0:	e13ff617 	ldw	r4,-40(fp)
    cca4:	000694c0 	call	694c <OSFlagPend>
    return err;
    cca8:	00000c06 	br	ccdc <altera_avalon_jtag_uart_write+0x254>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    ccac:	0001883a 	nop
    ccb0:	e0bff317 	ldw	r2,-52(fp)
    ccb4:	10801017 	ldw	r2,64(r2)
    ccb8:	e0ffff17 	ldw	r3,-4(fp)
    ccbc:	1880071e 	bne	r3,r2,ccdc <altera_avalon_jtag_uart_write+0x254>
    ccc0:	e0bff317 	ldw	r2,-52(fp)
    ccc4:	10c00917 	ldw	r3,36(r2)
    ccc8:	e0bff317 	ldw	r2,-52(fp)
    cccc:	10800117 	ldw	r2,4(r2)
    ccd0:	18bff736 	bltu	r3,r2,ccb0 <altera_avalon_jtag_uart_write+0x228>
    ccd4:	00000106 	br	ccdc <altera_avalon_jtag_uart_write+0x254>
  return OS_ERR_PEND_ISR;
    ccd8:	0001883a 	nop
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    ccdc:	e0bff317 	ldw	r2,-52(fp)
    cce0:	10800917 	ldw	r2,36(r2)
    cce4:	1000051e 	bne	r2,zero,ccfc <altera_avalon_jtag_uart_write+0x274>
         break;
    }
  }
  while (count > 0);
    cce8:	e0bff117 	ldw	r2,-60(fp)
    ccec:	00bfb316 	blt	zero,r2,cbbc <altera_avalon_jtag_uart_write+0x134>
    ccf0:	00000306 	br	cd00 <altera_avalon_jtag_uart_write+0x278>
        break;
    ccf4:	0001883a 	nop
    ccf8:	00000106 	br	cd00 <altera_avalon_jtag_uart_write+0x278>
         break;
    ccfc:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
    cd00:	e0bff317 	ldw	r2,-52(fp)
    cd04:	10800b17 	ldw	r2,44(r2)
    cd08:	1009883a 	mov	r4,r2
    cd0c:	000983c0 	call	983c <OSSemPost>

  if (ptr != start)
    cd10:	e0fff217 	ldw	r3,-56(fp)
    cd14:	e0bffd17 	ldw	r2,-12(fp)
    cd18:	18800426 	beq	r3,r2,cd2c <altera_avalon_jtag_uart_write+0x2a4>
    return ptr - start;
    cd1c:	e0fff217 	ldw	r3,-56(fp)
    cd20:	e0bffd17 	ldw	r2,-12(fp)
    cd24:	1885c83a 	sub	r2,r3,r2
    cd28:	00000606 	br	cd44 <altera_avalon_jtag_uart_write+0x2bc>
  else if (flags & O_NONBLOCK)
    cd2c:	e0bff017 	ldw	r2,-64(fp)
    cd30:	1090000c 	andi	r2,r2,16384
    cd34:	10000226 	beq	r2,zero,cd40 <altera_avalon_jtag_uart_write+0x2b8>
    return -EWOULDBLOCK;
    cd38:	00bffd44 	movi	r2,-11
    cd3c:	00000106 	br	cd44 <altera_avalon_jtag_uart_write+0x2bc>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    cd40:	00bffec4 	movi	r2,-5
}
    cd44:	e037883a 	mov	sp,fp
    cd48:	dfc00117 	ldw	ra,4(sp)
    cd4c:	df000017 	ldw	fp,0(sp)
    cd50:	dec00204 	addi	sp,sp,8
    cd54:	f800283a 	ret

0000cd58 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    cd58:	defff904 	addi	sp,sp,-28
    cd5c:	dfc00615 	stw	ra,24(sp)
    cd60:	df000515 	stw	fp,20(sp)
    cd64:	df000504 	addi	fp,sp,20
    cd68:	e13ffc15 	stw	r4,-16(fp)
    cd6c:	e17ffb15 	stw	r5,-20(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    cd70:	0007883a 	mov	r3,zero
    cd74:	e0bffc17 	ldw	r2,-16(fp)
    cd78:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    cd7c:	e0bffc17 	ldw	r2,-16(fp)
    cd80:	10800104 	addi	r2,r2,4
    cd84:	10800037 	ldwio	r2,0(r2)
  NIOS2_READ_STATUS (context);
    cd88:	0005303a 	rdctl	r2,status
    cd8c:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    cd90:	e0fffd17 	ldw	r3,-12(fp)
    cd94:	00bfff84 	movi	r2,-2
    cd98:	1884703a 	and	r2,r3,r2
    cd9c:	1001703a 	wrctl	status,r2
  return context;
    cda0:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    cda4:	e0bfff15 	stw	r2,-4(fp)
  alt_tick ();
    cda8:	000ea7c0 	call	ea7c <alt_tick>
    cdac:	e0bfff17 	ldw	r2,-4(fp)
    cdb0:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
    cdb4:	e0bffe17 	ldw	r2,-8(fp)
    cdb8:	1001703a 	wrctl	status,r2
}
    cdbc:	0001883a 	nop
  alt_irq_enable_all(cpu_sr);
}
    cdc0:	0001883a 	nop
    cdc4:	e037883a 	mov	sp,fp
    cdc8:	dfc00117 	ldw	ra,4(sp)
    cdcc:	df000017 	ldw	fp,0(sp)
    cdd0:	dec00204 	addi	sp,sp,8
    cdd4:	f800283a 	ret

0000cdd8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    cdd8:	defff904 	addi	sp,sp,-28
    cddc:	dfc00615 	stw	ra,24(sp)
    cde0:	df000515 	stw	fp,20(sp)
    cde4:	df000504 	addi	fp,sp,20
    cde8:	e13ffe15 	stw	r4,-8(fp)
    cdec:	e17ffd15 	stw	r5,-12(fp)
    cdf0:	e1bffc15 	stw	r6,-16(fp)
    cdf4:	e1fffb15 	stw	r7,-20(fp)
    cdf8:	e0bffb17 	ldw	r2,-20(fp)
    cdfc:	e0bfff15 	stw	r2,-4(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    ce00:	d0a7cc17 	ldw	r2,-24784(gp)
    ce04:	1000031e 	bne	r2,zero,ce14 <alt_avalon_timer_sc_init+0x3c>
  {
    _alt_tick_rate = nticks;
    ce08:	e0bfff17 	ldw	r2,-4(fp)
    ce0c:	d0a7cc15 	stw	r2,-24784(gp)
    return 0;
    ce10:	00000106 	br	ce18 <alt_avalon_timer_sc_init+0x40>
  }
  else
  {
    return -1;
    ce14:	0001883a 	nop
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    ce18:	e0bffe17 	ldw	r2,-8(fp)
    ce1c:	10800104 	addi	r2,r2,4
    ce20:	00c001c4 	movi	r3,7
    ce24:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
    ce28:	01800074 	movhi	r6,1
    ce2c:	31b35604 	addi	r6,r6,-12968
    ce30:	e17ffe17 	ldw	r5,-8(fp)
    ce34:	e13ffc17 	ldw	r4,-16(fp)
    ce38:	000e6100 	call	e610 <alt_irq_register>
#endif  
}
    ce3c:	0001883a 	nop
    ce40:	e037883a 	mov	sp,fp
    ce44:	dfc00117 	ldw	ra,4(sp)
    ce48:	df000017 	ldw	fp,0(sp)
    ce4c:	dec00204 	addi	sp,sp,8
    ce50:	f800283a 	ret

0000ce54 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
    ce54:	defffc04 	addi	sp,sp,-16
    ce58:	df000315 	stw	fp,12(sp)
    ce5c:	df000304 	addi	fp,sp,12
    ce60:	e13ffe15 	stw	r4,-8(fp)
    ce64:	e17ffd15 	stw	r5,-12(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
    ce68:	e03fffc5 	stb	zero,-1(fp)
	if (y_pos == 0)
    ce6c:	e0bffd17 	ldw	r2,-12(fp)
    ce70:	1000061e 	bne	r2,zero,ce8c <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
    ce74:	e0bffe17 	ldw	r2,-8(fp)
    ce78:	1007883a 	mov	r3,r2
    ce7c:	e0bfffc3 	ldbu	r2,-1(fp)
    ce80:	10c4b03a 	or	r2,r2,r3
    ce84:	e0bfffc5 	stb	r2,-1(fp)
    ce88:	00000806 	br	ceac <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
    ce8c:	e0bffe17 	ldw	r2,-8(fp)
    ce90:	1007883a 	mov	r3,r2
    ce94:	e0bfffc3 	ldbu	r2,-1(fp)
    ce98:	10c4b03a 	or	r2,r2,r3
    ce9c:	e0bfffc5 	stb	r2,-1(fp)
		addr |= 0x00000040;
    cea0:	e0bfffc3 	ldbu	r2,-1(fp)
    cea4:	10801014 	ori	r2,r2,64
    cea8:	e0bfffc5 	stb	r2,-1(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
    ceac:	e0ffffc3 	ldbu	r3,-1(fp)
    ceb0:	00bfe004 	movi	r2,-128
    ceb4:	1884b03a 	or	r2,r3,r2
}
    ceb8:	e037883a 	mov	sp,fp
    cebc:	df000017 	ldw	fp,0(sp)
    cec0:	dec00104 	addi	sp,sp,4
    cec4:	f800283a 	ret

0000cec8 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
    cec8:	defffd04 	addi	sp,sp,-12
    cecc:	df000215 	stw	fp,8(sp)
    ced0:	df000204 	addi	fp,sp,8
    ced4:	e13fff15 	stw	r4,-4(fp)
    ced8:	2805883a 	mov	r2,r5
    cedc:	e0bffe05 	stb	r2,-8(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
    cee0:	e0bfff17 	ldw	r2,-4(fp)
    cee4:	10800a17 	ldw	r2,40(r2)
    cee8:	1007883a 	mov	r3,r2
    ceec:	e0bffe03 	ldbu	r2,-8(fp)
    cef0:	18800025 	stbio	r2,0(r3)
}
    cef4:	0001883a 	nop
    cef8:	e037883a 	mov	sp,fp
    cefc:	df000017 	ldw	fp,0(sp)
    cf00:	dec00104 	addi	sp,sp,4
    cf04:	f800283a 	ret

0000cf08 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
    cf08:	defffe04 	addi	sp,sp,-8
    cf0c:	df000115 	stw	fp,4(sp)
    cf10:	df000104 	addi	fp,sp,4
    cf14:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
    cf18:	e0bfff17 	ldw	r2,-4(fp)
    cf1c:	10800a17 	ldw	r2,40(r2)
    cf20:	1007883a 	mov	r3,r2
    cf24:	00800044 	movi	r2,1
    cf28:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
    cf2c:	0001883a 	nop
    cf30:	e037883a 	mov	sp,fp
    cf34:	df000017 	ldw	fp,0(sp)
    cf38:	dec00104 	addi	sp,sp,4
    cf3c:	f800283a 	ret

0000cf40 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
    cf40:	defffc04 	addi	sp,sp,-16
    cf44:	dfc00315 	stw	ra,12(sp)
    cf48:	df000215 	stw	fp,8(sp)
    cf4c:	df000204 	addi	fp,sp,8
    cf50:	e13ffe15 	stw	r4,-8(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
    cf54:	d1600604 	addi	r5,gp,-32744
    cf58:	e13ffe17 	ldw	r4,-8(fp)
    cf5c:	000e4200 	call	e420 <alt_find_dev>
    cf60:	e0bfff15 	stw	r2,-4(fp)

  return dev;
    cf64:	e0bfff17 	ldw	r2,-4(fp)
}
    cf68:	e037883a 	mov	sp,fp
    cf6c:	dfc00117 	ldw	ra,4(sp)
    cf70:	df000017 	ldw	fp,0(sp)
    cf74:	dec00204 	addi	sp,sp,8
    cf78:	f800283a 	ret

0000cf7c <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
    cf7c:	defffb04 	addi	sp,sp,-20
    cf80:	df000415 	stw	fp,16(sp)
    cf84:	df000404 	addi	fp,sp,16
    cf88:	e13ffe15 	stw	r4,-8(fp)
    cf8c:	e17ffd15 	stw	r5,-12(fp)
    cf90:	e1bffc15 	stw	r6,-16(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
    cf94:	e03fff15 	stw	zero,-4(fp)
    cf98:	00000f06 	br	cfd8 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
    cf9c:	e0bffe17 	ldw	r2,-8(fp)
    cfa0:	10800a17 	ldw	r2,40(r2)
    cfa4:	10800044 	addi	r2,r2,1
    cfa8:	1009883a 	mov	r4,r2
    cfac:	e0fffd17 	ldw	r3,-12(fp)
    cfb0:	e0bfff17 	ldw	r2,-4(fp)
    cfb4:	1885883a 	add	r2,r3,r2
    cfb8:	10800003 	ldbu	r2,0(r2)
    cfbc:	10803fcc 	andi	r2,r2,255
    cfc0:	1080201c 	xori	r2,r2,128
    cfc4:	10bfe004 	addi	r2,r2,-128
    cfc8:	20800025 	stbio	r2,0(r4)
	for (i = 0; i < len; i++)
    cfcc:	e0bfff17 	ldw	r2,-4(fp)
    cfd0:	10800044 	addi	r2,r2,1
    cfd4:	e0bfff15 	stw	r2,-4(fp)
    cfd8:	e0ffff17 	ldw	r3,-4(fp)
    cfdc:	e0bffc17 	ldw	r2,-16(fp)
    cfe0:	18bfee36 	bltu	r3,r2,cf9c <alt_up_character_lcd_write+0x20>
	}
}
    cfe4:	0001883a 	nop
    cfe8:	0001883a 	nop
    cfec:	e037883a 	mov	sp,fp
    cff0:	df000017 	ldw	fp,0(sp)
    cff4:	dec00104 	addi	sp,sp,4
    cff8:	f800283a 	ret

0000cffc <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
    cffc:	defffd04 	addi	sp,sp,-12
    d000:	df000215 	stw	fp,8(sp)
    d004:	df000204 	addi	fp,sp,8
    d008:	e13fff15 	stw	r4,-4(fp)
    d00c:	e17ffe15 	stw	r5,-8(fp)
	while ( *ptr )
    d010:	00000d06 	br	d048 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
    d014:	e0bfff17 	ldw	r2,-4(fp)
    d018:	10800a17 	ldw	r2,40(r2)
    d01c:	10800044 	addi	r2,r2,1
    d020:	1007883a 	mov	r3,r2
    d024:	e0bffe17 	ldw	r2,-8(fp)
    d028:	10800003 	ldbu	r2,0(r2)
    d02c:	10803fcc 	andi	r2,r2,255
    d030:	1080201c 	xori	r2,r2,128
    d034:	10bfe004 	addi	r2,r2,-128
    d038:	18800025 	stbio	r2,0(r3)
		++ptr;
    d03c:	e0bffe17 	ldw	r2,-8(fp)
    d040:	10800044 	addi	r2,r2,1
    d044:	e0bffe15 	stw	r2,-8(fp)
	while ( *ptr )
    d048:	e0bffe17 	ldw	r2,-8(fp)
    d04c:	10800003 	ldbu	r2,0(r2)
    d050:	10803fcc 	andi	r2,r2,255
    d054:	1080201c 	xori	r2,r2,128
    d058:	10bfe004 	addi	r2,r2,-128
    d05c:	103fed1e 	bne	r2,zero,d014 <alt_up_character_lcd_string+0x18>
	}
}
    d060:	0001883a 	nop
    d064:	0001883a 	nop
    d068:	e037883a 	mov	sp,fp
    d06c:	df000017 	ldw	fp,0(sp)
    d070:	dec00104 	addi	sp,sp,4
    d074:	f800283a 	ret

0000d078 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
    d078:	defffb04 	addi	sp,sp,-20
    d07c:	dfc00415 	stw	ra,16(sp)
    d080:	df000315 	stw	fp,12(sp)
    d084:	df000304 	addi	fp,sp,12
    d088:	e13fff15 	stw	r4,-4(fp)
    d08c:	e17ffe15 	stw	r5,-8(fp)
    d090:	e1bffd15 	stw	r6,-12(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
    d094:	e0bfff17 	ldw	r2,-4(fp)
    d098:	10800017 	ldw	r2,0(r2)
    d09c:	e0fffd17 	ldw	r3,-12(fp)
    d0a0:	180d883a 	mov	r6,r3
    d0a4:	e17ffe17 	ldw	r5,-8(fp)
    d0a8:	1009883a 	mov	r4,r2
    d0ac:	000cf7c0 	call	cf7c <alt_up_character_lcd_write>
	return 0;
    d0b0:	0005883a 	mov	r2,zero
}
    d0b4:	e037883a 	mov	sp,fp
    d0b8:	dfc00117 	ldw	ra,4(sp)
    d0bc:	df000017 	ldw	fp,0(sp)
    d0c0:	dec00204 	addi	sp,sp,8
    d0c4:	f800283a 	ret

0000d0c8 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
    d0c8:	defffa04 	addi	sp,sp,-24
    d0cc:	dfc00515 	stw	ra,20(sp)
    d0d0:	df000415 	stw	fp,16(sp)
    d0d4:	df000404 	addi	fp,sp,16
    d0d8:	e13ffe15 	stw	r4,-8(fp)
    d0dc:	e17ffd15 	stw	r5,-12(fp)
    d0e0:	e1bffc15 	stw	r6,-16(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
    d0e4:	e0bffd17 	ldw	r2,-12(fp)
    d0e8:	10800a28 	cmpgeui	r2,r2,40
    d0ec:	1000031e 	bne	r2,zero,d0fc <alt_up_character_lcd_set_cursor_pos+0x34>
    d0f0:	e0bffc17 	ldw	r2,-16(fp)
    d0f4:	108000b0 	cmpltui	r2,r2,2
    d0f8:	1000021e 	bne	r2,zero,d104 <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
    d0fc:	00bfffc4 	movi	r2,-1
    d100:	00000906 	br	d128 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    d104:	e17ffc17 	ldw	r5,-16(fp)
    d108:	e13ffd17 	ldw	r4,-12(fp)
    d10c:	000ce540 	call	ce54 <get_DDRAM_addr>
    d110:	e0bfffc5 	stb	r2,-1(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
    d114:	e0bfffc3 	ldbu	r2,-1(fp)
    d118:	100b883a 	mov	r5,r2
    d11c:	e13ffe17 	ldw	r4,-8(fp)
    d120:	000cec80 	call	cec8 <alt_up_character_lcd_send_cmd>
	return 0;
    d124:	0005883a 	mov	r2,zero
}
    d128:	e037883a 	mov	sp,fp
    d12c:	dfc00117 	ldw	ra,4(sp)
    d130:	df000017 	ldw	fp,0(sp)
    d134:	dec00204 	addi	sp,sp,8
    d138:	f800283a 	ret

0000d13c <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    d13c:	defffb04 	addi	sp,sp,-20
    d140:	dfc00415 	stw	ra,16(sp)
    d144:	df000315 	stw	fp,12(sp)
    d148:	df000304 	addi	fp,sp,12
    d14c:	e13ffe15 	stw	r4,-8(fp)
    d150:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
    d154:	e0bffd17 	ldw	r2,-12(fp)
    d158:	10001526 	beq	r2,zero,d1b0 <alt_up_character_lcd_shift_cursor+0x74>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
    d15c:	e0bffd17 	ldw	r2,-12(fp)
    d160:	0080020e 	bge	zero,r2,d16c <alt_up_character_lcd_shift_cursor+0x30>
    d164:	00800504 	movi	r2,20
    d168:	00000106 	br	d170 <alt_up_character_lcd_shift_cursor+0x34>
    d16c:	00800404 	movi	r2,16
    d170:	e0bfff85 	stb	r2,-2(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
    d174:	e0bffd17 	ldw	r2,-12(fp)
    d178:	1000010e 	bge	r2,zero,d180 <alt_up_character_lcd_shift_cursor+0x44>
    d17c:	0085c83a 	sub	r2,zero,r2
    d180:	e0bfffc5 	stb	r2,-1(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    d184:	00000406 	br	d198 <alt_up_character_lcd_shift_cursor+0x5c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    d188:	e0bfff83 	ldbu	r2,-2(fp)
    d18c:	100b883a 	mov	r5,r2
    d190:	e13ffe17 	ldw	r4,-8(fp)
    d194:	000cec80 	call	cec8 <alt_up_character_lcd_send_cmd>
	while (num_offset-- > 0)
    d198:	e0bfffc3 	ldbu	r2,-1(fp)
    d19c:	10ffffc4 	addi	r3,r2,-1
    d1a0:	e0ffffc5 	stb	r3,-1(fp)
    d1a4:	10803fcc 	andi	r2,r2,255
    d1a8:	103ff71e 	bne	r2,zero,d188 <alt_up_character_lcd_shift_cursor+0x4c>
    d1ac:	00000106 	br	d1b4 <alt_up_character_lcd_shift_cursor+0x78>
		return;
    d1b0:	0001883a 	nop
}
    d1b4:	e037883a 	mov	sp,fp
    d1b8:	dfc00117 	ldw	ra,4(sp)
    d1bc:	df000017 	ldw	fp,0(sp)
    d1c0:	dec00204 	addi	sp,sp,8
    d1c4:	f800283a 	ret

0000d1c8 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    d1c8:	defffb04 	addi	sp,sp,-20
    d1cc:	dfc00415 	stw	ra,16(sp)
    d1d0:	df000315 	stw	fp,12(sp)
    d1d4:	df000304 	addi	fp,sp,12
    d1d8:	e13ffe15 	stw	r4,-8(fp)
    d1dc:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
    d1e0:	e0bffd17 	ldw	r2,-12(fp)
    d1e4:	10001526 	beq	r2,zero,d23c <alt_up_character_lcd_shift_display+0x74>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
    d1e8:	e0bffd17 	ldw	r2,-12(fp)
    d1ec:	0080020e 	bge	zero,r2,d1f8 <alt_up_character_lcd_shift_display+0x30>
    d1f0:	00800704 	movi	r2,28
    d1f4:	00000106 	br	d1fc <alt_up_character_lcd_shift_display+0x34>
    d1f8:	00800604 	movi	r2,24
    d1fc:	e0bfff85 	stb	r2,-2(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
    d200:	e0bffd17 	ldw	r2,-12(fp)
    d204:	1000010e 	bge	r2,zero,d20c <alt_up_character_lcd_shift_display+0x44>
    d208:	0085c83a 	sub	r2,zero,r2
    d20c:	e0bfffc5 	stb	r2,-1(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    d210:	00000406 	br	d224 <alt_up_character_lcd_shift_display+0x5c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    d214:	e0bfff83 	ldbu	r2,-2(fp)
    d218:	100b883a 	mov	r5,r2
    d21c:	e13ffe17 	ldw	r4,-8(fp)
    d220:	000cec80 	call	cec8 <alt_up_character_lcd_send_cmd>
	while (num_offset-- > 0)
    d224:	e0bfffc3 	ldbu	r2,-1(fp)
    d228:	10ffffc4 	addi	r3,r2,-1
    d22c:	e0ffffc5 	stb	r3,-1(fp)
    d230:	10803fcc 	andi	r2,r2,255
    d234:	103ff71e 	bne	r2,zero,d214 <alt_up_character_lcd_shift_display+0x4c>
    d238:	00000106 	br	d240 <alt_up_character_lcd_shift_display+0x78>
		return;
    d23c:	0001883a 	nop
}
    d240:	e037883a 	mov	sp,fp
    d244:	dfc00117 	ldw	ra,4(sp)
    d248:	df000017 	ldw	fp,0(sp)
    d24c:	dec00204 	addi	sp,sp,8
    d250:	f800283a 	ret

0000d254 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
    d254:	defffa04 	addi	sp,sp,-24
    d258:	dfc00515 	stw	ra,20(sp)
    d25c:	df000415 	stw	fp,16(sp)
    d260:	df000404 	addi	fp,sp,16
    d264:	e13ffe15 	stw	r4,-8(fp)
    d268:	e17ffd15 	stw	r5,-12(fp)
    d26c:	e1bffc15 	stw	r6,-16(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
    d270:	e0bffd17 	ldw	r2,-12(fp)
    d274:	10800a28 	cmpgeui	r2,r2,40
    d278:	1000031e 	bne	r2,zero,d288 <alt_up_character_lcd_erase_pos+0x34>
    d27c:	e0bffc17 	ldw	r2,-16(fp)
    d280:	108000b0 	cmpltui	r2,r2,2
    d284:	1000021e 	bne	r2,zero,d290 <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
    d288:	00bfffc4 	movi	r2,-1
    d28c:	00000f06 	br	d2cc <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    d290:	e17ffc17 	ldw	r5,-16(fp)
    d294:	e13ffd17 	ldw	r4,-12(fp)
    d298:	000ce540 	call	ce54 <get_DDRAM_addr>
    d29c:	e0bfffc5 	stb	r2,-1(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
    d2a0:	e0bfffc3 	ldbu	r2,-1(fp)
    d2a4:	100b883a 	mov	r5,r2
    d2a8:	e13ffe17 	ldw	r4,-8(fp)
    d2ac:	000cec80 	call	cec8 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
    d2b0:	e0bffe17 	ldw	r2,-8(fp)
    d2b4:	10800a17 	ldw	r2,40(r2)
    d2b8:	10800044 	addi	r2,r2,1
    d2bc:	1007883a 	mov	r3,r2
    d2c0:	00800084 	movi	r2,2
    d2c4:	18800025 	stbio	r2,0(r3)
	return 0;
    d2c8:	0005883a 	mov	r2,zero
}
    d2cc:	e037883a 	mov	sp,fp
    d2d0:	dfc00117 	ldw	ra,4(sp)
    d2d4:	df000017 	ldw	fp,0(sp)
    d2d8:	dec00204 	addi	sp,sp,8
    d2dc:	f800283a 	ret

0000d2e0 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
    d2e0:	defffd04 	addi	sp,sp,-12
    d2e4:	dfc00215 	stw	ra,8(sp)
    d2e8:	df000115 	stw	fp,4(sp)
    d2ec:	df000104 	addi	fp,sp,4
    d2f0:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
    d2f4:	01400304 	movi	r5,12
    d2f8:	e13fff17 	ldw	r4,-4(fp)
    d2fc:	000cec80 	call	cec8 <alt_up_character_lcd_send_cmd>
}
    d300:	0001883a 	nop
    d304:	e037883a 	mov	sp,fp
    d308:	dfc00117 	ldw	ra,4(sp)
    d30c:	df000017 	ldw	fp,0(sp)
    d310:	dec00204 	addi	sp,sp,8
    d314:	f800283a 	ret

0000d318 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
    d318:	defffd04 	addi	sp,sp,-12
    d31c:	dfc00215 	stw	ra,8(sp)
    d320:	df000115 	stw	fp,4(sp)
    d324:	df000104 	addi	fp,sp,4
    d328:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
    d32c:	014003c4 	movi	r5,15
    d330:	e13fff17 	ldw	r4,-4(fp)
    d334:	000cec80 	call	cec8 <alt_up_character_lcd_send_cmd>
}
    d338:	0001883a 	nop
    d33c:	e037883a 	mov	sp,fp
    d340:	dfc00117 	ldw	ra,4(sp)
    d344:	df000017 	ldw	fp,0(sp)
    d348:	dec00204 	addi	sp,sp,8
    d34c:	f800283a 	ret

0000d350 <alt_up_irda_enable_read_interrupt>:
#include "altera_up_avalon_irda.h"
#include "altera_up_avalon_irda_regs.h"


void alt_up_irda_enable_read_interrupt(alt_up_irda_dev *irda)
{
    d350:	defffd04 	addi	sp,sp,-12
    d354:	df000215 	stw	fp,8(sp)
    d358:	df000204 	addi	fp,sp,8
    d35c:	e13ffe15 	stw	r4,-8(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    d360:	e0bffe17 	ldw	r2,-8(fp)
    d364:	10800a17 	ldw	r2,40(r2)
    d368:	10800104 	addi	r2,r2,4
    d36c:	10800037 	ldwio	r2,0(r2)
    d370:	e0bfff15 	stw	r2,-4(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_IRDA_CONTROL_RE_MSK;
    d374:	e0bfff17 	ldw	r2,-4(fp)
    d378:	10800054 	ori	r2,r2,1
    d37c:	e0bfff15 	stw	r2,-4(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
    d380:	e0bffe17 	ldw	r2,-8(fp)
    d384:	10800a17 	ldw	r2,40(r2)
    d388:	10800104 	addi	r2,r2,4
    d38c:	1007883a 	mov	r3,r2
    d390:	e0bfff17 	ldw	r2,-4(fp)
    d394:	18800035 	stwio	r2,0(r3)
}
    d398:	0001883a 	nop
    d39c:	e037883a 	mov	sp,fp
    d3a0:	df000017 	ldw	fp,0(sp)
    d3a4:	dec00104 	addi	sp,sp,4
    d3a8:	f800283a 	ret

0000d3ac <alt_up_irda_disable_read_interrupt>:

void alt_up_irda_disable_read_interrupt(alt_up_irda_dev *irda)
{
    d3ac:	defffd04 	addi	sp,sp,-12
    d3b0:	df000215 	stw	fp,8(sp)
    d3b4:	df000204 	addi	fp,sp,8
    d3b8:	e13ffe15 	stw	r4,-8(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    d3bc:	e0bffe17 	ldw	r2,-8(fp)
    d3c0:	10800a17 	ldw	r2,40(r2)
    d3c4:	10800104 	addi	r2,r2,4
    d3c8:	10800037 	ldwio	r2,0(r2)
    d3cc:	e0bfff15 	stw	r2,-4(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_IRDA_CONTROL_RE_MSK;
    d3d0:	e0ffff17 	ldw	r3,-4(fp)
    d3d4:	00bfff84 	movi	r2,-2
    d3d8:	1884703a 	and	r2,r3,r2
    d3dc:	e0bfff15 	stw	r2,-4(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
    d3e0:	e0bffe17 	ldw	r2,-8(fp)
    d3e4:	10800a17 	ldw	r2,40(r2)
    d3e8:	10800104 	addi	r2,r2,4
    d3ec:	1007883a 	mov	r3,r2
    d3f0:	e0bfff17 	ldw	r2,-4(fp)
    d3f4:	18800035 	stwio	r2,0(r3)
}
    d3f8:	0001883a 	nop
    d3fc:	e037883a 	mov	sp,fp
    d400:	df000017 	ldw	fp,0(sp)
    d404:	dec00104 	addi	sp,sp,4
    d408:	f800283a 	ret

0000d40c <alt_up_irda_get_used_space_in_read_FIFO>:

unsigned alt_up_irda_get_used_space_in_read_FIFO(alt_up_irda_dev *irda)
{
    d40c:	defffd04 	addi	sp,sp,-12
    d410:	df000215 	stw	fp,8(sp)
    d414:	df000204 	addi	fp,sp,8
    d418:	e13ffe15 	stw	r4,-8(fp)
	alt_u16 ravail = 0;
    d41c:	e03fff8d 	sth	zero,-2(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_IRDA_DATA(irda->base), 2); 
//	return ravail;
	ravail = IORD_ALT_UP_IRDA_RAVAIL(irda->base); 
    d420:	e0bffe17 	ldw	r2,-8(fp)
    d424:	10800a17 	ldw	r2,40(r2)
    d428:	10800084 	addi	r2,r2,2
    d42c:	1080002b 	ldhuio	r2,0(r2)
    d430:	10bfffcc 	andi	r2,r2,65535
    d434:	e0bfff8d 	sth	r2,-2(fp)
	return (ravail & ALT_UP_IRDA_RAVAIL_MSK) >> ALT_UP_IRDA_RAVAIL_OFST;
    d438:	e0bfff8b 	ldhu	r2,-2(fp)
}
    d43c:	e037883a 	mov	sp,fp
    d440:	df000017 	ldw	fp,0(sp)
    d444:	dec00104 	addi	sp,sp,4
    d448:	f800283a 	ret

0000d44c <alt_up_irda_get_available_space_in_write_FIFO>:

unsigned alt_up_irda_get_available_space_in_write_FIFO(alt_up_irda_dev *irda)
{
    d44c:	defffd04 	addi	sp,sp,-12
    d450:	df000215 	stw	fp,8(sp)
    d454:	df000204 	addi	fp,sp,8
    d458:	e13ffe15 	stw	r4,-8(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    d45c:	e0bffe17 	ldw	r2,-8(fp)
    d460:	10800a17 	ldw	r2,40(r2)
    d464:	10800104 	addi	r2,r2,4
    d468:	10800037 	ldwio	r2,0(r2)
    d46c:	e0bfff15 	stw	r2,-4(fp)
	return (ctrl_reg & ALT_UP_IRDA_CONTROL_WSPACE_MSK) >> ALT_UP_IRDA_CONTROL_WSPACE_OFST;
    d470:	e0bfff17 	ldw	r2,-4(fp)
    d474:	1004d43a 	srli	r2,r2,16
}
    d478:	e037883a 	mov	sp,fp
    d47c:	df000017 	ldw	fp,0(sp)
    d480:	dec00104 	addi	sp,sp,4
    d484:	f800283a 	ret

0000d488 <alt_up_irda_check_parity>:

int alt_up_irda_check_parity(alt_u32 data_reg)
{
    d488:	defffd04 	addi	sp,sp,-12
    d48c:	df000215 	stw	fp,8(sp)
    d490:	df000204 	addi	fp,sp,8
    d494:	e13ffe15 	stw	r4,-8(fp)
	unsigned parity_error = (data_reg & ALT_UP_IRDA_DATA_PE_MSK) >> ALT_UP_IRDA_DATA_PE_OFST;
    d498:	e0bffe17 	ldw	r2,-8(fp)
    d49c:	1004d27a 	srli	r2,r2,9
    d4a0:	1080004c 	andi	r2,r2,1
    d4a4:	e0bfff15 	stw	r2,-4(fp)
	return (parity_error ? -1 : 0);
    d4a8:	e0bfff17 	ldw	r2,-4(fp)
    d4ac:	10000226 	beq	r2,zero,d4b8 <alt_up_irda_check_parity+0x30>
    d4b0:	00bfffc4 	movi	r2,-1
    d4b4:	00000106 	br	d4bc <alt_up_irda_check_parity+0x34>
    d4b8:	0005883a 	mov	r2,zero
}
    d4bc:	e037883a 	mov	sp,fp
    d4c0:	df000017 	ldw	fp,0(sp)
    d4c4:	dec00104 	addi	sp,sp,4
    d4c8:	f800283a 	ret

0000d4cc <alt_up_irda_write_data>:

int alt_up_irda_write_data(alt_up_irda_dev *irda, alt_u8 data)
{
    d4cc:	defffd04 	addi	sp,sp,-12
    d4d0:	df000215 	stw	fp,8(sp)
    d4d4:	df000204 	addi	fp,sp,8
    d4d8:	e13fff15 	stw	r4,-4(fp)
    d4dc:	2805883a 	mov	r2,r5
    d4e0:	e0bffe05 	stb	r2,-8(fp)
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    */

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_IRDA_DATA(irda->base, (data>>ALT_UP_IRDA_DATA_DATA_OFST) & ALT_UP_IRDA_DATA_DATA_MSK);
    d4e4:	e0bfff17 	ldw	r2,-4(fp)
    d4e8:	10800a17 	ldw	r2,40(r2)
    d4ec:	1007883a 	mov	r3,r2
    d4f0:	e0bffe03 	ldbu	r2,-8(fp)
    d4f4:	18800035 	stwio	r2,0(r3)
	return 0;
    d4f8:	0005883a 	mov	r2,zero
}
    d4fc:	e037883a 	mov	sp,fp
    d500:	df000017 	ldw	fp,0(sp)
    d504:	dec00104 	addi	sp,sp,4
    d508:	f800283a 	ret

0000d50c <alt_up_irda_read_data>:

int alt_up_irda_read_data(alt_up_irda_dev *irda, alt_u8 *data, alt_u8 *parity_error)
{
    d50c:	defffa04 	addi	sp,sp,-24
    d510:	dfc00515 	stw	ra,20(sp)
    d514:	df000415 	stw	fp,16(sp)
    d518:	df000404 	addi	fp,sp,16
    d51c:	e13ffe15 	stw	r4,-8(fp)
    d520:	e17ffd15 	stw	r5,-12(fp)
    d524:	e1bffc15 	stw	r6,-16(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    d528:	e0bffe17 	ldw	r2,-8(fp)
    d52c:	10800a17 	ldw	r2,40(r2)
    d530:	10800037 	ldwio	r2,0(r2)
    d534:	e0bfff15 	stw	r2,-4(fp)
	*data = (data_reg & ALT_UP_IRDA_DATA_DATA_MSK) >> ALT_UP_IRDA_DATA_DATA_OFST;
    d538:	e0bfff17 	ldw	r2,-4(fp)
    d53c:	1007883a 	mov	r3,r2
    d540:	e0bffd17 	ldw	r2,-12(fp)
    d544:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_irda_check_parity(data_reg);
    d548:	e13fff17 	ldw	r4,-4(fp)
    d54c:	000d4880 	call	d488 <alt_up_irda_check_parity>
    d550:	1007883a 	mov	r3,r2
    d554:	e0bffc17 	ldw	r2,-16(fp)
    d558:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_IRDA_DATA_RVALID_MSK) >> ALT_UP_IRDA_DATA_RVALID_OFST) - 1);
    d55c:	e0bfff17 	ldw	r2,-4(fp)
    d560:	1004d3fa 	srli	r2,r2,15
    d564:	1080004c 	andi	r2,r2,1
    d568:	10bfffc4 	addi	r2,r2,-1
}
    d56c:	e037883a 	mov	sp,fp
    d570:	dfc00117 	ldw	ra,4(sp)
    d574:	df000017 	ldw	fp,0(sp)
    d578:	dec00204 	addi	sp,sp,8
    d57c:	f800283a 	ret

0000d580 <alt_up_irda_read_fd>:

int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
    d580:	defff804 	addi	sp,sp,-32
    d584:	dfc00715 	stw	ra,28(sp)
    d588:	df000615 	stw	fp,24(sp)
    d58c:	df000604 	addi	fp,sp,24
    d590:	e13ffc15 	stw	r4,-16(fp)
    d594:	e17ffb15 	stw	r5,-20(fp)
    d598:	e1bffa15 	stw	r6,-24(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
    d59c:	e0bffc17 	ldw	r2,-16(fp)
    d5a0:	10800017 	ldw	r2,0(r2)
    d5a4:	e0bffe15 	stw	r2,-8(fp)
	int count = 0;
    d5a8:	e03fff15 	stw	zero,-4(fp)
	alt_u8 parity_error;
	while(len--)
    d5ac:	00000c06 	br	d5e0 <alt_up_irda_read_fd+0x60>
	{
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
    d5b0:	e0bffb17 	ldw	r2,-20(fp)
    d5b4:	10c00044 	addi	r3,r2,1
    d5b8:	e0fffb15 	stw	r3,-20(fp)
    d5bc:	e0fffdc4 	addi	r3,fp,-9
    d5c0:	180d883a 	mov	r6,r3
    d5c4:	100b883a 	mov	r5,r2
    d5c8:	e13ffe17 	ldw	r4,-8(fp)
    d5cc:	000d50c0 	call	d50c <alt_up_irda_read_data>
    d5d0:	1000081e 	bne	r2,zero,d5f4 <alt_up_irda_read_fd+0x74>
			count++;
    d5d4:	e0bfff17 	ldw	r2,-4(fp)
    d5d8:	10800044 	addi	r2,r2,1
    d5dc:	e0bfff15 	stw	r2,-4(fp)
	while(len--)
    d5e0:	e0bffa17 	ldw	r2,-24(fp)
    d5e4:	10ffffc4 	addi	r3,r2,-1
    d5e8:	e0fffa15 	stw	r3,-24(fp)
    d5ec:	103ff01e 	bne	r2,zero,d5b0 <alt_up_irda_read_fd+0x30>
    d5f0:	00000106 	br	d5f8 <alt_up_irda_read_fd+0x78>
		else
			break;
    d5f4:	0001883a 	nop
	}
	return count;
    d5f8:	e0bfff17 	ldw	r2,-4(fp)
}
    d5fc:	e037883a 	mov	sp,fp
    d600:	dfc00117 	ldw	ra,4(sp)
    d604:	df000017 	ldw	fp,0(sp)
    d608:	dec00204 	addi	sp,sp,8
    d60c:	f800283a 	ret

0000d610 <alt_up_irda_write_fd>:

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
    d610:	defff904 	addi	sp,sp,-28
    d614:	dfc00615 	stw	ra,24(sp)
    d618:	df000515 	stw	fp,20(sp)
    d61c:	df000504 	addi	fp,sp,20
    d620:	e13ffd15 	stw	r4,-12(fp)
    d624:	e17ffc15 	stw	r5,-16(fp)
    d628:	e1bffb15 	stw	r6,-20(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
    d62c:	e0bffd17 	ldw	r2,-12(fp)
    d630:	10800017 	ldw	r2,0(r2)
    d634:	e0bffe15 	stw	r2,-8(fp)
	int count = 0;
    d638:	e03fff15 	stw	zero,-4(fp)
	while(len--)
    d63c:	00000c06 	br	d670 <alt_up_irda_write_fd+0x60>
	{
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
    d640:	e0bffc17 	ldw	r2,-16(fp)
    d644:	10c00044 	addi	r3,r2,1
    d648:	e0fffc15 	stw	r3,-16(fp)
    d64c:	10800003 	ldbu	r2,0(r2)
    d650:	10803fcc 	andi	r2,r2,255
    d654:	100b883a 	mov	r5,r2
    d658:	e13ffe17 	ldw	r4,-8(fp)
    d65c:	000d4cc0 	call	d4cc <alt_up_irda_write_data>
    d660:	1000081e 	bne	r2,zero,d684 <alt_up_irda_write_fd+0x74>
			count++;
    d664:	e0bfff17 	ldw	r2,-4(fp)
    d668:	10800044 	addi	r2,r2,1
    d66c:	e0bfff15 	stw	r2,-4(fp)
	while(len--)
    d670:	e0bffb17 	ldw	r2,-20(fp)
    d674:	10ffffc4 	addi	r3,r2,-1
    d678:	e0fffb15 	stw	r3,-20(fp)
    d67c:	103ff01e 	bne	r2,zero,d640 <alt_up_irda_write_fd+0x30>
    d680:	00000106 	br	d688 <alt_up_irda_write_fd+0x78>
		else
			break;
    d684:	0001883a 	nop
	}
	return count;
    d688:	e0bfff17 	ldw	r2,-4(fp)
}
    d68c:	e037883a 	mov	sp,fp
    d690:	dfc00117 	ldw	ra,4(sp)
    d694:	df000017 	ldw	fp,0(sp)
    d698:	dec00204 	addi	sp,sp,8
    d69c:	f800283a 	ret

0000d6a0 <alt_up_irda_open_dev>:

alt_up_irda_dev* alt_up_irda_open_dev(const char* name)
{
    d6a0:	defffc04 	addi	sp,sp,-16
    d6a4:	dfc00315 	stw	ra,12(sp)
    d6a8:	df000215 	stw	fp,8(sp)
    d6ac:	df000204 	addi	fp,sp,8
    d6b0:	e13ffe15 	stw	r4,-8(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_irda_dev *dev = (alt_up_irda_dev*)alt_find_dev(name, &alt_dev_list);
    d6b4:	d1600604 	addi	r5,gp,-32744
    d6b8:	e13ffe17 	ldw	r4,-8(fp)
    d6bc:	000e4200 	call	e420 <alt_find_dev>
    d6c0:	e0bfff15 	stw	r2,-4(fp)

  return dev;
    d6c4:	e0bfff17 	ldw	r2,-4(fp)
}
    d6c8:	e037883a 	mov	sp,fp
    d6cc:	dfc00117 	ldw	ra,4(sp)
    d6d0:	df000017 	ldw	fp,0(sp)
    d6d4:	dec00204 	addi	sp,sp,8
    d6d8:	f800283a 	ret

0000d6dc <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
    d6dc:	defffd04 	addi	sp,sp,-12
    d6e0:	df000215 	stw	fp,8(sp)
    d6e4:	df000204 	addi	fp,sp,8
    d6e8:	e13ffe15 	stw	r4,-8(fp)
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
    d6ec:	e0bffe17 	ldw	r2,-8(fp)
    d6f0:	1004d23a 	srli	r2,r2,8
    d6f4:	1080004c 	andi	r2,r2,1
    d6f8:	e0bfffc5 	stb	r2,-1(fp)
	return ri;
    d6fc:	e0bfffc3 	ldbu	r2,-1(fp)
}
    d700:	e037883a 	mov	sp,fp
    d704:	df000017 	ldw	fp,0(sp)
    d708:	dec00104 	addi	sp,sp,4
    d70c:	f800283a 	ret

0000d710 <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
    d710:	defffd04 	addi	sp,sp,-12
    d714:	df000215 	stw	fp,8(sp)
    d718:	df000204 	addi	fp,sp,8
    d71c:	e13ffe15 	stw	r4,-8(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
    d720:	e0bffe17 	ldw	r2,-8(fp)
    d724:	1080004c 	andi	r2,r2,1
    d728:	e0bfffc5 	stb	r2,-1(fp)
	return re;
    d72c:	e0bfffc3 	ldbu	r2,-1(fp)
}
    d730:	e037883a 	mov	sp,fp
    d734:	df000017 	ldw	fp,0(sp)
    d738:	dec00104 	addi	sp,sp,4
    d73c:	f800283a 	ret

0000d740 <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
    d740:	defffd04 	addi	sp,sp,-12
    d744:	df000215 	stw	fp,8(sp)
    d748:	df000204 	addi	fp,sp,8
    d74c:	e13ffe15 	stw	r4,-8(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
    d750:	e0bffe17 	ldw	r2,-8(fp)
    d754:	1004d2ba 	srli	r2,r2,10
    d758:	1080004c 	andi	r2,r2,1
    d75c:	e0bfffc5 	stb	r2,-1(fp)
	return re;
    d760:	e0bfffc3 	ldbu	r2,-1(fp)
}
    d764:	e037883a 	mov	sp,fp
    d768:	df000017 	ldw	fp,0(sp)
    d76c:	dec00104 	addi	sp,sp,4
    d770:	f800283a 	ret

0000d774 <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
    d774:	defffd04 	addi	sp,sp,-12
    d778:	df000215 	stw	fp,8(sp)
    d77c:	df000204 	addi	fp,sp,8
    d780:	e13ffe15 	stw	r4,-8(fp)
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
    d784:	e0bffe17 	ldw	r2,-8(fp)
    d788:	1004d43a 	srli	r2,r2,16
    d78c:	e0bfff8d 	sth	r2,-2(fp)
	return ravail;
    d790:	e0bfff8b 	ldhu	r2,-2(fp)
}
    d794:	e037883a 	mov	sp,fp
    d798:	df000017 	ldw	fp,0(sp)
    d79c:	dec00104 	addi	sp,sp,4
    d7a0:	f800283a 	ret

0000d7a4 <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
    d7a4:	defffd04 	addi	sp,sp,-12
    d7a8:	df000215 	stw	fp,8(sp)
    d7ac:	df000204 	addi	fp,sp,8
    d7b0:	e13ffe15 	stw	r4,-8(fp)
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
    d7b4:	e0bffe17 	ldw	r2,-8(fp)
    d7b8:	1004d3fa 	srli	r2,r2,15
    d7bc:	1080004c 	andi	r2,r2,1
    d7c0:	e0bfffc5 	stb	r2,-1(fp)
	return rvalid;
    d7c4:	e0bfffc3 	ldbu	r2,-1(fp)
}
    d7c8:	e037883a 	mov	sp,fp
    d7cc:	df000017 	ldw	fp,0(sp)
    d7d0:	dec00104 	addi	sp,sp,4
    d7d4:	f800283a 	ret

0000d7d8 <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
    d7d8:	defffd04 	addi	sp,sp,-12
    d7dc:	df000215 	stw	fp,8(sp)
    d7e0:	df000204 	addi	fp,sp,8
    d7e4:	e13ffe15 	stw	r4,-8(fp)
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
    d7e8:	e0bffe17 	ldw	r2,-8(fp)
    d7ec:	e0bfffc5 	stb	r2,-1(fp)
	return data;
    d7f0:	e0bfffc3 	ldbu	r2,-1(fp)
}
    d7f4:	e037883a 	mov	sp,fp
    d7f8:	df000017 	ldw	fp,0(sp)
    d7fc:	dec00104 	addi	sp,sp,4
    d800:	f800283a 	ret

0000d804 <alt_up_ps2_init>:

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
    d804:	defffb04 	addi	sp,sp,-20
    d808:	dfc00415 	stw	ra,16(sp)
    d80c:	df000315 	stw	fp,12(sp)
    d810:	df000304 	addi	fp,sp,12
    d814:	e13ffd15 	stw	r4,-12(fp)
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
    d818:	01403fc4 	movi	r5,255
    d81c:	e13ffd17 	ldw	r4,-12(fp)
    d820:	000da640 	call	da64 <alt_up_ps2_write_data_byte_with_ack>
    d824:	e0bfff15 	stw	r2,-4(fp)
	if (status == 0)
    d828:	e0bfff17 	ldw	r2,-4(fp)
    d82c:	1000211e 	bne	r2,zero,d8b4 <alt_up_ps2_init+0xb0>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    d830:	e0bffec4 	addi	r2,fp,-5
    d834:	100b883a 	mov	r5,r2
    d838:	e13ffd17 	ldw	r4,-12(fp)
    d83c:	000dac80 	call	dac8 <alt_up_ps2_read_data_byte_timeout>
    d840:	e0bfff15 	stw	r2,-4(fp)
		if (status == 0 && byte == 0xAA)
    d844:	e0bfff17 	ldw	r2,-4(fp)
    d848:	10001a1e 	bne	r2,zero,d8b4 <alt_up_ps2_init+0xb0>
    d84c:	e0bffec3 	ldbu	r2,-5(fp)
    d850:	10803fcc 	andi	r2,r2,255
    d854:	10802a98 	cmpnei	r2,r2,170
    d858:	1000161e 	bne	r2,zero,d8b4 <alt_up_ps2_init+0xb0>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    d85c:	e0bffec4 	addi	r2,fp,-5
    d860:	100b883a 	mov	r5,r2
    d864:	e13ffd17 	ldw	r4,-12(fp)
    d868:	000dac80 	call	dac8 <alt_up_ps2_read_data_byte_timeout>
    d86c:	e0bfff15 	stw	r2,-4(fp)
			if (status == -ETIMEDOUT)
    d870:	e0bfff17 	ldw	r2,-4(fp)
    d874:	10bfe318 	cmpnei	r2,r2,-116
    d878:	1000041e 	bne	r2,zero,d88c <alt_up_ps2_init+0x88>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
    d87c:	e0bffd17 	ldw	r2,-12(fp)
    d880:	00c00044 	movi	r3,1
    d884:	10c00d15 	stw	r3,52(r2)
				ps2->device_type = PS2_MOUSE;
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
			}
		}
	}
}
    d888:	00000a06 	br	d8b4 <alt_up_ps2_init+0xb0>
			else if (status == 0 && byte == 0x00)
    d88c:	e0bfff17 	ldw	r2,-4(fp)
    d890:	1000081e 	bne	r2,zero,d8b4 <alt_up_ps2_init+0xb0>
    d894:	e0bffec3 	ldbu	r2,-5(fp)
    d898:	10803fcc 	andi	r2,r2,255
    d89c:	1000051e 	bne	r2,zero,d8b4 <alt_up_ps2_init+0xb0>
				ps2->device_type = PS2_MOUSE;
    d8a0:	e0bffd17 	ldw	r2,-12(fp)
    d8a4:	10000d15 	stw	zero,52(r2)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
    d8a8:	01403d04 	movi	r5,244
    d8ac:	e13ffd17 	ldw	r4,-12(fp)
    d8b0:	000d9880 	call	d988 <alt_up_ps2_write_data_byte>
}
    d8b4:	0001883a 	nop
    d8b8:	e037883a 	mov	sp,fp
    d8bc:	dfc00117 	ldw	ra,4(sp)
    d8c0:	df000017 	ldw	fp,0(sp)
    d8c4:	dec00204 	addi	sp,sp,8
    d8c8:	f800283a 	ret

0000d8cc <alt_up_ps2_enable_read_interrupt>:

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
    d8cc:	defffd04 	addi	sp,sp,-12
    d8d0:	df000215 	stw	fp,8(sp)
    d8d4:	df000204 	addi	fp,sp,8
    d8d8:	e13ffe15 	stw	r4,-8(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    d8dc:	e0bffe17 	ldw	r2,-8(fp)
    d8e0:	10800a17 	ldw	r2,40(r2)
    d8e4:	10800104 	addi	r2,r2,4
    d8e8:	10800037 	ldwio	r2,0(r2)
    d8ec:	e0bfff15 	stw	r2,-4(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
    d8f0:	e0bfff17 	ldw	r2,-4(fp)
    d8f4:	10800054 	ori	r2,r2,1
    d8f8:	e0bfff15 	stw	r2,-4(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    d8fc:	e0bffe17 	ldw	r2,-8(fp)
    d900:	10800a17 	ldw	r2,40(r2)
    d904:	10800104 	addi	r2,r2,4
    d908:	1007883a 	mov	r3,r2
    d90c:	e0bfff17 	ldw	r2,-4(fp)
    d910:	18800035 	stwio	r2,0(r3)
}
    d914:	0001883a 	nop
    d918:	e037883a 	mov	sp,fp
    d91c:	df000017 	ldw	fp,0(sp)
    d920:	dec00104 	addi	sp,sp,4
    d924:	f800283a 	ret

0000d928 <alt_up_ps2_disable_read_interrupt>:

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
    d928:	defffd04 	addi	sp,sp,-12
    d92c:	df000215 	stw	fp,8(sp)
    d930:	df000204 	addi	fp,sp,8
    d934:	e13ffe15 	stw	r4,-8(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    d938:	e0bffe17 	ldw	r2,-8(fp)
    d93c:	10800a17 	ldw	r2,40(r2)
    d940:	10800104 	addi	r2,r2,4
    d944:	10800037 	ldwio	r2,0(r2)
    d948:	e0bfff15 	stw	r2,-4(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
    d94c:	e0ffff17 	ldw	r3,-4(fp)
    d950:	00bfff84 	movi	r2,-2
    d954:	1884703a 	and	r2,r3,r2
    d958:	e0bfff15 	stw	r2,-4(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    d95c:	e0bffe17 	ldw	r2,-8(fp)
    d960:	10800a17 	ldw	r2,40(r2)
    d964:	10800104 	addi	r2,r2,4
    d968:	1007883a 	mov	r3,r2
    d96c:	e0bfff17 	ldw	r2,-4(fp)
    d970:	18800035 	stwio	r2,0(r3)
}
    d974:	0001883a 	nop
    d978:	e037883a 	mov	sp,fp
    d97c:	df000017 	ldw	fp,0(sp)
    d980:	dec00104 	addi	sp,sp,4
    d984:	f800283a 	ret

0000d988 <alt_up_ps2_write_data_byte>:

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
    d988:	defffb04 	addi	sp,sp,-20
    d98c:	dfc00415 	stw	ra,16(sp)
    d990:	df000315 	stw	fp,12(sp)
    d994:	df000304 	addi	fp,sp,12
    d998:	e13ffe15 	stw	r4,-8(fp)
    d99c:	2805883a 	mov	r2,r5
    d9a0:	e0bffd05 	stb	r2,-12(fp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
    d9a4:	e0bffe17 	ldw	r2,-8(fp)
    d9a8:	10800a17 	ldw	r2,40(r2)
    d9ac:	1007883a 	mov	r3,r2
    d9b0:	e0bffd03 	ldbu	r2,-12(fp)
    d9b4:	18800025 	stbio	r2,0(r3)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
    d9b8:	e0bffe17 	ldw	r2,-8(fp)
    d9bc:	10800a17 	ldw	r2,40(r2)
    d9c0:	10800104 	addi	r2,r2,4
    d9c4:	10800037 	ldwio	r2,0(r2)
    d9c8:	e0bfff15 	stw	r2,-4(fp)
	if (read_CE_bit(ctrl_reg))
    d9cc:	e13fff17 	ldw	r4,-4(fp)
    d9d0:	000d7400 	call	d740 <read_CE_bit>
    d9d4:	10803fcc 	andi	r2,r2,255
    d9d8:	10000226 	beq	r2,zero,d9e4 <alt_up_ps2_write_data_byte+0x5c>
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
    d9dc:	00bffec4 	movi	r2,-5
    d9e0:	00000106 	br	d9e8 <alt_up_ps2_write_data_byte+0x60>
	}
	return 0;
    d9e4:	0005883a 	mov	r2,zero
}
    d9e8:	e037883a 	mov	sp,fp
    d9ec:	dfc00117 	ldw	ra,4(sp)
    d9f0:	df000017 	ldw	fp,0(sp)
    d9f4:	dec00204 	addi	sp,sp,8
    d9f8:	f800283a 	ret

0000d9fc <alt_up_ps2_wait_for_ack>:

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
    d9fc:	defffc04 	addi	sp,sp,-16
    da00:	dfc00315 	stw	ra,12(sp)
    da04:	df000215 	stw	fp,8(sp)
    da08:	df000204 	addi	fp,sp,8
    da0c:	e13ffe15 	stw	r4,-8(fp)
	unsigned char data = 0;
    da10:	e03fff85 	stb	zero,-2(fp)
	unsigned char status = 0;
    da14:	e03fffc5 	stb	zero,-1(fp)
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
    da18:	e0bfff84 	addi	r2,fp,-2
    da1c:	100b883a 	mov	r5,r2
    da20:	e13ffe17 	ldw	r4,-8(fp)
    da24:	000dac80 	call	dac8 <alt_up_ps2_read_data_byte_timeout>
    da28:	e0bfffc5 	stb	r2,-1(fp)
		if ( status == 0)
    da2c:	e0bfffc3 	ldbu	r2,-1(fp)
    da30:	1000061e 	bne	r2,zero,da4c <alt_up_ps2_wait_for_ack+0x50>
		{
			if (data == PS2_ACK)
    da34:	e0bfff83 	ldbu	r2,-2(fp)
    da38:	10803fcc 	andi	r2,r2,255
    da3c:	10803e98 	cmpnei	r2,r2,250
    da40:	103ff51e 	bne	r2,zero,da18 <alt_up_ps2_wait_for_ack+0x1c>
				return 0;
    da44:	0005883a 	mov	r2,zero
    da48:	00000106 	br	da50 <alt_up_ps2_wait_for_ack+0x54>
		}
		else 
		{
			return status;
    da4c:	e0bfffc3 	ldbu	r2,-1(fp)
		}
	} while(1);
	return -ETIMEDOUT;
}
    da50:	e037883a 	mov	sp,fp
    da54:	dfc00117 	ldw	ra,4(sp)
    da58:	df000017 	ldw	fp,0(sp)
    da5c:	dec00204 	addi	sp,sp,8
    da60:	f800283a 	ret

0000da64 <alt_up_ps2_write_data_byte_with_ack>:

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
    da64:	defffa04 	addi	sp,sp,-24
    da68:	dfc00515 	stw	ra,20(sp)
    da6c:	df000415 	stw	fp,16(sp)
    da70:	df000404 	addi	fp,sp,16
    da74:	e13ffd15 	stw	r4,-12(fp)
    da78:	2805883a 	mov	r2,r5
    da7c:	e0bffc05 	stb	r2,-16(fp)
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
    da80:	e0bffc03 	ldbu	r2,-16(fp)
    da84:	100b883a 	mov	r5,r2
    da88:	e13ffd17 	ldw	r4,-12(fp)
    da8c:	000d9880 	call	d988 <alt_up_ps2_write_data_byte>
    da90:	e0bfff15 	stw	r2,-4(fp)
	if ( send_status != 0)
    da94:	e0bfff17 	ldw	r2,-4(fp)
    da98:	10000226 	beq	r2,zero,daa4 <alt_up_ps2_write_data_byte_with_ack+0x40>
		// return on sending error
		return send_status;
    da9c:	e0bfff17 	ldw	r2,-4(fp)
    daa0:	00000406 	br	dab4 <alt_up_ps2_write_data_byte_with_ack+0x50>

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
    daa4:	e13ffd17 	ldw	r4,-12(fp)
    daa8:	000d9fc0 	call	d9fc <alt_up_ps2_wait_for_ack>
    daac:	e0bffe15 	stw	r2,-8(fp)
	return ack_status;
    dab0:	e0bffe17 	ldw	r2,-8(fp)
}
    dab4:	e037883a 	mov	sp,fp
    dab8:	dfc00117 	ldw	ra,4(sp)
    dabc:	df000017 	ldw	fp,0(sp)
    dac0:	dec00204 	addi	sp,sp,8
    dac4:	f800283a 	ret

0000dac8 <alt_up_ps2_read_data_byte_timeout>:

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    dac8:	defffa04 	addi	sp,sp,-24
    dacc:	dfc00515 	stw	ra,20(sp)
    dad0:	df000415 	stw	fp,16(sp)
    dad4:	df000404 	addi	fp,sp,16
    dad8:	e13ffd15 	stw	r4,-12(fp)
    dadc:	e17ffc15 	stw	r5,-16(fp)
	unsigned int data_reg = 0; 
    dae0:	e03ffe15 	stw	zero,-8(fp)
	unsigned int count = 0;
    dae4:	e03fff15 	stw	zero,-4(fp)
	do {
		count++;
    dae8:	e0bfff17 	ldw	r2,-4(fp)
    daec:	10800044 	addi	r2,r2,1
    daf0:	e0bfff15 	stw	r2,-4(fp)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    daf4:	e0bffd17 	ldw	r2,-12(fp)
    daf8:	10800a17 	ldw	r2,40(r2)
    dafc:	10800037 	ldwio	r2,0(r2)
    db00:	e0bffe15 	stw	r2,-8(fp)
		if (read_data_valid(data_reg))
    db04:	e13ffe17 	ldw	r4,-8(fp)
    db08:	000d7a40 	call	d7a4 <read_data_valid>
    db0c:	10803fcc 	andi	r2,r2,255
    db10:	10000726 	beq	r2,zero,db30 <alt_up_ps2_read_data_byte_timeout+0x68>
		{
			*byte = read_data_byte(data_reg);
    db14:	e13ffe17 	ldw	r4,-8(fp)
    db18:	000d7d80 	call	d7d8 <read_data_byte>
    db1c:	1007883a 	mov	r3,r2
    db20:	e0bffc17 	ldw	r2,-16(fp)
    db24:	10c00005 	stb	r3,0(r2)
			return 0;
    db28:	0005883a 	mov	r2,zero
    db2c:	00000806 	br	db50 <alt_up_ps2_read_data_byte_timeout+0x88>
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
    db30:	e0bffd17 	ldw	r2,-12(fp)
    db34:	10800c17 	ldw	r2,48(r2)
    db38:	103feb26 	beq	r2,zero,dae8 <alt_up_ps2_read_data_byte_timeout+0x20>
    db3c:	e0bffd17 	ldw	r2,-12(fp)
    db40:	10c00c17 	ldw	r3,48(r2)
    db44:	e0bfff17 	ldw	r2,-4(fp)
    db48:	18bfe72e 	bgeu	r3,r2,dae8 <alt_up_ps2_read_data_byte_timeout+0x20>
		{
			return -ETIMEDOUT;
    db4c:	00bfe304 	movi	r2,-116
		}
	} while (1);
}
    db50:	e037883a 	mov	sp,fp
    db54:	dfc00117 	ldw	ra,4(sp)
    db58:	df000017 	ldw	fp,0(sp)
    db5c:	dec00204 	addi	sp,sp,8
    db60:	f800283a 	ret

0000db64 <alt_up_ps2_read_data_byte>:

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    db64:	defffb04 	addi	sp,sp,-20
    db68:	dfc00415 	stw	ra,16(sp)
    db6c:	df000315 	stw	fp,12(sp)
    db70:	df000304 	addi	fp,sp,12
    db74:	e13ffe15 	stw	r4,-8(fp)
    db78:	e17ffd15 	stw	r5,-12(fp)
	unsigned int data_reg = 0; 
    db7c:	e03fff15 	stw	zero,-4(fp)
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    db80:	e0bffe17 	ldw	r2,-8(fp)
    db84:	10800a17 	ldw	r2,40(r2)
    db88:	10800037 	ldwio	r2,0(r2)
    db8c:	e0bfff15 	stw	r2,-4(fp)
	if (read_data_valid(data_reg))
    db90:	e13fff17 	ldw	r4,-4(fp)
    db94:	000d7a40 	call	d7a4 <read_data_valid>
    db98:	10803fcc 	andi	r2,r2,255
    db9c:	10000726 	beq	r2,zero,dbbc <alt_up_ps2_read_data_byte+0x58>
	{
		*byte = read_data_byte(data_reg);
    dba0:	e13fff17 	ldw	r4,-4(fp)
    dba4:	000d7d80 	call	d7d8 <read_data_byte>
    dba8:	1007883a 	mov	r3,r2
    dbac:	e0bffd17 	ldw	r2,-12(fp)
    dbb0:	10c00005 	stb	r3,0(r2)
		return 0;
    dbb4:	0005883a 	mov	r2,zero
    dbb8:	00000106 	br	dbc0 <alt_up_ps2_read_data_byte+0x5c>
	}
	return -1;
    dbbc:	00bfffc4 	movi	r2,-1
}
    dbc0:	e037883a 	mov	sp,fp
    dbc4:	dfc00117 	ldw	ra,4(sp)
    dbc8:	df000017 	ldw	fp,0(sp)
    dbcc:	dec00204 	addi	sp,sp,8
    dbd0:	f800283a 	ret

0000dbd4 <alt_up_ps2_clear_fifo>:

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
    dbd4:	defffb04 	addi	sp,sp,-20
    dbd8:	dfc00415 	stw	ra,16(sp)
    dbdc:	df000315 	stw	fp,12(sp)
    dbe0:	df000304 	addi	fp,sp,12
    dbe4:	e13ffd15 	stw	r4,-12(fp)
	// The DATA byte of the data register will be automatically cleared after a read
	// So we simply keep reading it until there are no available bytes
	alt_u16 num = 0;
    dbe8:	e03fff8d 	sth	zero,-2(fp)
	unsigned int data_reg = 0;
    dbec:	e03ffe15 	stw	zero,-8(fp)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    dbf0:	e0bffd17 	ldw	r2,-12(fp)
    dbf4:	10800a17 	ldw	r2,40(r2)
    dbf8:	10800037 	ldwio	r2,0(r2)
    dbfc:	e0bffe15 	stw	r2,-8(fp)
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
    dc00:	e13ffe17 	ldw	r4,-8(fp)
    dc04:	000d7740 	call	d774 <read_num_bytes_available>
    dc08:	e0bfff8d 	sth	r2,-2(fp)
	} while (num > 0);
    dc0c:	e0bfff8b 	ldhu	r2,-2(fp)
    dc10:	103ff71e 	bne	r2,zero,dbf0 <alt_up_ps2_clear_fifo+0x1c>
}
    dc14:	0001883a 	nop
    dc18:	0001883a 	nop
    dc1c:	e037883a 	mov	sp,fp
    dc20:	dfc00117 	ldw	ra,4(sp)
    dc24:	df000017 	ldw	fp,0(sp)
    dc28:	dec00204 	addi	sp,sp,8
    dc2c:	f800283a 	ret

0000dc30 <alt_up_ps2_read_fd>:

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
    dc30:	defff804 	addi	sp,sp,-32
    dc34:	dfc00715 	stw	ra,28(sp)
    dc38:	df000615 	stw	fp,24(sp)
    dc3c:	df000604 	addi	fp,sp,24
    dc40:	e13ffc15 	stw	r4,-16(fp)
    dc44:	e17ffb15 	stw	r5,-20(fp)
    dc48:	e1bffa15 	stw	r6,-24(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    dc4c:	e0bffc17 	ldw	r2,-16(fp)
    dc50:	10800017 	ldw	r2,0(r2)
    dc54:	e0bfff15 	stw	r2,-4(fp)
	int status = 0;
    dc58:	e03ffe15 	stw	zero,-8(fp)
	int count = 0;
    dc5c:	e03ffd15 	stw	zero,-12(fp)
	while (count < len);
    dc60:	e0fffd17 	ldw	r3,-12(fp)
    dc64:	e0bffa17 	ldw	r2,-24(fp)
    dc68:	18bffd16 	blt	r3,r2,dc60 <alt_up_ps2_read_fd+0x30>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, (unsigned char *)ptr++);
    dc6c:	e0bffb17 	ldw	r2,-20(fp)
    dc70:	10c00044 	addi	r3,r2,1
    dc74:	e0fffb15 	stw	r3,-20(fp)
    dc78:	100b883a 	mov	r5,r2
    dc7c:	e13fff17 	ldw	r4,-4(fp)
    dc80:	000dac80 	call	dac8 <alt_up_ps2_read_data_byte_timeout>
    dc84:	e0bffe15 	stw	r2,-8(fp)
		if (status!=0)
    dc88:	e0bffe17 	ldw	r2,-8(fp)
    dc8c:	10000226 	beq	r2,zero,dc98 <alt_up_ps2_read_fd+0x68>
			return count;
    dc90:	e0bffd17 	ldw	r2,-12(fp)
    dc94:	00000406 	br	dca8 <alt_up_ps2_read_fd+0x78>
		count++;
    dc98:	e0bffd17 	ldw	r2,-12(fp)
    dc9c:	10800044 	addi	r2,r2,1
    dca0:	e0bffd15 	stw	r2,-12(fp)
	} 
	return count;
    dca4:	e0bffd17 	ldw	r2,-12(fp)
}
    dca8:	e037883a 	mov	sp,fp
    dcac:	dfc00117 	ldw	ra,4(sp)
    dcb0:	df000017 	ldw	fp,0(sp)
    dcb4:	dec00204 	addi	sp,sp,8
    dcb8:	f800283a 	ret

0000dcbc <alt_up_ps2_write_fd>:

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
    dcbc:	defff804 	addi	sp,sp,-32
    dcc0:	dfc00715 	stw	ra,28(sp)
    dcc4:	df000615 	stw	fp,24(sp)
    dcc8:	df000604 	addi	fp,sp,24
    dccc:	e13ffc15 	stw	r4,-16(fp)
    dcd0:	e17ffb15 	stw	r5,-20(fp)
    dcd4:	e1bffa15 	stw	r6,-24(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    dcd8:	e0bffc17 	ldw	r2,-16(fp)
    dcdc:	10800017 	ldw	r2,0(r2)
    dce0:	e0bffe15 	stw	r2,-8(fp)
	int status = 0;
    dce4:	e03ffd15 	stw	zero,-12(fp)
	int count = 0;
    dce8:	e03fff15 	stw	zero,-4(fp)
	while (count < len)
    dcec:	00001006 	br	dd30 <alt_up_ps2_write_fd+0x74>
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
    dcf0:	e0bffb17 	ldw	r2,-20(fp)
    dcf4:	10c00044 	addi	r3,r2,1
    dcf8:	e0fffb15 	stw	r3,-20(fp)
    dcfc:	10800003 	ldbu	r2,0(r2)
    dd00:	10803fcc 	andi	r2,r2,255
    dd04:	100b883a 	mov	r5,r2
    dd08:	e13ffe17 	ldw	r4,-8(fp)
    dd0c:	000d9880 	call	d988 <alt_up_ps2_write_data_byte>
    dd10:	e0bffd15 	stw	r2,-12(fp)
		if (status!=0)
    dd14:	e0bffd17 	ldw	r2,-12(fp)
    dd18:	10000226 	beq	r2,zero,dd24 <alt_up_ps2_write_fd+0x68>
			return count;
    dd1c:	e0bfff17 	ldw	r2,-4(fp)
    dd20:	00000706 	br	dd40 <alt_up_ps2_write_fd+0x84>
		count++;
    dd24:	e0bfff17 	ldw	r2,-4(fp)
    dd28:	10800044 	addi	r2,r2,1
    dd2c:	e0bfff15 	stw	r2,-4(fp)
	while (count < len)
    dd30:	e0ffff17 	ldw	r3,-4(fp)
    dd34:	e0bffa17 	ldw	r2,-24(fp)
    dd38:	18bfed16 	blt	r3,r2,dcf0 <alt_up_ps2_write_fd+0x34>
	}
	return count;
    dd3c:	e0bfff17 	ldw	r2,-4(fp)
}
    dd40:	e037883a 	mov	sp,fp
    dd44:	dfc00117 	ldw	ra,4(sp)
    dd48:	df000017 	ldw	fp,0(sp)
    dd4c:	dec00204 	addi	sp,sp,8
    dd50:	f800283a 	ret

0000dd54 <alt_up_ps2_open_dev>:

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
    dd54:	defffc04 	addi	sp,sp,-16
    dd58:	dfc00315 	stw	ra,12(sp)
    dd5c:	df000215 	stw	fp,8(sp)
    dd60:	df000204 	addi	fp,sp,8
    dd64:	e13ffe15 	stw	r4,-8(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
    dd68:	d1600604 	addi	r5,gp,-32744
    dd6c:	e13ffe17 	ldw	r4,-8(fp)
    dd70:	000e4200 	call	e420 <alt_find_dev>
    dd74:	e0bfff15 	stw	r2,-4(fp)

  return dev;
    dd78:	e0bfff17 	ldw	r2,-4(fp)
}
    dd7c:	e037883a 	mov	sp,fp
    dd80:	dfc00117 	ldw	ra,4(sp)
    dd84:	df000017 	ldw	fp,0(sp)
    dd88:	dec00204 	addi	sp,sp,8
    dd8c:	f800283a 	ret

0000dd90 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
    dd90:	defffd04 	addi	sp,sp,-12
    dd94:	df000215 	stw	fp,8(sp)
    dd98:	df000204 	addi	fp,sp,8
    dd9c:	e13ffe15 	stw	r4,-8(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    dda0:	e0bffe17 	ldw	r2,-8(fp)
    dda4:	10800a17 	ldw	r2,40(r2)
    dda8:	10800104 	addi	r2,r2,4
    ddac:	10800037 	ldwio	r2,0(r2)
    ddb0:	e0bfff15 	stw	r2,-4(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
    ddb4:	e0bfff17 	ldw	r2,-4(fp)
    ddb8:	10800054 	ori	r2,r2,1
    ddbc:	e0bfff15 	stw	r2,-4(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    ddc0:	e0bffe17 	ldw	r2,-8(fp)
    ddc4:	10800a17 	ldw	r2,40(r2)
    ddc8:	10800104 	addi	r2,r2,4
    ddcc:	1007883a 	mov	r3,r2
    ddd0:	e0bfff17 	ldw	r2,-4(fp)
    ddd4:	18800035 	stwio	r2,0(r3)
}
    ddd8:	0001883a 	nop
    dddc:	e037883a 	mov	sp,fp
    dde0:	df000017 	ldw	fp,0(sp)
    dde4:	dec00104 	addi	sp,sp,4
    dde8:	f800283a 	ret

0000ddec <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
    ddec:	defffd04 	addi	sp,sp,-12
    ddf0:	df000215 	stw	fp,8(sp)
    ddf4:	df000204 	addi	fp,sp,8
    ddf8:	e13ffe15 	stw	r4,-8(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    ddfc:	e0bffe17 	ldw	r2,-8(fp)
    de00:	10800a17 	ldw	r2,40(r2)
    de04:	10800104 	addi	r2,r2,4
    de08:	10800037 	ldwio	r2,0(r2)
    de0c:	e0bfff15 	stw	r2,-4(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
    de10:	e0ffff17 	ldw	r3,-4(fp)
    de14:	00bfff84 	movi	r2,-2
    de18:	1884703a 	and	r2,r3,r2
    de1c:	e0bfff15 	stw	r2,-4(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    de20:	e0bffe17 	ldw	r2,-8(fp)
    de24:	10800a17 	ldw	r2,40(r2)
    de28:	10800104 	addi	r2,r2,4
    de2c:	1007883a 	mov	r3,r2
    de30:	e0bfff17 	ldw	r2,-4(fp)
    de34:	18800035 	stwio	r2,0(r3)
}
    de38:	0001883a 	nop
    de3c:	e037883a 	mov	sp,fp
    de40:	df000017 	ldw	fp,0(sp)
    de44:	dec00104 	addi	sp,sp,4
    de48:	f800283a 	ret

0000de4c <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
    de4c:	defffd04 	addi	sp,sp,-12
    de50:	df000215 	stw	fp,8(sp)
    de54:	df000204 	addi	fp,sp,8
    de58:	e13ffe15 	stw	r4,-8(fp)
	alt_u16 ravail = 0;
    de5c:	e03fff8d 	sth	zero,-2(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
    de60:	e0bffe17 	ldw	r2,-8(fp)
    de64:	10800a17 	ldw	r2,40(r2)
    de68:	10800084 	addi	r2,r2,2
    de6c:	1080002b 	ldhuio	r2,0(r2)
    de70:	10bfffcc 	andi	r2,r2,65535
    de74:	e0bfff8d 	sth	r2,-2(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
    de78:	e0bfff8b 	ldhu	r2,-2(fp)
}
    de7c:	e037883a 	mov	sp,fp
    de80:	df000017 	ldw	fp,0(sp)
    de84:	dec00104 	addi	sp,sp,4
    de88:	f800283a 	ret

0000de8c <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
    de8c:	defffd04 	addi	sp,sp,-12
    de90:	df000215 	stw	fp,8(sp)
    de94:	df000204 	addi	fp,sp,8
    de98:	e13ffe15 	stw	r4,-8(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    de9c:	e0bffe17 	ldw	r2,-8(fp)
    dea0:	10800a17 	ldw	r2,40(r2)
    dea4:	10800104 	addi	r2,r2,4
    dea8:	10800037 	ldwio	r2,0(r2)
    deac:	e0bfff15 	stw	r2,-4(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
    deb0:	e0bfff17 	ldw	r2,-4(fp)
    deb4:	1004d43a 	srli	r2,r2,16
}
    deb8:	e037883a 	mov	sp,fp
    debc:	df000017 	ldw	fp,0(sp)
    dec0:	dec00104 	addi	sp,sp,4
    dec4:	f800283a 	ret

0000dec8 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
    dec8:	defffd04 	addi	sp,sp,-12
    decc:	df000215 	stw	fp,8(sp)
    ded0:	df000204 	addi	fp,sp,8
    ded4:	e13ffe15 	stw	r4,-8(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
    ded8:	e0bffe17 	ldw	r2,-8(fp)
    dedc:	1004d27a 	srli	r2,r2,9
    dee0:	1080004c 	andi	r2,r2,1
    dee4:	e0bfff15 	stw	r2,-4(fp)
	return (parity_error ? -1 : 0);
    dee8:	e0bfff17 	ldw	r2,-4(fp)
    deec:	10000226 	beq	r2,zero,def8 <alt_up_rs232_check_parity+0x30>
    def0:	00bfffc4 	movi	r2,-1
    def4:	00000106 	br	defc <alt_up_rs232_check_parity+0x34>
    def8:	0005883a 	mov	r2,zero
}
    defc:	e037883a 	mov	sp,fp
    df00:	df000017 	ldw	fp,0(sp)
    df04:	dec00104 	addi	sp,sp,4
    df08:	f800283a 	ret

0000df0c <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
    df0c:	defffd04 	addi	sp,sp,-12
    df10:	df000215 	stw	fp,8(sp)
    df14:	df000204 	addi	fp,sp,8
    df18:	e13fff15 	stw	r4,-4(fp)
    df1c:	2805883a 	mov	r2,r5
    df20:	e0bffe05 	stb	r2,-8(fp)
	/*alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);*/
    
	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
    df24:	e0bfff17 	ldw	r2,-4(fp)
    df28:	10800a17 	ldw	r2,40(r2)
    df2c:	1007883a 	mov	r3,r2
    df30:	e0bffe03 	ldbu	r2,-8(fp)
    df34:	18800035 	stwio	r2,0(r3)
	return 0;
    df38:	0005883a 	mov	r2,zero
}
    df3c:	e037883a 	mov	sp,fp
    df40:	df000017 	ldw	fp,0(sp)
    df44:	dec00104 	addi	sp,sp,4
    df48:	f800283a 	ret

0000df4c <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
    df4c:	defffa04 	addi	sp,sp,-24
    df50:	dfc00515 	stw	ra,20(sp)
    df54:	df000415 	stw	fp,16(sp)
    df58:	df000404 	addi	fp,sp,16
    df5c:	e13ffe15 	stw	r4,-8(fp)
    df60:	e17ffd15 	stw	r5,-12(fp)
    df64:	e1bffc15 	stw	r6,-16(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
    df68:	e0bffe17 	ldw	r2,-8(fp)
    df6c:	10800a17 	ldw	r2,40(r2)
    df70:	10800037 	ldwio	r2,0(r2)
    df74:	e0bfff15 	stw	r2,-4(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
    df78:	e0bfff17 	ldw	r2,-4(fp)
    df7c:	1007883a 	mov	r3,r2
    df80:	e0bffd17 	ldw	r2,-12(fp)
    df84:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
    df88:	e13fff17 	ldw	r4,-4(fp)
    df8c:	000dec80 	call	dec8 <alt_up_rs232_check_parity>
    df90:	1007883a 	mov	r3,r2
    df94:	e0bffc17 	ldw	r2,-16(fp)
    df98:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
    df9c:	e0bfff17 	ldw	r2,-4(fp)
    dfa0:	1004d3fa 	srli	r2,r2,15
    dfa4:	1080004c 	andi	r2,r2,1
    dfa8:	10bfffc4 	addi	r2,r2,-1
}
    dfac:	e037883a 	mov	sp,fp
    dfb0:	dfc00117 	ldw	ra,4(sp)
    dfb4:	df000017 	ldw	fp,0(sp)
    dfb8:	dec00204 	addi	sp,sp,8
    dfbc:	f800283a 	ret

0000dfc0 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
    dfc0:	defff804 	addi	sp,sp,-32
    dfc4:	dfc00715 	stw	ra,28(sp)
    dfc8:	df000615 	stw	fp,24(sp)
    dfcc:	df000604 	addi	fp,sp,24
    dfd0:	e13ffc15 	stw	r4,-16(fp)
    dfd4:	e17ffb15 	stw	r5,-20(fp)
    dfd8:	e1bffa15 	stw	r6,-24(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    dfdc:	e0bffc17 	ldw	r2,-16(fp)
    dfe0:	10800017 	ldw	r2,0(r2)
    dfe4:	e0bffe15 	stw	r2,-8(fp)
	int count = 0;
    dfe8:	e03fff15 	stw	zero,-4(fp)
	alt_u8 parity_error;
	while(len--)
    dfec:	00000c06 	br	e020 <alt_up_rs232_read_fd+0x60>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
    dff0:	e0bffb17 	ldw	r2,-20(fp)
    dff4:	10c00044 	addi	r3,r2,1
    dff8:	e0fffb15 	stw	r3,-20(fp)
    dffc:	e0fffdc4 	addi	r3,fp,-9
    e000:	180d883a 	mov	r6,r3
    e004:	100b883a 	mov	r5,r2
    e008:	e13ffe17 	ldw	r4,-8(fp)
    e00c:	000df4c0 	call	df4c <alt_up_rs232_read_data>
    e010:	1000081e 	bne	r2,zero,e034 <alt_up_rs232_read_fd+0x74>
			count++;
    e014:	e0bfff17 	ldw	r2,-4(fp)
    e018:	10800044 	addi	r2,r2,1
    e01c:	e0bfff15 	stw	r2,-4(fp)
	while(len--)
    e020:	e0bffa17 	ldw	r2,-24(fp)
    e024:	10ffffc4 	addi	r3,r2,-1
    e028:	e0fffa15 	stw	r3,-24(fp)
    e02c:	103ff01e 	bne	r2,zero,dff0 <alt_up_rs232_read_fd+0x30>
    e030:	00000106 	br	e038 <alt_up_rs232_read_fd+0x78>
		else
			break;
    e034:	0001883a 	nop
	}
	return count;
    e038:	e0bfff17 	ldw	r2,-4(fp)
}
    e03c:	e037883a 	mov	sp,fp
    e040:	dfc00117 	ldw	ra,4(sp)
    e044:	df000017 	ldw	fp,0(sp)
    e048:	dec00204 	addi	sp,sp,8
    e04c:	f800283a 	ret

0000e050 <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
    e050:	defff904 	addi	sp,sp,-28
    e054:	dfc00615 	stw	ra,24(sp)
    e058:	df000515 	stw	fp,20(sp)
    e05c:	df000504 	addi	fp,sp,20
    e060:	e13ffd15 	stw	r4,-12(fp)
    e064:	e17ffc15 	stw	r5,-16(fp)
    e068:	e1bffb15 	stw	r6,-20(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    e06c:	e0bffd17 	ldw	r2,-12(fp)
    e070:	10800017 	ldw	r2,0(r2)
    e074:	e0bffe15 	stw	r2,-8(fp)
	int count = 0;
    e078:	e03fff15 	stw	zero,-4(fp)
	while(len--)
    e07c:	00000d06 	br	e0b4 <alt_up_rs232_write_fd+0x64>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
    e080:	e0bffc17 	ldw	r2,-16(fp)
    e084:	10800003 	ldbu	r2,0(r2)
    e088:	10803fcc 	andi	r2,r2,255
    e08c:	100b883a 	mov	r5,r2
    e090:	e13ffe17 	ldw	r4,-8(fp)
    e094:	000df0c0 	call	df0c <alt_up_rs232_write_data>
    e098:	10000b1e 	bne	r2,zero,e0c8 <alt_up_rs232_write_fd+0x78>
		{
			count++;
    e09c:	e0bfff17 	ldw	r2,-4(fp)
    e0a0:	10800044 	addi	r2,r2,1
    e0a4:	e0bfff15 	stw	r2,-4(fp)
			ptr++;
    e0a8:	e0bffc17 	ldw	r2,-16(fp)
    e0ac:	10800044 	addi	r2,r2,1
    e0b0:	e0bffc15 	stw	r2,-16(fp)
	while(len--)
    e0b4:	e0bffb17 	ldw	r2,-20(fp)
    e0b8:	10ffffc4 	addi	r3,r2,-1
    e0bc:	e0fffb15 	stw	r3,-20(fp)
    e0c0:	103fef1e 	bne	r2,zero,e080 <alt_up_rs232_write_fd+0x30>
    e0c4:	00000106 	br	e0cc <alt_up_rs232_write_fd+0x7c>
		}
		else
			break;
    e0c8:	0001883a 	nop
	}
	return count;
    e0cc:	e0bfff17 	ldw	r2,-4(fp)
}
    e0d0:	e037883a 	mov	sp,fp
    e0d4:	dfc00117 	ldw	ra,4(sp)
    e0d8:	df000017 	ldw	fp,0(sp)
    e0dc:	dec00204 	addi	sp,sp,8
    e0e0:	f800283a 	ret

0000e0e4 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
    e0e4:	defffc04 	addi	sp,sp,-16
    e0e8:	dfc00315 	stw	ra,12(sp)
    e0ec:	df000215 	stw	fp,8(sp)
    e0f0:	df000204 	addi	fp,sp,8
    e0f4:	e13ffe15 	stw	r4,-8(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
    e0f8:	d1600604 	addi	r5,gp,-32744
    e0fc:	e13ffe17 	ldw	r4,-8(fp)
    e100:	000e4200 	call	e420 <alt_find_dev>
    e104:	e0bfff15 	stw	r2,-4(fp)

  return dev;
    e108:	e0bfff17 	ldw	r2,-4(fp)
}
    e10c:	e037883a 	mov	sp,fp
    e110:	dfc00117 	ldw	ra,4(sp)
    e114:	df000017 	ldw	fp,0(sp)
    e118:	dec00204 	addi	sp,sp,8
    e11c:	f800283a 	ret

0000e120 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    e120:	defff504 	addi	sp,sp,-44
    e124:	df000a15 	stw	fp,40(sp)
    e128:	df000a04 	addi	fp,sp,40
    e12c:	e13ff915 	stw	r4,-28(fp)
    e130:	e17ff815 	stw	r5,-32(fp)
    e134:	e1bff715 	stw	r6,-36(fp)
    e138:	e1fff615 	stw	r7,-40(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    e13c:	e03fff15 	stw	zero,-4(fp)
  return _alt_tick_rate;
    e140:	d0a7cc17 	ldw	r2,-24784(gp)
  
  if (alt_ticks_per_second ())
    e144:	10003e26 	beq	r2,zero,e240 <alt_alarm_start+0x120>
  {
    if (alarm)
    e148:	e0bff917 	ldw	r2,-28(fp)
    e14c:	10003a26 	beq	r2,zero,e238 <alt_alarm_start+0x118>
    {
      alarm->callback = callback;
    e150:	e0bff917 	ldw	r2,-28(fp)
    e154:	e0fff717 	ldw	r3,-36(fp)
    e158:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    e15c:	e0bff917 	ldw	r2,-28(fp)
    e160:	e0fff617 	ldw	r3,-40(fp)
    e164:	10c00515 	stw	r3,20(r2)
  NIOS2_READ_STATUS (context);
    e168:	0005303a 	rdctl	r2,status
    e16c:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e170:	e0fffd17 	ldw	r3,-12(fp)
    e174:	00bfff84 	movi	r2,-2
    e178:	1884703a 	and	r2,r3,r2
    e17c:	1001703a 	wrctl	status,r2
  return context;
    e180:	e0bffd17 	ldw	r2,-12(fp)
 
      irq_context = alt_irq_disable_all ();
    e184:	e0bffe15 	stw	r2,-8(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    e188:	d0a7cd17 	ldw	r2,-24780(gp)
      
      current_nticks = alt_nticks();
    e18c:	e0bfff15 	stw	r2,-4(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    e190:	e0fff817 	ldw	r3,-32(fp)
    e194:	e0bfff17 	ldw	r2,-4(fp)
    e198:	1885883a 	add	r2,r3,r2
    e19c:	10c00044 	addi	r3,r2,1
    e1a0:	e0bff917 	ldw	r2,-28(fp)
    e1a4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    e1a8:	e0bff917 	ldw	r2,-28(fp)
    e1ac:	10c00217 	ldw	r3,8(r2)
    e1b0:	e0bfff17 	ldw	r2,-4(fp)
    e1b4:	1880042e 	bgeu	r3,r2,e1c8 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
    e1b8:	e0bff917 	ldw	r2,-28(fp)
    e1bc:	00c00044 	movi	r3,1
    e1c0:	10c00405 	stb	r3,16(r2)
    e1c4:	00000206 	br	e1d0 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
    e1c8:	e0bff917 	ldw	r2,-28(fp)
    e1cc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    e1d0:	e0bff917 	ldw	r2,-28(fp)
    e1d4:	d0e02b04 	addi	r3,gp,-32596
    e1d8:	e0fffb15 	stw	r3,-20(fp)
    e1dc:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    e1e0:	e0bffa17 	ldw	r2,-24(fp)
    e1e4:	e0fffb17 	ldw	r3,-20(fp)
    e1e8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    e1ec:	e0bffb17 	ldw	r2,-20(fp)
    e1f0:	10c00017 	ldw	r3,0(r2)
    e1f4:	e0bffa17 	ldw	r2,-24(fp)
    e1f8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    e1fc:	e0bffb17 	ldw	r2,-20(fp)
    e200:	10800017 	ldw	r2,0(r2)
    e204:	e0fffa17 	ldw	r3,-24(fp)
    e208:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    e20c:	e0bffb17 	ldw	r2,-20(fp)
    e210:	e0fffa17 	ldw	r3,-24(fp)
    e214:	10c00015 	stw	r3,0(r2)
}
    e218:	0001883a 	nop
    e21c:	e0bffe17 	ldw	r2,-8(fp)
    e220:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    e224:	e0bffc17 	ldw	r2,-16(fp)
    e228:	1001703a 	wrctl	status,r2
}
    e22c:	0001883a 	nop
      alt_irq_enable_all (irq_context);

      return 0;
    e230:	0005883a 	mov	r2,zero
    e234:	00000306 	br	e244 <alt_alarm_start+0x124>
    }
    else
    {
      return -EINVAL;
    e238:	00bffa84 	movi	r2,-22
    e23c:	00000106 	br	e244 <alt_alarm_start+0x124>
    }
  }
  else
  {
    return -ENOTSUP;
    e240:	00bfde84 	movi	r2,-134
  }
}
    e244:	e037883a 	mov	sp,fp
    e248:	df000017 	ldw	fp,0(sp)
    e24c:	dec00104 	addi	sp,sp,4
    e250:	f800283a 	ret

0000e254 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    e254:	deffff04 	addi	sp,sp,-4
    e258:	df000015 	stw	fp,0(sp)
    e25c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    e260:	0001883a 	nop
    e264:	e037883a 	mov	sp,fp
    e268:	df000017 	ldw	fp,0(sp)
    e26c:	dec00104 	addi	sp,sp,4
    e270:	f800283a 	ret

0000e274 <alt_get_errno>:
{
    e274:	defffe04 	addi	sp,sp,-8
    e278:	dfc00115 	stw	ra,4(sp)
    e27c:	df000015 	stw	fp,0(sp)
    e280:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e284:	d0a00917 	ldw	r2,-32732(gp)
    e288:	10000326 	beq	r2,zero,e298 <alt_get_errno+0x24>
    e28c:	d0a00917 	ldw	r2,-32732(gp)
    e290:	103ee83a 	callr	r2
    e294:	00000106 	br	e29c <alt_get_errno+0x28>
    e298:	d0a7b004 	addi	r2,gp,-24896
}
    e29c:	e037883a 	mov	sp,fp
    e2a0:	dfc00117 	ldw	ra,4(sp)
    e2a4:	df000017 	ldw	fp,0(sp)
    e2a8:	dec00204 	addi	sp,sp,8
    e2ac:	f800283a 	ret

0000e2b0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    e2b0:	defffa04 	addi	sp,sp,-24
    e2b4:	dfc00515 	stw	ra,20(sp)
    e2b8:	df000415 	stw	fp,16(sp)
    e2bc:	df000404 	addi	fp,sp,16
    e2c0:	e13ffd15 	stw	r4,-12(fp)
    e2c4:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    e2c8:	e0bffd17 	ldw	r2,-12(fp)
    e2cc:	10000326 	beq	r2,zero,e2dc <alt_dev_llist_insert+0x2c>
    e2d0:	e0bffd17 	ldw	r2,-12(fp)
    e2d4:	10800217 	ldw	r2,8(r2)
    e2d8:	1000061e 	bne	r2,zero,e2f4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    e2dc:	000e2740 	call	e274 <alt_get_errno>
    e2e0:	1007883a 	mov	r3,r2
    e2e4:	00800584 	movi	r2,22
    e2e8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    e2ec:	00bffa84 	movi	r2,-22
    e2f0:	00001406 	br	e344 <alt_dev_llist_insert+0x94>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    e2f4:	e0bffd17 	ldw	r2,-12(fp)
    e2f8:	e0fffc17 	ldw	r3,-16(fp)
    e2fc:	e0ffff15 	stw	r3,-4(fp)
    e300:	e0bffe15 	stw	r2,-8(fp)
  entry->previous = list;
    e304:	e0bffe17 	ldw	r2,-8(fp)
    e308:	e0ffff17 	ldw	r3,-4(fp)
    e30c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    e310:	e0bfff17 	ldw	r2,-4(fp)
    e314:	10c00017 	ldw	r3,0(r2)
    e318:	e0bffe17 	ldw	r2,-8(fp)
    e31c:	10c00015 	stw	r3,0(r2)
  list->next->previous = entry;
    e320:	e0bfff17 	ldw	r2,-4(fp)
    e324:	10800017 	ldw	r2,0(r2)
    e328:	e0fffe17 	ldw	r3,-8(fp)
    e32c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    e330:	e0bfff17 	ldw	r2,-4(fp)
    e334:	e0fffe17 	ldw	r3,-8(fp)
    e338:	10c00015 	stw	r3,0(r2)
}
    e33c:	0001883a 	nop

  return 0;  
    e340:	0005883a 	mov	r2,zero
}
    e344:	e037883a 	mov	sp,fp
    e348:	dfc00117 	ldw	ra,4(sp)
    e34c:	df000017 	ldw	fp,0(sp)
    e350:	dec00204 	addi	sp,sp,8
    e354:	f800283a 	ret

0000e358 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    e358:	defffd04 	addi	sp,sp,-12
    e35c:	dfc00215 	stw	ra,8(sp)
    e360:	df000115 	stw	fp,4(sp)
    e364:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    e368:	00800074 	movhi	r2,1
    e36c:	10bd2704 	addi	r2,r2,-2916
    e370:	e0bfff15 	stw	r2,-4(fp)
    e374:	00000606 	br	e390 <_do_ctors+0x38>
        (*ctor) (); 
    e378:	e0bfff17 	ldw	r2,-4(fp)
    e37c:	10800017 	ldw	r2,0(r2)
    e380:	103ee83a 	callr	r2
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    e384:	e0bfff17 	ldw	r2,-4(fp)
    e388:	10bfff04 	addi	r2,r2,-4
    e38c:	e0bfff15 	stw	r2,-4(fp)
    e390:	e0ffff17 	ldw	r3,-4(fp)
    e394:	00800074 	movhi	r2,1
    e398:	10bd2804 	addi	r2,r2,-2912
    e39c:	18bff62e 	bgeu	r3,r2,e378 <_do_ctors+0x20>
}
    e3a0:	0001883a 	nop
    e3a4:	0001883a 	nop
    e3a8:	e037883a 	mov	sp,fp
    e3ac:	dfc00117 	ldw	ra,4(sp)
    e3b0:	df000017 	ldw	fp,0(sp)
    e3b4:	dec00204 	addi	sp,sp,8
    e3b8:	f800283a 	ret

0000e3bc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    e3bc:	defffd04 	addi	sp,sp,-12
    e3c0:	dfc00215 	stw	ra,8(sp)
    e3c4:	df000115 	stw	fp,4(sp)
    e3c8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    e3cc:	00800074 	movhi	r2,1
    e3d0:	10bd2704 	addi	r2,r2,-2916
    e3d4:	e0bfff15 	stw	r2,-4(fp)
    e3d8:	00000606 	br	e3f4 <_do_dtors+0x38>
        (*dtor) (); 
    e3dc:	e0bfff17 	ldw	r2,-4(fp)
    e3e0:	10800017 	ldw	r2,0(r2)
    e3e4:	103ee83a 	callr	r2
  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    e3e8:	e0bfff17 	ldw	r2,-4(fp)
    e3ec:	10bfff04 	addi	r2,r2,-4
    e3f0:	e0bfff15 	stw	r2,-4(fp)
    e3f4:	e0ffff17 	ldw	r3,-4(fp)
    e3f8:	00800074 	movhi	r2,1
    e3fc:	10bd2804 	addi	r2,r2,-2912
    e400:	18bff62e 	bgeu	r3,r2,e3dc <_do_dtors+0x20>
}
    e404:	0001883a 	nop
    e408:	0001883a 	nop
    e40c:	e037883a 	mov	sp,fp
    e410:	dfc00117 	ldw	ra,4(sp)
    e414:	df000017 	ldw	fp,0(sp)
    e418:	dec00204 	addi	sp,sp,8
    e41c:	f800283a 	ret

0000e420 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    e420:	defffa04 	addi	sp,sp,-24
    e424:	dfc00515 	stw	ra,20(sp)
    e428:	df000415 	stw	fp,16(sp)
    e42c:	df000404 	addi	fp,sp,16
    e430:	e13ffd15 	stw	r4,-12(fp)
    e434:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
    e438:	e0bffc17 	ldw	r2,-16(fp)
    e43c:	10800017 	ldw	r2,0(r2)
    e440:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    e444:	e13ffd17 	ldw	r4,-12(fp)
    e448:	00004c00 	call	4c0 <strlen>
    e44c:	10800044 	addi	r2,r2,1
    e450:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    e454:	00000d06 	br	e48c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    e458:	e0bfff17 	ldw	r2,-4(fp)
    e45c:	10800217 	ldw	r2,8(r2)
    e460:	e0fffe17 	ldw	r3,-8(fp)
    e464:	180d883a 	mov	r6,r3
    e468:	e17ffd17 	ldw	r5,-12(fp)
    e46c:	1009883a 	mov	r4,r2
    e470:	000f2400 	call	f240 <memcmp>
    e474:	1000021e 	bne	r2,zero,e480 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    e478:	e0bfff17 	ldw	r2,-4(fp)
    e47c:	00000706 	br	e49c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    e480:	e0bfff17 	ldw	r2,-4(fp)
    e484:	10800017 	ldw	r2,0(r2)
    e488:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
    e48c:	e0ffff17 	ldw	r3,-4(fp)
    e490:	e0bffc17 	ldw	r2,-16(fp)
    e494:	18bff01e 	bne	r3,r2,e458 <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
    e498:	0005883a 	mov	r2,zero
}
    e49c:	e037883a 	mov	sp,fp
    e4a0:	dfc00117 	ldw	ra,4(sp)
    e4a4:	df000017 	ldw	fp,0(sp)
    e4a8:	dec00204 	addi	sp,sp,8
    e4ac:	f800283a 	ret

0000e4b0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    e4b0:	defffe04 	addi	sp,sp,-8
    e4b4:	dfc00115 	stw	ra,4(sp)
    e4b8:	df000015 	stw	fp,0(sp)
    e4bc:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    e4c0:	01440004 	movi	r5,4096
    e4c4:	0009883a 	mov	r4,zero
    e4c8:	000f0d00 	call	f0d0 <alt_icache_flush>
#endif
}
    e4cc:	0001883a 	nop
    e4d0:	e037883a 	mov	sp,fp
    e4d4:	dfc00117 	ldw	ra,4(sp)
    e4d8:	df000017 	ldw	fp,0(sp)
    e4dc:	dec00204 	addi	sp,sp,8
    e4e0:	f800283a 	ret

0000e4e4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    e4e4:	defff904 	addi	sp,sp,-28
    e4e8:	dfc00615 	stw	ra,24(sp)
    e4ec:	df000515 	stw	fp,20(sp)
    e4f0:	df000504 	addi	fp,sp,20
    e4f4:	e13ffe15 	stw	r4,-8(fp)
    e4f8:	e17ffd15 	stw	r5,-12(fp)
    e4fc:	e1bffc15 	stw	r6,-16(fp)
    e500:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
    e504:	e1bffb17 	ldw	r6,-20(fp)
    e508:	e17ffc17 	ldw	r5,-16(fp)
    e50c:	e13ffd17 	ldw	r4,-12(fp)
    e510:	000e8840 	call	e884 <open>
    e514:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
    e518:	e0bfff17 	ldw	r2,-4(fp)
    e51c:	10001716 	blt	r2,zero,e57c <alt_open_fd+0x98>
  {
    fd->dev      = alt_fd_list[old].dev;
    e520:	e0bfff17 	ldw	r2,-4(fp)
    e524:	10c00324 	muli	r3,r2,12
    e528:	00800074 	movhi	r2,1
    e52c:	1885883a 	add	r2,r3,r2
    e530:	10ffea17 	ldw	r3,-88(r2)
    e534:	e0bffe17 	ldw	r2,-8(fp)
    e538:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    e53c:	e0bfff17 	ldw	r2,-4(fp)
    e540:	10c00324 	muli	r3,r2,12
    e544:	00800074 	movhi	r2,1
    e548:	1885883a 	add	r2,r3,r2
    e54c:	10ffeb17 	ldw	r3,-84(r2)
    e550:	e0bffe17 	ldw	r2,-8(fp)
    e554:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    e558:	e0bfff17 	ldw	r2,-4(fp)
    e55c:	10c00324 	muli	r3,r2,12
    e560:	00800074 	movhi	r2,1
    e564:	1885883a 	add	r2,r3,r2
    e568:	10ffec17 	ldw	r3,-80(r2)
    e56c:	e0bffe17 	ldw	r2,-8(fp)
    e570:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    e574:	e13fff17 	ldw	r4,-4(fp)
    e578:	000390c0 	call	390c <alt_release_fd>
  }
} 
    e57c:	0001883a 	nop
    e580:	e037883a 	mov	sp,fp
    e584:	dfc00117 	ldw	ra,4(sp)
    e588:	df000017 	ldw	fp,0(sp)
    e58c:	dec00204 	addi	sp,sp,8
    e590:	f800283a 	ret

0000e594 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    e594:	defffb04 	addi	sp,sp,-20
    e598:	dfc00415 	stw	ra,16(sp)
    e59c:	df000315 	stw	fp,12(sp)
    e5a0:	df000304 	addi	fp,sp,12
    e5a4:	e13fff15 	stw	r4,-4(fp)
    e5a8:	e17ffe15 	stw	r5,-8(fp)
    e5ac:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    e5b0:	01c07fc4 	movi	r7,511
    e5b4:	01800044 	movi	r6,1
    e5b8:	e17fff17 	ldw	r5,-4(fp)
    e5bc:	01000074 	movhi	r4,1
    e5c0:	213fed04 	addi	r4,r4,-76
    e5c4:	000e4e40 	call	e4e4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    e5c8:	01c07fc4 	movi	r7,511
    e5cc:	000d883a 	mov	r6,zero
    e5d0:	e17ffe17 	ldw	r5,-8(fp)
    e5d4:	01000074 	movhi	r4,1
    e5d8:	213fea04 	addi	r4,r4,-88
    e5dc:	000e4e40 	call	e4e4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    e5e0:	01c07fc4 	movi	r7,511
    e5e4:	01800044 	movi	r6,1
    e5e8:	e17ffd17 	ldw	r5,-12(fp)
    e5ec:	01000074 	movhi	r4,1
    e5f0:	213ff004 	addi	r4,r4,-64
    e5f4:	000e4e40 	call	e4e4 <alt_open_fd>
}  
    e5f8:	0001883a 	nop
    e5fc:	e037883a 	mov	sp,fp
    e600:	dfc00117 	ldw	ra,4(sp)
    e604:	df000017 	ldw	fp,0(sp)
    e608:	dec00204 	addi	sp,sp,8
    e60c:	f800283a 	ret

0000e610 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
    e610:	defff004 	addi	sp,sp,-64
    e614:	df000f15 	stw	fp,60(sp)
    e618:	df000f04 	addi	fp,sp,60
    e61c:	e13ff315 	stw	r4,-52(fp)
    e620:	e17ff215 	stw	r5,-56(fp)
    e624:	e1bff115 	stw	r6,-60(fp)
  int rc = -EINVAL;  
    e628:	00bffa84 	movi	r2,-22
    e62c:	e0bfff15 	stw	r2,-4(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    e630:	e0bff317 	ldw	r2,-52(fp)
    e634:	10800828 	cmpgeui	r2,r2,32
    e638:	1000501e 	bne	r2,zero,e77c <alt_irq_register+0x16c>
  NIOS2_READ_STATUS (context);
    e63c:	0005303a 	rdctl	r2,status
    e640:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e644:	e0fffd17 	ldw	r3,-12(fp)
    e648:	00bfff84 	movi	r2,-2
    e64c:	1884703a 	and	r2,r3,r2
    e650:	1001703a 	wrctl	status,r2
  return context;
    e654:	e0bffd17 	ldw	r2,-12(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
    e658:	e0bffe15 	stw	r2,-8(fp)

    alt_irq[id].handler = handler;
    e65c:	e0bff317 	ldw	r2,-52(fp)
    e660:	100890fa 	slli	r4,r2,3
    e664:	e0fff117 	ldw	r3,-60(fp)
    e668:	008000b4 	movhi	r2,2
    e66c:	2085883a 	add	r2,r4,r2
    e670:	10e98a15 	stw	r3,-23000(r2)
    alt_irq[id].context = context;
    e674:	e0bff317 	ldw	r2,-52(fp)
    e678:	100890fa 	slli	r4,r2,3
    e67c:	e0fff217 	ldw	r3,-56(fp)
    e680:	008000b4 	movhi	r2,2
    e684:	2085883a 	add	r2,r4,r2
    e688:	10e98b15 	stw	r3,-22996(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    e68c:	e0bff117 	ldw	r2,-60(fp)
    e690:	10001a26 	beq	r2,zero,e6fc <alt_irq_register+0xec>
    e694:	e0bff317 	ldw	r2,-52(fp)
    e698:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_READ_STATUS (context);
    e69c:	0005303a 	rdctl	r2,status
    e6a0:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e6a4:	e0fffb17 	ldw	r3,-20(fp)
    e6a8:	00bfff84 	movi	r2,-2
    e6ac:	1884703a 	and	r2,r3,r2
    e6b0:	1001703a 	wrctl	status,r2
  return context;
    e6b4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    e6b8:	e0bffa15 	stw	r2,-24(fp)

  alt_irq_active |= (1 << id);
    e6bc:	00c00044 	movi	r3,1
    e6c0:	e0bffc17 	ldw	r2,-16(fp)
    e6c4:	1884983a 	sll	r2,r3,r2
    e6c8:	1007883a 	mov	r3,r2
    e6cc:	d0a7cb17 	ldw	r2,-24788(gp)
    e6d0:	1884b03a 	or	r2,r3,r2
    e6d4:	d0a7cb15 	stw	r2,-24788(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    e6d8:	d0a7cb17 	ldw	r2,-24788(gp)
    e6dc:	100170fa 	wrctl	ienable,r2
    e6e0:	e0bffa17 	ldw	r2,-24(fp)
    e6e4:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
    e6e8:	e0bff917 	ldw	r2,-28(fp)
    e6ec:	1001703a 	wrctl	status,r2
}
    e6f0:	0001883a 	nop

  alt_irq_enable_all(status);

  return 0;
    e6f4:	0005883a 	mov	r2,zero
    e6f8:	00001a06 	br	e764 <alt_irq_register+0x154>
    e6fc:	e0bff317 	ldw	r2,-52(fp)
    e700:	e0bff815 	stw	r2,-32(fp)
  NIOS2_READ_STATUS (context);
    e704:	0005303a 	rdctl	r2,status
    e708:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e70c:	e0fff717 	ldw	r3,-36(fp)
    e710:	00bfff84 	movi	r2,-2
    e714:	1884703a 	and	r2,r3,r2
    e718:	1001703a 	wrctl	status,r2
  return context;
    e71c:	e0bff717 	ldw	r2,-36(fp)
  status = alt_irq_disable_all ();
    e720:	e0bff615 	stw	r2,-40(fp)
  alt_irq_active &= ~(1 << id);
    e724:	00c00044 	movi	r3,1
    e728:	e0bff817 	ldw	r2,-32(fp)
    e72c:	1884983a 	sll	r2,r3,r2
    e730:	0084303a 	nor	r2,zero,r2
    e734:	1007883a 	mov	r3,r2
    e738:	d0a7cb17 	ldw	r2,-24788(gp)
    e73c:	1884703a 	and	r2,r3,r2
    e740:	d0a7cb15 	stw	r2,-24788(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    e744:	d0a7cb17 	ldw	r2,-24788(gp)
    e748:	100170fa 	wrctl	ienable,r2
    e74c:	e0bff617 	ldw	r2,-40(fp)
    e750:	e0bff515 	stw	r2,-44(fp)
  NIOS2_WRITE_STATUS (context);
    e754:	e0bff517 	ldw	r2,-44(fp)
    e758:	1001703a 	wrctl	status,r2
}
    e75c:	0001883a 	nop
  return 0;
    e760:	0005883a 	mov	r2,zero
    e764:	e0bfff15 	stw	r2,-4(fp)
    e768:	e0bffe17 	ldw	r2,-8(fp)
    e76c:	e0bff415 	stw	r2,-48(fp)
  NIOS2_WRITE_STATUS (context);
    e770:	e0bff417 	ldw	r2,-48(fp)
    e774:	1001703a 	wrctl	status,r2
}
    e778:	0001883a 	nop

    alt_irq_enable_all(status);
  }
  return rc; 
    e77c:	e0bfff17 	ldw	r2,-4(fp)
}
    e780:	e037883a 	mov	sp,fp
    e784:	df000017 	ldw	fp,0(sp)
    e788:	dec00104 	addi	sp,sp,4
    e78c:	f800283a 	ret

0000e790 <alt_get_errno>:
{
    e790:	defffe04 	addi	sp,sp,-8
    e794:	dfc00115 	stw	ra,4(sp)
    e798:	df000015 	stw	fp,0(sp)
    e79c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e7a0:	d0a00917 	ldw	r2,-32732(gp)
    e7a4:	10000326 	beq	r2,zero,e7b4 <alt_get_errno+0x24>
    e7a8:	d0a00917 	ldw	r2,-32732(gp)
    e7ac:	103ee83a 	callr	r2
    e7b0:	00000106 	br	e7b8 <alt_get_errno+0x28>
    e7b4:	d0a7b004 	addi	r2,gp,-24896
}
    e7b8:	e037883a 	mov	sp,fp
    e7bc:	dfc00117 	ldw	ra,4(sp)
    e7c0:	df000017 	ldw	fp,0(sp)
    e7c4:	dec00204 	addi	sp,sp,8
    e7c8:	f800283a 	ret

0000e7cc <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    e7cc:	defffd04 	addi	sp,sp,-12
    e7d0:	df000215 	stw	fp,8(sp)
    e7d4:	df000204 	addi	fp,sp,8
    e7d8:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    e7dc:	e0bffe17 	ldw	r2,-8(fp)
    e7e0:	10800217 	ldw	r2,8(r2)
    e7e4:	10d00034 	orhi	r3,r2,16384
    e7e8:	e0bffe17 	ldw	r2,-8(fp)
    e7ec:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    e7f0:	e03fff15 	stw	zero,-4(fp)
    e7f4:	00001a06 	br	e860 <alt_file_locked+0x94>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    e7f8:	e0bfff17 	ldw	r2,-4(fp)
    e7fc:	10c00324 	muli	r3,r2,12
    e800:	00800074 	movhi	r2,1
    e804:	1885883a 	add	r2,r3,r2
    e808:	10ffea17 	ldw	r3,-88(r2)
    e80c:	e0bffe17 	ldw	r2,-8(fp)
    e810:	10800017 	ldw	r2,0(r2)
    e814:	18800f1e 	bne	r3,r2,e854 <alt_file_locked+0x88>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    e818:	e0bfff17 	ldw	r2,-4(fp)
    e81c:	10c00324 	muli	r3,r2,12
    e820:	00800074 	movhi	r2,1
    e824:	1885883a 	add	r2,r3,r2
    e828:	10bfec17 	ldw	r2,-80(r2)
    if ((alt_fd_list[i].dev == fd->dev) &&
    e82c:	1000090e 	bge	r2,zero,e854 <alt_file_locked+0x88>
        (&alt_fd_list[i] != fd))
    e830:	e0bfff17 	ldw	r2,-4(fp)
    e834:	10c00324 	muli	r3,r2,12
    e838:	00800074 	movhi	r2,1
    e83c:	10bfea04 	addi	r2,r2,-88
    e840:	1885883a 	add	r2,r3,r2
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    e844:	e0fffe17 	ldw	r3,-8(fp)
    e848:	18800226 	beq	r3,r2,e854 <alt_file_locked+0x88>
    {
      return -EACCES;
    e84c:	00bffcc4 	movi	r2,-13
    e850:	00000806 	br	e874 <alt_file_locked+0xa8>
  for (i = 0; i <= alt_max_fd; i++)
    e854:	e0bfff17 	ldw	r2,-4(fp)
    e858:	10800044 	addi	r2,r2,1
    e85c:	e0bfff15 	stw	r2,-4(fp)
    e860:	d0a00817 	ldw	r2,-32736(gp)
    e864:	1007883a 	mov	r3,r2
    e868:	e0bfff17 	ldw	r2,-4(fp)
    e86c:	18bfe22e 	bgeu	r3,r2,e7f8 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    e870:	0005883a 	mov	r2,zero
}
    e874:	e037883a 	mov	sp,fp
    e878:	df000017 	ldw	fp,0(sp)
    e87c:	dec00104 	addi	sp,sp,4
    e880:	f800283a 	ret

0000e884 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    e884:	defff604 	addi	sp,sp,-40
    e888:	dfc00915 	stw	ra,36(sp)
    e88c:	df000815 	stw	fp,32(sp)
    e890:	df000804 	addi	fp,sp,32
    e894:	e13ffa15 	stw	r4,-24(fp)
    e898:	e17ff915 	stw	r5,-28(fp)
    e89c:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    e8a0:	00bfffc4 	movi	r2,-1
    e8a4:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
    e8a8:	00bffb44 	movi	r2,-19
    e8ac:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
    e8b0:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    e8b4:	d1600604 	addi	r5,gp,-32744
    e8b8:	e13ffa17 	ldw	r4,-24(fp)
    e8bc:	000e4200 	call	e420 <alt_find_dev>
    e8c0:	e0bfff15 	stw	r2,-4(fp)
    e8c4:	e0bfff17 	ldw	r2,-4(fp)
    e8c8:	1000051e 	bne	r2,zero,e8e0 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    e8cc:	e13ffa17 	ldw	r4,-24(fp)
    e8d0:	000eef00 	call	eef0 <alt_find_file>
    e8d4:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
    e8d8:	00800044 	movi	r2,1
    e8dc:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    e8e0:	e0bfff17 	ldw	r2,-4(fp)
    e8e4:	10002926 	beq	r2,zero,e98c <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
    e8e8:	e13fff17 	ldw	r4,-4(fp)
    e8ec:	000eff80 	call	eff8 <alt_get_fd>
    e8f0:	e0bffe15 	stw	r2,-8(fp)
    e8f4:	e0bffe17 	ldw	r2,-8(fp)
    e8f8:	1000030e 	bge	r2,zero,e908 <open+0x84>
    {
      status = index;
    e8fc:	e0bffe17 	ldw	r2,-8(fp)
    e900:	e0bffd15 	stw	r2,-12(fp)
    e904:	00002306 	br	e994 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
    e908:	e0bffe17 	ldw	r2,-8(fp)
    e90c:	10c00324 	muli	r3,r2,12
    e910:	00800074 	movhi	r2,1
    e914:	10bfea04 	addi	r2,r2,-88
    e918:	1885883a 	add	r2,r3,r2
    e91c:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    e920:	e0fff917 	ldw	r3,-28(fp)
    e924:	00900034 	movhi	r2,16384
    e928:	10bfffc4 	addi	r2,r2,-1
    e92c:	1886703a 	and	r3,r3,r2
    e930:	e0bffb17 	ldw	r2,-20(fp)
    e934:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    e938:	e0bffc17 	ldw	r2,-16(fp)
    e93c:	1000051e 	bne	r2,zero,e954 <open+0xd0>
    e940:	e13ffb17 	ldw	r4,-20(fp)
    e944:	000e7cc0 	call	e7cc <alt_file_locked>
    e948:	e0bffd15 	stw	r2,-12(fp)
    e94c:	e0bffd17 	ldw	r2,-12(fp)
    e950:	10001016 	blt	r2,zero,e994 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    e954:	e0bfff17 	ldw	r2,-4(fp)
    e958:	10800317 	ldw	r2,12(r2)
    e95c:	10000826 	beq	r2,zero,e980 <open+0xfc>
    e960:	e0bfff17 	ldw	r2,-4(fp)
    e964:	10800317 	ldw	r2,12(r2)
    e968:	e1fff817 	ldw	r7,-32(fp)
    e96c:	e1bff917 	ldw	r6,-28(fp)
    e970:	e17ffa17 	ldw	r5,-24(fp)
    e974:	e13ffb17 	ldw	r4,-20(fp)
    e978:	103ee83a 	callr	r2
    e97c:	00000106 	br	e984 <open+0x100>
    e980:	0005883a 	mov	r2,zero
    e984:	e0bffd15 	stw	r2,-12(fp)
    e988:	00000206 	br	e994 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
    e98c:	00bffb44 	movi	r2,-19
    e990:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    e994:	e0bffd17 	ldw	r2,-12(fp)
    e998:	1000090e 	bge	r2,zero,e9c0 <open+0x13c>
  {
    alt_release_fd (index);  
    e99c:	e13ffe17 	ldw	r4,-8(fp)
    e9a0:	000390c0 	call	390c <alt_release_fd>
    ALT_ERRNO = -status;
    e9a4:	000e7900 	call	e790 <alt_get_errno>
    e9a8:	1007883a 	mov	r3,r2
    e9ac:	e0bffd17 	ldw	r2,-12(fp)
    e9b0:	0085c83a 	sub	r2,zero,r2
    e9b4:	18800015 	stw	r2,0(r3)
    return -1;
    e9b8:	00bfffc4 	movi	r2,-1
    e9bc:	00000106 	br	e9c4 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
    e9c0:	e0bffe17 	ldw	r2,-8(fp)
}
    e9c4:	e037883a 	mov	sp,fp
    e9c8:	dfc00117 	ldw	ra,4(sp)
    e9cc:	df000017 	ldw	fp,0(sp)
    e9d0:	dec00204 	addi	sp,sp,8
    e9d4:	f800283a 	ret

0000e9d8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    e9d8:	defffa04 	addi	sp,sp,-24
    e9dc:	df000515 	stw	fp,20(sp)
    e9e0:	df000504 	addi	fp,sp,20
    e9e4:	e13ffb15 	stw	r4,-20(fp)
  NIOS2_READ_STATUS (context);
    e9e8:	0005303a 	rdctl	r2,status
    e9ec:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e9f0:	e0fffc17 	ldw	r3,-16(fp)
    e9f4:	00bfff84 	movi	r2,-2
    e9f8:	1884703a 	and	r2,r3,r2
    e9fc:	1001703a 	wrctl	status,r2
  return context;
    ea00:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    ea04:	e0bfff15 	stw	r2,-4(fp)
  alt_llist_remove (&alarm->llist);
    ea08:	e0bffb17 	ldw	r2,-20(fp)
    ea0c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    ea10:	e0bffd17 	ldw	r2,-12(fp)
    ea14:	10800017 	ldw	r2,0(r2)
    ea18:	e0fffd17 	ldw	r3,-12(fp)
    ea1c:	18c00117 	ldw	r3,4(r3)
    ea20:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    ea24:	e0bffd17 	ldw	r2,-12(fp)
    ea28:	10800117 	ldw	r2,4(r2)
    ea2c:	e0fffd17 	ldw	r3,-12(fp)
    ea30:	18c00017 	ldw	r3,0(r3)
    ea34:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    ea38:	e0bffd17 	ldw	r2,-12(fp)
    ea3c:	e0fffd17 	ldw	r3,-12(fp)
    ea40:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    ea44:	e0bffd17 	ldw	r2,-12(fp)
    ea48:	e0fffd17 	ldw	r3,-12(fp)
    ea4c:	10c00015 	stw	r3,0(r2)
} 
    ea50:	0001883a 	nop
    ea54:	e0bfff17 	ldw	r2,-4(fp)
    ea58:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
    ea5c:	e0bffe17 	ldw	r2,-8(fp)
    ea60:	1001703a 	wrctl	status,r2
}
    ea64:	0001883a 	nop
  alt_irq_enable_all (irq_context);
}
    ea68:	0001883a 	nop
    ea6c:	e037883a 	mov	sp,fp
    ea70:	df000017 	ldw	fp,0(sp)
    ea74:	dec00104 	addi	sp,sp,4
    ea78:	f800283a 	ret

0000ea7c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    ea7c:	defffb04 	addi	sp,sp,-20
    ea80:	dfc00415 	stw	ra,16(sp)
    ea84:	df000315 	stw	fp,12(sp)
    ea88:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    ea8c:	d0a02b17 	ldw	r2,-32596(gp)
    ea90:	e0bfff15 	stw	r2,-4(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    ea94:	d0a7cd17 	ldw	r2,-24780(gp)
    ea98:	10800044 	addi	r2,r2,1
    ea9c:	d0a7cd15 	stw	r2,-24780(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    eaa0:	00002e06 	br	eb5c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    eaa4:	e0bfff17 	ldw	r2,-4(fp)
    eaa8:	10800017 	ldw	r2,0(r2)
    eaac:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    eab0:	e0bfff17 	ldw	r2,-4(fp)
    eab4:	10800403 	ldbu	r2,16(r2)
    eab8:	10803fcc 	andi	r2,r2,255
    eabc:	10000426 	beq	r2,zero,ead0 <alt_tick+0x54>
    eac0:	d0a7cd17 	ldw	r2,-24780(gp)
    eac4:	1000021e 	bne	r2,zero,ead0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    eac8:	e0bfff17 	ldw	r2,-4(fp)
    eacc:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    ead0:	e0bfff17 	ldw	r2,-4(fp)
    ead4:	10800217 	ldw	r2,8(r2)
    ead8:	d0e7cd17 	ldw	r3,-24780(gp)
    eadc:	18801d36 	bltu	r3,r2,eb54 <alt_tick+0xd8>
    eae0:	e0bfff17 	ldw	r2,-4(fp)
    eae4:	10800403 	ldbu	r2,16(r2)
    eae8:	10803fcc 	andi	r2,r2,255
    eaec:	1000191e 	bne	r2,zero,eb54 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    eaf0:	e0bfff17 	ldw	r2,-4(fp)
    eaf4:	10800317 	ldw	r2,12(r2)
    eaf8:	e0ffff17 	ldw	r3,-4(fp)
    eafc:	18c00517 	ldw	r3,20(r3)
    eb00:	1809883a 	mov	r4,r3
    eb04:	103ee83a 	callr	r2
    eb08:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    eb0c:	e0bffd17 	ldw	r2,-12(fp)
    eb10:	1000031e 	bne	r2,zero,eb20 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    eb14:	e13fff17 	ldw	r4,-4(fp)
    eb18:	000e9d80 	call	e9d8 <alt_alarm_stop>
    eb1c:	00000d06 	br	eb54 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    eb20:	e0bfff17 	ldw	r2,-4(fp)
    eb24:	10c00217 	ldw	r3,8(r2)
    eb28:	e0bffd17 	ldw	r2,-12(fp)
    eb2c:	1887883a 	add	r3,r3,r2
    eb30:	e0bfff17 	ldw	r2,-4(fp)
    eb34:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    eb38:	e0bfff17 	ldw	r2,-4(fp)
    eb3c:	10c00217 	ldw	r3,8(r2)
    eb40:	d0a7cd17 	ldw	r2,-24780(gp)
    eb44:	1880032e 	bgeu	r3,r2,eb54 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    eb48:	e0bfff17 	ldw	r2,-4(fp)
    eb4c:	00c00044 	movi	r3,1
    eb50:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    eb54:	e0bffe17 	ldw	r2,-8(fp)
    eb58:	e0bfff15 	stw	r2,-4(fp)
  while (alarm != (alt_alarm*) &alt_alarm_list)
    eb5c:	e0ffff17 	ldw	r3,-4(fp)
    eb60:	d0a02b04 	addi	r2,gp,-32596
    eb64:	18bfcf1e 	bne	r3,r2,eaa4 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    eb68:	0004b3c0 	call	4b3c <OSTimeTick>
}
    eb6c:	0001883a 	nop
    eb70:	e037883a 	mov	sp,fp
    eb74:	dfc00117 	ldw	ra,4(sp)
    eb78:	df000017 	ldw	fp,0(sp)
    eb7c:	dec00204 	addi	sp,sp,8
    eb80:	f800283a 	ret

0000eb84 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    eb84:	deffff04 	addi	sp,sp,-4
    eb88:	df000015 	stw	fp,0(sp)
    eb8c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    eb90:	000170fa 	wrctl	ienable,zero
}
    eb94:	0001883a 	nop
    eb98:	e037883a 	mov	sp,fp
    eb9c:	df000017 	ldw	fp,0(sp)
    eba0:	dec00104 	addi	sp,sp,4
    eba4:	f800283a 	ret

0000eba8 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
    eba8:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
    ebac:	d0e00117 	ldw	r3,-32764(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
    ebb0:	d127c317 	ldw	r4,-24820(gp)

      stw ra,  0(sp)
    ebb4:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
    ebb8:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
    ebbc:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
    ebc0:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
    ebc4:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
    ebc8:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
    ebcc:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
    ebd0:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
    ebd4:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
    ebd8:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
    ebdc:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
    ebe0:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
    ebe4:	000ee0c0 	call	ee0c <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
    ebe8:	d127c517 	ldw	r4,-24812(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
    ebec:	d167c007 	ldb	r5,-24832(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
    ebf0:	d127c315 	stw	r4,-24820(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
    ebf4:	d167bfc5 	stb	r5,-24833(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
    ebf8:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
    ebfc:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
    ec00:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
    ec04:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
    ec08:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
    ec0c:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
    ec10:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
    ec14:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
    ec18:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
    ec1c:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
    ec20:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
    ec24:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
    ec28:	d0e00115 	stw	r3,-32764(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
    ec2c:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
    ec30:	f800283a 	ret

0000ec34 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
    ec34:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
    ec38:	047fff84 	movi	r17,-2
      and   r18, r18, r17
    ec3c:	9464703a 	and	r18,r18,r17
      wrctl status, r18
    ec40:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
    ec44:	000ee0c0 	call	ee0c <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
    ec48:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
    ec4c:	d4a7c145 	stb	r18,-24827(gp)

      /*
       * start execution of the new task.
       */

      br 9b
    ec50:	003fe506 	br	ebe8 <OSCtxSw+0x40>

0000ec54 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
    ec54:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
    ec58:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
    ec5c:	10800054 	ori	r2,r2,1
      wrctl status, r2
    ec60:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
    ec64:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
    ec68:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
    ec6c:	dec00204 	addi	sp,sp,8

      callr r2
    ec70:	103ee83a 	callr	r2

      nop
    ec74:	0001883a 	nop

0000ec78 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
    ec78:	defff704 	addi	sp,sp,-36
    ec7c:	dfc00815 	stw	ra,32(sp)
    ec80:	df000715 	stw	fp,28(sp)
    ec84:	df000704 	addi	fp,sp,28
    ec88:	e13ffc15 	stw	r4,-16(fp)
    ec8c:	e17ffb15 	stw	r5,-20(fp)
    ec90:	e1bffa15 	stw	r6,-24(fp)
    ec94:	3805883a 	mov	r2,r7
    ec98:	e0bff90d 	sth	r2,-28(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
    ec9c:	e0fffa17 	ldw	r3,-24(fp)
    eca0:	00bfff04 	movi	r2,-4
    eca4:	1884703a 	and	r2,r3,r2
    eca8:	10bef704 	addi	r2,r2,-1060
    ecac:	e0bfff15 	stw	r2,-4(fp)

   _REENT_INIT_PTR (local_impure_ptr);
    ecb0:	01810904 	movi	r6,1060
    ecb4:	000b883a 	mov	r5,zero
    ecb8:	e13fff17 	ldw	r4,-4(fp)
    ecbc:	00019c80 	call	19c8 <memset>
    ecc0:	e0bfff17 	ldw	r2,-4(fp)
    ecc4:	10c0bb04 	addi	r3,r2,748
    ecc8:	e0bfff17 	ldw	r2,-4(fp)
    eccc:	10c00115 	stw	r3,4(r2)
    ecd0:	e0bfff17 	ldw	r2,-4(fp)
    ecd4:	10c0d504 	addi	r3,r2,852
    ecd8:	e0bfff17 	ldw	r2,-4(fp)
    ecdc:	10c00215 	stw	r3,8(r2)
    ece0:	e0bfff17 	ldw	r2,-4(fp)
    ece4:	10c0ef04 	addi	r3,r2,956
    ece8:	e0bfff17 	ldw	r2,-4(fp)
    ecec:	10c00315 	stw	r3,12(r2)
    ecf0:	e0bfff17 	ldw	r2,-4(fp)
    ecf4:	00c00044 	movi	r3,1
    ecf8:	10c02915 	stw	r3,164(r2)
    ecfc:	10002a15 	stw	zero,168(r2)
    ed00:	e0bfff17 	ldw	r2,-4(fp)
    ed04:	00ccc384 	movi	r3,13070
    ed08:	10c02b0d 	sth	r3,172(r2)
    ed0c:	e0bfff17 	ldw	r2,-4(fp)
    ed10:	00eaf344 	movi	r3,-21555
    ed14:	10c02b8d 	sth	r3,174(r2)
    ed18:	e0bfff17 	ldw	r2,-4(fp)
    ed1c:	00c48d04 	movi	r3,4660
    ed20:	10c02c0d 	sth	r3,176(r2)
    ed24:	e0bfff17 	ldw	r2,-4(fp)
    ed28:	00f99b44 	movi	r3,-6547
    ed2c:	10c02c8d 	sth	r3,178(r2)
    ed30:	e0bfff17 	ldw	r2,-4(fp)
    ed34:	00f7bb04 	movi	r3,-8468
    ed38:	10c02d0d 	sth	r3,180(r2)
    ed3c:	e0bfff17 	ldw	r2,-4(fp)
    ed40:	00c00144 	movi	r3,5
    ed44:	10c02d8d 	sth	r3,182(r2)
    ed48:	e0bfff17 	ldw	r2,-4(fp)
    ed4c:	00c002c4 	movi	r3,11
    ed50:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
    ed54:	e0bfff17 	ldw	r2,-4(fp)
    ed58:	e0bffe15 	stw	r2,-8(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
    ed5c:	e0bffe17 	ldw	r2,-8(fp)
    ed60:	10bff304 	addi	r2,r2,-52
    ed64:	e0bffd15 	stw	r2,-12(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
    ed68:	e0bffd17 	ldw	r2,-12(fp)
    ed6c:	10800c04 	addi	r2,r2,48
    ed70:	e0fffc17 	ldw	r3,-16(fp)
    ed74:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
    ed78:	e0bffd17 	ldw	r2,-12(fp)
    ed7c:	10800b04 	addi	r2,r2,44
    ed80:	e0fffb17 	ldw	r3,-20(fp)
    ed84:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
    ed88:	e0bffd17 	ldw	r2,-12(fp)
    ed8c:	10800a04 	addi	r2,r2,40
    ed90:	e0ffff17 	ldw	r3,-4(fp)
    ed94:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
    ed98:	00800074 	movhi	r2,1
    ed9c:	10bb1504 	addi	r2,r2,-5036
    eda0:	10c00104 	addi	r3,r2,4
    eda4:	e0bffd17 	ldw	r2,-12(fp)
    eda8:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
    edac:	e0bffd17 	ldw	r2,-12(fp)
}
    edb0:	e037883a 	mov	sp,fp
    edb4:	dfc00117 	ldw	ra,4(sp)
    edb8:	df000017 	ldw	fp,0(sp)
    edbc:	dec00204 	addi	sp,sp,8
    edc0:	f800283a 	ret

0000edc4 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
    edc4:	defffe04 	addi	sp,sp,-8
    edc8:	df000115 	stw	fp,4(sp)
    edcc:	df000104 	addi	fp,sp,4
    edd0:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
    edd4:	0001883a 	nop
    edd8:	e037883a 	mov	sp,fp
    eddc:	df000017 	ldw	fp,0(sp)
    ede0:	dec00104 	addi	sp,sp,4
    ede4:	f800283a 	ret

0000ede8 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
    ede8:	defffe04 	addi	sp,sp,-8
    edec:	df000115 	stw	fp,4(sp)
    edf0:	df000104 	addi	fp,sp,4
    edf4:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
    edf8:	0001883a 	nop
    edfc:	e037883a 	mov	sp,fp
    ee00:	df000017 	ldw	fp,0(sp)
    ee04:	dec00104 	addi	sp,sp,4
    ee08:	f800283a 	ret

0000ee0c <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
    ee0c:	deffff04 	addi	sp,sp,-4
    ee10:	df000015 	stw	fp,0(sp)
    ee14:	d839883a 	mov	fp,sp
}
    ee18:	0001883a 	nop
    ee1c:	e037883a 	mov	sp,fp
    ee20:	df000017 	ldw	fp,0(sp)
    ee24:	dec00104 	addi	sp,sp,4
    ee28:	f800283a 	ret

0000ee2c <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
    ee2c:	deffff04 	addi	sp,sp,-4
    ee30:	df000015 	stw	fp,0(sp)
    ee34:	d839883a 	mov	fp,sp
}
    ee38:	0001883a 	nop
    ee3c:	e037883a 	mov	sp,fp
    ee40:	df000017 	ldw	fp,0(sp)
    ee44:	dec00104 	addi	sp,sp,4
    ee48:	f800283a 	ret

0000ee4c <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
    ee4c:	deffff04 	addi	sp,sp,-4
    ee50:	df000015 	stw	fp,0(sp)
    ee54:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
    ee58:	0001883a 	nop
    ee5c:	e037883a 	mov	sp,fp
    ee60:	df000017 	ldw	fp,0(sp)
    ee64:	dec00104 	addi	sp,sp,4
    ee68:	f800283a 	ret

0000ee6c <OSInitHookBegin>:

void OSInitHookBegin(void)
{
    ee6c:	deffff04 	addi	sp,sp,-4
    ee70:	df000015 	stw	fp,0(sp)
    ee74:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
    ee78:	0001883a 	nop
    ee7c:	e037883a 	mov	sp,fp
    ee80:	df000017 	ldw	fp,0(sp)
    ee84:	dec00104 	addi	sp,sp,4
    ee88:	f800283a 	ret

0000ee8c <OSInitHookEnd>:

void OSInitHookEnd(void)
{
    ee8c:	deffff04 	addi	sp,sp,-4
    ee90:	df000015 	stw	fp,0(sp)
    ee94:	d839883a 	mov	fp,sp
}
    ee98:	0001883a 	nop
    ee9c:	e037883a 	mov	sp,fp
    eea0:	df000017 	ldw	fp,0(sp)
    eea4:	dec00104 	addi	sp,sp,4
    eea8:	f800283a 	ret

0000eeac <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
    eeac:	deffff04 	addi	sp,sp,-4
    eeb0:	df000015 	stw	fp,0(sp)
    eeb4:	d839883a 	mov	fp,sp
}
    eeb8:	0001883a 	nop
    eebc:	e037883a 	mov	sp,fp
    eec0:	df000017 	ldw	fp,0(sp)
    eec4:	dec00104 	addi	sp,sp,4
    eec8:	f800283a 	ret

0000eecc <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
    eecc:	defffe04 	addi	sp,sp,-8
    eed0:	df000115 	stw	fp,4(sp)
    eed4:	df000104 	addi	fp,sp,4
    eed8:	e13fff15 	stw	r4,-4(fp)
}
    eedc:	0001883a 	nop
    eee0:	e037883a 	mov	sp,fp
    eee4:	df000017 	ldw	fp,0(sp)
    eee8:	dec00104 	addi	sp,sp,4
    eeec:	f800283a 	ret

0000eef0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    eef0:	defffb04 	addi	sp,sp,-20
    eef4:	dfc00415 	stw	ra,16(sp)
    eef8:	df000315 	stw	fp,12(sp)
    eefc:	df000304 	addi	fp,sp,12
    ef00:	e13ffd15 	stw	r4,-12(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    ef04:	d0a00417 	ldw	r2,-32752(gp)
    ef08:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    ef0c:	00003106 	br	efd4 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    ef10:	e0bfff17 	ldw	r2,-4(fp)
    ef14:	10800217 	ldw	r2,8(r2)
    ef18:	1009883a 	mov	r4,r2
    ef1c:	00004c00 	call	4c0 <strlen>
    ef20:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    ef24:	e0bfff17 	ldw	r2,-4(fp)
    ef28:	10c00217 	ldw	r3,8(r2)
    ef2c:	e0bffe17 	ldw	r2,-8(fp)
    ef30:	10bfffc4 	addi	r2,r2,-1
    ef34:	1885883a 	add	r2,r3,r2
    ef38:	10800003 	ldbu	r2,0(r2)
    ef3c:	10803fcc 	andi	r2,r2,255
    ef40:	1080201c 	xori	r2,r2,128
    ef44:	10bfe004 	addi	r2,r2,-128
    ef48:	10800bd8 	cmpnei	r2,r2,47
    ef4c:	1000031e 	bne	r2,zero,ef5c <alt_find_file+0x6c>
    {
      len -= 1;
    ef50:	e0bffe17 	ldw	r2,-8(fp)
    ef54:	10bfffc4 	addi	r2,r2,-1
    ef58:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    ef5c:	e0bffe17 	ldw	r2,-8(fp)
    ef60:	e0fffd17 	ldw	r3,-12(fp)
    ef64:	1885883a 	add	r2,r3,r2
    ef68:	10800003 	ldbu	r2,0(r2)
    ef6c:	10803fcc 	andi	r2,r2,255
    ef70:	1080201c 	xori	r2,r2,128
    ef74:	10bfe004 	addi	r2,r2,-128
    ef78:	10800be0 	cmpeqi	r2,r2,47
    ef7c:	1000081e 	bne	r2,zero,efa0 <alt_find_file+0xb0>
    ef80:	e0bffe17 	ldw	r2,-8(fp)
    ef84:	e0fffd17 	ldw	r3,-12(fp)
    ef88:	1885883a 	add	r2,r3,r2
    ef8c:	10800003 	ldbu	r2,0(r2)
    ef90:	10803fcc 	andi	r2,r2,255
    ef94:	1080201c 	xori	r2,r2,128
    ef98:	10bfe004 	addi	r2,r2,-128
    ef9c:	10000a1e 	bne	r2,zero,efc8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    efa0:	e0bfff17 	ldw	r2,-4(fp)
    efa4:	10800217 	ldw	r2,8(r2)
    efa8:	e0fffe17 	ldw	r3,-8(fp)
    efac:	180d883a 	mov	r6,r3
    efb0:	e17ffd17 	ldw	r5,-12(fp)
    efb4:	1009883a 	mov	r4,r2
    efb8:	000f2400 	call	f240 <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
    efbc:	1000021e 	bne	r2,zero,efc8 <alt_find_file+0xd8>
    {
      /* match found */

      return next;
    efc0:	e0bfff17 	ldw	r2,-4(fp)
    efc4:	00000706 	br	efe4 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    efc8:	e0bfff17 	ldw	r2,-4(fp)
    efcc:	10800017 	ldw	r2,0(r2)
    efd0:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) &alt_fs_list)
    efd4:	e0ffff17 	ldw	r3,-4(fp)
    efd8:	d0a00404 	addi	r2,gp,-32752
    efdc:	18bfcc1e 	bne	r3,r2,ef10 <alt_find_file+0x20>
  }
  
  /* No match found */
  
  return NULL;     
    efe0:	0005883a 	mov	r2,zero
}
    efe4:	e037883a 	mov	sp,fp
    efe8:	dfc00117 	ldw	ra,4(sp)
    efec:	df000017 	ldw	fp,0(sp)
    eff0:	dec00204 	addi	sp,sp,8
    eff4:	f800283a 	ret

0000eff8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    eff8:	defff904 	addi	sp,sp,-28
    effc:	dfc00615 	stw	ra,24(sp)
    f000:	df000515 	stw	fp,20(sp)
    f004:	df000504 	addi	fp,sp,20
    f008:	e13ffb15 	stw	r4,-20(fp)
  alt_32 i;
  int rc = -EMFILE;
    f00c:	00bffa04 	movi	r2,-24
    f010:	e0bffe15 	stw	r2,-8(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
    f014:	d0a7b117 	ldw	r2,-24892(gp)
    f018:	e0bffd15 	stw	r2,-12(fp)
    f01c:	e03ffc8d 	sth	zero,-14(fp)
    f020:	e0bffc8b 	ldhu	r2,-14(fp)
    f024:	e0fffc44 	addi	r3,fp,-15
    f028:	180d883a 	mov	r6,r3
    f02c:	100b883a 	mov	r5,r2
    f030:	e13ffd17 	ldw	r4,-12(fp)
    f034:	00094b40 	call	94b4 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    f038:	e03fff15 	stw	zero,-4(fp)
    f03c:	00001706 	br	f09c <alt_get_fd+0xa4>
  {
    if (!alt_fd_list[i].dev)
    f040:	e0bfff17 	ldw	r2,-4(fp)
    f044:	10c00324 	muli	r3,r2,12
    f048:	00800074 	movhi	r2,1
    f04c:	1885883a 	add	r2,r3,r2
    f050:	10bfea17 	ldw	r2,-88(r2)
    f054:	10000e1e 	bne	r2,zero,f090 <alt_get_fd+0x98>
    {
      alt_fd_list[i].dev = dev;
    f058:	e0bfff17 	ldw	r2,-4(fp)
    f05c:	11000324 	muli	r4,r2,12
    f060:	e0fffb17 	ldw	r3,-20(fp)
    f064:	00800074 	movhi	r2,1
    f068:	2085883a 	add	r2,r4,r2
    f06c:	10ffea15 	stw	r3,-88(r2)
      if (i > alt_max_fd)
    f070:	d0e00817 	ldw	r3,-32736(gp)
    f074:	e0bfff17 	ldw	r2,-4(fp)
    f078:	1880020e 	bge	r3,r2,f084 <alt_get_fd+0x8c>
      {
        alt_max_fd = i;
    f07c:	e0bfff17 	ldw	r2,-4(fp)
    f080:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
    f084:	e0bfff17 	ldw	r2,-4(fp)
    f088:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
    f08c:	00000706 	br	f0ac <alt_get_fd+0xb4>
  for (i = 0; i < ALT_MAX_FD; i++)
    f090:	e0bfff17 	ldw	r2,-4(fp)
    f094:	10800044 	addi	r2,r2,1
    f098:	e0bfff15 	stw	r2,-4(fp)
    f09c:	e0bfff17 	ldw	r2,-4(fp)
    f0a0:	10800810 	cmplti	r2,r2,32
    f0a4:	103fe61e 	bne	r2,zero,f040 <alt_get_fd+0x48>
    }
  }

 alt_get_fd_exit:
    f0a8:	0001883a 	nop
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
    f0ac:	d0a7b117 	ldw	r2,-24892(gp)
    f0b0:	1009883a 	mov	r4,r2
    f0b4:	000983c0 	call	983c <OSSemPost>

  return rc;
    f0b8:	e0bffe17 	ldw	r2,-8(fp)
}
    f0bc:	e037883a 	mov	sp,fp
    f0c0:	dfc00117 	ldw	ra,4(sp)
    f0c4:	df000017 	ldw	fp,0(sp)
    f0c8:	dec00204 	addi	sp,sp,8
    f0cc:	f800283a 	ret

0000f0d0 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    f0d0:	defffb04 	addi	sp,sp,-20
    f0d4:	df000415 	stw	fp,16(sp)
    f0d8:	df000404 	addi	fp,sp,16
    f0dc:	e13ffd15 	stw	r4,-12(fp)
    f0e0:	e17ffc15 	stw	r5,-16(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    f0e4:	e0bffc17 	ldw	r2,-16(fp)
    f0e8:	10840070 	cmpltui	r2,r2,4097
    f0ec:	1000021e 	bne	r2,zero,f0f8 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    f0f0:	00840004 	movi	r2,4096
    f0f4:	e0bffc15 	stw	r2,-16(fp)
  }

  end = ((char*) start) + len;
    f0f8:	e0fffd17 	ldw	r3,-12(fp)
    f0fc:	e0bffc17 	ldw	r2,-16(fp)
    f100:	1885883a 	add	r2,r3,r2
    f104:	e0bffe15 	stw	r2,-8(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    f108:	e0bffd17 	ldw	r2,-12(fp)
    f10c:	e0bfff15 	stw	r2,-4(fp)
    f110:	00000506 	br	f128 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    f114:	e0bfff17 	ldw	r2,-4(fp)
    f118:	1000603a 	flushi	r2
  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    f11c:	e0bfff17 	ldw	r2,-4(fp)
    f120:	10800804 	addi	r2,r2,32
    f124:	e0bfff15 	stw	r2,-4(fp)
    f128:	e0ffff17 	ldw	r3,-4(fp)
    f12c:	e0bffe17 	ldw	r2,-8(fp)
    f130:	18bff836 	bltu	r3,r2,f114 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    f134:	e0bffd17 	ldw	r2,-12(fp)
    f138:	108007cc 	andi	r2,r2,31
    f13c:	10000226 	beq	r2,zero,f148 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    f140:	e0bfff17 	ldw	r2,-4(fp)
    f144:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    f148:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    f14c:	0001883a 	nop
    f150:	e037883a 	mov	sp,fp
    f154:	df000017 	ldw	fp,0(sp)
    f158:	dec00104 	addi	sp,sp,4
    f15c:	f800283a 	ret

0000f160 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    f160:	defffe04 	addi	sp,sp,-8
    f164:	df000115 	stw	fp,4(sp)
    f168:	df000104 	addi	fp,sp,4
    f16c:	e13fff15 	stw	r4,-4(fp)
    f170:	e0bfff17 	ldw	r2,-4(fp)
    f174:	10bffe84 	addi	r2,r2,-6
    f178:	10c00428 	cmpgeui	r3,r2,16
    f17c:	1800191e 	bne	r3,zero,f1e4 <alt_exception_cause_generated_bad_addr+0x84>
    f180:	100690ba 	slli	r3,r2,2
    f184:	00800074 	movhi	r2,1
    f188:	1885883a 	add	r2,r3,r2
    f18c:	10bc6517 	ldw	r2,-3692(r2)
    f190:	1000683a 	jmp	r2
    f194:	0000f1d4 	movui	zero,967
    f198:	0000f1d4 	movui	zero,967
    f19c:	0000f1e4 	muli	zero,zero,967
    f1a0:	0000f1e4 	muli	zero,zero,967
    f1a4:	0000f1e4 	muli	zero,zero,967
    f1a8:	0000f1d4 	movui	zero,967
    f1ac:	0000f1dc 	xori	zero,zero,967
    f1b0:	0000f1e4 	muli	zero,zero,967
    f1b4:	0000f1d4 	movui	zero,967
    f1b8:	0000f1d4 	movui	zero,967
    f1bc:	0000f1e4 	muli	zero,zero,967
    f1c0:	0000f1d4 	movui	zero,967
    f1c4:	0000f1dc 	xori	zero,zero,967
    f1c8:	0000f1e4 	muli	zero,zero,967
    f1cc:	0000f1e4 	muli	zero,zero,967
    f1d0:	0000f1d4 	movui	zero,967
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    f1d4:	00800044 	movi	r2,1
    f1d8:	00000306 	br	f1e8 <alt_exception_cause_generated_bad_addr+0x88>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    f1dc:	0005883a 	mov	r2,zero
    f1e0:	00000106 	br	f1e8 <alt_exception_cause_generated_bad_addr+0x88>

  default:
    return 0;
    f1e4:	0005883a 	mov	r2,zero
  }
}
    f1e8:	e037883a 	mov	sp,fp
    f1ec:	df000017 	ldw	fp,0(sp)
    f1f0:	dec00104 	addi	sp,sp,4
    f1f4:	f800283a 	ret

0000f1f8 <atexit>:
    f1f8:	200b883a 	mov	r5,r4
    f1fc:	000f883a 	mov	r7,zero
    f200:	000d883a 	mov	r6,zero
    f204:	0009883a 	mov	r4,zero
    f208:	000f2b81 	jmpi	f2b8 <__register_exitproc>

0000f20c <exit>:
    f20c:	defffe04 	addi	sp,sp,-8
    f210:	000b883a 	mov	r5,zero
    f214:	dc000015 	stw	r16,0(sp)
    f218:	dfc00115 	stw	ra,4(sp)
    f21c:	2021883a 	mov	r16,r4
    f220:	000f3480 	call	f348 <__call_exitprocs>
    f224:	00800074 	movhi	r2,1
    f228:	11052817 	ldw	r4,5280(r2)
    f22c:	20800f17 	ldw	r2,60(r4)
    f230:	10000126 	beq	r2,zero,f238 <exit+0x2c>
    f234:	103ee83a 	callr	r2
    f238:	8009883a 	mov	r4,r16
    f23c:	000f4680 	call	f468 <_exit>

0000f240 <memcmp>:
    f240:	30800130 	cmpltui	r2,r6,4
    f244:	10000b1e 	bne	r2,zero,f274 <memcmp+0x34>
    f248:	2144b03a 	or	r2,r4,r5
    f24c:	108000cc 	andi	r2,r2,3
    f250:	1000171e 	bne	r2,zero,f2b0 <memcmp+0x70>
    f254:	20c00017 	ldw	r3,0(r4)
    f258:	28800017 	ldw	r2,0(r5)
    f25c:	1880141e 	bne	r3,r2,f2b0 <memcmp+0x70>
    f260:	31bfff04 	addi	r6,r6,-4
    f264:	30800128 	cmpgeui	r2,r6,4
    f268:	21000104 	addi	r4,r4,4
    f26c:	29400104 	addi	r5,r5,4
    f270:	103ff81e 	bne	r2,zero,f254 <memcmp+0x14>
    f274:	30bfffc4 	addi	r2,r6,-1
    f278:	30000b26 	beq	r6,zero,f2a8 <memcmp+0x68>
    f27c:	11800044 	addi	r6,r2,1
    f280:	218d883a 	add	r6,r4,r6
    f284:	00000106 	br	f28c <memcmp+0x4c>
    f288:	21800726 	beq	r4,r6,f2a8 <memcmp+0x68>
    f28c:	20800003 	ldbu	r2,0(r4)
    f290:	28c00003 	ldbu	r3,0(r5)
    f294:	21000044 	addi	r4,r4,1
    f298:	29400044 	addi	r5,r5,1
    f29c:	10fffa26 	beq	r2,r3,f288 <memcmp+0x48>
    f2a0:	10c5c83a 	sub	r2,r2,r3
    f2a4:	f800283a 	ret
    f2a8:	0005883a 	mov	r2,zero
    f2ac:	f800283a 	ret
    f2b0:	30bfffc4 	addi	r2,r6,-1
    f2b4:	003ff106 	br	f27c <memcmp+0x3c>

0000f2b8 <__register_exitproc>:
    f2b8:	00800074 	movhi	r2,1
    f2bc:	10c52817 	ldw	r3,5280(r2)
    f2c0:	18805217 	ldw	r2,328(r3)
    f2c4:	10001726 	beq	r2,zero,f324 <__register_exitproc+0x6c>
    f2c8:	10c00117 	ldw	r3,4(r2)
    f2cc:	1a000808 	cmpgei	r8,r3,32
    f2d0:	40001b1e 	bne	r8,zero,f340 <__register_exitproc+0x88>
    f2d4:	20000b26 	beq	r4,zero,f304 <__register_exitproc+0x4c>
    f2d8:	181090ba 	slli	r8,r3,2
    f2dc:	02400044 	movi	r9,1
    f2e0:	48d2983a 	sll	r9,r9,r3
    f2e4:	1211883a 	add	r8,r2,r8
    f2e8:	41802215 	stw	r6,136(r8)
    f2ec:	11806217 	ldw	r6,392(r2)
    f2f0:	21000098 	cmpnei	r4,r4,2
    f2f4:	324cb03a 	or	r6,r6,r9
    f2f8:	11806215 	stw	r6,392(r2)
    f2fc:	41c04215 	stw	r7,264(r8)
    f300:	20000b26 	beq	r4,zero,f330 <__register_exitproc+0x78>
    f304:	19000084 	addi	r4,r3,2
    f308:	200890ba 	slli	r4,r4,2
    f30c:	18c00044 	addi	r3,r3,1
    f310:	10c00115 	stw	r3,4(r2)
    f314:	1105883a 	add	r2,r2,r4
    f318:	11400015 	stw	r5,0(r2)
    f31c:	0005883a 	mov	r2,zero
    f320:	f800283a 	ret
    f324:	18805304 	addi	r2,r3,332
    f328:	18805215 	stw	r2,328(r3)
    f32c:	003fe606 	br	f2c8 <__register_exitproc+0x10>
    f330:	11006317 	ldw	r4,396(r2)
    f334:	2252b03a 	or	r9,r4,r9
    f338:	12406315 	stw	r9,396(r2)
    f33c:	003ff106 	br	f304 <__register_exitproc+0x4c>
    f340:	00bfffc4 	movi	r2,-1
    f344:	f800283a 	ret

0000f348 <__call_exitprocs>:
    f348:	defff704 	addi	sp,sp,-36
    f34c:	00800074 	movhi	r2,1
    f350:	dcc00315 	stw	r19,12(sp)
    f354:	14c52817 	ldw	r19,5280(r2)
    f358:	dc800215 	stw	r18,8(sp)
    f35c:	dfc00815 	stw	ra,32(sp)
    f360:	9c805217 	ldw	r18,328(r19)
    f364:	ddc00715 	stw	r23,28(sp)
    f368:	dd800615 	stw	r22,24(sp)
    f36c:	dd400515 	stw	r21,20(sp)
    f370:	dd000415 	stw	r20,16(sp)
    f374:	dc400115 	stw	r17,4(sp)
    f378:	dc000015 	stw	r16,0(sp)
    f37c:	90001026 	beq	r18,zero,f3c0 <__call_exitprocs+0x78>
    f380:	202b883a 	mov	r21,r4
    f384:	282d883a 	mov	r22,r5
    f388:	05000044 	movi	r20,1
    f38c:	94000117 	ldw	r16,4(r18)
    f390:	847fffc4 	addi	r17,r16,-1
    f394:	88000a16 	blt	r17,zero,f3c0 <__call_exitprocs+0x78>
    f398:	84000044 	addi	r16,r16,1
    f39c:	802090ba 	slli	r16,r16,2
    f3a0:	9421883a 	add	r16,r18,r16
    f3a4:	b0001126 	beq	r22,zero,f3ec <__call_exitprocs+0xa4>
    f3a8:	80804017 	ldw	r2,256(r16)
    f3ac:	15800f26 	beq	r2,r22,f3ec <__call_exitprocs+0xa4>
    f3b0:	8c7fffc4 	addi	r17,r17,-1
    f3b4:	88bfffd8 	cmpnei	r2,r17,-1
    f3b8:	843fff04 	addi	r16,r16,-4
    f3bc:	103ff91e 	bne	r2,zero,f3a4 <__call_exitprocs+0x5c>
    f3c0:	dfc00817 	ldw	ra,32(sp)
    f3c4:	ddc00717 	ldw	r23,28(sp)
    f3c8:	dd800617 	ldw	r22,24(sp)
    f3cc:	dd400517 	ldw	r21,20(sp)
    f3d0:	dd000417 	ldw	r20,16(sp)
    f3d4:	dcc00317 	ldw	r19,12(sp)
    f3d8:	dc800217 	ldw	r18,8(sp)
    f3dc:	dc400117 	ldw	r17,4(sp)
    f3e0:	dc000017 	ldw	r16,0(sp)
    f3e4:	dec00904 	addi	sp,sp,36
    f3e8:	f800283a 	ret
    f3ec:	90800117 	ldw	r2,4(r18)
    f3f0:	81800017 	ldw	r6,0(r16)
    f3f4:	10bfffc4 	addi	r2,r2,-1
    f3f8:	14401726 	beq	r2,r17,f458 <__call_exitprocs+0x110>
    f3fc:	80000015 	stw	zero,0(r16)
    f400:	303feb26 	beq	r6,zero,f3b0 <__call_exitprocs+0x68>
    f404:	a446983a 	sll	r3,r20,r17
    f408:	90806217 	ldw	r2,392(r18)
    f40c:	95c00117 	ldw	r23,4(r18)
    f410:	1884703a 	and	r2,r3,r2
    f414:	1000081e 	bne	r2,zero,f438 <__call_exitprocs+0xf0>
    f418:	303ee83a 	callr	r6
    f41c:	90c00117 	ldw	r3,4(r18)
    f420:	98805217 	ldw	r2,328(r19)
    f424:	1dc0011e 	bne	r3,r23,f42c <__call_exitprocs+0xe4>
    f428:	90bfe126 	beq	r18,r2,f3b0 <__call_exitprocs+0x68>
    f42c:	103fe426 	beq	r2,zero,f3c0 <__call_exitprocs+0x78>
    f430:	1025883a 	mov	r18,r2
    f434:	003fd506 	br	f38c <__call_exitprocs+0x44>
    f438:	90806317 	ldw	r2,396(r18)
    f43c:	81002017 	ldw	r4,128(r16)
    f440:	1886703a 	and	r3,r3,r2
    f444:	1800061e 	bne	r3,zero,f460 <__call_exitprocs+0x118>
    f448:	200b883a 	mov	r5,r4
    f44c:	a809883a 	mov	r4,r21
    f450:	303ee83a 	callr	r6
    f454:	003ff106 	br	f41c <__call_exitprocs+0xd4>
    f458:	94400115 	stw	r17,4(r18)
    f45c:	003fe806 	br	f400 <__call_exitprocs+0xb8>
    f460:	303ee83a 	callr	r6
    f464:	003fed06 	br	f41c <__call_exitprocs+0xd4>

0000f468 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    f468:	defffd04 	addi	sp,sp,-12
    f46c:	df000215 	stw	fp,8(sp)
    f470:	df000204 	addi	fp,sp,8
    f474:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    f478:	d027c145 	stb	zero,-24827(gp)
    f47c:	e0bffe17 	ldw	r2,-8(fp)
    f480:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    f484:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    f488:	10000226 	beq	r2,zero,f494 <_exit+0x2c>
    ALT_SIM_FAIL();
    f48c:	002af070 	cmpltui	zero,zero,43969
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
    f490:	00000106 	br	f498 <_exit+0x30>
    ALT_SIM_PASS();
    f494:	002af0b0 	cmpltui	zero,zero,43970
}
    f498:	0001883a 	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    f49c:	003fff06 	br	f49c <_exit+0x34>
