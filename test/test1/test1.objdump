
test1.elf:     file format elf32-littlenios2
test1.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0000023c

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0000fa74 memsz 0x0000fa74 flags r-x
    LOAD off    0x00010a94 vaddr 0x0000fa94 paddr 0x00011894 align 2**12
         filesz 0x00001e00 memsz 0x00001e00 flags rw-
    LOAD off    0x00013694 vaddr 0x00013694 paddr 0x00013694 align 2**12
         filesz 0x00000000 memsz 0x000073d4 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000021c  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000f2b0  0000023c  0000023c  0000123c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000005a8  0000f4ec  0000f4ec  000104ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001e00  0000fa94  00011894  00010a94  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000073d4  00013694  00013694  00013694  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  0001aa68  0001aa68  00012894  2**0
                  CONTENTS
  7 .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM 00000000  09000000  09000000  00012894  2**0
                  CONTENTS
  8 .comment      0000002d  00000000  00000000  00012894  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000c00  00000000  00000000  000128c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_info   00022c68  00000000  00000000  000134c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00008ad4  00000000  00000000  00036130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line   0000dee8  00000000  00000000  0003ec04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_frame  00002d4c  00000000  00000000  0004caec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    000043a8  00000000  00000000  0004f838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00005f1e  00000000  00000000  00053be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_alt_sim_info 00000020  00000000  00000000  00059b00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000008d8  00000000  00000000  00059b20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .thread_model 00000006  00000000  00000000  0005ed25  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  0005ed2b  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0005ed30  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0005ed31  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0005ed32  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0005ed36  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0005ed3a  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  0005ed3e  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  0005ed47  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  0005ed50  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000f  00000000  00000000  0005ed59  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000005a  00000000  00000000  0005ed68  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     001d2080  00000000  00000000  0005edc2  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
0000023c l    d  .text	00000000 .text
0000f4ec l    d  .rodata	00000000 .rodata
0000fa94 l    d  .rwdata	00000000 .rwdata
00013694 l    d  .bss	00000000 .bss
0001aa68 l    d  .SDRAM	00000000 .SDRAM
09000000 l    d  .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM	00000000 .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 /home/xix277/engr-ece/Winter_Sem_2022/CME332/test/test1_bsp//obj/HAL/src/crt0.o
00000274 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
000005a4 l     F .text	00000008 __fp_lock
000005b8 l     F .text	00000008 __fp_unlock
000005c0 l     F .text	00000168 __sinit.part.0
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0000fa94 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00002420 l     F .text	000000c0 _fclose_r.part.0
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_close.c
00003260 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000336c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00003398 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00003484 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00003564 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00003650 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
00003820 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00011808 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00003a68 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
0001180c l     O .rwdata	00000004 lockid
000136b8 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00011810 l     O .rwdata	00000004 lockid
000136c0 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
000054cc l     F .text	00000048 OS_InitMisc
00005514 l     F .text	0000006c OS_InitRdyList
00005688 l     F .text	000000e4 OS_InitTCBList
000053ec l     F .text	000000e0 OS_InitEventList
00005580 l     F .text	00000084 OS_InitTaskIdle
00005604 l     F .text	00000084 OS_InitTaskStat
000058fc l     F .text	0000006c OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
000076b4 l     F .text	000000f4 OS_FlagTaskRdy
00007470 l     F .text	00000164 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000b808 l     F .text	00000034 alt_dev_reg
00010468 l     O .rwdata	0000106c JTAG_UART
000114d4 l     O .rwdata	00000030 AV_Config
00011504 l     O .rwdata	00000030 Audio_Subsystem_Audio
00011534 l     O .rwdata	0000002c Char_LCD_16x2
00011560 l     O .rwdata	0000002c IrDA
0001158c l     O .rwdata	00000038 PS2_Port
000115c4 l     O .rwdata	00000038 PS2_Port_Dual
000115fc l     O .rwdata	0000002c Serial_Port
00011628 l     O .rwdata	00000034 USB
0001165c l     O .rwdata	0000005c VGA_Subsystem_Char_Buf_Subsystem_Char_Buf_DMA
000116b8 l     O .rwdata	0000005c VGA_Subsystem_VGA_Pixel_DMA
00011714 l     O .rwdata	0000005c Video_In_Subsystem_Video_In_DMA
00011770 l     O .rwdata	00000044 VGA_Subsystem_VGA_Pixel_RGB_Resampler
000117b4 l     O .rwdata	0000002c SD_Card
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000c2f4 l     F .text	000002b0 altera_avalon_jtag_uart_irq
0000c5a4 l     F .text	0000010c altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000cda4 l     F .text	00000080 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_irda.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000e2c0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000e530 l     F .text	000000b0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0000e7dc l     F .text	0000003c alt_get_errno
0000e818 l     F .text	000000b8 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00013718 g     O .bss	00000004 alt_instruction_exception_handler
0001185e g     O .rwdata	00000002 OSTaskNameSize
00003054 g     F .text	00000058 _isatty_r
00003760 g     F .text	000000c0 alt_main
00000430 g     F .text	000000cc _puts_r
0001a968 g     O .bss	00000100 alt_irq
0000d974 g     F .text	00000060 alt_up_ps2_disable_read_interrupt
00002ce4 g     F .text	00000064 _lseek_r
00007ef8 g     F .text	000000cc OS_MemInit
00011894 g       *ABS*	00000000 __flash_rwdata_start
0000b7a4 g     F .text	00000064 OSTimeSet
0000cf14 g     F .text	00000040 alt_up_character_lcd_send_cmd
00004124 g     F .text	00000638 OSEventPendMulti
0001aa68 g       *ABS*	00000000 __alt_heap_start
0000ee10 g     F .text	00000024 OSTaskCreateHook
0001371c g     O .bss	00002000 task1_stk
00011836 g     O .rwdata	00000002 OSMboxEn
000047b4 g     F .text	0000004c OSIntEnter
0000219c g     F .text	0000005c __sseek
000008f8 g     F .text	00000010 __sinit
0000d78c g     F .text	00000034 read_CE_bit
00011846 g     O .rwdata	00000002 OSQEn
00000728 g     F .text	00000068 __sfmoreglue
00003de4 g     F .text	000000d4 __malloc_unlock
0000ee78 g     F .text	00000020 OSTaskStatHook
0000db14 g     F .text	0000009c alt_up_ps2_read_data_byte_timeout
0000e00c g     F .text	00000090 alt_up_rs232_read_fd
000136de g     O .bss	00000001 OSLockNesting
00011884 g     O .rwdata	00000002 OSDataSize
000136e5 g     O .bss	00000001 OSRunning
000018e8 g     F .text	0000012c memmove
0000eeb8 g     F .text	00000020 OSInitHookBegin
0001187c g     O .rwdata	00000002 OSTmrSize
000008e4 g     F .text	00000014 _cleanup
000136e8 g     O .bss	00000004 OSIdleCtr
0000ebd0 g     F .text	00000024 altera_nios2_gen2_irq_init
0000eca0 g       .text	00000000 OSStartTsk
0000cea0 g     F .text	00000074 get_DDRAM_addr
00005c18 g     F .text	000002e0 OS_TCBInit
00000000 g     F .entry	0000001c __reset
00011882 g     O .rwdata	00000002 OSTmrWheelTblSize
00000020 g       *ABS*	00000000 __flash_exceptions_start
00011822 g     O .rwdata	00000002 OSEventSize
000136e0 g     O .bss	00000001 OSPrioHighRdy
00002ff4 g     F .text	00000060 _fstat_r
0000ee34 g     F .text	00000024 OSTaskDelHook
000136a0 g     O .bss	00000004 errno
00002114 g     F .text	00000008 __seofread
0000ec80 g       .text	00000000 OSStartHighRdy
0000a220 g     F .text	000001dc OSTaskCreateExt
00006f98 g     F .text	00000064 OSFlagPendGetFlagsRdy
00011862 g     O .rwdata	00000002 OSTaskStatStkSize
00006088 g     F .text	00000324 OSFlagAccept
00008548 g     F .text	000000bc OSQFlush
00007fc4 g     F .text	00000144 OSQAccept
000136ac g     O .bss	00000004 alt_argv
000197e0 g       *ABS*	00000000 _gp
0000a07c g     F .text	000001a4 OSTaskCreate
00009bb8 g     F .text	000004c4 OSTaskChangePrio
000136bc g     O .bss	00000004 alt_heapsem
00005ef8 g     F .text	00000190 OSDebugInit
0000a3fc g     F .text	00000344 OSTaskDel
000102e8 g     O .rwdata	00000180 alt_fd_list
00018284 g     O .bss	00000370 OSFlagTbl
000051d4 g     F .text	000000b0 OS_EventTaskRemove
0000e46c g     F .text	00000090 alt_find_dev
000017e8 g     F .text	00000100 memcpy
0001184c g     O .rwdata	00000002 OSRdyTblSize
0000d0c4 g     F .text	00000050 alt_up_character_lcd_write_fd
000005ac g     F .text	0000000c _cleanup_r
0000e5e0 g     F .text	0000007c alt_io_redirect
0000f4ec g       *ABS*	00000000 __DTOR_END__
0000d65c g     F .text	00000090 alt_up_irda_write_fd
0000df98 g     F .text	00000074 alt_up_rs232_read_data
000004fc g     F .text	00000010 puts
0000f1ac g     F .text	00000098 alt_exception_cause_generated_bad_addr
00003eb8 g     F .text	00000124 OSEventNameGet
00011830 g     O .rwdata	00000002 OSFlagMax
00004800 g     F .text	000000f4 OSIntExit
0001186a g     O .rwdata	00000002 OSTCBSize
000136df g     O .bss	00000001 OSPrioCur
0000d458 g     F .text	00000040 alt_up_irda_get_used_space_in_read_FIFO
0000c80c g     F .text	000002c8 altera_avalon_jtag_uart_read
000031a0 g     F .text	00000064 .hidden __udivsi3
000034c0 g     F .text	000000a4 isatty
00011850 g     O .rwdata	00000002 OSStkWidth
00011844 g     O .rwdata	00000002 OSPtrSize
00011824 g     O .rwdata	00000002 OSEventTblSize
0000d3f8 g     F .text	00000060 alt_up_irda_disable_read_interrupt
0000ebf4 g       .text	00000000 OSCtxSw
0000f11c g     F .text	00000090 alt_icache_flush
0001369c g     O .bss	00000004 __malloc_top_pad
000136f8 g     O .bss	00000004 OSTCBList
000136a4 g     O .bss	00000004 alt_fd_list_lock
00000940 g     F .text	000004b8 __sfvwrite_r
00019b58 g     O .bss	00000c30 OSMemTbl
000136fc g     O .bss	00000001 OSTickStepState
00002068 g     F .text	00000058 _sbrk_r
00011848 g     O .rwdata	00000002 OSQMax
000185f4 g     O .bss	00000800 OSTaskStatStk
00007b1c g     F .text	000000f4 OSMemNameGet
00011828 g     O .rwdata	00000002 OSFlagEn
00002f90 g     F .text	00000064 _read_r
0001186e g     O .rwdata	00000002 OSTimeTickHookEn
00008a10 g     F .text	00000174 OSQPost
000077a8 g     F .text	000000a4 OS_FlagUnlink
00011800 g     O .rwdata	00000004 alt_max_fd
0000df14 g     F .text	00000044 alt_up_rs232_check_parity
000057c4 g     F .text	0000006c OS_MemCopy
00005830 g     F .text	000000cc OS_Sched
000024e0 g     F .text	00000070 _fclose_r
00007a24 g     F .text	000000f8 OSMemGet
0000aa34 g     F .text	000001bc OSTaskNameSet
0000d7c0 g     F .text	00000030 read_num_bytes_available
00002848 g     F .text	00000084 fflush
00013698 g     O .bss	00000004 __malloc_max_sbrked_mem
000136c4 g     O .bss	00000004 OSCtxSwCtr
0000ee98 g     F .text	00000020 OSTimeTickHook
0000e65c g     F .text	00000180 alt_irq_register
00011832 g     O .rwdata	00000002 OSFlagNameSize
0000d728 g     F .text	00000034 read_RI_bit
00005284 g     F .text	000000fc OS_EventTaskRemoveMulti
0000508c g     F .text	00000148 OS_EventTaskWaitMulti
0001184a g     O .rwdata	00000002 OSQSize
0000368c g     F .text	000000d4 lseek
00009500 g     F .text	00000214 OSSemPend
000117e0 g     O .rwdata	00000004 _global_impure_ptr
00001b04 g     F .text	00000564 _realloc_r
00011834 g     O .rwdata	00000002 OSLowestPrio
0001aa68 g       *ABS*	00000000 __bss_end
0000ef18 g     F .text	00000024 OSTCBInitHook
0001187a g     O .rwdata	00000002 OSTmrCfgTicksPerSec
0000eac8 g     F .text	00000108 alt_tick
0001181c g     O .rwdata	00000002 OSEventEn
00011876 g     O .rwdata	00000002 OSTmrCfgNameSize
0000d824 g     F .text	0000002c read_data_byte
00000918 g     F .text	00000014 __fp_lock_all
000075d4 g     F .text	000000e0 OS_FlagInit
0000ea24 g     F .text	000000a4 alt_alarm_stop
0000d75c g     F .text	00000030 read_RE_bit
00011858 g     O .rwdata	00000002 OSTaskIdleStkSize
0001370c g     O .bss	00000004 alt_irq_active
00009120 g     F .text	000000b4 OSSemAccept
00007d2c g     F .text	000000e0 OSMemPut
0000784c g     F .text	000001d8 OSMemCreate
000136d4 g     O .bss	00000004 OSIdleCtrMax
0000d498 g     F .text	0000003c alt_up_irda_get_available_space_in_write_FIFO
000000fc g     F .exceptions	000000cc alt_irq_handler
000102c0 g     O .rwdata	00000028 alt_dev_null
0001186c g     O .rwdata	00000002 OSTicksPerSec
0000d364 g     F .text	00000038 alt_up_character_lcd_cursor_blink_on
0000ebf4 g       .text	00000000 OSIntCtxSw
0000d9d4 g     F .text	00000074 alt_up_ps2_write_data_byte
0000e2a0 g     F .text	00000020 alt_dcache_flush_all
000136f0 g     O .bss	00000004 OSTCBFreeList
00011894 g       *ABS*	00000000 __ram_rwdata_end
00009714 g     F .text	00000174 OSSemPendAbort
000117f8 g     O .rwdata	00000008 alt_dev_list
00003aa4 g     F .text	000000f8 write
00011870 g     O .rwdata	00000002 OSVersionNbr
0000fa94 g       *ABS*	00000000 __ram_rodata_end
000033d4 g     F .text	000000b0 fstat
0000e09c g     F .text	00000094 alt_up_rs232_write_fd
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
00011818 g     O .rwdata	00000004 OSEndiannessTest
00003204 g     F .text	0000005c .hidden __umodsi3
0001182a g     O .rwdata	00000002 OSFlagGrpSize
0001aa68 g       *ABS*	00000000 end
0000dd08 g     F .text	00000098 alt_up_ps2_write_fd
0000d4d4 g     F .text	00000044 alt_up_irda_check_parity
0000c1b0 g     F .text	00000144 altera_avalon_jtag_uart_init
00005a90 g     F .text	000000c4 OS_TaskStat
000001c8 g     F .exceptions	00000074 alt_instruction_exception_entry
0000f4ec g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
0000ce24 g     F .text	0000007c alt_avalon_timer_sc_init
0000cad4 g     F .text	000002d0 altera_avalon_jtag_uart_write
00000908 g     F .text	00000004 __sfp_lock_acquire
00001718 g     F .text	000000d0 memchr
0000576c g     F .text	00000058 OS_MemClr
0000cfc8 g     F .text	00000080 alt_up_character_lcd_write
0000ecc4 g     F .text	0000014c OSTaskStkInit
00000278 g     F .text	00000038 task1
000029e8 g     F .text	000002fc _free_r
00004dfc g     F .text	00000188 OS_EventTaskRdy
0000f394 g     F .text	00000120 __call_exitprocs
000136d0 g     O .bss	00000001 OSCPUUsage
000117e8 g     O .rwdata	00000004 __malloc_sbrk_base
0000023c g     F .text	0000003c _start
000002b0 g     F .text	00000038 task2
00013710 g     O .bss	00000004 _alt_tick_rate
00008604 g     F .text	00000298 OSQPend
0000b308 g     F .text	00000108 OSTimeDly
00013714 g     O .bss	00000004 _alt_nticks
0000385c g     F .text	000000fc read
0000b878 g     F .text	000007d4 alt_sys_init
0000d214 g     F .text	0000008c alt_up_character_lcd_shift_display
0000f304 g     F .text	00000090 __register_exitproc
000136e6 g     O .bss	00000001 OSTaskCtr
0000dc20 g     F .text	0000005c alt_up_ps2_clear_fifo
0000ded8 g     F .text	0000003c alt_up_rs232_get_available_space_in_write_FIFO
0000b410 g     F .text	00000154 OSTimeDlyHMSM
0000d2a0 g     F .text	0000008c alt_up_character_lcd_erase_pos
0000c6b0 g     F .text	00000068 altera_avalon_jtag_uart_close
0000fa94 g       *ABS*	00000000 __ram_rwdata_start
0000f4ec g       *ABS*	00000000 __ram_rodata_start
0001771c g     O .bss	00000028 __malloc_current_mallinfo
0001181e g     O .rwdata	00000002 OSEventMax
00009888 g     F .text	0000011c OSSemPost
00004984 g     F .text	000000e4 OSSchedUnlock
0000c04c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000f044 g     F .text	000000d8 alt_get_fd
00013700 g     O .bss	00000004 OSMemFreeList
00004ad0 g     F .text	000000b8 OSStatInit
000073a8 g     F .text	000000c8 OSFlagQuery
00011854 g     O .rwdata	00000002 OSTaskCreateExtEn
000023c8 g     F .text	00000058 _close_r
0000f28c g     F .text	00000078 memcmp
00004ddc g     F .text	00000020 OS_Dummy
0000c10c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0001aa68 g       *ABS*	00000000 __alt_stack_base
0000c15c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0000d39c g     F .text	0000005c alt_up_irda_enable_read_interrupt
00002264 g     F .text	00000164 __swsetup_r
0001a788 g     O .bss	000001e0 OSQTbl
00000790 g     F .text	00000154 __sfp
0000feb8 g     O .rwdata	00000408 __malloc_av_
00000914 g     F .text	00000004 __sinit_lock_release
000136f4 g     O .bss	00000004 OSTCBHighRdy
000020c0 g     F .text	00000054 __sread
00013704 g     O .bss	00000004 OSQFreeList
0000de38 g     F .text	00000060 alt_up_rs232_disable_read_interrupt
0000ef3c g     F .text	00000108 alt_find_file
0000e2fc g     F .text	000000a8 alt_dev_llist_insert
00003cbc g     F .text	00000128 __malloc_lock
000039b0 g     F .text	000000b8 sbrk
00003fdc g     F .text	00000148 OSEventNameSet
000027e8 g     F .text	00000060 _fflush_r
000136e1 g     O .bss	00000001 OSRdyGrp
00013694 g       *ABS*	00000000 __bss_start
00001a14 g     F .text	000000f0 memset
000002e8 g     F .text	00000148 main
000136b0 g     O .bss	00000004 alt_envp
00013694 g     O .bss	00000004 __malloc_max_total_mem
0000c0ac g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000f818 g     O .rodata	00000100 OSUnMapTbl
0001184e g     O .rwdata	00000002 OSSemEn
0000d188 g     F .text	0000008c alt_up_character_lcd_shift_cursor
00006ffc g     F .text	000003ac OSFlagPost
000021f8 g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
00002550 g     F .text	00000070 fclose
00004f84 g     F .text	00000108 OS_EventTaskWait
0001571c g     O .bss	00002000 task2_stk
0000dbb0 g     F .text	00000070 alt_up_ps2_read_data_byte
00005b54 g     F .text	000000c4 OS_TaskStatStkChk
0000a740 g     F .text	00000158 OSTaskDelReq
00000f38 g     F .text	000007e0 _malloc_r
00011804 g     O .rwdata	00000004 alt_errno
00004a68 g     F .text	00000068 OSStart
00003c5c g     F .text	00000060 __env_unlock
00000df8 g     F .text	00000098 _fwalk
0000abf0 g     F .text	000001e0 OSTaskResume
00007e0c g     F .text	000000ec OSMemQuery
00011860 g     O .rwdata	00000002 OSTaskStatEn
0000d518 g     F .text	00000040 alt_up_irda_write_data
0001183a g     O .rwdata	00000002 OSMemMax
00008b84 g     F .text	0000017c OSQPostFront
0000dda0 g     F .text	0000003c alt_up_ps2_open_dev
000030ac g     F .text	00000080 .hidden __divsi3
000136e2 g     O .bss	00000003 OSRdyTbl
00011814 g     O .rwdata	00000002 OSDebugEn
0000cf8c g     F .text	0000003c alt_up_character_lcd_open_dev
000028cc g     F .text	0000011c _malloc_trim_r
0000d918 g     F .text	0000005c alt_up_ps2_enable_read_interrupt
0000f4ec g       *ABS*	00000000 __CTOR_END__
0001182c g     O .rwdata	00000002 OSFlagNodeSize
00011874 g     O .rwdata	00000002 OSTmrCfgMax
0000cf54 g     F .text	00000038 alt_up_character_lcd_init
00008108 g     F .text	000001b0 OSQCreate
0000a898 g     F .text	0000019c OSTaskNameGet
0000f4ec g       *ABS*	00000000 __flash_rodata_start
00008d00 g     F .text	00000218 OSQPostOpt
00004b88 g     F .text	00000234 OSTimeTick
0001185c g     O .rwdata	00000002 OSTaskMax
0000f4ec g       *ABS*	00000000 __DTOR_LIST__
000091d4 g     F .text	000000dc OSSemCreate
00011880 g     O .rwdata	00000002 OSTmrWheelSize
0000e130 g     F .text	0000003c alt_up_rs232_open_dev
00011856 g     O .rwdata	00000002 OSTaskDelEn
000099a4 g     F .text	00000114 OSSemQuery
000082b8 g     F .text	00000290 OSQDel
0000889c g     F .text	00000174 OSQPendAbort
0000b83c g     F .text	0000003c alt_irq_init
00003958 g     F .text	00000058 alt_release_fd
0000d7f0 g     F .text	00000034 read_data_valid
0000d32c g     F .text	00000038 alt_up_character_lcd_cursor_off
0000dab0 g     F .text	00000064 alt_up_ps2_write_data_byte_with_ack
0000f244 g     F .text	00000014 atexit
00002200 g     F .text	00000064 _write_r
000048f4 g     F .text	00000090 OSSchedLock
000063ac g     F .text	00000110 OSFlagCreate
000117e4 g     O .rwdata	00000004 _impure_ptr
000136a8 g     O .bss	00000004 alt_argc
000025c0 g     F .text	00000228 __sflush_r
0000e408 g     F .text	00000064 _do_dtors
00011826 g     O .rwdata	00000002 OSEventMultiEn
09000000 g       *ABS*	00000000 __alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM
000064bc g     F .text	00000258 OSFlagDel
000136c8 g     O .bss	00000004 OSEventFreeList
00000020 g       .exceptions	00000000 alt_irq_entry
00006998 g     F .text	00000600 OSFlagPend
00011872 g     O .rwdata	00000002 OSTmrEn
0000092c g     F .text	00000014 __fp_unlock_all
000117f0 g     O .rwdata	00000008 alt_fs_list
00005968 g     F .text	00000074 OS_StrCopy
0000dddc g     F .text	0000005c alt_up_rs232_enable_read_interrupt
0000df58 g     F .text	00000040 alt_up_rs232_write_data
0001183c g     O .rwdata	00000002 OSMemNameSize
0000eed8 g     F .text	00000020 OSInitHookEnd
00000020 g       *ABS*	00000000 __ram_exceptions_start
00011868 g     O .rwdata	00000002 OSTCBPrioTblMax
00002ef8 g     F .text	00000098 __swhatbuf_r
00011864 g     O .rwdata	00000002 OSTaskStatStkChkEn
00011838 g     O .rwdata	00000002 OSMemEn
00011842 g     O .rwdata	00000002 OSMutexEn
00011894 g       *ABS*	00000000 _edata
0001aa68 g       *ABS*	00000000 _end
000136dd g     O .bss	00000001 OSIntNesting
0000023c g       *ABS*	00000000 __ram_exceptions_end
0000c718 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0000b564 g     F .text	000001e0 OSTimeDlyResume
00006844 g     F .text	00000154 OSFlagNameSet
0000add0 g     F .text	000001b8 OSTaskStkChk
0001183e g     O .rwdata	00000002 OSMemSize
0000211c g     F .text	00000080 __swrite
000117ec g     O .rwdata	00000004 __malloc_trim_threshold
000136ec g     O .bss	00000004 OSTCBCur
0000f258 g     F .text	00000034 exit
0000d558 g     F .text	00000074 alt_up_irda_read_data
00011840 g     O .rwdata	00000002 OSMemTblSize
00000e90 g     F .text	000000a8 _fwalk_reent
0000d850 g     F .text	000000c8 alt_up_ps2_init
0000312c g     F .text	00000074 .hidden __modsi3
04000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
0000090c g     F .text	00000004 __sfp_lock_release
0000475c g     F .text	00000058 OSInit
0000b170 g     F .text	00000128 OSTaskQuery
0000d048 g     F .text	0000007c alt_up_character_lcd_string
00009078 g     F .text	000000a8 OS_QInit
000059dc g     F .text	00000054 OS_StrLen
0000d6ec g     F .text	0000003c alt_up_irda_open_dev
00007c10 g     F .text	0000011c OSMemNameSet
0001185a g     O .rwdata	00000002 OSTaskProfileEn
00013708 g     O .bss	00000004 OSTime
00018df4 g     O .bss	00000800 OSTaskIdleStk
0000f4b4 g     F .text	00000038 _exit
0000e16c g     F .text	00000134 alt_alarm_start
00006714 g     F .text	00000130 OSFlagNameGet
0000b744 g     F .text	00000060 OSTimeGet
00002d48 g     F .text	000001b0 __smakebuf_r
0000da48 g     F .text	00000068 alt_up_ps2_wait_for_ack
0000050c g     F .text	00000098 strlen
0000ee58 g     F .text	00000020 OSTaskSwHook
0000e8d0 g     F .text	00000154 open
00017744 g     O .bss	00000b40 OSEventTbl
00019648 g     O .bss	00000510 OSTCBTbl
00009ab8 g     F .text	00000100 OSSemSet
0000e4fc g     F .text	00000034 alt_icache_flush_all
0000d114 g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
00011888 g     O .rwdata	00000004 alt_priority_mask
000092b0 g     F .text	00000250 OSSemDel
000136cc g     O .bss	00000004 OSFlagFreeList
00011820 g     O .rwdata	00000002 OSEventNameSize
000136dc g     O .bss	00000001 OSStatRdy
000195f4 g     O .bss	00000054 OSTCBPrioTbl
00003b9c g     F .text	000000c0 __env_lock
0000dc7c g     F .text	0000008c alt_up_ps2_read_fd
00011866 g     O .rwdata	00000002 OSTaskSwHookEn
0000d5cc g     F .text	00000090 alt_up_irda_read_fd
0001188c g     O .rwdata	00000008 alt_alarm_list
0001182e g     O .rwdata	00000002 OSFlagWidth
0000e3a4 g     F .text	00000064 _do_ctors
0000de98 g     F .text	00000040 alt_up_rs232_get_used_space_in_read_FIFO
0000329c g     F .text	000000d0 close
000136b4 g     O .bss	00000004 alt_envsem
000136d8 g     O .bss	00000004 OSIdleCtrRun
00004dbc g     F .text	00000020 OSVersion
00011878 g     O .rwdata	00000002 OSTmrCfgWheelSize
000035cc g     F .text	00000084 alt_load
0000b298 g     F .text	00000070 OS_TaskStkClr
00011852 g     O .rwdata	00000002 OSTaskCreateEn
00005380 g     F .text	0000006c OS_EventWaitListInit
0000eef8 g     F .text	00000020 OSTaskIdleHook
00000910 g     F .text	00000004 __sinit_lock_acquire
0000af88 g     F .text	000001e8 OSTaskSuspend
00005a30 g     F .text	00000060 OS_TaskIdle
0001187e g     O .rwdata	00000002 OSTmrTblSize
00008f18 g     F .text	00000160 OSQQuery



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08408f14 	ori	at,at,572
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <OSCtxSw_SWITCH_PC+0x68>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001c80 	call	1c8 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <OSCtxSw_SWITCH_PC+0x68>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	00047b40 	call	47b4 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffc15 	stw	r2,-16(fp)

  return active;
 118:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0ffff17 	ldw	r3,-4(fp)
 130:	e0bffe17 	ldw	r2,-8(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001226 	beq	r2,zero,184 <alt_irq_handler+0x88>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 13c:	e0bffd17 	ldw	r2,-12(fp)
 140:	100690fa 	slli	r3,r2,3
 144:	008000b4 	movhi	r2,2
 148:	1885883a 	add	r2,r3,r2
 14c:	10ea5a17 	ldw	r3,-22168(r2)
 150:	e0bffd17 	ldw	r2,-12(fp)
 154:	100890fa 	slli	r4,r2,3
 158:	008000b4 	movhi	r2,2
 15c:	2085883a 	add	r2,r4,r2
 160:	10aa5b17 	ldw	r2,-22164(r2)
 164:	e17ffd17 	ldw	r5,-12(fp)
 168:	1009883a 	mov	r4,r2
 16c:	183ee83a 	callr	r3
#endif
        break;
 170:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
 174:	0005313a 	rdctl	r2,ipending
 178:	e0bffb15 	stw	r2,-20(fp)
  return active;
 17c:	e0bffb17 	ldw	r2,-20(fp)
 180:	00000706 	br	1a0 <alt_irq_handler+0xa4>
      }
      mask <<= 1;
 184:	e0bffe17 	ldw	r2,-8(fp)
 188:	1085883a 	add	r2,r2,r2
 18c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 190:	e0bffd17 	ldw	r2,-12(fp)
 194:	10800044 	addi	r2,r2,1
 198:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
 19c:	003fe306 	br	12c <alt_irq_handler+0x30>

    } while (1);

    active = alt_irq_pending ();
 1a0:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 1a4:	e0bfff17 	ldw	r2,-4(fp)
 1a8:	103fdd1e 	bne	r2,zero,120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1ac:	00048000 	call	4800 <OSIntExit>
}
 1b0:	0001883a 	nop
 1b4:	e037883a 	mov	sp,fp
 1b8:	dfc00117 	ldw	ra,4(sp)
 1bc:	df000017 	ldw	fp,0(sp)
 1c0:	dec00204 	addi	sp,sp,8
 1c4:	f800283a 	ret

000001c8 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1c8:	defffb04 	addi	sp,sp,-20
 1cc:	dfc00415 	stw	ra,16(sp)
 1d0:	df000315 	stw	fp,12(sp)
 1d4:	df000304 	addi	fp,sp,12
 1d8:	e13ffd15 	stw	r4,-12(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1dc:	000531fa 	rdctl	r2,exception
 1e0:	e0bfff15 	stw	r2,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1e4:	e0bfff17 	ldw	r2,-4(fp)
 1e8:	1004d0ba 	srli	r2,r2,2
 1ec:	108007cc 	andi	r2,r2,31
 1f0:	e0bfff15 	stw	r2,-4(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1f4:	0005333a 	rdctl	r2,badaddr
 1f8:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1fc:	d0a7ce17 	ldw	r2,-24776(gp)
 200:	10000726 	beq	r2,zero,220 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 204:	d0a7ce17 	ldw	r2,-24776(gp)
 208:	e0ffff17 	ldw	r3,-4(fp)
 20c:	e1bffe17 	ldw	r6,-8(fp)
 210:	e17ffd17 	ldw	r5,-12(fp)
 214:	1809883a 	mov	r4,r3
 218:	103ee83a 	callr	r2
 21c:	00000206 	br	228 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 220:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 224:	0005883a 	mov	r2,zero
}
 228:	e037883a 	mov	sp,fp
 22c:	dfc00117 	ldw	ra,4(sp)
 230:	df000017 	ldw	fp,0(sp)
 234:	dec00204 	addi	sp,sp,8
 238:	f800283a 	ret

Disassembly of section .text:

0000023c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     23c:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     240:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     244:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     248:	d6a5f814 	ori	gp,gp,38880
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     24c:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     250:	108da514 	ori	r2,r2,13972

    movhi r3, %hi(__bss_end)
     254:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     258:	18ea9a14 	ori	r3,r3,43624

    beq r2, r3, 1f
     25c:	10c00326 	beq	r2,r3,26c <_start+0x30>

0:
    stw zero, (r2)
     260:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     264:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     268:	10fffd36 	bltu	r2,r3,260 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     26c:	00035cc0 	call	35cc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     270:	00037600 	call	3760 <alt_main>

00000274 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     274:	003fff06 	br	274 <alt_after_alt_main>

00000278 <task1>:
#define TASK1_PRIORITY      1
#define TASK2_PRIORITY      2

/* Prints "Hello World" and sleeps for three seconds */
void task1(void* pdata)
{
     278:	defffd04 	addi	sp,sp,-12
     27c:	dfc00215 	stw	ra,8(sp)
     280:	df000115 	stw	fp,4(sp)
     284:	df000104 	addi	fp,sp,4
     288:	e13fff15 	stw	r4,-4(fp)
  while (1)
  { 
    printf("Hello from task1\n");
     28c:	01000074 	movhi	r4,1
     290:	213d3b04 	addi	r4,r4,-2836
     294:	00004fc0 	call	4fc <puts>
    OSTimeDlyHMSM(0, 0, 3, 0);
     298:	000f883a 	mov	r7,zero
     29c:	018000c4 	movi	r6,3
     2a0:	000b883a 	mov	r5,zero
     2a4:	0009883a 	mov	r4,zero
     2a8:	000b4100 	call	b410 <OSTimeDlyHMSM>
    printf("Hello from task1\n");
     2ac:	003ff706 	br	28c <task1+0x14>

000002b0 <task2>:
  }
}
/* Prints "Hello World" and sleeps for three seconds */
void task2(void* pdata)
{
     2b0:	defffd04 	addi	sp,sp,-12
     2b4:	dfc00215 	stw	ra,8(sp)
     2b8:	df000115 	stw	fp,4(sp)
     2bc:	df000104 	addi	fp,sp,4
     2c0:	e13fff15 	stw	r4,-4(fp)
  while (1)
  { 
    printf("Hello from task2\n");
     2c4:	01000074 	movhi	r4,1
     2c8:	213d4004 	addi	r4,r4,-2816
     2cc:	00004fc0 	call	4fc <puts>
    OSTimeDlyHMSM(0, 0, 3, 0);
     2d0:	000f883a 	mov	r7,zero
     2d4:	018000c4 	movi	r6,3
     2d8:	000b883a 	mov	r5,zero
     2dc:	0009883a 	mov	r4,zero
     2e0:	000b4100 	call	b410 <OSTimeDlyHMSM>
    printf("Hello from task2\n");
     2e4:	003ff706 	br	2c4 <task2+0x14>

000002e8 <main>:
  }
}
/* The main function creates two task and starts multi-tasking */
int main(void)
{
     2e8:	defff904 	addi	sp,sp,-28
     2ec:	dfc00615 	stw	ra,24(sp)
     2f0:	df000515 	stw	fp,20(sp)
     2f4:	df000504 	addi	fp,sp,20

  printf("MicroC/OS-II Licensing Terms\n");
     2f8:	01000074 	movhi	r4,1
     2fc:	213d4504 	addi	r4,r4,-2796
     300:	00004fc0 	call	4fc <puts>
  printf("============================\n");
     304:	01000074 	movhi	r4,1
     308:	213d4d04 	addi	r4,r4,-2764
     30c:	00004fc0 	call	4fc <puts>
  printf("Micrium\'s uC/OS-II is a real-time operating system (RTOS) available in source code.\n");
     310:	01000074 	movhi	r4,1
     314:	213d5504 	addi	r4,r4,-2732
     318:	00004fc0 	call	4fc <puts>
  printf("This is not open-source software.\n");
     31c:	01000074 	movhi	r4,1
     320:	213d6a04 	addi	r4,r4,-2648
     324:	00004fc0 	call	4fc <puts>
  printf("This RTOS can be used free of charge only for non-commercial purposes and academic projects,\n");
     328:	01000074 	movhi	r4,1
     32c:	213d7304 	addi	r4,r4,-2612
     330:	00004fc0 	call	4fc <puts>
  printf("any other use of the code is subject to the terms of an end-user license agreement\n");
     334:	01000074 	movhi	r4,1
     338:	213d8b04 	addi	r4,r4,-2516
     33c:	00004fc0 	call	4fc <puts>
  printf("for more information please see the license files included in the BSP project or contact Micrium.\n");
     340:	01000074 	movhi	r4,1
     344:	213da004 	addi	r4,r4,-2432
     348:	00004fc0 	call	4fc <puts>
  printf("Anyone planning to use a Micrium RTOS in a commercial product must purchase a commercial license\n");
     34c:	01000074 	movhi	r4,1
     350:	213db904 	addi	r4,r4,-2332
     354:	00004fc0 	call	4fc <puts>
  printf("from the owner of the software, Silicon Laboratories Inc.\n");
     358:	01000074 	movhi	r4,1
     35c:	213dd204 	addi	r4,r4,-2232
     360:	00004fc0 	call	4fc <puts>
  printf("Licensing information is available at:\n");
     364:	01000074 	movhi	r4,1
     368:	213de104 	addi	r4,r4,-2172
     36c:	00004fc0 	call	4fc <puts>
  printf("Phone: +1 954-217-2036\n");
     370:	01000074 	movhi	r4,1
     374:	213deb04 	addi	r4,r4,-2132
     378:	00004fc0 	call	4fc <puts>
  printf("Email: sales@micrium.com\n");
     37c:	01000074 	movhi	r4,1
     380:	213df104 	addi	r4,r4,-2108
     384:	00004fc0 	call	4fc <puts>
  printf("URL: www.micrium.com\n\n\n");  
     388:	01000074 	movhi	r4,1
     38c:	213df804 	addi	r4,r4,-2080
     390:	00004fc0 	call	4fc <puts>

  OSTaskCreateExt(task1,
     394:	d8000415 	stw	zero,16(sp)
     398:	d8000315 	stw	zero,12(sp)
     39c:	00820004 	movi	r2,2048
     3a0:	d8800215 	stw	r2,8(sp)
     3a4:	00800074 	movhi	r2,1
     3a8:	108dc704 	addi	r2,r2,14108
     3ac:	d8800115 	stw	r2,4(sp)
     3b0:	00800044 	movi	r2,1
     3b4:	d8800015 	stw	r2,0(sp)
     3b8:	01c00044 	movi	r7,1
     3bc:	01800074 	movhi	r6,1
     3c0:	3195c604 	addi	r6,r6,22296
     3c4:	000b883a 	mov	r5,zero
     3c8:	01000034 	movhi	r4,0
     3cc:	21009e04 	addi	r4,r4,632
     3d0:	000a2200 	call	a220 <OSTaskCreateExt>
                  TASK_STACKSIZE,
                  NULL,
                  0);
              
               
  OSTaskCreateExt(task2,
     3d4:	d8000415 	stw	zero,16(sp)
     3d8:	d8000315 	stw	zero,12(sp)
     3dc:	00820004 	movi	r2,2048
     3e0:	d8800215 	stw	r2,8(sp)
     3e4:	00800074 	movhi	r2,1
     3e8:	1095c704 	addi	r2,r2,22300
     3ec:	d8800115 	stw	r2,4(sp)
     3f0:	00800084 	movi	r2,2
     3f4:	d8800015 	stw	r2,0(sp)
     3f8:	01c00084 	movi	r7,2
     3fc:	01800074 	movhi	r6,1
     400:	319dc604 	addi	r6,r6,30488
     404:	000b883a 	mov	r5,zero
     408:	01000034 	movhi	r4,0
     40c:	2100ac04 	addi	r4,r4,688
     410:	000a2200 	call	a220 <OSTaskCreateExt>
                  TASK2_PRIORITY,
                  task2_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);
  OSStart();
     414:	0004a680 	call	4a68 <OSStart>
  return 0;
     418:	0005883a 	mov	r2,zero
}
     41c:	e037883a 	mov	sp,fp
     420:	dfc00117 	ldw	ra,4(sp)
     424:	df000017 	ldw	fp,0(sp)
     428:	dec00204 	addi	sp,sp,8
     42c:	f800283a 	ret

00000430 <_puts_r>:
     430:	defff504 	addi	sp,sp,-44
     434:	dc000815 	stw	r16,32(sp)
     438:	2021883a 	mov	r16,r4
     43c:	2809883a 	mov	r4,r5
     440:	dc400915 	stw	r17,36(sp)
     444:	dfc00a15 	stw	ra,40(sp)
     448:	2823883a 	mov	r17,r5
     44c:	000050c0 	call	50c <strlen>
     450:	11000044 	addi	r4,r2,1
     454:	d8800515 	stw	r2,20(sp)
     458:	00800044 	movi	r2,1
     45c:	00c00074 	movhi	r3,1
     460:	d8800715 	stw	r2,28(sp)
     464:	d8800404 	addi	r2,sp,16
     468:	18fdfe04 	addi	r3,r3,-2056
     46c:	d8800115 	stw	r2,4(sp)
     470:	00800084 	movi	r2,2
     474:	dc400415 	stw	r17,16(sp)
     478:	d8c00615 	stw	r3,24(sp)
     47c:	d9000315 	stw	r4,12(sp)
     480:	d8800215 	stw	r2,8(sp)
     484:	81400217 	ldw	r5,8(r16)
     488:	80000226 	beq	r16,zero,494 <_puts_r+0x64>
     48c:	80800e17 	ldw	r2,56(r16)
     490:	10001326 	beq	r2,zero,4e0 <_puts_r+0xb0>
     494:	2880030b 	ldhu	r2,12(r5)
     498:	10c8000c 	andi	r3,r2,8192
     49c:	1800061e 	bne	r3,zero,4b8 <_puts_r+0x88>
     4a0:	28c01917 	ldw	r3,100(r5)
     4a4:	0137ffc4 	movi	r4,-8193
     4a8:	10880014 	ori	r2,r2,8192
     4ac:	1906703a 	and	r3,r3,r4
     4b0:	2880030d 	sth	r2,12(r5)
     4b4:	28c01915 	stw	r3,100(r5)
     4b8:	d9800104 	addi	r6,sp,4
     4bc:	8009883a 	mov	r4,r16
     4c0:	00009400 	call	940 <__sfvwrite_r>
     4c4:	10000b1e 	bne	r2,zero,4f4 <_puts_r+0xc4>
     4c8:	00800284 	movi	r2,10
     4cc:	dfc00a17 	ldw	ra,40(sp)
     4d0:	dc400917 	ldw	r17,36(sp)
     4d4:	dc000817 	ldw	r16,32(sp)
     4d8:	dec00b04 	addi	sp,sp,44
     4dc:	f800283a 	ret
     4e0:	8009883a 	mov	r4,r16
     4e4:	d9400015 	stw	r5,0(sp)
     4e8:	00008f80 	call	8f8 <__sinit>
     4ec:	d9400017 	ldw	r5,0(sp)
     4f0:	003fe806 	br	494 <_puts_r+0x64>
     4f4:	00bfffc4 	movi	r2,-1
     4f8:	003ff406 	br	4cc <_puts_r+0x9c>

000004fc <puts>:
     4fc:	00800074 	movhi	r2,1
     500:	200b883a 	mov	r5,r4
     504:	1105f917 	ldw	r4,6116(r2)
     508:	00004301 	jmpi	430 <_puts_r>

0000050c <strlen>:
     50c:	208000cc 	andi	r2,r4,3
     510:	10000926 	beq	r2,zero,538 <strlen+0x2c>
     514:	2005883a 	mov	r2,r4
     518:	00000306 	br	528 <strlen+0x1c>
     51c:	10800044 	addi	r2,r2,1
     520:	10c000cc 	andi	r3,r2,3
     524:	18000526 	beq	r3,zero,53c <strlen+0x30>
     528:	10c00007 	ldb	r3,0(r2)
     52c:	183ffb1e 	bne	r3,zero,51c <strlen+0x10>
     530:	1105c83a 	sub	r2,r2,r4
     534:	f800283a 	ret
     538:	2005883a 	mov	r2,r4
     53c:	11400017 	ldw	r5,0(r2)
     540:	01ffbff4 	movhi	r7,65279
     544:	39ffbfc4 	addi	r7,r7,-257
     548:	29c7883a 	add	r3,r5,r7
     54c:	01a02074 	movhi	r6,32897
     550:	014a303a 	nor	r5,zero,r5
     554:	1946703a 	and	r3,r3,r5
     558:	31a02004 	addi	r6,r6,-32640
     55c:	1986703a 	and	r3,r3,r6
     560:	1800071e 	bne	r3,zero,580 <strlen+0x74>
     564:	11400117 	ldw	r5,4(r2)
     568:	10800104 	addi	r2,r2,4
     56c:	29c7883a 	add	r3,r5,r7
     570:	014a303a 	nor	r5,zero,r5
     574:	1946703a 	and	r3,r3,r5
     578:	1986703a 	and	r3,r3,r6
     57c:	183ff926 	beq	r3,zero,564 <strlen+0x58>
     580:	10c00007 	ldb	r3,0(r2)
     584:	183fea26 	beq	r3,zero,530 <strlen+0x24>
     588:	10c00047 	ldb	r3,1(r2)
     58c:	10800044 	addi	r2,r2,1
     590:	183fe726 	beq	r3,zero,530 <strlen+0x24>
     594:	10c00047 	ldb	r3,1(r2)
     598:	10800044 	addi	r2,r2,1
     59c:	183ffa1e 	bne	r3,zero,588 <strlen+0x7c>
     5a0:	003fe306 	br	530 <strlen+0x24>

000005a4 <__fp_lock>:
     5a4:	0005883a 	mov	r2,zero
     5a8:	f800283a 	ret

000005ac <_cleanup_r>:
     5ac:	01400034 	movhi	r5,0
     5b0:	29493804 	addi	r5,r5,9440
     5b4:	0000e901 	jmpi	e90 <_fwalk_reent>

000005b8 <__fp_unlock>:
     5b8:	0005883a 	mov	r2,zero
     5bc:	f800283a 	ret

000005c0 <__sinit.part.0>:
     5c0:	00c00034 	movhi	r3,0
     5c4:	20800117 	ldw	r2,4(r4)
     5c8:	18c16b04 	addi	r3,r3,1452
     5cc:	20c00f15 	stw	r3,60(r4)
     5d0:	2140bb04 	addi	r5,r4,748
     5d4:	00c000c4 	movi	r3,3
     5d8:	20c0b915 	stw	r3,740(r4)
     5dc:	2140ba15 	stw	r5,744(r4)
     5e0:	2000b815 	stw	zero,736(r4)
     5e4:	10001705 	stb	zero,92(r2)
     5e8:	10001745 	stb	zero,93(r2)
     5ec:	10001785 	stb	zero,94(r2)
     5f0:	100017c5 	stb	zero,95(r2)
     5f4:	10001805 	stb	zero,96(r2)
     5f8:	10001845 	stb	zero,97(r2)
     5fc:	10001885 	stb	zero,98(r2)
     600:	100018c5 	stb	zero,99(r2)
     604:	00c00104 	movi	r3,4
     608:	10c00315 	stw	r3,12(r2)
     60c:	02000034 	movhi	r8,0
     610:	20c00217 	ldw	r3,8(r4)
     614:	01c00034 	movhi	r7,0
     618:	01800034 	movhi	r6,0
     61c:	01400034 	movhi	r5,0
     620:	42083004 	addi	r8,r8,8384
     624:	39c84704 	addi	r7,r7,8476
     628:	31886704 	addi	r6,r6,8604
     62c:	29487e04 	addi	r5,r5,8696
     630:	02400074 	movhi	r9,1
     634:	10001915 	stw	zero,100(r2)
     638:	10000015 	stw	zero,0(r2)
     63c:	10000115 	stw	zero,4(r2)
     640:	10000215 	stw	zero,8(r2)
     644:	10000415 	stw	zero,16(r2)
     648:	10000515 	stw	zero,20(r2)
     64c:	10000615 	stw	zero,24(r2)
     650:	10800715 	stw	r2,28(r2)
     654:	12000815 	stw	r8,32(r2)
     658:	11c00915 	stw	r7,36(r2)
     65c:	11800a15 	stw	r6,40(r2)
     660:	11400b15 	stw	r5,44(r2)
     664:	4a400284 	addi	r9,r9,10
     668:	1a400315 	stw	r9,12(r3)
     66c:	18001915 	stw	zero,100(r3)
     670:	18000015 	stw	zero,0(r3)
     674:	18000115 	stw	zero,4(r3)
     678:	18000215 	stw	zero,8(r3)
     67c:	18000415 	stw	zero,16(r3)
     680:	18001705 	stb	zero,92(r3)
     684:	18001745 	stb	zero,93(r3)
     688:	18001785 	stb	zero,94(r3)
     68c:	180017c5 	stb	zero,95(r3)
     690:	18001805 	stb	zero,96(r3)
     694:	18001845 	stb	zero,97(r3)
     698:	18001885 	stb	zero,98(r3)
     69c:	180018c5 	stb	zero,99(r3)
     6a0:	20800317 	ldw	r2,12(r4)
     6a4:	024000b4 	movhi	r9,2
     6a8:	18000515 	stw	zero,20(r3)
     6ac:	18000615 	stw	zero,24(r3)
     6b0:	18c00715 	stw	r3,28(r3)
     6b4:	1a000815 	stw	r8,32(r3)
     6b8:	19c00915 	stw	r7,36(r3)
     6bc:	19800a15 	stw	r6,40(r3)
     6c0:	19400b15 	stw	r5,44(r3)
     6c4:	4a400484 	addi	r9,r9,18
     6c8:	10001915 	stw	zero,100(r2)
     6cc:	10000015 	stw	zero,0(r2)
     6d0:	10000115 	stw	zero,4(r2)
     6d4:	10000215 	stw	zero,8(r2)
     6d8:	12400315 	stw	r9,12(r2)
     6dc:	10000415 	stw	zero,16(r2)
     6e0:	10000515 	stw	zero,20(r2)
     6e4:	10000615 	stw	zero,24(r2)
     6e8:	10001705 	stb	zero,92(r2)
     6ec:	10001745 	stb	zero,93(r2)
     6f0:	10001785 	stb	zero,94(r2)
     6f4:	100017c5 	stb	zero,95(r2)
     6f8:	10001805 	stb	zero,96(r2)
     6fc:	10001845 	stb	zero,97(r2)
     700:	10001885 	stb	zero,98(r2)
     704:	100018c5 	stb	zero,99(r2)
     708:	10800715 	stw	r2,28(r2)
     70c:	12000815 	stw	r8,32(r2)
     710:	11c00915 	stw	r7,36(r2)
     714:	11800a15 	stw	r6,40(r2)
     718:	11400b15 	stw	r5,44(r2)
     71c:	00800044 	movi	r2,1
     720:	20800e15 	stw	r2,56(r4)
     724:	f800283a 	ret

00000728 <__sfmoreglue>:
     728:	defffc04 	addi	sp,sp,-16
     72c:	dc400115 	stw	r17,4(sp)
     730:	2c7fffc4 	addi	r17,r5,-1
     734:	8c401a24 	muli	r17,r17,104
     738:	dc800215 	stw	r18,8(sp)
     73c:	2825883a 	mov	r18,r5
     740:	89401d04 	addi	r5,r17,116
     744:	dc000015 	stw	r16,0(sp)
     748:	dfc00315 	stw	ra,12(sp)
     74c:	0000f380 	call	f38 <_malloc_r>
     750:	1021883a 	mov	r16,r2
     754:	10000726 	beq	r2,zero,774 <__sfmoreglue+0x4c>
     758:	11000304 	addi	r4,r2,12
     75c:	10000015 	stw	zero,0(r2)
     760:	14800115 	stw	r18,4(r2)
     764:	11000215 	stw	r4,8(r2)
     768:	89801a04 	addi	r6,r17,104
     76c:	000b883a 	mov	r5,zero
     770:	0001a140 	call	1a14 <memset>
     774:	8005883a 	mov	r2,r16
     778:	dfc00317 	ldw	ra,12(sp)
     77c:	dc800217 	ldw	r18,8(sp)
     780:	dc400117 	ldw	r17,4(sp)
     784:	dc000017 	ldw	r16,0(sp)
     788:	dec00404 	addi	sp,sp,16
     78c:	f800283a 	ret

00000790 <__sfp>:
     790:	defffb04 	addi	sp,sp,-20
     794:	00800074 	movhi	r2,1
     798:	dc000015 	stw	r16,0(sp)
     79c:	1405f817 	ldw	r16,6112(r2)
     7a0:	dc400115 	stw	r17,4(sp)
     7a4:	dfc00415 	stw	ra,16(sp)
     7a8:	80800e17 	ldw	r2,56(r16)
     7ac:	dcc00315 	stw	r19,12(sp)
     7b0:	dc800215 	stw	r18,8(sp)
     7b4:	2023883a 	mov	r17,r4
     7b8:	10003126 	beq	r2,zero,880 <__sfp+0xf0>
     7bc:	8100ba17 	ldw	r4,744(r16)
     7c0:	8140b917 	ldw	r5,740(r16)
     7c4:	04c00104 	movi	r19,4
     7c8:	8400b804 	addi	r16,r16,736
     7cc:	297fffc4 	addi	r5,r5,-1
     7d0:	2800050e 	bge	r5,zero,7e8 <__sfp+0x58>
     7d4:	00002406 	br	868 <__sfp+0xd8>
     7d8:	297fffc4 	addi	r5,r5,-1
     7dc:	28bfffd8 	cmpnei	r2,r5,-1
     7e0:	21001a04 	addi	r4,r4,104
     7e4:	10002026 	beq	r2,zero,868 <__sfp+0xd8>
     7e8:	2080030f 	ldh	r2,12(r4)
     7ec:	103ffa1e 	bne	r2,zero,7d8 <__sfp+0x48>
     7f0:	00bffff4 	movhi	r2,65535
     7f4:	10800044 	addi	r2,r2,1
     7f8:	20001915 	stw	zero,100(r4)
     7fc:	20000015 	stw	zero,0(r4)
     800:	20000115 	stw	zero,4(r4)
     804:	20000215 	stw	zero,8(r4)
     808:	20800315 	stw	r2,12(r4)
     80c:	20000415 	stw	zero,16(r4)
     810:	20000515 	stw	zero,20(r4)
     814:	20000615 	stw	zero,24(r4)
     818:	20001705 	stb	zero,92(r4)
     81c:	20001745 	stb	zero,93(r4)
     820:	20001785 	stb	zero,94(r4)
     824:	200017c5 	stb	zero,95(r4)
     828:	20001805 	stb	zero,96(r4)
     82c:	20001845 	stb	zero,97(r4)
     830:	20001885 	stb	zero,98(r4)
     834:	200018c5 	stb	zero,99(r4)
     838:	20000c15 	stw	zero,48(r4)
     83c:	20000d15 	stw	zero,52(r4)
     840:	20001115 	stw	zero,68(r4)
     844:	20001215 	stw	zero,72(r4)
     848:	2005883a 	mov	r2,r4
     84c:	dfc00417 	ldw	ra,16(sp)
     850:	dcc00317 	ldw	r19,12(sp)
     854:	dc800217 	ldw	r18,8(sp)
     858:	dc400117 	ldw	r17,4(sp)
     85c:	dc000017 	ldw	r16,0(sp)
     860:	dec00504 	addi	sp,sp,20
     864:	f800283a 	ret
     868:	80800017 	ldw	r2,0(r16)
     86c:	10000726 	beq	r2,zero,88c <__sfp+0xfc>
     870:	11000217 	ldw	r4,8(r2)
     874:	11400117 	ldw	r5,4(r2)
     878:	1021883a 	mov	r16,r2
     87c:	003fd306 	br	7cc <__sfp+0x3c>
     880:	8009883a 	mov	r4,r16
     884:	00005c00 	call	5c0 <__sinit.part.0>
     888:	003fcc06 	br	7bc <__sfp+0x2c>
     88c:	01406b04 	movi	r5,428
     890:	8809883a 	mov	r4,r17
     894:	0000f380 	call	f38 <_malloc_r>
     898:	1025883a 	mov	r18,r2
     89c:	10000c26 	beq	r2,zero,8d0 <__sfp+0x140>
     8a0:	11000304 	addi	r4,r2,12
     8a4:	11000215 	stw	r4,8(r2)
     8a8:	000b883a 	mov	r5,zero
     8ac:	10000015 	stw	zero,0(r2)
     8b0:	14c00115 	stw	r19,4(r2)
     8b4:	01806804 	movi	r6,416
     8b8:	0001a140 	call	1a14 <memset>
     8bc:	1009883a 	mov	r4,r2
     8c0:	84800015 	stw	r18,0(r16)
     8c4:	014000c4 	movi	r5,3
     8c8:	9021883a 	mov	r16,r18
     8cc:	003fc606 	br	7e8 <__sfp+0x58>
     8d0:	80000015 	stw	zero,0(r16)
     8d4:	00800304 	movi	r2,12
     8d8:	88800015 	stw	r2,0(r17)
     8dc:	0009883a 	mov	r4,zero
     8e0:	003fd906 	br	848 <__sfp+0xb8>

000008e4 <_cleanup>:
     8e4:	00800074 	movhi	r2,1
     8e8:	1105f817 	ldw	r4,6112(r2)
     8ec:	01400034 	movhi	r5,0
     8f0:	29493804 	addi	r5,r5,9440
     8f4:	0000e901 	jmpi	e90 <_fwalk_reent>

000008f8 <__sinit>:
     8f8:	20800e17 	ldw	r2,56(r4)
     8fc:	10000126 	beq	r2,zero,904 <__sinit+0xc>
     900:	f800283a 	ret
     904:	00005c01 	jmpi	5c0 <__sinit.part.0>

00000908 <__sfp_lock_acquire>:
     908:	f800283a 	ret

0000090c <__sfp_lock_release>:
     90c:	f800283a 	ret

00000910 <__sinit_lock_acquire>:
     910:	f800283a 	ret

00000914 <__sinit_lock_release>:
     914:	f800283a 	ret

00000918 <__fp_lock_all>:
     918:	00800074 	movhi	r2,1
     91c:	1105f917 	ldw	r4,6116(r2)
     920:	01400034 	movhi	r5,0
     924:	29416904 	addi	r5,r5,1444
     928:	0000df81 	jmpi	df8 <_fwalk>

0000092c <__fp_unlock_all>:
     92c:	00800074 	movhi	r2,1
     930:	1105f917 	ldw	r4,6116(r2)
     934:	01400034 	movhi	r5,0
     938:	29416e04 	addi	r5,r5,1464
     93c:	0000df81 	jmpi	df8 <_fwalk>

00000940 <__sfvwrite_r>:
     940:	30800217 	ldw	r2,8(r6)
     944:	1000a226 	beq	r2,zero,bd0 <__sfvwrite_r+0x290>
     948:	29c0030b 	ldhu	r7,12(r5)
     94c:	defff404 	addi	sp,sp,-48
     950:	ddc00915 	stw	r23,36(sp)
     954:	dd400715 	stw	r21,28(sp)
     958:	dc000215 	stw	r16,8(sp)
     95c:	dfc00b15 	stw	ra,44(sp)
     960:	df000a15 	stw	fp,40(sp)
     964:	dd800815 	stw	r22,32(sp)
     968:	dd000615 	stw	r20,24(sp)
     96c:	dcc00515 	stw	r19,20(sp)
     970:	dc800415 	stw	r18,16(sp)
     974:	dc400315 	stw	r17,12(sp)
     978:	3880020c 	andi	r2,r7,8
     97c:	302f883a 	mov	r23,r6
     980:	202b883a 	mov	r21,r4
     984:	2821883a 	mov	r16,r5
     988:	10002226 	beq	r2,zero,a14 <__sfvwrite_r+0xd4>
     98c:	28800417 	ldw	r2,16(r5)
     990:	10002026 	beq	r2,zero,a14 <__sfvwrite_r+0xd4>
     994:	3880008c 	andi	r2,r7,2
     998:	bc400017 	ldw	r17,0(r23)
     99c:	10002526 	beq	r2,zero,a34 <__sfvwrite_r+0xf4>
     9a0:	80800917 	ldw	r2,36(r16)
     9a4:	81400717 	ldw	r5,28(r16)
     9a8:	05200034 	movhi	r20,32768
     9ac:	0027883a 	mov	r19,zero
     9b0:	0025883a 	mov	r18,zero
     9b4:	a53f0004 	addi	r20,r20,-1024
     9b8:	980d883a 	mov	r6,r19
     9bc:	a809883a 	mov	r4,r21
     9c0:	90001026 	beq	r18,zero,a04 <__sfvwrite_r+0xc4>
     9c4:	900f883a 	mov	r7,r18
     9c8:	a480012e 	bgeu	r20,r18,9d0 <__sfvwrite_r+0x90>
     9cc:	a00f883a 	mov	r7,r20
     9d0:	103ee83a 	callr	r2
     9d4:	0080790e 	bge	zero,r2,bbc <__sfvwrite_r+0x27c>
     9d8:	b9000217 	ldw	r4,8(r23)
     9dc:	98a7883a 	add	r19,r19,r2
     9e0:	90a5c83a 	sub	r18,r18,r2
     9e4:	2085c83a 	sub	r2,r4,r2
     9e8:	b8800215 	stw	r2,8(r23)
     9ec:	10006226 	beq	r2,zero,b78 <__sfvwrite_r+0x238>
     9f0:	80800917 	ldw	r2,36(r16)
     9f4:	81400717 	ldw	r5,28(r16)
     9f8:	980d883a 	mov	r6,r19
     9fc:	a809883a 	mov	r4,r21
     a00:	903ff01e 	bne	r18,zero,9c4 <__sfvwrite_r+0x84>
     a04:	8cc00017 	ldw	r19,0(r17)
     a08:	8c800117 	ldw	r18,4(r17)
     a0c:	8c400204 	addi	r17,r17,8
     a10:	003fe906 	br	9b8 <__sfvwrite_r+0x78>
     a14:	800b883a 	mov	r5,r16
     a18:	a809883a 	mov	r4,r21
     a1c:	00022640 	call	2264 <__swsetup_r>
     a20:	1000f31e 	bne	r2,zero,df0 <__sfvwrite_r+0x4b0>
     a24:	81c0030b 	ldhu	r7,12(r16)
     a28:	bc400017 	ldw	r17,0(r23)
     a2c:	3880008c 	andi	r2,r7,2
     a30:	103fdb1e 	bne	r2,zero,9a0 <__sfvwrite_r+0x60>
     a34:	3880004c 	andi	r2,r7,1
     a38:	84800217 	ldw	r18,8(r16)
     a3c:	82000017 	ldw	r8,0(r16)
     a40:	1000651e 	bne	r2,zero,bd8 <__sfvwrite_r+0x298>
     a44:	00a00034 	movhi	r2,32768
     a48:	10bfff84 	addi	r2,r2,-2
     a4c:	00e00034 	movhi	r3,32768
     a50:	d8800015 	stw	r2,0(sp)
     a54:	18bfffc4 	addi	r2,r3,-1
     a58:	0039883a 	mov	fp,zero
     a5c:	0027883a 	mov	r19,zero
     a60:	d8800115 	stw	r2,4(sp)
     a64:	98004026 	beq	r19,zero,b68 <__sfvwrite_r+0x228>
     a68:	3880800c 	andi	r2,r7,512
     a6c:	10009626 	beq	r2,zero,cc8 <__sfvwrite_r+0x388>
     a70:	902d883a 	mov	r22,r18
     a74:	9c80ba36 	bltu	r19,r18,d60 <__sfvwrite_r+0x420>
     a78:	3881200c 	andi	r2,r7,1152
     a7c:	10002526 	beq	r2,zero,b14 <__sfvwrite_r+0x1d4>
     a80:	81000517 	ldw	r4,20(r16)
     a84:	81400417 	ldw	r5,16(r16)
     a88:	98800044 	addi	r2,r19,1
     a8c:	210000e4 	muli	r4,r4,3
     a90:	4165c83a 	sub	r18,r8,r5
     a94:	1485883a 	add	r2,r2,r18
     a98:	2028d7fa 	srli	r20,r4,31
     a9c:	a109883a 	add	r4,r20,r4
     aa0:	2029d07a 	srai	r20,r4,1
     aa4:	a00d883a 	mov	r6,r20
     aa8:	a080022e 	bgeu	r20,r2,ab4 <__sfvwrite_r+0x174>
     aac:	1029883a 	mov	r20,r2
     ab0:	100d883a 	mov	r6,r2
     ab4:	39c1000c 	andi	r7,r7,1024
     ab8:	3800bd26 	beq	r7,zero,db0 <__sfvwrite_r+0x470>
     abc:	a809883a 	mov	r4,r21
     ac0:	300b883a 	mov	r5,r6
     ac4:	0000f380 	call	f38 <_malloc_r>
     ac8:	1009883a 	mov	r4,r2
     acc:	1000c426 	beq	r2,zero,de0 <__sfvwrite_r+0x4a0>
     ad0:	81400417 	ldw	r5,16(r16)
     ad4:	900d883a 	mov	r6,r18
     ad8:	00017e80 	call	17e8 <memcpy>
     adc:	1009883a 	mov	r4,r2
     ae0:	8080030b 	ldhu	r2,12(r16)
     ae4:	00fedfc4 	movi	r3,-1153
     ae8:	10c4703a 	and	r2,r2,r3
     aec:	10802014 	ori	r2,r2,128
     af0:	8080030d 	sth	r2,12(r16)
     af4:	2491883a 	add	r8,r4,r18
     af8:	a485c83a 	sub	r2,r20,r18
     afc:	81000415 	stw	r4,16(r16)
     b00:	82000015 	stw	r8,0(r16)
     b04:	85000515 	stw	r20,20(r16)
     b08:	9825883a 	mov	r18,r19
     b0c:	80800215 	stw	r2,8(r16)
     b10:	982d883a 	mov	r22,r19
     b14:	4009883a 	mov	r4,r8
     b18:	b00d883a 	mov	r6,r22
     b1c:	e00b883a 	mov	r5,fp
     b20:	00018e80 	call	18e8 <memmove>
     b24:	81000217 	ldw	r4,8(r16)
     b28:	80800017 	ldw	r2,0(r16)
     b2c:	9829883a 	mov	r20,r19
     b30:	24a5c83a 	sub	r18,r4,r18
     b34:	1585883a 	add	r2,r2,r22
     b38:	84800215 	stw	r18,8(r16)
     b3c:	80800015 	stw	r2,0(r16)
     b40:	0027883a 	mov	r19,zero
     b44:	b8800217 	ldw	r2,8(r23)
     b48:	e539883a 	add	fp,fp,r20
     b4c:	1529c83a 	sub	r20,r2,r20
     b50:	bd000215 	stw	r20,8(r23)
     b54:	a0000826 	beq	r20,zero,b78 <__sfvwrite_r+0x238>
     b58:	81c0030b 	ldhu	r7,12(r16)
     b5c:	84800217 	ldw	r18,8(r16)
     b60:	82000017 	ldw	r8,0(r16)
     b64:	983fc01e 	bne	r19,zero,a68 <__sfvwrite_r+0x128>
     b68:	8f000017 	ldw	fp,0(r17)
     b6c:	8cc00117 	ldw	r19,4(r17)
     b70:	8c400204 	addi	r17,r17,8
     b74:	003fbb06 	br	a64 <__sfvwrite_r+0x124>
     b78:	0005883a 	mov	r2,zero
     b7c:	dfc00b17 	ldw	ra,44(sp)
     b80:	df000a17 	ldw	fp,40(sp)
     b84:	ddc00917 	ldw	r23,36(sp)
     b88:	dd800817 	ldw	r22,32(sp)
     b8c:	dd400717 	ldw	r21,28(sp)
     b90:	dd000617 	ldw	r20,24(sp)
     b94:	dcc00517 	ldw	r19,20(sp)
     b98:	dc800417 	ldw	r18,16(sp)
     b9c:	dc400317 	ldw	r17,12(sp)
     ba0:	dc000217 	ldw	r16,8(sp)
     ba4:	dec00c04 	addi	sp,sp,48
     ba8:	f800283a 	ret
     bac:	800b883a 	mov	r5,r16
     bb0:	a809883a 	mov	r4,r21
     bb4:	00027e80 	call	27e8 <_fflush_r>
     bb8:	10002026 	beq	r2,zero,c3c <__sfvwrite_r+0x2fc>
     bbc:	8080030b 	ldhu	r2,12(r16)
     bc0:	10801014 	ori	r2,r2,64
     bc4:	8080030d 	sth	r2,12(r16)
     bc8:	00bfffc4 	movi	r2,-1
     bcc:	003feb06 	br	b7c <__sfvwrite_r+0x23c>
     bd0:	0005883a 	mov	r2,zero
     bd4:	f800283a 	ret
     bd8:	002d883a 	mov	r22,zero
     bdc:	0027883a 	mov	r19,zero
     be0:	0005883a 	mov	r2,zero
     be4:	0039883a 	mov	fp,zero
     be8:	b0001d26 	beq	r22,zero,c60 <__sfvwrite_r+0x320>
     bec:	10002026 	beq	r2,zero,c70 <__sfvwrite_r+0x330>
     bf0:	9829883a 	mov	r20,r19
     bf4:	b500012e 	bgeu	r22,r20,bfc <__sfvwrite_r+0x2bc>
     bf8:	b029883a 	mov	r20,r22
     bfc:	80800417 	ldw	r2,16(r16)
     c00:	81c00517 	ldw	r7,20(r16)
     c04:	1200022e 	bgeu	r2,r8,c10 <__sfvwrite_r+0x2d0>
     c08:	3ca5883a 	add	r18,r7,r18
     c0c:	95002216 	blt	r18,r20,c98 <__sfvwrite_r+0x358>
     c10:	a1c05616 	blt	r20,r7,d6c <__sfvwrite_r+0x42c>
     c14:	80800917 	ldw	r2,36(r16)
     c18:	81400717 	ldw	r5,28(r16)
     c1c:	e00d883a 	mov	r6,fp
     c20:	a809883a 	mov	r4,r21
     c24:	103ee83a 	callr	r2
     c28:	1025883a 	mov	r18,r2
     c2c:	00bfe30e 	bge	zero,r2,bbc <__sfvwrite_r+0x27c>
     c30:	9ca7c83a 	sub	r19,r19,r18
     c34:	983fdd26 	beq	r19,zero,bac <__sfvwrite_r+0x26c>
     c38:	00800044 	movi	r2,1
     c3c:	b9800217 	ldw	r6,8(r23)
     c40:	e4b9883a 	add	fp,fp,r18
     c44:	b4adc83a 	sub	r22,r22,r18
     c48:	34a5c83a 	sub	r18,r6,r18
     c4c:	bc800215 	stw	r18,8(r23)
     c50:	903fc926 	beq	r18,zero,b78 <__sfvwrite_r+0x238>
     c54:	84800217 	ldw	r18,8(r16)
     c58:	82000017 	ldw	r8,0(r16)
     c5c:	b03fe31e 	bne	r22,zero,bec <__sfvwrite_r+0x2ac>
     c60:	8d800117 	ldw	r22,4(r17)
     c64:	8f000017 	ldw	fp,0(r17)
     c68:	8c400204 	addi	r17,r17,8
     c6c:	b03ffc26 	beq	r22,zero,c60 <__sfvwrite_r+0x320>
     c70:	b00d883a 	mov	r6,r22
     c74:	01400284 	movi	r5,10
     c78:	e009883a 	mov	r4,fp
     c7c:	da000015 	stw	r8,0(sp)
     c80:	00017180 	call	1718 <memchr>
     c84:	da000017 	ldw	r8,0(sp)
     c88:	10004626 	beq	r2,zero,da4 <__sfvwrite_r+0x464>
     c8c:	10800044 	addi	r2,r2,1
     c90:	1727c83a 	sub	r19,r2,fp
     c94:	003fd606 	br	bf0 <__sfvwrite_r+0x2b0>
     c98:	e00b883a 	mov	r5,fp
     c9c:	4009883a 	mov	r4,r8
     ca0:	900d883a 	mov	r6,r18
     ca4:	00018e80 	call	18e8 <memmove>
     ca8:	80800017 	ldw	r2,0(r16)
     cac:	800b883a 	mov	r5,r16
     cb0:	a809883a 	mov	r4,r21
     cb4:	1485883a 	add	r2,r2,r18
     cb8:	80800015 	stw	r2,0(r16)
     cbc:	00027e80 	call	27e8 <_fflush_r>
     cc0:	103fdb26 	beq	r2,zero,c30 <__sfvwrite_r+0x2f0>
     cc4:	003fbd06 	br	bbc <__sfvwrite_r+0x27c>
     cc8:	80800417 	ldw	r2,16(r16)
     ccc:	12001136 	bltu	r2,r8,d14 <__sfvwrite_r+0x3d4>
     cd0:	85000517 	ldw	r20,20(r16)
     cd4:	9d000f36 	bltu	r19,r20,d14 <__sfvwrite_r+0x3d4>
     cd8:	d8800017 	ldw	r2,0(sp)
     cdc:	14c02f2e 	bgeu	r2,r19,d9c <__sfvwrite_r+0x45c>
     ce0:	d9000117 	ldw	r4,4(sp)
     ce4:	a00b883a 	mov	r5,r20
     ce8:	00030ac0 	call	30ac <__divsi3>
     cec:	150f383a 	mul	r7,r2,r20
     cf0:	82000917 	ldw	r8,36(r16)
     cf4:	81400717 	ldw	r5,28(r16)
     cf8:	e00d883a 	mov	r6,fp
     cfc:	a809883a 	mov	r4,r21
     d00:	403ee83a 	callr	r8
     d04:	1029883a 	mov	r20,r2
     d08:	00bfac0e 	bge	zero,r2,bbc <__sfvwrite_r+0x27c>
     d0c:	9d27c83a 	sub	r19,r19,r20
     d10:	003f8c06 	br	b44 <__sfvwrite_r+0x204>
     d14:	9029883a 	mov	r20,r18
     d18:	9c80012e 	bgeu	r19,r18,d20 <__sfvwrite_r+0x3e0>
     d1c:	9829883a 	mov	r20,r19
     d20:	4009883a 	mov	r4,r8
     d24:	a00d883a 	mov	r6,r20
     d28:	e00b883a 	mov	r5,fp
     d2c:	00018e80 	call	18e8 <memmove>
     d30:	80800217 	ldw	r2,8(r16)
     d34:	81000017 	ldw	r4,0(r16)
     d38:	1505c83a 	sub	r2,r2,r20
     d3c:	2509883a 	add	r4,r4,r20
     d40:	80800215 	stw	r2,8(r16)
     d44:	81000015 	stw	r4,0(r16)
     d48:	103ff01e 	bne	r2,zero,d0c <__sfvwrite_r+0x3cc>
     d4c:	800b883a 	mov	r5,r16
     d50:	a809883a 	mov	r4,r21
     d54:	00027e80 	call	27e8 <_fflush_r>
     d58:	103fec26 	beq	r2,zero,d0c <__sfvwrite_r+0x3cc>
     d5c:	003f9706 	br	bbc <__sfvwrite_r+0x27c>
     d60:	9825883a 	mov	r18,r19
     d64:	982d883a 	mov	r22,r19
     d68:	003f6a06 	br	b14 <__sfvwrite_r+0x1d4>
     d6c:	4009883a 	mov	r4,r8
     d70:	a00d883a 	mov	r6,r20
     d74:	e00b883a 	mov	r5,fp
     d78:	00018e80 	call	18e8 <memmove>
     d7c:	81000217 	ldw	r4,8(r16)
     d80:	80800017 	ldw	r2,0(r16)
     d84:	a025883a 	mov	r18,r20
     d88:	2509c83a 	sub	r4,r4,r20
     d8c:	1505883a 	add	r2,r2,r20
     d90:	81000215 	stw	r4,8(r16)
     d94:	80800015 	stw	r2,0(r16)
     d98:	003fa506 	br	c30 <__sfvwrite_r+0x2f0>
     d9c:	9809883a 	mov	r4,r19
     da0:	003fd006 	br	ce4 <__sfvwrite_r+0x3a4>
     da4:	b5000044 	addi	r20,r22,1
     da8:	a027883a 	mov	r19,r20
     dac:	003f9106 	br	bf4 <__sfvwrite_r+0x2b4>
     db0:	a809883a 	mov	r4,r21
     db4:	0001b040 	call	1b04 <_realloc_r>
     db8:	1009883a 	mov	r4,r2
     dbc:	103f4d1e 	bne	r2,zero,af4 <__sfvwrite_r+0x1b4>
     dc0:	81400417 	ldw	r5,16(r16)
     dc4:	a809883a 	mov	r4,r21
     dc8:	00029e80 	call	29e8 <_free_r>
     dcc:	8080030b 	ldhu	r2,12(r16)
     dd0:	00c00304 	movi	r3,12
     dd4:	a8c00015 	stw	r3,0(r21)
     dd8:	10bfdfcc 	andi	r2,r2,65407
     ddc:	003f7806 	br	bc0 <__sfvwrite_r+0x280>
     de0:	00c00304 	movi	r3,12
     de4:	8080030b 	ldhu	r2,12(r16)
     de8:	a8c00015 	stw	r3,0(r21)
     dec:	003f7406 	br	bc0 <__sfvwrite_r+0x280>
     df0:	00bfffc4 	movi	r2,-1
     df4:	003f6106 	br	b7c <__sfvwrite_r+0x23c>

00000df8 <_fwalk>:
     df8:	defffa04 	addi	sp,sp,-24
     dfc:	dd000415 	stw	r20,16(sp)
     e00:	dcc00315 	stw	r19,12(sp)
     e04:	dc800215 	stw	r18,8(sp)
     e08:	dfc00515 	stw	ra,20(sp)
     e0c:	dc400115 	stw	r17,4(sp)
     e10:	dc000015 	stw	r16,0(sp)
     e14:	2827883a 	mov	r19,r5
     e18:	2480b804 	addi	r18,r4,736
     e1c:	0029883a 	mov	r20,zero
     e20:	94400117 	ldw	r17,4(r18)
     e24:	94000217 	ldw	r16,8(r18)
     e28:	8c7fffc4 	addi	r17,r17,-1
     e2c:	88000d16 	blt	r17,zero,e64 <_fwalk+0x6c>
     e30:	8080030b 	ldhu	r2,12(r16)
     e34:	8c7fffc4 	addi	r17,r17,-1
     e38:	108000b0 	cmpltui	r2,r2,2
     e3c:	1000061e 	bne	r2,zero,e58 <_fwalk+0x60>
     e40:	8080038f 	ldh	r2,14(r16)
     e44:	8009883a 	mov	r4,r16
     e48:	10bfffe0 	cmpeqi	r2,r2,-1
     e4c:	1000021e 	bne	r2,zero,e58 <_fwalk+0x60>
     e50:	983ee83a 	callr	r19
     e54:	a0a8b03a 	or	r20,r20,r2
     e58:	88bfffd8 	cmpnei	r2,r17,-1
     e5c:	84001a04 	addi	r16,r16,104
     e60:	103ff31e 	bne	r2,zero,e30 <_fwalk+0x38>
     e64:	94800017 	ldw	r18,0(r18)
     e68:	903fed1e 	bne	r18,zero,e20 <_fwalk+0x28>
     e6c:	a005883a 	mov	r2,r20
     e70:	dfc00517 	ldw	ra,20(sp)
     e74:	dd000417 	ldw	r20,16(sp)
     e78:	dcc00317 	ldw	r19,12(sp)
     e7c:	dc800217 	ldw	r18,8(sp)
     e80:	dc400117 	ldw	r17,4(sp)
     e84:	dc000017 	ldw	r16,0(sp)
     e88:	dec00604 	addi	sp,sp,24
     e8c:	f800283a 	ret

00000e90 <_fwalk_reent>:
     e90:	defff904 	addi	sp,sp,-28
     e94:	dd400515 	stw	r21,20(sp)
     e98:	dd000415 	stw	r20,16(sp)
     e9c:	dcc00315 	stw	r19,12(sp)
     ea0:	dc800215 	stw	r18,8(sp)
     ea4:	dfc00615 	stw	ra,24(sp)
     ea8:	dc400115 	stw	r17,4(sp)
     eac:	dc000015 	stw	r16,0(sp)
     eb0:	202b883a 	mov	r21,r4
     eb4:	2827883a 	mov	r19,r5
     eb8:	2480b804 	addi	r18,r4,736
     ebc:	0029883a 	mov	r20,zero
     ec0:	94400117 	ldw	r17,4(r18)
     ec4:	94000217 	ldw	r16,8(r18)
     ec8:	8c7fffc4 	addi	r17,r17,-1
     ecc:	88000e16 	blt	r17,zero,f08 <_fwalk_reent+0x78>
     ed0:	8080030b 	ldhu	r2,12(r16)
     ed4:	8c7fffc4 	addi	r17,r17,-1
     ed8:	108000b0 	cmpltui	r2,r2,2
     edc:	1000071e 	bne	r2,zero,efc <_fwalk_reent+0x6c>
     ee0:	8080038f 	ldh	r2,14(r16)
     ee4:	800b883a 	mov	r5,r16
     ee8:	a809883a 	mov	r4,r21
     eec:	10bfffe0 	cmpeqi	r2,r2,-1
     ef0:	1000021e 	bne	r2,zero,efc <_fwalk_reent+0x6c>
     ef4:	983ee83a 	callr	r19
     ef8:	a0a8b03a 	or	r20,r20,r2
     efc:	88bfffd8 	cmpnei	r2,r17,-1
     f00:	84001a04 	addi	r16,r16,104
     f04:	103ff21e 	bne	r2,zero,ed0 <_fwalk_reent+0x40>
     f08:	94800017 	ldw	r18,0(r18)
     f0c:	903fec1e 	bne	r18,zero,ec0 <_fwalk_reent+0x30>
     f10:	a005883a 	mov	r2,r20
     f14:	dfc00617 	ldw	ra,24(sp)
     f18:	dd400517 	ldw	r21,20(sp)
     f1c:	dd000417 	ldw	r20,16(sp)
     f20:	dcc00317 	ldw	r19,12(sp)
     f24:	dc800217 	ldw	r18,8(sp)
     f28:	dc400117 	ldw	r17,4(sp)
     f2c:	dc000017 	ldw	r16,0(sp)
     f30:	dec00704 	addi	sp,sp,28
     f34:	f800283a 	ret

00000f38 <_malloc_r>:
     f38:	defff604 	addi	sp,sp,-40
     f3c:	dc400115 	stw	r17,4(sp)
     f40:	2c4002c4 	addi	r17,r5,11
     f44:	dc800215 	stw	r18,8(sp)
     f48:	dfc00915 	stw	ra,36(sp)
     f4c:	df000815 	stw	fp,32(sp)
     f50:	ddc00715 	stw	r23,28(sp)
     f54:	dd800615 	stw	r22,24(sp)
     f58:	dd400515 	stw	r21,20(sp)
     f5c:	dd000415 	stw	r20,16(sp)
     f60:	dcc00315 	stw	r19,12(sp)
     f64:	dc000015 	stw	r16,0(sp)
     f68:	888005e8 	cmpgeui	r2,r17,23
     f6c:	2025883a 	mov	r18,r4
     f70:	10001b1e 	bne	r2,zero,fe0 <_malloc_r+0xa8>
     f74:	29400468 	cmpgeui	r5,r5,17
     f78:	2800821e 	bne	r5,zero,1184 <_malloc_r+0x24c>
     f7c:	0003cbc0 	call	3cbc <__malloc_lock>
     f80:	04400404 	movi	r17,16
     f84:	00800604 	movi	r2,24
     f88:	01c00084 	movi	r7,2
     f8c:	04c00074 	movhi	r19,1
     f90:	9cffae04 	addi	r19,r19,-328
     f94:	9885883a 	add	r2,r19,r2
     f98:	14000117 	ldw	r16,4(r2)
     f9c:	10fffe04 	addi	r3,r2,-8
     fa0:	80c08b26 	beq	r16,r3,11d0 <_malloc_r+0x298>
     fa4:	80800117 	ldw	r2,4(r16)
     fa8:	81000317 	ldw	r4,12(r16)
     fac:	00ffff04 	movi	r3,-4
     fb0:	10c4703a 	and	r2,r2,r3
     fb4:	81400217 	ldw	r5,8(r16)
     fb8:	8085883a 	add	r2,r16,r2
     fbc:	10c00117 	ldw	r3,4(r2)
     fc0:	29000315 	stw	r4,12(r5)
     fc4:	21400215 	stw	r5,8(r4)
     fc8:	18c00054 	ori	r3,r3,1
     fcc:	10c00115 	stw	r3,4(r2)
     fd0:	9009883a 	mov	r4,r18
     fd4:	0003de40 	call	3de4 <__malloc_unlock>
     fd8:	80800204 	addi	r2,r16,8
     fdc:	00006c06 	br	1190 <_malloc_r+0x258>
     fe0:	00bffe04 	movi	r2,-8
     fe4:	88a2703a 	and	r17,r17,r2
     fe8:	88006616 	blt	r17,zero,1184 <_malloc_r+0x24c>
     fec:	89406536 	bltu	r17,r5,1184 <_malloc_r+0x24c>
     ff0:	0003cbc0 	call	3cbc <__malloc_lock>
     ff4:	88807e28 	cmpgeui	r2,r17,504
     ff8:	10012226 	beq	r2,zero,1484 <_malloc_r+0x54c>
     ffc:	8804d27a 	srli	r2,r17,9
    1000:	10006f26 	beq	r2,zero,11c0 <_malloc_r+0x288>
    1004:	10c00168 	cmpgeui	r3,r2,5
    1008:	1800fe1e 	bne	r3,zero,1404 <_malloc_r+0x4cc>
    100c:	8804d1ba 	srli	r2,r17,6
    1010:	11c00e44 	addi	r7,r2,57
    1014:	380890fa 	slli	r4,r7,3
    1018:	12000e04 	addi	r8,r2,56
    101c:	04c00074 	movhi	r19,1
    1020:	9cffae04 	addi	r19,r19,-328
    1024:	9909883a 	add	r4,r19,r4
    1028:	24000117 	ldw	r16,4(r4)
    102c:	213ffe04 	addi	r4,r4,-8
    1030:	24000b26 	beq	r4,r16,1060 <_malloc_r+0x128>
    1034:	01bfff04 	movi	r6,-4
    1038:	00000306 	br	1048 <_malloc_r+0x110>
    103c:	1800d60e 	bge	r3,zero,1398 <_malloc_r+0x460>
    1040:	84000317 	ldw	r16,12(r16)
    1044:	24000626 	beq	r4,r16,1060 <_malloc_r+0x128>
    1048:	80800117 	ldw	r2,4(r16)
    104c:	1184703a 	and	r2,r2,r6
    1050:	1447c83a 	sub	r3,r2,r17
    1054:	19400408 	cmpgei	r5,r3,16
    1058:	283ff826 	beq	r5,zero,103c <_malloc_r+0x104>
    105c:	400f883a 	mov	r7,r8
    1060:	9c000417 	ldw	r16,16(r19)
    1064:	02400074 	movhi	r9,1
    1068:	4a7fb004 	addi	r9,r9,-320
    106c:	82405f26 	beq	r16,r9,11ec <_malloc_r+0x2b4>
    1070:	80c00117 	ldw	r3,4(r16)
    1074:	00bfff04 	movi	r2,-4
    1078:	1884703a 	and	r2,r3,r2
    107c:	1447c83a 	sub	r3,r2,r17
    1080:	19000410 	cmplti	r4,r3,16
    1084:	20010a26 	beq	r4,zero,14b0 <_malloc_r+0x578>
    1088:	9a400515 	stw	r9,20(r19)
    108c:	9a400415 	stw	r9,16(r19)
    1090:	1800ff0e 	bge	r3,zero,1490 <_malloc_r+0x558>
    1094:	10c08028 	cmpgeui	r3,r2,512
    1098:	1800c11e 	bne	r3,zero,13a0 <_malloc_r+0x468>
    109c:	1006d0fa 	srli	r3,r2,3
    10a0:	1008d17a 	srli	r4,r2,5
    10a4:	00800044 	movi	r2,1
    10a8:	18c00044 	addi	r3,r3,1
    10ac:	180690fa 	slli	r3,r3,3
    10b0:	99400117 	ldw	r5,4(r19)
    10b4:	1104983a 	sll	r2,r2,r4
    10b8:	98c7883a 	add	r3,r19,r3
    10bc:	19000017 	ldw	r4,0(r3)
    10c0:	1144b03a 	or	r2,r2,r5
    10c4:	197ffe04 	addi	r5,r3,-8
    10c8:	81400315 	stw	r5,12(r16)
    10cc:	81000215 	stw	r4,8(r16)
    10d0:	98800115 	stw	r2,4(r19)
    10d4:	1c000015 	stw	r16,0(r3)
    10d8:	24000315 	stw	r16,12(r4)
    10dc:	3807d0ba 	srai	r3,r7,2
    10e0:	01000044 	movi	r4,1
    10e4:	20c8983a 	sll	r4,r4,r3
    10e8:	11004536 	bltu	r2,r4,1200 <_malloc_r+0x2c8>
    10ec:	2086703a 	and	r3,r4,r2
    10f0:	18000a1e 	bne	r3,zero,111c <_malloc_r+0x1e4>
    10f4:	00ffff04 	movi	r3,-4
    10f8:	2109883a 	add	r4,r4,r4
    10fc:	38ce703a 	and	r7,r7,r3
    1100:	2086703a 	and	r3,r4,r2
    1104:	39c00104 	addi	r7,r7,4
    1108:	1800041e 	bne	r3,zero,111c <_malloc_r+0x1e4>
    110c:	2109883a 	add	r4,r4,r4
    1110:	2086703a 	and	r3,r4,r2
    1114:	39c00104 	addi	r7,r7,4
    1118:	183ffc26 	beq	r3,zero,110c <_malloc_r+0x1d4>
    111c:	02bfff04 	movi	r10,-4
    1120:	381690fa 	slli	r11,r7,3
    1124:	3819883a 	mov	r12,r7
    1128:	9ad7883a 	add	r11,r19,r11
    112c:	5811883a 	mov	r8,r11
    1130:	40800317 	ldw	r2,12(r8)
    1134:	4080bc26 	beq	r8,r2,1428 <_malloc_r+0x4f0>
    1138:	10c00117 	ldw	r3,4(r2)
    113c:	1021883a 	mov	r16,r2
    1140:	10800317 	ldw	r2,12(r2)
    1144:	1a86703a 	and	r3,r3,r10
    1148:	1c4bc83a 	sub	r5,r3,r17
    114c:	29800410 	cmplti	r6,r5,16
    1150:	3000ba26 	beq	r6,zero,143c <_malloc_r+0x504>
    1154:	283ff716 	blt	r5,zero,1134 <_malloc_r+0x1fc>
    1158:	80c7883a 	add	r3,r16,r3
    115c:	19400117 	ldw	r5,4(r3)
    1160:	81800217 	ldw	r6,8(r16)
    1164:	9009883a 	mov	r4,r18
    1168:	29400054 	ori	r5,r5,1
    116c:	19400115 	stw	r5,4(r3)
    1170:	30800315 	stw	r2,12(r6)
    1174:	11800215 	stw	r6,8(r2)
    1178:	0003de40 	call	3de4 <__malloc_unlock>
    117c:	80800204 	addi	r2,r16,8
    1180:	00000306 	br	1190 <_malloc_r+0x258>
    1184:	00800304 	movi	r2,12
    1188:	90800015 	stw	r2,0(r18)
    118c:	0005883a 	mov	r2,zero
    1190:	dfc00917 	ldw	ra,36(sp)
    1194:	df000817 	ldw	fp,32(sp)
    1198:	ddc00717 	ldw	r23,28(sp)
    119c:	dd800617 	ldw	r22,24(sp)
    11a0:	dd400517 	ldw	r21,20(sp)
    11a4:	dd000417 	ldw	r20,16(sp)
    11a8:	dcc00317 	ldw	r19,12(sp)
    11ac:	dc800217 	ldw	r18,8(sp)
    11b0:	dc400117 	ldw	r17,4(sp)
    11b4:	dc000017 	ldw	r16,0(sp)
    11b8:	dec00a04 	addi	sp,sp,40
    11bc:	f800283a 	ret
    11c0:	01008004 	movi	r4,512
    11c4:	01c01004 	movi	r7,64
    11c8:	02000fc4 	movi	r8,63
    11cc:	003f9306 	br	101c <_malloc_r+0xe4>
    11d0:	14000317 	ldw	r16,12(r2)
    11d4:	39c00084 	addi	r7,r7,2
    11d8:	143f721e 	bne	r2,r16,fa4 <_malloc_r+0x6c>
    11dc:	9c000417 	ldw	r16,16(r19)
    11e0:	02400074 	movhi	r9,1
    11e4:	4a7fb004 	addi	r9,r9,-320
    11e8:	827fa11e 	bne	r16,r9,1070 <_malloc_r+0x138>
    11ec:	3807d0ba 	srai	r3,r7,2
    11f0:	01000044 	movi	r4,1
    11f4:	98800117 	ldw	r2,4(r19)
    11f8:	20c8983a 	sll	r4,r4,r3
    11fc:	113fbb2e 	bgeu	r2,r4,10ec <_malloc_r+0x1b4>
    1200:	9c000217 	ldw	r16,8(r19)
    1204:	00bfff04 	movi	r2,-4
    1208:	85400117 	ldw	r21,4(r16)
    120c:	a8ac703a 	and	r22,r21,r2
    1210:	b4400336 	bltu	r22,r17,1220 <_malloc_r+0x2e8>
    1214:	b445c83a 	sub	r2,r22,r17
    1218:	10c00408 	cmpgei	r3,r2,16
    121c:	1800541e 	bne	r3,zero,1370 <_malloc_r+0x438>
    1220:	00800074 	movhi	r2,1
    1224:	1085fa17 	ldw	r2,6120(r2)
    1228:	00c00074 	movhi	r3,1
    122c:	1d4da717 	ldw	r21,13980(r3)
    1230:	10bfffd8 	cmpnei	r2,r2,-1
    1234:	85b9883a 	add	fp,r16,r22
    1238:	8d6b883a 	add	r21,r17,r21
    123c:	1000d626 	beq	r2,zero,1598 <_malloc_r+0x660>
    1240:	ad4403c4 	addi	r21,r21,4111
    1244:	00bc0004 	movi	r2,-4096
    1248:	a8aa703a 	and	r21,r21,r2
    124c:	a80b883a 	mov	r5,r21
    1250:	9009883a 	mov	r4,r18
    1254:	00020680 	call	2068 <_sbrk_r>
    1258:	102f883a 	mov	r23,r2
    125c:	10bfffd8 	cmpnei	r2,r2,-1
    1260:	1000a826 	beq	r2,zero,1504 <_malloc_r+0x5cc>
    1264:	bf00a636 	bltu	r23,fp,1500 <_malloc_r+0x5c8>
    1268:	00800074 	movhi	r2,1
    126c:	151dc717 	ldw	r20,30492(r2)
    1270:	ad29883a 	add	r20,r21,r20
    1274:	151dc715 	stw	r20,30492(r2)
    1278:	a007883a 	mov	r3,r20
    127c:	e5c0ec26 	beq	fp,r23,1630 <_malloc_r+0x6f8>
    1280:	00800074 	movhi	r2,1
    1284:	1085fa17 	ldw	r2,6120(r2)
    1288:	10bfffd8 	cmpnei	r2,r2,-1
    128c:	1000ef26 	beq	r2,zero,164c <_malloc_r+0x714>
    1290:	bf39c83a 	sub	fp,r23,fp
    1294:	e0c7883a 	add	r3,fp,r3
    1298:	00800074 	movhi	r2,1
    129c:	10ddc715 	stw	r3,30492(r2)
    12a0:	bf0001cc 	andi	fp,r23,7
    12a4:	e000c526 	beq	fp,zero,15bc <_malloc_r+0x684>
    12a8:	bf2fc83a 	sub	r23,r23,fp
    12ac:	bdc00204 	addi	r23,r23,8
    12b0:	05040204 	movi	r20,4104
    12b4:	a729c83a 	sub	r20,r20,fp
    12b8:	bd6b883a 	add	r21,r23,r21
    12bc:	a569c83a 	sub	r20,r20,r21
    12c0:	a503ffcc 	andi	r20,r20,4095
    12c4:	a00b883a 	mov	r5,r20
    12c8:	9009883a 	mov	r4,r18
    12cc:	00020680 	call	2068 <_sbrk_r>
    12d0:	10ffffe0 	cmpeqi	r3,r2,-1
    12d4:	1800f31e 	bne	r3,zero,16a4 <_malloc_r+0x76c>
    12d8:	15c5c83a 	sub	r2,r2,r23
    12dc:	152b883a 	add	r21,r2,r20
    12e0:	00800074 	movhi	r2,1
    12e4:	115dc717 	ldw	r5,30492(r2)
    12e8:	9dc00215 	stw	r23,8(r19)
    12ec:	ad400054 	ori	r21,r21,1
    12f0:	a169883a 	add	r20,r20,r5
    12f4:	151dc715 	stw	r20,30492(r2)
    12f8:	bd400115 	stw	r21,4(r23)
    12fc:	84c0d626 	beq	r16,r19,1658 <_malloc_r+0x720>
    1300:	b0800428 	cmpgeui	r2,r22,16
    1304:	1000d626 	beq	r2,zero,1660 <_malloc_r+0x728>
    1308:	80c00117 	ldw	r3,4(r16)
    130c:	013ffe04 	movi	r4,-8
    1310:	b0bffd04 	addi	r2,r22,-12
    1314:	1104703a 	and	r2,r2,r4
    1318:	18c0004c 	andi	r3,r3,1
    131c:	1886b03a 	or	r3,r3,r2
    1320:	80c00115 	stw	r3,4(r16)
    1324:	01000144 	movi	r4,5
    1328:	8087883a 	add	r3,r16,r2
    132c:	19000115 	stw	r4,4(r3)
    1330:	19000215 	stw	r4,8(r3)
    1334:	10800428 	cmpgeui	r2,r2,16
    1338:	1000df1e 	bne	r2,zero,16b8 <_malloc_r+0x780>
    133c:	bd400117 	ldw	r21,4(r23)
    1340:	b821883a 	mov	r16,r23
    1344:	00800074 	movhi	r2,1
    1348:	108da617 	ldw	r2,13976(r2)
    134c:	1500022e 	bgeu	r2,r20,1358 <_malloc_r+0x420>
    1350:	00800074 	movhi	r2,1
    1354:	150da615 	stw	r20,13976(r2)
    1358:	00800074 	movhi	r2,1
    135c:	108da517 	ldw	r2,13972(r2)
    1360:	15006a2e 	bgeu	r2,r20,150c <_malloc_r+0x5d4>
    1364:	00800074 	movhi	r2,1
    1368:	150da515 	stw	r20,13972(r2)
    136c:	00006706 	br	150c <_malloc_r+0x5d4>
    1370:	88c00054 	ori	r3,r17,1
    1374:	80c00115 	stw	r3,4(r16)
    1378:	8463883a 	add	r17,r16,r17
    137c:	10800054 	ori	r2,r2,1
    1380:	9c400215 	stw	r17,8(r19)
    1384:	88800115 	stw	r2,4(r17)
    1388:	9009883a 	mov	r4,r18
    138c:	0003de40 	call	3de4 <__malloc_unlock>
    1390:	80800204 	addi	r2,r16,8
    1394:	003f7e06 	br	1190 <_malloc_r+0x258>
    1398:	81000317 	ldw	r4,12(r16)
    139c:	003f0506 	br	fb4 <_malloc_r+0x7c>
    13a0:	1006d27a 	srli	r3,r2,9
    13a4:	19000168 	cmpgeui	r4,r3,5
    13a8:	20005026 	beq	r4,zero,14ec <_malloc_r+0x5b4>
    13ac:	19000568 	cmpgeui	r4,r3,21
    13b0:	20008c1e 	bne	r4,zero,15e4 <_malloc_r+0x6ac>
    13b4:	19401704 	addi	r5,r3,92
    13b8:	280a90fa 	slli	r5,r5,3
    13bc:	190016c4 	addi	r4,r3,91
    13c0:	994b883a 	add	r5,r19,r5
    13c4:	28c00017 	ldw	r3,0(r5)
    13c8:	297ffe04 	addi	r5,r5,-8
    13cc:	28c07426 	beq	r5,r3,15a0 <_malloc_r+0x668>
    13d0:	01bfff04 	movi	r6,-4
    13d4:	19000117 	ldw	r4,4(r3)
    13d8:	2188703a 	and	r4,r4,r6
    13dc:	1100022e 	bgeu	r2,r4,13e8 <_malloc_r+0x4b0>
    13e0:	18c00217 	ldw	r3,8(r3)
    13e4:	28fffb1e 	bne	r5,r3,13d4 <_malloc_r+0x49c>
    13e8:	19400317 	ldw	r5,12(r3)
    13ec:	98800117 	ldw	r2,4(r19)
    13f0:	81400315 	stw	r5,12(r16)
    13f4:	80c00215 	stw	r3,8(r16)
    13f8:	2c000215 	stw	r16,8(r5)
    13fc:	1c000315 	stw	r16,12(r3)
    1400:	003f3606 	br	10dc <_malloc_r+0x1a4>
    1404:	10c00568 	cmpgeui	r3,r2,21
    1408:	18004a26 	beq	r3,zero,1534 <_malloc_r+0x5fc>
    140c:	10c01568 	cmpgeui	r3,r2,85
    1410:	18007b1e 	bne	r3,zero,1600 <_malloc_r+0x6c8>
    1414:	8804d33a 	srli	r2,r17,12
    1418:	11c01bc4 	addi	r7,r2,111
    141c:	380890fa 	slli	r4,r7,3
    1420:	12001b84 	addi	r8,r2,110
    1424:	003efd06 	br	101c <_malloc_r+0xe4>
    1428:	63000044 	addi	r12,r12,1
    142c:	608000cc 	andi	r2,r12,3
    1430:	42000204 	addi	r8,r8,8
    1434:	103f3e1e 	bne	r2,zero,1130 <_malloc_r+0x1f8>
    1438:	00004506 	br	1550 <_malloc_r+0x618>
    143c:	81000217 	ldw	r4,8(r16)
    1440:	89800054 	ori	r6,r17,1
    1444:	81800115 	stw	r6,4(r16)
    1448:	20800315 	stw	r2,12(r4)
    144c:	11000215 	stw	r4,8(r2)
    1450:	8463883a 	add	r17,r16,r17
    1454:	9c400515 	stw	r17,20(r19)
    1458:	9c400415 	stw	r17,16(r19)
    145c:	28800054 	ori	r2,r5,1
    1460:	88800115 	stw	r2,4(r17)
    1464:	8a400315 	stw	r9,12(r17)
    1468:	8a400215 	stw	r9,8(r17)
    146c:	80c7883a 	add	r3,r16,r3
    1470:	19400015 	stw	r5,0(r3)
    1474:	9009883a 	mov	r4,r18
    1478:	0003de40 	call	3de4 <__malloc_unlock>
    147c:	80800204 	addi	r2,r16,8
    1480:	003f4306 	br	1190 <_malloc_r+0x258>
    1484:	880ed0fa 	srli	r7,r17,3
    1488:	88800204 	addi	r2,r17,8
    148c:	003ebf06 	br	f8c <_malloc_r+0x54>
    1490:	8085883a 	add	r2,r16,r2
    1494:	10c00117 	ldw	r3,4(r2)
    1498:	9009883a 	mov	r4,r18
    149c:	18c00054 	ori	r3,r3,1
    14a0:	10c00115 	stw	r3,4(r2)
    14a4:	0003de40 	call	3de4 <__malloc_unlock>
    14a8:	80800204 	addi	r2,r16,8
    14ac:	003f3806 	br	1190 <_malloc_r+0x258>
    14b0:	89000054 	ori	r4,r17,1
    14b4:	81000115 	stw	r4,4(r16)
    14b8:	8463883a 	add	r17,r16,r17
    14bc:	9c400515 	stw	r17,20(r19)
    14c0:	9c400415 	stw	r17,16(r19)
    14c4:	19000054 	ori	r4,r3,1
    14c8:	89000115 	stw	r4,4(r17)
    14cc:	8085883a 	add	r2,r16,r2
    14d0:	8a400315 	stw	r9,12(r17)
    14d4:	8a400215 	stw	r9,8(r17)
    14d8:	10c00015 	stw	r3,0(r2)
    14dc:	9009883a 	mov	r4,r18
    14e0:	0003de40 	call	3de4 <__malloc_unlock>
    14e4:	80800204 	addi	r2,r16,8
    14e8:	003f2906 	br	1190 <_malloc_r+0x258>
    14ec:	1006d1ba 	srli	r3,r2,6
    14f0:	19400e44 	addi	r5,r3,57
    14f4:	280a90fa 	slli	r5,r5,3
    14f8:	19000e04 	addi	r4,r3,56
    14fc:	003fb006 	br	13c0 <_malloc_r+0x488>
    1500:	84c04626 	beq	r16,r19,161c <_malloc_r+0x6e4>
    1504:	9c000217 	ldw	r16,8(r19)
    1508:	85400117 	ldw	r21,4(r16)
    150c:	00bfff04 	movi	r2,-4
    1510:	a8aa703a 	and	r21,r21,r2
    1514:	ac45c83a 	sub	r2,r21,r17
    1518:	ac400236 	bltu	r21,r17,1524 <_malloc_r+0x5ec>
    151c:	10c00408 	cmpgei	r3,r2,16
    1520:	183f931e 	bne	r3,zero,1370 <_malloc_r+0x438>
    1524:	9009883a 	mov	r4,r18
    1528:	0003de40 	call	3de4 <__malloc_unlock>
    152c:	0005883a 	mov	r2,zero
    1530:	003f1706 	br	1190 <_malloc_r+0x258>
    1534:	11c01704 	addi	r7,r2,92
    1538:	380890fa 	slli	r4,r7,3
    153c:	120016c4 	addi	r8,r2,91
    1540:	003eb606 	br	101c <_malloc_r+0xe4>
    1544:	58800217 	ldw	r2,8(r11)
    1548:	39ffffc4 	addi	r7,r7,-1
    154c:	12c0701e 	bne	r2,r11,1710 <_malloc_r+0x7d8>
    1550:	388000cc 	andi	r2,r7,3
    1554:	5afffe04 	addi	r11,r11,-8
    1558:	103ffa1e 	bne	r2,zero,1544 <_malloc_r+0x60c>
    155c:	98c00117 	ldw	r3,4(r19)
    1560:	0104303a 	nor	r2,zero,r4
    1564:	10c4703a 	and	r2,r2,r3
    1568:	98800115 	stw	r2,4(r19)
    156c:	2109883a 	add	r4,r4,r4
    1570:	113f2336 	bltu	r2,r4,1200 <_malloc_r+0x2c8>
    1574:	203f2226 	beq	r4,zero,1200 <_malloc_r+0x2c8>
    1578:	2086703a 	and	r3,r4,r2
    157c:	1800041e 	bne	r3,zero,1590 <_malloc_r+0x658>
    1580:	2109883a 	add	r4,r4,r4
    1584:	2086703a 	and	r3,r4,r2
    1588:	63000104 	addi	r12,r12,4
    158c:	183ffc26 	beq	r3,zero,1580 <_malloc_r+0x648>
    1590:	600f883a 	mov	r7,r12
    1594:	003ee206 	br	1120 <_malloc_r+0x1e8>
    1598:	ad400404 	addi	r21,r21,16
    159c:	003f2b06 	br	124c <_malloc_r+0x314>
    15a0:	2009d0ba 	srai	r4,r4,2
    15a4:	00800044 	movi	r2,1
    15a8:	99800117 	ldw	r6,4(r19)
    15ac:	1104983a 	sll	r2,r2,r4
    15b0:	1184b03a 	or	r2,r2,r6
    15b4:	98800115 	stw	r2,4(r19)
    15b8:	003f8d06 	br	13f0 <_malloc_r+0x4b8>
    15bc:	bd69883a 	add	r20,r23,r21
    15c0:	0529c83a 	sub	r20,zero,r20
    15c4:	a503ffcc 	andi	r20,r20,4095
    15c8:	a00b883a 	mov	r5,r20
    15cc:	9009883a 	mov	r4,r18
    15d0:	00020680 	call	2068 <_sbrk_r>
    15d4:	10ffffe0 	cmpeqi	r3,r2,-1
    15d8:	183f3f26 	beq	r3,zero,12d8 <_malloc_r+0x3a0>
    15dc:	0029883a 	mov	r20,zero
    15e0:	003f3f06 	br	12e0 <_malloc_r+0x3a8>
    15e4:	19001568 	cmpgeui	r4,r3,85
    15e8:	2000201e 	bne	r4,zero,166c <_malloc_r+0x734>
    15ec:	1006d33a 	srli	r3,r2,12
    15f0:	19401bc4 	addi	r5,r3,111
    15f4:	280a90fa 	slli	r5,r5,3
    15f8:	19001b84 	addi	r4,r3,110
    15fc:	003f7006 	br	13c0 <_malloc_r+0x488>
    1600:	10c05568 	cmpgeui	r3,r2,341
    1604:	1800201e 	bne	r3,zero,1688 <_malloc_r+0x750>
    1608:	8804d3fa 	srli	r2,r17,15
    160c:	11c01e04 	addi	r7,r2,120
    1610:	380890fa 	slli	r4,r7,3
    1614:	12001dc4 	addi	r8,r2,119
    1618:	003e8006 	br	101c <_malloc_r+0xe4>
    161c:	00800074 	movhi	r2,1
    1620:	10ddc717 	ldw	r3,30492(r2)
    1624:	a8c7883a 	add	r3,r21,r3
    1628:	10ddc715 	stw	r3,30492(r2)
    162c:	003f1406 	br	1280 <_malloc_r+0x348>
    1630:	e083ffcc 	andi	r2,fp,4095
    1634:	103f121e 	bne	r2,zero,1280 <_malloc_r+0x348>
    1638:	9c000217 	ldw	r16,8(r19)
    163c:	b56b883a 	add	r21,r22,r21
    1640:	ad400054 	ori	r21,r21,1
    1644:	85400115 	stw	r21,4(r16)
    1648:	003f3e06 	br	1344 <_malloc_r+0x40c>
    164c:	00800074 	movhi	r2,1
    1650:	15c5fa15 	stw	r23,6120(r2)
    1654:	003f1206 	br	12a0 <_malloc_r+0x368>
    1658:	b821883a 	mov	r16,r23
    165c:	003f3906 	br	1344 <_malloc_r+0x40c>
    1660:	00800044 	movi	r2,1
    1664:	b8800115 	stw	r2,4(r23)
    1668:	003fae06 	br	1524 <_malloc_r+0x5ec>
    166c:	19005568 	cmpgeui	r4,r3,341
    1670:	2000191e 	bne	r4,zero,16d8 <_malloc_r+0x7a0>
    1674:	1006d3fa 	srli	r3,r2,15
    1678:	19401e04 	addi	r5,r3,120
    167c:	280a90fa 	slli	r5,r5,3
    1680:	19001dc4 	addi	r4,r3,119
    1684:	003f4e06 	br	13c0 <_malloc_r+0x488>
    1688:	10815568 	cmpgeui	r2,r2,1365
    168c:	1000191e 	bne	r2,zero,16f4 <_malloc_r+0x7bc>
    1690:	8804d4ba 	srli	r2,r17,18
    1694:	11c01f44 	addi	r7,r2,125
    1698:	380890fa 	slli	r4,r7,3
    169c:	12001f04 	addi	r8,r2,124
    16a0:	003e5e06 	br	101c <_malloc_r+0xe4>
    16a4:	e73ffe04 	addi	fp,fp,-8
    16a8:	af2b883a 	add	r21,r21,fp
    16ac:	adebc83a 	sub	r21,r21,r23
    16b0:	0029883a 	mov	r20,zero
    16b4:	003f0a06 	br	12e0 <_malloc_r+0x3a8>
    16b8:	81400204 	addi	r5,r16,8
    16bc:	9009883a 	mov	r4,r18
    16c0:	00029e80 	call	29e8 <_free_r>
    16c4:	9c000217 	ldw	r16,8(r19)
    16c8:	00800074 	movhi	r2,1
    16cc:	151dc717 	ldw	r20,30492(r2)
    16d0:	85400117 	ldw	r21,4(r16)
    16d4:	003f1b06 	br	1344 <_malloc_r+0x40c>
    16d8:	18c15568 	cmpgeui	r3,r3,1365
    16dc:	1800091e 	bne	r3,zero,1704 <_malloc_r+0x7cc>
    16e0:	1006d4ba 	srli	r3,r2,18
    16e4:	19401f44 	addi	r5,r3,125
    16e8:	280a90fa 	slli	r5,r5,3
    16ec:	19001f04 	addi	r4,r3,124
    16f0:	003f3306 	br	13c0 <_malloc_r+0x488>
    16f4:	0100fe04 	movi	r4,1016
    16f8:	01c01fc4 	movi	r7,127
    16fc:	02001f84 	movi	r8,126
    1700:	003e4606 	br	101c <_malloc_r+0xe4>
    1704:	0140fe04 	movi	r5,1016
    1708:	01001f84 	movi	r4,126
    170c:	003f2c06 	br	13c0 <_malloc_r+0x488>
    1710:	98800117 	ldw	r2,4(r19)
    1714:	003f9506 	br	156c <_malloc_r+0x634>

00001718 <memchr>:
    1718:	208000cc 	andi	r2,r4,3
    171c:	280f883a 	mov	r7,r5
    1720:	10000e26 	beq	r2,zero,175c <memchr+0x44>
    1724:	30bfffc4 	addi	r2,r6,-1
    1728:	30001726 	beq	r6,zero,1788 <memchr+0x70>
    172c:	29803fcc 	andi	r6,r5,255
    1730:	00000606 	br	174c <memchr+0x34>
    1734:	21000044 	addi	r4,r4,1
    1738:	20c000cc 	andi	r3,r4,3
    173c:	18000826 	beq	r3,zero,1760 <memchr+0x48>
    1740:	10bfffc4 	addi	r2,r2,-1
    1744:	10ffffe0 	cmpeqi	r3,r2,-1
    1748:	18000f1e 	bne	r3,zero,1788 <memchr+0x70>
    174c:	20c00003 	ldbu	r3,0(r4)
    1750:	19bff81e 	bne	r3,r6,1734 <memchr+0x1c>
    1754:	2005883a 	mov	r2,r4
    1758:	f800283a 	ret
    175c:	3005883a 	mov	r2,r6
    1760:	10c00128 	cmpgeui	r3,r2,4
    1764:	18000a1e 	bne	r3,zero,1790 <memchr+0x78>
    1768:	10001e26 	beq	r2,zero,17e4 <memchr+0xcc>
    176c:	2087883a 	add	r3,r4,r2
    1770:	39803fcc 	andi	r6,r7,255
    1774:	2005883a 	mov	r2,r4
    1778:	11000003 	ldbu	r4,0(r2)
    177c:	21bff626 	beq	r4,r6,1758 <memchr+0x40>
    1780:	10800044 	addi	r2,r2,1
    1784:	18bffc1e 	bne	r3,r2,1778 <memchr+0x60>
    1788:	0005883a 	mov	r2,zero
    178c:	f800283a 	ret
    1790:	29403fcc 	andi	r5,r5,255
    1794:	280c923a 	slli	r6,r5,8
    1798:	027fbff4 	movhi	r9,65279
    179c:	02202074 	movhi	r8,32897
    17a0:	314ab03a 	or	r5,r6,r5
    17a4:	280c943a 	slli	r6,r5,16
    17a8:	4a7fbfc4 	addi	r9,r9,-257
    17ac:	42202004 	addi	r8,r8,-32640
    17b0:	314cb03a 	or	r6,r6,r5
    17b4:	20c00017 	ldw	r3,0(r4)
    17b8:	30c6f03a 	xor	r3,r6,r3
    17bc:	1a4b883a 	add	r5,r3,r9
    17c0:	00c6303a 	nor	r3,zero,r3
    17c4:	28c6703a 	and	r3,r5,r3
    17c8:	1a06703a 	and	r3,r3,r8
    17cc:	183fe71e 	bne	r3,zero,176c <memchr+0x54>
    17d0:	10bfff04 	addi	r2,r2,-4
    17d4:	10c00128 	cmpgeui	r3,r2,4
    17d8:	21000104 	addi	r4,r4,4
    17dc:	183ff51e 	bne	r3,zero,17b4 <memchr+0x9c>
    17e0:	003fe106 	br	1768 <memchr+0x50>
    17e4:	f800283a 	ret

000017e8 <memcpy>:
    17e8:	30c00430 	cmpltui	r3,r6,16
    17ec:	2005883a 	mov	r2,r4
    17f0:	18002d1e 	bne	r3,zero,18a8 <memcpy+0xc0>
    17f4:	2906b03a 	or	r3,r5,r4
    17f8:	18c000cc 	andi	r3,r3,3
    17fc:	1800351e 	bne	r3,zero,18d4 <memcpy+0xec>
    1800:	32fffc04 	addi	r11,r6,-16
    1804:	5816d13a 	srli	r11,r11,4
    1808:	280f883a 	mov	r7,r5
    180c:	2007883a 	mov	r3,r4
    1810:	5ac00044 	addi	r11,r11,1
    1814:	5816913a 	slli	r11,r11,4
    1818:	22d5883a 	add	r10,r4,r11
    181c:	39000117 	ldw	r4,4(r7)
    1820:	3a400017 	ldw	r9,0(r7)
    1824:	3a000217 	ldw	r8,8(r7)
    1828:	19000115 	stw	r4,4(r3)
    182c:	39000317 	ldw	r4,12(r7)
    1830:	1a400015 	stw	r9,0(r3)
    1834:	1a000215 	stw	r8,8(r3)
    1838:	19000315 	stw	r4,12(r3)
    183c:	18c00404 	addi	r3,r3,16
    1840:	39c00404 	addi	r7,r7,16
    1844:	50fff51e 	bne	r10,r3,181c <memcpy+0x34>
    1848:	3100030c 	andi	r4,r6,12
    184c:	2acb883a 	add	r5,r5,r11
    1850:	320003cc 	andi	r8,r6,15
    1854:	20002226 	beq	r4,zero,18e0 <memcpy+0xf8>
    1858:	280f883a 	mov	r7,r5
    185c:	1813883a 	mov	r9,r3
    1860:	39c00104 	addi	r7,r7,4
    1864:	3abfff17 	ldw	r10,-4(r7)
    1868:	41c9c83a 	sub	r4,r8,r7
    186c:	2909883a 	add	r4,r5,r4
    1870:	4a800015 	stw	r10,0(r9)
    1874:	21000128 	cmpgeui	r4,r4,4
    1878:	4a400104 	addi	r9,r9,4
    187c:	203ff81e 	bne	r4,zero,1860 <memcpy+0x78>
    1880:	413fff04 	addi	r4,r8,-4
    1884:	2008d0ba 	srli	r4,r4,2
    1888:	318000cc 	andi	r6,r6,3
    188c:	31ffffc4 	addi	r7,r6,-1
    1890:	21000044 	addi	r4,r4,1
    1894:	200890ba 	slli	r4,r4,2
    1898:	1907883a 	add	r3,r3,r4
    189c:	290b883a 	add	r5,r5,r4
    18a0:	3000041e 	bne	r6,zero,18b4 <memcpy+0xcc>
    18a4:	f800283a 	ret
    18a8:	2007883a 	mov	r3,r4
    18ac:	31ffffc4 	addi	r7,r6,-1
    18b0:	303ffc26 	beq	r6,zero,18a4 <memcpy+0xbc>
    18b4:	39c00044 	addi	r7,r7,1
    18b8:	19cf883a 	add	r7,r3,r7
    18bc:	29800003 	ldbu	r6,0(r5)
    18c0:	18c00044 	addi	r3,r3,1
    18c4:	29400044 	addi	r5,r5,1
    18c8:	19bfffc5 	stb	r6,-1(r3)
    18cc:	38fffb1e 	bne	r7,r3,18bc <memcpy+0xd4>
    18d0:	f800283a 	ret
    18d4:	31ffffc4 	addi	r7,r6,-1
    18d8:	2007883a 	mov	r3,r4
    18dc:	003ff506 	br	18b4 <memcpy+0xcc>
    18e0:	400d883a 	mov	r6,r8
    18e4:	003ff106 	br	18ac <memcpy+0xc4>

000018e8 <memmove>:
    18e8:	2005883a 	mov	r2,r4
    18ec:	29000a2e 	bgeu	r5,r4,1918 <memmove+0x30>
    18f0:	2989883a 	add	r4,r5,r6
    18f4:	1100082e 	bgeu	r2,r4,1918 <memmove+0x30>
    18f8:	1187883a 	add	r3,r2,r6
    18fc:	30003e26 	beq	r6,zero,19f8 <memmove+0x110>
    1900:	217fffc3 	ldbu	r5,-1(r4)
    1904:	18ffffc4 	addi	r3,r3,-1
    1908:	213fffc4 	addi	r4,r4,-1
    190c:	19400005 	stb	r5,0(r3)
    1910:	10fffb1e 	bne	r2,r3,1900 <memmove+0x18>
    1914:	f800283a 	ret
    1918:	30c00430 	cmpltui	r3,r6,16
    191c:	18000b26 	beq	r3,zero,194c <memmove+0x64>
    1920:	1007883a 	mov	r3,r2
    1924:	31ffffc4 	addi	r7,r6,-1
    1928:	30003726 	beq	r6,zero,1a08 <memmove+0x120>
    192c:	39c00044 	addi	r7,r7,1
    1930:	29cf883a 	add	r7,r5,r7
    1934:	29800003 	ldbu	r6,0(r5)
    1938:	29400044 	addi	r5,r5,1
    193c:	18c00044 	addi	r3,r3,1
    1940:	19bfffc5 	stb	r6,-1(r3)
    1944:	29fffb1e 	bne	r5,r7,1934 <memmove+0x4c>
    1948:	f800283a 	ret
    194c:	2886b03a 	or	r3,r5,r2
    1950:	18c000cc 	andi	r3,r3,3
    1954:	1800291e 	bne	r3,zero,19fc <memmove+0x114>
    1958:	327ffc04 	addi	r9,r6,-16
    195c:	4812d13a 	srli	r9,r9,4
    1960:	280f883a 	mov	r7,r5
    1964:	1007883a 	mov	r3,r2
    1968:	4a400044 	addi	r9,r9,1
    196c:	4812913a 	slli	r9,r9,4
    1970:	1251883a 	add	r8,r2,r9
    1974:	39000017 	ldw	r4,0(r7)
    1978:	39c00404 	addi	r7,r7,16
    197c:	18c00404 	addi	r3,r3,16
    1980:	193ffc15 	stw	r4,-16(r3)
    1984:	393ffd17 	ldw	r4,-12(r7)
    1988:	193ffd15 	stw	r4,-12(r3)
    198c:	393ffe17 	ldw	r4,-8(r7)
    1990:	193ffe15 	stw	r4,-8(r3)
    1994:	393fff17 	ldw	r4,-4(r7)
    1998:	193fff15 	stw	r4,-4(r3)
    199c:	40fff51e 	bne	r8,r3,1974 <memmove+0x8c>
    19a0:	3100030c 	andi	r4,r6,12
    19a4:	2a4b883a 	add	r5,r5,r9
    19a8:	320003cc 	andi	r8,r6,15
    19ac:	20001726 	beq	r4,zero,1a0c <memmove+0x124>
    19b0:	2813883a 	mov	r9,r5
    19b4:	180f883a 	mov	r7,r3
    19b8:	4a800017 	ldw	r10,0(r9)
    19bc:	39c00104 	addi	r7,r7,4
    19c0:	41c9c83a 	sub	r4,r8,r7
    19c4:	1909883a 	add	r4,r3,r4
    19c8:	21000128 	cmpgeui	r4,r4,4
    19cc:	3abfff15 	stw	r10,-4(r7)
    19d0:	4a400104 	addi	r9,r9,4
    19d4:	203ff81e 	bne	r4,zero,19b8 <memmove+0xd0>
    19d8:	413fff04 	addi	r4,r8,-4
    19dc:	2008d0ba 	srli	r4,r4,2
    19e0:	318000cc 	andi	r6,r6,3
    19e4:	21000044 	addi	r4,r4,1
    19e8:	200890ba 	slli	r4,r4,2
    19ec:	1907883a 	add	r3,r3,r4
    19f0:	290b883a 	add	r5,r5,r4
    19f4:	003fcb06 	br	1924 <memmove+0x3c>
    19f8:	f800283a 	ret
    19fc:	31ffffc4 	addi	r7,r6,-1
    1a00:	1007883a 	mov	r3,r2
    1a04:	003fc906 	br	192c <memmove+0x44>
    1a08:	f800283a 	ret
    1a0c:	400d883a 	mov	r6,r8
    1a10:	003fc406 	br	1924 <memmove+0x3c>

00001a14 <memset>:
    1a14:	20c000cc 	andi	r3,r4,3
    1a18:	2005883a 	mov	r2,r4
    1a1c:	18003626 	beq	r3,zero,1af8 <memset+0xe4>
    1a20:	31ffffc4 	addi	r7,r6,-1
    1a24:	30003326 	beq	r6,zero,1af4 <memset+0xe0>
    1a28:	2811883a 	mov	r8,r5
    1a2c:	2007883a 	mov	r3,r4
    1a30:	00000306 	br	1a40 <memset+0x2c>
    1a34:	39ffffc4 	addi	r7,r7,-1
    1a38:	39bfffe0 	cmpeqi	r6,r7,-1
    1a3c:	30002d1e 	bne	r6,zero,1af4 <memset+0xe0>
    1a40:	18c00044 	addi	r3,r3,1
    1a44:	198000cc 	andi	r6,r3,3
    1a48:	1a3fffc5 	stb	r8,-1(r3)
    1a4c:	303ff91e 	bne	r6,zero,1a34 <memset+0x20>
    1a50:	39000130 	cmpltui	r4,r7,4
    1a54:	2000221e 	bne	r4,zero,1ae0 <memset+0xcc>
    1a58:	29003fcc 	andi	r4,r5,255
    1a5c:	200c923a 	slli	r6,r4,8
    1a60:	3a000430 	cmpltui	r8,r7,16
    1a64:	3108b03a 	or	r4,r6,r4
    1a68:	200c943a 	slli	r6,r4,16
    1a6c:	310cb03a 	or	r6,r6,r4
    1a70:	40000e1e 	bne	r8,zero,1aac <memset+0x98>
    1a74:	393ffc04 	addi	r4,r7,-16
    1a78:	2008d13a 	srli	r4,r4,4
    1a7c:	21000044 	addi	r4,r4,1
    1a80:	2008913a 	slli	r4,r4,4
    1a84:	1909883a 	add	r4,r3,r4
    1a88:	19800015 	stw	r6,0(r3)
    1a8c:	19800115 	stw	r6,4(r3)
    1a90:	19800215 	stw	r6,8(r3)
    1a94:	19800315 	stw	r6,12(r3)
    1a98:	18c00404 	addi	r3,r3,16
    1a9c:	20fffa1e 	bne	r4,r3,1a88 <memset+0x74>
    1aa0:	3900030c 	andi	r4,r7,12
    1aa4:	39c003cc 	andi	r7,r7,15
    1aa8:	20000d26 	beq	r4,zero,1ae0 <memset+0xcc>
    1aac:	1811883a 	mov	r8,r3
    1ab0:	42000104 	addi	r8,r8,4
    1ab4:	3a09c83a 	sub	r4,r7,r8
    1ab8:	1909883a 	add	r4,r3,r4
    1abc:	21000128 	cmpgeui	r4,r4,4
    1ac0:	41bfff15 	stw	r6,-4(r8)
    1ac4:	203ffa1e 	bne	r4,zero,1ab0 <memset+0x9c>
    1ac8:	393fff04 	addi	r4,r7,-4
    1acc:	2008d0ba 	srli	r4,r4,2
    1ad0:	39c000cc 	andi	r7,r7,3
    1ad4:	21000044 	addi	r4,r4,1
    1ad8:	200890ba 	slli	r4,r4,2
    1adc:	1907883a 	add	r3,r3,r4
    1ae0:	38000426 	beq	r7,zero,1af4 <memset+0xe0>
    1ae4:	19cf883a 	add	r7,r3,r7
    1ae8:	18c00044 	addi	r3,r3,1
    1aec:	197fffc5 	stb	r5,-1(r3)
    1af0:	38fffd1e 	bne	r7,r3,1ae8 <memset+0xd4>
    1af4:	f800283a 	ret
    1af8:	2007883a 	mov	r3,r4
    1afc:	300f883a 	mov	r7,r6
    1b00:	003fd306 	br	1a50 <memset+0x3c>

00001b04 <_realloc_r>:
    1b04:	defff504 	addi	sp,sp,-44
    1b08:	dc800315 	stw	r18,12(sp)
    1b0c:	dfc00a15 	stw	ra,40(sp)
    1b10:	df000915 	stw	fp,36(sp)
    1b14:	ddc00815 	stw	r23,32(sp)
    1b18:	dd800715 	stw	r22,28(sp)
    1b1c:	dd400615 	stw	r21,24(sp)
    1b20:	dd000515 	stw	r20,20(sp)
    1b24:	dcc00415 	stw	r19,16(sp)
    1b28:	dc400215 	stw	r17,8(sp)
    1b2c:	dc000115 	stw	r16,4(sp)
    1b30:	3025883a 	mov	r18,r6
    1b34:	28008b26 	beq	r5,zero,1d64 <_realloc_r+0x260>
    1b38:	2821883a 	mov	r16,r5
    1b3c:	2027883a 	mov	r19,r4
    1b40:	944002c4 	addi	r17,r18,11
    1b44:	0003cbc0 	call	3cbc <__malloc_lock>
    1b48:	888005f0 	cmpltui	r2,r17,23
    1b4c:	1000521e 	bne	r2,zero,1c98 <_realloc_r+0x194>
    1b50:	017ffe04 	movi	r5,-8
    1b54:	8962703a 	and	r17,r17,r5
    1b58:	8807883a 	mov	r3,r17
    1b5c:	88005116 	blt	r17,zero,1ca4 <_realloc_r+0x1a0>
    1b60:	8c805036 	bltu	r17,r18,1ca4 <_realloc_r+0x1a0>
    1b64:	80bfff17 	ldw	r2,-4(r16)
    1b68:	017fff04 	movi	r5,-4
    1b6c:	857ffe04 	addi	r21,r16,-8
    1b70:	1168703a 	and	r20,r2,r5
    1b74:	ad2d883a 	add	r22,r21,r20
    1b78:	a0c0390e 	bge	r20,r3,1c60 <_realloc_r+0x15c>
    1b7c:	07000074 	movhi	fp,1
    1b80:	e73fae04 	addi	fp,fp,-328
    1b84:	e2000217 	ldw	r8,8(fp)
    1b88:	b1000117 	ldw	r4,4(r22)
    1b8c:	45808e26 	beq	r8,r22,1dc8 <_realloc_r+0x2c4>
    1b90:	01bfff84 	movi	r6,-2
    1b94:	218c703a 	and	r6,r4,r6
    1b98:	b18d883a 	add	r6,r22,r6
    1b9c:	31800117 	ldw	r6,4(r6)
    1ba0:	3180004c 	andi	r6,r6,1
    1ba4:	30004f1e 	bne	r6,zero,1ce4 <_realloc_r+0x1e0>
    1ba8:	2148703a 	and	r4,r4,r5
    1bac:	a10b883a 	add	r5,r20,r4
    1bb0:	28c0bf0e 	bge	r5,r3,1eb0 <_realloc_r+0x3ac>
    1bb4:	1080004c 	andi	r2,r2,1
    1bb8:	10004c1e 	bne	r2,zero,1cec <_realloc_r+0x1e8>
    1bbc:	81fffe17 	ldw	r7,-8(r16)
    1bc0:	00bfff04 	movi	r2,-4
    1bc4:	a9cfc83a 	sub	r7,r21,r7
    1bc8:	39400117 	ldw	r5,4(r7)
    1bcc:	288a703a 	and	r5,r5,r2
    1bd0:	b0000426 	beq	r22,zero,1be4 <_realloc_r+0xe0>
    1bd4:	a16f883a 	add	r23,r20,r5
    1bd8:	b92f883a 	add	r23,r23,r4
    1bdc:	4580bf26 	beq	r8,r22,1edc <_realloc_r+0x3d8>
    1be0:	b8c0930e 	bge	r23,r3,1e30 <_realloc_r+0x32c>
    1be4:	38004126 	beq	r7,zero,1cec <_realloc_r+0x1e8>
    1be8:	a16f883a 	add	r23,r20,r5
    1bec:	b8c03f16 	blt	r23,r3,1cec <_realloc_r+0x1e8>
    1bf0:	38800317 	ldw	r2,12(r7)
    1bf4:	38c00217 	ldw	r3,8(r7)
    1bf8:	a1bfff04 	addi	r6,r20,-4
    1bfc:	31400968 	cmpgeui	r5,r6,37
    1c00:	18800315 	stw	r2,12(r3)
    1c04:	10c00215 	stw	r3,8(r2)
    1c08:	39000204 	addi	r4,r7,8
    1c0c:	3ded883a 	add	r22,r7,r23
    1c10:	2800941e 	bne	r5,zero,1e64 <_realloc_r+0x360>
    1c14:	30800530 	cmpltui	r2,r6,20
    1c18:	80c00017 	ldw	r3,0(r16)
    1c1c:	1000df1e 	bne	r2,zero,1f9c <_realloc_r+0x498>
    1c20:	38c00215 	stw	r3,8(r7)
    1c24:	80c00117 	ldw	r3,4(r16)
    1c28:	30800728 	cmpgeui	r2,r6,28
    1c2c:	38c00315 	stw	r3,12(r7)
    1c30:	1000dc1e 	bne	r2,zero,1fa4 <_realloc_r+0x4a0>
    1c34:	80c00217 	ldw	r3,8(r16)
    1c38:	38800404 	addi	r2,r7,16
    1c3c:	84000204 	addi	r16,r16,8
    1c40:	10c00015 	stw	r3,0(r2)
    1c44:	80c00117 	ldw	r3,4(r16)
    1c48:	b829883a 	mov	r20,r23
    1c4c:	382b883a 	mov	r21,r7
    1c50:	10c00115 	stw	r3,4(r2)
    1c54:	80c00217 	ldw	r3,8(r16)
    1c58:	2021883a 	mov	r16,r4
    1c5c:	10c00215 	stw	r3,8(r2)
    1c60:	a9800117 	ldw	r6,4(r21)
    1c64:	a445c83a 	sub	r2,r20,r17
    1c68:	10c00430 	cmpltui	r3,r2,16
    1c6c:	3180004c 	andi	r6,r6,1
    1c70:	18004926 	beq	r3,zero,1d98 <_realloc_r+0x294>
    1c74:	a18cb03a 	or	r6,r20,r6
    1c78:	a9800115 	stw	r6,4(r21)
    1c7c:	b0800117 	ldw	r2,4(r22)
    1c80:	10800054 	ori	r2,r2,1
    1c84:	b0800115 	stw	r2,4(r22)
    1c88:	9809883a 	mov	r4,r19
    1c8c:	0003de40 	call	3de4 <__malloc_unlock>
    1c90:	8025883a 	mov	r18,r16
    1c94:	00000606 	br	1cb0 <_realloc_r+0x1ac>
    1c98:	04400404 	movi	r17,16
    1c9c:	00c00404 	movi	r3,16
    1ca0:	8cbfb02e 	bgeu	r17,r18,1b64 <_realloc_r+0x60>
    1ca4:	00800304 	movi	r2,12
    1ca8:	98800015 	stw	r2,0(r19)
    1cac:	0025883a 	mov	r18,zero
    1cb0:	9005883a 	mov	r2,r18
    1cb4:	dfc00a17 	ldw	ra,40(sp)
    1cb8:	df000917 	ldw	fp,36(sp)
    1cbc:	ddc00817 	ldw	r23,32(sp)
    1cc0:	dd800717 	ldw	r22,28(sp)
    1cc4:	dd400617 	ldw	r21,24(sp)
    1cc8:	dd000517 	ldw	r20,20(sp)
    1ccc:	dcc00417 	ldw	r19,16(sp)
    1cd0:	dc800317 	ldw	r18,12(sp)
    1cd4:	dc400217 	ldw	r17,8(sp)
    1cd8:	dc000117 	ldw	r16,4(sp)
    1cdc:	dec00b04 	addi	sp,sp,44
    1ce0:	f800283a 	ret
    1ce4:	1080004c 	andi	r2,r2,1
    1ce8:	10006c26 	beq	r2,zero,1e9c <_realloc_r+0x398>
    1cec:	900b883a 	mov	r5,r18
    1cf0:	9809883a 	mov	r4,r19
    1cf4:	0000f380 	call	f38 <_malloc_r>
    1cf8:	1025883a 	mov	r18,r2
    1cfc:	10001626 	beq	r2,zero,1d58 <_realloc_r+0x254>
    1d00:	80bfff17 	ldw	r2,-4(r16)
    1d04:	013fff84 	movi	r4,-2
    1d08:	90fffe04 	addi	r3,r18,-8
    1d0c:	1104703a 	and	r2,r2,r4
    1d10:	a885883a 	add	r2,r21,r2
    1d14:	10c05b26 	beq	r2,r3,1e84 <_realloc_r+0x380>
    1d18:	a1bfff04 	addi	r6,r20,-4
    1d1c:	30800968 	cmpgeui	r2,r6,37
    1d20:	10006a1e 	bne	r2,zero,1ecc <_realloc_r+0x3c8>
    1d24:	30800530 	cmpltui	r2,r6,20
    1d28:	81000017 	ldw	r4,0(r16)
    1d2c:	10003726 	beq	r2,zero,1e0c <_realloc_r+0x308>
    1d30:	9005883a 	mov	r2,r18
    1d34:	8007883a 	mov	r3,r16
    1d38:	11000015 	stw	r4,0(r2)
    1d3c:	19000117 	ldw	r4,4(r3)
    1d40:	11000115 	stw	r4,4(r2)
    1d44:	18c00217 	ldw	r3,8(r3)
    1d48:	10c00215 	stw	r3,8(r2)
    1d4c:	800b883a 	mov	r5,r16
    1d50:	9809883a 	mov	r4,r19
    1d54:	00029e80 	call	29e8 <_free_r>
    1d58:	9809883a 	mov	r4,r19
    1d5c:	0003de40 	call	3de4 <__malloc_unlock>
    1d60:	003fd306 	br	1cb0 <_realloc_r+0x1ac>
    1d64:	300b883a 	mov	r5,r6
    1d68:	dfc00a17 	ldw	ra,40(sp)
    1d6c:	df000917 	ldw	fp,36(sp)
    1d70:	ddc00817 	ldw	r23,32(sp)
    1d74:	dd800717 	ldw	r22,28(sp)
    1d78:	dd400617 	ldw	r21,24(sp)
    1d7c:	dd000517 	ldw	r20,20(sp)
    1d80:	dcc00417 	ldw	r19,16(sp)
    1d84:	dc800317 	ldw	r18,12(sp)
    1d88:	dc400217 	ldw	r17,8(sp)
    1d8c:	dc000117 	ldw	r16,4(sp)
    1d90:	dec00b04 	addi	sp,sp,44
    1d94:	0000f381 	jmpi	f38 <_malloc_r>
    1d98:	344cb03a 	or	r6,r6,r17
    1d9c:	a9800115 	stw	r6,4(r21)
    1da0:	ac4b883a 	add	r5,r21,r17
    1da4:	10800054 	ori	r2,r2,1
    1da8:	28800115 	stw	r2,4(r5)
    1dac:	b0800117 	ldw	r2,4(r22)
    1db0:	29400204 	addi	r5,r5,8
    1db4:	9809883a 	mov	r4,r19
    1db8:	10800054 	ori	r2,r2,1
    1dbc:	b0800115 	stw	r2,4(r22)
    1dc0:	00029e80 	call	29e8 <_free_r>
    1dc4:	003fb006 	br	1c88 <_realloc_r+0x184>
    1dc8:	2148703a 	and	r4,r4,r5
    1dcc:	a10b883a 	add	r5,r20,r4
    1dd0:	89800404 	addi	r6,r17,16
    1dd4:	29bf7716 	blt	r5,r6,1bb4 <_realloc_r+0xb0>
    1dd8:	ac6b883a 	add	r21,r21,r17
    1ddc:	2c45c83a 	sub	r2,r5,r17
    1de0:	e5400215 	stw	r21,8(fp)
    1de4:	10800054 	ori	r2,r2,1
    1de8:	a8800115 	stw	r2,4(r21)
    1dec:	80bfff17 	ldw	r2,-4(r16)
    1df0:	9809883a 	mov	r4,r19
    1df4:	8025883a 	mov	r18,r16
    1df8:	1080004c 	andi	r2,r2,1
    1dfc:	1462b03a 	or	r17,r2,r17
    1e00:	847fff15 	stw	r17,-4(r16)
    1e04:	0003de40 	call	3de4 <__malloc_unlock>
    1e08:	003fa906 	br	1cb0 <_realloc_r+0x1ac>
    1e0c:	91000015 	stw	r4,0(r18)
    1e10:	80c00117 	ldw	r3,4(r16)
    1e14:	30800728 	cmpgeui	r2,r6,28
    1e18:	90c00115 	stw	r3,4(r18)
    1e1c:	1000551e 	bne	r2,zero,1f74 <_realloc_r+0x470>
    1e20:	81000217 	ldw	r4,8(r16)
    1e24:	80c00204 	addi	r3,r16,8
    1e28:	90800204 	addi	r2,r18,8
    1e2c:	003fc206 	br	1d38 <_realloc_r+0x234>
    1e30:	b0800317 	ldw	r2,12(r22)
    1e34:	b0c00217 	ldw	r3,8(r22)
    1e38:	a1bfff04 	addi	r6,r20,-4
    1e3c:	31400968 	cmpgeui	r5,r6,37
    1e40:	18800315 	stw	r2,12(r3)
    1e44:	10c00215 	stw	r3,8(r2)
    1e48:	38c00217 	ldw	r3,8(r7)
    1e4c:	38800317 	ldw	r2,12(r7)
    1e50:	39000204 	addi	r4,r7,8
    1e54:	3ded883a 	add	r22,r7,r23
    1e58:	18800315 	stw	r2,12(r3)
    1e5c:	10c00215 	stw	r3,8(r2)
    1e60:	283f6c26 	beq	r5,zero,1c14 <_realloc_r+0x110>
    1e64:	800b883a 	mov	r5,r16
    1e68:	d9c00015 	stw	r7,0(sp)
    1e6c:	00018e80 	call	18e8 <memmove>
    1e70:	d9c00017 	ldw	r7,0(sp)
    1e74:	1021883a 	mov	r16,r2
    1e78:	b829883a 	mov	r20,r23
    1e7c:	382b883a 	mov	r21,r7
    1e80:	003f7706 	br	1c60 <_realloc_r+0x15c>
    1e84:	90bfff17 	ldw	r2,-4(r18)
    1e88:	00ffff04 	movi	r3,-4
    1e8c:	10c4703a 	and	r2,r2,r3
    1e90:	a0a9883a 	add	r20,r20,r2
    1e94:	ad2d883a 	add	r22,r21,r20
    1e98:	003f7106 	br	1c60 <_realloc_r+0x15c>
    1e9c:	81fffe17 	ldw	r7,-8(r16)
    1ea0:	a9cfc83a 	sub	r7,r21,r7
    1ea4:	38800117 	ldw	r2,4(r7)
    1ea8:	114a703a 	and	r5,r2,r5
    1eac:	003f4d06 	br	1be4 <_realloc_r+0xe0>
    1eb0:	b0800317 	ldw	r2,12(r22)
    1eb4:	b0c00217 	ldw	r3,8(r22)
    1eb8:	2829883a 	mov	r20,r5
    1ebc:	a96d883a 	add	r22,r21,r5
    1ec0:	18800315 	stw	r2,12(r3)
    1ec4:	10c00215 	stw	r3,8(r2)
    1ec8:	003f6506 	br	1c60 <_realloc_r+0x15c>
    1ecc:	800b883a 	mov	r5,r16
    1ed0:	9009883a 	mov	r4,r18
    1ed4:	00018e80 	call	18e8 <memmove>
    1ed8:	003f9c06 	br	1d4c <_realloc_r+0x248>
    1edc:	88800404 	addi	r2,r17,16
    1ee0:	b8bf4016 	blt	r23,r2,1be4 <_realloc_r+0xe0>
    1ee4:	38800317 	ldw	r2,12(r7)
    1ee8:	38c00217 	ldw	r3,8(r7)
    1eec:	a1bfff04 	addi	r6,r20,-4
    1ef0:	31000968 	cmpgeui	r4,r6,37
    1ef4:	18800315 	stw	r2,12(r3)
    1ef8:	10c00215 	stw	r3,8(r2)
    1efc:	3c800204 	addi	r18,r7,8
    1f00:	20003b1e 	bne	r4,zero,1ff0 <_realloc_r+0x4ec>
    1f04:	30800530 	cmpltui	r2,r6,20
    1f08:	80c00017 	ldw	r3,0(r16)
    1f0c:	1000361e 	bne	r2,zero,1fe8 <_realloc_r+0x4e4>
    1f10:	38c00215 	stw	r3,8(r7)
    1f14:	80c00117 	ldw	r3,4(r16)
    1f18:	30800728 	cmpgeui	r2,r6,28
    1f1c:	38c00315 	stw	r3,12(r7)
    1f20:	1000401e 	bne	r2,zero,2024 <_realloc_r+0x520>
    1f24:	80c00217 	ldw	r3,8(r16)
    1f28:	38800404 	addi	r2,r7,16
    1f2c:	84000204 	addi	r16,r16,8
    1f30:	10c00015 	stw	r3,0(r2)
    1f34:	80c00117 	ldw	r3,4(r16)
    1f38:	10c00115 	stw	r3,4(r2)
    1f3c:	80c00217 	ldw	r3,8(r16)
    1f40:	10c00215 	stw	r3,8(r2)
    1f44:	3c47883a 	add	r3,r7,r17
    1f48:	bc45c83a 	sub	r2,r23,r17
    1f4c:	e0c00215 	stw	r3,8(fp)
    1f50:	10800054 	ori	r2,r2,1
    1f54:	18800115 	stw	r2,4(r3)
    1f58:	38800117 	ldw	r2,4(r7)
    1f5c:	9809883a 	mov	r4,r19
    1f60:	1080004c 	andi	r2,r2,1
    1f64:	1462b03a 	or	r17,r2,r17
    1f68:	3c400115 	stw	r17,4(r7)
    1f6c:	0003de40 	call	3de4 <__malloc_unlock>
    1f70:	003f4f06 	br	1cb0 <_realloc_r+0x1ac>
    1f74:	80800217 	ldw	r2,8(r16)
    1f78:	31800920 	cmpeqi	r6,r6,36
    1f7c:	90800215 	stw	r2,8(r18)
    1f80:	80800317 	ldw	r2,12(r16)
    1f84:	90800315 	stw	r2,12(r18)
    1f88:	81000417 	ldw	r4,16(r16)
    1f8c:	30000f1e 	bne	r6,zero,1fcc <_realloc_r+0x4c8>
    1f90:	80c00404 	addi	r3,r16,16
    1f94:	90800404 	addi	r2,r18,16
    1f98:	003f6706 	br	1d38 <_realloc_r+0x234>
    1f9c:	2005883a 	mov	r2,r4
    1fa0:	003f2706 	br	1c40 <_realloc_r+0x13c>
    1fa4:	80800217 	ldw	r2,8(r16)
    1fa8:	31800920 	cmpeqi	r6,r6,36
    1fac:	38800415 	stw	r2,16(r7)
    1fb0:	80800317 	ldw	r2,12(r16)
    1fb4:	38800515 	stw	r2,20(r7)
    1fb8:	80c00417 	ldw	r3,16(r16)
    1fbc:	3000121e 	bne	r6,zero,2008 <_realloc_r+0x504>
    1fc0:	38800604 	addi	r2,r7,24
    1fc4:	84000404 	addi	r16,r16,16
    1fc8:	003f1d06 	br	1c40 <_realloc_r+0x13c>
    1fcc:	91000415 	stw	r4,16(r18)
    1fd0:	81000517 	ldw	r4,20(r16)
    1fd4:	80c00604 	addi	r3,r16,24
    1fd8:	90800604 	addi	r2,r18,24
    1fdc:	91000515 	stw	r4,20(r18)
    1fe0:	81000617 	ldw	r4,24(r16)
    1fe4:	003f5406 	br	1d38 <_realloc_r+0x234>
    1fe8:	9005883a 	mov	r2,r18
    1fec:	003fd006 	br	1f30 <_realloc_r+0x42c>
    1ff0:	800b883a 	mov	r5,r16
    1ff4:	9009883a 	mov	r4,r18
    1ff8:	d9c00015 	stw	r7,0(sp)
    1ffc:	00018e80 	call	18e8 <memmove>
    2000:	d9c00017 	ldw	r7,0(sp)
    2004:	003fcf06 	br	1f44 <_realloc_r+0x440>
    2008:	84000604 	addi	r16,r16,24
    200c:	38c00615 	stw	r3,24(r7)
    2010:	80ffff17 	ldw	r3,-4(r16)
    2014:	38800804 	addi	r2,r7,32
    2018:	38c00715 	stw	r3,28(r7)
    201c:	80c00017 	ldw	r3,0(r16)
    2020:	003f0706 	br	1c40 <_realloc_r+0x13c>
    2024:	80800217 	ldw	r2,8(r16)
    2028:	31800920 	cmpeqi	r6,r6,36
    202c:	38800415 	stw	r2,16(r7)
    2030:	80800317 	ldw	r2,12(r16)
    2034:	38800515 	stw	r2,20(r7)
    2038:	80c00417 	ldw	r3,16(r16)
    203c:	3000031e 	bne	r6,zero,204c <_realloc_r+0x548>
    2040:	38800604 	addi	r2,r7,24
    2044:	84000404 	addi	r16,r16,16
    2048:	003fb906 	br	1f30 <_realloc_r+0x42c>
    204c:	84000604 	addi	r16,r16,24
    2050:	38c00615 	stw	r3,24(r7)
    2054:	80ffff17 	ldw	r3,-4(r16)
    2058:	38800804 	addi	r2,r7,32
    205c:	38c00715 	stw	r3,28(r7)
    2060:	80c00017 	ldw	r3,0(r16)
    2064:	003fb206 	br	1f30 <_realloc_r+0x42c>

00002068 <_sbrk_r>:
    2068:	defffe04 	addi	sp,sp,-8
    206c:	dc000015 	stw	r16,0(sp)
    2070:	00800074 	movhi	r2,1
    2074:	2021883a 	mov	r16,r4
    2078:	2809883a 	mov	r4,r5
    207c:	dfc00115 	stw	ra,4(sp)
    2080:	100da815 	stw	zero,13984(r2)
    2084:	00039b00 	call	39b0 <sbrk>
    2088:	10ffffd8 	cmpnei	r3,r2,-1
    208c:	18000426 	beq	r3,zero,20a0 <_sbrk_r+0x38>
    2090:	dfc00117 	ldw	ra,4(sp)
    2094:	dc000017 	ldw	r16,0(sp)
    2098:	dec00204 	addi	sp,sp,8
    209c:	f800283a 	ret
    20a0:	00c00074 	movhi	r3,1
    20a4:	18cda817 	ldw	r3,13984(r3)
    20a8:	183ff926 	beq	r3,zero,2090 <_sbrk_r+0x28>
    20ac:	80c00015 	stw	r3,0(r16)
    20b0:	dfc00117 	ldw	ra,4(sp)
    20b4:	dc000017 	ldw	r16,0(sp)
    20b8:	dec00204 	addi	sp,sp,8
    20bc:	f800283a 	ret

000020c0 <__sread>:
    20c0:	defffe04 	addi	sp,sp,-8
    20c4:	dc000015 	stw	r16,0(sp)
    20c8:	2821883a 	mov	r16,r5
    20cc:	2940038f 	ldh	r5,14(r5)
    20d0:	dfc00115 	stw	ra,4(sp)
    20d4:	0002f900 	call	2f90 <_read_r>
    20d8:	10000716 	blt	r2,zero,20f8 <__sread+0x38>
    20dc:	80c01417 	ldw	r3,80(r16)
    20e0:	1887883a 	add	r3,r3,r2
    20e4:	80c01415 	stw	r3,80(r16)
    20e8:	dfc00117 	ldw	ra,4(sp)
    20ec:	dc000017 	ldw	r16,0(sp)
    20f0:	dec00204 	addi	sp,sp,8
    20f4:	f800283a 	ret
    20f8:	80c0030b 	ldhu	r3,12(r16)
    20fc:	18fbffcc 	andi	r3,r3,61439
    2100:	80c0030d 	sth	r3,12(r16)
    2104:	dfc00117 	ldw	ra,4(sp)
    2108:	dc000017 	ldw	r16,0(sp)
    210c:	dec00204 	addi	sp,sp,8
    2110:	f800283a 	ret

00002114 <__seofread>:
    2114:	0005883a 	mov	r2,zero
    2118:	f800283a 	ret

0000211c <__swrite>:
    211c:	2880030b 	ldhu	r2,12(r5)
    2120:	defffb04 	addi	sp,sp,-20
    2124:	dcc00315 	stw	r19,12(sp)
    2128:	dc800215 	stw	r18,8(sp)
    212c:	dc400115 	stw	r17,4(sp)
    2130:	dc000015 	stw	r16,0(sp)
    2134:	dfc00415 	stw	ra,16(sp)
    2138:	10c0400c 	andi	r3,r2,256
    213c:	2821883a 	mov	r16,r5
    2140:	2023883a 	mov	r17,r4
    2144:	2940038f 	ldh	r5,14(r5)
    2148:	3025883a 	mov	r18,r6
    214c:	3827883a 	mov	r19,r7
    2150:	18000c1e 	bne	r3,zero,2184 <__swrite+0x68>
    2154:	10bbffcc 	andi	r2,r2,61439
    2158:	980f883a 	mov	r7,r19
    215c:	900d883a 	mov	r6,r18
    2160:	8809883a 	mov	r4,r17
    2164:	8080030d 	sth	r2,12(r16)
    2168:	dfc00417 	ldw	ra,16(sp)
    216c:	dcc00317 	ldw	r19,12(sp)
    2170:	dc800217 	ldw	r18,8(sp)
    2174:	dc400117 	ldw	r17,4(sp)
    2178:	dc000017 	ldw	r16,0(sp)
    217c:	dec00504 	addi	sp,sp,20
    2180:	00022001 	jmpi	2200 <_write_r>
    2184:	01c00084 	movi	r7,2
    2188:	000d883a 	mov	r6,zero
    218c:	0002ce40 	call	2ce4 <_lseek_r>
    2190:	8080030b 	ldhu	r2,12(r16)
    2194:	8140038f 	ldh	r5,14(r16)
    2198:	003fee06 	br	2154 <__swrite+0x38>

0000219c <__sseek>:
    219c:	defffe04 	addi	sp,sp,-8
    21a0:	dc000015 	stw	r16,0(sp)
    21a4:	2821883a 	mov	r16,r5
    21a8:	2940038f 	ldh	r5,14(r5)
    21ac:	dfc00115 	stw	ra,4(sp)
    21b0:	0002ce40 	call	2ce4 <_lseek_r>
    21b4:	10ffffd8 	cmpnei	r3,r2,-1
    21b8:	18000826 	beq	r3,zero,21dc <__sseek+0x40>
    21bc:	80c0030b 	ldhu	r3,12(r16)
    21c0:	80801415 	stw	r2,80(r16)
    21c4:	18c40014 	ori	r3,r3,4096
    21c8:	80c0030d 	sth	r3,12(r16)
    21cc:	dfc00117 	ldw	ra,4(sp)
    21d0:	dc000017 	ldw	r16,0(sp)
    21d4:	dec00204 	addi	sp,sp,8
    21d8:	f800283a 	ret
    21dc:	80c0030b 	ldhu	r3,12(r16)
    21e0:	18fbffcc 	andi	r3,r3,61439
    21e4:	80c0030d 	sth	r3,12(r16)
    21e8:	dfc00117 	ldw	ra,4(sp)
    21ec:	dc000017 	ldw	r16,0(sp)
    21f0:	dec00204 	addi	sp,sp,8
    21f4:	f800283a 	ret

000021f8 <__sclose>:
    21f8:	2940038f 	ldh	r5,14(r5)
    21fc:	00023c81 	jmpi	23c8 <_close_r>

00002200 <_write_r>:
    2200:	2807883a 	mov	r3,r5
    2204:	defffe04 	addi	sp,sp,-8
    2208:	dc000015 	stw	r16,0(sp)
    220c:	300b883a 	mov	r5,r6
    2210:	00800074 	movhi	r2,1
    2214:	380d883a 	mov	r6,r7
    2218:	2021883a 	mov	r16,r4
    221c:	1809883a 	mov	r4,r3
    2220:	dfc00115 	stw	ra,4(sp)
    2224:	100da815 	stw	zero,13984(r2)
    2228:	0003aa40 	call	3aa4 <write>
    222c:	10ffffd8 	cmpnei	r3,r2,-1
    2230:	18000426 	beq	r3,zero,2244 <_write_r+0x44>
    2234:	dfc00117 	ldw	ra,4(sp)
    2238:	dc000017 	ldw	r16,0(sp)
    223c:	dec00204 	addi	sp,sp,8
    2240:	f800283a 	ret
    2244:	00c00074 	movhi	r3,1
    2248:	18cda817 	ldw	r3,13984(r3)
    224c:	183ff926 	beq	r3,zero,2234 <_write_r+0x34>
    2250:	80c00015 	stw	r3,0(r16)
    2254:	dfc00117 	ldw	ra,4(sp)
    2258:	dc000017 	ldw	r16,0(sp)
    225c:	dec00204 	addi	sp,sp,8
    2260:	f800283a 	ret

00002264 <__swsetup_r>:
    2264:	00800074 	movhi	r2,1
    2268:	1085f917 	ldw	r2,6116(r2)
    226c:	defffd04 	addi	sp,sp,-12
    2270:	dc400115 	stw	r17,4(sp)
    2274:	dc000015 	stw	r16,0(sp)
    2278:	dfc00215 	stw	ra,8(sp)
    227c:	2023883a 	mov	r17,r4
    2280:	2821883a 	mov	r16,r5
    2284:	10000226 	beq	r2,zero,2290 <__swsetup_r+0x2c>
    2288:	10c00e17 	ldw	r3,56(r2)
    228c:	18001f26 	beq	r3,zero,230c <__swsetup_r+0xa8>
    2290:	8180030b 	ldhu	r6,12(r16)
    2294:	30c0020c 	andi	r3,r6,8
    2298:	3005883a 	mov	r2,r6
    229c:	18002126 	beq	r3,zero,2324 <__swsetup_r+0xc0>
    22a0:	80c00417 	ldw	r3,16(r16)
    22a4:	18002826 	beq	r3,zero,2348 <__swsetup_r+0xe4>
    22a8:	1100004c 	andi	r4,r2,1
    22ac:	20000b1e 	bne	r4,zero,22dc <__swsetup_r+0x78>
    22b0:	1100008c 	andi	r4,r2,2
    22b4:	20002e1e 	bne	r4,zero,2370 <__swsetup_r+0x10c>
    22b8:	81000517 	ldw	r4,20(r16)
    22bc:	81000215 	stw	r4,8(r16)
    22c0:	18000b26 	beq	r3,zero,22f0 <__swsetup_r+0x8c>
    22c4:	0005883a 	mov	r2,zero
    22c8:	dfc00217 	ldw	ra,8(sp)
    22cc:	dc400117 	ldw	r17,4(sp)
    22d0:	dc000017 	ldw	r16,0(sp)
    22d4:	dec00304 	addi	sp,sp,12
    22d8:	f800283a 	ret
    22dc:	81000517 	ldw	r4,20(r16)
    22e0:	80000215 	stw	zero,8(r16)
    22e4:	0109c83a 	sub	r4,zero,r4
    22e8:	81000615 	stw	r4,24(r16)
    22ec:	183ff51e 	bne	r3,zero,22c4 <__swsetup_r+0x60>
    22f0:	10c0200c 	andi	r3,r2,128
    22f4:	0005883a 	mov	r2,zero
    22f8:	183ff326 	beq	r3,zero,22c8 <__swsetup_r+0x64>
    22fc:	31801014 	ori	r6,r6,64
    2300:	8180030d 	sth	r6,12(r16)
    2304:	00bfffc4 	movi	r2,-1
    2308:	003fef06 	br	22c8 <__swsetup_r+0x64>
    230c:	1009883a 	mov	r4,r2
    2310:	00008f80 	call	8f8 <__sinit>
    2314:	8180030b 	ldhu	r6,12(r16)
    2318:	30c0020c 	andi	r3,r6,8
    231c:	3005883a 	mov	r2,r6
    2320:	183fdf1e 	bne	r3,zero,22a0 <__swsetup_r+0x3c>
    2324:	3080040c 	andi	r2,r6,16
    2328:	10002126 	beq	r2,zero,23b0 <__swsetup_r+0x14c>
    232c:	3080010c 	andi	r2,r6,4
    2330:	1000111e 	bne	r2,zero,2378 <__swsetup_r+0x114>
    2334:	80c00417 	ldw	r3,16(r16)
    2338:	30800214 	ori	r2,r6,8
    233c:	8080030d 	sth	r2,12(r16)
    2340:	100d883a 	mov	r6,r2
    2344:	183fd81e 	bne	r3,zero,22a8 <__swsetup_r+0x44>
    2348:	1100a00c 	andi	r4,r2,640
    234c:	21008020 	cmpeqi	r4,r4,512
    2350:	203fd51e 	bne	r4,zero,22a8 <__swsetup_r+0x44>
    2354:	800b883a 	mov	r5,r16
    2358:	8809883a 	mov	r4,r17
    235c:	0002d480 	call	2d48 <__smakebuf_r>
    2360:	8180030b 	ldhu	r6,12(r16)
    2364:	80c00417 	ldw	r3,16(r16)
    2368:	3005883a 	mov	r2,r6
    236c:	003fce06 	br	22a8 <__swsetup_r+0x44>
    2370:	0009883a 	mov	r4,zero
    2374:	003fd106 	br	22bc <__swsetup_r+0x58>
    2378:	81400c17 	ldw	r5,48(r16)
    237c:	28000626 	beq	r5,zero,2398 <__swsetup_r+0x134>
    2380:	80801004 	addi	r2,r16,64
    2384:	28800326 	beq	r5,r2,2394 <__swsetup_r+0x130>
    2388:	8809883a 	mov	r4,r17
    238c:	00029e80 	call	29e8 <_free_r>
    2390:	8180030b 	ldhu	r6,12(r16)
    2394:	80000c15 	stw	zero,48(r16)
    2398:	80c00417 	ldw	r3,16(r16)
    239c:	00bff6c4 	movi	r2,-37
    23a0:	118c703a 	and	r6,r2,r6
    23a4:	80000115 	stw	zero,4(r16)
    23a8:	80c00015 	stw	r3,0(r16)
    23ac:	003fe206 	br	2338 <__swsetup_r+0xd4>
    23b0:	00800244 	movi	r2,9
    23b4:	88800015 	stw	r2,0(r17)
    23b8:	31801014 	ori	r6,r6,64
    23bc:	8180030d 	sth	r6,12(r16)
    23c0:	00bfffc4 	movi	r2,-1
    23c4:	003fc006 	br	22c8 <__swsetup_r+0x64>

000023c8 <_close_r>:
    23c8:	defffe04 	addi	sp,sp,-8
    23cc:	dc000015 	stw	r16,0(sp)
    23d0:	00800074 	movhi	r2,1
    23d4:	2021883a 	mov	r16,r4
    23d8:	2809883a 	mov	r4,r5
    23dc:	dfc00115 	stw	ra,4(sp)
    23e0:	100da815 	stw	zero,13984(r2)
    23e4:	000329c0 	call	329c <close>
    23e8:	10ffffd8 	cmpnei	r3,r2,-1
    23ec:	18000426 	beq	r3,zero,2400 <_close_r+0x38>
    23f0:	dfc00117 	ldw	ra,4(sp)
    23f4:	dc000017 	ldw	r16,0(sp)
    23f8:	dec00204 	addi	sp,sp,8
    23fc:	f800283a 	ret
    2400:	00c00074 	movhi	r3,1
    2404:	18cda817 	ldw	r3,13984(r3)
    2408:	183ff926 	beq	r3,zero,23f0 <_close_r+0x28>
    240c:	80c00015 	stw	r3,0(r16)
    2410:	dfc00117 	ldw	ra,4(sp)
    2414:	dc000017 	ldw	r16,0(sp)
    2418:	dec00204 	addi	sp,sp,8
    241c:	f800283a 	ret

00002420 <_fclose_r.part.0>:
    2420:	defffc04 	addi	sp,sp,-16
    2424:	dc800215 	stw	r18,8(sp)
    2428:	dc400115 	stw	r17,4(sp)
    242c:	dc000015 	stw	r16,0(sp)
    2430:	dfc00315 	stw	ra,12(sp)
    2434:	2821883a 	mov	r16,r5
    2438:	2023883a 	mov	r17,r4
    243c:	00025c00 	call	25c0 <__sflush_r>
    2440:	80c00b17 	ldw	r3,44(r16)
    2444:	1025883a 	mov	r18,r2
    2448:	18000426 	beq	r3,zero,245c <_fclose_r.part.0+0x3c>
    244c:	81400717 	ldw	r5,28(r16)
    2450:	8809883a 	mov	r4,r17
    2454:	183ee83a 	callr	r3
    2458:	10001916 	blt	r2,zero,24c0 <_fclose_r.part.0+0xa0>
    245c:	8080030b 	ldhu	r2,12(r16)
    2460:	1080200c 	andi	r2,r2,128
    2464:	10001a1e 	bne	r2,zero,24d0 <_fclose_r.part.0+0xb0>
    2468:	81400c17 	ldw	r5,48(r16)
    246c:	28000526 	beq	r5,zero,2484 <_fclose_r.part.0+0x64>
    2470:	80801004 	addi	r2,r16,64
    2474:	28800226 	beq	r5,r2,2480 <_fclose_r.part.0+0x60>
    2478:	8809883a 	mov	r4,r17
    247c:	00029e80 	call	29e8 <_free_r>
    2480:	80000c15 	stw	zero,48(r16)
    2484:	81401117 	ldw	r5,68(r16)
    2488:	28000326 	beq	r5,zero,2498 <_fclose_r.part.0+0x78>
    248c:	8809883a 	mov	r4,r17
    2490:	00029e80 	call	29e8 <_free_r>
    2494:	80001115 	stw	zero,68(r16)
    2498:	00009080 	call	908 <__sfp_lock_acquire>
    249c:	8000030d 	sth	zero,12(r16)
    24a0:	000090c0 	call	90c <__sfp_lock_release>
    24a4:	9005883a 	mov	r2,r18
    24a8:	dfc00317 	ldw	ra,12(sp)
    24ac:	dc800217 	ldw	r18,8(sp)
    24b0:	dc400117 	ldw	r17,4(sp)
    24b4:	dc000017 	ldw	r16,0(sp)
    24b8:	dec00404 	addi	sp,sp,16
    24bc:	f800283a 	ret
    24c0:	8080030b 	ldhu	r2,12(r16)
    24c4:	04bfffc4 	movi	r18,-1
    24c8:	1080200c 	andi	r2,r2,128
    24cc:	103fe626 	beq	r2,zero,2468 <_fclose_r.part.0+0x48>
    24d0:	81400417 	ldw	r5,16(r16)
    24d4:	8809883a 	mov	r4,r17
    24d8:	00029e80 	call	29e8 <_free_r>
    24dc:	003fe206 	br	2468 <_fclose_r.part.0+0x48>

000024e0 <_fclose_r>:
    24e0:	28001926 	beq	r5,zero,2548 <_fclose_r+0x68>
    24e4:	defffd04 	addi	sp,sp,-12
    24e8:	dc000115 	stw	r16,4(sp)
    24ec:	dfc00215 	stw	ra,8(sp)
    24f0:	2021883a 	mov	r16,r4
    24f4:	20000226 	beq	r4,zero,2500 <_fclose_r+0x20>
    24f8:	20800e17 	ldw	r2,56(r4)
    24fc:	10000c26 	beq	r2,zero,2530 <_fclose_r+0x50>
    2500:	2880030f 	ldh	r2,12(r5)
    2504:	1000051e 	bne	r2,zero,251c <_fclose_r+0x3c>
    2508:	0005883a 	mov	r2,zero
    250c:	dfc00217 	ldw	ra,8(sp)
    2510:	dc000117 	ldw	r16,4(sp)
    2514:	dec00304 	addi	sp,sp,12
    2518:	f800283a 	ret
    251c:	8009883a 	mov	r4,r16
    2520:	dfc00217 	ldw	ra,8(sp)
    2524:	dc000117 	ldw	r16,4(sp)
    2528:	dec00304 	addi	sp,sp,12
    252c:	00024201 	jmpi	2420 <_fclose_r.part.0>
    2530:	d9400015 	stw	r5,0(sp)
    2534:	00008f80 	call	8f8 <__sinit>
    2538:	d9400017 	ldw	r5,0(sp)
    253c:	2880030f 	ldh	r2,12(r5)
    2540:	103ff126 	beq	r2,zero,2508 <_fclose_r+0x28>
    2544:	003ff506 	br	251c <_fclose_r+0x3c>
    2548:	0005883a 	mov	r2,zero
    254c:	f800283a 	ret

00002550 <fclose>:
    2550:	20000826 	beq	r4,zero,2574 <fclose+0x24>
    2554:	00800074 	movhi	r2,1
    2558:	200b883a 	mov	r5,r4
    255c:	1105f917 	ldw	r4,6116(r2)
    2560:	20000226 	beq	r4,zero,256c <fclose+0x1c>
    2564:	20800e17 	ldw	r2,56(r4)
    2568:	10000526 	beq	r2,zero,2580 <fclose+0x30>
    256c:	2880030f 	ldh	r2,12(r5)
    2570:	1000021e 	bne	r2,zero,257c <fclose+0x2c>
    2574:	0005883a 	mov	r2,zero
    2578:	f800283a 	ret
    257c:	00024201 	jmpi	2420 <_fclose_r.part.0>
    2580:	defffd04 	addi	sp,sp,-12
    2584:	d9400115 	stw	r5,4(sp)
    2588:	d9000015 	stw	r4,0(sp)
    258c:	dfc00215 	stw	ra,8(sp)
    2590:	00008f80 	call	8f8 <__sinit>
    2594:	d9400117 	ldw	r5,4(sp)
    2598:	d9000017 	ldw	r4,0(sp)
    259c:	2880030f 	ldh	r2,12(r5)
    25a0:	10000326 	beq	r2,zero,25b0 <fclose+0x60>
    25a4:	dfc00217 	ldw	ra,8(sp)
    25a8:	dec00304 	addi	sp,sp,12
    25ac:	00024201 	jmpi	2420 <_fclose_r.part.0>
    25b0:	0005883a 	mov	r2,zero
    25b4:	dfc00217 	ldw	ra,8(sp)
    25b8:	dec00304 	addi	sp,sp,12
    25bc:	f800283a 	ret

000025c0 <__sflush_r>:
    25c0:	2880030b 	ldhu	r2,12(r5)
    25c4:	defffb04 	addi	sp,sp,-20
    25c8:	dcc00315 	stw	r19,12(sp)
    25cc:	dc000015 	stw	r16,0(sp)
    25d0:	dfc00415 	stw	ra,16(sp)
    25d4:	dc800215 	stw	r18,8(sp)
    25d8:	dc400115 	stw	r17,4(sp)
    25dc:	10c0020c 	andi	r3,r2,8
    25e0:	2821883a 	mov	r16,r5
    25e4:	2027883a 	mov	r19,r4
    25e8:	18003f1e 	bne	r3,zero,26e8 <__sflush_r+0x128>
    25ec:	28c00117 	ldw	r3,4(r5)
    25f0:	10820014 	ori	r2,r2,2048
    25f4:	2880030d 	sth	r2,12(r5)
    25f8:	00c0550e 	bge	zero,r3,2750 <__sflush_r+0x190>
    25fc:	82000a17 	ldw	r8,40(r16)
    2600:	40003126 	beq	r8,zero,26c8 <__sflush_r+0x108>
    2604:	9c400017 	ldw	r17,0(r19)
    2608:	1104000c 	andi	r4,r2,4096
    260c:	98000015 	stw	zero,0(r19)
    2610:	81400717 	ldw	r5,28(r16)
    2614:	1007883a 	mov	r3,r2
    2618:	2000521e 	bne	r4,zero,2764 <__sflush_r+0x1a4>
    261c:	01c00044 	movi	r7,1
    2620:	000d883a 	mov	r6,zero
    2624:	9809883a 	mov	r4,r19
    2628:	403ee83a 	callr	r8
    262c:	10ffffd8 	cmpnei	r3,r2,-1
    2630:	18005826 	beq	r3,zero,2794 <__sflush_r+0x1d4>
    2634:	80c0030b 	ldhu	r3,12(r16)
    2638:	82000a17 	ldw	r8,40(r16)
    263c:	81400717 	ldw	r5,28(r16)
    2640:	18c0010c 	andi	r3,r3,4
    2644:	18000626 	beq	r3,zero,2660 <__sflush_r+0xa0>
    2648:	81000117 	ldw	r4,4(r16)
    264c:	80c00c17 	ldw	r3,48(r16)
    2650:	1105c83a 	sub	r2,r2,r4
    2654:	18000226 	beq	r3,zero,2660 <__sflush_r+0xa0>
    2658:	80c00f17 	ldw	r3,60(r16)
    265c:	10c5c83a 	sub	r2,r2,r3
    2660:	100d883a 	mov	r6,r2
    2664:	000f883a 	mov	r7,zero
    2668:	9809883a 	mov	r4,r19
    266c:	403ee83a 	callr	r8
    2670:	10ffffd8 	cmpnei	r3,r2,-1
    2674:	18003d1e 	bne	r3,zero,276c <__sflush_r+0x1ac>
    2678:	99000017 	ldw	r4,0(r19)
    267c:	80c0030b 	ldhu	r3,12(r16)
    2680:	20004e26 	beq	r4,zero,27bc <__sflush_r+0x1fc>
    2684:	21400760 	cmpeqi	r5,r4,29
    2688:	2800021e 	bne	r5,zero,2694 <__sflush_r+0xd4>
    268c:	210005a0 	cmpeqi	r4,r4,22
    2690:	20002c26 	beq	r4,zero,2744 <__sflush_r+0x184>
    2694:	80800417 	ldw	r2,16(r16)
    2698:	18fdffcc 	andi	r3,r3,63487
    269c:	80c0030d 	sth	r3,12(r16)
    26a0:	80000115 	stw	zero,4(r16)
    26a4:	80800015 	stw	r2,0(r16)
    26a8:	81400c17 	ldw	r5,48(r16)
    26ac:	9c400015 	stw	r17,0(r19)
    26b0:	28000526 	beq	r5,zero,26c8 <__sflush_r+0x108>
    26b4:	80801004 	addi	r2,r16,64
    26b8:	28800226 	beq	r5,r2,26c4 <__sflush_r+0x104>
    26bc:	9809883a 	mov	r4,r19
    26c0:	00029e80 	call	29e8 <_free_r>
    26c4:	80000c15 	stw	zero,48(r16)
    26c8:	0005883a 	mov	r2,zero
    26cc:	dfc00417 	ldw	ra,16(sp)
    26d0:	dcc00317 	ldw	r19,12(sp)
    26d4:	dc800217 	ldw	r18,8(sp)
    26d8:	dc400117 	ldw	r17,4(sp)
    26dc:	dc000017 	ldw	r16,0(sp)
    26e0:	dec00504 	addi	sp,sp,20
    26e4:	f800283a 	ret
    26e8:	2c800417 	ldw	r18,16(r5)
    26ec:	903ff626 	beq	r18,zero,26c8 <__sflush_r+0x108>
    26f0:	2c400017 	ldw	r17,0(r5)
    26f4:	108000cc 	andi	r2,r2,3
    26f8:	2c800015 	stw	r18,0(r5)
    26fc:	8ca3c83a 	sub	r17,r17,r18
    2700:	1000161e 	bne	r2,zero,275c <__sflush_r+0x19c>
    2704:	28800517 	ldw	r2,20(r5)
    2708:	80800215 	stw	r2,8(r16)
    270c:	04400316 	blt	zero,r17,271c <__sflush_r+0x15c>
    2710:	003fed06 	br	26c8 <__sflush_r+0x108>
    2714:	90a5883a 	add	r18,r18,r2
    2718:	047feb0e 	bge	zero,r17,26c8 <__sflush_r+0x108>
    271c:	80800917 	ldw	r2,36(r16)
    2720:	81400717 	ldw	r5,28(r16)
    2724:	880f883a 	mov	r7,r17
    2728:	900d883a 	mov	r6,r18
    272c:	9809883a 	mov	r4,r19
    2730:	103ee83a 	callr	r2
    2734:	88a3c83a 	sub	r17,r17,r2
    2738:	00bff616 	blt	zero,r2,2714 <__sflush_r+0x154>
    273c:	80c0030b 	ldhu	r3,12(r16)
    2740:	00bfffc4 	movi	r2,-1
    2744:	18c01014 	ori	r3,r3,64
    2748:	80c0030d 	sth	r3,12(r16)
    274c:	003fdf06 	br	26cc <__sflush_r+0x10c>
    2750:	28c00f17 	ldw	r3,60(r5)
    2754:	00ffa916 	blt	zero,r3,25fc <__sflush_r+0x3c>
    2758:	003fdb06 	br	26c8 <__sflush_r+0x108>
    275c:	0005883a 	mov	r2,zero
    2760:	003fe906 	br	2708 <__sflush_r+0x148>
    2764:	80801417 	ldw	r2,80(r16)
    2768:	003fb506 	br	2640 <__sflush_r+0x80>
    276c:	80c0030b 	ldhu	r3,12(r16)
    2770:	81000417 	ldw	r4,16(r16)
    2774:	80000115 	stw	zero,4(r16)
    2778:	197dffcc 	andi	r5,r3,63487
    277c:	8140030d 	sth	r5,12(r16)
    2780:	81000015 	stw	r4,0(r16)
    2784:	18c4000c 	andi	r3,r3,4096
    2788:	183fc726 	beq	r3,zero,26a8 <__sflush_r+0xe8>
    278c:	80801415 	stw	r2,80(r16)
    2790:	003fc506 	br	26a8 <__sflush_r+0xe8>
    2794:	98c00017 	ldw	r3,0(r19)
    2798:	183fa626 	beq	r3,zero,2634 <__sflush_r+0x74>
    279c:	19000760 	cmpeqi	r4,r3,29
    27a0:	20000e1e 	bne	r4,zero,27dc <__sflush_r+0x21c>
    27a4:	18c00598 	cmpnei	r3,r3,22
    27a8:	18000c26 	beq	r3,zero,27dc <__sflush_r+0x21c>
    27ac:	80c0030b 	ldhu	r3,12(r16)
    27b0:	18c01014 	ori	r3,r3,64
    27b4:	80c0030d 	sth	r3,12(r16)
    27b8:	003fc406 	br	26cc <__sflush_r+0x10c>
    27bc:	81000417 	ldw	r4,16(r16)
    27c0:	197dffcc 	andi	r5,r3,63487
    27c4:	8140030d 	sth	r5,12(r16)
    27c8:	80000115 	stw	zero,4(r16)
    27cc:	81000015 	stw	r4,0(r16)
    27d0:	18c4000c 	andi	r3,r3,4096
    27d4:	183fb426 	beq	r3,zero,26a8 <__sflush_r+0xe8>
    27d8:	003fec06 	br	278c <__sflush_r+0x1cc>
    27dc:	9c400015 	stw	r17,0(r19)
    27e0:	0005883a 	mov	r2,zero
    27e4:	003fb906 	br	26cc <__sflush_r+0x10c>

000027e8 <_fflush_r>:
    27e8:	defffd04 	addi	sp,sp,-12
    27ec:	dc000115 	stw	r16,4(sp)
    27f0:	dfc00215 	stw	ra,8(sp)
    27f4:	2021883a 	mov	r16,r4
    27f8:	20000226 	beq	r4,zero,2804 <_fflush_r+0x1c>
    27fc:	20800e17 	ldw	r2,56(r4)
    2800:	10000726 	beq	r2,zero,2820 <_fflush_r+0x38>
    2804:	2880030f 	ldh	r2,12(r5)
    2808:	10000a1e 	bne	r2,zero,2834 <_fflush_r+0x4c>
    280c:	0005883a 	mov	r2,zero
    2810:	dfc00217 	ldw	ra,8(sp)
    2814:	dc000117 	ldw	r16,4(sp)
    2818:	dec00304 	addi	sp,sp,12
    281c:	f800283a 	ret
    2820:	d9400015 	stw	r5,0(sp)
    2824:	00008f80 	call	8f8 <__sinit>
    2828:	d9400017 	ldw	r5,0(sp)
    282c:	2880030f 	ldh	r2,12(r5)
    2830:	103ff626 	beq	r2,zero,280c <_fflush_r+0x24>
    2834:	8009883a 	mov	r4,r16
    2838:	dfc00217 	ldw	ra,8(sp)
    283c:	dc000117 	ldw	r16,4(sp)
    2840:	dec00304 	addi	sp,sp,12
    2844:	00025c01 	jmpi	25c0 <__sflush_r>

00002848 <fflush>:
    2848:	20001726 	beq	r4,zero,28a8 <fflush+0x60>
    284c:	00800074 	movhi	r2,1
    2850:	200b883a 	mov	r5,r4
    2854:	1105f917 	ldw	r4,6116(r2)
    2858:	20000226 	beq	r4,zero,2864 <fflush+0x1c>
    285c:	20800e17 	ldw	r2,56(r4)
    2860:	10000526 	beq	r2,zero,2878 <fflush+0x30>
    2864:	2880030f 	ldh	r2,12(r5)
    2868:	1000021e 	bne	r2,zero,2874 <fflush+0x2c>
    286c:	0005883a 	mov	r2,zero
    2870:	f800283a 	ret
    2874:	00025c01 	jmpi	25c0 <__sflush_r>
    2878:	defffd04 	addi	sp,sp,-12
    287c:	d9400115 	stw	r5,4(sp)
    2880:	d9000015 	stw	r4,0(sp)
    2884:	dfc00215 	stw	ra,8(sp)
    2888:	00008f80 	call	8f8 <__sinit>
    288c:	d9400117 	ldw	r5,4(sp)
    2890:	d9000017 	ldw	r4,0(sp)
    2894:	2880030f 	ldh	r2,12(r5)
    2898:	10000826 	beq	r2,zero,28bc <fflush+0x74>
    289c:	dfc00217 	ldw	ra,8(sp)
    28a0:	dec00304 	addi	sp,sp,12
    28a4:	00025c01 	jmpi	25c0 <__sflush_r>
    28a8:	00800074 	movhi	r2,1
    28ac:	1105f817 	ldw	r4,6112(r2)
    28b0:	01400034 	movhi	r5,0
    28b4:	2949fa04 	addi	r5,r5,10216
    28b8:	0000e901 	jmpi	e90 <_fwalk_reent>
    28bc:	0005883a 	mov	r2,zero
    28c0:	dfc00217 	ldw	ra,8(sp)
    28c4:	dec00304 	addi	sp,sp,12
    28c8:	f800283a 	ret

000028cc <_malloc_trim_r>:
    28cc:	defffb04 	addi	sp,sp,-20
    28d0:	dcc00315 	stw	r19,12(sp)
    28d4:	04c00074 	movhi	r19,1
    28d8:	dc800215 	stw	r18,8(sp)
    28dc:	dc400115 	stw	r17,4(sp)
    28e0:	dc000015 	stw	r16,0(sp)
    28e4:	dfc00415 	stw	ra,16(sp)
    28e8:	2821883a 	mov	r16,r5
    28ec:	9cffae04 	addi	r19,r19,-328
    28f0:	2025883a 	mov	r18,r4
    28f4:	0003cbc0 	call	3cbc <__malloc_lock>
    28f8:	98800217 	ldw	r2,8(r19)
    28fc:	14400117 	ldw	r17,4(r2)
    2900:	00bfff04 	movi	r2,-4
    2904:	88a2703a 	and	r17,r17,r2
    2908:	8c21c83a 	sub	r16,r17,r16
    290c:	8403fbc4 	addi	r16,r16,4079
    2910:	8020d33a 	srli	r16,r16,12
    2914:	843fffc4 	addi	r16,r16,-1
    2918:	8020933a 	slli	r16,r16,12
    291c:	80840008 	cmpgei	r2,r16,4096
    2920:	10000626 	beq	r2,zero,293c <_malloc_trim_r+0x70>
    2924:	000b883a 	mov	r5,zero
    2928:	9009883a 	mov	r4,r18
    292c:	00020680 	call	2068 <_sbrk_r>
    2930:	98c00217 	ldw	r3,8(r19)
    2934:	1c47883a 	add	r3,r3,r17
    2938:	10c00a26 	beq	r2,r3,2964 <_malloc_trim_r+0x98>
    293c:	9009883a 	mov	r4,r18
    2940:	0003de40 	call	3de4 <__malloc_unlock>
    2944:	0005883a 	mov	r2,zero
    2948:	dfc00417 	ldw	ra,16(sp)
    294c:	dcc00317 	ldw	r19,12(sp)
    2950:	dc800217 	ldw	r18,8(sp)
    2954:	dc400117 	ldw	r17,4(sp)
    2958:	dc000017 	ldw	r16,0(sp)
    295c:	dec00504 	addi	sp,sp,20
    2960:	f800283a 	ret
    2964:	040bc83a 	sub	r5,zero,r16
    2968:	9009883a 	mov	r4,r18
    296c:	00020680 	call	2068 <_sbrk_r>
    2970:	10bfffd8 	cmpnei	r2,r2,-1
    2974:	10000d26 	beq	r2,zero,29ac <_malloc_trim_r+0xe0>
    2978:	00800074 	movhi	r2,1
    297c:	109dc717 	ldw	r2,30492(r2)
    2980:	98c00217 	ldw	r3,8(r19)
    2984:	8c23c83a 	sub	r17,r17,r16
    2988:	8c400054 	ori	r17,r17,1
    298c:	1421c83a 	sub	r16,r2,r16
    2990:	1c400115 	stw	r17,4(r3)
    2994:	00800074 	movhi	r2,1
    2998:	9009883a 	mov	r4,r18
    299c:	141dc715 	stw	r16,30492(r2)
    29a0:	0003de40 	call	3de4 <__malloc_unlock>
    29a4:	00800044 	movi	r2,1
    29a8:	003fe706 	br	2948 <_malloc_trim_r+0x7c>
    29ac:	000b883a 	mov	r5,zero
    29b0:	9009883a 	mov	r4,r18
    29b4:	00020680 	call	2068 <_sbrk_r>
    29b8:	99000217 	ldw	r4,8(r19)
    29bc:	1107c83a 	sub	r3,r2,r4
    29c0:	19400410 	cmplti	r5,r3,16
    29c4:	283fdd1e 	bne	r5,zero,293c <_malloc_trim_r+0x70>
    29c8:	01400074 	movhi	r5,1
    29cc:	2945fa17 	ldw	r5,6120(r5)
    29d0:	18c00054 	ori	r3,r3,1
    29d4:	20c00115 	stw	r3,4(r4)
    29d8:	1145c83a 	sub	r2,r2,r5
    29dc:	01400074 	movhi	r5,1
    29e0:	289dc715 	stw	r2,30492(r5)
    29e4:	003fd506 	br	293c <_malloc_trim_r+0x70>

000029e8 <_free_r>:
    29e8:	28004f26 	beq	r5,zero,2b28 <_free_r+0x140>
    29ec:	defffd04 	addi	sp,sp,-12
    29f0:	dc400115 	stw	r17,4(sp)
    29f4:	dc000015 	stw	r16,0(sp)
    29f8:	2023883a 	mov	r17,r4
    29fc:	2821883a 	mov	r16,r5
    2a00:	dfc00215 	stw	ra,8(sp)
    2a04:	0003cbc0 	call	3cbc <__malloc_lock>
    2a08:	81ffff17 	ldw	r7,-4(r16)
    2a0c:	00bfff84 	movi	r2,-2
    2a10:	80fffe04 	addi	r3,r16,-8
    2a14:	3884703a 	and	r2,r7,r2
    2a18:	01000074 	movhi	r4,1
    2a1c:	188d883a 	add	r6,r3,r2
    2a20:	213fae04 	addi	r4,r4,-328
    2a24:	31400117 	ldw	r5,4(r6)
    2a28:	22000217 	ldw	r8,8(r4)
    2a2c:	027fff04 	movi	r9,-4
    2a30:	2a4a703a 	and	r5,r5,r9
    2a34:	41806426 	beq	r8,r6,2bc8 <_free_r+0x1e0>
    2a38:	31400115 	stw	r5,4(r6)
    2a3c:	39c0004c 	andi	r7,r7,1
    2a40:	3151883a 	add	r8,r6,r5
    2a44:	3800281e 	bne	r7,zero,2ae8 <_free_r+0x100>
    2a48:	82bffe17 	ldw	r10,-8(r16)
    2a4c:	42000117 	ldw	r8,4(r8)
    2a50:	01c00074 	movhi	r7,1
    2a54:	1a87c83a 	sub	r3,r3,r10
    2a58:	1a400217 	ldw	r9,8(r3)
    2a5c:	39ffb004 	addi	r7,r7,-320
    2a60:	1285883a 	add	r2,r2,r10
    2a64:	4200004c 	andi	r8,r8,1
    2a68:	49c04c26 	beq	r9,r7,2b9c <_free_r+0x1b4>
    2a6c:	1a800317 	ldw	r10,12(r3)
    2a70:	4a800315 	stw	r10,12(r9)
    2a74:	52400215 	stw	r9,8(r10)
    2a78:	40007126 	beq	r8,zero,2c40 <_free_r+0x258>
    2a7c:	11400054 	ori	r5,r2,1
    2a80:	19400115 	stw	r5,4(r3)
    2a84:	30800015 	stw	r2,0(r6)
    2a88:	11408028 	cmpgeui	r5,r2,512
    2a8c:	28002c1e 	bne	r5,zero,2b40 <_free_r+0x158>
    2a90:	100ad0fa 	srli	r5,r2,3
    2a94:	100cd17a 	srli	r6,r2,5
    2a98:	00800044 	movi	r2,1
    2a9c:	29400044 	addi	r5,r5,1
    2aa0:	280a90fa 	slli	r5,r5,3
    2aa4:	21c00117 	ldw	r7,4(r4)
    2aa8:	1184983a 	sll	r2,r2,r6
    2aac:	214b883a 	add	r5,r4,r5
    2ab0:	29800017 	ldw	r6,0(r5)
    2ab4:	11c4b03a 	or	r2,r2,r7
    2ab8:	29fffe04 	addi	r7,r5,-8
    2abc:	19c00315 	stw	r7,12(r3)
    2ac0:	19800215 	stw	r6,8(r3)
    2ac4:	20800115 	stw	r2,4(r4)
    2ac8:	28c00015 	stw	r3,0(r5)
    2acc:	30c00315 	stw	r3,12(r6)
    2ad0:	8809883a 	mov	r4,r17
    2ad4:	dfc00217 	ldw	ra,8(sp)
    2ad8:	dc400117 	ldw	r17,4(sp)
    2adc:	dc000017 	ldw	r16,0(sp)
    2ae0:	dec00304 	addi	sp,sp,12
    2ae4:	0003de41 	jmpi	3de4 <__malloc_unlock>
    2ae8:	41c00117 	ldw	r7,4(r8)
    2aec:	39c0004c 	andi	r7,r7,1
    2af0:	38000e1e 	bne	r7,zero,2b2c <_free_r+0x144>
    2af4:	01c00074 	movhi	r7,1
    2af8:	1145883a 	add	r2,r2,r5
    2afc:	39ffb004 	addi	r7,r7,-320
    2b00:	31400217 	ldw	r5,8(r6)
    2b04:	12400054 	ori	r9,r2,1
    2b08:	1891883a 	add	r8,r3,r2
    2b0c:	29c05226 	beq	r5,r7,2c58 <_free_r+0x270>
    2b10:	31800317 	ldw	r6,12(r6)
    2b14:	29800315 	stw	r6,12(r5)
    2b18:	31400215 	stw	r5,8(r6)
    2b1c:	1a400115 	stw	r9,4(r3)
    2b20:	40800015 	stw	r2,0(r8)
    2b24:	003fd806 	br	2a88 <_free_r+0xa0>
    2b28:	f800283a 	ret
    2b2c:	11400054 	ori	r5,r2,1
    2b30:	817fff15 	stw	r5,-4(r16)
    2b34:	30800015 	stw	r2,0(r6)
    2b38:	11408028 	cmpgeui	r5,r2,512
    2b3c:	283fd426 	beq	r5,zero,2a90 <_free_r+0xa8>
    2b40:	100ad27a 	srli	r5,r2,9
    2b44:	29800168 	cmpgeui	r6,r5,5
    2b48:	3000341e 	bne	r6,zero,2c1c <_free_r+0x234>
    2b4c:	100ad1ba 	srli	r5,r2,6
    2b50:	29800e44 	addi	r6,r5,57
    2b54:	300c90fa 	slli	r6,r6,3
    2b58:	29c00e04 	addi	r7,r5,56
    2b5c:	218d883a 	add	r6,r4,r6
    2b60:	31400017 	ldw	r5,0(r6)
    2b64:	31bffe04 	addi	r6,r6,-8
    2b68:	31404226 	beq	r6,r5,2c74 <_free_r+0x28c>
    2b6c:	01ffff04 	movi	r7,-4
    2b70:	29000117 	ldw	r4,4(r5)
    2b74:	21c8703a 	and	r4,r4,r7
    2b78:	1100022e 	bgeu	r2,r4,2b84 <_free_r+0x19c>
    2b7c:	29400217 	ldw	r5,8(r5)
    2b80:	317ffb1e 	bne	r6,r5,2b70 <_free_r+0x188>
    2b84:	29800317 	ldw	r6,12(r5)
    2b88:	19800315 	stw	r6,12(r3)
    2b8c:	19400215 	stw	r5,8(r3)
    2b90:	30c00215 	stw	r3,8(r6)
    2b94:	28c00315 	stw	r3,12(r5)
    2b98:	003fcd06 	br	2ad0 <_free_r+0xe8>
    2b9c:	40004d1e 	bne	r8,zero,2cd4 <_free_r+0x2ec>
    2ba0:	31000317 	ldw	r4,12(r6)
    2ba4:	31800217 	ldw	r6,8(r6)
    2ba8:	2885883a 	add	r2,r5,r2
    2bac:	11400054 	ori	r5,r2,1
    2bb0:	31000315 	stw	r4,12(r6)
    2bb4:	21800215 	stw	r6,8(r4)
    2bb8:	19400115 	stw	r5,4(r3)
    2bbc:	1887883a 	add	r3,r3,r2
    2bc0:	18800015 	stw	r2,0(r3)
    2bc4:	003fc206 	br	2ad0 <_free_r+0xe8>
    2bc8:	39c0004c 	andi	r7,r7,1
    2bcc:	1145883a 	add	r2,r2,r5
    2bd0:	3800071e 	bne	r7,zero,2bf0 <_free_r+0x208>
    2bd4:	81fffe17 	ldw	r7,-8(r16)
    2bd8:	19c7c83a 	sub	r3,r3,r7
    2bdc:	19400317 	ldw	r5,12(r3)
    2be0:	19800217 	ldw	r6,8(r3)
    2be4:	11c5883a 	add	r2,r2,r7
    2be8:	31400315 	stw	r5,12(r6)
    2bec:	29800215 	stw	r6,8(r5)
    2bf0:	01400074 	movhi	r5,1
    2bf4:	11800054 	ori	r6,r2,1
    2bf8:	2945fb17 	ldw	r5,6124(r5)
    2bfc:	19800115 	stw	r6,4(r3)
    2c00:	20c00215 	stw	r3,8(r4)
    2c04:	117fb236 	bltu	r2,r5,2ad0 <_free_r+0xe8>
    2c08:	00800074 	movhi	r2,1
    2c0c:	114da717 	ldw	r5,13980(r2)
    2c10:	8809883a 	mov	r4,r17
    2c14:	00028cc0 	call	28cc <_malloc_trim_r>
    2c18:	003fad06 	br	2ad0 <_free_r+0xe8>
    2c1c:	29800568 	cmpgeui	r6,r5,21
    2c20:	30000926 	beq	r6,zero,2c48 <_free_r+0x260>
    2c24:	29801568 	cmpgeui	r6,r5,85
    2c28:	3000191e 	bne	r6,zero,2c90 <_free_r+0x2a8>
    2c2c:	100ad33a 	srli	r5,r2,12
    2c30:	29801bc4 	addi	r6,r5,111
    2c34:	300c90fa 	slli	r6,r6,3
    2c38:	29c01b84 	addi	r7,r5,110
    2c3c:	003fc706 	br	2b5c <_free_r+0x174>
    2c40:	1145883a 	add	r2,r2,r5
    2c44:	003fae06 	br	2b00 <_free_r+0x118>
    2c48:	29801704 	addi	r6,r5,92
    2c4c:	300c90fa 	slli	r6,r6,3
    2c50:	29c016c4 	addi	r7,r5,91
    2c54:	003fc106 	br	2b5c <_free_r+0x174>
    2c58:	20c00515 	stw	r3,20(r4)
    2c5c:	20c00415 	stw	r3,16(r4)
    2c60:	19c00315 	stw	r7,12(r3)
    2c64:	19c00215 	stw	r7,8(r3)
    2c68:	1a400115 	stw	r9,4(r3)
    2c6c:	40800015 	stw	r2,0(r8)
    2c70:	003f9706 	br	2ad0 <_free_r+0xe8>
    2c74:	380fd0ba 	srai	r7,r7,2
    2c78:	00800044 	movi	r2,1
    2c7c:	22000117 	ldw	r8,4(r4)
    2c80:	11ce983a 	sll	r7,r2,r7
    2c84:	3a0eb03a 	or	r7,r7,r8
    2c88:	21c00115 	stw	r7,4(r4)
    2c8c:	003fbe06 	br	2b88 <_free_r+0x1a0>
    2c90:	29805568 	cmpgeui	r6,r5,341
    2c94:	3000051e 	bne	r6,zero,2cac <_free_r+0x2c4>
    2c98:	100ad3fa 	srli	r5,r2,15
    2c9c:	29801e04 	addi	r6,r5,120
    2ca0:	300c90fa 	slli	r6,r6,3
    2ca4:	29c01dc4 	addi	r7,r5,119
    2ca8:	003fac06 	br	2b5c <_free_r+0x174>
    2cac:	29415568 	cmpgeui	r5,r5,1365
    2cb0:	2800051e 	bne	r5,zero,2cc8 <_free_r+0x2e0>
    2cb4:	100ad4ba 	srli	r5,r2,18
    2cb8:	29801f44 	addi	r6,r5,125
    2cbc:	300c90fa 	slli	r6,r6,3
    2cc0:	29c01f04 	addi	r7,r5,124
    2cc4:	003fa506 	br	2b5c <_free_r+0x174>
    2cc8:	0180fe04 	movi	r6,1016
    2ccc:	01c01f84 	movi	r7,126
    2cd0:	003fa206 	br	2b5c <_free_r+0x174>
    2cd4:	11000054 	ori	r4,r2,1
    2cd8:	19000115 	stw	r4,4(r3)
    2cdc:	30800015 	stw	r2,0(r6)
    2ce0:	003f7b06 	br	2ad0 <_free_r+0xe8>

00002ce4 <_lseek_r>:
    2ce4:	2807883a 	mov	r3,r5
    2ce8:	defffe04 	addi	sp,sp,-8
    2cec:	dc000015 	stw	r16,0(sp)
    2cf0:	300b883a 	mov	r5,r6
    2cf4:	00800074 	movhi	r2,1
    2cf8:	380d883a 	mov	r6,r7
    2cfc:	2021883a 	mov	r16,r4
    2d00:	1809883a 	mov	r4,r3
    2d04:	dfc00115 	stw	ra,4(sp)
    2d08:	100da815 	stw	zero,13984(r2)
    2d0c:	000368c0 	call	368c <lseek>
    2d10:	10ffffd8 	cmpnei	r3,r2,-1
    2d14:	18000426 	beq	r3,zero,2d28 <_lseek_r+0x44>
    2d18:	dfc00117 	ldw	ra,4(sp)
    2d1c:	dc000017 	ldw	r16,0(sp)
    2d20:	dec00204 	addi	sp,sp,8
    2d24:	f800283a 	ret
    2d28:	00c00074 	movhi	r3,1
    2d2c:	18cda817 	ldw	r3,13984(r3)
    2d30:	183ff926 	beq	r3,zero,2d18 <_lseek_r+0x34>
    2d34:	80c00015 	stw	r3,0(r16)
    2d38:	dfc00117 	ldw	ra,4(sp)
    2d3c:	dc000017 	ldw	r16,0(sp)
    2d40:	dec00204 	addi	sp,sp,8
    2d44:	f800283a 	ret

00002d48 <__smakebuf_r>:
    2d48:	2880030b 	ldhu	r2,12(r5)
    2d4c:	deffe804 	addi	sp,sp,-96
    2d50:	dc001215 	stw	r16,72(sp)
    2d54:	dfc01715 	stw	ra,92(sp)
    2d58:	dd001615 	stw	r20,88(sp)
    2d5c:	dcc01515 	stw	r19,84(sp)
    2d60:	dc801415 	stw	r18,80(sp)
    2d64:	dc401315 	stw	r17,76(sp)
    2d68:	10c0008c 	andi	r3,r2,2
    2d6c:	2821883a 	mov	r16,r5
    2d70:	18000d26 	beq	r3,zero,2da8 <__smakebuf_r+0x60>
    2d74:	288010c4 	addi	r2,r5,67
    2d78:	28800015 	stw	r2,0(r5)
    2d7c:	28800415 	stw	r2,16(r5)
    2d80:	00800044 	movi	r2,1
    2d84:	28800515 	stw	r2,20(r5)
    2d88:	dfc01717 	ldw	ra,92(sp)
    2d8c:	dd001617 	ldw	r20,88(sp)
    2d90:	dcc01517 	ldw	r19,84(sp)
    2d94:	dc801417 	ldw	r18,80(sp)
    2d98:	dc401317 	ldw	r17,76(sp)
    2d9c:	dc001217 	ldw	r16,72(sp)
    2da0:	dec01804 	addi	sp,sp,96
    2da4:	f800283a 	ret
    2da8:	2940038f 	ldh	r5,14(r5)
    2dac:	2023883a 	mov	r17,r4
    2db0:	28002816 	blt	r5,zero,2e54 <__smakebuf_r+0x10c>
    2db4:	d80d883a 	mov	r6,sp
    2db8:	0002ff40 	call	2ff4 <_fstat_r>
    2dbc:	10002416 	blt	r2,zero,2e50 <__smakebuf_r+0x108>
    2dc0:	d8800117 	ldw	r2,4(sp)
    2dc4:	10bc000c 	andi	r2,r2,61440
    2dc8:	10880018 	cmpnei	r2,r2,8192
    2dcc:	1000461e 	bne	r2,zero,2ee8 <__smakebuf_r+0x1a0>
    2dd0:	8140038f 	ldh	r5,14(r16)
    2dd4:	8809883a 	mov	r4,r17
    2dd8:	00030540 	call	3054 <_isatty_r>
    2ddc:	10003e26 	beq	r2,zero,2ed8 <__smakebuf_r+0x190>
    2de0:	8080030b 	ldhu	r2,12(r16)
    2de4:	80c010c4 	addi	r3,r16,67
    2de8:	80c00015 	stw	r3,0(r16)
    2dec:	10800054 	ori	r2,r2,1
    2df0:	8080030d 	sth	r2,12(r16)
    2df4:	00800044 	movi	r2,1
    2df8:	80c00415 	stw	r3,16(r16)
    2dfc:	80800515 	stw	r2,20(r16)
    2e00:	04c00044 	movi	r19,1
    2e04:	05010004 	movi	r20,1024
    2e08:	04820004 	movi	r18,2048
    2e0c:	a00b883a 	mov	r5,r20
    2e10:	8809883a 	mov	r4,r17
    2e14:	0000f380 	call	f38 <_malloc_r>
    2e18:	10001726 	beq	r2,zero,2e78 <__smakebuf_r+0x130>
    2e1c:	80c0030b 	ldhu	r3,12(r16)
    2e20:	01000034 	movhi	r4,0
    2e24:	21016b04 	addi	r4,r4,1452
    2e28:	89000f15 	stw	r4,60(r17)
    2e2c:	18c02014 	ori	r3,r3,128
    2e30:	80c0030d 	sth	r3,12(r16)
    2e34:	80800015 	stw	r2,0(r16)
    2e38:	80800415 	stw	r2,16(r16)
    2e3c:	85000515 	stw	r20,20(r16)
    2e40:	98001d1e 	bne	r19,zero,2eb8 <__smakebuf_r+0x170>
    2e44:	90c6b03a 	or	r3,r18,r3
    2e48:	80c0030d 	sth	r3,12(r16)
    2e4c:	003fce06 	br	2d88 <__smakebuf_r+0x40>
    2e50:	8080030b 	ldhu	r2,12(r16)
    2e54:	1080200c 	andi	r2,r2,128
    2e58:	0027883a 	mov	r19,zero
    2e5c:	10001326 	beq	r2,zero,2eac <__smakebuf_r+0x164>
    2e60:	05001004 	movi	r20,64
    2e64:	a00b883a 	mov	r5,r20
    2e68:	8809883a 	mov	r4,r17
    2e6c:	0025883a 	mov	r18,zero
    2e70:	0000f380 	call	f38 <_malloc_r>
    2e74:	103fe91e 	bne	r2,zero,2e1c <__smakebuf_r+0xd4>
    2e78:	8080030b 	ldhu	r2,12(r16)
    2e7c:	10c0800c 	andi	r3,r2,512
    2e80:	183fc11e 	bne	r3,zero,2d88 <__smakebuf_r+0x40>
    2e84:	00ffff04 	movi	r3,-4
    2e88:	10c4703a 	and	r2,r2,r3
    2e8c:	10800094 	ori	r2,r2,2
    2e90:	80c010c4 	addi	r3,r16,67
    2e94:	8080030d 	sth	r2,12(r16)
    2e98:	00800044 	movi	r2,1
    2e9c:	80c00015 	stw	r3,0(r16)
    2ea0:	80c00415 	stw	r3,16(r16)
    2ea4:	80800515 	stw	r2,20(r16)
    2ea8:	003fb706 	br	2d88 <__smakebuf_r+0x40>
    2eac:	05010004 	movi	r20,1024
    2eb0:	0025883a 	mov	r18,zero
    2eb4:	003fd506 	br	2e0c <__smakebuf_r+0xc4>
    2eb8:	8140038f 	ldh	r5,14(r16)
    2ebc:	8809883a 	mov	r4,r17
    2ec0:	00030540 	call	3054 <_isatty_r>
    2ec4:	80c0030b 	ldhu	r3,12(r16)
    2ec8:	103fde26 	beq	r2,zero,2e44 <__smakebuf_r+0xfc>
    2ecc:	18ffff0c 	andi	r3,r3,65532
    2ed0:	18c00054 	ori	r3,r3,1
    2ed4:	003fdb06 	br	2e44 <__smakebuf_r+0xfc>
    2ed8:	04c00044 	movi	r19,1
    2edc:	05010004 	movi	r20,1024
    2ee0:	04820004 	movi	r18,2048
    2ee4:	003fc906 	br	2e0c <__smakebuf_r+0xc4>
    2ee8:	0027883a 	mov	r19,zero
    2eec:	05010004 	movi	r20,1024
    2ef0:	04820004 	movi	r18,2048
    2ef4:	003fc506 	br	2e0c <__smakebuf_r+0xc4>

00002ef8 <__swhatbuf_r>:
    2ef8:	deffea04 	addi	sp,sp,-88
    2efc:	dc001215 	stw	r16,72(sp)
    2f00:	2821883a 	mov	r16,r5
    2f04:	2940038f 	ldh	r5,14(r5)
    2f08:	dc801415 	stw	r18,80(sp)
    2f0c:	dc401315 	stw	r17,76(sp)
    2f10:	dfc01515 	stw	ra,84(sp)
    2f14:	3023883a 	mov	r17,r6
    2f18:	3825883a 	mov	r18,r7
    2f1c:	28001016 	blt	r5,zero,2f60 <__swhatbuf_r+0x68>
    2f20:	d80d883a 	mov	r6,sp
    2f24:	0002ff40 	call	2ff4 <_fstat_r>
    2f28:	10000d16 	blt	r2,zero,2f60 <__swhatbuf_r+0x68>
    2f2c:	d8c00117 	ldw	r3,4(sp)
    2f30:	00820004 	movi	r2,2048
    2f34:	18fc000c 	andi	r3,r3,61440
    2f38:	18c80020 	cmpeqi	r3,r3,8192
    2f3c:	90c00015 	stw	r3,0(r18)
    2f40:	00c10004 	movi	r3,1024
    2f44:	88c00015 	stw	r3,0(r17)
    2f48:	dfc01517 	ldw	ra,84(sp)
    2f4c:	dc801417 	ldw	r18,80(sp)
    2f50:	dc401317 	ldw	r17,76(sp)
    2f54:	dc001217 	ldw	r16,72(sp)
    2f58:	dec01604 	addi	sp,sp,88
    2f5c:	f800283a 	ret
    2f60:	8080030b 	ldhu	r2,12(r16)
    2f64:	90000015 	stw	zero,0(r18)
    2f68:	1080200c 	andi	r2,r2,128
    2f6c:	10000426 	beq	r2,zero,2f80 <__swhatbuf_r+0x88>
    2f70:	00801004 	movi	r2,64
    2f74:	88800015 	stw	r2,0(r17)
    2f78:	0005883a 	mov	r2,zero
    2f7c:	003ff206 	br	2f48 <__swhatbuf_r+0x50>
    2f80:	00810004 	movi	r2,1024
    2f84:	88800015 	stw	r2,0(r17)
    2f88:	0005883a 	mov	r2,zero
    2f8c:	003fee06 	br	2f48 <__swhatbuf_r+0x50>

00002f90 <_read_r>:
    2f90:	2807883a 	mov	r3,r5
    2f94:	defffe04 	addi	sp,sp,-8
    2f98:	dc000015 	stw	r16,0(sp)
    2f9c:	300b883a 	mov	r5,r6
    2fa0:	00800074 	movhi	r2,1
    2fa4:	380d883a 	mov	r6,r7
    2fa8:	2021883a 	mov	r16,r4
    2fac:	1809883a 	mov	r4,r3
    2fb0:	dfc00115 	stw	ra,4(sp)
    2fb4:	100da815 	stw	zero,13984(r2)
    2fb8:	000385c0 	call	385c <read>
    2fbc:	10ffffd8 	cmpnei	r3,r2,-1
    2fc0:	18000426 	beq	r3,zero,2fd4 <_read_r+0x44>
    2fc4:	dfc00117 	ldw	ra,4(sp)
    2fc8:	dc000017 	ldw	r16,0(sp)
    2fcc:	dec00204 	addi	sp,sp,8
    2fd0:	f800283a 	ret
    2fd4:	00c00074 	movhi	r3,1
    2fd8:	18cda817 	ldw	r3,13984(r3)
    2fdc:	183ff926 	beq	r3,zero,2fc4 <_read_r+0x34>
    2fe0:	80c00015 	stw	r3,0(r16)
    2fe4:	dfc00117 	ldw	ra,4(sp)
    2fe8:	dc000017 	ldw	r16,0(sp)
    2fec:	dec00204 	addi	sp,sp,8
    2ff0:	f800283a 	ret

00002ff4 <_fstat_r>:
    2ff4:	2807883a 	mov	r3,r5
    2ff8:	defffe04 	addi	sp,sp,-8
    2ffc:	dc000015 	stw	r16,0(sp)
    3000:	00800074 	movhi	r2,1
    3004:	300b883a 	mov	r5,r6
    3008:	2021883a 	mov	r16,r4
    300c:	1809883a 	mov	r4,r3
    3010:	dfc00115 	stw	ra,4(sp)
    3014:	100da815 	stw	zero,13984(r2)
    3018:	00033d40 	call	33d4 <fstat>
    301c:	10ffffd8 	cmpnei	r3,r2,-1
    3020:	18000426 	beq	r3,zero,3034 <_fstat_r+0x40>
    3024:	dfc00117 	ldw	ra,4(sp)
    3028:	dc000017 	ldw	r16,0(sp)
    302c:	dec00204 	addi	sp,sp,8
    3030:	f800283a 	ret
    3034:	00c00074 	movhi	r3,1
    3038:	18cda817 	ldw	r3,13984(r3)
    303c:	183ff926 	beq	r3,zero,3024 <_fstat_r+0x30>
    3040:	80c00015 	stw	r3,0(r16)
    3044:	dfc00117 	ldw	ra,4(sp)
    3048:	dc000017 	ldw	r16,0(sp)
    304c:	dec00204 	addi	sp,sp,8
    3050:	f800283a 	ret

00003054 <_isatty_r>:
    3054:	defffe04 	addi	sp,sp,-8
    3058:	dc000015 	stw	r16,0(sp)
    305c:	00800074 	movhi	r2,1
    3060:	2021883a 	mov	r16,r4
    3064:	2809883a 	mov	r4,r5
    3068:	dfc00115 	stw	ra,4(sp)
    306c:	100da815 	stw	zero,13984(r2)
    3070:	00034c00 	call	34c0 <isatty>
    3074:	10ffffd8 	cmpnei	r3,r2,-1
    3078:	18000426 	beq	r3,zero,308c <_isatty_r+0x38>
    307c:	dfc00117 	ldw	ra,4(sp)
    3080:	dc000017 	ldw	r16,0(sp)
    3084:	dec00204 	addi	sp,sp,8
    3088:	f800283a 	ret
    308c:	00c00074 	movhi	r3,1
    3090:	18cda817 	ldw	r3,13984(r3)
    3094:	183ff926 	beq	r3,zero,307c <_isatty_r+0x28>
    3098:	80c00015 	stw	r3,0(r16)
    309c:	dfc00117 	ldw	ra,4(sp)
    30a0:	dc000017 	ldw	r16,0(sp)
    30a4:	dec00204 	addi	sp,sp,8
    30a8:	f800283a 	ret

000030ac <__divsi3>:
    30ac:	20001a16 	blt	r4,zero,3118 <__divsi3+0x6c>
    30b0:	000f883a 	mov	r7,zero
    30b4:	2800020e 	bge	r5,zero,30c0 <__divsi3+0x14>
    30b8:	014bc83a 	sub	r5,zero,r5
    30bc:	39c0005c 	xori	r7,r7,1
    30c0:	200d883a 	mov	r6,r4
    30c4:	00c00044 	movi	r3,1
    30c8:	2900092e 	bgeu	r5,r4,30f0 <__divsi3+0x44>
    30cc:	00800804 	movi	r2,32
    30d0:	00c00044 	movi	r3,1
    30d4:	00000106 	br	30dc <__divsi3+0x30>
    30d8:	10001226 	beq	r2,zero,3124 <__divsi3+0x78>
    30dc:	294b883a 	add	r5,r5,r5
    30e0:	10bfffc4 	addi	r2,r2,-1
    30e4:	18c7883a 	add	r3,r3,r3
    30e8:	293ffb36 	bltu	r5,r4,30d8 <__divsi3+0x2c>
    30ec:	18000d26 	beq	r3,zero,3124 <__divsi3+0x78>
    30f0:	0005883a 	mov	r2,zero
    30f4:	31400236 	bltu	r6,r5,3100 <__divsi3+0x54>
    30f8:	314dc83a 	sub	r6,r6,r5
    30fc:	10c4b03a 	or	r2,r2,r3
    3100:	1806d07a 	srli	r3,r3,1
    3104:	280ad07a 	srli	r5,r5,1
    3108:	183ffa1e 	bne	r3,zero,30f4 <__divsi3+0x48>
    310c:	38000126 	beq	r7,zero,3114 <__divsi3+0x68>
    3110:	0085c83a 	sub	r2,zero,r2
    3114:	f800283a 	ret
    3118:	0109c83a 	sub	r4,zero,r4
    311c:	01c00044 	movi	r7,1
    3120:	003fe406 	br	30b4 <__divsi3+0x8>
    3124:	0005883a 	mov	r2,zero
    3128:	003ff806 	br	310c <__divsi3+0x60>

0000312c <__modsi3>:
    312c:	20001916 	blt	r4,zero,3194 <__modsi3+0x68>
    3130:	000f883a 	mov	r7,zero
    3134:	2005883a 	mov	r2,r4
    3138:	2800010e 	bge	r5,zero,3140 <__modsi3+0x14>
    313c:	014bc83a 	sub	r5,zero,r5
    3140:	00c00044 	movi	r3,1
    3144:	2900092e 	bgeu	r5,r4,316c <__modsi3+0x40>
    3148:	01800804 	movi	r6,32
    314c:	00c00044 	movi	r3,1
    3150:	00000106 	br	3158 <__modsi3+0x2c>
    3154:	30000d26 	beq	r6,zero,318c <__modsi3+0x60>
    3158:	294b883a 	add	r5,r5,r5
    315c:	31bfffc4 	addi	r6,r6,-1
    3160:	18c7883a 	add	r3,r3,r3
    3164:	293ffb36 	bltu	r5,r4,3154 <__modsi3+0x28>
    3168:	18000826 	beq	r3,zero,318c <__modsi3+0x60>
    316c:	1806d07a 	srli	r3,r3,1
    3170:	11400136 	bltu	r2,r5,3178 <__modsi3+0x4c>
    3174:	1145c83a 	sub	r2,r2,r5
    3178:	280ad07a 	srli	r5,r5,1
    317c:	183ffb1e 	bne	r3,zero,316c <__modsi3+0x40>
    3180:	38000126 	beq	r7,zero,3188 <__modsi3+0x5c>
    3184:	0085c83a 	sub	r2,zero,r2
    3188:	f800283a 	ret
    318c:	2005883a 	mov	r2,r4
    3190:	003ffb06 	br	3180 <__modsi3+0x54>
    3194:	0109c83a 	sub	r4,zero,r4
    3198:	01c00044 	movi	r7,1
    319c:	003fe506 	br	3134 <__modsi3+0x8>

000031a0 <__udivsi3>:
    31a0:	200d883a 	mov	r6,r4
    31a4:	2900152e 	bgeu	r5,r4,31fc <__udivsi3+0x5c>
    31a8:	28001416 	blt	r5,zero,31fc <__udivsi3+0x5c>
    31ac:	00800804 	movi	r2,32
    31b0:	00c00044 	movi	r3,1
    31b4:	00000206 	br	31c0 <__udivsi3+0x20>
    31b8:	10000e26 	beq	r2,zero,31f4 <__udivsi3+0x54>
    31bc:	28000516 	blt	r5,zero,31d4 <__udivsi3+0x34>
    31c0:	294b883a 	add	r5,r5,r5
    31c4:	10bfffc4 	addi	r2,r2,-1
    31c8:	18c7883a 	add	r3,r3,r3
    31cc:	293ffa36 	bltu	r5,r4,31b8 <__udivsi3+0x18>
    31d0:	18000826 	beq	r3,zero,31f4 <__udivsi3+0x54>
    31d4:	0005883a 	mov	r2,zero
    31d8:	31400236 	bltu	r6,r5,31e4 <__udivsi3+0x44>
    31dc:	314dc83a 	sub	r6,r6,r5
    31e0:	10c4b03a 	or	r2,r2,r3
    31e4:	1806d07a 	srli	r3,r3,1
    31e8:	280ad07a 	srli	r5,r5,1
    31ec:	183ffa1e 	bne	r3,zero,31d8 <__udivsi3+0x38>
    31f0:	f800283a 	ret
    31f4:	0005883a 	mov	r2,zero
    31f8:	f800283a 	ret
    31fc:	00c00044 	movi	r3,1
    3200:	003ff406 	br	31d4 <__udivsi3+0x34>

00003204 <__umodsi3>:
    3204:	2005883a 	mov	r2,r4
    3208:	2900132e 	bgeu	r5,r4,3258 <__umodsi3+0x54>
    320c:	28001216 	blt	r5,zero,3258 <__umodsi3+0x54>
    3210:	01800804 	movi	r6,32
    3214:	00c00044 	movi	r3,1
    3218:	00000206 	br	3224 <__umodsi3+0x20>
    321c:	30000c26 	beq	r6,zero,3250 <__umodsi3+0x4c>
    3220:	28000516 	blt	r5,zero,3238 <__umodsi3+0x34>
    3224:	294b883a 	add	r5,r5,r5
    3228:	31bfffc4 	addi	r6,r6,-1
    322c:	18c7883a 	add	r3,r3,r3
    3230:	293ffa36 	bltu	r5,r4,321c <__umodsi3+0x18>
    3234:	18000626 	beq	r3,zero,3250 <__umodsi3+0x4c>
    3238:	1806d07a 	srli	r3,r3,1
    323c:	11400136 	bltu	r2,r5,3244 <__umodsi3+0x40>
    3240:	1145c83a 	sub	r2,r2,r5
    3244:	280ad07a 	srli	r5,r5,1
    3248:	183ffb1e 	bne	r3,zero,3238 <__umodsi3+0x34>
    324c:	f800283a 	ret
    3250:	2005883a 	mov	r2,r4
    3254:	f800283a 	ret
    3258:	00c00044 	movi	r3,1
    325c:	003ff606 	br	3238 <__umodsi3+0x34>

00003260 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    3260:	defffe04 	addi	sp,sp,-8
    3264:	dfc00115 	stw	ra,4(sp)
    3268:	df000015 	stw	fp,0(sp)
    326c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    3270:	d0a00917 	ldw	r2,-32732(gp)
    3274:	10000326 	beq	r2,zero,3284 <alt_get_errno+0x24>
    3278:	d0a00917 	ldw	r2,-32732(gp)
    327c:	103ee83a 	callr	r2
    3280:	00000106 	br	3288 <alt_get_errno+0x28>
    3284:	d0a7b004 	addi	r2,gp,-24896
}
    3288:	e037883a 	mov	sp,fp
    328c:	dfc00117 	ldw	ra,4(sp)
    3290:	df000017 	ldw	fp,0(sp)
    3294:	dec00204 	addi	sp,sp,8
    3298:	f800283a 	ret

0000329c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    329c:	defffb04 	addi	sp,sp,-20
    32a0:	dfc00415 	stw	ra,16(sp)
    32a4:	df000315 	stw	fp,12(sp)
    32a8:	df000304 	addi	fp,sp,12
    32ac:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    32b0:	e0bffd17 	ldw	r2,-12(fp)
    32b4:	10000616 	blt	r2,zero,32d0 <close+0x34>
    32b8:	e0bffd17 	ldw	r2,-12(fp)
    32bc:	10c00324 	muli	r3,r2,12
    32c0:	00800074 	movhi	r2,1
    32c4:	1080ba04 	addi	r2,r2,744
    32c8:	1885883a 	add	r2,r3,r2
    32cc:	00000106 	br	32d4 <close+0x38>
    32d0:	0005883a 	mov	r2,zero
    32d4:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
    32d8:	e0bfff17 	ldw	r2,-4(fp)
    32dc:	10001926 	beq	r2,zero,3344 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    32e0:	e0bfff17 	ldw	r2,-4(fp)
    32e4:	10800017 	ldw	r2,0(r2)
    32e8:	10800417 	ldw	r2,16(r2)
    32ec:	10000626 	beq	r2,zero,3308 <close+0x6c>
    32f0:	e0bfff17 	ldw	r2,-4(fp)
    32f4:	10800017 	ldw	r2,0(r2)
    32f8:	10800417 	ldw	r2,16(r2)
    32fc:	e13fff17 	ldw	r4,-4(fp)
    3300:	103ee83a 	callr	r2
    3304:	00000106 	br	330c <close+0x70>
    3308:	0005883a 	mov	r2,zero
    330c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    3310:	e13ffd17 	ldw	r4,-12(fp)
    3314:	00039580 	call	3958 <alt_release_fd>
    if (rval < 0)
    3318:	e0bffe17 	ldw	r2,-8(fp)
    331c:	1000070e 	bge	r2,zero,333c <close+0xa0>
    {
      ALT_ERRNO = -rval;
    3320:	00032600 	call	3260 <alt_get_errno>
    3324:	1007883a 	mov	r3,r2
    3328:	e0bffe17 	ldw	r2,-8(fp)
    332c:	0085c83a 	sub	r2,zero,r2
    3330:	18800015 	stw	r2,0(r3)
      return -1;
    3334:	00bfffc4 	movi	r2,-1
    3338:	00000706 	br	3358 <close+0xbc>
    }
    return 0;
    333c:	0005883a 	mov	r2,zero
    3340:	00000506 	br	3358 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    3344:	00032600 	call	3260 <alt_get_errno>
    3348:	1007883a 	mov	r3,r2
    334c:	00801444 	movi	r2,81
    3350:	18800015 	stw	r2,0(r3)
    return -1;
    3354:	00bfffc4 	movi	r2,-1
  }
}
    3358:	e037883a 	mov	sp,fp
    335c:	dfc00117 	ldw	ra,4(sp)
    3360:	df000017 	ldw	fp,0(sp)
    3364:	dec00204 	addi	sp,sp,8
    3368:	f800283a 	ret

0000336c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    336c:	defffc04 	addi	sp,sp,-16
    3370:	df000315 	stw	fp,12(sp)
    3374:	df000304 	addi	fp,sp,12
    3378:	e13fff15 	stw	r4,-4(fp)
    337c:	e17ffe15 	stw	r5,-8(fp)
    3380:	e1bffd15 	stw	r6,-12(fp)
  return len;
    3384:	e0bffd17 	ldw	r2,-12(fp)
}
    3388:	e037883a 	mov	sp,fp
    338c:	df000017 	ldw	fp,0(sp)
    3390:	dec00104 	addi	sp,sp,4
    3394:	f800283a 	ret

00003398 <alt_get_errno>:
{
    3398:	defffe04 	addi	sp,sp,-8
    339c:	dfc00115 	stw	ra,4(sp)
    33a0:	df000015 	stw	fp,0(sp)
    33a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    33a8:	d0a00917 	ldw	r2,-32732(gp)
    33ac:	10000326 	beq	r2,zero,33bc <alt_get_errno+0x24>
    33b0:	d0a00917 	ldw	r2,-32732(gp)
    33b4:	103ee83a 	callr	r2
    33b8:	00000106 	br	33c0 <alt_get_errno+0x28>
    33bc:	d0a7b004 	addi	r2,gp,-24896
}
    33c0:	e037883a 	mov	sp,fp
    33c4:	dfc00117 	ldw	ra,4(sp)
    33c8:	df000017 	ldw	fp,0(sp)
    33cc:	dec00204 	addi	sp,sp,8
    33d0:	f800283a 	ret

000033d4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    33d4:	defffb04 	addi	sp,sp,-20
    33d8:	dfc00415 	stw	ra,16(sp)
    33dc:	df000315 	stw	fp,12(sp)
    33e0:	df000304 	addi	fp,sp,12
    33e4:	e13ffe15 	stw	r4,-8(fp)
    33e8:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    33ec:	e0bffe17 	ldw	r2,-8(fp)
    33f0:	10000616 	blt	r2,zero,340c <fstat+0x38>
    33f4:	e0bffe17 	ldw	r2,-8(fp)
    33f8:	10c00324 	muli	r3,r2,12
    33fc:	00800074 	movhi	r2,1
    3400:	1080ba04 	addi	r2,r2,744
    3404:	1885883a 	add	r2,r3,r2
    3408:	00000106 	br	3410 <fstat+0x3c>
    340c:	0005883a 	mov	r2,zero
    3410:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
    3414:	e0bfff17 	ldw	r2,-4(fp)
    3418:	10001026 	beq	r2,zero,345c <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    341c:	e0bfff17 	ldw	r2,-4(fp)
    3420:	10800017 	ldw	r2,0(r2)
    3424:	10800817 	ldw	r2,32(r2)
    3428:	10000726 	beq	r2,zero,3448 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    342c:	e0bfff17 	ldw	r2,-4(fp)
    3430:	10800017 	ldw	r2,0(r2)
    3434:	10800817 	ldw	r2,32(r2)
    3438:	e17ffd17 	ldw	r5,-12(fp)
    343c:	e13fff17 	ldw	r4,-4(fp)
    3440:	103ee83a 	callr	r2
    3444:	00000a06 	br	3470 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    3448:	e0bffd17 	ldw	r2,-12(fp)
    344c:	00c80004 	movi	r3,8192
    3450:	10c00115 	stw	r3,4(r2)
      return 0;
    3454:	0005883a 	mov	r2,zero
    3458:	00000506 	br	3470 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    345c:	00033980 	call	3398 <alt_get_errno>
    3460:	1007883a 	mov	r3,r2
    3464:	00801444 	movi	r2,81
    3468:	18800015 	stw	r2,0(r3)
    return -1;
    346c:	00bfffc4 	movi	r2,-1
  }
}
    3470:	e037883a 	mov	sp,fp
    3474:	dfc00117 	ldw	ra,4(sp)
    3478:	df000017 	ldw	fp,0(sp)
    347c:	dec00204 	addi	sp,sp,8
    3480:	f800283a 	ret

00003484 <alt_get_errno>:
{
    3484:	defffe04 	addi	sp,sp,-8
    3488:	dfc00115 	stw	ra,4(sp)
    348c:	df000015 	stw	fp,0(sp)
    3490:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    3494:	d0a00917 	ldw	r2,-32732(gp)
    3498:	10000326 	beq	r2,zero,34a8 <alt_get_errno+0x24>
    349c:	d0a00917 	ldw	r2,-32732(gp)
    34a0:	103ee83a 	callr	r2
    34a4:	00000106 	br	34ac <alt_get_errno+0x28>
    34a8:	d0a7b004 	addi	r2,gp,-24896
}
    34ac:	e037883a 	mov	sp,fp
    34b0:	dfc00117 	ldw	ra,4(sp)
    34b4:	df000017 	ldw	fp,0(sp)
    34b8:	dec00204 	addi	sp,sp,8
    34bc:	f800283a 	ret

000034c0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    34c0:	deffea04 	addi	sp,sp,-88
    34c4:	dfc01515 	stw	ra,84(sp)
    34c8:	df001415 	stw	fp,80(sp)
    34cc:	df001404 	addi	fp,sp,80
    34d0:	e13fec15 	stw	r4,-80(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    34d4:	e0bfec17 	ldw	r2,-80(fp)
    34d8:	10000616 	blt	r2,zero,34f4 <isatty+0x34>
    34dc:	e0bfec17 	ldw	r2,-80(fp)
    34e0:	10c00324 	muli	r3,r2,12
    34e4:	00800074 	movhi	r2,1
    34e8:	1080ba04 	addi	r2,r2,744
    34ec:	1885883a 	add	r2,r3,r2
    34f0:	00000106 	br	34f8 <isatty+0x38>
    34f4:	0005883a 	mov	r2,zero
    34f8:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
    34fc:	e0bfff17 	ldw	r2,-4(fp)
    3500:	10000e26 	beq	r2,zero,353c <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    3504:	e0bfff17 	ldw	r2,-4(fp)
    3508:	10800017 	ldw	r2,0(r2)
    350c:	10800817 	ldw	r2,32(r2)
    3510:	1000021e 	bne	r2,zero,351c <isatty+0x5c>
    {
      return 1;
    3514:	00800044 	movi	r2,1
    3518:	00000d06 	br	3550 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    351c:	e0bfed04 	addi	r2,fp,-76
    3520:	100b883a 	mov	r5,r2
    3524:	e13fec17 	ldw	r4,-80(fp)
    3528:	00033d40 	call	33d4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    352c:	e0bfee17 	ldw	r2,-72(fp)
    3530:	10880020 	cmpeqi	r2,r2,8192
    3534:	10803fcc 	andi	r2,r2,255
    3538:	00000506 	br	3550 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    353c:	00034840 	call	3484 <alt_get_errno>
    3540:	1007883a 	mov	r3,r2
    3544:	00801444 	movi	r2,81
    3548:	18800015 	stw	r2,0(r3)
    return 0;
    354c:	0005883a 	mov	r2,zero
  }
}
    3550:	e037883a 	mov	sp,fp
    3554:	dfc00117 	ldw	ra,4(sp)
    3558:	df000017 	ldw	fp,0(sp)
    355c:	dec00204 	addi	sp,sp,8
    3560:	f800283a 	ret

00003564 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    3564:	defffc04 	addi	sp,sp,-16
    3568:	df000315 	stw	fp,12(sp)
    356c:	df000304 	addi	fp,sp,12
    3570:	e13fff15 	stw	r4,-4(fp)
    3574:	e17ffe15 	stw	r5,-8(fp)
    3578:	e1bffd15 	stw	r6,-12(fp)
  if (to != from)
    357c:	e0fffe17 	ldw	r3,-8(fp)
    3580:	e0bfff17 	ldw	r2,-4(fp)
    3584:	18800c26 	beq	r3,r2,35b8 <alt_load_section+0x54>
  {
    while( to != end )
    3588:	00000806 	br	35ac <alt_load_section+0x48>
    {
      *to++ = *from++;
    358c:	e0ffff17 	ldw	r3,-4(fp)
    3590:	18800104 	addi	r2,r3,4
    3594:	e0bfff15 	stw	r2,-4(fp)
    3598:	e0bffe17 	ldw	r2,-8(fp)
    359c:	11000104 	addi	r4,r2,4
    35a0:	e13ffe15 	stw	r4,-8(fp)
    35a4:	18c00017 	ldw	r3,0(r3)
    35a8:	10c00015 	stw	r3,0(r2)
    while( to != end )
    35ac:	e0fffe17 	ldw	r3,-8(fp)
    35b0:	e0bffd17 	ldw	r2,-12(fp)
    35b4:	18bff51e 	bne	r3,r2,358c <alt_load_section+0x28>
    }
  }
}
    35b8:	0001883a 	nop
    35bc:	e037883a 	mov	sp,fp
    35c0:	df000017 	ldw	fp,0(sp)
    35c4:	dec00104 	addi	sp,sp,4
    35c8:	f800283a 	ret

000035cc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    35cc:	defffe04 	addi	sp,sp,-8
    35d0:	dfc00115 	stw	ra,4(sp)
    35d4:	df000015 	stw	fp,0(sp)
    35d8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    35dc:	01800074 	movhi	r6,1
    35e0:	31862504 	addi	r6,r6,6292
    35e4:	01400074 	movhi	r5,1
    35e8:	297ea504 	addi	r5,r5,-1388
    35ec:	01000074 	movhi	r4,1
    35f0:	21062504 	addi	r4,r4,6292
    35f4:	00035640 	call	3564 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    35f8:	01800034 	movhi	r6,0
    35fc:	31808f04 	addi	r6,r6,572
    3600:	01400034 	movhi	r5,0
    3604:	29400804 	addi	r5,r5,32
    3608:	01000034 	movhi	r4,0
    360c:	21000804 	addi	r4,r4,32
    3610:	00035640 	call	3564 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    3614:	01800074 	movhi	r6,1
    3618:	31bea504 	addi	r6,r6,-1388
    361c:	01400074 	movhi	r5,1
    3620:	297d3b04 	addi	r5,r5,-2836
    3624:	01000074 	movhi	r4,1
    3628:	213d3b04 	addi	r4,r4,-2836
    362c:	00035640 	call	3564 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    3630:	000e2a00 	call	e2a0 <alt_dcache_flush_all>
  alt_icache_flush_all();
    3634:	000e4fc0 	call	e4fc <alt_icache_flush_all>
}
    3638:	0001883a 	nop
    363c:	e037883a 	mov	sp,fp
    3640:	dfc00117 	ldw	ra,4(sp)
    3644:	df000017 	ldw	fp,0(sp)
    3648:	dec00204 	addi	sp,sp,8
    364c:	f800283a 	ret

00003650 <alt_get_errno>:
{
    3650:	defffe04 	addi	sp,sp,-8
    3654:	dfc00115 	stw	ra,4(sp)
    3658:	df000015 	stw	fp,0(sp)
    365c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    3660:	d0a00917 	ldw	r2,-32732(gp)
    3664:	10000326 	beq	r2,zero,3674 <alt_get_errno+0x24>
    3668:	d0a00917 	ldw	r2,-32732(gp)
    366c:	103ee83a 	callr	r2
    3670:	00000106 	br	3678 <alt_get_errno+0x28>
    3674:	d0a7b004 	addi	r2,gp,-24896
}
    3678:	e037883a 	mov	sp,fp
    367c:	dfc00117 	ldw	ra,4(sp)
    3680:	df000017 	ldw	fp,0(sp)
    3684:	dec00204 	addi	sp,sp,8
    3688:	f800283a 	ret

0000368c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    368c:	defff904 	addi	sp,sp,-28
    3690:	dfc00615 	stw	ra,24(sp)
    3694:	df000515 	stw	fp,20(sp)
    3698:	df000504 	addi	fp,sp,20
    369c:	e13ffd15 	stw	r4,-12(fp)
    36a0:	e17ffc15 	stw	r5,-16(fp)
    36a4:	e1bffb15 	stw	r6,-20(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    36a8:	e03fff15 	stw	zero,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    36ac:	e0bffd17 	ldw	r2,-12(fp)
    36b0:	10000616 	blt	r2,zero,36cc <lseek+0x40>
    36b4:	e0bffd17 	ldw	r2,-12(fp)
    36b8:	10c00324 	muli	r3,r2,12
    36bc:	00800074 	movhi	r2,1
    36c0:	1080ba04 	addi	r2,r2,744
    36c4:	1885883a 	add	r2,r3,r2
    36c8:	00000106 	br	36d0 <lseek+0x44>
    36cc:	0005883a 	mov	r2,zero
    36d0:	e0bffe15 	stw	r2,-8(fp)
  
  if (fd) 
    36d4:	e0bffe17 	ldw	r2,-8(fp)
    36d8:	10001026 	beq	r2,zero,371c <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    36dc:	e0bffe17 	ldw	r2,-8(fp)
    36e0:	10800017 	ldw	r2,0(r2)
    36e4:	10800717 	ldw	r2,28(r2)
    36e8:	10000926 	beq	r2,zero,3710 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    36ec:	e0bffe17 	ldw	r2,-8(fp)
    36f0:	10800017 	ldw	r2,0(r2)
    36f4:	10800717 	ldw	r2,28(r2)
    36f8:	e1bffb17 	ldw	r6,-20(fp)
    36fc:	e17ffc17 	ldw	r5,-16(fp)
    3700:	e13ffe17 	ldw	r4,-8(fp)
    3704:	103ee83a 	callr	r2
    3708:	e0bfff15 	stw	r2,-4(fp)
    370c:	00000506 	br	3724 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    3710:	00bfde84 	movi	r2,-134
    3714:	e0bfff15 	stw	r2,-4(fp)
    3718:	00000206 	br	3724 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    371c:	00bfebc4 	movi	r2,-81
    3720:	e0bfff15 	stw	r2,-4(fp)
  }

  if (rc < 0)
    3724:	e0bfff17 	ldw	r2,-4(fp)
    3728:	1000070e 	bge	r2,zero,3748 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    372c:	00036500 	call	3650 <alt_get_errno>
    3730:	1007883a 	mov	r3,r2
    3734:	e0bfff17 	ldw	r2,-4(fp)
    3738:	0085c83a 	sub	r2,zero,r2
    373c:	18800015 	stw	r2,0(r3)
    rc = -1;
    3740:	00bfffc4 	movi	r2,-1
    3744:	e0bfff15 	stw	r2,-4(fp)
  }

  return rc;
    3748:	e0bfff17 	ldw	r2,-4(fp)
}
    374c:	e037883a 	mov	sp,fp
    3750:	dfc00117 	ldw	ra,4(sp)
    3754:	df000017 	ldw	fp,0(sp)
    3758:	dec00204 	addi	sp,sp,8
    375c:	f800283a 	ret

00003760 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    3760:	defffb04 	addi	sp,sp,-20
    3764:	dfc00415 	stw	ra,16(sp)
    3768:	df000315 	stw	fp,12(sp)
    376c:	df000304 	addi	fp,sp,12
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    3770:	0009883a 	mov	r4,zero
    3774:	000b83c0 	call	b83c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    3778:	000475c0 	call	475c <OSInit>
    377c:	01000044 	movi	r4,1
    3780:	00091d40 	call	91d4 <OSSemCreate>
    3784:	d0a7b515 	stw	r2,-24876(gp)
    3788:	01000044 	movi	r4,1
    378c:	00091d40 	call	91d4 <OSSemCreate>
    3790:	d0a7b715 	stw	r2,-24868(gp)
    3794:	d0a7b104 	addi	r2,gp,-24892
    3798:	e0bffe15 	stw	r2,-8(fp)
    379c:	00800044 	movi	r2,1
    37a0:	e0bffd8d 	sth	r2,-10(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
    37a4:	e0bffd8b 	ldhu	r2,-10(fp)
    37a8:	1009883a 	mov	r4,r2
    37ac:	00091d40 	call	91d4 <OSSemCreate>
    37b0:	1007883a 	mov	r3,r2
    37b4:	e0bffe17 	ldw	r2,-8(fp)
    37b8:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
    37bc:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    37c0:	000b8780 	call	b878 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    37c4:	01800074 	movhi	r6,1
    37c8:	31be0204 	addi	r6,r6,-2040
    37cc:	01400074 	movhi	r5,1
    37d0:	297e0204 	addi	r5,r5,-2040
    37d4:	01000074 	movhi	r4,1
    37d8:	213e0204 	addi	r4,r4,-2040
    37dc:	000e5e00 	call	e5e0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    37e0:	000e3a40 	call	e3a4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    37e4:	01000074 	movhi	r4,1
    37e8:	21390204 	addi	r4,r4,-7160
    37ec:	000f2440 	call	f244 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    37f0:	d0a7b217 	ldw	r2,-24888(gp)
    37f4:	d0e7b317 	ldw	r3,-24884(gp)
    37f8:	d127b417 	ldw	r4,-24880(gp)
    37fc:	200d883a 	mov	r6,r4
    3800:	180b883a 	mov	r5,r3
    3804:	1009883a 	mov	r4,r2
    3808:	00002e80 	call	2e8 <main>
    380c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    3810:	01000044 	movi	r4,1
    3814:	000329c0 	call	329c <close>
  exit (result);
    3818:	e13fff17 	ldw	r4,-4(fp)
    381c:	000f2580 	call	f258 <exit>

00003820 <alt_get_errno>:
{
    3820:	defffe04 	addi	sp,sp,-8
    3824:	dfc00115 	stw	ra,4(sp)
    3828:	df000015 	stw	fp,0(sp)
    382c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    3830:	d0a00917 	ldw	r2,-32732(gp)
    3834:	10000326 	beq	r2,zero,3844 <alt_get_errno+0x24>
    3838:	d0a00917 	ldw	r2,-32732(gp)
    383c:	103ee83a 	callr	r2
    3840:	00000106 	br	3848 <alt_get_errno+0x28>
    3844:	d0a7b004 	addi	r2,gp,-24896
}
    3848:	e037883a 	mov	sp,fp
    384c:	dfc00117 	ldw	ra,4(sp)
    3850:	df000017 	ldw	fp,0(sp)
    3854:	dec00204 	addi	sp,sp,8
    3858:	f800283a 	ret

0000385c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    385c:	defff904 	addi	sp,sp,-28
    3860:	dfc00615 	stw	ra,24(sp)
    3864:	df000515 	stw	fp,20(sp)
    3868:	df000504 	addi	fp,sp,20
    386c:	e13ffd15 	stw	r4,-12(fp)
    3870:	e17ffc15 	stw	r5,-16(fp)
    3874:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    3878:	e0bffd17 	ldw	r2,-12(fp)
    387c:	10000616 	blt	r2,zero,3898 <read+0x3c>
    3880:	e0bffd17 	ldw	r2,-12(fp)
    3884:	10c00324 	muli	r3,r2,12
    3888:	00800074 	movhi	r2,1
    388c:	1080ba04 	addi	r2,r2,744
    3890:	1885883a 	add	r2,r3,r2
    3894:	00000106 	br	389c <read+0x40>
    3898:	0005883a 	mov	r2,zero
    389c:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
    38a0:	e0bfff17 	ldw	r2,-4(fp)
    38a4:	10002226 	beq	r2,zero,3930 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    38a8:	e0bfff17 	ldw	r2,-4(fp)
    38ac:	10800217 	ldw	r2,8(r2)
    38b0:	108000cc 	andi	r2,r2,3
    38b4:	10800060 	cmpeqi	r2,r2,1
    38b8:	1000181e 	bne	r2,zero,391c <read+0xc0>
        (fd->dev->read))
    38bc:	e0bfff17 	ldw	r2,-4(fp)
    38c0:	10800017 	ldw	r2,0(r2)
    38c4:	10800517 	ldw	r2,20(r2)
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    38c8:	10001426 	beq	r2,zero,391c <read+0xc0>
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    38cc:	e0bfff17 	ldw	r2,-4(fp)
    38d0:	10800017 	ldw	r2,0(r2)
    38d4:	10800517 	ldw	r2,20(r2)
    38d8:	e0fffb17 	ldw	r3,-20(fp)
    38dc:	180d883a 	mov	r6,r3
    38e0:	e17ffc17 	ldw	r5,-16(fp)
    38e4:	e13fff17 	ldw	r4,-4(fp)
    38e8:	103ee83a 	callr	r2
    38ec:	e0bffe15 	stw	r2,-8(fp)
    38f0:	e0bffe17 	ldw	r2,-8(fp)
    38f4:	1000070e 	bge	r2,zero,3914 <read+0xb8>
        {
          ALT_ERRNO = -rval;
    38f8:	00038200 	call	3820 <alt_get_errno>
    38fc:	1007883a 	mov	r3,r2
    3900:	e0bffe17 	ldw	r2,-8(fp)
    3904:	0085c83a 	sub	r2,zero,r2
    3908:	18800015 	stw	r2,0(r3)
          return -1;
    390c:	00bfffc4 	movi	r2,-1
    3910:	00000c06 	br	3944 <read+0xe8>
        }
        return rval;
    3914:	e0bffe17 	ldw	r2,-8(fp)
    3918:	00000a06 	br	3944 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    391c:	00038200 	call	3820 <alt_get_errno>
    3920:	1007883a 	mov	r3,r2
    3924:	00800344 	movi	r2,13
    3928:	18800015 	stw	r2,0(r3)
    392c:	00000406 	br	3940 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    3930:	00038200 	call	3820 <alt_get_errno>
    3934:	1007883a 	mov	r3,r2
    3938:	00801444 	movi	r2,81
    393c:	18800015 	stw	r2,0(r3)
  }
  return -1;
    3940:	00bfffc4 	movi	r2,-1
}
    3944:	e037883a 	mov	sp,fp
    3948:	dfc00117 	ldw	ra,4(sp)
    394c:	df000017 	ldw	fp,0(sp)
    3950:	dec00204 	addi	sp,sp,8
    3954:	f800283a 	ret

00003958 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    3958:	defffe04 	addi	sp,sp,-8
    395c:	df000115 	stw	fp,4(sp)
    3960:	df000104 	addi	fp,sp,4
    3964:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    3968:	e0bfff17 	ldw	r2,-4(fp)
    396c:	108000d0 	cmplti	r2,r2,3
    3970:	10000a1e 	bne	r2,zero,399c <alt_release_fd+0x44>
  {
    alt_fd_list[fd].fd_flags = 0;
    3974:	e0bfff17 	ldw	r2,-4(fp)
    3978:	10c00324 	muli	r3,r2,12
    397c:	00800074 	movhi	r2,1
    3980:	1885883a 	add	r2,r3,r2
    3984:	1000bc15 	stw	zero,752(r2)
    alt_fd_list[fd].dev      = 0;
    3988:	e0bfff17 	ldw	r2,-4(fp)
    398c:	10c00324 	muli	r3,r2,12
    3990:	00800074 	movhi	r2,1
    3994:	1885883a 	add	r2,r3,r2
    3998:	1000ba15 	stw	zero,744(r2)
  }
}
    399c:	0001883a 	nop
    39a0:	e037883a 	mov	sp,fp
    39a4:	df000017 	ldw	fp,0(sp)
    39a8:	dec00104 	addi	sp,sp,4
    39ac:	f800283a 	ret

000039b0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    39b0:	defff904 	addi	sp,sp,-28
    39b4:	df000615 	stw	fp,24(sp)
    39b8:	df000604 	addi	fp,sp,24
    39bc:	e13ffa15 	stw	r4,-24(fp)
  NIOS2_READ_STATUS (context);
    39c0:	0005303a 	rdctl	r2,status
    39c4:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    39c8:	e0fffd17 	ldw	r3,-12(fp)
    39cc:	00bfff84 	movi	r2,-2
    39d0:	1884703a 	and	r2,r3,r2
    39d4:	1001703a 	wrctl	status,r2
  return context;
    39d8:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    39dc:	e0bfff15 	stw	r2,-4(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    39e0:	d0a00a17 	ldw	r2,-32728(gp)
    39e4:	10c000c4 	addi	r3,r2,3
    39e8:	00bfff04 	movi	r2,-4
    39ec:	1884703a 	and	r2,r3,r2
    39f0:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    39f4:	d0e00a17 	ldw	r3,-32728(gp)
    39f8:	e0bffa17 	ldw	r2,-24(fp)
    39fc:	1887883a 	add	r3,r3,r2
    3a00:	00810034 	movhi	r2,1024
    3a04:	10800004 	addi	r2,r2,0
    3a08:	10c0072e 	bgeu	r2,r3,3a28 <sbrk+0x78>
    3a0c:	e0bfff17 	ldw	r2,-4(fp)
    3a10:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    3a14:	e0bffc17 	ldw	r2,-16(fp)
    3a18:	1001703a 	wrctl	status,r2
}
    3a1c:	0001883a 	nop
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    3a20:	00bfffc4 	movi	r2,-1
    3a24:	00000c06 	br	3a58 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
    3a28:	d0a00a17 	ldw	r2,-32728(gp)
    3a2c:	e0bffe15 	stw	r2,-8(fp)
  heap_end += incr; 
    3a30:	d0e00a17 	ldw	r3,-32728(gp)
    3a34:	e0bffa17 	ldw	r2,-24(fp)
    3a38:	1885883a 	add	r2,r3,r2
    3a3c:	d0a00a15 	stw	r2,-32728(gp)
    3a40:	e0bfff17 	ldw	r2,-4(fp)
    3a44:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    3a48:	e0bffb17 	ldw	r2,-20(fp)
    3a4c:	1001703a 	wrctl	status,r2
}
    3a50:	0001883a 	nop

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    3a54:	e0bffe17 	ldw	r2,-8(fp)
} 
    3a58:	e037883a 	mov	sp,fp
    3a5c:	df000017 	ldw	fp,0(sp)
    3a60:	dec00104 	addi	sp,sp,4
    3a64:	f800283a 	ret

00003a68 <alt_get_errno>:
{
    3a68:	defffe04 	addi	sp,sp,-8
    3a6c:	dfc00115 	stw	ra,4(sp)
    3a70:	df000015 	stw	fp,0(sp)
    3a74:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    3a78:	d0a00917 	ldw	r2,-32732(gp)
    3a7c:	10000326 	beq	r2,zero,3a8c <alt_get_errno+0x24>
    3a80:	d0a00917 	ldw	r2,-32732(gp)
    3a84:	103ee83a 	callr	r2
    3a88:	00000106 	br	3a90 <alt_get_errno+0x28>
    3a8c:	d0a7b004 	addi	r2,gp,-24896
}
    3a90:	e037883a 	mov	sp,fp
    3a94:	dfc00117 	ldw	ra,4(sp)
    3a98:	df000017 	ldw	fp,0(sp)
    3a9c:	dec00204 	addi	sp,sp,8
    3aa0:	f800283a 	ret

00003aa4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    3aa4:	defff904 	addi	sp,sp,-28
    3aa8:	dfc00615 	stw	ra,24(sp)
    3aac:	df000515 	stw	fp,20(sp)
    3ab0:	df000504 	addi	fp,sp,20
    3ab4:	e13ffd15 	stw	r4,-12(fp)
    3ab8:	e17ffc15 	stw	r5,-16(fp)
    3abc:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    3ac0:	e0bffd17 	ldw	r2,-12(fp)
    3ac4:	10000616 	blt	r2,zero,3ae0 <write+0x3c>
    3ac8:	e0bffd17 	ldw	r2,-12(fp)
    3acc:	10c00324 	muli	r3,r2,12
    3ad0:	00800074 	movhi	r2,1
    3ad4:	1080ba04 	addi	r2,r2,744
    3ad8:	1885883a 	add	r2,r3,r2
    3adc:	00000106 	br	3ae4 <write+0x40>
    3ae0:	0005883a 	mov	r2,zero
    3ae4:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
    3ae8:	e0bfff17 	ldw	r2,-4(fp)
    3aec:	10002126 	beq	r2,zero,3b74 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    3af0:	e0bfff17 	ldw	r2,-4(fp)
    3af4:	10800217 	ldw	r2,8(r2)
    3af8:	108000cc 	andi	r2,r2,3
    3afc:	10001826 	beq	r2,zero,3b60 <write+0xbc>
    3b00:	e0bfff17 	ldw	r2,-4(fp)
    3b04:	10800017 	ldw	r2,0(r2)
    3b08:	10800617 	ldw	r2,24(r2)
    3b0c:	10001426 	beq	r2,zero,3b60 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    3b10:	e0bfff17 	ldw	r2,-4(fp)
    3b14:	10800017 	ldw	r2,0(r2)
    3b18:	10800617 	ldw	r2,24(r2)
    3b1c:	e0fffb17 	ldw	r3,-20(fp)
    3b20:	180d883a 	mov	r6,r3
    3b24:	e17ffc17 	ldw	r5,-16(fp)
    3b28:	e13fff17 	ldw	r4,-4(fp)
    3b2c:	103ee83a 	callr	r2
    3b30:	e0bffe15 	stw	r2,-8(fp)
    3b34:	e0bffe17 	ldw	r2,-8(fp)
    3b38:	1000070e 	bge	r2,zero,3b58 <write+0xb4>
      {
        ALT_ERRNO = -rval;
    3b3c:	0003a680 	call	3a68 <alt_get_errno>
    3b40:	1007883a 	mov	r3,r2
    3b44:	e0bffe17 	ldw	r2,-8(fp)
    3b48:	0085c83a 	sub	r2,zero,r2
    3b4c:	18800015 	stw	r2,0(r3)
        return -1;
    3b50:	00bfffc4 	movi	r2,-1
    3b54:	00000c06 	br	3b88 <write+0xe4>
      }
      return rval;
    3b58:	e0bffe17 	ldw	r2,-8(fp)
    3b5c:	00000a06 	br	3b88 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    3b60:	0003a680 	call	3a68 <alt_get_errno>
    3b64:	1007883a 	mov	r3,r2
    3b68:	00800344 	movi	r2,13
    3b6c:	18800015 	stw	r2,0(r3)
    3b70:	00000406 	br	3b84 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    3b74:	0003a680 	call	3a68 <alt_get_errno>
    3b78:	1007883a 	mov	r3,r2
    3b7c:	00801444 	movi	r2,81
    3b80:	18800015 	stw	r2,0(r3)
  }
  return -1;
    3b84:	00bfffc4 	movi	r2,-1
}
    3b88:	e037883a 	mov	sp,fp
    3b8c:	dfc00117 	ldw	ra,4(sp)
    3b90:	df000017 	ldw	fp,0(sp)
    3b94:	dec00204 	addi	sp,sp,8
    3b98:	f800283a 	ret

00003b9c <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
    3b9c:	deffdf04 	addi	sp,sp,-132
    3ba0:	dfc02015 	stw	ra,128(sp)
    3ba4:	df001f15 	stw	fp,124(sp)
    3ba8:	df001f04 	addi	fp,sp,124
    3bac:	e13fe115 	stw	r4,-124(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
    3bb0:	e0bfe404 	addi	r2,fp,-112
    3bb4:	100b883a 	mov	r5,r2
    3bb8:	01003fc4 	movi	r4,255
    3bbc:	000b1700 	call	b170 <OSTaskQuery>
    3bc0:	e0bfe245 	stb	r2,-119(fp)
  if (err != OS_NO_ERR)
    3bc4:	e0bfe243 	ldbu	r2,-119(fp)
    3bc8:	10803fcc 	andi	r2,r2,255
    3bcc:	10001d1e 	bne	r2,zero,3c44 <__env_lock+0xa8>
    return;

  id = tcb.OSTCBPrio;
    3bd0:	e0bff083 	ldbu	r2,-62(fp)
    3bd4:	10803fcc 	andi	r2,r2,255
    3bd8:	e0bfff15 	stw	r2,-4(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
    3bdc:	d0a7b517 	ldw	r2,-24876(gp)
    3be0:	e0ffe284 	addi	r3,fp,-118
    3be4:	180b883a 	mov	r5,r3
    3be8:	1009883a 	mov	r4,r2
    3bec:	00099a40 	call	99a4 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
    3bf0:	e0bfe3c3 	ldbu	r2,-113(fp)
    3bf4:	10803fcc 	andi	r2,r2,255
    3bf8:	10000726 	beq	r2,zero,3c18 <__env_lock+0x7c>
    3bfc:	d0a00b17 	ldw	r2,-32724(gp)
    3c00:	e0ffff17 	ldw	r3,-4(fp)
    3c04:	1880041e 	bne	r3,r2,3c18 <__env_lock+0x7c>
  {
    /* we do; just count the recursion */

    locks++;
    3c08:	d0a7b617 	ldw	r2,-24872(gp)
    3c0c:	10800044 	addi	r2,r2,1
    3c10:	d0a7b615 	stw	r2,-24872(gp)
    locks  = 1;
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
    3c14:	00000c06 	br	3c48 <__env_lock+0xac>
    OSSemPend( alt_envsem, 0, &err );
    3c18:	d0a7b517 	ldw	r2,-24876(gp)
    3c1c:	e0ffe244 	addi	r3,fp,-119
    3c20:	180d883a 	mov	r6,r3
    3c24:	000b883a 	mov	r5,zero
    3c28:	1009883a 	mov	r4,r2
    3c2c:	00095000 	call	9500 <OSSemPend>
    locks  = 1;
    3c30:	00800044 	movi	r2,1
    3c34:	d0a7b615 	stw	r2,-24872(gp)
    lockid = id;
    3c38:	e0bfff17 	ldw	r2,-4(fp)
    3c3c:	d0a00b15 	stw	r2,-32724(gp)
  return;
    3c40:	00000106 	br	3c48 <__env_lock+0xac>
    return;
    3c44:	0001883a 	nop
}
    3c48:	e037883a 	mov	sp,fp
    3c4c:	dfc00117 	ldw	ra,4(sp)
    3c50:	df000017 	ldw	fp,0(sp)
    3c54:	dec00204 	addi	sp,sp,8
    3c58:	f800283a 	ret

00003c5c <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
    3c5c:	defffd04 	addi	sp,sp,-12
    3c60:	dfc00215 	stw	ra,8(sp)
    3c64:	df000115 	stw	fp,4(sp)
    3c68:	df000104 	addi	fp,sp,4
    3c6c:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    3c70:	d0a7b617 	ldw	r2,-24872(gp)
    3c74:	10000b26 	beq	r2,zero,3ca4 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
    3c78:	d0a7b617 	ldw	r2,-24872(gp)
    3c7c:	10bfffc4 	addi	r2,r2,-1
    3c80:	d0a7b615 	stw	r2,-24872(gp)
    3c84:	d0a7b617 	ldw	r2,-24872(gp)
    3c88:	1000071e 	bne	r2,zero,3ca8 <__env_unlock+0x4c>
  {
    lockid = -1;
    3c8c:	00bfffc4 	movi	r2,-1
    3c90:	d0a00b15 	stw	r2,-32724(gp)
    OSSemPost( alt_envsem );
    3c94:	d0a7b517 	ldw	r2,-24876(gp)
    3c98:	1009883a 	mov	r4,r2
    3c9c:	00098880 	call	9888 <OSSemPost>
    3ca0:	00000106 	br	3ca8 <__env_unlock+0x4c>
    return;
    3ca4:	0001883a 	nop
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
    3ca8:	e037883a 	mov	sp,fp
    3cac:	dfc00117 	ldw	ra,4(sp)
    3cb0:	df000017 	ldw	fp,0(sp)
    3cb4:	dec00204 	addi	sp,sp,8
    3cb8:	f800283a 	ret

00003cbc <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
    3cbc:	deffdb04 	addi	sp,sp,-148
    3cc0:	dfc02415 	stw	ra,144(sp)
    3cc4:	df002315 	stw	fp,140(sp)
    3cc8:	df002304 	addi	fp,sp,140
    3ccc:	e13fdd15 	stw	r4,-140(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    3cd0:	e03fff15 	stw	zero,-4(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
    3cd4:	d0a7c143 	ldbu	r2,-24827(gp)
    3cd8:	10803fcc 	andi	r2,r2,255
    3cdc:	10800060 	cmpeqi	r2,r2,1
    3ce0:	10003826 	beq	r2,zero,3dc4 <__malloc_lock+0x108>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
    3ce4:	e0bfe004 	addi	r2,fp,-128
    3ce8:	100b883a 	mov	r5,r2
    3cec:	01003fc4 	movi	r4,255
    3cf0:	000b1700 	call	b170 <OSTaskQuery>
    3cf4:	e0bfde45 	stb	r2,-135(fp)
  if (err != OS_NO_ERR)
    3cf8:	e0bfde43 	ldbu	r2,-135(fp)
    3cfc:	10803fcc 	andi	r2,r2,255
    3d00:	1000321e 	bne	r2,zero,3dcc <__malloc_lock+0x110>
    return;

  id = tcb.OSTCBPrio;
    3d04:	e0bfec83 	ldbu	r2,-78(fp)
    3d08:	10803fcc 	andi	r2,r2,255
    3d0c:	e0bffe15 	stw	r2,-8(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
    3d10:	d0a7b717 	ldw	r2,-24868(gp)
    3d14:	e0ffde84 	addi	r3,fp,-134
    3d18:	180b883a 	mov	r5,r3
    3d1c:	1009883a 	mov	r4,r2
    3d20:	00099a40 	call	99a4 <OSSemQuery>
  NIOS2_READ_STATUS (context);
    3d24:	0005303a 	rdctl	r2,status
    3d28:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3d2c:	e0fffd17 	ldw	r3,-12(fp)
    3d30:	00bfff84 	movi	r2,-2
    3d34:	1884703a 	and	r2,r3,r2
    3d38:	1001703a 	wrctl	status,r2
  return context;
    3d3c:	e0bffd17 	ldw	r2,-12(fp)
  
  OS_ENTER_CRITICAL();
    3d40:	e0bfff15 	stw	r2,-4(fp)

  if( !semdata.OSCnt && id == lockid ) 
    3d44:	e0bfde8b 	ldhu	r2,-134(fp)
    3d48:	10bfffcc 	andi	r2,r2,65535
    3d4c:	10000d1e 	bne	r2,zero,3d84 <__malloc_lock+0xc8>
    3d50:	d0a00c17 	ldw	r2,-32720(gp)
    3d54:	e0fffe17 	ldw	r3,-8(fp)
    3d58:	18800a1e 	bne	r3,r2,3d84 <__malloc_lock+0xc8>
  {
    /* we do; just count the recursion */
    locks++;
    3d5c:	d0a7b817 	ldw	r2,-24864(gp)
    3d60:	10800044 	addi	r2,r2,1
    3d64:	d0a7b815 	stw	r2,-24864(gp)
    3d68:	e0bfff17 	ldw	r2,-4(fp)
    3d6c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    3d70:	e0bffc17 	ldw	r2,-16(fp)
    3d74:	1001703a 	wrctl	status,r2
}
    3d78:	0001883a 	nop
    OS_EXIT_CRITICAL();
    3d7c:	0001883a 	nop
    locks  = 1;
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
    3d80:	00001306 	br	3dd0 <__malloc_lock+0x114>
    3d84:	e0bfff17 	ldw	r2,-4(fp)
    3d88:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    3d8c:	e0bffb17 	ldw	r2,-20(fp)
    3d90:	1001703a 	wrctl	status,r2
}
    3d94:	0001883a 	nop
    OSSemPend( alt_heapsem, 0, &err );
    3d98:	d0a7b717 	ldw	r2,-24868(gp)
    3d9c:	e0ffde44 	addi	r3,fp,-135
    3da0:	180d883a 	mov	r6,r3
    3da4:	000b883a 	mov	r5,zero
    3da8:	1009883a 	mov	r4,r2
    3dac:	00095000 	call	9500 <OSSemPend>
    locks  = 1;
    3db0:	00800044 	movi	r2,1
    3db4:	d0a7b815 	stw	r2,-24864(gp)
    lockid = id;
    3db8:	e0bffe17 	ldw	r2,-8(fp)
    3dbc:	d0a00c15 	stw	r2,-32720(gp)
  return;
    3dc0:	00000306 	br	3dd0 <__malloc_lock+0x114>
      return;
    3dc4:	0001883a 	nop
    3dc8:	00000106 	br	3dd0 <__malloc_lock+0x114>
    return;
    3dcc:	0001883a 	nop
}
    3dd0:	e037883a 	mov	sp,fp
    3dd4:	dfc00117 	ldw	ra,4(sp)
    3dd8:	df000017 	ldw	fp,0(sp)
    3ddc:	dec00204 	addi	sp,sp,8
    3de0:	f800283a 	ret

00003de4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    3de4:	defff804 	addi	sp,sp,-32
    3de8:	dfc00715 	stw	ra,28(sp)
    3dec:	df000615 	stw	fp,24(sp)
    3df0:	df000604 	addi	fp,sp,24
    3df4:	e13ffa15 	stw	r4,-24(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    3df8:	e03fff15 	stw	zero,-4(fp)
#endif 

  if (OSRunning != OS_TRUE)
    3dfc:	d0a7c143 	ldbu	r2,-24827(gp)
    3e00:	10803fcc 	andi	r2,r2,255
    3e04:	10800060 	cmpeqi	r2,r2,1
    3e08:	10002526 	beq	r2,zero,3ea0 <__malloc_unlock+0xbc>
  NIOS2_READ_STATUS (context);
    3e0c:	0005303a 	rdctl	r2,status
    3e10:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3e14:	e0fffe17 	ldw	r3,-8(fp)
    3e18:	00bfff84 	movi	r2,-2
    3e1c:	1884703a 	and	r2,r3,r2
    3e20:	1001703a 	wrctl	status,r2
  return context;
    3e24:	e0bffe17 	ldw	r2,-8(fp)
      return;

  OS_ENTER_CRITICAL();
    3e28:	e0bfff15 	stw	r2,-4(fp)
  if (locks == 0)
    3e2c:	d0a7b817 	ldw	r2,-24864(gp)
    3e30:	1000061e 	bne	r2,zero,3e4c <__malloc_unlock+0x68>
    3e34:	e0bfff17 	ldw	r2,-4(fp)
    3e38:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
    3e3c:	e0bffd17 	ldw	r2,-12(fp)
    3e40:	1001703a 	wrctl	status,r2
}
    3e44:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
      return;
    3e48:	00001606 	br	3ea4 <__malloc_unlock+0xc0>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
    3e4c:	d0a7b817 	ldw	r2,-24864(gp)
    3e50:	10bfffc4 	addi	r2,r2,-1
    3e54:	d0a7b815 	stw	r2,-24864(gp)
    3e58:	d0a7b817 	ldw	r2,-24864(gp)
    3e5c:	10000b1e 	bne	r2,zero,3e8c <__malloc_unlock+0xa8>
  {
    lockid = -1;
    3e60:	00bfffc4 	movi	r2,-1
    3e64:	d0a00c15 	stw	r2,-32720(gp)
    3e68:	e0bfff17 	ldw	r2,-4(fp)
    3e6c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    3e70:	e0bffc17 	ldw	r2,-16(fp)
    3e74:	1001703a 	wrctl	status,r2
}
    3e78:	0001883a 	nop
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
    3e7c:	d0a7b717 	ldw	r2,-24868(gp)
    3e80:	1009883a 	mov	r4,r2
    3e84:	00098880 	call	9888 <OSSemPost>
    3e88:	00000606 	br	3ea4 <__malloc_unlock+0xc0>
    3e8c:	e0bfff17 	ldw	r2,-4(fp)
    3e90:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    3e94:	e0bffb17 	ldw	r2,-20(fp)
    3e98:	1001703a 	wrctl	status,r2
}
    3e9c:	00000106 	br	3ea4 <__malloc_unlock+0xc0>
      return;
    3ea0:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
    3ea4:	e037883a 	mov	sp,fp
    3ea8:	dfc00117 	ldw	ra,4(sp)
    3eac:	df000017 	ldw	fp,0(sp)
    3eb0:	dec00204 	addi	sp,sp,8
    3eb4:	f800283a 	ret

00003eb8 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
    3eb8:	defff704 	addi	sp,sp,-36
    3ebc:	dfc00815 	stw	ra,32(sp)
    3ec0:	df000715 	stw	fp,28(sp)
    3ec4:	df000704 	addi	fp,sp,28
    3ec8:	e13ffb15 	stw	r4,-20(fp)
    3ecc:	e17ffa15 	stw	r5,-24(fp)
    3ed0:	e1bff915 	stw	r6,-28(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    3ed4:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    3ed8:	e0bff917 	ldw	r2,-28(fp)
    3edc:	1000021e 	bne	r2,zero,3ee8 <OSEventNameGet+0x30>
        return (0);
    3ee0:	0005883a 	mov	r2,zero
    3ee4:	00003806 	br	3fc8 <OSEventNameGet+0x110>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
    3ee8:	e0bffb17 	ldw	r2,-20(fp)
    3eec:	1000051e 	bne	r2,zero,3f04 <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
    3ef0:	e0bff917 	ldw	r2,-28(fp)
    3ef4:	00c00104 	movi	r3,4
    3ef8:	10c00005 	stb	r3,0(r2)
        return (0);
    3efc:	0005883a 	mov	r2,zero
    3f00:	00003106 	br	3fc8 <OSEventNameGet+0x110>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    3f04:	e0bffa17 	ldw	r2,-24(fp)
    3f08:	1000051e 	bne	r2,zero,3f20 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
    3f0c:	e0bff917 	ldw	r2,-28(fp)
    3f10:	00c00304 	movi	r3,12
    3f14:	10c00005 	stb	r3,0(r2)
        return (0);
    3f18:	0005883a 	mov	r2,zero
    3f1c:	00002a06 	br	3fc8 <OSEventNameGet+0x110>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    3f20:	d0a7bf43 	ldbu	r2,-24835(gp)
    3f24:	10803fcc 	andi	r2,r2,255
    3f28:	10000526 	beq	r2,zero,3f40 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
    3f2c:	e0bff917 	ldw	r2,-28(fp)
    3f30:	00c00444 	movi	r3,17
    3f34:	10c00005 	stb	r3,0(r2)
        return (0);
    3f38:	0005883a 	mov	r2,zero
    3f3c:	00002206 	br	3fc8 <OSEventNameGet+0x110>
    }
    switch (pevent->OSEventType) {
    3f40:	e0bffb17 	ldw	r2,-20(fp)
    3f44:	10800003 	ldbu	r2,0(r2)
    3f48:	10803fcc 	andi	r2,r2,255
    3f4c:	10bfffc4 	addi	r2,r2,-1
    3f50:	10800128 	cmpgeui	r2,r2,4
    3f54:	10000526 	beq	r2,zero,3f6c <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
    3f58:	e0bff917 	ldw	r2,-28(fp)
    3f5c:	00c00044 	movi	r3,1
    3f60:	10c00005 	stb	r3,0(r2)
             return (0);
    3f64:	0005883a 	mov	r2,zero
    3f68:	00001706 	br	3fc8 <OSEventNameGet+0x110>
             break;
    3f6c:	0001883a 	nop
  NIOS2_READ_STATUS (context);
    3f70:	0005303a 	rdctl	r2,status
    3f74:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3f78:	e0fffc17 	ldw	r3,-16(fp)
    3f7c:	00bfff84 	movi	r2,-2
    3f80:	1884703a 	and	r2,r3,r2
    3f84:	1001703a 	wrctl	status,r2
  return context;
    3f88:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    3f8c:	e0bfff15 	stw	r2,-4(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    3f90:	e0bffb17 	ldw	r2,-20(fp)
    3f94:	10800384 	addi	r2,r2,14
    3f98:	100b883a 	mov	r5,r2
    3f9c:	e13ffa17 	ldw	r4,-24(fp)
    3fa0:	00059680 	call	5968 <OS_StrCopy>
    3fa4:	e0bffec5 	stb	r2,-5(fp)
    3fa8:	e0bfff17 	ldw	r2,-4(fp)
    3fac:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
    3fb0:	e0bffd17 	ldw	r2,-12(fp)
    3fb4:	1001703a 	wrctl	status,r2
}
    3fb8:	0001883a 	nop
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    3fbc:	e0bff917 	ldw	r2,-28(fp)
    3fc0:	10000005 	stb	zero,0(r2)
    return (len);
    3fc4:	e0bffec3 	ldbu	r2,-5(fp)
}
    3fc8:	e037883a 	mov	sp,fp
    3fcc:	dfc00117 	ldw	ra,4(sp)
    3fd0:	df000017 	ldw	fp,0(sp)
    3fd4:	dec00204 	addi	sp,sp,8
    3fd8:	f800283a 	ret

00003fdc <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
    3fdc:	defff604 	addi	sp,sp,-40
    3fe0:	dfc00915 	stw	ra,36(sp)
    3fe4:	df000815 	stw	fp,32(sp)
    3fe8:	df000804 	addi	fp,sp,32
    3fec:	e13ffa15 	stw	r4,-24(fp)
    3ff0:	e17ff915 	stw	r5,-28(fp)
    3ff4:	e1bff815 	stw	r6,-32(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    3ff8:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    3ffc:	e0bff817 	ldw	r2,-32(fp)
    4000:	10004226 	beq	r2,zero,410c <OSEventNameSet+0x130>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
    4004:	e0bffa17 	ldw	r2,-24(fp)
    4008:	1000041e 	bne	r2,zero,401c <OSEventNameSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
    400c:	e0bff817 	ldw	r2,-32(fp)
    4010:	00c00104 	movi	r3,4
    4014:	10c00005 	stb	r3,0(r2)
        return;
    4018:	00003d06 	br	4110 <OSEventNameSet+0x134>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    401c:	e0bff917 	ldw	r2,-28(fp)
    4020:	1000041e 	bne	r2,zero,4034 <OSEventNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
    4024:	e0bff817 	ldw	r2,-32(fp)
    4028:	00c00304 	movi	r3,12
    402c:	10c00005 	stb	r3,0(r2)
        return;
    4030:	00003706 	br	4110 <OSEventNameSet+0x134>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    4034:	d0a7bf43 	ldbu	r2,-24835(gp)
    4038:	10803fcc 	andi	r2,r2,255
    403c:	10000426 	beq	r2,zero,4050 <OSEventNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
    4040:	e0bff817 	ldw	r2,-32(fp)
    4044:	00c00484 	movi	r3,18
    4048:	10c00005 	stb	r3,0(r2)
        return;
    404c:	00003006 	br	4110 <OSEventNameSet+0x134>
    }
    switch (pevent->OSEventType) {
    4050:	e0bffa17 	ldw	r2,-24(fp)
    4054:	10800003 	ldbu	r2,0(r2)
    4058:	10803fcc 	andi	r2,r2,255
    405c:	10bfffc4 	addi	r2,r2,-1
    4060:	10800128 	cmpgeui	r2,r2,4
    4064:	10000426 	beq	r2,zero,4078 <OSEventNameSet+0x9c>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
    4068:	e0bff817 	ldw	r2,-32(fp)
    406c:	00c00044 	movi	r3,1
    4070:	10c00005 	stb	r3,0(r2)
             return;
    4074:	00002606 	br	4110 <OSEventNameSet+0x134>
             break;
    4078:	0001883a 	nop
  NIOS2_READ_STATUS (context);
    407c:	0005303a 	rdctl	r2,status
    4080:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4084:	e0fffd17 	ldw	r3,-12(fp)
    4088:	00bfff84 	movi	r2,-2
    408c:	1884703a 	and	r2,r3,r2
    4090:	1001703a 	wrctl	status,r2
  return context;
    4094:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    4098:	e0bfff15 	stw	r2,-4(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    409c:	e13ff917 	ldw	r4,-28(fp)
    40a0:	00059dc0 	call	59dc <OS_StrLen>
    40a4:	e0bffec5 	stb	r2,-5(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
    40a8:	e0bffec3 	ldbu	r2,-5(fp)
    40ac:	10800830 	cmpltui	r2,r2,32
    40b0:	1000091e 	bne	r2,zero,40d8 <OSEventNameSet+0xfc>
    40b4:	e0bfff17 	ldw	r2,-4(fp)
    40b8:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    40bc:	e0bffc17 	ldw	r2,-16(fp)
    40c0:	1001703a 	wrctl	status,r2
}
    40c4:	0001883a 	nop
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
    40c8:	e0bff817 	ldw	r2,-32(fp)
    40cc:	00c002c4 	movi	r3,11
    40d0:	10c00005 	stb	r3,0(r2)
        return;
    40d4:	00000e06 	br	4110 <OSEventNameSet+0x134>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    40d8:	e0bffa17 	ldw	r2,-24(fp)
    40dc:	10800384 	addi	r2,r2,14
    40e0:	e17ff917 	ldw	r5,-28(fp)
    40e4:	1009883a 	mov	r4,r2
    40e8:	00059680 	call	5968 <OS_StrCopy>
    40ec:	e0bfff17 	ldw	r2,-4(fp)
    40f0:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    40f4:	e0bffb17 	ldw	r2,-20(fp)
    40f8:	1001703a 	wrctl	status,r2
}
    40fc:	0001883a 	nop
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    4100:	e0bff817 	ldw	r2,-32(fp)
    4104:	10000005 	stb	zero,0(r2)
    4108:	00000106 	br	4110 <OSEventNameSet+0x134>
        return;
    410c:	0001883a 	nop
}
    4110:	e037883a 	mov	sp,fp
    4114:	dfc00117 	ldw	ra,4(sp)
    4118:	df000017 	ldw	fp,0(sp)
    411c:	dec00204 	addi	sp,sp,8
    4120:	f800283a 	ret

00004124 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
    4124:	deffed04 	addi	sp,sp,-76
    4128:	dfc01215 	stw	ra,72(sp)
    412c:	df001115 	stw	fp,68(sp)
    4130:	df001104 	addi	fp,sp,68
    4134:	e13ff215 	stw	r4,-56(fp)
    4138:	e17ff115 	stw	r5,-60(fp)
    413c:	e1bff015 	stw	r6,-64(fp)
    4140:	3805883a 	mov	r2,r7
    4144:	e0bfef0d 	sth	r2,-68(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
    4148:	e03ffb15 	stw	zero,-20(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
    414c:	e0800217 	ldw	r2,8(fp)
    4150:	1000021e 	bne	r2,zero,415c <OSEventPendMulti+0x38>
        return (0);
    4154:	0005883a 	mov	r2,zero
    4158:	00017b06 	br	4748 <OSEventPendMulti+0x624>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
    415c:	e0bff217 	ldw	r2,-56(fp)
    4160:	1000051e 	bne	r2,zero,4178 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
    4164:	e0800217 	ldw	r2,8(fp)
    4168:	00c00104 	movi	r3,4
    416c:	10c00005 	stb	r3,0(r2)
        return (0);
    4170:	0005883a 	mov	r2,zero
    4174:	00017406 	br	4748 <OSEventPendMulti+0x624>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
    4178:	e0bff117 	ldw	r2,-60(fp)
    417c:	1000051e 	bne	r2,zero,4194 <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
    4180:	e0800217 	ldw	r2,8(fp)
    4184:	00c00104 	movi	r3,4
    4188:	10c00005 	stb	r3,0(r2)
        return (0);
    418c:	0005883a 	mov	r2,zero
    4190:	00016d06 	br	4748 <OSEventPendMulti+0x624>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
    4194:	e0bff017 	ldw	r2,-64(fp)
    4198:	1000051e 	bne	r2,zero,41b0 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
    419c:	e0800217 	ldw	r2,8(fp)
    41a0:	00c00104 	movi	r3,4
    41a4:	10c00005 	stb	r3,0(r2)
        return (0);
    41a8:	0005883a 	mov	r2,zero
    41ac:	00016606 	br	4748 <OSEventPendMulti+0x624>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
    41b0:	e0bff117 	ldw	r2,-60(fp)
    41b4:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
    41b8:	e0bff217 	ldw	r2,-56(fp)
    41bc:	e0bfff15 	stw	r2,-4(fp)
    pevent      = *pevents;
    41c0:	e0bfff17 	ldw	r2,-4(fp)
    41c4:	10800017 	ldw	r2,0(r2)
    41c8:	e0bffe15 	stw	r2,-8(fp)
    while  (pevent != (OS_EVENT *)0) {
    41cc:	00001b06 	br	423c <OSEventPendMulti+0x118>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
    41d0:	e0bffe17 	ldw	r2,-8(fp)
    41d4:	10800003 	ldbu	r2,0(r2)
    41d8:	10803fcc 	andi	r2,r2,255
    41dc:	10c000e0 	cmpeqi	r3,r2,3
    41e0:	18000b1e 	bne	r3,zero,4210 <OSEventPendMulti+0xec>
    41e4:	10c00108 	cmpgei	r3,r2,4
    41e8:	1800041e 	bne	r3,zero,41fc <OSEventPendMulti+0xd8>
    41ec:	10c00060 	cmpeqi	r3,r2,1
    41f0:	1800091e 	bne	r3,zero,4218 <OSEventPendMulti+0xf4>
    41f4:	108000a0 	cmpeqi	r2,r2,2
    41f8:	1000091e 	bne	r2,zero,4220 <OSEventPendMulti+0xfc>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
    41fc:	e0800217 	ldw	r2,8(fp)
    4200:	00c00044 	movi	r3,1
    4204:	10c00005 	stb	r3,0(r2)
                 return (0);
    4208:	0005883a 	mov	r2,zero
    420c:	00014e06 	br	4748 <OSEventPendMulti+0x624>
                 break;
    4210:	0001883a 	nop
    4214:	00000306 	br	4224 <OSEventPendMulti+0x100>
                 break;
    4218:	0001883a 	nop
    421c:	00000106 	br	4224 <OSEventPendMulti+0x100>
                 break;
    4220:	0001883a 	nop
        }
        pevents++;
    4224:	e0bfff17 	ldw	r2,-4(fp)
    4228:	10800104 	addi	r2,r2,4
    422c:	e0bfff15 	stw	r2,-4(fp)
        pevent = *pevents;
    4230:	e0bfff17 	ldw	r2,-4(fp)
    4234:	10800017 	ldw	r2,0(r2)
    4238:	e0bffe15 	stw	r2,-8(fp)
    while  (pevent != (OS_EVENT *)0) {
    423c:	e0bffe17 	ldw	r2,-8(fp)
    4240:	103fe31e 	bne	r2,zero,41d0 <OSEventPendMulti+0xac>
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
    4244:	d0a7bf43 	ldbu	r2,-24835(gp)
    4248:	10803fcc 	andi	r2,r2,255
    424c:	10000526 	beq	r2,zero,4264 <OSEventPendMulti+0x140>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
    4250:	e0800217 	ldw	r2,8(fp)
    4254:	00c00084 	movi	r3,2
    4258:	10c00005 	stb	r3,0(r2)
        return (0);
    425c:	0005883a 	mov	r2,zero
    4260:	00013906 	br	4748 <OSEventPendMulti+0x624>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
    4264:	d0a7bf83 	ldbu	r2,-24834(gp)
    4268:	10803fcc 	andi	r2,r2,255
    426c:	10000526 	beq	r2,zero,4284 <OSEventPendMulti+0x160>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
    4270:	e0800217 	ldw	r2,8(fp)
    4274:	00c00344 	movi	r3,13
    4278:	10c00005 	stb	r3,0(r2)
        return (0);
    427c:	0005883a 	mov	r2,zero
    4280:	00013106 	br	4748 <OSEventPendMulti+0x624>
  NIOS2_READ_STATUS (context);
    4284:	0005303a 	rdctl	r2,status
    4288:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    428c:	e0fff917 	ldw	r3,-28(fp)
    4290:	00bfff84 	movi	r2,-2
    4294:	1884703a 	and	r2,r3,r2
    4298:	1001703a 	wrctl	status,r2
  return context;
    429c:	e0bff917 	ldw	r2,-28(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
    42a0:	e0bffb15 	stw	r2,-20(fp)
    events_rdy     =  OS_FALSE;
    42a4:	e03ffdc5 	stb	zero,-9(fp)
    events_rdy_nbr =  0;
    42a8:	e03ffd0d 	sth	zero,-12(fp)
    events_stat    =  OS_STAT_RDY;
    42ac:	e03ffcc5 	stb	zero,-13(fp)
    pevents        =  pevents_pend;
    42b0:	e0bff217 	ldw	r2,-56(fp)
    42b4:	e0bfff15 	stw	r2,-4(fp)
    pevent         = *pevents;
    42b8:	e0bfff17 	ldw	r2,-4(fp)
    42bc:	10800017 	ldw	r2,0(r2)
    42c0:	e0bffe15 	stw	r2,-8(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
    42c4:	00008406 	br	44d8 <OSEventPendMulti+0x3b4>
        switch (pevent->OSEventType) {
    42c8:	e0bffe17 	ldw	r2,-8(fp)
    42cc:	10800003 	ldbu	r2,0(r2)
    42d0:	10803fcc 	andi	r2,r2,255
    42d4:	10c000e0 	cmpeqi	r3,r2,3
    42d8:	1800071e 	bne	r3,zero,42f8 <OSEventPendMulti+0x1d4>
    42dc:	10c00108 	cmpgei	r3,r2,4
    42e0:	18006b1e 	bne	r3,zero,4490 <OSEventPendMulti+0x36c>
    42e4:	10c00060 	cmpeqi	r3,r2,1
    42e8:	1800201e 	bne	r3,zero,436c <OSEventPendMulti+0x248>
    42ec:	108000a0 	cmpeqi	r2,r2,2
    42f0:	1000381e 	bne	r2,zero,43d4 <OSEventPendMulti+0x2b0>
    42f4:	00006606 	br	4490 <OSEventPendMulti+0x36c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
    42f8:	e0bffe17 	ldw	r2,-8(fp)
    42fc:	1080020b 	ldhu	r2,8(r2)
    4300:	10bfffcc 	andi	r2,r2,65535
    4304:	10001526 	beq	r2,zero,435c <OSEventPendMulti+0x238>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
    4308:	e0bffe17 	ldw	r2,-8(fp)
    430c:	1080020b 	ldhu	r2,8(r2)
    4310:	10bfffc4 	addi	r2,r2,-1
    4314:	1007883a 	mov	r3,r2
    4318:	e0bffe17 	ldw	r2,-8(fp)
    431c:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
    4320:	e0bff117 	ldw	r2,-60(fp)
    4324:	10c00104 	addi	r3,r2,4
    4328:	e0fff115 	stw	r3,-60(fp)
    432c:	e0fffe17 	ldw	r3,-8(fp)
    4330:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
    4334:	00800044 	movi	r2,1
    4338:	e0bffdc5 	stb	r2,-9(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
    433c:	e0bff017 	ldw	r2,-64(fp)
    4340:	10c00104 	addi	r3,r2,4
    4344:	e0fff015 	stw	r3,-64(fp)
    4348:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
    434c:	e0bffd0b 	ldhu	r2,-12(fp)
    4350:	10800044 	addi	r2,r2,1
    4354:	e0bffd0d 	sth	r2,-12(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
    4358:	00005906 	br	44c0 <OSEventPendMulti+0x39c>
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
    435c:	e0bffcc3 	ldbu	r2,-13(fp)
    4360:	10800054 	ori	r2,r2,1
    4364:	e0bffcc5 	stb	r2,-13(fp)
                 break;
    4368:	00005506 	br	44c0 <OSEventPendMulti+0x39c>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
    436c:	e0bffe17 	ldw	r2,-8(fp)
    4370:	10800117 	ldw	r2,4(r2)
    4374:	10001326 	beq	r2,zero,43c4 <OSEventPendMulti+0x2a0>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
    4378:	e0bff017 	ldw	r2,-64(fp)
    437c:	10c00104 	addi	r3,r2,4
    4380:	e0fff015 	stw	r3,-64(fp)
    4384:	e0fffe17 	ldw	r3,-8(fp)
    4388:	18c00117 	ldw	r3,4(r3)
    438c:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
    4390:	e0bffe17 	ldw	r2,-8(fp)
    4394:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
    4398:	e0bff117 	ldw	r2,-60(fp)
    439c:	10c00104 	addi	r3,r2,4
    43a0:	e0fff115 	stw	r3,-60(fp)
    43a4:	e0fffe17 	ldw	r3,-8(fp)
    43a8:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
    43ac:	00800044 	movi	r2,1
    43b0:	e0bffdc5 	stb	r2,-9(fp)
                      events_rdy_nbr++;
    43b4:	e0bffd0b 	ldhu	r2,-12(fp)
    43b8:	10800044 	addi	r2,r2,1
    43bc:	e0bffd0d 	sth	r2,-12(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
    43c0:	00003f06 	br	44c0 <OSEventPendMulti+0x39c>
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
    43c4:	e0bffcc3 	ldbu	r2,-13(fp)
    43c8:	10800094 	ori	r2,r2,2
    43cc:	e0bffcc5 	stb	r2,-13(fp)
                 break;
    43d0:	00003b06 	br	44c0 <OSEventPendMulti+0x39c>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
    43d4:	e0bffe17 	ldw	r2,-8(fp)
    43d8:	10800117 	ldw	r2,4(r2)
    43dc:	e0bffa15 	stw	r2,-24(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
    43e0:	e0bffa17 	ldw	r2,-24(fp)
    43e4:	1080058b 	ldhu	r2,22(r2)
    43e8:	10bfffcc 	andi	r2,r2,65535
    43ec:	10002426 	beq	r2,zero,4480 <OSEventPendMulti+0x35c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
    43f0:	e0bffa17 	ldw	r2,-24(fp)
    43f4:	10c00417 	ldw	r3,16(r2)
    43f8:	19000104 	addi	r4,r3,4
    43fc:	e0bffa17 	ldw	r2,-24(fp)
    4400:	11000415 	stw	r4,16(r2)
    4404:	e0bff017 	ldw	r2,-64(fp)
    4408:	11000104 	addi	r4,r2,4
    440c:	e13ff015 	stw	r4,-64(fp)
    4410:	18c00017 	ldw	r3,0(r3)
    4414:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
    4418:	e0bffa17 	ldw	r2,-24(fp)
    441c:	10c00417 	ldw	r3,16(r2)
    4420:	e0bffa17 	ldw	r2,-24(fp)
    4424:	10800217 	ldw	r2,8(r2)
    4428:	1880041e 	bne	r3,r2,443c <OSEventPendMulti+0x318>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
    442c:	e0bffa17 	ldw	r2,-24(fp)
    4430:	10c00117 	ldw	r3,4(r2)
    4434:	e0bffa17 	ldw	r2,-24(fp)
    4438:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
    443c:	e0bffa17 	ldw	r2,-24(fp)
    4440:	1080058b 	ldhu	r2,22(r2)
    4444:	10bfffc4 	addi	r2,r2,-1
    4448:	1007883a 	mov	r3,r2
    444c:	e0bffa17 	ldw	r2,-24(fp)
    4450:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
    4454:	e0bff117 	ldw	r2,-60(fp)
    4458:	10c00104 	addi	r3,r2,4
    445c:	e0fff115 	stw	r3,-60(fp)
    4460:	e0fffe17 	ldw	r3,-8(fp)
    4464:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
    4468:	00800044 	movi	r2,1
    446c:	e0bffdc5 	stb	r2,-9(fp)
                      events_rdy_nbr++;
    4470:	e0bffd0b 	ldhu	r2,-12(fp)
    4474:	10800044 	addi	r2,r2,1
    4478:	e0bffd0d 	sth	r2,-12(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
    447c:	00001006 	br	44c0 <OSEventPendMulti+0x39c>
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
    4480:	e0bffcc3 	ldbu	r2,-13(fp)
    4484:	10800114 	ori	r2,r2,4
    4488:	e0bffcc5 	stb	r2,-13(fp)
                 break;
    448c:	00000c06 	br	44c0 <OSEventPendMulti+0x39c>
    4490:	e0bffb17 	ldw	r2,-20(fp)
    4494:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
    4498:	e0bff817 	ldw	r2,-32(fp)
    449c:	1001703a 	wrctl	status,r2
}
    44a0:	0001883a 	nop

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
    44a4:	e0bff117 	ldw	r2,-60(fp)
    44a8:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
    44ac:	e0800217 	ldw	r2,8(fp)
    44b0:	00c00044 	movi	r3,1
    44b4:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
    44b8:	e0bffd0b 	ldhu	r2,-12(fp)
    44bc:	0000a206 	br	4748 <OSEventPendMulti+0x624>
        }
        pevents++;
    44c0:	e0bfff17 	ldw	r2,-4(fp)
    44c4:	10800104 	addi	r2,r2,4
    44c8:	e0bfff15 	stw	r2,-4(fp)
        pevent = *pevents;
    44cc:	e0bfff17 	ldw	r2,-4(fp)
    44d0:	10800017 	ldw	r2,0(r2)
    44d4:	e0bffe15 	stw	r2,-8(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
    44d8:	e0bffe17 	ldw	r2,-8(fp)
    44dc:	103f7a1e 	bne	r2,zero,42c8 <OSEventPendMulti+0x1a4>
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
    44e0:	e0bffdc3 	ldbu	r2,-9(fp)
    44e4:	10800058 	cmpnei	r2,r2,1
    44e8:	10000b1e 	bne	r2,zero,4518 <OSEventPendMulti+0x3f4>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
    44ec:	e0bff117 	ldw	r2,-60(fp)
    44f0:	10000015 	stw	zero,0(r2)
    44f4:	e0bffb17 	ldw	r2,-20(fp)
    44f8:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context);
    44fc:	e0bff717 	ldw	r2,-36(fp)
    4500:	1001703a 	wrctl	status,r2
}
    4504:	0001883a 	nop
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
    4508:	e0800217 	ldw	r2,8(fp)
    450c:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
    4510:	e0bffd0b 	ldhu	r2,-12(fp)
    4514:	00008c06 	br	4748 <OSEventPendMulti+0x624>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
    4518:	d0a7c317 	ldw	r2,-24820(gp)
    451c:	10800c03 	ldbu	r2,48(r2)
    4520:	e0fffcc3 	ldbu	r3,-13(fp)
    4524:	1884b03a 	or	r2,r3,r2
    4528:	1009883a 	mov	r4,r2
    452c:	d0a7c317 	ldw	r2,-24820(gp)
    4530:	00ffe004 	movi	r3,-128
    4534:	20c6b03a 	or	r3,r4,r3
    4538:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    453c:	d0a7c317 	ldw	r2,-24820(gp)
    4540:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
    4544:	d0a7c317 	ldw	r2,-24820(gp)
    4548:	e0ffef0b 	ldhu	r3,-68(fp)
    454c:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
    4550:	e13ff217 	ldw	r4,-56(fp)
    4554:	000508c0 	call	508c <OS_EventTaskWaitMulti>
    4558:	e0bffb17 	ldw	r2,-20(fp)
    455c:	e0bff515 	stw	r2,-44(fp)
  NIOS2_WRITE_STATUS (context);
    4560:	e0bff517 	ldw	r2,-44(fp)
    4564:	1001703a 	wrctl	status,r2
}
    4568:	0001883a 	nop

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
    456c:	00058300 	call	5830 <OS_Sched>
  NIOS2_READ_STATUS (context);
    4570:	0005303a 	rdctl	r2,status
    4574:	e0bff615 	stw	r2,-40(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4578:	e0fff617 	ldw	r3,-40(fp)
    457c:	00bfff84 	movi	r2,-2
    4580:	1884703a 	and	r2,r3,r2
    4584:	1001703a 	wrctl	status,r2
  return context;
    4588:	e0bff617 	ldw	r2,-40(fp)
    OS_ENTER_CRITICAL();
    458c:	e0bffb15 	stw	r2,-20(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
    4590:	d0a7c317 	ldw	r2,-24820(gp)
    4594:	10800c43 	ldbu	r2,49(r2)
    4598:	10803fcc 	andi	r2,r2,255
    459c:	10000226 	beq	r2,zero,45a8 <OSEventPendMulti+0x484>
    45a0:	10800098 	cmpnei	r2,r2,2
    45a4:	1000181e 	bne	r2,zero,4608 <OSEventPendMulti+0x4e4>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
    45a8:	d0a7c317 	ldw	r2,-24820(gp)
    45ac:	10800717 	ldw	r2,28(r2)
    45b0:	e0bffe15 	stw	r2,-8(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
    45b4:	e0bffe17 	ldw	r2,-8(fp)
    45b8:	10000b26 	beq	r2,zero,45e8 <OSEventPendMulti+0x4c4>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
    45bc:	e0bff117 	ldw	r2,-60(fp)
    45c0:	10c00104 	addi	r3,r2,4
    45c4:	e0fff115 	stw	r3,-60(fp)
    45c8:	e0fffe17 	ldw	r3,-8(fp)
    45cc:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
    45d0:	e0bff117 	ldw	r2,-60(fp)
    45d4:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
    45d8:	e0bffd0b 	ldhu	r2,-12(fp)
    45dc:	10800044 	addi	r2,r2,1
    45e0:	e0bffd0d 	sth	r2,-12(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
    45e4:	00000d06 	br	461c <OSEventPendMulti+0x4f8>
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
    45e8:	d0a7c317 	ldw	r2,-24820(gp)
    45ec:	00c00044 	movi	r3,1
    45f0:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
    45f4:	d0a7c317 	ldw	r2,-24820(gp)
    45f8:	e17ff217 	ldw	r5,-56(fp)
    45fc:	1009883a 	mov	r4,r2
    4600:	00052840 	call	5284 <OS_EventTaskRemoveMulti>
			 break;
    4604:	00000506 	br	461c <OSEventPendMulti+0x4f8>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
    4608:	d0a7c317 	ldw	r2,-24820(gp)
    460c:	e17ff217 	ldw	r5,-56(fp)
    4610:	1009883a 	mov	r4,r2
    4614:	00052840 	call	5284 <OS_EventTaskRemoveMulti>
             break;
    4618:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
    461c:	d0a7c317 	ldw	r2,-24820(gp)
    4620:	10800c43 	ldbu	r2,49(r2)
    4624:	10803fcc 	andi	r2,r2,255
    4628:	10000326 	beq	r2,zero,4638 <OSEventPendMulti+0x514>
    462c:	108000a0 	cmpeqi	r2,r2,2
    4630:	1000251e 	bne	r2,zero,46c8 <OSEventPendMulti+0x5a4>
    4634:	00002c06 	br	46e8 <OSEventPendMulti+0x5c4>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
    4638:	e0bffe17 	ldw	r2,-8(fp)
    463c:	10800003 	ldbu	r2,0(r2)
    4640:	10803fcc 	andi	r2,r2,255
    4644:	10c000c8 	cmpgei	r3,r2,3
    4648:	1800021e 	bne	r3,zero,4654 <OSEventPendMulti+0x530>
    464c:	00800816 	blt	zero,r2,4670 <OSEventPendMulti+0x54c>
    4650:	00000e06 	br	468c <OSEventPendMulti+0x568>
    4654:	108000d8 	cmpnei	r2,r2,3
    4658:	10000c1e 	bne	r2,zero,468c <OSEventPendMulti+0x568>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
    465c:	e0bff017 	ldw	r2,-64(fp)
    4660:	10c00104 	addi	r3,r2,4
    4664:	e0fff015 	stw	r3,-64(fp)
    4668:	10000015 	stw	zero,0(r2)
                      break;
    466c:	00001306 	br	46bc <OSEventPendMulti+0x598>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
    4670:	d0e7c317 	ldw	r3,-24820(gp)
    4674:	e0bff017 	ldw	r2,-64(fp)
    4678:	11000104 	addi	r4,r2,4
    467c:	e13ff015 	stw	r4,-64(fp)
    4680:	18c00917 	ldw	r3,36(r3)
    4684:	10c00015 	stw	r3,0(r2)
                      break;
    4688:	00000c06 	br	46bc <OSEventPendMulti+0x598>
    468c:	e0bffb17 	ldw	r2,-20(fp)
    4690:	e0bff415 	stw	r2,-48(fp)
  NIOS2_WRITE_STATUS (context);
    4694:	e0bff417 	ldw	r2,-48(fp)
    4698:	1001703a 	wrctl	status,r2
}
    469c:	0001883a 	nop

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
    46a0:	e0bff117 	ldw	r2,-60(fp)
    46a4:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
    46a8:	e0800217 	ldw	r2,8(fp)
    46ac:	00c00044 	movi	r3,1
    46b0:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
    46b4:	e0bffd0b 	ldhu	r2,-12(fp)
    46b8:	00002306 	br	4748 <OSEventPendMulti+0x624>
             }
            *perr = OS_ERR_NONE;
    46bc:	e0800217 	ldw	r2,8(fp)
    46c0:	10000005 	stb	zero,0(r2)
             break;
    46c4:	00001006 	br	4708 <OSEventPendMulti+0x5e4>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
    46c8:	e0bff017 	ldw	r2,-64(fp)
    46cc:	10c00104 	addi	r3,r2,4
    46d0:	e0fff015 	stw	r3,-64(fp)
    46d4:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
    46d8:	e0800217 	ldw	r2,8(fp)
    46dc:	00c00384 	movi	r3,14
    46e0:	10c00005 	stb	r3,0(r2)
             break;
    46e4:	00000806 	br	4708 <OSEventPendMulti+0x5e4>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
    46e8:	e0bff017 	ldw	r2,-64(fp)
    46ec:	10c00104 	addi	r3,r2,4
    46f0:	e0fff015 	stw	r3,-64(fp)
    46f4:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
    46f8:	e0800217 	ldw	r2,8(fp)
    46fc:	00c00284 	movi	r3,10
    4700:	10c00005 	stb	r3,0(r2)
             break;
    4704:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
    4708:	d0a7c317 	ldw	r2,-24820(gp)
    470c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
    4710:	d0a7c317 	ldw	r2,-24820(gp)
    4714:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
    4718:	d0a7c317 	ldw	r2,-24820(gp)
    471c:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    4720:	d0a7c317 	ldw	r2,-24820(gp)
    4724:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
    4728:	d0a7c317 	ldw	r2,-24820(gp)
    472c:	10000915 	stw	zero,36(r2)
    4730:	e0bffb17 	ldw	r2,-20(fp)
    4734:	e0bff315 	stw	r2,-52(fp)
  NIOS2_WRITE_STATUS (context);
    4738:	e0bff317 	ldw	r2,-52(fp)
    473c:	1001703a 	wrctl	status,r2
}
    4740:	0001883a 	nop
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
    4744:	e0bffd0b 	ldhu	r2,-12(fp)
}
    4748:	e037883a 	mov	sp,fp
    474c:	dfc00117 	ldw	ra,4(sp)
    4750:	df000017 	ldw	fp,0(sp)
    4754:	dec00204 	addi	sp,sp,8
    4758:	f800283a 	ret

0000475c <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
    475c:	defffe04 	addi	sp,sp,-8
    4760:	dfc00115 	stw	ra,4(sp)
    4764:	df000015 	stw	fp,0(sp)
    4768:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
    476c:	000eeb80 	call	eeb8 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
    4770:	00054cc0 	call	54cc <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
    4774:	00055140 	call	5514 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
    4778:	00056880 	call	5688 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
    477c:	00053ec0 	call	53ec <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
    4780:	00075d40 	call	75d4 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
    4784:	0007ef80 	call	7ef8 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
    4788:	00090780 	call	9078 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
    478c:	00055800 	call	5580 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
    4790:	00056040 	call	5604 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
    4794:	000eed80 	call	eed8 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
    4798:	0005ef80 	call	5ef8 <OSDebugInit>
#endif
}
    479c:	0001883a 	nop
    47a0:	e037883a 	mov	sp,fp
    47a4:	dfc00117 	ldw	ra,4(sp)
    47a8:	df000017 	ldw	fp,0(sp)
    47ac:	dec00204 	addi	sp,sp,8
    47b0:	f800283a 	ret

000047b4 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
    47b4:	deffff04 	addi	sp,sp,-4
    47b8:	df000015 	stw	fp,0(sp)
    47bc:	d839883a 	mov	fp,sp
    if (OSRunning == OS_TRUE) {
    47c0:	d0a7c143 	ldbu	r2,-24827(gp)
    47c4:	10803fcc 	andi	r2,r2,255
    47c8:	10800058 	cmpnei	r2,r2,1
    47cc:	1000071e 	bne	r2,zero,47ec <OSIntEnter+0x38>
        if (OSIntNesting < 255u) {
    47d0:	d0a7bf43 	ldbu	r2,-24835(gp)
    47d4:	10803fcc 	andi	r2,r2,255
    47d8:	10803fe0 	cmpeqi	r2,r2,255
    47dc:	1000031e 	bne	r2,zero,47ec <OSIntEnter+0x38>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
    47e0:	d0a7bf43 	ldbu	r2,-24835(gp)
    47e4:	10800044 	addi	r2,r2,1
    47e8:	d0a7bf45 	stb	r2,-24835(gp)
        }
    }
}
    47ec:	0001883a 	nop
    47f0:	e037883a 	mov	sp,fp
    47f4:	df000017 	ldw	fp,0(sp)
    47f8:	dec00104 	addi	sp,sp,4
    47fc:	f800283a 	ret

00004800 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
    4800:	defffb04 	addi	sp,sp,-20
    4804:	dfc00415 	stw	ra,16(sp)
    4808:	df000315 	stw	fp,12(sp)
    480c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    4810:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {
    4814:	d0a7c143 	ldbu	r2,-24827(gp)
    4818:	10803fcc 	andi	r2,r2,255
    481c:	10800058 	cmpnei	r2,r2,1
    4820:	10002e1e 	bne	r2,zero,48dc <OSIntExit+0xdc>
  NIOS2_READ_STATUS (context);
    4824:	0005303a 	rdctl	r2,status
    4828:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    482c:	e0fffe17 	ldw	r3,-8(fp)
    4830:	00bfff84 	movi	r2,-2
    4834:	1884703a 	and	r2,r3,r2
    4838:	1001703a 	wrctl	status,r2
  return context;
    483c:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
    4840:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
    4844:	d0a7bf43 	ldbu	r2,-24835(gp)
    4848:	10803fcc 	andi	r2,r2,255
    484c:	10000326 	beq	r2,zero,485c <OSIntExit+0x5c>
            OSIntNesting--;
    4850:	d0a7bf43 	ldbu	r2,-24835(gp)
    4854:	10bfffc4 	addi	r2,r2,-1
    4858:	d0a7bf45 	stb	r2,-24835(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
    485c:	d0a7bf43 	ldbu	r2,-24835(gp)
    4860:	10803fcc 	andi	r2,r2,255
    4864:	1000181e 	bne	r2,zero,48c8 <OSIntExit+0xc8>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
    4868:	d0a7bf83 	ldbu	r2,-24834(gp)
    486c:	10803fcc 	andi	r2,r2,255
    4870:	1000151e 	bne	r2,zero,48c8 <OSIntExit+0xc8>
                OS_SchedNew();
    4874:	00058fc0 	call	58fc <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
    4878:	d0e7c003 	ldbu	r3,-24832(gp)
    487c:	d0a7bfc3 	ldbu	r2,-24833(gp)
    4880:	18c03fcc 	andi	r3,r3,255
    4884:	10803fcc 	andi	r2,r2,255
    4888:	18800f26 	beq	r3,r2,48c8 <OSIntExit+0xc8>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
    488c:	d0a7c003 	ldbu	r2,-24832(gp)
    4890:	10803fcc 	andi	r2,r2,255
    4894:	100690ba 	slli	r3,r2,2
    4898:	008000b4 	movhi	r2,2
    489c:	1885883a 	add	r2,r3,r2
    48a0:	10a57d17 	ldw	r2,-27148(r2)
    48a4:	d0a7c515 	stw	r2,-24812(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
    48a8:	d0a7c517 	ldw	r2,-24812(gp)
    48ac:	10c00e17 	ldw	r3,56(r2)
    48b0:	18c00044 	addi	r3,r3,1
    48b4:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
    48b8:	d0a7b917 	ldw	r2,-24860(gp)
    48bc:	10800044 	addi	r2,r2,1
    48c0:	d0a7b915 	stw	r2,-24860(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
    48c4:	000ebf40 	call	ebf4 <OSCtxSw>
    48c8:	e0bfff17 	ldw	r2,-4(fp)
    48cc:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
    48d0:	e0bffd17 	ldw	r2,-12(fp)
    48d4:	1001703a 	wrctl	status,r2
}
    48d8:	0001883a 	nop
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
    48dc:	0001883a 	nop
    48e0:	e037883a 	mov	sp,fp
    48e4:	dfc00117 	ldw	ra,4(sp)
    48e8:	df000017 	ldw	fp,0(sp)
    48ec:	dec00204 	addi	sp,sp,8
    48f0:	f800283a 	ret

000048f4 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
    48f4:	defffc04 	addi	sp,sp,-16
    48f8:	df000315 	stw	fp,12(sp)
    48fc:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    4900:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
    4904:	d0a7c143 	ldbu	r2,-24827(gp)
    4908:	10803fcc 	andi	r2,r2,255
    490c:	10800058 	cmpnei	r2,r2,1
    4910:	1000171e 	bne	r2,zero,4970 <OSSchedLock+0x7c>
  NIOS2_READ_STATUS (context);
    4914:	0005303a 	rdctl	r2,status
    4918:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    491c:	e0fffe17 	ldw	r3,-8(fp)
    4920:	00bfff84 	movi	r2,-2
    4924:	1884703a 	and	r2,r3,r2
    4928:	1001703a 	wrctl	status,r2
  return context;
    492c:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
    4930:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
    4934:	d0a7bf43 	ldbu	r2,-24835(gp)
    4938:	10803fcc 	andi	r2,r2,255
    493c:	1000071e 	bne	r2,zero,495c <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
    4940:	d0a7bf83 	ldbu	r2,-24834(gp)
    4944:	10803fcc 	andi	r2,r2,255
    4948:	10803fe0 	cmpeqi	r2,r2,255
    494c:	1000031e 	bne	r2,zero,495c <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
    4950:	d0a7bf83 	ldbu	r2,-24834(gp)
    4954:	10800044 	addi	r2,r2,1
    4958:	d0a7bf85 	stb	r2,-24834(gp)
    495c:	e0bfff17 	ldw	r2,-4(fp)
    4960:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
    4964:	e0bffd17 	ldw	r2,-12(fp)
    4968:	1001703a 	wrctl	status,r2
}
    496c:	0001883a 	nop
            }
        }
        OS_EXIT_CRITICAL();
    }
}
    4970:	0001883a 	nop
    4974:	e037883a 	mov	sp,fp
    4978:	df000017 	ldw	fp,0(sp)
    497c:	dec00104 	addi	sp,sp,4
    4980:	f800283a 	ret

00004984 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
    4984:	defff804 	addi	sp,sp,-32
    4988:	dfc00715 	stw	ra,28(sp)
    498c:	df000615 	stw	fp,24(sp)
    4990:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    4994:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
    4998:	d0a7c143 	ldbu	r2,-24827(gp)
    499c:	10803fcc 	andi	r2,r2,255
    49a0:	10800058 	cmpnei	r2,r2,1
    49a4:	10002a1e 	bne	r2,zero,4a50 <OSSchedUnlock+0xcc>
  NIOS2_READ_STATUS (context);
    49a8:	0005303a 	rdctl	r2,status
    49ac:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    49b0:	e0fffe17 	ldw	r3,-8(fp)
    49b4:	00bfff84 	movi	r2,-2
    49b8:	1884703a 	and	r2,r3,r2
    49bc:	1001703a 	wrctl	status,r2
  return context;
    49c0:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
    49c4:	e0bfff15 	stw	r2,-4(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
    49c8:	d0a7bf83 	ldbu	r2,-24834(gp)
    49cc:	10803fcc 	andi	r2,r2,255
    49d0:	10001a26 	beq	r2,zero,4a3c <OSSchedUnlock+0xb8>
            OSLockNesting--;                               /* Decrement lock nesting level             */
    49d4:	d0a7bf83 	ldbu	r2,-24834(gp)
    49d8:	10bfffc4 	addi	r2,r2,-1
    49dc:	d0a7bf85 	stb	r2,-24834(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
    49e0:	d0a7bf83 	ldbu	r2,-24834(gp)
    49e4:	10803fcc 	andi	r2,r2,255
    49e8:	10000f1e 	bne	r2,zero,4a28 <OSSchedUnlock+0xa4>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
    49ec:	d0a7bf43 	ldbu	r2,-24835(gp)
    49f0:	10803fcc 	andi	r2,r2,255
    49f4:	1000071e 	bne	r2,zero,4a14 <OSSchedUnlock+0x90>
    49f8:	e0bfff17 	ldw	r2,-4(fp)
    49fc:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
    4a00:	e0bffd17 	ldw	r2,-12(fp)
    4a04:	1001703a 	wrctl	status,r2
}
    4a08:	0001883a 	nop
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
    4a0c:	00058300 	call	5830 <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
    4a10:	00000f06 	br	4a50 <OSSchedUnlock+0xcc>
    4a14:	e0bfff17 	ldw	r2,-4(fp)
    4a18:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    4a1c:	e0bffc17 	ldw	r2,-16(fp)
    4a20:	1001703a 	wrctl	status,r2
}
    4a24:	00000a06 	br	4a50 <OSSchedUnlock+0xcc>
    4a28:	e0bfff17 	ldw	r2,-4(fp)
    4a2c:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    4a30:	e0bffb17 	ldw	r2,-20(fp)
    4a34:	1001703a 	wrctl	status,r2
}
    4a38:	00000506 	br	4a50 <OSSchedUnlock+0xcc>
    4a3c:	e0bfff17 	ldw	r2,-4(fp)
    4a40:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
    4a44:	e0bffa17 	ldw	r2,-24(fp)
    4a48:	1001703a 	wrctl	status,r2
}
    4a4c:	0001883a 	nop
    4a50:	0001883a 	nop
    4a54:	e037883a 	mov	sp,fp
    4a58:	dfc00117 	ldw	ra,4(sp)
    4a5c:	df000017 	ldw	fp,0(sp)
    4a60:	dec00204 	addi	sp,sp,8
    4a64:	f800283a 	ret

00004a68 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
    4a68:	defffe04 	addi	sp,sp,-8
    4a6c:	dfc00115 	stw	ra,4(sp)
    4a70:	df000015 	stw	fp,0(sp)
    4a74:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
    4a78:	d0a7c143 	ldbu	r2,-24827(gp)
    4a7c:	10803fcc 	andi	r2,r2,255
    4a80:	10000d1e 	bne	r2,zero,4ab8 <OSStart+0x50>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
    4a84:	00058fc0 	call	58fc <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
    4a88:	d0a7c003 	ldbu	r2,-24832(gp)
    4a8c:	d0a7bfc5 	stb	r2,-24833(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
    4a90:	d0a7c003 	ldbu	r2,-24832(gp)
    4a94:	10803fcc 	andi	r2,r2,255
    4a98:	100690ba 	slli	r3,r2,2
    4a9c:	008000b4 	movhi	r2,2
    4aa0:	1885883a 	add	r2,r3,r2
    4aa4:	10a57d17 	ldw	r2,-27148(r2)
    4aa8:	d0a7c515 	stw	r2,-24812(gp)
        OSTCBCur      = OSTCBHighRdy;
    4aac:	d0a7c517 	ldw	r2,-24812(gp)
    4ab0:	d0a7c315 	stw	r2,-24820(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
    4ab4:	000ec800 	call	ec80 <OSStartHighRdy>
    }
}
    4ab8:	0001883a 	nop
    4abc:	e037883a 	mov	sp,fp
    4ac0:	dfc00117 	ldw	ra,4(sp)
    4ac4:	df000017 	ldw	fp,0(sp)
    4ac8:	dec00204 	addi	sp,sp,8
    4acc:	f800283a 	ret

00004ad0 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
    4ad0:	defff904 	addi	sp,sp,-28
    4ad4:	dfc00615 	stw	ra,24(sp)
    4ad8:	df000515 	stw	fp,20(sp)
    4adc:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    4ae0:	e03fff15 	stw	zero,-4(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
    4ae4:	01000084 	movi	r4,2
    4ae8:	000b3080 	call	b308 <OSTimeDly>
  NIOS2_READ_STATUS (context);
    4aec:	0005303a 	rdctl	r2,status
    4af0:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4af4:	e0fffb17 	ldw	r3,-20(fp)
    4af8:	00bfff84 	movi	r2,-2
    4afc:	1884703a 	and	r2,r3,r2
    4b00:	1001703a 	wrctl	status,r2
  return context;
    4b04:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
    4b08:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
    4b0c:	d027c215 	stw	zero,-24824(gp)
    4b10:	e0bfff17 	ldw	r2,-4(fp)
    4b14:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    4b18:	e0bffc17 	ldw	r2,-16(fp)
    4b1c:	1001703a 	wrctl	status,r2
}
    4b20:	0001883a 	nop
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
    4b24:	0009883a 	mov	r4,zero
    4b28:	000b3080 	call	b308 <OSTimeDly>
  NIOS2_READ_STATUS (context);
    4b2c:	0005303a 	rdctl	r2,status
    4b30:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4b34:	e0fffd17 	ldw	r3,-12(fp)
    4b38:	00bfff84 	movi	r2,-2
    4b3c:	1884703a 	and	r2,r3,r2
    4b40:	1001703a 	wrctl	status,r2
  return context;
    4b44:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
    4b48:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
    4b4c:	d0a7c217 	ldw	r2,-24824(gp)
    4b50:	d0a7bd15 	stw	r2,-24844(gp)
    OSStatRdy    = OS_TRUE;
    4b54:	00800044 	movi	r2,1
    4b58:	d0a7bf05 	stb	r2,-24836(gp)
    4b5c:	e0bfff17 	ldw	r2,-4(fp)
    4b60:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
    4b64:	e0bffe17 	ldw	r2,-8(fp)
    4b68:	1001703a 	wrctl	status,r2
}
    4b6c:	0001883a 	nop
    OS_EXIT_CRITICAL();
}
    4b70:	0001883a 	nop
    4b74:	e037883a 	mov	sp,fp
    4b78:	dfc00117 	ldw	ra,4(sp)
    4b7c:	df000017 	ldw	fp,0(sp)
    4b80:	dec00204 	addi	sp,sp,8
    4b84:	f800283a 	ret

00004b88 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
    4b88:	defff704 	addi	sp,sp,-36
    4b8c:	dfc00815 	stw	ra,32(sp)
    4b90:	df000715 	stw	fp,28(sp)
    4b94:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    4b98:	e03ffd15 	stw	zero,-12(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
    4b9c:	000ee980 	call	ee98 <OSTimeTickHook>
  NIOS2_READ_STATUS (context);
    4ba0:	0005303a 	rdctl	r2,status
    4ba4:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4ba8:	e0fffb17 	ldw	r3,-20(fp)
    4bac:	00bfff84 	movi	r2,-2
    4bb0:	1884703a 	and	r2,r3,r2
    4bb4:	1001703a 	wrctl	status,r2
  return context;
    4bb8:	e0bffb17 	ldw	r2,-20(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
    4bbc:	e0bffd15 	stw	r2,-12(fp)
    OSTime++;
    4bc0:	d0a7ca17 	ldw	r2,-24792(gp)
    4bc4:	10800044 	addi	r2,r2,1
    4bc8:	d0a7ca15 	stw	r2,-24792(gp)
    4bcc:	e0bffd17 	ldw	r2,-12(fp)
    4bd0:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    4bd4:	e0bffc17 	ldw	r2,-16(fp)
    4bd8:	1001703a 	wrctl	status,r2
}
    4bdc:	0001883a 	nop
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
    4be0:	d0a7c143 	ldbu	r2,-24827(gp)
    4be4:	10803fcc 	andi	r2,r2,255
    4be8:	10800058 	cmpnei	r2,r2,1
    4bec:	10006e1e 	bne	r2,zero,4da8 <OSTimeTick+0x220>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
    4bf0:	d0a7c703 	ldbu	r2,-24804(gp)
    4bf4:	10803fcc 	andi	r2,r2,255
    4bf8:	10c000a0 	cmpeqi	r3,r2,2
    4bfc:	18000b1e 	bne	r3,zero,4c2c <OSTimeTick+0xa4>
    4c00:	10c000c8 	cmpgei	r3,r2,3
    4c04:	18000e1e 	bne	r3,zero,4c40 <OSTimeTick+0xb8>
    4c08:	10000326 	beq	r2,zero,4c18 <OSTimeTick+0x90>
    4c0c:	10800060 	cmpeqi	r2,r2,1
    4c10:	1000041e 	bne	r2,zero,4c24 <OSTimeTick+0x9c>
    4c14:	00000a06 	br	4c40 <OSTimeTick+0xb8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
    4c18:	00800044 	movi	r2,1
    4c1c:	e0bffec5 	stb	r2,-5(fp)
                 break;
    4c20:	00000b06 	br	4c50 <OSTimeTick+0xc8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
    4c24:	e03ffec5 	stb	zero,-5(fp)
                 break;
    4c28:	00000906 	br	4c50 <OSTimeTick+0xc8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
    4c2c:	00800044 	movi	r2,1
    4c30:	e0bffec5 	stb	r2,-5(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
    4c34:	00800044 	movi	r2,1
    4c38:	d0a7c705 	stb	r2,-24804(gp)
                 break;
    4c3c:	00000406 	br	4c50 <OSTimeTick+0xc8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
    4c40:	00800044 	movi	r2,1
    4c44:	e0bffec5 	stb	r2,-5(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
    4c48:	d027c705 	stb	zero,-24804(gp)
                 break;
    4c4c:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
    4c50:	e0bffec3 	ldbu	r2,-5(fp)
    4c54:	10005326 	beq	r2,zero,4da4 <OSTimeTick+0x21c>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
    4c58:	d0a7c617 	ldw	r2,-24808(gp)
    4c5c:	e0bfff15 	stw	r2,-4(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
    4c60:	00004a06 	br	4d8c <OSTimeTick+0x204>
  NIOS2_READ_STATUS (context);
    4c64:	0005303a 	rdctl	r2,status
    4c68:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4c6c:	e0fffa17 	ldw	r3,-24(fp)
    4c70:	00bfff84 	movi	r2,-2
    4c74:	1884703a 	and	r2,r3,r2
    4c78:	1001703a 	wrctl	status,r2
  return context;
    4c7c:	e0bffa17 	ldw	r2,-24(fp)
            OS_ENTER_CRITICAL();
    4c80:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
    4c84:	e0bfff17 	ldw	r2,-4(fp)
    4c88:	10800b8b 	ldhu	r2,46(r2)
    4c8c:	10bfffcc 	andi	r2,r2,65535
    4c90:	10003626 	beq	r2,zero,4d6c <OSTimeTick+0x1e4>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
    4c94:	e0bfff17 	ldw	r2,-4(fp)
    4c98:	10800b8b 	ldhu	r2,46(r2)
    4c9c:	10bfffc4 	addi	r2,r2,-1
    4ca0:	1007883a 	mov	r3,r2
    4ca4:	e0bfff17 	ldw	r2,-4(fp)
    4ca8:	10c00b8d 	sth	r3,46(r2)
    4cac:	e0bfff17 	ldw	r2,-4(fp)
    4cb0:	10800b8b 	ldhu	r2,46(r2)
    4cb4:	10bfffcc 	andi	r2,r2,65535
    4cb8:	10002c1e 	bne	r2,zero,4d6c <OSTimeTick+0x1e4>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
    4cbc:	e0bfff17 	ldw	r2,-4(fp)
    4cc0:	10800c03 	ldbu	r2,48(r2)
    4cc4:	10803fcc 	andi	r2,r2,255
    4cc8:	10800dcc 	andi	r2,r2,55
    4ccc:	10000b26 	beq	r2,zero,4cfc <OSTimeTick+0x174>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
    4cd0:	e0bfff17 	ldw	r2,-4(fp)
    4cd4:	10c00c03 	ldbu	r3,48(r2)
    4cd8:	00bff204 	movi	r2,-56
    4cdc:	1884703a 	and	r2,r3,r2
    4ce0:	1007883a 	mov	r3,r2
    4ce4:	e0bfff17 	ldw	r2,-4(fp)
    4ce8:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
    4cec:	e0bfff17 	ldw	r2,-4(fp)
    4cf0:	00c00044 	movi	r3,1
    4cf4:	10c00c45 	stb	r3,49(r2)
    4cf8:	00000206 	br	4d04 <OSTimeTick+0x17c>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
    4cfc:	e0bfff17 	ldw	r2,-4(fp)
    4d00:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
    4d04:	e0bfff17 	ldw	r2,-4(fp)
    4d08:	10800c03 	ldbu	r2,48(r2)
    4d0c:	10803fcc 	andi	r2,r2,255
    4d10:	1080020c 	andi	r2,r2,8
    4d14:	1000151e 	bne	r2,zero,4d6c <OSTimeTick+0x1e4>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
    4d18:	e0bfff17 	ldw	r2,-4(fp)
    4d1c:	10c00d83 	ldbu	r3,54(r2)
    4d20:	d0a7c043 	ldbu	r2,-24831(gp)
    4d24:	1884b03a 	or	r2,r3,r2
    4d28:	d0a7c045 	stb	r2,-24831(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    4d2c:	e0bfff17 	ldw	r2,-4(fp)
    4d30:	10800d03 	ldbu	r2,52(r2)
    4d34:	10c03fcc 	andi	r3,r2,255
    4d38:	d0a7c084 	addi	r2,gp,-24830
    4d3c:	1885883a 	add	r2,r3,r2
    4d40:	11000003 	ldbu	r4,0(r2)
    4d44:	e0bfff17 	ldw	r2,-4(fp)
    4d48:	10800d43 	ldbu	r2,53(r2)
    4d4c:	e0ffff17 	ldw	r3,-4(fp)
    4d50:	18c00d03 	ldbu	r3,52(r3)
    4d54:	18c03fcc 	andi	r3,r3,255
    4d58:	2084b03a 	or	r2,r4,r2
    4d5c:	1009883a 	mov	r4,r2
    4d60:	d0a7c084 	addi	r2,gp,-24830
    4d64:	1885883a 	add	r2,r3,r2
    4d68:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
    4d6c:	e0bfff17 	ldw	r2,-4(fp)
    4d70:	10800517 	ldw	r2,20(r2)
    4d74:	e0bfff15 	stw	r2,-4(fp)
    4d78:	e0bffd17 	ldw	r2,-12(fp)
    4d7c:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
    4d80:	e0bff917 	ldw	r2,-28(fp)
    4d84:	1001703a 	wrctl	status,r2
}
    4d88:	0001883a 	nop
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
    4d8c:	e0bfff17 	ldw	r2,-4(fp)
    4d90:	10800c83 	ldbu	r2,50(r2)
    4d94:	10803fcc 	andi	r2,r2,255
    4d98:	10800518 	cmpnei	r2,r2,20
    4d9c:	103fb11e 	bne	r2,zero,4c64 <OSTimeTick+0xdc>
    4da0:	00000106 	br	4da8 <OSTimeTick+0x220>
            return;
    4da4:	0001883a 	nop
            OS_EXIT_CRITICAL();
        }
    }
}
    4da8:	e037883a 	mov	sp,fp
    4dac:	dfc00117 	ldw	ra,4(sp)
    4db0:	df000017 	ldw	fp,0(sp)
    4db4:	dec00204 	addi	sp,sp,8
    4db8:	f800283a 	ret

00004dbc <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
    4dbc:	deffff04 	addi	sp,sp,-4
    4dc0:	df000015 	stw	fp,0(sp)
    4dc4:	d839883a 	mov	fp,sp
    return (OS_VERSION);
    4dc8:	00804784 	movi	r2,286
}
    4dcc:	e037883a 	mov	sp,fp
    4dd0:	df000017 	ldw	fp,0(sp)
    4dd4:	dec00104 	addi	sp,sp,4
    4dd8:	f800283a 	ret

00004ddc <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
    4ddc:	deffff04 	addi	sp,sp,-4
    4de0:	df000015 	stw	fp,0(sp)
    4de4:	d839883a 	mov	fp,sp
}
    4de8:	0001883a 	nop
    4dec:	e037883a 	mov	sp,fp
    4df0:	df000017 	ldw	fp,0(sp)
    4df4:	dec00104 	addi	sp,sp,4
    4df8:	f800283a 	ret

00004dfc <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
    4dfc:	defff804 	addi	sp,sp,-32
    4e00:	dfc00715 	stw	ra,28(sp)
    4e04:	df000615 	stw	fp,24(sp)
    4e08:	df000604 	addi	fp,sp,24
    4e0c:	e13ffd15 	stw	r4,-12(fp)
    4e10:	e17ffc15 	stw	r5,-16(fp)
    4e14:	3005883a 	mov	r2,r6
    4e18:	3807883a 	mov	r3,r7
    4e1c:	e0bffb05 	stb	r2,-20(fp)
    4e20:	1805883a 	mov	r2,r3
    4e24:	e0bffa05 	stb	r2,-24(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
    4e28:	e0bffd17 	ldw	r2,-12(fp)
    4e2c:	10800283 	ldbu	r2,10(r2)
    4e30:	10c03fcc 	andi	r3,r2,255
    4e34:	00800074 	movhi	r2,1
    4e38:	1885883a 	add	r2,r3,r2
    4e3c:	10be0603 	ldbu	r2,-2024(r2)
    4e40:	e0bfffc5 	stb	r2,-1(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
    4e44:	e0bfffc3 	ldbu	r2,-1(fp)
    4e48:	e0fffd17 	ldw	r3,-12(fp)
    4e4c:	1885883a 	add	r2,r3,r2
    4e50:	108002c3 	ldbu	r2,11(r2)
    4e54:	10c03fcc 	andi	r3,r2,255
    4e58:	00800074 	movhi	r2,1
    4e5c:	1885883a 	add	r2,r3,r2
    4e60:	10be0603 	ldbu	r2,-2024(r2)
    4e64:	e0bfff85 	stb	r2,-2(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
    4e68:	e0bfffc3 	ldbu	r2,-1(fp)
    4e6c:	100490fa 	slli	r2,r2,3
    4e70:	1007883a 	mov	r3,r2
    4e74:	e0bfff83 	ldbu	r2,-2(fp)
    4e78:	10c5883a 	add	r2,r2,r3
    4e7c:	e0bfff45 	stb	r2,-3(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
    4e80:	e0bfff43 	ldbu	r2,-3(fp)
    4e84:	100690ba 	slli	r3,r2,2
    4e88:	008000b4 	movhi	r2,2
    4e8c:	1885883a 	add	r2,r3,r2
    4e90:	10a57d17 	ldw	r2,-27148(r2)
    4e94:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
    4e98:	e0bffe17 	ldw	r2,-8(fp)
    4e9c:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
    4ea0:	e0bffe17 	ldw	r2,-8(fp)
    4ea4:	e0fffc17 	ldw	r3,-16(fp)
    4ea8:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
    4eac:	e0bffe17 	ldw	r2,-8(fp)
    4eb0:	10800c03 	ldbu	r2,48(r2)
    4eb4:	1007883a 	mov	r3,r2
    4eb8:	e0bffb03 	ldbu	r2,-20(fp)
    4ebc:	0084303a 	nor	r2,zero,r2
    4ec0:	1884703a 	and	r2,r3,r2
    4ec4:	1007883a 	mov	r3,r2
    4ec8:	e0bffe17 	ldw	r2,-8(fp)
    4ecc:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
    4ed0:	e0bffe17 	ldw	r2,-8(fp)
    4ed4:	e0fffa03 	ldbu	r3,-24(fp)
    4ed8:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
    4edc:	e0bffe17 	ldw	r2,-8(fp)
    4ee0:	10800c03 	ldbu	r2,48(r2)
    4ee4:	10803fcc 	andi	r2,r2,255
    4ee8:	1080020c 	andi	r2,r2,8
    4eec:	1000111e 	bne	r2,zero,4f34 <OS_EventTaskRdy+0x138>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
    4ef0:	e0bffe17 	ldw	r2,-8(fp)
    4ef4:	10c00d83 	ldbu	r3,54(r2)
    4ef8:	d0a7c043 	ldbu	r2,-24831(gp)
    4efc:	1884b03a 	or	r2,r3,r2
    4f00:	d0a7c045 	stb	r2,-24831(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
    4f04:	e0ffffc3 	ldbu	r3,-1(fp)
    4f08:	d0a7c084 	addi	r2,gp,-24830
    4f0c:	1885883a 	add	r2,r3,r2
    4f10:	11000003 	ldbu	r4,0(r2)
    4f14:	e0bffe17 	ldw	r2,-8(fp)
    4f18:	10800d43 	ldbu	r2,53(r2)
    4f1c:	e0ffffc3 	ldbu	r3,-1(fp)
    4f20:	2084b03a 	or	r2,r4,r2
    4f24:	1009883a 	mov	r4,r2
    4f28:	d0a7c084 	addi	r2,gp,-24830
    4f2c:	1885883a 	add	r2,r3,r2
    4f30:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
    4f34:	e17ffd17 	ldw	r5,-12(fp)
    4f38:	e13ffe17 	ldw	r4,-8(fp)
    4f3c:	00051d40 	call	51d4 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
    4f40:	e0bffe17 	ldw	r2,-8(fp)
    4f44:	10800817 	ldw	r2,32(r2)
    4f48:	10000826 	beq	r2,zero,4f6c <OS_EventTaskRdy+0x170>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
    4f4c:	e0bffe17 	ldw	r2,-8(fp)
    4f50:	10800817 	ldw	r2,32(r2)
    4f54:	100b883a 	mov	r5,r2
    4f58:	e13ffe17 	ldw	r4,-8(fp)
    4f5c:	00052840 	call	5284 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
    4f60:	e0bffe17 	ldw	r2,-8(fp)
    4f64:	e0fffd17 	ldw	r3,-12(fp)
    4f68:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
    4f6c:	e0bfff43 	ldbu	r2,-3(fp)
}
    4f70:	e037883a 	mov	sp,fp
    4f74:	dfc00117 	ldw	ra,4(sp)
    4f78:	df000017 	ldw	fp,0(sp)
    4f7c:	dec00204 	addi	sp,sp,8
    4f80:	f800283a 	ret

00004f84 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
    4f84:	defffd04 	addi	sp,sp,-12
    4f88:	df000215 	stw	fp,8(sp)
    4f8c:	df000204 	addi	fp,sp,8
    4f90:	e13ffe15 	stw	r4,-8(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
    4f94:	d0a7c317 	ldw	r2,-24820(gp)
    4f98:	e0fffe17 	ldw	r3,-8(fp)
    4f9c:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
    4fa0:	d0a7c317 	ldw	r2,-24820(gp)
    4fa4:	10800d03 	ldbu	r2,52(r2)
    4fa8:	10803fcc 	andi	r2,r2,255
    4fac:	e0fffe17 	ldw	r3,-8(fp)
    4fb0:	1885883a 	add	r2,r3,r2
    4fb4:	110002c3 	ldbu	r4,11(r2)
    4fb8:	d0a7c317 	ldw	r2,-24820(gp)
    4fbc:	10c00d43 	ldbu	r3,53(r2)
    4fc0:	d0a7c317 	ldw	r2,-24820(gp)
    4fc4:	10800d03 	ldbu	r2,52(r2)
    4fc8:	10803fcc 	andi	r2,r2,255
    4fcc:	20c6b03a 	or	r3,r4,r3
    4fd0:	1809883a 	mov	r4,r3
    4fd4:	e0fffe17 	ldw	r3,-8(fp)
    4fd8:	1885883a 	add	r2,r3,r2
    4fdc:	110002c5 	stb	r4,11(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
    4fe0:	e0bffe17 	ldw	r2,-8(fp)
    4fe4:	10c00283 	ldbu	r3,10(r2)
    4fe8:	d0a7c317 	ldw	r2,-24820(gp)
    4fec:	10800d83 	ldbu	r2,54(r2)
    4ff0:	1884b03a 	or	r2,r3,r2
    4ff4:	1007883a 	mov	r3,r2
    4ff8:	e0bffe17 	ldw	r2,-8(fp)
    4ffc:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    5000:	d0a7c317 	ldw	r2,-24820(gp)
    5004:	10800d03 	ldbu	r2,52(r2)
    5008:	e0bfffc5 	stb	r2,-1(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
    500c:	e0ffffc3 	ldbu	r3,-1(fp)
    5010:	d0a7c084 	addi	r2,gp,-24830
    5014:	1885883a 	add	r2,r3,r2
    5018:	10800003 	ldbu	r2,0(r2)
    501c:	1007883a 	mov	r3,r2
    5020:	d0a7c317 	ldw	r2,-24820(gp)
    5024:	10800d43 	ldbu	r2,53(r2)
    5028:	0084303a 	nor	r2,zero,r2
    502c:	1884703a 	and	r2,r3,r2
    5030:	e0ffffc3 	ldbu	r3,-1(fp)
    5034:	1009883a 	mov	r4,r2
    5038:	d0a7c084 	addi	r2,gp,-24830
    503c:	1885883a 	add	r2,r3,r2
    5040:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
    5044:	e0ffffc3 	ldbu	r3,-1(fp)
    5048:	d0a7c084 	addi	r2,gp,-24830
    504c:	1885883a 	add	r2,r3,r2
    5050:	10800003 	ldbu	r2,0(r2)
    5054:	10803fcc 	andi	r2,r2,255
    5058:	1000071e 	bne	r2,zero,5078 <OS_EventTaskWait+0xf4>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
    505c:	d0a7c317 	ldw	r2,-24820(gp)
    5060:	10800d83 	ldbu	r2,54(r2)
    5064:	0084303a 	nor	r2,zero,r2
    5068:	1007883a 	mov	r3,r2
    506c:	d0a7c043 	ldbu	r2,-24831(gp)
    5070:	1884703a 	and	r2,r3,r2
    5074:	d0a7c045 	stb	r2,-24831(gp)
    }
}
    5078:	0001883a 	nop
    507c:	e037883a 	mov	sp,fp
    5080:	df000017 	ldw	fp,0(sp)
    5084:	dec00104 	addi	sp,sp,4
    5088:	f800283a 	ret

0000508c <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
    508c:	defffb04 	addi	sp,sp,-20
    5090:	df000415 	stw	fp,16(sp)
    5094:	df000404 	addi	fp,sp,16
    5098:	e13ffc15 	stw	r4,-16(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    509c:	d0a7c317 	ldw	r2,-24820(gp)
    50a0:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
    50a4:	d0a7c317 	ldw	r2,-24820(gp)
    50a8:	e0fffc17 	ldw	r3,-16(fp)
    50ac:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
    50b0:	e0bffc17 	ldw	r2,-16(fp)
    50b4:	e0bfff15 	stw	r2,-4(fp)
    pevent  = *pevents;
    50b8:	e0bfff17 	ldw	r2,-4(fp)
    50bc:	10800017 	ldw	r2,0(r2)
    50c0:	e0bffe15 	stw	r2,-8(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
    50c4:	00001e06 	br	5140 <OS_EventTaskWaitMulti+0xb4>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
    50c8:	d0a7c317 	ldw	r2,-24820(gp)
    50cc:	10800d03 	ldbu	r2,52(r2)
    50d0:	10803fcc 	andi	r2,r2,255
    50d4:	e0fffe17 	ldw	r3,-8(fp)
    50d8:	1885883a 	add	r2,r3,r2
    50dc:	110002c3 	ldbu	r4,11(r2)
    50e0:	d0a7c317 	ldw	r2,-24820(gp)
    50e4:	10c00d43 	ldbu	r3,53(r2)
    50e8:	d0a7c317 	ldw	r2,-24820(gp)
    50ec:	10800d03 	ldbu	r2,52(r2)
    50f0:	10803fcc 	andi	r2,r2,255
    50f4:	20c6b03a 	or	r3,r4,r3
    50f8:	1809883a 	mov	r4,r3
    50fc:	e0fffe17 	ldw	r3,-8(fp)
    5100:	1885883a 	add	r2,r3,r2
    5104:	110002c5 	stb	r4,11(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
    5108:	e0bffe17 	ldw	r2,-8(fp)
    510c:	10c00283 	ldbu	r3,10(r2)
    5110:	d0a7c317 	ldw	r2,-24820(gp)
    5114:	10800d83 	ldbu	r2,54(r2)
    5118:	1884b03a 	or	r2,r3,r2
    511c:	1007883a 	mov	r3,r2
    5120:	e0bffe17 	ldw	r2,-8(fp)
    5124:	10c00285 	stb	r3,10(r2)
        pevents++;
    5128:	e0bfff17 	ldw	r2,-4(fp)
    512c:	10800104 	addi	r2,r2,4
    5130:	e0bfff15 	stw	r2,-4(fp)
        pevent = *pevents;
    5134:	e0bfff17 	ldw	r2,-4(fp)
    5138:	10800017 	ldw	r2,0(r2)
    513c:	e0bffe15 	stw	r2,-8(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
    5140:	e0bffe17 	ldw	r2,-8(fp)
    5144:	103fe01e 	bne	r2,zero,50c8 <OS_EventTaskWaitMulti+0x3c>
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    5148:	d0a7c317 	ldw	r2,-24820(gp)
    514c:	10800d03 	ldbu	r2,52(r2)
    5150:	e0bffdc5 	stb	r2,-9(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
    5154:	e0fffdc3 	ldbu	r3,-9(fp)
    5158:	d0a7c084 	addi	r2,gp,-24830
    515c:	1885883a 	add	r2,r3,r2
    5160:	10800003 	ldbu	r2,0(r2)
    5164:	1007883a 	mov	r3,r2
    5168:	d0a7c317 	ldw	r2,-24820(gp)
    516c:	10800d43 	ldbu	r2,53(r2)
    5170:	0084303a 	nor	r2,zero,r2
    5174:	1884703a 	and	r2,r3,r2
    5178:	e0fffdc3 	ldbu	r3,-9(fp)
    517c:	1009883a 	mov	r4,r2
    5180:	d0a7c084 	addi	r2,gp,-24830
    5184:	1885883a 	add	r2,r3,r2
    5188:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
    518c:	e0fffdc3 	ldbu	r3,-9(fp)
    5190:	d0a7c084 	addi	r2,gp,-24830
    5194:	1885883a 	add	r2,r3,r2
    5198:	10800003 	ldbu	r2,0(r2)
    519c:	10803fcc 	andi	r2,r2,255
    51a0:	1000071e 	bne	r2,zero,51c0 <OS_EventTaskWaitMulti+0x134>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
    51a4:	d0a7c317 	ldw	r2,-24820(gp)
    51a8:	10800d83 	ldbu	r2,54(r2)
    51ac:	0084303a 	nor	r2,zero,r2
    51b0:	1007883a 	mov	r3,r2
    51b4:	d0a7c043 	ldbu	r2,-24831(gp)
    51b8:	1884703a 	and	r2,r3,r2
    51bc:	d0a7c045 	stb	r2,-24831(gp)
    }
}
    51c0:	0001883a 	nop
    51c4:	e037883a 	mov	sp,fp
    51c8:	df000017 	ldw	fp,0(sp)
    51cc:	dec00104 	addi	sp,sp,4
    51d0:	f800283a 	ret

000051d4 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
    51d4:	defffc04 	addi	sp,sp,-16
    51d8:	df000315 	stw	fp,12(sp)
    51dc:	df000304 	addi	fp,sp,12
    51e0:	e13ffe15 	stw	r4,-8(fp)
    51e4:	e17ffd15 	stw	r5,-12(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
    51e8:	e0bffe17 	ldw	r2,-8(fp)
    51ec:	10800d03 	ldbu	r2,52(r2)
    51f0:	e0bfffc5 	stb	r2,-1(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
    51f4:	e0bfffc3 	ldbu	r2,-1(fp)
    51f8:	e0fffd17 	ldw	r3,-12(fp)
    51fc:	1885883a 	add	r2,r3,r2
    5200:	108002c3 	ldbu	r2,11(r2)
    5204:	1007883a 	mov	r3,r2
    5208:	e0bffe17 	ldw	r2,-8(fp)
    520c:	10800d43 	ldbu	r2,53(r2)
    5210:	0084303a 	nor	r2,zero,r2
    5214:	1884703a 	and	r2,r3,r2
    5218:	1007883a 	mov	r3,r2
    521c:	e0bfffc3 	ldbu	r2,-1(fp)
    5220:	1809883a 	mov	r4,r3
    5224:	e0fffd17 	ldw	r3,-12(fp)
    5228:	1885883a 	add	r2,r3,r2
    522c:	110002c5 	stb	r4,11(r2)
    if (pevent->OSEventTbl[y] == 0) {
    5230:	e0bfffc3 	ldbu	r2,-1(fp)
    5234:	e0fffd17 	ldw	r3,-12(fp)
    5238:	1885883a 	add	r2,r3,r2
    523c:	108002c3 	ldbu	r2,11(r2)
    5240:	10803fcc 	andi	r2,r2,255
    5244:	10000a1e 	bne	r2,zero,5270 <OS_EventTaskRemove+0x9c>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
    5248:	e0bffd17 	ldw	r2,-12(fp)
    524c:	10800283 	ldbu	r2,10(r2)
    5250:	1007883a 	mov	r3,r2
    5254:	e0bffe17 	ldw	r2,-8(fp)
    5258:	10800d83 	ldbu	r2,54(r2)
    525c:	0084303a 	nor	r2,zero,r2
    5260:	1884703a 	and	r2,r3,r2
    5264:	1007883a 	mov	r3,r2
    5268:	e0bffd17 	ldw	r2,-12(fp)
    526c:	10c00285 	stb	r3,10(r2)
    }
}
    5270:	0001883a 	nop
    5274:	e037883a 	mov	sp,fp
    5278:	df000017 	ldw	fp,0(sp)
    527c:	dec00104 	addi	sp,sp,4
    5280:	f800283a 	ret

00005284 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
    5284:	defffa04 	addi	sp,sp,-24
    5288:	df000515 	stw	fp,20(sp)
    528c:	df000504 	addi	fp,sp,20
    5290:	e13ffc15 	stw	r4,-16(fp)
    5294:	e17ffb15 	stw	r5,-20(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
    5298:	e0bffc17 	ldw	r2,-16(fp)
    529c:	10800d03 	ldbu	r2,52(r2)
    52a0:	e0bffdc5 	stb	r2,-9(fp)
    bity    =  ptcb->OSTCBBitY;
    52a4:	e0bffc17 	ldw	r2,-16(fp)
    52a8:	10800d83 	ldbu	r2,54(r2)
    52ac:	e0bffd85 	stb	r2,-10(fp)
    bitx    =  ptcb->OSTCBBitX;
    52b0:	e0bffc17 	ldw	r2,-16(fp)
    52b4:	10800d43 	ldbu	r2,53(r2)
    52b8:	e0bffd45 	stb	r2,-11(fp)
    pevents =  pevents_multi;
    52bc:	e0bffb17 	ldw	r2,-20(fp)
    52c0:	e0bfff15 	stw	r2,-4(fp)
    pevent  = *pevents;
    52c4:	e0bfff17 	ldw	r2,-4(fp)
    52c8:	10800017 	ldw	r2,0(r2)
    52cc:	e0bffe15 	stw	r2,-8(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
    52d0:	00002306 	br	5360 <OS_EventTaskRemoveMulti+0xdc>
        pevent->OSEventTbl[y]  &= ~bitx;
    52d4:	e0bffdc3 	ldbu	r2,-9(fp)
    52d8:	e0fffe17 	ldw	r3,-8(fp)
    52dc:	1885883a 	add	r2,r3,r2
    52e0:	108002c3 	ldbu	r2,11(r2)
    52e4:	1007883a 	mov	r3,r2
    52e8:	e0bffd43 	ldbu	r2,-11(fp)
    52ec:	0084303a 	nor	r2,zero,r2
    52f0:	1884703a 	and	r2,r3,r2
    52f4:	1007883a 	mov	r3,r2
    52f8:	e0bffdc3 	ldbu	r2,-9(fp)
    52fc:	1809883a 	mov	r4,r3
    5300:	e0fffe17 	ldw	r3,-8(fp)
    5304:	1885883a 	add	r2,r3,r2
    5308:	110002c5 	stb	r4,11(r2)
        if (pevent->OSEventTbl[y] == 0) {
    530c:	e0bffdc3 	ldbu	r2,-9(fp)
    5310:	e0fffe17 	ldw	r3,-8(fp)
    5314:	1885883a 	add	r2,r3,r2
    5318:	108002c3 	ldbu	r2,11(r2)
    531c:	10803fcc 	andi	r2,r2,255
    5320:	1000091e 	bne	r2,zero,5348 <OS_EventTaskRemoveMulti+0xc4>
            pevent->OSEventGrp &= ~bity;
    5324:	e0bffe17 	ldw	r2,-8(fp)
    5328:	10800283 	ldbu	r2,10(r2)
    532c:	1007883a 	mov	r3,r2
    5330:	e0bffd83 	ldbu	r2,-10(fp)
    5334:	0084303a 	nor	r2,zero,r2
    5338:	1884703a 	and	r2,r3,r2
    533c:	1007883a 	mov	r3,r2
    5340:	e0bffe17 	ldw	r2,-8(fp)
    5344:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
    5348:	e0bfff17 	ldw	r2,-4(fp)
    534c:	10800104 	addi	r2,r2,4
    5350:	e0bfff15 	stw	r2,-4(fp)
        pevent = *pevents;
    5354:	e0bfff17 	ldw	r2,-4(fp)
    5358:	10800017 	ldw	r2,0(r2)
    535c:	e0bffe15 	stw	r2,-8(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
    5360:	e0bffe17 	ldw	r2,-8(fp)
    5364:	103fdb1e 	bne	r2,zero,52d4 <OS_EventTaskRemoveMulti+0x50>
    }
}
    5368:	0001883a 	nop
    536c:	0001883a 	nop
    5370:	e037883a 	mov	sp,fp
    5374:	df000017 	ldw	fp,0(sp)
    5378:	dec00104 	addi	sp,sp,4
    537c:	f800283a 	ret

00005380 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
    5380:	defffc04 	addi	sp,sp,-16
    5384:	df000315 	stw	fp,12(sp)
    5388:	df000304 	addi	fp,sp,12
    538c:	e13ffd15 	stw	r4,-12(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    5390:	e0bffd17 	ldw	r2,-12(fp)
    5394:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
    5398:	e0bffd17 	ldw	r2,-12(fp)
    539c:	108002c4 	addi	r2,r2,11
    53a0:	e0bfff15 	stw	r2,-4(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    53a4:	e03ffec5 	stb	zero,-5(fp)
    53a8:	00000706 	br	53c8 <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
    53ac:	e0bfff17 	ldw	r2,-4(fp)
    53b0:	10c00044 	addi	r3,r2,1
    53b4:	e0ffff15 	stw	r3,-4(fp)
    53b8:	10000005 	stb	zero,0(r2)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    53bc:	e0bffec3 	ldbu	r2,-5(fp)
    53c0:	10800044 	addi	r2,r2,1
    53c4:	e0bffec5 	stb	r2,-5(fp)
    53c8:	e0bffec3 	ldbu	r2,-5(fp)
    53cc:	108000f0 	cmpltui	r2,r2,3
    53d0:	103ff61e 	bne	r2,zero,53ac <OS_EventWaitListInit+0x2c>
    }
}
    53d4:	0001883a 	nop
    53d8:	0001883a 	nop
    53dc:	e037883a 	mov	sp,fp
    53e0:	df000017 	ldw	fp,0(sp)
    53e4:	dec00104 	addi	sp,sp,4
    53e8:	f800283a 	ret

000053ec <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
    53ec:	defffb04 	addi	sp,sp,-20
    53f0:	dfc00415 	stw	ra,16(sp)
    53f4:	df000315 	stw	fp,12(sp)
    53f8:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    53fc:	0142d004 	movi	r5,2880
    5400:	01000074 	movhi	r4,1
    5404:	211dd104 	addi	r4,r4,30532
    5408:	000576c0 	call	576c <OS_MemClr>
    pevent1 = &OSEventTbl[0];
    540c:	00800074 	movhi	r2,1
    5410:	109dd104 	addi	r2,r2,30532
    5414:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
    5418:	00800074 	movhi	r2,1
    541c:	109ddd04 	addi	r2,r2,30580
    5420:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
    5424:	e03fff8d 	sth	zero,-2(fp)
    5428:	00001306 	br	5478 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
    542c:	e0bffe17 	ldw	r2,-8(fp)
    5430:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
    5434:	e0bffe17 	ldw	r2,-8(fp)
    5438:	e0fffd17 	ldw	r3,-12(fp)
    543c:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
    5440:	e0bffe17 	ldw	r2,-8(fp)
    5444:	00c00fc4 	movi	r3,63
    5448:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
    544c:	e0bffe17 	ldw	r2,-8(fp)
    5450:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
    5454:	e0bffe17 	ldw	r2,-8(fp)
    5458:	10800c04 	addi	r2,r2,48
    545c:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
    5460:	e0bffd17 	ldw	r2,-12(fp)
    5464:	10800c04 	addi	r2,r2,48
    5468:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
    546c:	e0bfff8b 	ldhu	r2,-2(fp)
    5470:	10800044 	addi	r2,r2,1
    5474:	e0bfff8d 	sth	r2,-2(fp)
    5478:	e0bfff8b 	ldhu	r2,-2(fp)
    547c:	10800ef0 	cmpltui	r2,r2,59
    5480:	103fea1e 	bne	r2,zero,542c <OS_InitEventList+0x40>
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
    5484:	e0bffe17 	ldw	r2,-8(fp)
    5488:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
    548c:	e0bffe17 	ldw	r2,-8(fp)
    5490:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
    5494:	e0bffe17 	ldw	r2,-8(fp)
    5498:	00c00fc4 	movi	r3,63
    549c:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
    54a0:	e0bffe17 	ldw	r2,-8(fp)
    54a4:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
    54a8:	00800074 	movhi	r2,1
    54ac:	109dd104 	addi	r2,r2,30532
    54b0:	d0a7ba15 	stw	r2,-24856(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
    54b4:	0001883a 	nop
    54b8:	e037883a 	mov	sp,fp
    54bc:	dfc00117 	ldw	ra,4(sp)
    54c0:	df000017 	ldw	fp,0(sp)
    54c4:	dec00204 	addi	sp,sp,8
    54c8:	f800283a 	ret

000054cc <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
    54cc:	deffff04 	addi	sp,sp,-4
    54d0:	df000015 	stw	fp,0(sp)
    54d4:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
    54d8:	d027ca15 	stw	zero,-24792(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
    54dc:	d027bf45 	stb	zero,-24835(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
    54e0:	d027bf85 	stb	zero,-24834(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
    54e4:	d027c185 	stb	zero,-24826(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
    54e8:	d027c145 	stb	zero,-24827(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
    54ec:	d027b915 	stw	zero,-24860(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
    54f0:	d027c215 	stw	zero,-24824(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
    54f4:	d027be15 	stw	zero,-24840(gp)
    OSIdleCtrMax  = 0L;
    54f8:	d027bd15 	stw	zero,-24844(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
    54fc:	d027bf05 	stb	zero,-24836(gp)
#endif
}
    5500:	0001883a 	nop
    5504:	e037883a 	mov	sp,fp
    5508:	df000017 	ldw	fp,0(sp)
    550c:	dec00104 	addi	sp,sp,4
    5510:	f800283a 	ret

00005514 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
    5514:	defffd04 	addi	sp,sp,-12
    5518:	df000215 	stw	fp,8(sp)
    551c:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    5520:	d027c045 	stb	zero,-24831(gp)
    prdytbl       = &OSRdyTbl[0];
    5524:	d0a7c084 	addi	r2,gp,-24830
    5528:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
    552c:	e03fffc5 	stb	zero,-1(fp)
    5530:	00000706 	br	5550 <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
    5534:	e0bffe17 	ldw	r2,-8(fp)
    5538:	10c00044 	addi	r3,r2,1
    553c:	e0fffe15 	stw	r3,-8(fp)
    5540:	10000005 	stb	zero,0(r2)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
    5544:	e0bfffc3 	ldbu	r2,-1(fp)
    5548:	10800044 	addi	r2,r2,1
    554c:	e0bfffc5 	stb	r2,-1(fp)
    5550:	e0bfffc3 	ldbu	r2,-1(fp)
    5554:	108000f0 	cmpltui	r2,r2,3
    5558:	103ff61e 	bne	r2,zero,5534 <OS_InitRdyList+0x20>
    }

    OSPrioCur     = 0;
    555c:	d027bfc5 	stb	zero,-24833(gp)
    OSPrioHighRdy = 0;
    5560:	d027c005 	stb	zero,-24832(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
    5564:	d027c515 	stw	zero,-24812(gp)
    OSTCBCur      = (OS_TCB *)0;
    5568:	d027c315 	stw	zero,-24820(gp)
}
    556c:	0001883a 	nop
    5570:	e037883a 	mov	sp,fp
    5574:	df000017 	ldw	fp,0(sp)
    5578:	dec00104 	addi	sp,sp,4
    557c:	f800283a 	ret

00005580 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
    5580:	defff804 	addi	sp,sp,-32
    5584:	dfc00715 	stw	ra,28(sp)
    5588:	df000615 	stw	fp,24(sp)
    558c:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
    5590:	008000c4 	movi	r2,3
    5594:	d8800415 	stw	r2,16(sp)
    5598:	d8000315 	stw	zero,12(sp)
    559c:	00808004 	movi	r2,512
    55a0:	d8800215 	stw	r2,8(sp)
    55a4:	008000b4 	movhi	r2,2
    55a8:	10a37d04 	addi	r2,r2,-29196
    55ac:	d8800115 	stw	r2,4(sp)
    55b0:	00bfffd4 	movui	r2,65535
    55b4:	d8800015 	stw	r2,0(sp)
    55b8:	01c00504 	movi	r7,20
    55bc:	018000b4 	movhi	r6,2
    55c0:	31a57c04 	addi	r6,r6,-27152
    55c4:	000b883a 	mov	r5,zero
    55c8:	01000034 	movhi	r4,0
    55cc:	21168c04 	addi	r4,r4,23088
    55d0:	000a2200 	call	a220 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
    55d4:	e0bfffc4 	addi	r2,fp,-1
    55d8:	100d883a 	mov	r6,r2
    55dc:	01400074 	movhi	r5,1
    55e0:	297e4604 	addi	r5,r5,-1768
    55e4:	01000504 	movi	r4,20
    55e8:	000aa340 	call	aa34 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
    55ec:	0001883a 	nop
    55f0:	e037883a 	mov	sp,fp
    55f4:	dfc00117 	ldw	ra,4(sp)
    55f8:	df000017 	ldw	fp,0(sp)
    55fc:	dec00204 	addi	sp,sp,8
    5600:	f800283a 	ret

00005604 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
    5604:	defff804 	addi	sp,sp,-32
    5608:	dfc00715 	stw	ra,28(sp)
    560c:	df000615 	stw	fp,24(sp)
    5610:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
    5614:	008000c4 	movi	r2,3
    5618:	d8800415 	stw	r2,16(sp)
    561c:	d8000315 	stw	zero,12(sp)
    5620:	00808004 	movi	r2,512
    5624:	d8800215 	stw	r2,8(sp)
    5628:	008000b4 	movhi	r2,2
    562c:	10a17d04 	addi	r2,r2,-31244
    5630:	d8800115 	stw	r2,4(sp)
    5634:	00bfff94 	movui	r2,65534
    5638:	d8800015 	stw	r2,0(sp)
    563c:	01c004c4 	movi	r7,19
    5640:	018000b4 	movhi	r6,2
    5644:	31a37c04 	addi	r6,r6,-29200
    5648:	000b883a 	mov	r5,zero
    564c:	01000034 	movhi	r4,0
    5650:	2116a404 	addi	r4,r4,23184
    5654:	000a2200 	call	a220 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
    5658:	e0bfffc4 	addi	r2,fp,-1
    565c:	100d883a 	mov	r6,r2
    5660:	01400074 	movhi	r5,1
    5664:	297e4a04 	addi	r5,r5,-1752
    5668:	010004c4 	movi	r4,19
    566c:	000aa340 	call	aa34 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
    5670:	0001883a 	nop
    5674:	e037883a 	mov	sp,fp
    5678:	dfc00117 	ldw	ra,4(sp)
    567c:	df000017 	ldw	fp,0(sp)
    5680:	dec00204 	addi	sp,sp,8
    5684:	f800283a 	ret

00005688 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
    5688:	defffb04 	addi	sp,sp,-20
    568c:	dfc00415 	stw	ra,16(sp)
    5690:	df000315 	stw	fp,12(sp)
    5694:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    5698:	01414404 	movi	r5,1296
    569c:	010000b4 	movhi	r4,2
    56a0:	21259204 	addi	r4,r4,-27064
    56a4:	000576c0 	call	576c <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    56a8:	01401504 	movi	r5,84
    56ac:	010000b4 	movhi	r4,2
    56b0:	21257d04 	addi	r4,r4,-27148
    56b4:	000576c0 	call	576c <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
    56b8:	008000b4 	movhi	r2,2
    56bc:	10a59204 	addi	r2,r2,-27064
    56c0:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
    56c4:	008000b4 	movhi	r2,2
    56c8:	10a5ad04 	addi	r2,r2,-26956
    56cc:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
    56d0:	e03fffc5 	stb	zero,-1(fp)
    56d4:	00001106 	br	571c <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
    56d8:	e0bffe17 	ldw	r2,-8(fp)
    56dc:	e0fffd17 	ldw	r3,-12(fp)
    56e0:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
    56e4:	e0bffe17 	ldw	r2,-8(fp)
    56e8:	00c00fc4 	movi	r3,63
    56ec:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
    56f0:	e0bffe17 	ldw	r2,-8(fp)
    56f4:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
    56f8:	e0bffe17 	ldw	r2,-8(fp)
    56fc:	10801b04 	addi	r2,r2,108
    5700:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
    5704:	e0bffd17 	ldw	r2,-12(fp)
    5708:	10801b04 	addi	r2,r2,108
    570c:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
    5710:	e0bfffc3 	ldbu	r2,-1(fp)
    5714:	10800044 	addi	r2,r2,1
    5718:	e0bfffc5 	stb	r2,-1(fp)
    571c:	e0bfffc3 	ldbu	r2,-1(fp)
    5720:	108002f0 	cmpltui	r2,r2,11
    5724:	103fec1e 	bne	r2,zero,56d8 <OS_InitTCBList+0x50>
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
    5728:	e0bffe17 	ldw	r2,-8(fp)
    572c:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
    5730:	e0bffe17 	ldw	r2,-8(fp)
    5734:	00c00fc4 	movi	r3,63
    5738:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
    573c:	e0bffe17 	ldw	r2,-8(fp)
    5740:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
    5744:	d027c615 	stw	zero,-24808(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
    5748:	008000b4 	movhi	r2,2
    574c:	10a59204 	addi	r2,r2,-27064
    5750:	d0a7c415 	stw	r2,-24816(gp)
}
    5754:	0001883a 	nop
    5758:	e037883a 	mov	sp,fp
    575c:	dfc00117 	ldw	ra,4(sp)
    5760:	df000017 	ldw	fp,0(sp)
    5764:	dec00204 	addi	sp,sp,8
    5768:	f800283a 	ret

0000576c <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    576c:	defffd04 	addi	sp,sp,-12
    5770:	df000215 	stw	fp,8(sp)
    5774:	df000204 	addi	fp,sp,8
    5778:	e13fff15 	stw	r4,-4(fp)
    577c:	2805883a 	mov	r2,r5
    5780:	e0bffe0d 	sth	r2,-8(fp)
    while (size > 0) {
    5784:	00000706 	br	57a4 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
    5788:	e0bfff17 	ldw	r2,-4(fp)
    578c:	10c00044 	addi	r3,r2,1
    5790:	e0ffff15 	stw	r3,-4(fp)
    5794:	10000005 	stb	zero,0(r2)
        size--;
    5798:	e0bffe0b 	ldhu	r2,-8(fp)
    579c:	10bfffc4 	addi	r2,r2,-1
    57a0:	e0bffe0d 	sth	r2,-8(fp)
    while (size > 0) {
    57a4:	e0bffe0b 	ldhu	r2,-8(fp)
    57a8:	103ff71e 	bne	r2,zero,5788 <OS_MemClr+0x1c>
    }
}
    57ac:	0001883a 	nop
    57b0:	0001883a 	nop
    57b4:	e037883a 	mov	sp,fp
    57b8:	df000017 	ldw	fp,0(sp)
    57bc:	dec00104 	addi	sp,sp,4
    57c0:	f800283a 	ret

000057c4 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    57c4:	defffc04 	addi	sp,sp,-16
    57c8:	df000315 	stw	fp,12(sp)
    57cc:	df000304 	addi	fp,sp,12
    57d0:	e13fff15 	stw	r4,-4(fp)
    57d4:	e17ffe15 	stw	r5,-8(fp)
    57d8:	3005883a 	mov	r2,r6
    57dc:	e0bffd0d 	sth	r2,-12(fp)
    while (size > 0) {
    57e0:	00000b06 	br	5810 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
    57e4:	e0fffe17 	ldw	r3,-8(fp)
    57e8:	18800044 	addi	r2,r3,1
    57ec:	e0bffe15 	stw	r2,-8(fp)
    57f0:	e0bfff17 	ldw	r2,-4(fp)
    57f4:	11000044 	addi	r4,r2,1
    57f8:	e13fff15 	stw	r4,-4(fp)
    57fc:	18c00003 	ldbu	r3,0(r3)
    5800:	10c00005 	stb	r3,0(r2)
        size--;
    5804:	e0bffd0b 	ldhu	r2,-12(fp)
    5808:	10bfffc4 	addi	r2,r2,-1
    580c:	e0bffd0d 	sth	r2,-12(fp)
    while (size > 0) {
    5810:	e0bffd0b 	ldhu	r2,-12(fp)
    5814:	103ff31e 	bne	r2,zero,57e4 <OS_MemCopy+0x20>
    }
}
    5818:	0001883a 	nop
    581c:	0001883a 	nop
    5820:	e037883a 	mov	sp,fp
    5824:	df000017 	ldw	fp,0(sp)
    5828:	dec00104 	addi	sp,sp,4
    582c:	f800283a 	ret

00005830 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
    5830:	defffb04 	addi	sp,sp,-20
    5834:	dfc00415 	stw	ra,16(sp)
    5838:	df000315 	stw	fp,12(sp)
    583c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    5840:	e03fff15 	stw	zero,-4(fp)
  NIOS2_READ_STATUS (context);
    5844:	0005303a 	rdctl	r2,status
    5848:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    584c:	e0fffe17 	ldw	r3,-8(fp)
    5850:	00bfff84 	movi	r2,-2
    5854:	1884703a 	and	r2,r3,r2
    5858:	1001703a 	wrctl	status,r2
  return context;
    585c:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
    5860:	e0bfff15 	stw	r2,-4(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
    5864:	d0a7bf43 	ldbu	r2,-24835(gp)
    5868:	10803fcc 	andi	r2,r2,255
    586c:	1000181e 	bne	r2,zero,58d0 <OS_Sched+0xa0>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
    5870:	d0a7bf83 	ldbu	r2,-24834(gp)
    5874:	10803fcc 	andi	r2,r2,255
    5878:	1000151e 	bne	r2,zero,58d0 <OS_Sched+0xa0>
            OS_SchedNew();
    587c:	00058fc0 	call	58fc <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
    5880:	d0e7c003 	ldbu	r3,-24832(gp)
    5884:	d0a7bfc3 	ldbu	r2,-24833(gp)
    5888:	18c03fcc 	andi	r3,r3,255
    588c:	10803fcc 	andi	r2,r2,255
    5890:	18800f26 	beq	r3,r2,58d0 <OS_Sched+0xa0>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
    5894:	d0a7c003 	ldbu	r2,-24832(gp)
    5898:	10803fcc 	andi	r2,r2,255
    589c:	100690ba 	slli	r3,r2,2
    58a0:	008000b4 	movhi	r2,2
    58a4:	1885883a 	add	r2,r3,r2
    58a8:	10a57d17 	ldw	r2,-27148(r2)
    58ac:	d0a7c515 	stw	r2,-24812(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
    58b0:	d0a7c517 	ldw	r2,-24812(gp)
    58b4:	10c00e17 	ldw	r3,56(r2)
    58b8:	18c00044 	addi	r3,r3,1
    58bc:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
    58c0:	d0a7b917 	ldw	r2,-24860(gp)
    58c4:	10800044 	addi	r2,r2,1
    58c8:	d0a7b915 	stw	r2,-24860(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
    58cc:	000ebf40 	call	ebf4 <OSCtxSw>
    58d0:	e0bfff17 	ldw	r2,-4(fp)
    58d4:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
    58d8:	e0bffd17 	ldw	r2,-12(fp)
    58dc:	1001703a 	wrctl	status,r2
}
    58e0:	0001883a 	nop
            }
        }
    }
    OS_EXIT_CRITICAL();
}
    58e4:	0001883a 	nop
    58e8:	e037883a 	mov	sp,fp
    58ec:	dfc00117 	ldw	ra,4(sp)
    58f0:	df000017 	ldw	fp,0(sp)
    58f4:	dec00204 	addi	sp,sp,8
    58f8:	f800283a 	ret

000058fc <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
    58fc:	defffe04 	addi	sp,sp,-8
    5900:	df000115 	stw	fp,4(sp)
    5904:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
    5908:	d0a7c043 	ldbu	r2,-24831(gp)
    590c:	10c03fcc 	andi	r3,r2,255
    5910:	00800074 	movhi	r2,1
    5914:	1885883a 	add	r2,r3,r2
    5918:	10be0603 	ldbu	r2,-2024(r2)
    591c:	e0bfffc5 	stb	r2,-1(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
    5920:	e0bfffc3 	ldbu	r2,-1(fp)
    5924:	100490fa 	slli	r2,r2,3
    5928:	1009883a 	mov	r4,r2
    592c:	e0ffffc3 	ldbu	r3,-1(fp)
    5930:	d0a7c084 	addi	r2,gp,-24830
    5934:	1885883a 	add	r2,r3,r2
    5938:	10800003 	ldbu	r2,0(r2)
    593c:	10c03fcc 	andi	r3,r2,255
    5940:	00800074 	movhi	r2,1
    5944:	1885883a 	add	r2,r3,r2
    5948:	10be0603 	ldbu	r2,-2024(r2)
    594c:	2085883a 	add	r2,r4,r2
    5950:	d0a7c005 	stb	r2,-24832(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
    5954:	0001883a 	nop
    5958:	e037883a 	mov	sp,fp
    595c:	df000017 	ldw	fp,0(sp)
    5960:	dec00104 	addi	sp,sp,4
    5964:	f800283a 	ret

00005968 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
    5968:	defffc04 	addi	sp,sp,-16
    596c:	df000315 	stw	fp,12(sp)
    5970:	df000304 	addi	fp,sp,12
    5974:	e13ffe15 	stw	r4,-8(fp)
    5978:	e17ffd15 	stw	r5,-12(fp)
    INT8U  len;


    len = 0;
    597c:	e03fffc5 	stb	zero,-1(fp)
    while (*psrc != OS_ASCII_NUL) {
    5980:	00000b06 	br	59b0 <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
    5984:	e0fffd17 	ldw	r3,-12(fp)
    5988:	18800044 	addi	r2,r3,1
    598c:	e0bffd15 	stw	r2,-12(fp)
    5990:	e0bffe17 	ldw	r2,-8(fp)
    5994:	11000044 	addi	r4,r2,1
    5998:	e13ffe15 	stw	r4,-8(fp)
    599c:	18c00003 	ldbu	r3,0(r3)
    59a0:	10c00005 	stb	r3,0(r2)
        len++;
    59a4:	e0bfffc3 	ldbu	r2,-1(fp)
    59a8:	10800044 	addi	r2,r2,1
    59ac:	e0bfffc5 	stb	r2,-1(fp)
    while (*psrc != OS_ASCII_NUL) {
    59b0:	e0bffd17 	ldw	r2,-12(fp)
    59b4:	10800003 	ldbu	r2,0(r2)
    59b8:	10803fcc 	andi	r2,r2,255
    59bc:	103ff11e 	bne	r2,zero,5984 <OS_StrCopy+0x1c>
    }
    *pdest = OS_ASCII_NUL;
    59c0:	e0bffe17 	ldw	r2,-8(fp)
    59c4:	10000005 	stb	zero,0(r2)
    return (len);
    59c8:	e0bfffc3 	ldbu	r2,-1(fp)
}
    59cc:	e037883a 	mov	sp,fp
    59d0:	df000017 	ldw	fp,0(sp)
    59d4:	dec00104 	addi	sp,sp,4
    59d8:	f800283a 	ret

000059dc <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
    59dc:	defffd04 	addi	sp,sp,-12
    59e0:	df000215 	stw	fp,8(sp)
    59e4:	df000204 	addi	fp,sp,8
    59e8:	e13ffe15 	stw	r4,-8(fp)
    INT8U  len;


    len = 0;
    59ec:	e03fffc5 	stb	zero,-1(fp)
    while (*psrc != OS_ASCII_NUL) {
    59f0:	00000606 	br	5a0c <OS_StrLen+0x30>
        psrc++;
    59f4:	e0bffe17 	ldw	r2,-8(fp)
    59f8:	10800044 	addi	r2,r2,1
    59fc:	e0bffe15 	stw	r2,-8(fp)
        len++;
    5a00:	e0bfffc3 	ldbu	r2,-1(fp)
    5a04:	10800044 	addi	r2,r2,1
    5a08:	e0bfffc5 	stb	r2,-1(fp)
    while (*psrc != OS_ASCII_NUL) {
    5a0c:	e0bffe17 	ldw	r2,-8(fp)
    5a10:	10800003 	ldbu	r2,0(r2)
    5a14:	10803fcc 	andi	r2,r2,255
    5a18:	103ff61e 	bne	r2,zero,59f4 <OS_StrLen+0x18>
    }
    return (len);
    5a1c:	e0bfffc3 	ldbu	r2,-1(fp)
}
    5a20:	e037883a 	mov	sp,fp
    5a24:	df000017 	ldw	fp,0(sp)
    5a28:	dec00104 	addi	sp,sp,4
    5a2c:	f800283a 	ret

00005a30 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
    5a30:	defffa04 	addi	sp,sp,-24
    5a34:	dfc00515 	stw	ra,20(sp)
    5a38:	df000415 	stw	fp,16(sp)
    5a3c:	df000404 	addi	fp,sp,16
    5a40:	e13ffc15 	stw	r4,-16(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    5a44:	e03fff15 	stw	zero,-4(fp)
  NIOS2_READ_STATUS (context);
    5a48:	0005303a 	rdctl	r2,status
    5a4c:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5a50:	e0fffd17 	ldw	r3,-12(fp)
    5a54:	00bfff84 	movi	r2,-2
    5a58:	1884703a 	and	r2,r3,r2
    5a5c:	1001703a 	wrctl	status,r2
  return context;
    5a60:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
    5a64:	e0bfff15 	stw	r2,-4(fp)
        OSIdleCtr++;
    5a68:	d0a7c217 	ldw	r2,-24824(gp)
    5a6c:	10800044 	addi	r2,r2,1
    5a70:	d0a7c215 	stw	r2,-24824(gp)
    5a74:	e0bfff17 	ldw	r2,-4(fp)
    5a78:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
    5a7c:	e0bffe17 	ldw	r2,-8(fp)
    5a80:	1001703a 	wrctl	status,r2
}
    5a84:	0001883a 	nop
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
    5a88:	000eef80 	call	eef8 <OSTaskIdleHook>
        OS_ENTER_CRITICAL();
    5a8c:	003fee06 	br	5a48 <OS_TaskIdle+0x18>

00005a90 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
    5a90:	defffa04 	addi	sp,sp,-24
    5a94:	dfc00515 	stw	ra,20(sp)
    5a98:	df000415 	stw	fp,16(sp)
    5a9c:	df000404 	addi	fp,sp,16
    5aa0:	e13ffc15 	stw	r4,-16(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    5aa4:	e03fff15 	stw	zero,-4(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
    5aa8:	00000206 	br	5ab4 <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    5aac:	01000044 	movi	r4,1
    5ab0:	000b3080 	call	b308 <OSTimeDly>
    while (OSStatRdy == OS_FALSE) {
    5ab4:	d0a7bf03 	ldbu	r2,-24836(gp)
    5ab8:	10803fcc 	andi	r2,r2,255
    5abc:	103ffb26 	beq	r2,zero,5aac <OS_TaskStat+0x1c>
    }
    OSIdleCtrMax /= 100L;
    5ac0:	d0e7bd17 	ldw	r3,-24844(gp)
    5ac4:	00801904 	movi	r2,100
    5ac8:	1885203a 	divu	r2,r3,r2
    5acc:	d0a7bd15 	stw	r2,-24844(gp)
    if (OSIdleCtrMax == 0L) {
    5ad0:	d0a7bd17 	ldw	r2,-24844(gp)
    5ad4:	1000031e 	bne	r2,zero,5ae4 <OS_TaskStat+0x54>
        OSCPUUsage = 0;
    5ad8:	d027bc05 	stb	zero,-24848(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
    5adc:	01003fc4 	movi	r4,255
    5ae0:	000af880 	call	af88 <OSTaskSuspend>
  NIOS2_READ_STATUS (context);
    5ae4:	0005303a 	rdctl	r2,status
    5ae8:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5aec:	e0fffd17 	ldw	r3,-12(fp)
    5af0:	00bfff84 	movi	r2,-2
    5af4:	1884703a 	and	r2,r3,r2
    5af8:	1001703a 	wrctl	status,r2
  return context;
    5afc:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
    5b00:	e0bfff15 	stw	r2,-4(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
    5b04:	d0a7c217 	ldw	r2,-24824(gp)
    5b08:	d0a7be15 	stw	r2,-24840(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
    5b0c:	d027c215 	stw	zero,-24824(gp)
    5b10:	e0bfff17 	ldw	r2,-4(fp)
    5b14:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
    5b18:	e0bffe17 	ldw	r2,-8(fp)
    5b1c:	1001703a 	wrctl	status,r2
}
    5b20:	0001883a 	nop
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
    5b24:	d0e7be17 	ldw	r3,-24840(gp)
    5b28:	d0a7bd17 	ldw	r2,-24844(gp)
    5b2c:	1885203a 	divu	r2,r3,r2
    5b30:	1007883a 	mov	r3,r2
    5b34:	00801904 	movi	r2,100
    5b38:	10c5c83a 	sub	r2,r2,r3
    5b3c:	d0a7bc05 	stb	r2,-24848(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
    5b40:	000ee780 	call	ee78 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
    5b44:	0005b540 	call	5b54 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
    5b48:	0009883a 	mov	r4,zero
    5b4c:	000b3080 	call	b308 <OSTimeDly>
        OS_ENTER_CRITICAL();
    5b50:	003fe406 	br	5ae4 <OS_TaskStat+0x54>

00005b54 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
    5b54:	defffa04 	addi	sp,sp,-24
    5b58:	dfc00515 	stw	ra,20(sp)
    5b5c:	df000415 	stw	fp,16(sp)
    5b60:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
    5b64:	e03fffc5 	stb	zero,-1(fp)
    5b68:	00002106 	br	5bf0 <OS_TaskStatStkChk+0x9c>
        err = OSTaskStkChk(prio, &stk_data);
    5b6c:	e0bfffc3 	ldbu	r2,-1(fp)
    5b70:	e0fffc04 	addi	r3,fp,-16
    5b74:	180b883a 	mov	r5,r3
    5b78:	1009883a 	mov	r4,r2
    5b7c:	000add00 	call	add0 <OSTaskStkChk>
    5b80:	e0bfff85 	stb	r2,-2(fp)
        if (err == OS_ERR_NONE) {
    5b84:	e0bfff83 	ldbu	r2,-2(fp)
    5b88:	1000161e 	bne	r2,zero,5be4 <OS_TaskStatStkChk+0x90>
            ptcb = OSTCBPrioTbl[prio];
    5b8c:	e0bfffc3 	ldbu	r2,-1(fp)
    5b90:	100690ba 	slli	r3,r2,2
    5b94:	008000b4 	movhi	r2,2
    5b98:	1885883a 	add	r2,r3,r2
    5b9c:	10a57d17 	ldw	r2,-27148(r2)
    5ba0:	e0bffe15 	stw	r2,-8(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
    5ba4:	e0bffe17 	ldw	r2,-8(fp)
    5ba8:	10000e26 	beq	r2,zero,5be4 <OS_TaskStatStkChk+0x90>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
    5bac:	e0bffe17 	ldw	r2,-8(fp)
    5bb0:	10800060 	cmpeqi	r2,r2,1
    5bb4:	10000b1e 	bne	r2,zero,5be4 <OS_TaskStatStkChk+0x90>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
    5bb8:	e0bffe17 	ldw	r2,-8(fp)
    5bbc:	10c00217 	ldw	r3,8(r2)
    5bc0:	e0bffe17 	ldw	r2,-8(fp)
    5bc4:	10800317 	ldw	r2,12(r2)
    5bc8:	100490ba 	slli	r2,r2,2
    5bcc:	1887883a 	add	r3,r3,r2
    5bd0:	e0bffe17 	ldw	r2,-8(fp)
    5bd4:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
    5bd8:	e0fffd17 	ldw	r3,-12(fp)
    5bdc:	e0bffe17 	ldw	r2,-8(fp)
    5be0:	10c01215 	stw	r3,72(r2)
    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
    5be4:	e0bfffc3 	ldbu	r2,-1(fp)
    5be8:	10800044 	addi	r2,r2,1
    5bec:	e0bfffc5 	stb	r2,-1(fp)
    5bf0:	e0bfffc3 	ldbu	r2,-1(fp)
    5bf4:	10800570 	cmpltui	r2,r2,21
    5bf8:	103fdc1e 	bne	r2,zero,5b6c <OS_TaskStatStkChk+0x18>
#endif
                }
            }
        }
    }
}
    5bfc:	0001883a 	nop
    5c00:	0001883a 	nop
    5c04:	e037883a 	mov	sp,fp
    5c08:	dfc00117 	ldw	ra,4(sp)
    5c0c:	df000017 	ldw	fp,0(sp)
    5c10:	dec00204 	addi	sp,sp,8
    5c14:	f800283a 	ret

00005c18 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
    5c18:	defff204 	addi	sp,sp,-56
    5c1c:	dfc00d15 	stw	ra,52(sp)
    5c20:	df000c15 	stw	fp,48(sp)
    5c24:	df000c04 	addi	fp,sp,48
    5c28:	2007883a 	mov	r3,r4
    5c2c:	e17ff715 	stw	r5,-36(fp)
    5c30:	e1bff615 	stw	r6,-40(fp)
    5c34:	3809883a 	mov	r4,r7
    5c38:	e0800417 	ldw	r2,16(fp)
    5c3c:	e0fff805 	stb	r3,-32(fp)
    5c40:	2007883a 	mov	r3,r4
    5c44:	e0fff50d 	sth	r3,-44(fp)
    5c48:	e0bff40d 	sth	r2,-48(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    5c4c:	e03fff15 	stw	zero,-4(fp)
  NIOS2_READ_STATUS (context);
    5c50:	0005303a 	rdctl	r2,status
    5c54:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5c58:	e0fffd17 	ldw	r3,-12(fp)
    5c5c:	00bfff84 	movi	r2,-2
    5c60:	1884703a 	and	r2,r3,r2
    5c64:	1001703a 	wrctl	status,r2
  return context;
    5c68:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
    5c6c:	e0bfff15 	stw	r2,-4(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
    5c70:	d0a7c417 	ldw	r2,-24816(gp)
    5c74:	e0bffe15 	stw	r2,-8(fp)
    if (ptcb != (OS_TCB *)0) {
    5c78:	e0bffe17 	ldw	r2,-8(fp)
    5c7c:	10009326 	beq	r2,zero,5ecc <OS_TCBInit+0x2b4>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
    5c80:	e0bffe17 	ldw	r2,-8(fp)
    5c84:	10800517 	ldw	r2,20(r2)
    5c88:	d0a7c415 	stw	r2,-24816(gp)
    5c8c:	e0bfff17 	ldw	r2,-4(fp)
    5c90:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    5c94:	e0bffb17 	ldw	r2,-20(fp)
    5c98:	1001703a 	wrctl	status,r2
}
    5c9c:	0001883a 	nop
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
    5ca0:	e0bffe17 	ldw	r2,-8(fp)
    5ca4:	e0fff717 	ldw	r3,-36(fp)
    5ca8:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
    5cac:	e0bffe17 	ldw	r2,-8(fp)
    5cb0:	e0fff803 	ldbu	r3,-32(fp)
    5cb4:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
    5cb8:	e0bffe17 	ldw	r2,-8(fp)
    5cbc:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
    5cc0:	e0bffe17 	ldw	r2,-8(fp)
    5cc4:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
    5cc8:	e0bffe17 	ldw	r2,-8(fp)
    5ccc:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
    5cd0:	e0bffe17 	ldw	r2,-8(fp)
    5cd4:	e0c00317 	ldw	r3,12(fp)
    5cd8:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
    5cdc:	e0bffe17 	ldw	r2,-8(fp)
    5ce0:	e0c00217 	ldw	r3,8(fp)
    5ce4:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
    5ce8:	e0bffe17 	ldw	r2,-8(fp)
    5cec:	e0fff617 	ldw	r3,-40(fp)
    5cf0:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
    5cf4:	e0bffe17 	ldw	r2,-8(fp)
    5cf8:	e0fff40b 	ldhu	r3,-48(fp)
    5cfc:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
    5d00:	e0bffe17 	ldw	r2,-8(fp)
    5d04:	e0fff50b 	ldhu	r3,-44(fp)
    5d08:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
    5d0c:	e0bffe17 	ldw	r2,-8(fp)
    5d10:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
    5d14:	e0bff803 	ldbu	r2,-32(fp)
    5d18:	1004d0fa 	srli	r2,r2,3
    5d1c:	1007883a 	mov	r3,r2
    5d20:	e0bffe17 	ldw	r2,-8(fp)
    5d24:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
    5d28:	e0bff803 	ldbu	r2,-32(fp)
    5d2c:	108001cc 	andi	r2,r2,7
    5d30:	1007883a 	mov	r3,r2
    5d34:	e0bffe17 	ldw	r2,-8(fp)
    5d38:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
    5d3c:	e0bffe17 	ldw	r2,-8(fp)
    5d40:	10800d03 	ldbu	r2,52(r2)
    5d44:	10803fcc 	andi	r2,r2,255
    5d48:	00c00044 	movi	r3,1
    5d4c:	1884983a 	sll	r2,r3,r2
    5d50:	1007883a 	mov	r3,r2
    5d54:	e0bffe17 	ldw	r2,-8(fp)
    5d58:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
    5d5c:	e0bffe17 	ldw	r2,-8(fp)
    5d60:	10800cc3 	ldbu	r2,51(r2)
    5d64:	10803fcc 	andi	r2,r2,255
    5d68:	00c00044 	movi	r3,1
    5d6c:	1884983a 	sll	r2,r3,r2
    5d70:	1007883a 	mov	r3,r2
    5d74:	e0bffe17 	ldw	r2,-8(fp)
    5d78:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
    5d7c:	e0bffe17 	ldw	r2,-8(fp)
    5d80:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
    5d84:	e0bffe17 	ldw	r2,-8(fp)
    5d88:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
    5d8c:	e0bffe17 	ldw	r2,-8(fp)
    5d90:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
    5d94:	e0bffe17 	ldw	r2,-8(fp)
    5d98:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
    5d9c:	e0bffe17 	ldw	r2,-8(fp)
    5da0:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
    5da4:	e0bffe17 	ldw	r2,-8(fp)
    5da8:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
    5dac:	e0bffe17 	ldw	r2,-8(fp)
    5db0:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
    5db4:	e0bffe17 	ldw	r2,-8(fp)
    5db8:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
    5dbc:	e0bffe17 	ldw	r2,-8(fp)
    5dc0:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
    5dc4:	e0bffe17 	ldw	r2,-8(fp)
    5dc8:	00c00fc4 	movi	r3,63
    5dcc:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
    5dd0:	e0bffe17 	ldw	r2,-8(fp)
    5dd4:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
    5dd8:	e13ffe17 	ldw	r4,-8(fp)
    5ddc:	000ef180 	call	ef18 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
    5de0:	e13ffe17 	ldw	r4,-8(fp)
    5de4:	000ee100 	call	ee10 <OSTaskCreateHook>
  NIOS2_READ_STATUS (context);
    5de8:	0005303a 	rdctl	r2,status
    5dec:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5df0:	e0fffc17 	ldw	r3,-16(fp)
    5df4:	00bfff84 	movi	r2,-2
    5df8:	1884703a 	and	r2,r3,r2
    5dfc:	1001703a 	wrctl	status,r2
  return context;
    5e00:	e0bffc17 	ldw	r2,-16(fp)

        OS_ENTER_CRITICAL();
    5e04:	e0bfff15 	stw	r2,-4(fp)
        OSTCBPrioTbl[prio] = ptcb;
    5e08:	e0bff803 	ldbu	r2,-32(fp)
    5e0c:	100890ba 	slli	r4,r2,2
    5e10:	e0fffe17 	ldw	r3,-8(fp)
    5e14:	008000b4 	movhi	r2,2
    5e18:	2085883a 	add	r2,r4,r2
    5e1c:	10e57d15 	stw	r3,-27148(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
    5e20:	d0e7c617 	ldw	r3,-24808(gp)
    5e24:	e0bffe17 	ldw	r2,-8(fp)
    5e28:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
    5e2c:	e0bffe17 	ldw	r2,-8(fp)
    5e30:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
    5e34:	d0a7c617 	ldw	r2,-24808(gp)
    5e38:	10000326 	beq	r2,zero,5e48 <OS_TCBInit+0x230>
            OSTCBList->OSTCBPrev = ptcb;
    5e3c:	d0a7c617 	ldw	r2,-24808(gp)
    5e40:	e0fffe17 	ldw	r3,-8(fp)
    5e44:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
    5e48:	e0bffe17 	ldw	r2,-8(fp)
    5e4c:	d0a7c615 	stw	r2,-24808(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
    5e50:	e0bffe17 	ldw	r2,-8(fp)
    5e54:	10c00d83 	ldbu	r3,54(r2)
    5e58:	d0a7c043 	ldbu	r2,-24831(gp)
    5e5c:	1884b03a 	or	r2,r3,r2
    5e60:	d0a7c045 	stb	r2,-24831(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    5e64:	e0bffe17 	ldw	r2,-8(fp)
    5e68:	10800d03 	ldbu	r2,52(r2)
    5e6c:	10c03fcc 	andi	r3,r2,255
    5e70:	d0a7c084 	addi	r2,gp,-24830
    5e74:	1885883a 	add	r2,r3,r2
    5e78:	11000003 	ldbu	r4,0(r2)
    5e7c:	e0bffe17 	ldw	r2,-8(fp)
    5e80:	10800d43 	ldbu	r2,53(r2)
    5e84:	e0fffe17 	ldw	r3,-8(fp)
    5e88:	18c00d03 	ldbu	r3,52(r3)
    5e8c:	18c03fcc 	andi	r3,r3,255
    5e90:	2084b03a 	or	r2,r4,r2
    5e94:	1009883a 	mov	r4,r2
    5e98:	d0a7c084 	addi	r2,gp,-24830
    5e9c:	1885883a 	add	r2,r3,r2
    5ea0:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
    5ea4:	d0a7c183 	ldbu	r2,-24826(gp)
    5ea8:	10800044 	addi	r2,r2,1
    5eac:	d0a7c185 	stb	r2,-24826(gp)
    5eb0:	e0bfff17 	ldw	r2,-4(fp)
    5eb4:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
    5eb8:	e0bffa17 	ldw	r2,-24(fp)
    5ebc:	1001703a 	wrctl	status,r2
}
    5ec0:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
    5ec4:	0005883a 	mov	r2,zero
    5ec8:	00000606 	br	5ee4 <OS_TCBInit+0x2cc>
    5ecc:	e0bfff17 	ldw	r2,-4(fp)
    5ed0:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
    5ed4:	e0bff917 	ldw	r2,-28(fp)
    5ed8:	1001703a 	wrctl	status,r2
}
    5edc:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
    5ee0:	00801084 	movi	r2,66
}
    5ee4:	e037883a 	mov	sp,fp
    5ee8:	dfc00117 	ldw	ra,4(sp)
    5eec:	df000017 	ldw	fp,0(sp)
    5ef0:	dec00204 	addi	sp,sp,8
    5ef4:	f800283a 	ret

00005ef8 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
    5ef8:	defffe04 	addi	sp,sp,-8
    5efc:	df000115 	stw	fp,4(sp)
    5f00:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
    5f04:	d0a00d04 	addi	r2,gp,-32716
    5f08:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
    5f0c:	d0a00e04 	addi	r2,gp,-32712
    5f10:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
    5f14:	d0a00f84 	addi	r2,gp,-32706
    5f18:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
    5f1c:	d0a01004 	addi	r2,gp,-32704
    5f20:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
    5f24:	d0a00f04 	addi	r2,gp,-32708
    5f28:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
    5f2c:	d0a01084 	addi	r2,gp,-32702
    5f30:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
    5f34:	d0a01104 	addi	r2,gp,-32700
    5f38:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
    5f3c:	d0a01184 	addi	r2,gp,-32698
    5f40:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
    5f44:	d0a01204 	addi	r2,gp,-32696
    5f48:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
    5f4c:	d0a01284 	addi	r2,gp,-32694
    5f50:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
    5f54:	d0a01304 	addi	r2,gp,-32692
    5f58:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
    5f5c:	d0a01384 	addi	r2,gp,-32690
    5f60:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
    5f64:	d0a01404 	addi	r2,gp,-32688
    5f68:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
    5f6c:	d0a01484 	addi	r2,gp,-32686
    5f70:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
    5f74:	d0a01504 	addi	r2,gp,-32684
    5f78:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
    5f7c:	d0a01584 	addi	r2,gp,-32682
    5f80:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
    5f84:	d0a01604 	addi	r2,gp,-32680
    5f88:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
    5f8c:	d0a01684 	addi	r2,gp,-32678
    5f90:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
    5f94:	d0a01704 	addi	r2,gp,-32676
    5f98:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
    5f9c:	d0a01784 	addi	r2,gp,-32674
    5fa0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
    5fa4:	d0a01804 	addi	r2,gp,-32672
    5fa8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
    5fac:	d0a01884 	addi	r2,gp,-32670
    5fb0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
    5fb4:	d0a01904 	addi	r2,gp,-32668
    5fb8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
    5fbc:	d0a01984 	addi	r2,gp,-32666
    5fc0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
    5fc4:	d0a01a04 	addi	r2,gp,-32664
    5fc8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
    5fcc:	d0a01a84 	addi	r2,gp,-32662
    5fd0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
    5fd4:	d0a01b04 	addi	r2,gp,-32660
    5fd8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
    5fdc:	d0a01b84 	addi	r2,gp,-32658
    5fe0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
    5fe4:	d0a01c04 	addi	r2,gp,-32656
    5fe8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
    5fec:	d0a01c84 	addi	r2,gp,-32654
    5ff0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
    5ff4:	d0a01d04 	addi	r2,gp,-32652
    5ff8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
    5ffc:	d0a01d84 	addi	r2,gp,-32650
    6000:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
    6004:	d0a01e04 	addi	r2,gp,-32648
    6008:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
    600c:	d0a01e84 	addi	r2,gp,-32646
    6010:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
    6014:	d0a01f04 	addi	r2,gp,-32644
    6018:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
    601c:	d0a01f84 	addi	r2,gp,-32642
    6020:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
    6024:	d0a02004 	addi	r2,gp,-32640
    6028:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
    602c:	d0a02084 	addi	r2,gp,-32638
    6030:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
    6034:	d0a02104 	addi	r2,gp,-32636
    6038:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
    603c:	d0a02184 	addi	r2,gp,-32634
    6040:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
    6044:	d0a02204 	addi	r2,gp,-32632
    6048:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
    604c:	d0a02284 	addi	r2,gp,-32630
    6050:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
    6054:	d0a02304 	addi	r2,gp,-32628
    6058:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
    605c:	d0a02384 	addi	r2,gp,-32626
    6060:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
    6064:	d0a02404 	addi	r2,gp,-32624
    6068:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
    606c:	d0a02904 	addi	r2,gp,-32604
    6070:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
    6074:	0001883a 	nop
    6078:	e037883a 	mov	sp,fp
    607c:	df000017 	ldw	fp,0(sp)
    6080:	dec00104 	addi	sp,sp,4
    6084:	f800283a 	ret

00006088 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
    6088:	defff204 	addi	sp,sp,-56
    608c:	df000d15 	stw	fp,52(sp)
    6090:	df000d04 	addi	fp,sp,52
    6094:	e13ff615 	stw	r4,-40(fp)
    6098:	2805883a 	mov	r2,r5
    609c:	3007883a 	mov	r3,r6
    60a0:	e1fff315 	stw	r7,-52(fp)
    60a4:	e0bff50d 	sth	r2,-44(fp)
    60a8:	1805883a 	mov	r2,r3
    60ac:	e0bff405 	stb	r2,-48(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    60b0:	e03ffe15 	stw	zero,-8(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    60b4:	e0bff317 	ldw	r2,-52(fp)
    60b8:	1000021e 	bne	r2,zero,60c4 <OSFlagAccept+0x3c>
        return ((OS_FLAGS)0);
    60bc:	0005883a 	mov	r2,zero
    60c0:	0000b606 	br	639c <OSFlagAccept+0x314>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
    60c4:	e0bff617 	ldw	r2,-40(fp)
    60c8:	1000051e 	bne	r2,zero,60e0 <OSFlagAccept+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    60cc:	e0bff317 	ldw	r2,-52(fp)
    60d0:	00c01b84 	movi	r3,110
    60d4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    60d8:	0005883a 	mov	r2,zero
    60dc:	0000af06 	br	639c <OSFlagAccept+0x314>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
    60e0:	e0bff617 	ldw	r2,-40(fp)
    60e4:	10800003 	ldbu	r2,0(r2)
    60e8:	10803fcc 	andi	r2,r2,255
    60ec:	10800160 	cmpeqi	r2,r2,5
    60f0:	1000051e 	bne	r2,zero,6108 <OSFlagAccept+0x80>
        *perr = OS_ERR_EVENT_TYPE;
    60f4:	e0bff317 	ldw	r2,-52(fp)
    60f8:	00c00044 	movi	r3,1
    60fc:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    6100:	0005883a 	mov	r2,zero
    6104:	0000a506 	br	639c <OSFlagAccept+0x314>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
    6108:	e0fff403 	ldbu	r3,-48(fp)
    610c:	00bfe004 	movi	r2,-128
    6110:	1884703a 	and	r2,r3,r2
    6114:	e0bffdc5 	stb	r2,-9(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
    6118:	e0bffdc3 	ldbu	r2,-9(fp)
    611c:	10000626 	beq	r2,zero,6138 <OSFlagAccept+0xb0>
        wait_type &= ~OS_FLAG_CONSUME;
    6120:	e0bff403 	ldbu	r2,-48(fp)
    6124:	10801fcc 	andi	r2,r2,127
    6128:	e0bff405 	stb	r2,-48(fp)
        consume    = OS_TRUE;
    612c:	00800044 	movi	r2,1
    6130:	e0bfff45 	stb	r2,-3(fp)
    6134:	00000106 	br	613c <OSFlagAccept+0xb4>
    } else {
        consume    = OS_FALSE;
    6138:	e03fff45 	stb	zero,-3(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
    613c:	e0bff317 	ldw	r2,-52(fp)
    6140:	10000005 	stb	zero,0(r2)
  NIOS2_READ_STATUS (context);
    6144:	0005303a 	rdctl	r2,status
    6148:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    614c:	e0fffc17 	ldw	r3,-16(fp)
    6150:	00bfff84 	movi	r2,-2
    6154:	1884703a 	and	r2,r3,r2
    6158:	1001703a 	wrctl	status,r2
  return context;
    615c:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
    6160:	e0bffe15 	stw	r2,-8(fp)
    switch (wait_type) {
    6164:	e0bff403 	ldbu	r2,-48(fp)
    6168:	10c000e0 	cmpeqi	r3,r2,3
    616c:	1800281e 	bne	r3,zero,6210 <OSFlagAccept+0x188>
    6170:	10c00108 	cmpgei	r3,r2,4
    6174:	18007e1e 	bne	r3,zero,6370 <OSFlagAccept+0x2e8>
    6178:	10c000a0 	cmpeqi	r3,r2,2
    617c:	1800061e 	bne	r3,zero,6198 <OSFlagAccept+0x110>
    6180:	10c000c8 	cmpgei	r3,r2,3
    6184:	18007a1e 	bne	r3,zero,6370 <OSFlagAccept+0x2e8>
    6188:	10003e26 	beq	r2,zero,6284 <OSFlagAccept+0x1fc>
    618c:	10800060 	cmpeqi	r2,r2,1
    6190:	10005a1e 	bne	r2,zero,62fc <OSFlagAccept+0x274>
    6194:	00007606 	br	6370 <OSFlagAccept+0x2e8>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
    6198:	e0bff617 	ldw	r2,-40(fp)
    619c:	1080020b 	ldhu	r2,8(r2)
    61a0:	e0fff50b 	ldhu	r3,-44(fp)
    61a4:	1884703a 	and	r2,r3,r2
    61a8:	e0bfff8d 	sth	r2,-2(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    61ac:	e0ffff8b 	ldhu	r3,-2(fp)
    61b0:	e0bff50b 	ldhu	r2,-44(fp)
    61b4:	18800d1e 	bne	r3,r2,61ec <OSFlagAccept+0x164>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    61b8:	e0bfff43 	ldbu	r2,-3(fp)
    61bc:	10800058 	cmpnei	r2,r2,1
    61c0:	10000d1e 	bne	r2,zero,61f8 <OSFlagAccept+0x170>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
    61c4:	e0bff617 	ldw	r2,-40(fp)
    61c8:	1080020b 	ldhu	r2,8(r2)
    61cc:	1007883a 	mov	r3,r2
    61d0:	e0bfff8b 	ldhu	r2,-2(fp)
    61d4:	0084303a 	nor	r2,zero,r2
    61d8:	1884703a 	and	r2,r3,r2
    61dc:	1007883a 	mov	r3,r2
    61e0:	e0bff617 	ldw	r2,-40(fp)
    61e4:	10c0020d 	sth	r3,8(r2)
    61e8:	00000306 	br	61f8 <OSFlagAccept+0x170>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    61ec:	e0bff317 	ldw	r2,-52(fp)
    61f0:	00c01c04 	movi	r3,112
    61f4:	10c00005 	stb	r3,0(r2)
    61f8:	e0bffe17 	ldw	r2,-8(fp)
    61fc:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    6200:	e0bffb17 	ldw	r2,-20(fp)
    6204:	1001703a 	wrctl	status,r2
}
    6208:	0001883a 	nop
             }
             OS_EXIT_CRITICAL();
             break;
    620c:	00006206 	br	6398 <OSFlagAccept+0x310>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
    6210:	e0bff617 	ldw	r2,-40(fp)
    6214:	1080020b 	ldhu	r2,8(r2)
    6218:	e0fff50b 	ldhu	r3,-44(fp)
    621c:	1884703a 	and	r2,r3,r2
    6220:	e0bfff8d 	sth	r2,-2(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
    6224:	e0bfff8b 	ldhu	r2,-2(fp)
    6228:	10000d26 	beq	r2,zero,6260 <OSFlagAccept+0x1d8>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    622c:	e0bfff43 	ldbu	r2,-3(fp)
    6230:	10800058 	cmpnei	r2,r2,1
    6234:	10000d1e 	bne	r2,zero,626c <OSFlagAccept+0x1e4>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
    6238:	e0bff617 	ldw	r2,-40(fp)
    623c:	1080020b 	ldhu	r2,8(r2)
    6240:	1007883a 	mov	r3,r2
    6244:	e0bfff8b 	ldhu	r2,-2(fp)
    6248:	0084303a 	nor	r2,zero,r2
    624c:	1884703a 	and	r2,r3,r2
    6250:	1007883a 	mov	r3,r2
    6254:	e0bff617 	ldw	r2,-40(fp)
    6258:	10c0020d 	sth	r3,8(r2)
    625c:	00000306 	br	626c <OSFlagAccept+0x1e4>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    6260:	e0bff317 	ldw	r2,-52(fp)
    6264:	00c01c04 	movi	r3,112
    6268:	10c00005 	stb	r3,0(r2)
    626c:	e0bffe17 	ldw	r2,-8(fp)
    6270:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
    6274:	e0bffa17 	ldw	r2,-24(fp)
    6278:	1001703a 	wrctl	status,r2
}
    627c:	0001883a 	nop
             }
             OS_EXIT_CRITICAL();
             break;
    6280:	00004506 	br	6398 <OSFlagAccept+0x310>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
    6284:	e0bff617 	ldw	r2,-40(fp)
    6288:	1080020b 	ldhu	r2,8(r2)
    628c:	0084303a 	nor	r2,zero,r2
    6290:	1007883a 	mov	r3,r2
    6294:	e0bff50b 	ldhu	r2,-44(fp)
    6298:	1884703a 	and	r2,r3,r2
    629c:	e0bfff8d 	sth	r2,-2(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    62a0:	e0ffff8b 	ldhu	r3,-2(fp)
    62a4:	e0bff50b 	ldhu	r2,-44(fp)
    62a8:	18800b1e 	bne	r3,r2,62d8 <OSFlagAccept+0x250>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    62ac:	e0bfff43 	ldbu	r2,-3(fp)
    62b0:	10800058 	cmpnei	r2,r2,1
    62b4:	10000b1e 	bne	r2,zero,62e4 <OSFlagAccept+0x25c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
    62b8:	e0bff617 	ldw	r2,-40(fp)
    62bc:	1080020b 	ldhu	r2,8(r2)
    62c0:	e0ffff8b 	ldhu	r3,-2(fp)
    62c4:	1884b03a 	or	r2,r3,r2
    62c8:	1007883a 	mov	r3,r2
    62cc:	e0bff617 	ldw	r2,-40(fp)
    62d0:	10c0020d 	sth	r3,8(r2)
    62d4:	00000306 	br	62e4 <OSFlagAccept+0x25c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    62d8:	e0bff317 	ldw	r2,-52(fp)
    62dc:	00c01c04 	movi	r3,112
    62e0:	10c00005 	stb	r3,0(r2)
    62e4:	e0bffe17 	ldw	r2,-8(fp)
    62e8:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
    62ec:	e0bff917 	ldw	r2,-28(fp)
    62f0:	1001703a 	wrctl	status,r2
}
    62f4:	0001883a 	nop
             }
             OS_EXIT_CRITICAL();
             break;
    62f8:	00002706 	br	6398 <OSFlagAccept+0x310>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
    62fc:	e0bff617 	ldw	r2,-40(fp)
    6300:	1080020b 	ldhu	r2,8(r2)
    6304:	0084303a 	nor	r2,zero,r2
    6308:	1007883a 	mov	r3,r2
    630c:	e0bff50b 	ldhu	r2,-44(fp)
    6310:	1884703a 	and	r2,r3,r2
    6314:	e0bfff8d 	sth	r2,-2(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
    6318:	e0bfff8b 	ldhu	r2,-2(fp)
    631c:	10000b26 	beq	r2,zero,634c <OSFlagAccept+0x2c4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    6320:	e0bfff43 	ldbu	r2,-3(fp)
    6324:	10800058 	cmpnei	r2,r2,1
    6328:	10000b1e 	bne	r2,zero,6358 <OSFlagAccept+0x2d0>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
    632c:	e0bff617 	ldw	r2,-40(fp)
    6330:	1080020b 	ldhu	r2,8(r2)
    6334:	e0ffff8b 	ldhu	r3,-2(fp)
    6338:	1884b03a 	or	r2,r3,r2
    633c:	1007883a 	mov	r3,r2
    6340:	e0bff617 	ldw	r2,-40(fp)
    6344:	10c0020d 	sth	r3,8(r2)
    6348:	00000306 	br	6358 <OSFlagAccept+0x2d0>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    634c:	e0bff317 	ldw	r2,-52(fp)
    6350:	00c01c04 	movi	r3,112
    6354:	10c00005 	stb	r3,0(r2)
    6358:	e0bffe17 	ldw	r2,-8(fp)
    635c:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
    6360:	e0bff817 	ldw	r2,-32(fp)
    6364:	1001703a 	wrctl	status,r2
}
    6368:	0001883a 	nop
             }
             OS_EXIT_CRITICAL();
             break;
    636c:	00000a06 	br	6398 <OSFlagAccept+0x310>
    6370:	e0bffe17 	ldw	r2,-8(fp)
    6374:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context);
    6378:	e0bff717 	ldw	r2,-36(fp)
    637c:	1001703a 	wrctl	status,r2
}
    6380:	0001883a 	nop
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
    6384:	e03fff8d 	sth	zero,-2(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
    6388:	e0bff317 	ldw	r2,-52(fp)
    638c:	00c01bc4 	movi	r3,111
    6390:	10c00005 	stb	r3,0(r2)
             break;
    6394:	0001883a 	nop
    }
    return (flags_rdy);
    6398:	e0bfff8b 	ldhu	r2,-2(fp)
}
    639c:	e037883a 	mov	sp,fp
    63a0:	df000017 	ldw	fp,0(sp)
    63a4:	dec00104 	addi	sp,sp,4
    63a8:	f800283a 	ret

000063ac <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
    63ac:	defff804 	addi	sp,sp,-32
    63b0:	df000715 	stw	fp,28(sp)
    63b4:	df000704 	addi	fp,sp,28
    63b8:	2005883a 	mov	r2,r4
    63bc:	e17ff915 	stw	r5,-28(fp)
    63c0:	e0bffa0d 	sth	r2,-24(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
    63c4:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
    63c8:	e0bff917 	ldw	r2,-28(fp)
    63cc:	1000021e 	bne	r2,zero,63d8 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
    63d0:	0005883a 	mov	r2,zero
    63d4:	00003506 	br	64ac <OSFlagCreate+0x100>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
    63d8:	d0a7bf43 	ldbu	r2,-24835(gp)
    63dc:	10803fcc 	andi	r2,r2,255
    63e0:	10000526 	beq	r2,zero,63f8 <OSFlagCreate+0x4c>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
    63e4:	e0bff917 	ldw	r2,-28(fp)
    63e8:	00c00404 	movi	r3,16
    63ec:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
    63f0:	0005883a 	mov	r2,zero
    63f4:	00002d06 	br	64ac <OSFlagCreate+0x100>
  NIOS2_READ_STATUS (context);
    63f8:	0005303a 	rdctl	r2,status
    63fc:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6400:	e0fffd17 	ldw	r3,-12(fp)
    6404:	00bfff84 	movi	r2,-2
    6408:	1884703a 	and	r2,r3,r2
    640c:	1001703a 	wrctl	status,r2
  return context;
    6410:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    6414:	e0bfff15 	stw	r2,-4(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
    6418:	d0a7bb17 	ldw	r2,-24852(gp)
    641c:	e0bffe15 	stw	r2,-8(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
    6420:	e0bffe17 	ldw	r2,-8(fp)
    6424:	10001826 	beq	r2,zero,6488 <OSFlagCreate+0xdc>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
    6428:	d0a7bb17 	ldw	r2,-24852(gp)
    642c:	10800117 	ldw	r2,4(r2)
    6430:	d0a7bb15 	stw	r2,-24852(gp)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
    6434:	e0bffe17 	ldw	r2,-8(fp)
    6438:	00c00144 	movi	r3,5
    643c:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
    6440:	e0bffe17 	ldw	r2,-8(fp)
    6444:	e0fffa0b 	ldhu	r3,-24(fp)
    6448:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
    644c:	e0bffe17 	ldw	r2,-8(fp)
    6450:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
    6454:	e0bffe17 	ldw	r2,-8(fp)
    6458:	00c00fc4 	movi	r3,63
    645c:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
    6460:	e0bffe17 	ldw	r2,-8(fp)
    6464:	100002c5 	stb	zero,11(r2)
    6468:	e0bfff17 	ldw	r2,-4(fp)
    646c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    6470:	e0bffc17 	ldw	r2,-16(fp)
    6474:	1001703a 	wrctl	status,r2
}
    6478:	0001883a 	nop
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
    647c:	e0bff917 	ldw	r2,-28(fp)
    6480:	10000005 	stb	zero,0(r2)
    6484:	00000806 	br	64a8 <OSFlagCreate+0xfc>
    6488:	e0bfff17 	ldw	r2,-4(fp)
    648c:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    6490:	e0bffb17 	ldw	r2,-20(fp)
    6494:	1001703a 	wrctl	status,r2
}
    6498:	0001883a 	nop
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
    649c:	e0bff917 	ldw	r2,-28(fp)
    64a0:	00c01c84 	movi	r3,114
    64a4:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
    64a8:	e0bffe17 	ldw	r2,-8(fp)
}
    64ac:	e037883a 	mov	sp,fp
    64b0:	df000017 	ldw	fp,0(sp)
    64b4:	dec00104 	addi	sp,sp,4
    64b8:	f800283a 	ret

000064bc <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
    64bc:	defff204 	addi	sp,sp,-56
    64c0:	dfc00d15 	stw	ra,52(sp)
    64c4:	df000c15 	stw	fp,48(sp)
    64c8:	df000c04 	addi	fp,sp,48
    64cc:	e13ff615 	stw	r4,-40(fp)
    64d0:	2805883a 	mov	r2,r5
    64d4:	e1bff415 	stw	r6,-48(fp)
    64d8:	e0bff505 	stb	r2,-44(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    64dc:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    64e0:	e0bff417 	ldw	r2,-48(fp)
    64e4:	1000021e 	bne	r2,zero,64f0 <OSFlagDel+0x34>
        return (pgrp);
    64e8:	e0bff617 	ldw	r2,-40(fp)
    64ec:	00008406 	br	6700 <OSFlagDel+0x244>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
    64f0:	e0bff617 	ldw	r2,-40(fp)
    64f4:	1000051e 	bne	r2,zero,650c <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    64f8:	e0bff417 	ldw	r2,-48(fp)
    64fc:	00c01b84 	movi	r3,110
    6500:	10c00005 	stb	r3,0(r2)
        return (pgrp);
    6504:	e0bff617 	ldw	r2,-40(fp)
    6508:	00007d06 	br	6700 <OSFlagDel+0x244>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    650c:	d0a7bf43 	ldbu	r2,-24835(gp)
    6510:	10803fcc 	andi	r2,r2,255
    6514:	10000526 	beq	r2,zero,652c <OSFlagDel+0x70>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
    6518:	e0bff417 	ldw	r2,-48(fp)
    651c:	00c003c4 	movi	r3,15
    6520:	10c00005 	stb	r3,0(r2)
        return (pgrp);
    6524:	e0bff617 	ldw	r2,-40(fp)
    6528:	00007506 	br	6700 <OSFlagDel+0x244>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
    652c:	e0bff617 	ldw	r2,-40(fp)
    6530:	10800003 	ldbu	r2,0(r2)
    6534:	10803fcc 	andi	r2,r2,255
    6538:	10800160 	cmpeqi	r2,r2,5
    653c:	1000051e 	bne	r2,zero,6554 <OSFlagDel+0x98>
        *perr = OS_ERR_EVENT_TYPE;
    6540:	e0bff417 	ldw	r2,-48(fp)
    6544:	00c00044 	movi	r3,1
    6548:	10c00005 	stb	r3,0(r2)
        return (pgrp);
    654c:	e0bff617 	ldw	r2,-40(fp)
    6550:	00006b06 	br	6700 <OSFlagDel+0x244>
  NIOS2_READ_STATUS (context);
    6554:	0005303a 	rdctl	r2,status
    6558:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    655c:	e0fffb17 	ldw	r3,-20(fp)
    6560:	00bfff84 	movi	r2,-2
    6564:	1884703a 	and	r2,r3,r2
    6568:	1001703a 	wrctl	status,r2
  return context;
    656c:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
    6570:	e0bffc15 	stw	r2,-16(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
    6574:	e0bff617 	ldw	r2,-40(fp)
    6578:	10800117 	ldw	r2,4(r2)
    657c:	10000326 	beq	r2,zero,658c <OSFlagDel+0xd0>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    6580:	00800044 	movi	r2,1
    6584:	e0bfffc5 	stb	r2,-1(fp)
    6588:	00000106 	br	6590 <OSFlagDel+0xd4>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    658c:	e03fffc5 	stb	zero,-1(fp)
    }
    switch (opt) {
    6590:	e0bff503 	ldbu	r2,-44(fp)
    6594:	10000326 	beq	r2,zero,65a4 <OSFlagDel+0xe8>
    6598:	10800060 	cmpeqi	r2,r2,1
    659c:	1000251e 	bne	r2,zero,6634 <OSFlagDel+0x178>
    65a0:	00004b06 	br	66d0 <OSFlagDel+0x214>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
    65a4:	e0bfffc3 	ldbu	r2,-1(fp)
    65a8:	1000171e 	bne	r2,zero,6608 <OSFlagDel+0x14c>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
    65ac:	e0bff617 	ldw	r2,-40(fp)
    65b0:	00c00fc4 	movi	r3,63
    65b4:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
    65b8:	e0bff617 	ldw	r2,-40(fp)
    65bc:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    65c0:	e0bff617 	ldw	r2,-40(fp)
    65c4:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
    65c8:	d0e7bb17 	ldw	r3,-24852(gp)
    65cc:	e0bff617 	ldw	r2,-40(fp)
    65d0:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
    65d4:	e0bff617 	ldw	r2,-40(fp)
    65d8:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
    65dc:	e0bff617 	ldw	r2,-40(fp)
    65e0:	d0a7bb15 	stw	r2,-24852(gp)
    65e4:	e0bffc17 	ldw	r2,-16(fp)
    65e8:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
    65ec:	e0bffa17 	ldw	r2,-24(fp)
    65f0:	1001703a 	wrctl	status,r2
}
    65f4:	0001883a 	nop
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
    65f8:	e0bff417 	ldw	r2,-48(fp)
    65fc:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
    6600:	e03ffd15 	stw	zero,-12(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
    6604:	00003d06 	br	66fc <OSFlagDel+0x240>
    6608:	e0bffc17 	ldw	r2,-16(fp)
    660c:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
    6610:	e0bff917 	ldw	r2,-28(fp)
    6614:	1001703a 	wrctl	status,r2
}
    6618:	0001883a 	nop
                 *perr                = OS_ERR_TASK_WAITING;
    661c:	e0bff417 	ldw	r2,-48(fp)
    6620:	00c01244 	movi	r3,73
    6624:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
    6628:	e0bff617 	ldw	r2,-40(fp)
    662c:	e0bffd15 	stw	r2,-12(fp)
             break;
    6630:	00003206 	br	66fc <OSFlagDel+0x240>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    6634:	e0bff617 	ldw	r2,-40(fp)
    6638:	10800117 	ldw	r2,4(r2)
    663c:	e0bffe15 	stw	r2,-8(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
    6640:	00000606 	br	665c <OSFlagDel+0x1a0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
    6644:	000b883a 	mov	r5,zero
    6648:	e13ffe17 	ldw	r4,-8(fp)
    664c:	00076b40 	call	76b4 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
    6650:	e0bffe17 	ldw	r2,-8(fp)
    6654:	10800017 	ldw	r2,0(r2)
    6658:	e0bffe15 	stw	r2,-8(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
    665c:	e0bffe17 	ldw	r2,-8(fp)
    6660:	103ff81e 	bne	r2,zero,6644 <OSFlagDel+0x188>
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
    6664:	e0bff617 	ldw	r2,-40(fp)
    6668:	00c00fc4 	movi	r3,63
    666c:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
    6670:	e0bff617 	ldw	r2,-40(fp)
    6674:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    6678:	e0bff617 	ldw	r2,-40(fp)
    667c:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
    6680:	d0e7bb17 	ldw	r3,-24852(gp)
    6684:	e0bff617 	ldw	r2,-40(fp)
    6688:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
    668c:	e0bff617 	ldw	r2,-40(fp)
    6690:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
    6694:	e0bff617 	ldw	r2,-40(fp)
    6698:	d0a7bb15 	stw	r2,-24852(gp)
    669c:	e0bffc17 	ldw	r2,-16(fp)
    66a0:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
    66a4:	e0bff817 	ldw	r2,-32(fp)
    66a8:	1001703a 	wrctl	status,r2
}
    66ac:	0001883a 	nop
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
    66b0:	e0bfffc3 	ldbu	r2,-1(fp)
    66b4:	10800058 	cmpnei	r2,r2,1
    66b8:	1000011e 	bne	r2,zero,66c0 <OSFlagDel+0x204>
                 OS_Sched();                               /* Find highest priority task ready to run  */
    66bc:	00058300 	call	5830 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
    66c0:	e0bff417 	ldw	r2,-48(fp)
    66c4:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
    66c8:	e03ffd15 	stw	zero,-12(fp)
             break;
    66cc:	00000b06 	br	66fc <OSFlagDel+0x240>
    66d0:	e0bffc17 	ldw	r2,-16(fp)
    66d4:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context);
    66d8:	e0bff717 	ldw	r2,-36(fp)
    66dc:	1001703a 	wrctl	status,r2
}
    66e0:	0001883a 	nop

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
    66e4:	e0bff417 	ldw	r2,-48(fp)
    66e8:	00c001c4 	movi	r3,7
    66ec:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
    66f0:	e0bff617 	ldw	r2,-40(fp)
    66f4:	e0bffd15 	stw	r2,-12(fp)
             break;
    66f8:	0001883a 	nop
    }
    return (pgrp_return);
    66fc:	e0bffd17 	ldw	r2,-12(fp)
}
    6700:	e037883a 	mov	sp,fp
    6704:	dfc00117 	ldw	ra,4(sp)
    6708:	df000017 	ldw	fp,0(sp)
    670c:	dec00204 	addi	sp,sp,8
    6710:	f800283a 	ret

00006714 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
    6714:	defff604 	addi	sp,sp,-40
    6718:	dfc00915 	stw	ra,36(sp)
    671c:	df000815 	stw	fp,32(sp)
    6720:	df000804 	addi	fp,sp,32
    6724:	e13ffa15 	stw	r4,-24(fp)
    6728:	e17ff915 	stw	r5,-28(fp)
    672c:	e1bff815 	stw	r6,-32(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    6730:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    6734:	e0bff817 	ldw	r2,-32(fp)
    6738:	1000021e 	bne	r2,zero,6744 <OSFlagNameGet+0x30>
        return (0);
    673c:	0005883a 	mov	r2,zero
    6740:	00003b06 	br	6830 <OSFlagNameGet+0x11c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
    6744:	e0bffa17 	ldw	r2,-24(fp)
    6748:	1000051e 	bne	r2,zero,6760 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    674c:	e0bff817 	ldw	r2,-32(fp)
    6750:	00c01b84 	movi	r3,110
    6754:	10c00005 	stb	r3,0(r2)
        return (0);
    6758:	0005883a 	mov	r2,zero
    675c:	00003406 	br	6830 <OSFlagNameGet+0x11c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    6760:	e0bff917 	ldw	r2,-28(fp)
    6764:	1000051e 	bne	r2,zero,677c <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
    6768:	e0bff817 	ldw	r2,-32(fp)
    676c:	00c00304 	movi	r3,12
    6770:	10c00005 	stb	r3,0(r2)
        return (0);
    6774:	0005883a 	mov	r2,zero
    6778:	00002d06 	br	6830 <OSFlagNameGet+0x11c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    677c:	d0a7bf43 	ldbu	r2,-24835(gp)
    6780:	10803fcc 	andi	r2,r2,255
    6784:	10000526 	beq	r2,zero,679c <OSFlagNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
    6788:	e0bff817 	ldw	r2,-32(fp)
    678c:	00c00444 	movi	r3,17
    6790:	10c00005 	stb	r3,0(r2)
        return (0);
    6794:	0005883a 	mov	r2,zero
    6798:	00002506 	br	6830 <OSFlagNameGet+0x11c>
  NIOS2_READ_STATUS (context);
    679c:	0005303a 	rdctl	r2,status
    67a0:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    67a4:	e0fffd17 	ldw	r3,-12(fp)
    67a8:	00bfff84 	movi	r2,-2
    67ac:	1884703a 	and	r2,r3,r2
    67b0:	1001703a 	wrctl	status,r2
  return context;
    67b4:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    67b8:	e0bfff15 	stw	r2,-4(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
    67bc:	e0bffa17 	ldw	r2,-24(fp)
    67c0:	10800003 	ldbu	r2,0(r2)
    67c4:	10803fcc 	andi	r2,r2,255
    67c8:	10800160 	cmpeqi	r2,r2,5
    67cc:	10000a1e 	bne	r2,zero,67f8 <OSFlagNameGet+0xe4>
    67d0:	e0bfff17 	ldw	r2,-4(fp)
    67d4:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    67d8:	e0bffc17 	ldw	r2,-16(fp)
    67dc:	1001703a 	wrctl	status,r2
}
    67e0:	0001883a 	nop
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
    67e4:	e0bff817 	ldw	r2,-32(fp)
    67e8:	00c00044 	movi	r3,1
    67ec:	10c00005 	stb	r3,0(r2)
        return (0);
    67f0:	0005883a 	mov	r2,zero
    67f4:	00000e06 	br	6830 <OSFlagNameGet+0x11c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
    67f8:	e0bffa17 	ldw	r2,-24(fp)
    67fc:	10800284 	addi	r2,r2,10
    6800:	100b883a 	mov	r5,r2
    6804:	e13ff917 	ldw	r4,-28(fp)
    6808:	00059680 	call	5968 <OS_StrCopy>
    680c:	e0bffec5 	stb	r2,-5(fp)
    6810:	e0bfff17 	ldw	r2,-4(fp)
    6814:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    6818:	e0bffb17 	ldw	r2,-20(fp)
    681c:	1001703a 	wrctl	status,r2
}
    6820:	0001883a 	nop
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    6824:	e0bff817 	ldw	r2,-32(fp)
    6828:	10000005 	stb	zero,0(r2)
    return (len);
    682c:	e0bffec3 	ldbu	r2,-5(fp)
}
    6830:	e037883a 	mov	sp,fp
    6834:	dfc00117 	ldw	ra,4(sp)
    6838:	df000017 	ldw	fp,0(sp)
    683c:	dec00204 	addi	sp,sp,8
    6840:	f800283a 	ret

00006844 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
    6844:	defff504 	addi	sp,sp,-44
    6848:	dfc00a15 	stw	ra,40(sp)
    684c:	df000915 	stw	fp,36(sp)
    6850:	df000904 	addi	fp,sp,36
    6854:	e13ff915 	stw	r4,-28(fp)
    6858:	e17ff815 	stw	r5,-32(fp)
    685c:	e1bff715 	stw	r6,-36(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    6860:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    6864:	e0bff717 	ldw	r2,-36(fp)
    6868:	10004526 	beq	r2,zero,6980 <OSFlagNameSet+0x13c>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
    686c:	e0bff917 	ldw	r2,-28(fp)
    6870:	1000041e 	bne	r2,zero,6884 <OSFlagNameSet+0x40>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    6874:	e0bff717 	ldw	r2,-36(fp)
    6878:	00c01b84 	movi	r3,110
    687c:	10c00005 	stb	r3,0(r2)
        return;
    6880:	00004006 	br	6984 <OSFlagNameSet+0x140>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    6884:	e0bff817 	ldw	r2,-32(fp)
    6888:	1000041e 	bne	r2,zero,689c <OSFlagNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
    688c:	e0bff717 	ldw	r2,-36(fp)
    6890:	00c00304 	movi	r3,12
    6894:	10c00005 	stb	r3,0(r2)
        return;
    6898:	00003a06 	br	6984 <OSFlagNameSet+0x140>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    689c:	d0a7bf43 	ldbu	r2,-24835(gp)
    68a0:	10803fcc 	andi	r2,r2,255
    68a4:	10000426 	beq	r2,zero,68b8 <OSFlagNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
    68a8:	e0bff717 	ldw	r2,-36(fp)
    68ac:	00c00484 	movi	r3,18
    68b0:	10c00005 	stb	r3,0(r2)
        return;
    68b4:	00003306 	br	6984 <OSFlagNameSet+0x140>
  NIOS2_READ_STATUS (context);
    68b8:	0005303a 	rdctl	r2,status
    68bc:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    68c0:	e0fffd17 	ldw	r3,-12(fp)
    68c4:	00bfff84 	movi	r2,-2
    68c8:	1884703a 	and	r2,r3,r2
    68cc:	1001703a 	wrctl	status,r2
  return context;
    68d0:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    68d4:	e0bfff15 	stw	r2,-4(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
    68d8:	e0bff917 	ldw	r2,-28(fp)
    68dc:	10800003 	ldbu	r2,0(r2)
    68e0:	10803fcc 	andi	r2,r2,255
    68e4:	10800160 	cmpeqi	r2,r2,5
    68e8:	1000091e 	bne	r2,zero,6910 <OSFlagNameSet+0xcc>
    68ec:	e0bfff17 	ldw	r2,-4(fp)
    68f0:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    68f4:	e0bffc17 	ldw	r2,-16(fp)
    68f8:	1001703a 	wrctl	status,r2
}
    68fc:	0001883a 	nop
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
    6900:	e0bff717 	ldw	r2,-36(fp)
    6904:	00c00044 	movi	r3,1
    6908:	10c00005 	stb	r3,0(r2)
        return;
    690c:	00001d06 	br	6984 <OSFlagNameSet+0x140>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
    6910:	e13ff817 	ldw	r4,-32(fp)
    6914:	00059dc0 	call	59dc <OS_StrLen>
    6918:	e0bffec5 	stb	r2,-5(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
    691c:	e0bffec3 	ldbu	r2,-5(fp)
    6920:	10800830 	cmpltui	r2,r2,32
    6924:	1000091e 	bne	r2,zero,694c <OSFlagNameSet+0x108>
    6928:	e0bfff17 	ldw	r2,-4(fp)
    692c:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    6930:	e0bffb17 	ldw	r2,-20(fp)
    6934:	1001703a 	wrctl	status,r2
}
    6938:	0001883a 	nop
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
    693c:	e0bff717 	ldw	r2,-36(fp)
    6940:	00c01cc4 	movi	r3,115
    6944:	10c00005 	stb	r3,0(r2)
        return;
    6948:	00000e06 	br	6984 <OSFlagNameSet+0x140>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    694c:	e0bff917 	ldw	r2,-28(fp)
    6950:	10800284 	addi	r2,r2,10
    6954:	e17ff817 	ldw	r5,-32(fp)
    6958:	1009883a 	mov	r4,r2
    695c:	00059680 	call	5968 <OS_StrCopy>
    6960:	e0bfff17 	ldw	r2,-4(fp)
    6964:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
    6968:	e0bffa17 	ldw	r2,-24(fp)
    696c:	1001703a 	wrctl	status,r2
}
    6970:	0001883a 	nop
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    6974:	e0bff717 	ldw	r2,-36(fp)
    6978:	10000005 	stb	zero,0(r2)
    return;
    697c:	00000106 	br	6984 <OSFlagNameSet+0x140>
        return;
    6980:	0001883a 	nop
}
    6984:	e037883a 	mov	sp,fp
    6988:	dfc00117 	ldw	ra,4(sp)
    698c:	df000017 	ldw	fp,0(sp)
    6990:	dec00204 	addi	sp,sp,8
    6994:	f800283a 	ret

00006998 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
    6998:	deffe204 	addi	sp,sp,-120
    699c:	dfc01d15 	stw	ra,116(sp)
    69a0:	df001c15 	stw	fp,112(sp)
    69a4:	df001c04 	addi	fp,sp,112
    69a8:	e13fe815 	stw	r4,-96(fp)
    69ac:	2805883a 	mov	r2,r5
    69b0:	3009883a 	mov	r4,r6
    69b4:	3807883a 	mov	r3,r7
    69b8:	e0bfe70d 	sth	r2,-100(fp)
    69bc:	2005883a 	mov	r2,r4
    69c0:	e0bfe605 	stb	r2,-104(fp)
    69c4:	1805883a 	mov	r2,r3
    69c8:	e0bfe50d 	sth	r2,-108(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    69cc:	e03ffe15 	stw	zero,-8(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    69d0:	e0800217 	ldw	r2,8(fp)
    69d4:	1000021e 	bne	r2,zero,69e0 <OSFlagPend+0x48>
        return ((OS_FLAGS)0);
    69d8:	0005883a 	mov	r2,zero
    69dc:	00016906 	br	6f84 <OSFlagPend+0x5ec>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
    69e0:	e0bfe817 	ldw	r2,-96(fp)
    69e4:	1000051e 	bne	r2,zero,69fc <OSFlagPend+0x64>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    69e8:	e0800217 	ldw	r2,8(fp)
    69ec:	00c01b84 	movi	r3,110
    69f0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    69f4:	0005883a 	mov	r2,zero
    69f8:	00016206 	br	6f84 <OSFlagPend+0x5ec>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    69fc:	d0a7bf43 	ldbu	r2,-24835(gp)
    6a00:	10803fcc 	andi	r2,r2,255
    6a04:	10000526 	beq	r2,zero,6a1c <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
    6a08:	e0800217 	ldw	r2,8(fp)
    6a0c:	00c00084 	movi	r3,2
    6a10:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    6a14:	0005883a 	mov	r2,zero
    6a18:	00015a06 	br	6f84 <OSFlagPend+0x5ec>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
    6a1c:	d0a7bf83 	ldbu	r2,-24834(gp)
    6a20:	10803fcc 	andi	r2,r2,255
    6a24:	10000526 	beq	r2,zero,6a3c <OSFlagPend+0xa4>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
    6a28:	e0800217 	ldw	r2,8(fp)
    6a2c:	00c00344 	movi	r3,13
    6a30:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    6a34:	0005883a 	mov	r2,zero
    6a38:	00015206 	br	6f84 <OSFlagPend+0x5ec>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
    6a3c:	e0bfe817 	ldw	r2,-96(fp)
    6a40:	10800003 	ldbu	r2,0(r2)
    6a44:	10803fcc 	andi	r2,r2,255
    6a48:	10800160 	cmpeqi	r2,r2,5
    6a4c:	1000051e 	bne	r2,zero,6a64 <OSFlagPend+0xcc>
        *perr = OS_ERR_EVENT_TYPE;
    6a50:	e0800217 	ldw	r2,8(fp)
    6a54:	00c00044 	movi	r3,1
    6a58:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    6a5c:	0005883a 	mov	r2,zero
    6a60:	00014806 	br	6f84 <OSFlagPend+0x5ec>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
    6a64:	e0ffe603 	ldbu	r3,-104(fp)
    6a68:	00bfe004 	movi	r2,-128
    6a6c:	1884703a 	and	r2,r3,r2
    6a70:	e0bffdc5 	stb	r2,-9(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
    6a74:	e0bffdc3 	ldbu	r2,-9(fp)
    6a78:	10000626 	beq	r2,zero,6a94 <OSFlagPend+0xfc>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
    6a7c:	e0bfe603 	ldbu	r2,-104(fp)
    6a80:	10801fcc 	andi	r2,r2,127
    6a84:	e0bfe605 	stb	r2,-104(fp)
        consume    = OS_TRUE;
    6a88:	00800044 	movi	r2,1
    6a8c:	e0bfffc5 	stb	r2,-1(fp)
    6a90:	00000106 	br	6a98 <OSFlagPend+0x100>
    } else {
        consume    = OS_FALSE;
    6a94:	e03fffc5 	stb	zero,-1(fp)
  NIOS2_READ_STATUS (context);
    6a98:	0005303a 	rdctl	r2,status
    6a9c:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6aa0:	e0fffb17 	ldw	r3,-20(fp)
    6aa4:	00bfff84 	movi	r2,-2
    6aa8:	1884703a 	and	r2,r3,r2
    6aac:	1001703a 	wrctl	status,r2
  return context;
    6ab0:	e0bffb17 	ldw	r2,-20(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
    6ab4:	e0bffe15 	stw	r2,-8(fp)
    switch (wait_type) {
    6ab8:	e0bfe603 	ldbu	r2,-104(fp)
    6abc:	10c000e0 	cmpeqi	r3,r2,3
    6ac0:	18003a1e 	bne	r3,zero,6bac <OSFlagPend+0x214>
    6ac4:	10c00108 	cmpgei	r3,r2,4
    6ac8:	1800c61e 	bne	r3,zero,6de4 <OSFlagPend+0x44c>
    6acc:	10c000a0 	cmpeqi	r3,r2,2
    6ad0:	1800061e 	bne	r3,zero,6aec <OSFlagPend+0x154>
    6ad4:	10c000c8 	cmpgei	r3,r2,3
    6ad8:	1800c21e 	bne	r3,zero,6de4 <OSFlagPend+0x44c>
    6adc:	10006226 	beq	r2,zero,6c68 <OSFlagPend+0x2d0>
    6ae0:	10800060 	cmpeqi	r2,r2,1
    6ae4:	1000901e 	bne	r2,zero,6d28 <OSFlagPend+0x390>
    6ae8:	0000be06 	br	6de4 <OSFlagPend+0x44c>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
    6aec:	e0bfe817 	ldw	r2,-96(fp)
    6af0:	1080020b 	ldhu	r2,8(r2)
    6af4:	e0ffe70b 	ldhu	r3,-100(fp)
    6af8:	1884703a 	and	r2,r3,r2
    6afc:	e0bffd0d 	sth	r2,-12(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    6b00:	e0fffd0b 	ldhu	r3,-12(fp)
    6b04:	e0bfe70b 	ldhu	r2,-100(fp)
    6b08:	1880181e 	bne	r3,r2,6b6c <OSFlagPend+0x1d4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    6b0c:	e0bfffc3 	ldbu	r2,-1(fp)
    6b10:	10800058 	cmpnei	r2,r2,1
    6b14:	1000091e 	bne	r2,zero,6b3c <OSFlagPend+0x1a4>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
    6b18:	e0bfe817 	ldw	r2,-96(fp)
    6b1c:	1080020b 	ldhu	r2,8(r2)
    6b20:	1007883a 	mov	r3,r2
    6b24:	e0bffd0b 	ldhu	r2,-12(fp)
    6b28:	0084303a 	nor	r2,zero,r2
    6b2c:	1884703a 	and	r2,r3,r2
    6b30:	1007883a 	mov	r3,r2
    6b34:	e0bfe817 	ldw	r2,-96(fp)
    6b38:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    6b3c:	d0a7c317 	ldw	r2,-24820(gp)
    6b40:	e0fffd0b 	ldhu	r3,-12(fp)
    6b44:	10c00b0d 	sth	r3,44(r2)
    6b48:	e0bffe17 	ldw	r2,-8(fp)
    6b4c:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
    6b50:	e0bffa17 	ldw	r2,-24(fp)
    6b54:	1001703a 	wrctl	status,r2
}
    6b58:	0001883a 	nop
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    6b5c:	e0800217 	ldw	r2,8(fp)
    6b60:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
    6b64:	e0bffd0b 	ldhu	r2,-12(fp)
    6b68:	00010606 	br	6f84 <OSFlagPend+0x5ec>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    6b6c:	e13fe70b 	ldhu	r4,-100(fp)
    6b70:	e17fe603 	ldbu	r5,-104(fp)
    6b74:	e0bfe50b 	ldhu	r2,-108(fp)
    6b78:	e0ffe904 	addi	r3,fp,-92
    6b7c:	d8800015 	stw	r2,0(sp)
    6b80:	280f883a 	mov	r7,r5
    6b84:	200d883a 	mov	r6,r4
    6b88:	180b883a 	mov	r5,r3
    6b8c:	e13fe817 	ldw	r4,-96(fp)
    6b90:	00074700 	call	7470 <OS_FlagBlock>
    6b94:	e0bffe17 	ldw	r2,-8(fp)
    6b98:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
    6b9c:	e0bff917 	ldw	r2,-28(fp)
    6ba0:	1001703a 	wrctl	status,r2
}
    6ba4:	0001883a 	nop
                 OS_EXIT_CRITICAL();
             }
             break;
    6ba8:	00009906 	br	6e10 <OSFlagPend+0x478>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
    6bac:	e0bfe817 	ldw	r2,-96(fp)
    6bb0:	1080020b 	ldhu	r2,8(r2)
    6bb4:	e0ffe70b 	ldhu	r3,-100(fp)
    6bb8:	1884703a 	and	r2,r3,r2
    6bbc:	e0bffd0d 	sth	r2,-12(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
    6bc0:	e0bffd0b 	ldhu	r2,-12(fp)
    6bc4:	10001826 	beq	r2,zero,6c28 <OSFlagPend+0x290>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    6bc8:	e0bfffc3 	ldbu	r2,-1(fp)
    6bcc:	10800058 	cmpnei	r2,r2,1
    6bd0:	1000091e 	bne	r2,zero,6bf8 <OSFlagPend+0x260>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
    6bd4:	e0bfe817 	ldw	r2,-96(fp)
    6bd8:	1080020b 	ldhu	r2,8(r2)
    6bdc:	1007883a 	mov	r3,r2
    6be0:	e0bffd0b 	ldhu	r2,-12(fp)
    6be4:	0084303a 	nor	r2,zero,r2
    6be8:	1884703a 	and	r2,r3,r2
    6bec:	1007883a 	mov	r3,r2
    6bf0:	e0bfe817 	ldw	r2,-96(fp)
    6bf4:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    6bf8:	d0a7c317 	ldw	r2,-24820(gp)
    6bfc:	e0fffd0b 	ldhu	r3,-12(fp)
    6c00:	10c00b0d 	sth	r3,44(r2)
    6c04:	e0bffe17 	ldw	r2,-8(fp)
    6c08:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
    6c0c:	e0bff817 	ldw	r2,-32(fp)
    6c10:	1001703a 	wrctl	status,r2
}
    6c14:	0001883a 	nop
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    6c18:	e0800217 	ldw	r2,8(fp)
    6c1c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
    6c20:	e0bffd0b 	ldhu	r2,-12(fp)
    6c24:	0000d706 	br	6f84 <OSFlagPend+0x5ec>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    6c28:	e13fe70b 	ldhu	r4,-100(fp)
    6c2c:	e17fe603 	ldbu	r5,-104(fp)
    6c30:	e0bfe50b 	ldhu	r2,-108(fp)
    6c34:	e0ffe904 	addi	r3,fp,-92
    6c38:	d8800015 	stw	r2,0(sp)
    6c3c:	280f883a 	mov	r7,r5
    6c40:	200d883a 	mov	r6,r4
    6c44:	180b883a 	mov	r5,r3
    6c48:	e13fe817 	ldw	r4,-96(fp)
    6c4c:	00074700 	call	7470 <OS_FlagBlock>
    6c50:	e0bffe17 	ldw	r2,-8(fp)
    6c54:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context);
    6c58:	e0bff717 	ldw	r2,-36(fp)
    6c5c:	1001703a 	wrctl	status,r2
}
    6c60:	0001883a 	nop
                 OS_EXIT_CRITICAL();
             }
             break;
    6c64:	00006a06 	br	6e10 <OSFlagPend+0x478>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
    6c68:	e0bfe817 	ldw	r2,-96(fp)
    6c6c:	1080020b 	ldhu	r2,8(r2)
    6c70:	0084303a 	nor	r2,zero,r2
    6c74:	1007883a 	mov	r3,r2
    6c78:	e0bfe70b 	ldhu	r2,-100(fp)
    6c7c:	1884703a 	and	r2,r3,r2
    6c80:	e0bffd0d 	sth	r2,-12(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    6c84:	e0fffd0b 	ldhu	r3,-12(fp)
    6c88:	e0bfe70b 	ldhu	r2,-100(fp)
    6c8c:	1880161e 	bne	r3,r2,6ce8 <OSFlagPend+0x350>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    6c90:	e0bfffc3 	ldbu	r2,-1(fp)
    6c94:	10800058 	cmpnei	r2,r2,1
    6c98:	1000071e 	bne	r2,zero,6cb8 <OSFlagPend+0x320>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
    6c9c:	e0bfe817 	ldw	r2,-96(fp)
    6ca0:	1080020b 	ldhu	r2,8(r2)
    6ca4:	e0fffd0b 	ldhu	r3,-12(fp)
    6ca8:	1884b03a 	or	r2,r3,r2
    6cac:	1007883a 	mov	r3,r2
    6cb0:	e0bfe817 	ldw	r2,-96(fp)
    6cb4:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    6cb8:	d0a7c317 	ldw	r2,-24820(gp)
    6cbc:	e0fffd0b 	ldhu	r3,-12(fp)
    6cc0:	10c00b0d 	sth	r3,44(r2)
    6cc4:	e0bffe17 	ldw	r2,-8(fp)
    6cc8:	e0bff615 	stw	r2,-40(fp)
  NIOS2_WRITE_STATUS (context);
    6ccc:	e0bff617 	ldw	r2,-40(fp)
    6cd0:	1001703a 	wrctl	status,r2
}
    6cd4:	0001883a 	nop
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    6cd8:	e0800217 	ldw	r2,8(fp)
    6cdc:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
    6ce0:	e0bffd0b 	ldhu	r2,-12(fp)
    6ce4:	0000a706 	br	6f84 <OSFlagPend+0x5ec>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    6ce8:	e13fe70b 	ldhu	r4,-100(fp)
    6cec:	e17fe603 	ldbu	r5,-104(fp)
    6cf0:	e0bfe50b 	ldhu	r2,-108(fp)
    6cf4:	e0ffe904 	addi	r3,fp,-92
    6cf8:	d8800015 	stw	r2,0(sp)
    6cfc:	280f883a 	mov	r7,r5
    6d00:	200d883a 	mov	r6,r4
    6d04:	180b883a 	mov	r5,r3
    6d08:	e13fe817 	ldw	r4,-96(fp)
    6d0c:	00074700 	call	7470 <OS_FlagBlock>
    6d10:	e0bffe17 	ldw	r2,-8(fp)
    6d14:	e0bff515 	stw	r2,-44(fp)
  NIOS2_WRITE_STATUS (context);
    6d18:	e0bff517 	ldw	r2,-44(fp)
    6d1c:	1001703a 	wrctl	status,r2
}
    6d20:	0001883a 	nop
                 OS_EXIT_CRITICAL();
             }
             break;
    6d24:	00003a06 	br	6e10 <OSFlagPend+0x478>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
    6d28:	e0bfe817 	ldw	r2,-96(fp)
    6d2c:	1080020b 	ldhu	r2,8(r2)
    6d30:	0084303a 	nor	r2,zero,r2
    6d34:	1007883a 	mov	r3,r2
    6d38:	e0bfe70b 	ldhu	r2,-100(fp)
    6d3c:	1884703a 	and	r2,r3,r2
    6d40:	e0bffd0d 	sth	r2,-12(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
    6d44:	e0bffd0b 	ldhu	r2,-12(fp)
    6d48:	10001626 	beq	r2,zero,6da4 <OSFlagPend+0x40c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    6d4c:	e0bfffc3 	ldbu	r2,-1(fp)
    6d50:	10800058 	cmpnei	r2,r2,1
    6d54:	1000071e 	bne	r2,zero,6d74 <OSFlagPend+0x3dc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
    6d58:	e0bfe817 	ldw	r2,-96(fp)
    6d5c:	1080020b 	ldhu	r2,8(r2)
    6d60:	e0fffd0b 	ldhu	r3,-12(fp)
    6d64:	1884b03a 	or	r2,r3,r2
    6d68:	1007883a 	mov	r3,r2
    6d6c:	e0bfe817 	ldw	r2,-96(fp)
    6d70:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    6d74:	d0a7c317 	ldw	r2,-24820(gp)
    6d78:	e0fffd0b 	ldhu	r3,-12(fp)
    6d7c:	10c00b0d 	sth	r3,44(r2)
    6d80:	e0bffe17 	ldw	r2,-8(fp)
    6d84:	e0bff415 	stw	r2,-48(fp)
  NIOS2_WRITE_STATUS (context);
    6d88:	e0bff417 	ldw	r2,-48(fp)
    6d8c:	1001703a 	wrctl	status,r2
}
    6d90:	0001883a 	nop
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    6d94:	e0800217 	ldw	r2,8(fp)
    6d98:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
    6d9c:	e0bffd0b 	ldhu	r2,-12(fp)
    6da0:	00007806 	br	6f84 <OSFlagPend+0x5ec>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    6da4:	e13fe70b 	ldhu	r4,-100(fp)
    6da8:	e17fe603 	ldbu	r5,-104(fp)
    6dac:	e0bfe50b 	ldhu	r2,-108(fp)
    6db0:	e0ffe904 	addi	r3,fp,-92
    6db4:	d8800015 	stw	r2,0(sp)
    6db8:	280f883a 	mov	r7,r5
    6dbc:	200d883a 	mov	r6,r4
    6dc0:	180b883a 	mov	r5,r3
    6dc4:	e13fe817 	ldw	r4,-96(fp)
    6dc8:	00074700 	call	7470 <OS_FlagBlock>
    6dcc:	e0bffe17 	ldw	r2,-8(fp)
    6dd0:	e0bff315 	stw	r2,-52(fp)
  NIOS2_WRITE_STATUS (context);
    6dd4:	e0bff317 	ldw	r2,-52(fp)
    6dd8:	1001703a 	wrctl	status,r2
}
    6ddc:	0001883a 	nop
                 OS_EXIT_CRITICAL();
             }
             break;
    6de0:	00000b06 	br	6e10 <OSFlagPend+0x478>
    6de4:	e0bffe17 	ldw	r2,-8(fp)
    6de8:	e0bff215 	stw	r2,-56(fp)
  NIOS2_WRITE_STATUS (context);
    6dec:	e0bff217 	ldw	r2,-56(fp)
    6df0:	1001703a 	wrctl	status,r2
}
    6df4:	0001883a 	nop
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
    6df8:	e03ffd0d 	sth	zero,-12(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
    6dfc:	e0800217 	ldw	r2,8(fp)
    6e00:	00c01bc4 	movi	r3,111
    6e04:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
    6e08:	e0bffd0b 	ldhu	r2,-12(fp)
    6e0c:	00005d06 	br	6f84 <OSFlagPend+0x5ec>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
    6e10:	00058300 	call	5830 <OS_Sched>
  NIOS2_READ_STATUS (context);
    6e14:	0005303a 	rdctl	r2,status
    6e18:	e0bff115 	stw	r2,-60(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6e1c:	e0fff117 	ldw	r3,-60(fp)
    6e20:	00bfff84 	movi	r2,-2
    6e24:	1884703a 	and	r2,r3,r2
    6e28:	1001703a 	wrctl	status,r2
  return context;
    6e2c:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
    6e30:	e0bffe15 	stw	r2,-8(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
    6e34:	d0a7c317 	ldw	r2,-24820(gp)
    6e38:	10800c43 	ldbu	r2,49(r2)
    6e3c:	10803fcc 	andi	r2,r2,255
    6e40:	10001d26 	beq	r2,zero,6eb8 <OSFlagPend+0x520>
        pend_stat                = OSTCBCur->OSTCBStatPend;
    6e44:	d0a7c317 	ldw	r2,-24820(gp)
    6e48:	10800c43 	ldbu	r2,49(r2)
    6e4c:	e0bffcc5 	stb	r2,-13(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    6e50:	d0a7c317 	ldw	r2,-24820(gp)
    6e54:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
    6e58:	e0bfe904 	addi	r2,fp,-92
    6e5c:	1009883a 	mov	r4,r2
    6e60:	00077a80 	call	77a8 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
    6e64:	d0a7c317 	ldw	r2,-24820(gp)
    6e68:	10000c05 	stb	zero,48(r2)
    6e6c:	e0bffe17 	ldw	r2,-8(fp)
    6e70:	e0bff015 	stw	r2,-64(fp)
  NIOS2_WRITE_STATUS (context);
    6e74:	e0bff017 	ldw	r2,-64(fp)
    6e78:	1001703a 	wrctl	status,r2
}
    6e7c:	0001883a 	nop
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
    6e80:	e03ffd0d 	sth	zero,-12(fp)
        switch (pend_stat) {
    6e84:	e0bffcc3 	ldbu	r2,-13(fp)
    6e88:	10800098 	cmpnei	r2,r2,2
    6e8c:	1000041e 	bne	r2,zero,6ea0 <OSFlagPend+0x508>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
    6e90:	e0800217 	ldw	r2,8(fp)
    6e94:	00c00384 	movi	r3,14
    6e98:	10c00005 	stb	r3,0(r2)
                 break;
    6e9c:	00000406 	br	6eb0 <OSFlagPend+0x518>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
    6ea0:	e0800217 	ldw	r2,8(fp)
    6ea4:	00c00284 	movi	r3,10
    6ea8:	10c00005 	stb	r3,0(r2)
                 break;
    6eac:	0001883a 	nop
        }
        return (flags_rdy);
    6eb0:	e0bffd0b 	ldhu	r2,-12(fp)
    6eb4:	00003306 	br	6f84 <OSFlagPend+0x5ec>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
    6eb8:	d0a7c317 	ldw	r2,-24820(gp)
    6ebc:	10800b0b 	ldhu	r2,44(r2)
    6ec0:	e0bffd0d 	sth	r2,-12(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
    6ec4:	e0bfffc3 	ldbu	r2,-1(fp)
    6ec8:	10800058 	cmpnei	r2,r2,1
    6ecc:	1000241e 	bne	r2,zero,6f60 <OSFlagPend+0x5c8>
        switch (wait_type) {
    6ed0:	e0bfe603 	ldbu	r2,-104(fp)
    6ed4:	10c00088 	cmpgei	r3,r2,2
    6ed8:	1800021e 	bne	r3,zero,6ee4 <OSFlagPend+0x54c>
    6edc:	10000e0e 	bge	r2,zero,6f18 <OSFlagPend+0x580>
    6ee0:	00001506 	br	6f38 <OSFlagPend+0x5a0>
    6ee4:	10bfff84 	addi	r2,r2,-2
    6ee8:	108000a8 	cmpgeui	r2,r2,2
    6eec:	1000121e 	bne	r2,zero,6f38 <OSFlagPend+0x5a0>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
    6ef0:	e0bfe817 	ldw	r2,-96(fp)
    6ef4:	1080020b 	ldhu	r2,8(r2)
    6ef8:	1007883a 	mov	r3,r2
    6efc:	e0bffd0b 	ldhu	r2,-12(fp)
    6f00:	0084303a 	nor	r2,zero,r2
    6f04:	1884703a 	and	r2,r3,r2
    6f08:	1007883a 	mov	r3,r2
    6f0c:	e0bfe817 	ldw	r2,-96(fp)
    6f10:	10c0020d 	sth	r3,8(r2)
                 break;
    6f14:	00001306 	br	6f64 <OSFlagPend+0x5cc>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
    6f18:	e0bfe817 	ldw	r2,-96(fp)
    6f1c:	1080020b 	ldhu	r2,8(r2)
    6f20:	e0fffd0b 	ldhu	r3,-12(fp)
    6f24:	1884b03a 	or	r2,r3,r2
    6f28:	1007883a 	mov	r3,r2
    6f2c:	e0bfe817 	ldw	r2,-96(fp)
    6f30:	10c0020d 	sth	r3,8(r2)
                 break;
    6f34:	00000b06 	br	6f64 <OSFlagPend+0x5cc>
    6f38:	e0bffe17 	ldw	r2,-8(fp)
    6f3c:	e0bfef15 	stw	r2,-68(fp)
  NIOS2_WRITE_STATUS (context);
    6f40:	e0bfef17 	ldw	r2,-68(fp)
    6f44:	1001703a 	wrctl	status,r2
}
    6f48:	0001883a 	nop
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
    6f4c:	e0800217 	ldw	r2,8(fp)
    6f50:	00c01bc4 	movi	r3,111
    6f54:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
    6f58:	0005883a 	mov	r2,zero
    6f5c:	00000906 	br	6f84 <OSFlagPend+0x5ec>
        }
    }
    6f60:	0001883a 	nop
    6f64:	e0bffe17 	ldw	r2,-8(fp)
    6f68:	e0bfee15 	stw	r2,-72(fp)
  NIOS2_WRITE_STATUS (context);
    6f6c:	e0bfee17 	ldw	r2,-72(fp)
    6f70:	1001703a 	wrctl	status,r2
}
    6f74:	0001883a 	nop
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
    6f78:	e0800217 	ldw	r2,8(fp)
    6f7c:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
    6f80:	e0bffd0b 	ldhu	r2,-12(fp)
}
    6f84:	e037883a 	mov	sp,fp
    6f88:	dfc00117 	ldw	ra,4(sp)
    6f8c:	df000017 	ldw	fp,0(sp)
    6f90:	dec00204 	addi	sp,sp,8
    6f94:	f800283a 	ret

00006f98 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
    6f98:	defffb04 	addi	sp,sp,-20
    6f9c:	df000415 	stw	fp,16(sp)
    6fa0:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    6fa4:	e03fff15 	stw	zero,-4(fp)
  NIOS2_READ_STATUS (context);
    6fa8:	0005303a 	rdctl	r2,status
    6fac:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6fb0:	e0fffc17 	ldw	r3,-16(fp)
    6fb4:	00bfff84 	movi	r2,-2
    6fb8:	1884703a 	and	r2,r3,r2
    6fbc:	1001703a 	wrctl	status,r2
  return context;
    6fc0:	e0bffc17 	ldw	r2,-16(fp)
#endif



    OS_ENTER_CRITICAL();
    6fc4:	e0bfff15 	stw	r2,-4(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
    6fc8:	d0a7c317 	ldw	r2,-24820(gp)
    6fcc:	10800b0b 	ldhu	r2,44(r2)
    6fd0:	e0bffe8d 	sth	r2,-6(fp)
    6fd4:	e0bfff17 	ldw	r2,-4(fp)
    6fd8:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
    6fdc:	e0bffd17 	ldw	r2,-12(fp)
    6fe0:	1001703a 	wrctl	status,r2
}
    6fe4:	0001883a 	nop
    OS_EXIT_CRITICAL();
    return (flags);
    6fe8:	e0bffe8b 	ldhu	r2,-6(fp)
}
    6fec:	e037883a 	mov	sp,fp
    6ff0:	df000017 	ldw	fp,0(sp)
    6ff4:	dec00104 	addi	sp,sp,4
    6ff8:	f800283a 	ret

00006ffc <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
    6ffc:	deffef04 	addi	sp,sp,-68
    7000:	dfc01015 	stw	ra,64(sp)
    7004:	df000f15 	stw	fp,60(sp)
    7008:	df000f04 	addi	fp,sp,60
    700c:	e13ff415 	stw	r4,-48(fp)
    7010:	2805883a 	mov	r2,r5
    7014:	3007883a 	mov	r3,r6
    7018:	e1fff115 	stw	r7,-60(fp)
    701c:	e0bff30d 	sth	r2,-52(fp)
    7020:	1805883a 	mov	r2,r3
    7024:	e0bff205 	stb	r2,-56(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
    7028:	e03ffd15 	stw	zero,-12(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
    702c:	e0bff117 	ldw	r2,-60(fp)
    7030:	1000021e 	bne	r2,zero,703c <OSFlagPost+0x40>
        return ((OS_FLAGS)0);
    7034:	0005883a 	mov	r2,zero
    7038:	0000d606 	br	7394 <OSFlagPost+0x398>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
    703c:	e0bff417 	ldw	r2,-48(fp)
    7040:	1000051e 	bne	r2,zero,7058 <OSFlagPost+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    7044:	e0bff117 	ldw	r2,-60(fp)
    7048:	00c01b84 	movi	r3,110
    704c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    7050:	0005883a 	mov	r2,zero
    7054:	0000cf06 	br	7394 <OSFlagPost+0x398>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
    7058:	e0bff417 	ldw	r2,-48(fp)
    705c:	10800003 	ldbu	r2,0(r2)
    7060:	10803fcc 	andi	r2,r2,255
    7064:	10800160 	cmpeqi	r2,r2,5
    7068:	1000051e 	bne	r2,zero,7080 <OSFlagPost+0x84>
        *perr = OS_ERR_EVENT_TYPE;
    706c:	e0bff117 	ldw	r2,-60(fp)
    7070:	00c00044 	movi	r3,1
    7074:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    7078:	0005883a 	mov	r2,zero
    707c:	0000c506 	br	7394 <OSFlagPost+0x398>
  NIOS2_READ_STATUS (context);
    7080:	0005303a 	rdctl	r2,status
    7084:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7088:	e0fffa17 	ldw	r3,-24(fp)
    708c:	00bfff84 	movi	r2,-2
    7090:	1884703a 	and	r2,r3,r2
    7094:	1001703a 	wrctl	status,r2
  return context;
    7098:	e0bffa17 	ldw	r2,-24(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
    709c:	e0bffd15 	stw	r2,-12(fp)
    switch (opt) {
    70a0:	e0bff203 	ldbu	r2,-56(fp)
    70a4:	10000326 	beq	r2,zero,70b4 <OSFlagPost+0xb8>
    70a8:	10800060 	cmpeqi	r2,r2,1
    70ac:	10000b1e 	bne	r2,zero,70dc <OSFlagPost+0xe0>
    70b0:	00001206 	br	70fc <OSFlagPost+0x100>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
    70b4:	e0bff417 	ldw	r2,-48(fp)
    70b8:	1080020b 	ldhu	r2,8(r2)
    70bc:	1007883a 	mov	r3,r2
    70c0:	e0bff30b 	ldhu	r2,-52(fp)
    70c4:	0084303a 	nor	r2,zero,r2
    70c8:	1884703a 	and	r2,r3,r2
    70cc:	1007883a 	mov	r3,r2
    70d0:	e0bff417 	ldw	r2,-48(fp)
    70d4:	10c0020d 	sth	r3,8(r2)
             break;
    70d8:	00001206 	br	7124 <OSFlagPost+0x128>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
    70dc:	e0bff417 	ldw	r2,-48(fp)
    70e0:	1080020b 	ldhu	r2,8(r2)
    70e4:	e0fff30b 	ldhu	r3,-52(fp)
    70e8:	1884b03a 	or	r2,r3,r2
    70ec:	1007883a 	mov	r3,r2
    70f0:	e0bff417 	ldw	r2,-48(fp)
    70f4:	10c0020d 	sth	r3,8(r2)
             break;
    70f8:	00000a06 	br	7124 <OSFlagPost+0x128>
    70fc:	e0bffd17 	ldw	r2,-12(fp)
    7100:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
    7104:	e0bff917 	ldw	r2,-28(fp)
    7108:	1001703a 	wrctl	status,r2
}
    710c:	0001883a 	nop

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
    7110:	e0bff117 	ldw	r2,-60(fp)
    7114:	00c01c44 	movi	r3,113
    7118:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
    711c:	0005883a 	mov	r2,zero
    7120:	00009c06 	br	7394 <OSFlagPost+0x398>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    7124:	e03ffec5 	stb	zero,-5(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    7128:	e0bff417 	ldw	r2,-48(fp)
    712c:	10800117 	ldw	r2,4(r2)
    7130:	e0bfff15 	stw	r2,-4(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
    7134:	00007906 	br	731c <OSFlagPost+0x320>
        switch (pnode->OSFlagNodeWaitType) {
    7138:	e0bfff17 	ldw	r2,-4(fp)
    713c:	10800483 	ldbu	r2,18(r2)
    7140:	10803fcc 	andi	r2,r2,255
    7144:	10c000e0 	cmpeqi	r3,r2,3
    7148:	1800201e 	bne	r3,zero,71cc <OSFlagPost+0x1d0>
    714c:	10c00108 	cmpgei	r3,r2,4
    7150:	18005e1e 	bne	r3,zero,72cc <OSFlagPost+0x2d0>
    7154:	10c000a0 	cmpeqi	r3,r2,2
    7158:	1800061e 	bne	r3,zero,7174 <OSFlagPost+0x178>
    715c:	10c000c8 	cmpgei	r3,r2,3
    7160:	18005a1e 	bne	r3,zero,72cc <OSFlagPost+0x2d0>
    7164:	10002c26 	beq	r2,zero,7218 <OSFlagPost+0x21c>
    7168:	10800060 	cmpeqi	r2,r2,1
    716c:	1000421e 	bne	r2,zero,7278 <OSFlagPost+0x27c>
    7170:	00005606 	br	72cc <OSFlagPost+0x2d0>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    7174:	e0bff417 	ldw	r2,-48(fp)
    7178:	10c0020b 	ldhu	r3,8(r2)
    717c:	e0bfff17 	ldw	r2,-4(fp)
    7180:	1080040b 	ldhu	r2,16(r2)
    7184:	1884703a 	and	r2,r3,r2
    7188:	e0bffc0d 	sth	r2,-16(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
    718c:	e0bfff17 	ldw	r2,-4(fp)
    7190:	1080040b 	ldhu	r2,16(r2)
    7194:	e0fffc0b 	ldhu	r3,-16(fp)
    7198:	10bfffcc 	andi	r2,r2,65535
    719c:	1880551e 	bne	r3,r2,72f4 <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
    71a0:	e0bffc0b 	ldhu	r2,-16(fp)
    71a4:	100b883a 	mov	r5,r2
    71a8:	e13fff17 	ldw	r4,-4(fp)
    71ac:	00076b40 	call	76b4 <OS_FlagTaskRdy>
    71b0:	e0bffbc5 	stb	r2,-17(fp)
                     if (rdy == OS_TRUE) {
    71b4:	e0bffbc3 	ldbu	r2,-17(fp)
    71b8:	10800058 	cmpnei	r2,r2,1
    71bc:	10004d1e 	bne	r2,zero,72f4 <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    71c0:	00800044 	movi	r2,1
    71c4:	e0bffec5 	stb	r2,-5(fp)
                     }
                 }
                 break;
    71c8:	00004a06 	br	72f4 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    71cc:	e0bff417 	ldw	r2,-48(fp)
    71d0:	10c0020b 	ldhu	r3,8(r2)
    71d4:	e0bfff17 	ldw	r2,-4(fp)
    71d8:	1080040b 	ldhu	r2,16(r2)
    71dc:	1884703a 	and	r2,r3,r2
    71e0:	e0bffc0d 	sth	r2,-16(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
    71e4:	e0bffc0b 	ldhu	r2,-16(fp)
    71e8:	10004426 	beq	r2,zero,72fc <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
    71ec:	e0bffc0b 	ldhu	r2,-16(fp)
    71f0:	100b883a 	mov	r5,r2
    71f4:	e13fff17 	ldw	r4,-4(fp)
    71f8:	00076b40 	call	76b4 <OS_FlagTaskRdy>
    71fc:	e0bffbc5 	stb	r2,-17(fp)
                     if (rdy == OS_TRUE) {
    7200:	e0bffbc3 	ldbu	r2,-17(fp)
    7204:	10800058 	cmpnei	r2,r2,1
    7208:	10003c1e 	bne	r2,zero,72fc <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    720c:	00800044 	movi	r2,1
    7210:	e0bffec5 	stb	r2,-5(fp)
                     }
                 }
                 break;
    7214:	00003906 	br	72fc <OSFlagPost+0x300>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    7218:	e0bff417 	ldw	r2,-48(fp)
    721c:	1080020b 	ldhu	r2,8(r2)
    7220:	0084303a 	nor	r2,zero,r2
    7224:	1007883a 	mov	r3,r2
    7228:	e0bfff17 	ldw	r2,-4(fp)
    722c:	1080040b 	ldhu	r2,16(r2)
    7230:	1884703a 	and	r2,r3,r2
    7234:	e0bffc0d 	sth	r2,-16(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
    7238:	e0bfff17 	ldw	r2,-4(fp)
    723c:	1080040b 	ldhu	r2,16(r2)
    7240:	e0fffc0b 	ldhu	r3,-16(fp)
    7244:	10bfffcc 	andi	r2,r2,65535
    7248:	18802e1e 	bne	r3,r2,7304 <OSFlagPost+0x308>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
    724c:	e0bffc0b 	ldhu	r2,-16(fp)
    7250:	100b883a 	mov	r5,r2
    7254:	e13fff17 	ldw	r4,-4(fp)
    7258:	00076b40 	call	76b4 <OS_FlagTaskRdy>
    725c:	e0bffbc5 	stb	r2,-17(fp)
                     if (rdy == OS_TRUE) {
    7260:	e0bffbc3 	ldbu	r2,-17(fp)
    7264:	10800058 	cmpnei	r2,r2,1
    7268:	1000261e 	bne	r2,zero,7304 <OSFlagPost+0x308>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    726c:	00800044 	movi	r2,1
    7270:	e0bffec5 	stb	r2,-5(fp)
                     }
                 }
                 break;
    7274:	00002306 	br	7304 <OSFlagPost+0x308>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    7278:	e0bff417 	ldw	r2,-48(fp)
    727c:	1080020b 	ldhu	r2,8(r2)
    7280:	0084303a 	nor	r2,zero,r2
    7284:	1007883a 	mov	r3,r2
    7288:	e0bfff17 	ldw	r2,-4(fp)
    728c:	1080040b 	ldhu	r2,16(r2)
    7290:	1884703a 	and	r2,r3,r2
    7294:	e0bffc0d 	sth	r2,-16(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
    7298:	e0bffc0b 	ldhu	r2,-16(fp)
    729c:	10001b26 	beq	r2,zero,730c <OSFlagPost+0x310>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
    72a0:	e0bffc0b 	ldhu	r2,-16(fp)
    72a4:	100b883a 	mov	r5,r2
    72a8:	e13fff17 	ldw	r4,-4(fp)
    72ac:	00076b40 	call	76b4 <OS_FlagTaskRdy>
    72b0:	e0bffbc5 	stb	r2,-17(fp)
                     if (rdy == OS_TRUE) {
    72b4:	e0bffbc3 	ldbu	r2,-17(fp)
    72b8:	10800058 	cmpnei	r2,r2,1
    72bc:	1000131e 	bne	r2,zero,730c <OSFlagPost+0x310>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    72c0:	00800044 	movi	r2,1
    72c4:	e0bffec5 	stb	r2,-5(fp)
                     }
                 }
                 break;
    72c8:	00001006 	br	730c <OSFlagPost+0x310>
    72cc:	e0bffd17 	ldw	r2,-12(fp)
    72d0:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
    72d4:	e0bff817 	ldw	r2,-32(fp)
    72d8:	1001703a 	wrctl	status,r2
}
    72dc:	0001883a 	nop
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
    72e0:	e0bff117 	ldw	r2,-60(fp)
    72e4:	00c01bc4 	movi	r3,111
    72e8:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
    72ec:	0005883a 	mov	r2,zero
    72f0:	00002806 	br	7394 <OSFlagPost+0x398>
                 break;
    72f4:	0001883a 	nop
    72f8:	00000506 	br	7310 <OSFlagPost+0x314>
                 break;
    72fc:	0001883a 	nop
    7300:	00000306 	br	7310 <OSFlagPost+0x314>
                 break;
    7304:	0001883a 	nop
    7308:	00000106 	br	7310 <OSFlagPost+0x314>
                 break;
    730c:	0001883a 	nop
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    7310:	e0bfff17 	ldw	r2,-4(fp)
    7314:	10800017 	ldw	r2,0(r2)
    7318:	e0bfff15 	stw	r2,-4(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
    731c:	e0bfff17 	ldw	r2,-4(fp)
    7320:	103f851e 	bne	r2,zero,7138 <OSFlagPost+0x13c>
    7324:	e0bffd17 	ldw	r2,-12(fp)
    7328:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context);
    732c:	e0bff717 	ldw	r2,-36(fp)
    7330:	1001703a 	wrctl	status,r2
}
    7334:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
    7338:	e0bffec3 	ldbu	r2,-5(fp)
    733c:	10800058 	cmpnei	r2,r2,1
    7340:	1000011e 	bne	r2,zero,7348 <OSFlagPost+0x34c>
        OS_Sched();
    7344:	00058300 	call	5830 <OS_Sched>
  NIOS2_READ_STATUS (context);
    7348:	0005303a 	rdctl	r2,status
    734c:	e0bff515 	stw	r2,-44(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7350:	e0fff517 	ldw	r3,-44(fp)
    7354:	00bfff84 	movi	r2,-2
    7358:	1884703a 	and	r2,r3,r2
    735c:	1001703a 	wrctl	status,r2
  return context;
    7360:	e0bff517 	ldw	r2,-44(fp)
    }
    OS_ENTER_CRITICAL();
    7364:	e0bffd15 	stw	r2,-12(fp)
    flags_cur = pgrp->OSFlagFlags;
    7368:	e0bff417 	ldw	r2,-48(fp)
    736c:	1080020b 	ldhu	r2,8(r2)
    7370:	e0bffc8d 	sth	r2,-14(fp)
    7374:	e0bffd17 	ldw	r2,-12(fp)
    7378:	e0bff615 	stw	r2,-40(fp)
  NIOS2_WRITE_STATUS (context);
    737c:	e0bff617 	ldw	r2,-40(fp)
    7380:	1001703a 	wrctl	status,r2
}
    7384:	0001883a 	nop
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
    7388:	e0bff117 	ldw	r2,-60(fp)
    738c:	10000005 	stb	zero,0(r2)
    return (flags_cur);
    7390:	e0bffc8b 	ldhu	r2,-14(fp)
}
    7394:	e037883a 	mov	sp,fp
    7398:	dfc00117 	ldw	ra,4(sp)
    739c:	df000017 	ldw	fp,0(sp)
    73a0:	dec00204 	addi	sp,sp,8
    73a4:	f800283a 	ret

000073a8 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
    73a8:	defff904 	addi	sp,sp,-28
    73ac:	df000615 	stw	fp,24(sp)
    73b0:	df000604 	addi	fp,sp,24
    73b4:	e13ffb15 	stw	r4,-20(fp)
    73b8:	e17ffa15 	stw	r5,-24(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
    73bc:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
    73c0:	e0bffa17 	ldw	r2,-24(fp)
    73c4:	1000021e 	bne	r2,zero,73d0 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
    73c8:	0005883a 	mov	r2,zero
    73cc:	00002406 	br	7460 <OSFlagQuery+0xb8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
    73d0:	e0bffb17 	ldw	r2,-20(fp)
    73d4:	1000051e 	bne	r2,zero,73ec <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    73d8:	e0bffa17 	ldw	r2,-24(fp)
    73dc:	00c01b84 	movi	r3,110
    73e0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    73e4:	0005883a 	mov	r2,zero
    73e8:	00001d06 	br	7460 <OSFlagQuery+0xb8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
    73ec:	e0bffb17 	ldw	r2,-20(fp)
    73f0:	10800003 	ldbu	r2,0(r2)
    73f4:	10803fcc 	andi	r2,r2,255
    73f8:	10800160 	cmpeqi	r2,r2,5
    73fc:	1000051e 	bne	r2,zero,7414 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
    7400:	e0bffa17 	ldw	r2,-24(fp)
    7404:	00c00044 	movi	r3,1
    7408:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    740c:	0005883a 	mov	r2,zero
    7410:	00001306 	br	7460 <OSFlagQuery+0xb8>
  NIOS2_READ_STATUS (context);
    7414:	0005303a 	rdctl	r2,status
    7418:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    741c:	e0fffc17 	ldw	r3,-16(fp)
    7420:	00bfff84 	movi	r2,-2
    7424:	1884703a 	and	r2,r3,r2
    7428:	1001703a 	wrctl	status,r2
  return context;
    742c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    7430:	e0bfff15 	stw	r2,-4(fp)
    flags = pgrp->OSFlagFlags;
    7434:	e0bffb17 	ldw	r2,-20(fp)
    7438:	1080020b 	ldhu	r2,8(r2)
    743c:	e0bffe8d 	sth	r2,-6(fp)
    7440:	e0bfff17 	ldw	r2,-4(fp)
    7444:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
    7448:	e0bffd17 	ldw	r2,-12(fp)
    744c:	1001703a 	wrctl	status,r2
}
    7450:	0001883a 	nop
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    7454:	e0bffa17 	ldw	r2,-24(fp)
    7458:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
    745c:	e0bffe8b 	ldhu	r2,-6(fp)
}
    7460:	e037883a 	mov	sp,fp
    7464:	df000017 	ldw	fp,0(sp)
    7468:	dec00104 	addi	sp,sp,4
    746c:	f800283a 	ret

00007470 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
    7470:	defff804 	addi	sp,sp,-32
    7474:	df000715 	stw	fp,28(sp)
    7478:	df000704 	addi	fp,sp,28
    747c:	e13ffd15 	stw	r4,-12(fp)
    7480:	e17ffc15 	stw	r5,-16(fp)
    7484:	3007883a 	mov	r3,r6
    7488:	3809883a 	mov	r4,r7
    748c:	e0800117 	ldw	r2,4(fp)
    7490:	e0fffb0d 	sth	r3,-20(fp)
    7494:	2007883a 	mov	r3,r4
    7498:	e0fffa05 	stb	r3,-24(fp)
    749c:	e0bff90d 	sth	r2,-28(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
    74a0:	d0a7c317 	ldw	r2,-24820(gp)
    74a4:	10c00c03 	ldbu	r3,48(r2)
    74a8:	d0a7c317 	ldw	r2,-24820(gp)
    74ac:	18c00814 	ori	r3,r3,32
    74b0:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
    74b4:	d0a7c317 	ldw	r2,-24820(gp)
    74b8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
    74bc:	d0a7c317 	ldw	r2,-24820(gp)
    74c0:	e0fff90b 	ldhu	r3,-28(fp)
    74c4:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
    74c8:	d0a7c317 	ldw	r2,-24820(gp)
    74cc:	e0fffc17 	ldw	r3,-16(fp)
    74d0:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
    74d4:	e0bffc17 	ldw	r2,-16(fp)
    74d8:	e0fffb0b 	ldhu	r3,-20(fp)
    74dc:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
    74e0:	e0bffc17 	ldw	r2,-16(fp)
    74e4:	e0fffa03 	ldbu	r3,-24(fp)
    74e8:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
    74ec:	d0e7c317 	ldw	r3,-24820(gp)
    74f0:	e0bffc17 	ldw	r2,-16(fp)
    74f4:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
    74f8:	e0bffd17 	ldw	r2,-12(fp)
    74fc:	10c00117 	ldw	r3,4(r2)
    7500:	e0bffc17 	ldw	r2,-16(fp)
    7504:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
    7508:	e0bffc17 	ldw	r2,-16(fp)
    750c:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
    7510:	e0bffc17 	ldw	r2,-16(fp)
    7514:	e0fffd17 	ldw	r3,-12(fp)
    7518:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    751c:	e0bffd17 	ldw	r2,-12(fp)
    7520:	10800117 	ldw	r2,4(r2)
    7524:	e0bfff15 	stw	r2,-4(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
    7528:	e0bfff17 	ldw	r2,-4(fp)
    752c:	10000326 	beq	r2,zero,753c <OS_FlagBlock+0xcc>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
    7530:	e0bfff17 	ldw	r2,-4(fp)
    7534:	e0fffc17 	ldw	r3,-16(fp)
    7538:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
    753c:	e0bffd17 	ldw	r2,-12(fp)
    7540:	e0fffc17 	ldw	r3,-16(fp)
    7544:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
    7548:	d0a7c317 	ldw	r2,-24820(gp)
    754c:	10800d03 	ldbu	r2,52(r2)
    7550:	e0bffec5 	stb	r2,-5(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
    7554:	e0fffec3 	ldbu	r3,-5(fp)
    7558:	d0a7c084 	addi	r2,gp,-24830
    755c:	1885883a 	add	r2,r3,r2
    7560:	10800003 	ldbu	r2,0(r2)
    7564:	1007883a 	mov	r3,r2
    7568:	d0a7c317 	ldw	r2,-24820(gp)
    756c:	10800d43 	ldbu	r2,53(r2)
    7570:	0084303a 	nor	r2,zero,r2
    7574:	1884703a 	and	r2,r3,r2
    7578:	e0fffec3 	ldbu	r3,-5(fp)
    757c:	1009883a 	mov	r4,r2
    7580:	d0a7c084 	addi	r2,gp,-24830
    7584:	1885883a 	add	r2,r3,r2
    7588:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
    758c:	e0fffec3 	ldbu	r3,-5(fp)
    7590:	d0a7c084 	addi	r2,gp,-24830
    7594:	1885883a 	add	r2,r3,r2
    7598:	10800003 	ldbu	r2,0(r2)
    759c:	10803fcc 	andi	r2,r2,255
    75a0:	1000071e 	bne	r2,zero,75c0 <OS_FlagBlock+0x150>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
    75a4:	d0a7c317 	ldw	r2,-24820(gp)
    75a8:	10800d83 	ldbu	r2,54(r2)
    75ac:	0084303a 	nor	r2,zero,r2
    75b0:	1007883a 	mov	r3,r2
    75b4:	d0a7c043 	ldbu	r2,-24831(gp)
    75b8:	1884703a 	and	r2,r3,r2
    75bc:	d0a7c045 	stb	r2,-24831(gp)
    }
}
    75c0:	0001883a 	nop
    75c4:	e037883a 	mov	sp,fp
    75c8:	df000017 	ldw	fp,0(sp)
    75cc:	dec00104 	addi	sp,sp,4
    75d0:	f800283a 	ret

000075d4 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
    75d4:	defffb04 	addi	sp,sp,-20
    75d8:	dfc00415 	stw	ra,16(sp)
    75dc:	df000315 	stw	fp,12(sp)
    75e0:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    75e4:	0140dc04 	movi	r5,880
    75e8:	010000b4 	movhi	r4,2
    75ec:	2120a104 	addi	r4,r4,-32124
    75f0:	000576c0 	call	576c <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
    75f4:	008000b4 	movhi	r2,2
    75f8:	10a0a104 	addi	r2,r2,-32124
    75fc:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
    7600:	008000b4 	movhi	r2,2
    7604:	10a0ac04 	addi	r2,r2,-32080
    7608:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
    760c:	e03fff8d 	sth	zero,-2(fp)
    7610:	00001306 	br	7660 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    7614:	e0bffe17 	ldw	r2,-8(fp)
    7618:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
    761c:	e0bffe17 	ldw	r2,-8(fp)
    7620:	e0fffd17 	ldw	r3,-12(fp)
    7624:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
    7628:	e0bffe17 	ldw	r2,-8(fp)
    762c:	00c00fc4 	movi	r3,63
    7630:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
    7634:	e0bffe17 	ldw	r2,-8(fp)
    7638:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
    763c:	e0bffe17 	ldw	r2,-8(fp)
    7640:	10800b04 	addi	r2,r2,44
    7644:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
    7648:	e0bffd17 	ldw	r2,-12(fp)
    764c:	10800b04 	addi	r2,r2,44
    7650:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
    7654:	e0bfff8b 	ldhu	r2,-2(fp)
    7658:	10800044 	addi	r2,r2,1
    765c:	e0bfff8d 	sth	r2,-2(fp)
    7660:	e0bfff8b 	ldhu	r2,-2(fp)
    7664:	108004f0 	cmpltui	r2,r2,19
    7668:	103fea1e 	bne	r2,zero,7614 <OS_FlagInit+0x40>
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    766c:	e0bffe17 	ldw	r2,-8(fp)
    7670:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
    7674:	e0bffe17 	ldw	r2,-8(fp)
    7678:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
    767c:	e0bffe17 	ldw	r2,-8(fp)
    7680:	00c00fc4 	movi	r3,63
    7684:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
    7688:	e0bffe17 	ldw	r2,-8(fp)
    768c:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
    7690:	008000b4 	movhi	r2,2
    7694:	10a0a104 	addi	r2,r2,-32124
    7698:	d0a7bb15 	stw	r2,-24852(gp)
#endif
}
    769c:	0001883a 	nop
    76a0:	e037883a 	mov	sp,fp
    76a4:	dfc00117 	ldw	ra,4(sp)
    76a8:	df000017 	ldw	fp,0(sp)
    76ac:	dec00204 	addi	sp,sp,8
    76b0:	f800283a 	ret

000076b4 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
    76b4:	defffa04 	addi	sp,sp,-24
    76b8:	dfc00515 	stw	ra,20(sp)
    76bc:	df000415 	stw	fp,16(sp)
    76c0:	df000404 	addi	fp,sp,16
    76c4:	e13ffd15 	stw	r4,-12(fp)
    76c8:	2805883a 	mov	r2,r5
    76cc:	e0bffc0d 	sth	r2,-16(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
    76d0:	e0bffd17 	ldw	r2,-12(fp)
    76d4:	10800217 	ldw	r2,8(r2)
    76d8:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBDly       = 0;
    76dc:	e0bffe17 	ldw	r2,-8(fp)
    76e0:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
    76e4:	e0bffe17 	ldw	r2,-8(fp)
    76e8:	e0fffc0b 	ldhu	r3,-16(fp)
    76ec:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
    76f0:	e0bffe17 	ldw	r2,-8(fp)
    76f4:	10c00c03 	ldbu	r3,48(r2)
    76f8:	00bff7c4 	movi	r2,-33
    76fc:	1884703a 	and	r2,r3,r2
    7700:	1007883a 	mov	r3,r2
    7704:	e0bffe17 	ldw	r2,-8(fp)
    7708:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
    770c:	e0bffe17 	ldw	r2,-8(fp)
    7710:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
    7714:	e0bffe17 	ldw	r2,-8(fp)
    7718:	10800c03 	ldbu	r2,48(r2)
    771c:	10803fcc 	andi	r2,r2,255
    7720:	1000181e 	bne	r2,zero,7784 <OS_FlagTaskRdy+0xd0>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
    7724:	e0bffe17 	ldw	r2,-8(fp)
    7728:	10c00d83 	ldbu	r3,54(r2)
    772c:	d0a7c043 	ldbu	r2,-24831(gp)
    7730:	1884b03a 	or	r2,r3,r2
    7734:	d0a7c045 	stb	r2,-24831(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    7738:	e0bffe17 	ldw	r2,-8(fp)
    773c:	10800d03 	ldbu	r2,52(r2)
    7740:	10c03fcc 	andi	r3,r2,255
    7744:	d0a7c084 	addi	r2,gp,-24830
    7748:	1885883a 	add	r2,r3,r2
    774c:	11000003 	ldbu	r4,0(r2)
    7750:	e0bffe17 	ldw	r2,-8(fp)
    7754:	10800d43 	ldbu	r2,53(r2)
    7758:	e0fffe17 	ldw	r3,-8(fp)
    775c:	18c00d03 	ldbu	r3,52(r3)
    7760:	18c03fcc 	andi	r3,r3,255
    7764:	2084b03a 	or	r2,r4,r2
    7768:	1009883a 	mov	r4,r2
    776c:	d0a7c084 	addi	r2,gp,-24830
    7770:	1885883a 	add	r2,r3,r2
    7774:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
    7778:	00800044 	movi	r2,1
    777c:	e0bfffc5 	stb	r2,-1(fp)
    7780:	00000106 	br	7788 <OS_FlagTaskRdy+0xd4>
    } else {
        sched                   = OS_FALSE;
    7784:	e03fffc5 	stb	zero,-1(fp)
    }
    OS_FlagUnlink(pnode);
    7788:	e13ffd17 	ldw	r4,-12(fp)
    778c:	00077a80 	call	77a8 <OS_FlagUnlink>
    return (sched);
    7790:	e0bfffc3 	ldbu	r2,-1(fp)
}
    7794:	e037883a 	mov	sp,fp
    7798:	dfc00117 	ldw	ra,4(sp)
    779c:	df000017 	ldw	fp,0(sp)
    77a0:	dec00204 	addi	sp,sp,8
    77a4:	f800283a 	ret

000077a8 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
    77a8:	defffa04 	addi	sp,sp,-24
    77ac:	df000515 	stw	fp,20(sp)
    77b0:	df000504 	addi	fp,sp,20
    77b4:	e13ffb15 	stw	r4,-20(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
    77b8:	e0bffb17 	ldw	r2,-20(fp)
    77bc:	10800117 	ldw	r2,4(r2)
    77c0:	e0bfff15 	stw	r2,-4(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
    77c4:	e0bffb17 	ldw	r2,-20(fp)
    77c8:	10800017 	ldw	r2,0(r2)
    77cc:	e0bffe15 	stw	r2,-8(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
    77d0:	e0bfff17 	ldw	r2,-4(fp)
    77d4:	10000b1e 	bne	r2,zero,7804 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
    77d8:	e0bffb17 	ldw	r2,-20(fp)
    77dc:	10800317 	ldw	r2,12(r2)
    77e0:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
    77e4:	e0bffd17 	ldw	r2,-12(fp)
    77e8:	e0fffe17 	ldw	r3,-8(fp)
    77ec:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
    77f0:	e0bffe17 	ldw	r2,-8(fp)
    77f4:	10000b26 	beq	r2,zero,7824 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
    77f8:	e0bffe17 	ldw	r2,-8(fp)
    77fc:	10000115 	stw	zero,4(r2)
    7800:	00000806 	br	7824 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
    7804:	e0bfff17 	ldw	r2,-4(fp)
    7808:	e0fffe17 	ldw	r3,-8(fp)
    780c:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
    7810:	e0bffe17 	ldw	r2,-8(fp)
    7814:	10000326 	beq	r2,zero,7824 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
    7818:	e0bffe17 	ldw	r2,-8(fp)
    781c:	e0ffff17 	ldw	r3,-4(fp)
    7820:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
    7824:	e0bffb17 	ldw	r2,-20(fp)
    7828:	10800217 	ldw	r2,8(r2)
    782c:	e0bffc15 	stw	r2,-16(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
    7830:	e0bffc17 	ldw	r2,-16(fp)
    7834:	10000a15 	stw	zero,40(r2)
#endif
}
    7838:	0001883a 	nop
    783c:	e037883a 	mov	sp,fp
    7840:	df000017 	ldw	fp,0(sp)
    7844:	dec00104 	addi	sp,sp,4
    7848:	f800283a 	ret

0000784c <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
    784c:	defff404 	addi	sp,sp,-48
    7850:	df000b15 	stw	fp,44(sp)
    7854:	df000b04 	addi	fp,sp,44
    7858:	e13ff815 	stw	r4,-32(fp)
    785c:	e17ff715 	stw	r5,-36(fp)
    7860:	e1bff615 	stw	r6,-40(fp)
    7864:	e1fff515 	stw	r7,-44(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    7868:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    786c:	e0bff517 	ldw	r2,-44(fp)
    7870:	1000021e 	bne	r2,zero,787c <OSMemCreate+0x30>
        return ((OS_MEM *)0);
    7874:	0005883a 	mov	r2,zero
    7878:	00006606 	br	7a14 <OSMemCreate+0x1c8>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
    787c:	e0bff817 	ldw	r2,-32(fp)
    7880:	1000051e 	bne	r2,zero,7898 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
    7884:	e0bff517 	ldw	r2,-44(fp)
    7888:	00c01884 	movi	r3,98
    788c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    7890:	0005883a 	mov	r2,zero
    7894:	00005f06 	br	7a14 <OSMemCreate+0x1c8>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
    7898:	e0bff817 	ldw	r2,-32(fp)
    789c:	108000cc 	andi	r2,r2,3
    78a0:	10000526 	beq	r2,zero,78b8 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
    78a4:	e0bff517 	ldw	r2,-44(fp)
    78a8:	00c01884 	movi	r3,98
    78ac:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    78b0:	0005883a 	mov	r2,zero
    78b4:	00005706 	br	7a14 <OSMemCreate+0x1c8>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
    78b8:	e0bff717 	ldw	r2,-36(fp)
    78bc:	108000a8 	cmpgeui	r2,r2,2
    78c0:	1000051e 	bne	r2,zero,78d8 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
    78c4:	e0bff517 	ldw	r2,-44(fp)
    78c8:	00c016c4 	movi	r3,91
    78cc:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    78d0:	0005883a 	mov	r2,zero
    78d4:	00004f06 	br	7a14 <OSMemCreate+0x1c8>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
    78d8:	e0bff617 	ldw	r2,-40(fp)
    78dc:	10800128 	cmpgeui	r2,r2,4
    78e0:	1000051e 	bne	r2,zero,78f8 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
    78e4:	e0bff517 	ldw	r2,-44(fp)
    78e8:	00c01704 	movi	r3,92
    78ec:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    78f0:	0005883a 	mov	r2,zero
    78f4:	00004706 	br	7a14 <OSMemCreate+0x1c8>
  NIOS2_READ_STATUS (context);
    78f8:	0005303a 	rdctl	r2,status
    78fc:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7900:	e0fffa17 	ldw	r3,-24(fp)
    7904:	00bfff84 	movi	r2,-2
    7908:	1884703a 	and	r2,r3,r2
    790c:	1001703a 	wrctl	status,r2
  return context;
    7910:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    7914:	e0bffc15 	stw	r2,-16(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
    7918:	d0a7c817 	ldw	r2,-24800(gp)
    791c:	e0bffb15 	stw	r2,-20(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
    7920:	d0a7c817 	ldw	r2,-24800(gp)
    7924:	10000326 	beq	r2,zero,7934 <OSMemCreate+0xe8>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
    7928:	d0a7c817 	ldw	r2,-24800(gp)
    792c:	10800117 	ldw	r2,4(r2)
    7930:	d0a7c815 	stw	r2,-24800(gp)
    7934:	e0bffc17 	ldw	r2,-16(fp)
    7938:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
    793c:	e0bff917 	ldw	r2,-28(fp)
    7940:	1001703a 	wrctl	status,r2
}
    7944:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
    7948:	e0bffb17 	ldw	r2,-20(fp)
    794c:	1000051e 	bne	r2,zero,7964 <OSMemCreate+0x118>
        *perr = OS_ERR_MEM_INVALID_PART;
    7950:	e0bff517 	ldw	r2,-44(fp)
    7954:	00c01684 	movi	r3,90
    7958:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    795c:	0005883a 	mov	r2,zero
    7960:	00002c06 	br	7a14 <OSMemCreate+0x1c8>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    7964:	e0bff817 	ldw	r2,-32(fp)
    7968:	e0bffe15 	stw	r2,-8(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
    796c:	e0fff817 	ldw	r3,-32(fp)
    7970:	e0bff617 	ldw	r2,-40(fp)
    7974:	1885883a 	add	r2,r3,r2
    7978:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (nblks - 1); i++) {
    797c:	e03ffd15 	stw	zero,-12(fp)
    7980:	00000c06 	br	79b4 <OSMemCreate+0x168>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
    7984:	e0bffe17 	ldw	r2,-8(fp)
    7988:	e0ffff17 	ldw	r3,-4(fp)
    798c:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
    7990:	e0bfff17 	ldw	r2,-4(fp)
    7994:	e0bffe15 	stw	r2,-8(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    7998:	e0ffff17 	ldw	r3,-4(fp)
    799c:	e0bff617 	ldw	r2,-40(fp)
    79a0:	1885883a 	add	r2,r3,r2
    79a4:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (nblks - 1); i++) {
    79a8:	e0bffd17 	ldw	r2,-12(fp)
    79ac:	10800044 	addi	r2,r2,1
    79b0:	e0bffd15 	stw	r2,-12(fp)
    79b4:	e0bff717 	ldw	r2,-36(fp)
    79b8:	10bfffc4 	addi	r2,r2,-1
    79bc:	e0fffd17 	ldw	r3,-12(fp)
    79c0:	18bff036 	bltu	r3,r2,7984 <OSMemCreate+0x138>
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
    79c4:	e0bffe17 	ldw	r2,-8(fp)
    79c8:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
    79cc:	e0bffb17 	ldw	r2,-20(fp)
    79d0:	e0fff817 	ldw	r3,-32(fp)
    79d4:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
    79d8:	e0bffb17 	ldw	r2,-20(fp)
    79dc:	e0fff817 	ldw	r3,-32(fp)
    79e0:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
    79e4:	e0bffb17 	ldw	r2,-20(fp)
    79e8:	e0fff717 	ldw	r3,-36(fp)
    79ec:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
    79f0:	e0bffb17 	ldw	r2,-20(fp)
    79f4:	e0fff717 	ldw	r3,-36(fp)
    79f8:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
    79fc:	e0bffb17 	ldw	r2,-20(fp)
    7a00:	e0fff617 	ldw	r3,-40(fp)
    7a04:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
    7a08:	e0bff517 	ldw	r2,-44(fp)
    7a0c:	10000005 	stb	zero,0(r2)
    return (pmem);
    7a10:	e0bffb17 	ldw	r2,-20(fp)
}
    7a14:	e037883a 	mov	sp,fp
    7a18:	df000017 	ldw	fp,0(sp)
    7a1c:	dec00104 	addi	sp,sp,4
    7a20:	f800283a 	ret

00007a24 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
    7a24:	defff804 	addi	sp,sp,-32
    7a28:	df000715 	stw	fp,28(sp)
    7a2c:	df000704 	addi	fp,sp,28
    7a30:	e13ffa15 	stw	r4,-24(fp)
    7a34:	e17ff915 	stw	r5,-28(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    7a38:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    7a3c:	e0bff917 	ldw	r2,-28(fp)
    7a40:	1000021e 	bne	r2,zero,7a4c <OSMemGet+0x28>
        return ((void *)0);
    7a44:	0005883a 	mov	r2,zero
    7a48:	00003006 	br	7b0c <OSMemGet+0xe8>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
    7a4c:	e0bffa17 	ldw	r2,-24(fp)
    7a50:	1000051e 	bne	r2,zero,7a68 <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
    7a54:	e0bff917 	ldw	r2,-28(fp)
    7a58:	00c01804 	movi	r3,96
    7a5c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    7a60:	0005883a 	mov	r2,zero
    7a64:	00002906 	br	7b0c <OSMemGet+0xe8>
  NIOS2_READ_STATUS (context);
    7a68:	0005303a 	rdctl	r2,status
    7a6c:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7a70:	e0fffd17 	ldw	r3,-12(fp)
    7a74:	00bfff84 	movi	r2,-2
    7a78:	1884703a 	and	r2,r3,r2
    7a7c:	1001703a 	wrctl	status,r2
  return context;
    7a80:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    7a84:	e0bfff15 	stw	r2,-4(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
    7a88:	e0bffa17 	ldw	r2,-24(fp)
    7a8c:	10800417 	ldw	r2,16(r2)
    7a90:	10001526 	beq	r2,zero,7ae8 <OSMemGet+0xc4>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
    7a94:	e0bffa17 	ldw	r2,-24(fp)
    7a98:	10800117 	ldw	r2,4(r2)
    7a9c:	e0bffe15 	stw	r2,-8(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
    7aa0:	e0bffe17 	ldw	r2,-8(fp)
    7aa4:	10c00017 	ldw	r3,0(r2)
    7aa8:	e0bffa17 	ldw	r2,-24(fp)
    7aac:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
    7ab0:	e0bffa17 	ldw	r2,-24(fp)
    7ab4:	10800417 	ldw	r2,16(r2)
    7ab8:	10ffffc4 	addi	r3,r2,-1
    7abc:	e0bffa17 	ldw	r2,-24(fp)
    7ac0:	10c00415 	stw	r3,16(r2)
    7ac4:	e0bfff17 	ldw	r2,-4(fp)
    7ac8:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    7acc:	e0bffc17 	ldw	r2,-16(fp)
    7ad0:	1001703a 	wrctl	status,r2
}
    7ad4:	0001883a 	nop
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
    7ad8:	e0bff917 	ldw	r2,-28(fp)
    7adc:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
    7ae0:	e0bffe17 	ldw	r2,-8(fp)
    7ae4:	00000906 	br	7b0c <OSMemGet+0xe8>
    7ae8:	e0bfff17 	ldw	r2,-4(fp)
    7aec:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    7af0:	e0bffb17 	ldw	r2,-20(fp)
    7af4:	1001703a 	wrctl	status,r2
}
    7af8:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
    7afc:	e0bff917 	ldw	r2,-28(fp)
    7b00:	00c01744 	movi	r3,93
    7b04:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
    7b08:	0005883a 	mov	r2,zero
}
    7b0c:	e037883a 	mov	sp,fp
    7b10:	df000017 	ldw	fp,0(sp)
    7b14:	dec00104 	addi	sp,sp,4
    7b18:	f800283a 	ret

00007b1c <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
    7b1c:	defff704 	addi	sp,sp,-36
    7b20:	dfc00815 	stw	ra,32(sp)
    7b24:	df000715 	stw	fp,28(sp)
    7b28:	df000704 	addi	fp,sp,28
    7b2c:	e13ffb15 	stw	r4,-20(fp)
    7b30:	e17ffa15 	stw	r5,-24(fp)
    7b34:	e1bff915 	stw	r6,-28(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    7b38:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    7b3c:	e0bff917 	ldw	r2,-28(fp)
    7b40:	1000021e 	bne	r2,zero,7b4c <OSMemNameGet+0x30>
        return (0);
    7b44:	0005883a 	mov	r2,zero
    7b48:	00002c06 	br	7bfc <OSMemNameGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
    7b4c:	e0bffb17 	ldw	r2,-20(fp)
    7b50:	1000051e 	bne	r2,zero,7b68 <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
    7b54:	e0bff917 	ldw	r2,-28(fp)
    7b58:	00c01804 	movi	r3,96
    7b5c:	10c00005 	stb	r3,0(r2)
        return (0);
    7b60:	0005883a 	mov	r2,zero
    7b64:	00002506 	br	7bfc <OSMemNameGet+0xe0>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    7b68:	e0bffa17 	ldw	r2,-24(fp)
    7b6c:	1000051e 	bne	r2,zero,7b84 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
    7b70:	e0bff917 	ldw	r2,-28(fp)
    7b74:	00c00304 	movi	r3,12
    7b78:	10c00005 	stb	r3,0(r2)
        return (0);
    7b7c:	0005883a 	mov	r2,zero
    7b80:	00001e06 	br	7bfc <OSMemNameGet+0xe0>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    7b84:	d0a7bf43 	ldbu	r2,-24835(gp)
    7b88:	10803fcc 	andi	r2,r2,255
    7b8c:	10000526 	beq	r2,zero,7ba4 <OSMemNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
    7b90:	e0bff917 	ldw	r2,-28(fp)
    7b94:	00c00444 	movi	r3,17
    7b98:	10c00005 	stb	r3,0(r2)
        return (0);
    7b9c:	0005883a 	mov	r2,zero
    7ba0:	00001606 	br	7bfc <OSMemNameGet+0xe0>
  NIOS2_READ_STATUS (context);
    7ba4:	0005303a 	rdctl	r2,status
    7ba8:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7bac:	e0fffc17 	ldw	r3,-16(fp)
    7bb0:	00bfff84 	movi	r2,-2
    7bb4:	1884703a 	and	r2,r3,r2
    7bb8:	1001703a 	wrctl	status,r2
  return context;
    7bbc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    7bc0:	e0bfff15 	stw	r2,-4(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
    7bc4:	e0bffb17 	ldw	r2,-20(fp)
    7bc8:	10800504 	addi	r2,r2,20
    7bcc:	100b883a 	mov	r5,r2
    7bd0:	e13ffa17 	ldw	r4,-24(fp)
    7bd4:	00059680 	call	5968 <OS_StrCopy>
    7bd8:	e0bffec5 	stb	r2,-5(fp)
    7bdc:	e0bfff17 	ldw	r2,-4(fp)
    7be0:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
    7be4:	e0bffd17 	ldw	r2,-12(fp)
    7be8:	1001703a 	wrctl	status,r2
}
    7bec:	0001883a 	nop
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    7bf0:	e0bff917 	ldw	r2,-28(fp)
    7bf4:	10000005 	stb	zero,0(r2)
    return (len);
    7bf8:	e0bffec3 	ldbu	r2,-5(fp)
}
    7bfc:	e037883a 	mov	sp,fp
    7c00:	dfc00117 	ldw	ra,4(sp)
    7c04:	df000017 	ldw	fp,0(sp)
    7c08:	dec00204 	addi	sp,sp,8
    7c0c:	f800283a 	ret

00007c10 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
    7c10:	defff604 	addi	sp,sp,-40
    7c14:	dfc00915 	stw	ra,36(sp)
    7c18:	df000815 	stw	fp,32(sp)
    7c1c:	df000804 	addi	fp,sp,32
    7c20:	e13ffa15 	stw	r4,-24(fp)
    7c24:	e17ff915 	stw	r5,-28(fp)
    7c28:	e1bff815 	stw	r6,-32(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    7c2c:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    7c30:	e0bff817 	ldw	r2,-32(fp)
    7c34:	10003726 	beq	r2,zero,7d14 <OSMemNameSet+0x104>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
    7c38:	e0bffa17 	ldw	r2,-24(fp)
    7c3c:	1000041e 	bne	r2,zero,7c50 <OSMemNameSet+0x40>
        *perr = OS_ERR_MEM_INVALID_PMEM;
    7c40:	e0bff817 	ldw	r2,-32(fp)
    7c44:	00c01804 	movi	r3,96
    7c48:	10c00005 	stb	r3,0(r2)
        return;
    7c4c:	00003206 	br	7d18 <OSMemNameSet+0x108>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    7c50:	e0bff917 	ldw	r2,-28(fp)
    7c54:	1000041e 	bne	r2,zero,7c68 <OSMemNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
    7c58:	e0bff817 	ldw	r2,-32(fp)
    7c5c:	00c00304 	movi	r3,12
    7c60:	10c00005 	stb	r3,0(r2)
        return;
    7c64:	00002c06 	br	7d18 <OSMemNameSet+0x108>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    7c68:	d0a7bf43 	ldbu	r2,-24835(gp)
    7c6c:	10803fcc 	andi	r2,r2,255
    7c70:	10000426 	beq	r2,zero,7c84 <OSMemNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
    7c74:	e0bff817 	ldw	r2,-32(fp)
    7c78:	00c00484 	movi	r3,18
    7c7c:	10c00005 	stb	r3,0(r2)
        return;
    7c80:	00002506 	br	7d18 <OSMemNameSet+0x108>
  NIOS2_READ_STATUS (context);
    7c84:	0005303a 	rdctl	r2,status
    7c88:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7c8c:	e0fffd17 	ldw	r3,-12(fp)
    7c90:	00bfff84 	movi	r2,-2
    7c94:	1884703a 	and	r2,r3,r2
    7c98:	1001703a 	wrctl	status,r2
  return context;
    7c9c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    7ca0:	e0bfff15 	stw	r2,-4(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
    7ca4:	e13ff917 	ldw	r4,-28(fp)
    7ca8:	00059dc0 	call	59dc <OS_StrLen>
    7cac:	e0bffec5 	stb	r2,-5(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
    7cb0:	e0bffec3 	ldbu	r2,-5(fp)
    7cb4:	10800830 	cmpltui	r2,r2,32
    7cb8:	1000091e 	bne	r2,zero,7ce0 <OSMemNameSet+0xd0>
    7cbc:	e0bfff17 	ldw	r2,-4(fp)
    7cc0:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    7cc4:	e0bffc17 	ldw	r2,-16(fp)
    7cc8:	1001703a 	wrctl	status,r2
}
    7ccc:	0001883a 	nop
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
    7cd0:	e0bff817 	ldw	r2,-32(fp)
    7cd4:	00c018c4 	movi	r3,99
    7cd8:	10c00005 	stb	r3,0(r2)
        return;
    7cdc:	00000e06 	br	7d18 <OSMemNameSet+0x108>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    7ce0:	e0bffa17 	ldw	r2,-24(fp)
    7ce4:	10800504 	addi	r2,r2,20
    7ce8:	e17ff917 	ldw	r5,-28(fp)
    7cec:	1009883a 	mov	r4,r2
    7cf0:	00059680 	call	5968 <OS_StrCopy>
    7cf4:	e0bfff17 	ldw	r2,-4(fp)
    7cf8:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    7cfc:	e0bffb17 	ldw	r2,-20(fp)
    7d00:	1001703a 	wrctl	status,r2
}
    7d04:	0001883a 	nop
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    7d08:	e0bff817 	ldw	r2,-32(fp)
    7d0c:	10000005 	stb	zero,0(r2)
    7d10:	00000106 	br	7d18 <OSMemNameSet+0x108>
        return;
    7d14:	0001883a 	nop
}
    7d18:	e037883a 	mov	sp,fp
    7d1c:	dfc00117 	ldw	ra,4(sp)
    7d20:	df000017 	ldw	fp,0(sp)
    7d24:	dec00204 	addi	sp,sp,8
    7d28:	f800283a 	ret

00007d2c <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
    7d2c:	defff904 	addi	sp,sp,-28
    7d30:	df000615 	stw	fp,24(sp)
    7d34:	df000604 	addi	fp,sp,24
    7d38:	e13ffb15 	stw	r4,-20(fp)
    7d3c:	e17ffa15 	stw	r5,-24(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    7d40:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
    7d44:	e0bffb17 	ldw	r2,-20(fp)
    7d48:	1000021e 	bne	r2,zero,7d54 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
    7d4c:	00801804 	movi	r2,96
    7d50:	00002a06 	br	7dfc <OSMemPut+0xd0>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
    7d54:	e0bffa17 	ldw	r2,-24(fp)
    7d58:	1000021e 	bne	r2,zero,7d64 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
    7d5c:	008017c4 	movi	r2,95
    7d60:	00002606 	br	7dfc <OSMemPut+0xd0>
  NIOS2_READ_STATUS (context);
    7d64:	0005303a 	rdctl	r2,status
    7d68:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7d6c:	e0fffe17 	ldw	r3,-8(fp)
    7d70:	00bfff84 	movi	r2,-2
    7d74:	1884703a 	and	r2,r3,r2
    7d78:	1001703a 	wrctl	status,r2
  return context;
    7d7c:	e0bffe17 	ldw	r2,-8(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    7d80:	e0bfff15 	stw	r2,-4(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
    7d84:	e0bffb17 	ldw	r2,-20(fp)
    7d88:	10c00417 	ldw	r3,16(r2)
    7d8c:	e0bffb17 	ldw	r2,-20(fp)
    7d90:	10800317 	ldw	r2,12(r2)
    7d94:	18800736 	bltu	r3,r2,7db4 <OSMemPut+0x88>
    7d98:	e0bfff17 	ldw	r2,-4(fp)
    7d9c:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
    7da0:	e0bffd17 	ldw	r2,-12(fp)
    7da4:	1001703a 	wrctl	status,r2
}
    7da8:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
    7dac:	00801784 	movi	r2,94
    7db0:	00001206 	br	7dfc <OSMemPut+0xd0>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
    7db4:	e0bffb17 	ldw	r2,-20(fp)
    7db8:	10c00117 	ldw	r3,4(r2)
    7dbc:	e0bffa17 	ldw	r2,-24(fp)
    7dc0:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
    7dc4:	e0bffb17 	ldw	r2,-20(fp)
    7dc8:	e0fffa17 	ldw	r3,-24(fp)
    7dcc:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
    7dd0:	e0bffb17 	ldw	r2,-20(fp)
    7dd4:	10800417 	ldw	r2,16(r2)
    7dd8:	10c00044 	addi	r3,r2,1
    7ddc:	e0bffb17 	ldw	r2,-20(fp)
    7de0:	10c00415 	stw	r3,16(r2)
    7de4:	e0bfff17 	ldw	r2,-4(fp)
    7de8:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    7dec:	e0bffc17 	ldw	r2,-16(fp)
    7df0:	1001703a 	wrctl	status,r2
}
    7df4:	0001883a 	nop
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
    7df8:	0005883a 	mov	r2,zero
}
    7dfc:	e037883a 	mov	sp,fp
    7e00:	df000017 	ldw	fp,0(sp)
    7e04:	dec00104 	addi	sp,sp,4
    7e08:	f800283a 	ret

00007e0c <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
    7e0c:	defffa04 	addi	sp,sp,-24
    7e10:	df000515 	stw	fp,20(sp)
    7e14:	df000504 	addi	fp,sp,20
    7e18:	e13ffc15 	stw	r4,-16(fp)
    7e1c:	e17ffb15 	stw	r5,-20(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    7e20:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
    7e24:	e0bffc17 	ldw	r2,-16(fp)
    7e28:	1000021e 	bne	r2,zero,7e34 <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
    7e2c:	00801804 	movi	r2,96
    7e30:	00002d06 	br	7ee8 <OSMemQuery+0xdc>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
    7e34:	e0bffb17 	ldw	r2,-20(fp)
    7e38:	1000021e 	bne	r2,zero,7e44 <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
    7e3c:	00801844 	movi	r2,97
    7e40:	00002906 	br	7ee8 <OSMemQuery+0xdc>
  NIOS2_READ_STATUS (context);
    7e44:	0005303a 	rdctl	r2,status
    7e48:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7e4c:	e0fffd17 	ldw	r3,-12(fp)
    7e50:	00bfff84 	movi	r2,-2
    7e54:	1884703a 	and	r2,r3,r2
    7e58:	1001703a 	wrctl	status,r2
  return context;
    7e5c:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    7e60:	e0bfff15 	stw	r2,-4(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
    7e64:	e0bffc17 	ldw	r2,-16(fp)
    7e68:	10c00017 	ldw	r3,0(r2)
    7e6c:	e0bffb17 	ldw	r2,-20(fp)
    7e70:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
    7e74:	e0bffc17 	ldw	r2,-16(fp)
    7e78:	10c00117 	ldw	r3,4(r2)
    7e7c:	e0bffb17 	ldw	r2,-20(fp)
    7e80:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
    7e84:	e0bffc17 	ldw	r2,-16(fp)
    7e88:	10c00217 	ldw	r3,8(r2)
    7e8c:	e0bffb17 	ldw	r2,-20(fp)
    7e90:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
    7e94:	e0bffc17 	ldw	r2,-16(fp)
    7e98:	10c00317 	ldw	r3,12(r2)
    7e9c:	e0bffb17 	ldw	r2,-20(fp)
    7ea0:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
    7ea4:	e0bffc17 	ldw	r2,-16(fp)
    7ea8:	10c00417 	ldw	r3,16(r2)
    7eac:	e0bffb17 	ldw	r2,-20(fp)
    7eb0:	10c00415 	stw	r3,16(r2)
    7eb4:	e0bfff17 	ldw	r2,-4(fp)
    7eb8:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
    7ebc:	e0bffe17 	ldw	r2,-8(fp)
    7ec0:	1001703a 	wrctl	status,r2
}
    7ec4:	0001883a 	nop
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
    7ec8:	e0bffb17 	ldw	r2,-20(fp)
    7ecc:	10c00317 	ldw	r3,12(r2)
    7ed0:	e0bffb17 	ldw	r2,-20(fp)
    7ed4:	10800417 	ldw	r2,16(r2)
    7ed8:	1887c83a 	sub	r3,r3,r2
    7edc:	e0bffb17 	ldw	r2,-20(fp)
    7ee0:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
    7ee4:	0005883a 	mov	r2,zero
}
    7ee8:	e037883a 	mov	sp,fp
    7eec:	df000017 	ldw	fp,0(sp)
    7ef0:	dec00104 	addi	sp,sp,4
    7ef4:	f800283a 	ret

00007ef8 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
    7ef8:	defffc04 	addi	sp,sp,-16
    7efc:	dfc00315 	stw	ra,12(sp)
    7f00:	df000215 	stw	fp,8(sp)
    7f04:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    7f08:	01430c04 	movi	r5,3120
    7f0c:	010000b4 	movhi	r4,2
    7f10:	2126d604 	addi	r4,r4,-25768
    7f14:	000576c0 	call	576c <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    7f18:	008000b4 	movhi	r2,2
    7f1c:	10a6d604 	addi	r2,r2,-25768
    7f20:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
    7f24:	e03ffe8d 	sth	zero,-6(fp)
    7f28:	00001306 	br	7f78 <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
    7f2c:	e0bffe8b 	ldhu	r2,-6(fp)
    7f30:	10800044 	addi	r2,r2,1
    7f34:	10c00d24 	muli	r3,r2,52
    7f38:	008000b4 	movhi	r2,2
    7f3c:	10a6d604 	addi	r2,r2,-25768
    7f40:	1887883a 	add	r3,r3,r2
    7f44:	e0bfff17 	ldw	r2,-4(fp)
    7f48:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
    7f4c:	e0bfff17 	ldw	r2,-4(fp)
    7f50:	00c00fc4 	movi	r3,63
    7f54:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
    7f58:	e0bfff17 	ldw	r2,-4(fp)
    7f5c:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
    7f60:	e0bfff17 	ldw	r2,-4(fp)
    7f64:	10800d04 	addi	r2,r2,52
    7f68:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
    7f6c:	e0bffe8b 	ldhu	r2,-6(fp)
    7f70:	10800044 	addi	r2,r2,1
    7f74:	e0bffe8d 	sth	r2,-6(fp)
    7f78:	e0bffe8b 	ldhu	r2,-6(fp)
    7f7c:	10800ef0 	cmpltui	r2,r2,59
    7f80:	103fea1e 	bne	r2,zero,7f2c <OS_MemInit+0x34>
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
    7f84:	e0bfff17 	ldw	r2,-4(fp)
    7f88:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
    7f8c:	e0bfff17 	ldw	r2,-4(fp)
    7f90:	00c00fc4 	movi	r3,63
    7f94:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
    7f98:	e0bfff17 	ldw	r2,-4(fp)
    7f9c:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
    7fa0:	008000b4 	movhi	r2,2
    7fa4:	10a6d604 	addi	r2,r2,-25768
    7fa8:	d0a7c815 	stw	r2,-24800(gp)
#endif
}
    7fac:	0001883a 	nop
    7fb0:	e037883a 	mov	sp,fp
    7fb4:	dfc00117 	ldw	ra,4(sp)
    7fb8:	df000017 	ldw	fp,0(sp)
    7fbc:	dec00204 	addi	sp,sp,8
    7fc0:	f800283a 	ret

00007fc4 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
    7fc4:	defff804 	addi	sp,sp,-32
    7fc8:	df000715 	stw	fp,28(sp)
    7fcc:	df000704 	addi	fp,sp,28
    7fd0:	e13ffa15 	stw	r4,-24(fp)
    7fd4:	e17ff915 	stw	r5,-28(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    7fd8:	e03ffe15 	stw	zero,-8(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    7fdc:	e0bff917 	ldw	r2,-28(fp)
    7fe0:	1000021e 	bne	r2,zero,7fec <OSQAccept+0x28>
        return ((void *)0);
    7fe4:	0005883a 	mov	r2,zero
    7fe8:	00004306 	br	80f8 <OSQAccept+0x134>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
    7fec:	e0bffa17 	ldw	r2,-24(fp)
    7ff0:	1000051e 	bne	r2,zero,8008 <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
    7ff4:	e0bff917 	ldw	r2,-28(fp)
    7ff8:	00c00104 	movi	r3,4
    7ffc:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    8000:	0005883a 	mov	r2,zero
    8004:	00003c06 	br	80f8 <OSQAccept+0x134>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
    8008:	e0bffa17 	ldw	r2,-24(fp)
    800c:	10800003 	ldbu	r2,0(r2)
    8010:	10803fcc 	andi	r2,r2,255
    8014:	108000a0 	cmpeqi	r2,r2,2
    8018:	1000051e 	bne	r2,zero,8030 <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
    801c:	e0bff917 	ldw	r2,-28(fp)
    8020:	00c00044 	movi	r3,1
    8024:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    8028:	0005883a 	mov	r2,zero
    802c:	00003206 	br	80f8 <OSQAccept+0x134>
  NIOS2_READ_STATUS (context);
    8030:	0005303a 	rdctl	r2,status
    8034:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8038:	e0fffc17 	ldw	r3,-16(fp)
    803c:	00bfff84 	movi	r2,-2
    8040:	1884703a 	and	r2,r3,r2
    8044:	1001703a 	wrctl	status,r2
  return context;
    8048:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    804c:	e0bffe15 	stw	r2,-8(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
    8050:	e0bffa17 	ldw	r2,-24(fp)
    8054:	10800117 	ldw	r2,4(r2)
    8058:	e0bffd15 	stw	r2,-12(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
    805c:	e0bffd17 	ldw	r2,-12(fp)
    8060:	1080058b 	ldhu	r2,22(r2)
    8064:	10bfffcc 	andi	r2,r2,65535
    8068:	10001926 	beq	r2,zero,80d0 <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
    806c:	e0bffd17 	ldw	r2,-12(fp)
    8070:	10800417 	ldw	r2,16(r2)
    8074:	11000104 	addi	r4,r2,4
    8078:	e0fffd17 	ldw	r3,-12(fp)
    807c:	19000415 	stw	r4,16(r3)
    8080:	10800017 	ldw	r2,0(r2)
    8084:	e0bfff15 	stw	r2,-4(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
    8088:	e0bffd17 	ldw	r2,-12(fp)
    808c:	1080058b 	ldhu	r2,22(r2)
    8090:	10bfffc4 	addi	r2,r2,-1
    8094:	1007883a 	mov	r3,r2
    8098:	e0bffd17 	ldw	r2,-12(fp)
    809c:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
    80a0:	e0bffd17 	ldw	r2,-12(fp)
    80a4:	10c00417 	ldw	r3,16(r2)
    80a8:	e0bffd17 	ldw	r2,-12(fp)
    80ac:	10800217 	ldw	r2,8(r2)
    80b0:	1880041e 	bne	r3,r2,80c4 <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
    80b4:	e0bffd17 	ldw	r2,-12(fp)
    80b8:	10c00117 	ldw	r3,4(r2)
    80bc:	e0bffd17 	ldw	r2,-12(fp)
    80c0:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
    80c4:	e0bff917 	ldw	r2,-28(fp)
    80c8:	10000005 	stb	zero,0(r2)
    80cc:	00000406 	br	80e0 <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
    80d0:	e0bff917 	ldw	r2,-28(fp)
    80d4:	00c007c4 	movi	r3,31
    80d8:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
    80dc:	e03fff15 	stw	zero,-4(fp)
    80e0:	e0bffe17 	ldw	r2,-8(fp)
    80e4:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    80e8:	e0bffb17 	ldw	r2,-20(fp)
    80ec:	1001703a 	wrctl	status,r2
}
    80f0:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
    80f4:	e0bfff17 	ldw	r2,-4(fp)
}
    80f8:	e037883a 	mov	sp,fp
    80fc:	df000017 	ldw	fp,0(sp)
    8100:	dec00104 	addi	sp,sp,4
    8104:	f800283a 	ret

00008108 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
    8108:	defff404 	addi	sp,sp,-48
    810c:	dfc00b15 	stw	ra,44(sp)
    8110:	df000a15 	stw	fp,40(sp)
    8114:	df000a04 	addi	fp,sp,40
    8118:	e13ff715 	stw	r4,-36(fp)
    811c:	2805883a 	mov	r2,r5
    8120:	e0bff60d 	sth	r2,-40(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    8124:	e03ffe15 	stw	zero,-8(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
    8128:	d0a7bf43 	ldbu	r2,-24835(gp)
    812c:	10803fcc 	andi	r2,r2,255
    8130:	10000226 	beq	r2,zero,813c <OSQCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
    8134:	0005883a 	mov	r2,zero
    8138:	00005a06 	br	82a4 <OSQCreate+0x19c>
  NIOS2_READ_STATUS (context);
    813c:	0005303a 	rdctl	r2,status
    8140:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8144:	e0fffc17 	ldw	r3,-16(fp)
    8148:	00bfff84 	movi	r2,-2
    814c:	1884703a 	and	r2,r3,r2
    8150:	1001703a 	wrctl	status,r2
  return context;
    8154:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    8158:	e0bffe15 	stw	r2,-8(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
    815c:	d0a7ba17 	ldw	r2,-24856(gp)
    8160:	e0bfff15 	stw	r2,-4(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
    8164:	d0a7ba17 	ldw	r2,-24856(gp)
    8168:	10000326 	beq	r2,zero,8178 <OSQCreate+0x70>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
    816c:	d0a7ba17 	ldw	r2,-24856(gp)
    8170:	10800117 	ldw	r2,4(r2)
    8174:	d0a7ba15 	stw	r2,-24856(gp)
    8178:	e0bffe17 	ldw	r2,-8(fp)
    817c:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    8180:	e0bffb17 	ldw	r2,-20(fp)
    8184:	1001703a 	wrctl	status,r2
}
    8188:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
    818c:	e0bfff17 	ldw	r2,-4(fp)
    8190:	10004326 	beq	r2,zero,82a0 <OSQCreate+0x198>
  NIOS2_READ_STATUS (context);
    8194:	0005303a 	rdctl	r2,status
    8198:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    819c:	e0fffa17 	ldw	r3,-24(fp)
    81a0:	00bfff84 	movi	r2,-2
    81a4:	1884703a 	and	r2,r3,r2
    81a8:	1001703a 	wrctl	status,r2
  return context;
    81ac:	e0bffa17 	ldw	r2,-24(fp)
        OS_ENTER_CRITICAL();
    81b0:	e0bffe15 	stw	r2,-8(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
    81b4:	d0a7c917 	ldw	r2,-24796(gp)
    81b8:	e0bffd15 	stw	r2,-12(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
    81bc:	e0bffd17 	ldw	r2,-12(fp)
    81c0:	10002c26 	beq	r2,zero,8274 <OSQCreate+0x16c>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
    81c4:	d0a7c917 	ldw	r2,-24796(gp)
    81c8:	10800017 	ldw	r2,0(r2)
    81cc:	d0a7c915 	stw	r2,-24796(gp)
    81d0:	e0bffe17 	ldw	r2,-8(fp)
    81d4:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
    81d8:	e0bff917 	ldw	r2,-28(fp)
    81dc:	1001703a 	wrctl	status,r2
}
    81e0:	0001883a 	nop
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
    81e4:	e0bffd17 	ldw	r2,-12(fp)
    81e8:	e0fff717 	ldw	r3,-36(fp)
    81ec:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
    81f0:	e0bff60b 	ldhu	r2,-40(fp)
    81f4:	100490ba 	slli	r2,r2,2
    81f8:	e0fff717 	ldw	r3,-36(fp)
    81fc:	1887883a 	add	r3,r3,r2
    8200:	e0bffd17 	ldw	r2,-12(fp)
    8204:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
    8208:	e0bffd17 	ldw	r2,-12(fp)
    820c:	e0fff717 	ldw	r3,-36(fp)
    8210:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
    8214:	e0bffd17 	ldw	r2,-12(fp)
    8218:	e0fff717 	ldw	r3,-36(fp)
    821c:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
    8220:	e0bffd17 	ldw	r2,-12(fp)
    8224:	e0fff60b 	ldhu	r3,-40(fp)
    8228:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
    822c:	e0bffd17 	ldw	r2,-12(fp)
    8230:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
    8234:	e0bfff17 	ldw	r2,-4(fp)
    8238:	00c00084 	movi	r3,2
    823c:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
    8240:	e0bfff17 	ldw	r2,-4(fp)
    8244:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
    8248:	e0bfff17 	ldw	r2,-4(fp)
    824c:	e0fffd17 	ldw	r3,-12(fp)
    8250:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
    8254:	e0bfff17 	ldw	r2,-4(fp)
    8258:	00c00fc4 	movi	r3,63
    825c:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
    8260:	e0bfff17 	ldw	r2,-4(fp)
    8264:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
    8268:	e13fff17 	ldw	r4,-4(fp)
    826c:	00053800 	call	5380 <OS_EventWaitListInit>
    8270:	00000b06 	br	82a0 <OSQCreate+0x198>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
    8274:	d0e7ba17 	ldw	r3,-24856(gp)
    8278:	e0bfff17 	ldw	r2,-4(fp)
    827c:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
    8280:	e0bfff17 	ldw	r2,-4(fp)
    8284:	d0a7ba15 	stw	r2,-24856(gp)
    8288:	e0bffe17 	ldw	r2,-8(fp)
    828c:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
    8290:	e0bff817 	ldw	r2,-32(fp)
    8294:	1001703a 	wrctl	status,r2
}
    8298:	0001883a 	nop
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
    829c:	e03fff15 	stw	zero,-4(fp)
        }
    }
    return (pevent);
    82a0:	e0bfff17 	ldw	r2,-4(fp)
}
    82a4:	e037883a 	mov	sp,fp
    82a8:	dfc00117 	ldw	ra,4(sp)
    82ac:	df000017 	ldw	fp,0(sp)
    82b0:	dec00204 	addi	sp,sp,8
    82b4:	f800283a 	ret

000082b8 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    82b8:	defff204 	addi	sp,sp,-56
    82bc:	dfc00d15 	stw	ra,52(sp)
    82c0:	df000c15 	stw	fp,48(sp)
    82c4:	df000c04 	addi	fp,sp,48
    82c8:	e13ff615 	stw	r4,-40(fp)
    82cc:	2805883a 	mov	r2,r5
    82d0:	e1bff415 	stw	r6,-48(fp)
    82d4:	e0bff505 	stb	r2,-44(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    82d8:	e03ffd15 	stw	zero,-12(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    82dc:	e0bff417 	ldw	r2,-48(fp)
    82e0:	1000021e 	bne	r2,zero,82ec <OSQDel+0x34>
        return (pevent);
    82e4:	e0bff617 	ldw	r2,-40(fp)
    82e8:	00009206 	br	8534 <OSQDel+0x27c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    82ec:	e0bff617 	ldw	r2,-40(fp)
    82f0:	1000051e 	bne	r2,zero,8308 <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    82f4:	e0bff417 	ldw	r2,-48(fp)
    82f8:	00c00104 	movi	r3,4
    82fc:	10c00005 	stb	r3,0(r2)
        return (pevent);
    8300:	e0bff617 	ldw	r2,-40(fp)
    8304:	00008b06 	br	8534 <OSQDel+0x27c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
    8308:	e0bff617 	ldw	r2,-40(fp)
    830c:	10800003 	ldbu	r2,0(r2)
    8310:	10803fcc 	andi	r2,r2,255
    8314:	108000a0 	cmpeqi	r2,r2,2
    8318:	1000051e 	bne	r2,zero,8330 <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    831c:	e0bff417 	ldw	r2,-48(fp)
    8320:	00c00044 	movi	r3,1
    8324:	10c00005 	stb	r3,0(r2)
        return (pevent);
    8328:	e0bff617 	ldw	r2,-40(fp)
    832c:	00008106 	br	8534 <OSQDel+0x27c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    8330:	d0a7bf43 	ldbu	r2,-24835(gp)
    8334:	10803fcc 	andi	r2,r2,255
    8338:	10000526 	beq	r2,zero,8350 <OSQDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
    833c:	e0bff417 	ldw	r2,-48(fp)
    8340:	00c003c4 	movi	r3,15
    8344:	10c00005 	stb	r3,0(r2)
        return (pevent);
    8348:	e0bff617 	ldw	r2,-40(fp)
    834c:	00007906 	br	8534 <OSQDel+0x27c>
  NIOS2_READ_STATUS (context);
    8350:	0005303a 	rdctl	r2,status
    8354:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8358:	e0fffb17 	ldw	r3,-20(fp)
    835c:	00bfff84 	movi	r2,-2
    8360:	1884703a 	and	r2,r3,r2
    8364:	1001703a 	wrctl	status,r2
  return context;
    8368:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
    836c:	e0bffd15 	stw	r2,-12(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
    8370:	e0bff617 	ldw	r2,-40(fp)
    8374:	10800283 	ldbu	r2,10(r2)
    8378:	10803fcc 	andi	r2,r2,255
    837c:	10000326 	beq	r2,zero,838c <OSQDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    8380:	00800044 	movi	r2,1
    8384:	e0bfffc5 	stb	r2,-1(fp)
    8388:	00000106 	br	8390 <OSQDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    838c:	e03fffc5 	stb	zero,-1(fp)
    }
    switch (opt) {
    8390:	e0bff503 	ldbu	r2,-44(fp)
    8394:	10000326 	beq	r2,zero,83a4 <OSQDel+0xec>
    8398:	10800060 	cmpeqi	r2,r2,1
    839c:	1000321e 	bne	r2,zero,8468 <OSQDel+0x1b0>
    83a0:	00005806 	br	8504 <OSQDel+0x24c>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
    83a4:	e0bfffc3 	ldbu	r2,-1(fp)
    83a8:	10001f1e 	bne	r2,zero,8428 <OSQDel+0x170>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
    83ac:	e0bff617 	ldw	r2,-40(fp)
    83b0:	00c00fc4 	movi	r3,63
    83b4:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
    83b8:	e0bff617 	ldw	r2,-40(fp)
    83bc:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
    83c0:	e0bff617 	ldw	r2,-40(fp)
    83c4:	10800117 	ldw	r2,4(r2)
    83c8:	e0bffc15 	stw	r2,-16(fp)
                 pq->OSQPtr             = OSQFreeList;
    83cc:	d0e7c917 	ldw	r3,-24796(gp)
    83d0:	e0bffc17 	ldw	r2,-16(fp)
    83d4:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
    83d8:	e0bffc17 	ldw	r2,-16(fp)
    83dc:	d0a7c915 	stw	r2,-24796(gp)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    83e0:	e0bff617 	ldw	r2,-40(fp)
    83e4:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
    83e8:	d0e7ba17 	ldw	r3,-24856(gp)
    83ec:	e0bff617 	ldw	r2,-40(fp)
    83f0:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
    83f4:	e0bff617 	ldw	r2,-40(fp)
    83f8:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
    83fc:	e0bff617 	ldw	r2,-40(fp)
    8400:	d0a7ba15 	stw	r2,-24856(gp)
    8404:	e0bffd17 	ldw	r2,-12(fp)
    8408:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
    840c:	e0bffa17 	ldw	r2,-24(fp)
    8410:	1001703a 	wrctl	status,r2
}
    8414:	0001883a 	nop
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
    8418:	e0bff417 	ldw	r2,-48(fp)
    841c:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
    8420:	e03ffe15 	stw	zero,-8(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
    8424:	00004206 	br	8530 <OSQDel+0x278>
    8428:	e0bffd17 	ldw	r2,-12(fp)
    842c:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
    8430:	e0bff917 	ldw	r2,-28(fp)
    8434:	1001703a 	wrctl	status,r2
}
    8438:	0001883a 	nop
                 *perr                  = OS_ERR_TASK_WAITING;
    843c:	e0bff417 	ldw	r2,-48(fp)
    8440:	00c01244 	movi	r3,73
    8444:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
    8448:	e0bff617 	ldw	r2,-40(fp)
    844c:	e0bffe15 	stw	r2,-8(fp)
             break;
    8450:	00003706 	br	8530 <OSQDel+0x278>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
    8454:	000f883a 	mov	r7,zero
    8458:	01800104 	movi	r6,4
    845c:	000b883a 	mov	r5,zero
    8460:	e13ff617 	ldw	r4,-40(fp)
    8464:	0004dfc0 	call	4dfc <OS_EventTaskRdy>
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
    8468:	e0bff617 	ldw	r2,-40(fp)
    846c:	10800283 	ldbu	r2,10(r2)
    8470:	10803fcc 	andi	r2,r2,255
    8474:	103ff71e 	bne	r2,zero,8454 <OSQDel+0x19c>
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
    8478:	e0bff617 	ldw	r2,-40(fp)
    847c:	00c00fc4 	movi	r3,63
    8480:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
    8484:	e0bff617 	ldw	r2,-40(fp)
    8488:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
    848c:	e0bff617 	ldw	r2,-40(fp)
    8490:	10800117 	ldw	r2,4(r2)
    8494:	e0bffc15 	stw	r2,-16(fp)
             pq->OSQPtr             = OSQFreeList;
    8498:	d0e7c917 	ldw	r3,-24796(gp)
    849c:	e0bffc17 	ldw	r2,-16(fp)
    84a0:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
    84a4:	e0bffc17 	ldw	r2,-16(fp)
    84a8:	d0a7c915 	stw	r2,-24796(gp)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    84ac:	e0bff617 	ldw	r2,-40(fp)
    84b0:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
    84b4:	d0e7ba17 	ldw	r3,-24856(gp)
    84b8:	e0bff617 	ldw	r2,-40(fp)
    84bc:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
    84c0:	e0bff617 	ldw	r2,-40(fp)
    84c4:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
    84c8:	e0bff617 	ldw	r2,-40(fp)
    84cc:	d0a7ba15 	stw	r2,-24856(gp)
    84d0:	e0bffd17 	ldw	r2,-12(fp)
    84d4:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
    84d8:	e0bff817 	ldw	r2,-32(fp)
    84dc:	1001703a 	wrctl	status,r2
}
    84e0:	0001883a 	nop
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
    84e4:	e0bfffc3 	ldbu	r2,-1(fp)
    84e8:	10800058 	cmpnei	r2,r2,1
    84ec:	1000011e 	bne	r2,zero,84f4 <OSQDel+0x23c>
                 OS_Sched();                               /* Find highest priority task ready to run  */
    84f0:	00058300 	call	5830 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
    84f4:	e0bff417 	ldw	r2,-48(fp)
    84f8:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
    84fc:	e03ffe15 	stw	zero,-8(fp)
             break;
    8500:	00000b06 	br	8530 <OSQDel+0x278>
    8504:	e0bffd17 	ldw	r2,-12(fp)
    8508:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context);
    850c:	e0bff717 	ldw	r2,-36(fp)
    8510:	1001703a 	wrctl	status,r2
}
    8514:	0001883a 	nop

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
    8518:	e0bff417 	ldw	r2,-48(fp)
    851c:	00c001c4 	movi	r3,7
    8520:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
    8524:	e0bff617 	ldw	r2,-40(fp)
    8528:	e0bffe15 	stw	r2,-8(fp)
             break;
    852c:	0001883a 	nop
    }
    return (pevent_return);
    8530:	e0bffe17 	ldw	r2,-8(fp)
}
    8534:	e037883a 	mov	sp,fp
    8538:	dfc00117 	ldw	ra,4(sp)
    853c:	df000017 	ldw	fp,0(sp)
    8540:	dec00204 	addi	sp,sp,8
    8544:	f800283a 	ret

00008548 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
    8548:	defffa04 	addi	sp,sp,-24
    854c:	df000515 	stw	fp,20(sp)
    8550:	df000504 	addi	fp,sp,20
    8554:	e13ffb15 	stw	r4,-20(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    8558:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    855c:	e0bffb17 	ldw	r2,-20(fp)
    8560:	1000021e 	bne	r2,zero,856c <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
    8564:	00800104 	movi	r2,4
    8568:	00002206 	br	85f4 <OSQFlush+0xac>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
    856c:	e0bffb17 	ldw	r2,-20(fp)
    8570:	10800003 	ldbu	r2,0(r2)
    8574:	10803fcc 	andi	r2,r2,255
    8578:	108000a0 	cmpeqi	r2,r2,2
    857c:	1000021e 	bne	r2,zero,8588 <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
    8580:	00800044 	movi	r2,1
    8584:	00001b06 	br	85f4 <OSQFlush+0xac>
  NIOS2_READ_STATUS (context);
    8588:	0005303a 	rdctl	r2,status
    858c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8590:	e0fffc17 	ldw	r3,-16(fp)
    8594:	00bfff84 	movi	r2,-2
    8598:	1884703a 	and	r2,r3,r2
    859c:	1001703a 	wrctl	status,r2
  return context;
    85a0:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    85a4:	e0bfff15 	stw	r2,-4(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
    85a8:	e0bffb17 	ldw	r2,-20(fp)
    85ac:	10800117 	ldw	r2,4(r2)
    85b0:	e0bffe15 	stw	r2,-8(fp)
    pq->OSQIn      = pq->OSQStart;
    85b4:	e0bffe17 	ldw	r2,-8(fp)
    85b8:	10c00117 	ldw	r3,4(r2)
    85bc:	e0bffe17 	ldw	r2,-8(fp)
    85c0:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
    85c4:	e0bffe17 	ldw	r2,-8(fp)
    85c8:	10c00117 	ldw	r3,4(r2)
    85cc:	e0bffe17 	ldw	r2,-8(fp)
    85d0:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
    85d4:	e0bffe17 	ldw	r2,-8(fp)
    85d8:	1000058d 	sth	zero,22(r2)
    85dc:	e0bfff17 	ldw	r2,-4(fp)
    85e0:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
    85e4:	e0bffd17 	ldw	r2,-12(fp)
    85e8:	1001703a 	wrctl	status,r2
}
    85ec:	0001883a 	nop
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    85f0:	0005883a 	mov	r2,zero
}
    85f4:	e037883a 	mov	sp,fp
    85f8:	df000017 	ldw	fp,0(sp)
    85fc:	dec00104 	addi	sp,sp,4
    8600:	f800283a 	ret

00008604 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
    8604:	defff304 	addi	sp,sp,-52
    8608:	dfc00c15 	stw	ra,48(sp)
    860c:	df000b15 	stw	fp,44(sp)
    8610:	df000b04 	addi	fp,sp,44
    8614:	e13ff715 	stw	r4,-36(fp)
    8618:	2805883a 	mov	r2,r5
    861c:	e1bff515 	stw	r6,-44(fp)
    8620:	e0bff60d 	sth	r2,-40(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    8624:	e03ffe15 	stw	zero,-8(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    8628:	e0bff517 	ldw	r2,-44(fp)
    862c:	1000021e 	bne	r2,zero,8638 <OSQPend+0x34>
        return ((void *)0);
    8630:	0005883a 	mov	r2,zero
    8634:	00009406 	br	8888 <OSQPend+0x284>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
    8638:	e0bff717 	ldw	r2,-36(fp)
    863c:	1000051e 	bne	r2,zero,8654 <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    8640:	e0bff517 	ldw	r2,-44(fp)
    8644:	00c00104 	movi	r3,4
    8648:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    864c:	0005883a 	mov	r2,zero
    8650:	00008d06 	br	8888 <OSQPend+0x284>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
    8654:	e0bff717 	ldw	r2,-36(fp)
    8658:	10800003 	ldbu	r2,0(r2)
    865c:	10803fcc 	andi	r2,r2,255
    8660:	108000a0 	cmpeqi	r2,r2,2
    8664:	1000051e 	bne	r2,zero,867c <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    8668:	e0bff517 	ldw	r2,-44(fp)
    866c:	00c00044 	movi	r3,1
    8670:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    8674:	0005883a 	mov	r2,zero
    8678:	00008306 	br	8888 <OSQPend+0x284>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
    867c:	d0a7bf43 	ldbu	r2,-24835(gp)
    8680:	10803fcc 	andi	r2,r2,255
    8684:	10000526 	beq	r2,zero,869c <OSQPend+0x98>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
    8688:	e0bff517 	ldw	r2,-44(fp)
    868c:	00c00084 	movi	r3,2
    8690:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    8694:	0005883a 	mov	r2,zero
    8698:	00007b06 	br	8888 <OSQPend+0x284>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
    869c:	d0a7bf83 	ldbu	r2,-24834(gp)
    86a0:	10803fcc 	andi	r2,r2,255
    86a4:	10000526 	beq	r2,zero,86bc <OSQPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
    86a8:	e0bff517 	ldw	r2,-44(fp)
    86ac:	00c00344 	movi	r3,13
    86b0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    86b4:	0005883a 	mov	r2,zero
    86b8:	00007306 	br	8888 <OSQPend+0x284>
  NIOS2_READ_STATUS (context);
    86bc:	0005303a 	rdctl	r2,status
    86c0:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    86c4:	e0fffc17 	ldw	r3,-16(fp)
    86c8:	00bfff84 	movi	r2,-2
    86cc:	1884703a 	and	r2,r3,r2
    86d0:	1001703a 	wrctl	status,r2
  return context;
    86d4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    86d8:	e0bffe15 	stw	r2,-8(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
    86dc:	e0bff717 	ldw	r2,-36(fp)
    86e0:	10800117 	ldw	r2,4(r2)
    86e4:	e0bffd15 	stw	r2,-12(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
    86e8:	e0bffd17 	ldw	r2,-12(fp)
    86ec:	1080058b 	ldhu	r2,22(r2)
    86f0:	10bfffcc 	andi	r2,r2,65535
    86f4:	10001f26 	beq	r2,zero,8774 <OSQPend+0x170>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
    86f8:	e0bffd17 	ldw	r2,-12(fp)
    86fc:	10800417 	ldw	r2,16(r2)
    8700:	11000104 	addi	r4,r2,4
    8704:	e0fffd17 	ldw	r3,-12(fp)
    8708:	19000415 	stw	r4,16(r3)
    870c:	10800017 	ldw	r2,0(r2)
    8710:	e0bfff15 	stw	r2,-4(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
    8714:	e0bffd17 	ldw	r2,-12(fp)
    8718:	1080058b 	ldhu	r2,22(r2)
    871c:	10bfffc4 	addi	r2,r2,-1
    8720:	1007883a 	mov	r3,r2
    8724:	e0bffd17 	ldw	r2,-12(fp)
    8728:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
    872c:	e0bffd17 	ldw	r2,-12(fp)
    8730:	10c00417 	ldw	r3,16(r2)
    8734:	e0bffd17 	ldw	r2,-12(fp)
    8738:	10800217 	ldw	r2,8(r2)
    873c:	1880041e 	bne	r3,r2,8750 <OSQPend+0x14c>
            pq->OSQOut = pq->OSQStart;
    8740:	e0bffd17 	ldw	r2,-12(fp)
    8744:	10c00117 	ldw	r3,4(r2)
    8748:	e0bffd17 	ldw	r2,-12(fp)
    874c:	10c00415 	stw	r3,16(r2)
    8750:	e0bffe17 	ldw	r2,-8(fp)
    8754:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    8758:	e0bffb17 	ldw	r2,-20(fp)
    875c:	1001703a 	wrctl	status,r2
}
    8760:	0001883a 	nop
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
    8764:	e0bff517 	ldw	r2,-44(fp)
    8768:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
    876c:	e0bfff17 	ldw	r2,-4(fp)
    8770:	00004506 	br	8888 <OSQPend+0x284>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
    8774:	d0a7c317 	ldw	r2,-24820(gp)
    8778:	10c00c03 	ldbu	r3,48(r2)
    877c:	d0a7c317 	ldw	r2,-24820(gp)
    8780:	18c00114 	ori	r3,r3,4
    8784:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    8788:	d0a7c317 	ldw	r2,-24820(gp)
    878c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
    8790:	d0a7c317 	ldw	r2,-24820(gp)
    8794:	e0fff60b 	ldhu	r3,-40(fp)
    8798:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
    879c:	e13ff717 	ldw	r4,-36(fp)
    87a0:	0004f840 	call	4f84 <OS_EventTaskWait>
    87a4:	e0bffe17 	ldw	r2,-8(fp)
    87a8:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
    87ac:	e0bff917 	ldw	r2,-28(fp)
    87b0:	1001703a 	wrctl	status,r2
}
    87b4:	0001883a 	nop
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
    87b8:	00058300 	call	5830 <OS_Sched>
  NIOS2_READ_STATUS (context);
    87bc:	0005303a 	rdctl	r2,status
    87c0:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    87c4:	e0fffa17 	ldw	r3,-24(fp)
    87c8:	00bfff84 	movi	r2,-2
    87cc:	1884703a 	and	r2,r3,r2
    87d0:	1001703a 	wrctl	status,r2
  return context;
    87d4:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();
    87d8:	e0bffe15 	stw	r2,-8(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
    87dc:	d0a7c317 	ldw	r2,-24820(gp)
    87e0:	10800c43 	ldbu	r2,49(r2)
    87e4:	10803fcc 	andi	r2,r2,255
    87e8:	10000326 	beq	r2,zero,87f8 <OSQPend+0x1f4>
    87ec:	108000a0 	cmpeqi	r2,r2,2
    87f0:	1000071e 	bne	r2,zero,8810 <OSQPend+0x20c>
    87f4:	00000b06 	br	8824 <OSQPend+0x220>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
    87f8:	d0a7c317 	ldw	r2,-24820(gp)
    87fc:	10800917 	ldw	r2,36(r2)
    8800:	e0bfff15 	stw	r2,-4(fp)
            *perr =  OS_ERR_NONE;
    8804:	e0bff517 	ldw	r2,-44(fp)
    8808:	10000005 	stb	zero,0(r2)
             break;
    880c:	00000e06 	br	8848 <OSQPend+0x244>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
    8810:	e03fff15 	stw	zero,-4(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
    8814:	e0bff517 	ldw	r2,-44(fp)
    8818:	00c00384 	movi	r3,14
    881c:	10c00005 	stb	r3,0(r2)
             break;
    8820:	00000906 	br	8848 <OSQPend+0x244>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
    8824:	d0a7c317 	ldw	r2,-24820(gp)
    8828:	e17ff717 	ldw	r5,-36(fp)
    882c:	1009883a 	mov	r4,r2
    8830:	00051d40 	call	51d4 <OS_EventTaskRemove>
             pmsg = (void *)0;
    8834:	e03fff15 	stw	zero,-4(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
    8838:	e0bff517 	ldw	r2,-44(fp)
    883c:	00c00284 	movi	r3,10
    8840:	10c00005 	stb	r3,0(r2)
             break;
    8844:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
    8848:	d0a7c317 	ldw	r2,-24820(gp)
    884c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
    8850:	d0a7c317 	ldw	r2,-24820(gp)
    8854:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
    8858:	d0a7c317 	ldw	r2,-24820(gp)
    885c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    8860:	d0a7c317 	ldw	r2,-24820(gp)
    8864:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
    8868:	d0a7c317 	ldw	r2,-24820(gp)
    886c:	10000915 	stw	zero,36(r2)
    8870:	e0bffe17 	ldw	r2,-8(fp)
    8874:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
    8878:	e0bff817 	ldw	r2,-32(fp)
    887c:	1001703a 	wrctl	status,r2
}
    8880:	0001883a 	nop
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
    8884:	e0bfff17 	ldw	r2,-4(fp)
}
    8888:	e037883a 	mov	sp,fp
    888c:	dfc00117 	ldw	ra,4(sp)
    8890:	df000017 	ldw	fp,0(sp)
    8894:	dec00204 	addi	sp,sp,8
    8898:	f800283a 	ret

0000889c <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    889c:	defff604 	addi	sp,sp,-40
    88a0:	dfc00915 	stw	ra,36(sp)
    88a4:	df000815 	stw	fp,32(sp)
    88a8:	df000804 	addi	fp,sp,32
    88ac:	e13ffa15 	stw	r4,-24(fp)
    88b0:	2805883a 	mov	r2,r5
    88b4:	e1bff815 	stw	r6,-32(fp)
    88b8:	e0bff905 	stb	r2,-28(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    88bc:	e03ffe15 	stw	zero,-8(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    88c0:	e0bff817 	ldw	r2,-32(fp)
    88c4:	1000021e 	bne	r2,zero,88d0 <OSQPendAbort+0x34>
        return (0);
    88c8:	0005883a 	mov	r2,zero
    88cc:	00004b06 	br	89fc <OSQPendAbort+0x160>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    88d0:	e0bffa17 	ldw	r2,-24(fp)
    88d4:	1000051e 	bne	r2,zero,88ec <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    88d8:	e0bff817 	ldw	r2,-32(fp)
    88dc:	00c00104 	movi	r3,4
    88e0:	10c00005 	stb	r3,0(r2)
        return (0);
    88e4:	0005883a 	mov	r2,zero
    88e8:	00004406 	br	89fc <OSQPendAbort+0x160>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
    88ec:	e0bffa17 	ldw	r2,-24(fp)
    88f0:	10800003 	ldbu	r2,0(r2)
    88f4:	10803fcc 	andi	r2,r2,255
    88f8:	108000a0 	cmpeqi	r2,r2,2
    88fc:	1000051e 	bne	r2,zero,8914 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    8900:	e0bff817 	ldw	r2,-32(fp)
    8904:	00c00044 	movi	r3,1
    8908:	10c00005 	stb	r3,0(r2)
        return (0);
    890c:	0005883a 	mov	r2,zero
    8910:	00003a06 	br	89fc <OSQPendAbort+0x160>
  NIOS2_READ_STATUS (context);
    8914:	0005303a 	rdctl	r2,status
    8918:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    891c:	e0fffd17 	ldw	r3,-12(fp)
    8920:	00bfff84 	movi	r2,-2
    8924:	1884703a 	and	r2,r3,r2
    8928:	1001703a 	wrctl	status,r2
  return context;
    892c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    8930:	e0bffe15 	stw	r2,-8(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
    8934:	e0bffa17 	ldw	r2,-24(fp)
    8938:	10800283 	ldbu	r2,10(r2)
    893c:	10803fcc 	andi	r2,r2,255
    8940:	10002626 	beq	r2,zero,89dc <OSQPendAbort+0x140>
        nbr_tasks = 0;
    8944:	e03fffc5 	stb	zero,-1(fp)
        switch (opt) {
    8948:	e0bff903 	ldbu	r2,-28(fp)
    894c:	10800058 	cmpnei	r2,r2,1
    8950:	10000e1e 	bne	r2,zero,898c <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
    8954:	00000806 	br	8978 <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
    8958:	01c00084 	movi	r7,2
    895c:	01800104 	movi	r6,4
    8960:	000b883a 	mov	r5,zero
    8964:	e13ffa17 	ldw	r4,-24(fp)
    8968:	0004dfc0 	call	4dfc <OS_EventTaskRdy>
                     nbr_tasks++;
    896c:	e0bfffc3 	ldbu	r2,-1(fp)
    8970:	10800044 	addi	r2,r2,1
    8974:	e0bfffc5 	stb	r2,-1(fp)
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
    8978:	e0bffa17 	ldw	r2,-24(fp)
    897c:	10800283 	ldbu	r2,10(r2)
    8980:	10803fcc 	andi	r2,r2,255
    8984:	103ff41e 	bne	r2,zero,8958 <OSQPendAbort+0xbc>
                 }
                 break;
    8988:	00000906 	br	89b0 <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
    898c:	01c00084 	movi	r7,2
    8990:	01800104 	movi	r6,4
    8994:	000b883a 	mov	r5,zero
    8998:	e13ffa17 	ldw	r4,-24(fp)
    899c:	0004dfc0 	call	4dfc <OS_EventTaskRdy>
                 nbr_tasks++;
    89a0:	e0bfffc3 	ldbu	r2,-1(fp)
    89a4:	10800044 	addi	r2,r2,1
    89a8:	e0bfffc5 	stb	r2,-1(fp)
                 break;
    89ac:	0001883a 	nop
    89b0:	e0bffe17 	ldw	r2,-8(fp)
    89b4:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    89b8:	e0bffc17 	ldw	r2,-16(fp)
    89bc:	1001703a 	wrctl	status,r2
}
    89c0:	0001883a 	nop
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
    89c4:	00058300 	call	5830 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
    89c8:	e0bff817 	ldw	r2,-32(fp)
    89cc:	00c00384 	movi	r3,14
    89d0:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
    89d4:	e0bfffc3 	ldbu	r2,-1(fp)
    89d8:	00000806 	br	89fc <OSQPendAbort+0x160>
    89dc:	e0bffe17 	ldw	r2,-8(fp)
    89e0:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    89e4:	e0bffb17 	ldw	r2,-20(fp)
    89e8:	1001703a 	wrctl	status,r2
}
    89ec:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    89f0:	e0bff817 	ldw	r2,-32(fp)
    89f4:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
    89f8:	0005883a 	mov	r2,zero
}
    89fc:	e037883a 	mov	sp,fp
    8a00:	dfc00117 	ldw	ra,4(sp)
    8a04:	df000017 	ldw	fp,0(sp)
    8a08:	dec00204 	addi	sp,sp,8
    8a0c:	f800283a 	ret

00008a10 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
    8a10:	defff604 	addi	sp,sp,-40
    8a14:	dfc00915 	stw	ra,36(sp)
    8a18:	df000815 	stw	fp,32(sp)
    8a1c:	df000804 	addi	fp,sp,32
    8a20:	e13ff915 	stw	r4,-28(fp)
    8a24:	e17ff815 	stw	r5,-32(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    8a28:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
    8a2c:	e0bff917 	ldw	r2,-28(fp)
    8a30:	1000021e 	bne	r2,zero,8a3c <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
    8a34:	00800104 	movi	r2,4
    8a38:	00004d06 	br	8b70 <OSQPost+0x160>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
    8a3c:	e0bff917 	ldw	r2,-28(fp)
    8a40:	10800003 	ldbu	r2,0(r2)
    8a44:	10803fcc 	andi	r2,r2,255
    8a48:	108000a0 	cmpeqi	r2,r2,2
    8a4c:	1000021e 	bne	r2,zero,8a58 <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
    8a50:	00800044 	movi	r2,1
    8a54:	00004606 	br	8b70 <OSQPost+0x160>
  NIOS2_READ_STATUS (context);
    8a58:	0005303a 	rdctl	r2,status
    8a5c:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8a60:	e0fffd17 	ldw	r3,-12(fp)
    8a64:	00bfff84 	movi	r2,-2
    8a68:	1884703a 	and	r2,r3,r2
    8a6c:	1001703a 	wrctl	status,r2
  return context;
    8a70:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    8a74:	e0bfff15 	stw	r2,-4(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
    8a78:	e0bff917 	ldw	r2,-28(fp)
    8a7c:	10800283 	ldbu	r2,10(r2)
    8a80:	10803fcc 	andi	r2,r2,255
    8a84:	10000d26 	beq	r2,zero,8abc <OSQPost+0xac>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    8a88:	000f883a 	mov	r7,zero
    8a8c:	01800104 	movi	r6,4
    8a90:	e17ff817 	ldw	r5,-32(fp)
    8a94:	e13ff917 	ldw	r4,-28(fp)
    8a98:	0004dfc0 	call	4dfc <OS_EventTaskRdy>
    8a9c:	e0bfff17 	ldw	r2,-4(fp)
    8aa0:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    8aa4:	e0bffc17 	ldw	r2,-16(fp)
    8aa8:	1001703a 	wrctl	status,r2
}
    8aac:	0001883a 	nop
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
    8ab0:	00058300 	call	5830 <OS_Sched>
        return (OS_ERR_NONE);
    8ab4:	0005883a 	mov	r2,zero
    8ab8:	00002d06 	br	8b70 <OSQPost+0x160>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
    8abc:	e0bff917 	ldw	r2,-28(fp)
    8ac0:	10800117 	ldw	r2,4(r2)
    8ac4:	e0bffe15 	stw	r2,-8(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
    8ac8:	e0bffe17 	ldw	r2,-8(fp)
    8acc:	10c0058b 	ldhu	r3,22(r2)
    8ad0:	e0bffe17 	ldw	r2,-8(fp)
    8ad4:	1080050b 	ldhu	r2,20(r2)
    8ad8:	18ffffcc 	andi	r3,r3,65535
    8adc:	10bfffcc 	andi	r2,r2,65535
    8ae0:	18800736 	bltu	r3,r2,8b00 <OSQPost+0xf0>
    8ae4:	e0bfff17 	ldw	r2,-4(fp)
    8ae8:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    8aec:	e0bffb17 	ldw	r2,-20(fp)
    8af0:	1001703a 	wrctl	status,r2
}
    8af4:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
    8af8:	00800784 	movi	r2,30
    8afc:	00001c06 	br	8b70 <OSQPost+0x160>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
    8b00:	e0bffe17 	ldw	r2,-8(fp)
    8b04:	10800317 	ldw	r2,12(r2)
    8b08:	11000104 	addi	r4,r2,4
    8b0c:	e0fffe17 	ldw	r3,-8(fp)
    8b10:	19000315 	stw	r4,12(r3)
    8b14:	e0fff817 	ldw	r3,-32(fp)
    8b18:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
    8b1c:	e0bffe17 	ldw	r2,-8(fp)
    8b20:	1080058b 	ldhu	r2,22(r2)
    8b24:	10800044 	addi	r2,r2,1
    8b28:	1007883a 	mov	r3,r2
    8b2c:	e0bffe17 	ldw	r2,-8(fp)
    8b30:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
    8b34:	e0bffe17 	ldw	r2,-8(fp)
    8b38:	10c00317 	ldw	r3,12(r2)
    8b3c:	e0bffe17 	ldw	r2,-8(fp)
    8b40:	10800217 	ldw	r2,8(r2)
    8b44:	1880041e 	bne	r3,r2,8b58 <OSQPost+0x148>
        pq->OSQIn = pq->OSQStart;
    8b48:	e0bffe17 	ldw	r2,-8(fp)
    8b4c:	10c00117 	ldw	r3,4(r2)
    8b50:	e0bffe17 	ldw	r2,-8(fp)
    8b54:	10c00315 	stw	r3,12(r2)
    8b58:	e0bfff17 	ldw	r2,-4(fp)
    8b5c:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
    8b60:	e0bffa17 	ldw	r2,-24(fp)
    8b64:	1001703a 	wrctl	status,r2
}
    8b68:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    8b6c:	0005883a 	mov	r2,zero
}
    8b70:	e037883a 	mov	sp,fp
    8b74:	dfc00117 	ldw	ra,4(sp)
    8b78:	df000017 	ldw	fp,0(sp)
    8b7c:	dec00204 	addi	sp,sp,8
    8b80:	f800283a 	ret

00008b84 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
    8b84:	defff604 	addi	sp,sp,-40
    8b88:	dfc00915 	stw	ra,36(sp)
    8b8c:	df000815 	stw	fp,32(sp)
    8b90:	df000804 	addi	fp,sp,32
    8b94:	e13ff915 	stw	r4,-28(fp)
    8b98:	e17ff815 	stw	r5,-32(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    8b9c:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    8ba0:	e0bff917 	ldw	r2,-28(fp)
    8ba4:	1000021e 	bne	r2,zero,8bb0 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
    8ba8:	00800104 	movi	r2,4
    8bac:	00004f06 	br	8cec <OSQPostFront+0x168>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
    8bb0:	e0bff917 	ldw	r2,-28(fp)
    8bb4:	10800003 	ldbu	r2,0(r2)
    8bb8:	10803fcc 	andi	r2,r2,255
    8bbc:	108000a0 	cmpeqi	r2,r2,2
    8bc0:	1000021e 	bne	r2,zero,8bcc <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
    8bc4:	00800044 	movi	r2,1
    8bc8:	00004806 	br	8cec <OSQPostFront+0x168>
  NIOS2_READ_STATUS (context);
    8bcc:	0005303a 	rdctl	r2,status
    8bd0:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8bd4:	e0fffd17 	ldw	r3,-12(fp)
    8bd8:	00bfff84 	movi	r2,-2
    8bdc:	1884703a 	and	r2,r3,r2
    8be0:	1001703a 	wrctl	status,r2
  return context;
    8be4:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    8be8:	e0bfff15 	stw	r2,-4(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
    8bec:	e0bff917 	ldw	r2,-28(fp)
    8bf0:	10800283 	ldbu	r2,10(r2)
    8bf4:	10803fcc 	andi	r2,r2,255
    8bf8:	10000d26 	beq	r2,zero,8c30 <OSQPostFront+0xac>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    8bfc:	000f883a 	mov	r7,zero
    8c00:	01800104 	movi	r6,4
    8c04:	e17ff817 	ldw	r5,-32(fp)
    8c08:	e13ff917 	ldw	r4,-28(fp)
    8c0c:	0004dfc0 	call	4dfc <OS_EventTaskRdy>
    8c10:	e0bfff17 	ldw	r2,-4(fp)
    8c14:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    8c18:	e0bffc17 	ldw	r2,-16(fp)
    8c1c:	1001703a 	wrctl	status,r2
}
    8c20:	0001883a 	nop
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
    8c24:	00058300 	call	5830 <OS_Sched>
        return (OS_ERR_NONE);
    8c28:	0005883a 	mov	r2,zero
    8c2c:	00002f06 	br	8cec <OSQPostFront+0x168>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
    8c30:	e0bff917 	ldw	r2,-28(fp)
    8c34:	10800117 	ldw	r2,4(r2)
    8c38:	e0bffe15 	stw	r2,-8(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
    8c3c:	e0bffe17 	ldw	r2,-8(fp)
    8c40:	10c0058b 	ldhu	r3,22(r2)
    8c44:	e0bffe17 	ldw	r2,-8(fp)
    8c48:	1080050b 	ldhu	r2,20(r2)
    8c4c:	18ffffcc 	andi	r3,r3,65535
    8c50:	10bfffcc 	andi	r2,r2,65535
    8c54:	18800736 	bltu	r3,r2,8c74 <OSQPostFront+0xf0>
    8c58:	e0bfff17 	ldw	r2,-4(fp)
    8c5c:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    8c60:	e0bffb17 	ldw	r2,-20(fp)
    8c64:	1001703a 	wrctl	status,r2
}
    8c68:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
    8c6c:	00800784 	movi	r2,30
    8c70:	00001e06 	br	8cec <OSQPostFront+0x168>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
    8c74:	e0bffe17 	ldw	r2,-8(fp)
    8c78:	10c00417 	ldw	r3,16(r2)
    8c7c:	e0bffe17 	ldw	r2,-8(fp)
    8c80:	10800117 	ldw	r2,4(r2)
    8c84:	1880041e 	bne	r3,r2,8c98 <OSQPostFront+0x114>
        pq->OSQOut = pq->OSQEnd;
    8c88:	e0bffe17 	ldw	r2,-8(fp)
    8c8c:	10c00217 	ldw	r3,8(r2)
    8c90:	e0bffe17 	ldw	r2,-8(fp)
    8c94:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
    8c98:	e0bffe17 	ldw	r2,-8(fp)
    8c9c:	10800417 	ldw	r2,16(r2)
    8ca0:	10ffff04 	addi	r3,r2,-4
    8ca4:	e0bffe17 	ldw	r2,-8(fp)
    8ca8:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
    8cac:	e0bffe17 	ldw	r2,-8(fp)
    8cb0:	10800417 	ldw	r2,16(r2)
    8cb4:	e0fff817 	ldw	r3,-32(fp)
    8cb8:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
    8cbc:	e0bffe17 	ldw	r2,-8(fp)
    8cc0:	1080058b 	ldhu	r2,22(r2)
    8cc4:	10800044 	addi	r2,r2,1
    8cc8:	1007883a 	mov	r3,r2
    8ccc:	e0bffe17 	ldw	r2,-8(fp)
    8cd0:	10c0058d 	sth	r3,22(r2)
    8cd4:	e0bfff17 	ldw	r2,-4(fp)
    8cd8:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
    8cdc:	e0bffa17 	ldw	r2,-24(fp)
    8ce0:	1001703a 	wrctl	status,r2
}
    8ce4:	0001883a 	nop
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    8ce8:	0005883a 	mov	r2,zero
}
    8cec:	e037883a 	mov	sp,fp
    8cf0:	dfc00117 	ldw	ra,4(sp)
    8cf4:	df000017 	ldw	fp,0(sp)
    8cf8:	dec00204 	addi	sp,sp,8
    8cfc:	f800283a 	ret

00008d00 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
    8d00:	defff504 	addi	sp,sp,-44
    8d04:	dfc00a15 	stw	ra,40(sp)
    8d08:	df000915 	stw	fp,36(sp)
    8d0c:	df000904 	addi	fp,sp,36
    8d10:	e13ff915 	stw	r4,-28(fp)
    8d14:	e17ff815 	stw	r5,-32(fp)
    8d18:	3005883a 	mov	r2,r6
    8d1c:	e0bff705 	stb	r2,-36(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    8d20:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    8d24:	e0bff917 	ldw	r2,-28(fp)
    8d28:	1000021e 	bne	r2,zero,8d34 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
    8d2c:	00800104 	movi	r2,4
    8d30:	00007406 	br	8f04 <OSQPostOpt+0x204>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
    8d34:	e0bff917 	ldw	r2,-28(fp)
    8d38:	10800003 	ldbu	r2,0(r2)
    8d3c:	10803fcc 	andi	r2,r2,255
    8d40:	108000a0 	cmpeqi	r2,r2,2
    8d44:	1000021e 	bne	r2,zero,8d50 <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
    8d48:	00800044 	movi	r2,1
    8d4c:	00006d06 	br	8f04 <OSQPostOpt+0x204>
  NIOS2_READ_STATUS (context);
    8d50:	0005303a 	rdctl	r2,status
    8d54:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8d58:	e0fffd17 	ldw	r3,-12(fp)
    8d5c:	00bfff84 	movi	r2,-2
    8d60:	1884703a 	and	r2,r3,r2
    8d64:	1001703a 	wrctl	status,r2
  return context;
    8d68:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    8d6c:	e0bfff15 	stw	r2,-4(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
    8d70:	e0bff917 	ldw	r2,-28(fp)
    8d74:	10800283 	ldbu	r2,10(r2)
    8d78:	10803fcc 	andi	r2,r2,255
    8d7c:	10001e26 	beq	r2,zero,8df8 <OSQPostOpt+0xf8>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
    8d80:	e0bff703 	ldbu	r2,-36(fp)
    8d84:	1080004c 	andi	r2,r2,1
    8d88:	10000b26 	beq	r2,zero,8db8 <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
    8d8c:	00000506 	br	8da4 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    8d90:	000f883a 	mov	r7,zero
    8d94:	01800104 	movi	r6,4
    8d98:	e17ff817 	ldw	r5,-32(fp)
    8d9c:	e13ff917 	ldw	r4,-28(fp)
    8da0:	0004dfc0 	call	4dfc <OS_EventTaskRdy>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
    8da4:	e0bff917 	ldw	r2,-28(fp)
    8da8:	10800283 	ldbu	r2,10(r2)
    8dac:	10803fcc 	andi	r2,r2,255
    8db0:	103ff71e 	bne	r2,zero,8d90 <OSQPostOpt+0x90>
    8db4:	00000506 	br	8dcc <OSQPostOpt+0xcc>
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    8db8:	000f883a 	mov	r7,zero
    8dbc:	01800104 	movi	r6,4
    8dc0:	e17ff817 	ldw	r5,-32(fp)
    8dc4:	e13ff917 	ldw	r4,-28(fp)
    8dc8:	0004dfc0 	call	4dfc <OS_EventTaskRdy>
    8dcc:	e0bfff17 	ldw	r2,-4(fp)
    8dd0:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    8dd4:	e0bffc17 	ldw	r2,-16(fp)
    8dd8:	1001703a 	wrctl	status,r2
}
    8ddc:	0001883a 	nop
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
    8de0:	e0bff703 	ldbu	r2,-36(fp)
    8de4:	1080010c 	andi	r2,r2,4
    8de8:	1000011e 	bne	r2,zero,8df0 <OSQPostOpt+0xf0>
            OS_Sched();                               /* Find highest priority task ready to run       */
    8dec:	00058300 	call	5830 <OS_Sched>
        }
        return (OS_ERR_NONE);
    8df0:	0005883a 	mov	r2,zero
    8df4:	00004306 	br	8f04 <OSQPostOpt+0x204>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
    8df8:	e0bff917 	ldw	r2,-28(fp)
    8dfc:	10800117 	ldw	r2,4(r2)
    8e00:	e0bffe15 	stw	r2,-8(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
    8e04:	e0bffe17 	ldw	r2,-8(fp)
    8e08:	10c0058b 	ldhu	r3,22(r2)
    8e0c:	e0bffe17 	ldw	r2,-8(fp)
    8e10:	1080050b 	ldhu	r2,20(r2)
    8e14:	18ffffcc 	andi	r3,r3,65535
    8e18:	10bfffcc 	andi	r2,r2,65535
    8e1c:	18800736 	bltu	r3,r2,8e3c <OSQPostOpt+0x13c>
    8e20:	e0bfff17 	ldw	r2,-4(fp)
    8e24:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    8e28:	e0bffb17 	ldw	r2,-20(fp)
    8e2c:	1001703a 	wrctl	status,r2
}
    8e30:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
    8e34:	00800784 	movi	r2,30
    8e38:	00003206 	br	8f04 <OSQPostOpt+0x204>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
    8e3c:	e0bff703 	ldbu	r2,-36(fp)
    8e40:	1080008c 	andi	r2,r2,2
    8e44:	10001326 	beq	r2,zero,8e94 <OSQPostOpt+0x194>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
    8e48:	e0bffe17 	ldw	r2,-8(fp)
    8e4c:	10c00417 	ldw	r3,16(r2)
    8e50:	e0bffe17 	ldw	r2,-8(fp)
    8e54:	10800117 	ldw	r2,4(r2)
    8e58:	1880041e 	bne	r3,r2,8e6c <OSQPostOpt+0x16c>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
    8e5c:	e0bffe17 	ldw	r2,-8(fp)
    8e60:	10c00217 	ldw	r3,8(r2)
    8e64:	e0bffe17 	ldw	r2,-8(fp)
    8e68:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
    8e6c:	e0bffe17 	ldw	r2,-8(fp)
    8e70:	10800417 	ldw	r2,16(r2)
    8e74:	10ffff04 	addi	r3,r2,-4
    8e78:	e0bffe17 	ldw	r2,-8(fp)
    8e7c:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
    8e80:	e0bffe17 	ldw	r2,-8(fp)
    8e84:	10800417 	ldw	r2,16(r2)
    8e88:	e0fff817 	ldw	r3,-32(fp)
    8e8c:	10c00015 	stw	r3,0(r2)
    8e90:	00001006 	br	8ed4 <OSQPostOpt+0x1d4>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
    8e94:	e0bffe17 	ldw	r2,-8(fp)
    8e98:	10800317 	ldw	r2,12(r2)
    8e9c:	11000104 	addi	r4,r2,4
    8ea0:	e0fffe17 	ldw	r3,-8(fp)
    8ea4:	19000315 	stw	r4,12(r3)
    8ea8:	e0fff817 	ldw	r3,-32(fp)
    8eac:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
    8eb0:	e0bffe17 	ldw	r2,-8(fp)
    8eb4:	10c00317 	ldw	r3,12(r2)
    8eb8:	e0bffe17 	ldw	r2,-8(fp)
    8ebc:	10800217 	ldw	r2,8(r2)
    8ec0:	1880041e 	bne	r3,r2,8ed4 <OSQPostOpt+0x1d4>
            pq->OSQIn = pq->OSQStart;
    8ec4:	e0bffe17 	ldw	r2,-8(fp)
    8ec8:	10c00117 	ldw	r3,4(r2)
    8ecc:	e0bffe17 	ldw	r2,-8(fp)
    8ed0:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
    8ed4:	e0bffe17 	ldw	r2,-8(fp)
    8ed8:	1080058b 	ldhu	r2,22(r2)
    8edc:	10800044 	addi	r2,r2,1
    8ee0:	1007883a 	mov	r3,r2
    8ee4:	e0bffe17 	ldw	r2,-8(fp)
    8ee8:	10c0058d 	sth	r3,22(r2)
    8eec:	e0bfff17 	ldw	r2,-4(fp)
    8ef0:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
    8ef4:	e0bffa17 	ldw	r2,-24(fp)
    8ef8:	1001703a 	wrctl	status,r2
}
    8efc:	0001883a 	nop
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    8f00:	0005883a 	mov	r2,zero
}
    8f04:	e037883a 	mov	sp,fp
    8f08:	dfc00117 	ldw	ra,4(sp)
    8f0c:	df000017 	ldw	fp,0(sp)
    8f10:	dec00204 	addi	sp,sp,8
    8f14:	f800283a 	ret

00008f18 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
    8f18:	defff604 	addi	sp,sp,-40
    8f1c:	df000915 	stw	fp,36(sp)
    8f20:	df000904 	addi	fp,sp,36
    8f24:	e13ff815 	stw	r4,-32(fp)
    8f28:	e17ff715 	stw	r5,-36(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    8f2c:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
    8f30:	e0bff817 	ldw	r2,-32(fp)
    8f34:	1000021e 	bne	r2,zero,8f40 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
    8f38:	00800104 	movi	r2,4
    8f3c:	00004a06 	br	9068 <OSQQuery+0x150>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
    8f40:	e0bff717 	ldw	r2,-36(fp)
    8f44:	1000021e 	bne	r2,zero,8f50 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
    8f48:	00800244 	movi	r2,9
    8f4c:	00004606 	br	9068 <OSQQuery+0x150>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
    8f50:	e0bff817 	ldw	r2,-32(fp)
    8f54:	10800003 	ldbu	r2,0(r2)
    8f58:	10803fcc 	andi	r2,r2,255
    8f5c:	108000a0 	cmpeqi	r2,r2,2
    8f60:	1000021e 	bne	r2,zero,8f6c <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
    8f64:	00800044 	movi	r2,1
    8f68:	00003f06 	br	9068 <OSQQuery+0x150>
  NIOS2_READ_STATUS (context);
    8f6c:	0005303a 	rdctl	r2,status
    8f70:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8f74:	e0fffa17 	ldw	r3,-24(fp)
    8f78:	00bfff84 	movi	r2,-2
    8f7c:	1884703a 	and	r2,r3,r2
    8f80:	1001703a 	wrctl	status,r2
  return context;
    8f84:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    8f88:	e0bffc15 	stw	r2,-16(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    8f8c:	e0bff817 	ldw	r2,-32(fp)
    8f90:	10c00283 	ldbu	r3,10(r2)
    8f94:	e0bff717 	ldw	r2,-36(fp)
    8f98:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
    8f9c:	e0bff817 	ldw	r2,-32(fp)
    8fa0:	108002c4 	addi	r2,r2,11
    8fa4:	e0bffe15 	stw	r2,-8(fp)
    pdest                = &p_q_data->OSEventTbl[0];
    8fa8:	e0bff717 	ldw	r2,-36(fp)
    8fac:	10800204 	addi	r2,r2,8
    8fb0:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    8fb4:	e03fffc5 	stb	zero,-1(fp)
    8fb8:	00000b06 	br	8fe8 <OSQQuery+0xd0>
        *pdest++ = *psrc++;
    8fbc:	e0fffe17 	ldw	r3,-8(fp)
    8fc0:	18800044 	addi	r2,r3,1
    8fc4:	e0bffe15 	stw	r2,-8(fp)
    8fc8:	e0bffd17 	ldw	r2,-12(fp)
    8fcc:	11000044 	addi	r4,r2,1
    8fd0:	e13ffd15 	stw	r4,-12(fp)
    8fd4:	18c00003 	ldbu	r3,0(r3)
    8fd8:	10c00005 	stb	r3,0(r2)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    8fdc:	e0bfffc3 	ldbu	r2,-1(fp)
    8fe0:	10800044 	addi	r2,r2,1
    8fe4:	e0bfffc5 	stb	r2,-1(fp)
    8fe8:	e0bfffc3 	ldbu	r2,-1(fp)
    8fec:	108000f0 	cmpltui	r2,r2,3
    8ff0:	103ff21e 	bne	r2,zero,8fbc <OSQQuery+0xa4>
    }
    pq = (OS_Q *)pevent->OSEventPtr;
    8ff4:	e0bff817 	ldw	r2,-32(fp)
    8ff8:	10800117 	ldw	r2,4(r2)
    8ffc:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {
    9000:	e0bffb17 	ldw	r2,-20(fp)
    9004:	1080058b 	ldhu	r2,22(r2)
    9008:	10bfffcc 	andi	r2,r2,65535
    900c:	10000626 	beq	r2,zero,9028 <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
    9010:	e0bffb17 	ldw	r2,-20(fp)
    9014:	10800417 	ldw	r2,16(r2)
    9018:	10c00017 	ldw	r3,0(r2)
    901c:	e0bff717 	ldw	r2,-36(fp)
    9020:	10c00015 	stw	r3,0(r2)
    9024:	00000206 	br	9030 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
    9028:	e0bff717 	ldw	r2,-36(fp)
    902c:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
    9030:	e0bffb17 	ldw	r2,-20(fp)
    9034:	10c0058b 	ldhu	r3,22(r2)
    9038:	e0bff717 	ldw	r2,-36(fp)
    903c:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
    9040:	e0bffb17 	ldw	r2,-20(fp)
    9044:	10c0050b 	ldhu	r3,20(r2)
    9048:	e0bff717 	ldw	r2,-36(fp)
    904c:	10c0018d 	sth	r3,6(r2)
    9050:	e0bffc17 	ldw	r2,-16(fp)
    9054:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
    9058:	e0bff917 	ldw	r2,-28(fp)
    905c:	1001703a 	wrctl	status,r2
}
    9060:	0001883a 	nop
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    9064:	0005883a 	mov	r2,zero
}
    9068:	e037883a 	mov	sp,fp
    906c:	df000017 	ldw	fp,0(sp)
    9070:	dec00104 	addi	sp,sp,4
    9074:	f800283a 	ret

00009078 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
    9078:	defffb04 	addi	sp,sp,-20
    907c:	dfc00415 	stw	ra,16(sp)
    9080:	df000315 	stw	fp,12(sp)
    9084:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    9088:	01407804 	movi	r5,480
    908c:	010000b4 	movhi	r4,2
    9090:	2129e204 	addi	r4,r4,-22648
    9094:	000576c0 	call	576c <OS_MemClr>
    pq1 = &OSQTbl[0];
    9098:	008000b4 	movhi	r2,2
    909c:	10a9e204 	addi	r2,r2,-22648
    90a0:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
    90a4:	008000b4 	movhi	r2,2
    90a8:	10a9e804 	addi	r2,r2,-22624
    90ac:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
    90b0:	e03fff8d 	sth	zero,-2(fp)
    90b4:	00000c06 	br	90e8 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
    90b8:	e0bffe17 	ldw	r2,-8(fp)
    90bc:	e0fffd17 	ldw	r3,-12(fp)
    90c0:	10c00015 	stw	r3,0(r2)
        pq1++;
    90c4:	e0bffe17 	ldw	r2,-8(fp)
    90c8:	10800604 	addi	r2,r2,24
    90cc:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
    90d0:	e0bffd17 	ldw	r2,-12(fp)
    90d4:	10800604 	addi	r2,r2,24
    90d8:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
    90dc:	e0bfff8b 	ldhu	r2,-2(fp)
    90e0:	10800044 	addi	r2,r2,1
    90e4:	e0bfff8d 	sth	r2,-2(fp)
    90e8:	e0bfff8b 	ldhu	r2,-2(fp)
    90ec:	108004f0 	cmpltui	r2,r2,19
    90f0:	103ff11e 	bne	r2,zero,90b8 <OS_QInit+0x40>
    }
    pq1->OSQPtr = (OS_Q *)0;
    90f4:	e0bffe17 	ldw	r2,-8(fp)
    90f8:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
    90fc:	008000b4 	movhi	r2,2
    9100:	10a9e204 	addi	r2,r2,-22648
    9104:	d0a7c915 	stw	r2,-24796(gp)
#endif
}
    9108:	0001883a 	nop
    910c:	e037883a 	mov	sp,fp
    9110:	dfc00117 	ldw	ra,4(sp)
    9114:	df000017 	ldw	fp,0(sp)
    9118:	dec00204 	addi	sp,sp,8
    911c:	f800283a 	ret

00009120 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
    9120:	defffa04 	addi	sp,sp,-24
    9124:	df000515 	stw	fp,20(sp)
    9128:	df000504 	addi	fp,sp,20
    912c:	e13ffb15 	stw	r4,-20(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    9130:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    9134:	e0bffb17 	ldw	r2,-20(fp)
    9138:	1000021e 	bne	r2,zero,9144 <OSSemAccept+0x24>
        return (0);
    913c:	0005883a 	mov	r2,zero
    9140:	00002006 	br	91c4 <OSSemAccept+0xa4>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    9144:	e0bffb17 	ldw	r2,-20(fp)
    9148:	10800003 	ldbu	r2,0(r2)
    914c:	10803fcc 	andi	r2,r2,255
    9150:	108000e0 	cmpeqi	r2,r2,3
    9154:	1000021e 	bne	r2,zero,9160 <OSSemAccept+0x40>
        return (0);
    9158:	0005883a 	mov	r2,zero
    915c:	00001906 	br	91c4 <OSSemAccept+0xa4>
  NIOS2_READ_STATUS (context);
    9160:	0005303a 	rdctl	r2,status
    9164:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9168:	e0fffd17 	ldw	r3,-12(fp)
    916c:	00bfff84 	movi	r2,-2
    9170:	1884703a 	and	r2,r3,r2
    9174:	1001703a 	wrctl	status,r2
  return context;
    9178:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    917c:	e0bfff15 	stw	r2,-4(fp)
    cnt = pevent->OSEventCnt;
    9180:	e0bffb17 	ldw	r2,-20(fp)
    9184:	1080020b 	ldhu	r2,8(r2)
    9188:	e0bffe8d 	sth	r2,-6(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
    918c:	e0bffe8b 	ldhu	r2,-6(fp)
    9190:	10000626 	beq	r2,zero,91ac <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
    9194:	e0bffb17 	ldw	r2,-20(fp)
    9198:	1080020b 	ldhu	r2,8(r2)
    919c:	10bfffc4 	addi	r2,r2,-1
    91a0:	1007883a 	mov	r3,r2
    91a4:	e0bffb17 	ldw	r2,-20(fp)
    91a8:	10c0020d 	sth	r3,8(r2)
    91ac:	e0bfff17 	ldw	r2,-4(fp)
    91b0:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    91b4:	e0bffc17 	ldw	r2,-16(fp)
    91b8:	1001703a 	wrctl	status,r2
}
    91bc:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
    91c0:	e0bffe8b 	ldhu	r2,-6(fp)
}
    91c4:	e037883a 	mov	sp,fp
    91c8:	df000017 	ldw	fp,0(sp)
    91cc:	dec00104 	addi	sp,sp,4
    91d0:	f800283a 	ret

000091d4 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
    91d4:	defff904 	addi	sp,sp,-28
    91d8:	dfc00615 	stw	ra,24(sp)
    91dc:	df000515 	stw	fp,20(sp)
    91e0:	df000504 	addi	fp,sp,20
    91e4:	2005883a 	mov	r2,r4
    91e8:	e0bffb0d 	sth	r2,-20(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    91ec:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    91f0:	d0a7bf43 	ldbu	r2,-24835(gp)
    91f4:	10803fcc 	andi	r2,r2,255
    91f8:	10000226 	beq	r2,zero,9204 <OSSemCreate+0x30>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
    91fc:	0005883a 	mov	r2,zero
    9200:	00002606 	br	929c <OSSemCreate+0xc8>
  NIOS2_READ_STATUS (context);
    9204:	0005303a 	rdctl	r2,status
    9208:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    920c:	e0fffd17 	ldw	r3,-12(fp)
    9210:	00bfff84 	movi	r2,-2
    9214:	1884703a 	and	r2,r3,r2
    9218:	1001703a 	wrctl	status,r2
  return context;
    921c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    9220:	e0bfff15 	stw	r2,-4(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
    9224:	d0a7ba17 	ldw	r2,-24856(gp)
    9228:	e0bffe15 	stw	r2,-8(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
    922c:	d0a7ba17 	ldw	r2,-24856(gp)
    9230:	10000326 	beq	r2,zero,9240 <OSSemCreate+0x6c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
    9234:	d0a7ba17 	ldw	r2,-24856(gp)
    9238:	10800117 	ldw	r2,4(r2)
    923c:	d0a7ba15 	stw	r2,-24856(gp)
    9240:	e0bfff17 	ldw	r2,-4(fp)
    9244:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    9248:	e0bffc17 	ldw	r2,-16(fp)
    924c:	1001703a 	wrctl	status,r2
}
    9250:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
    9254:	e0bffe17 	ldw	r2,-8(fp)
    9258:	10000f26 	beq	r2,zero,9298 <OSSemCreate+0xc4>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
    925c:	e0bffe17 	ldw	r2,-8(fp)
    9260:	00c000c4 	movi	r3,3
    9264:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
    9268:	e0bffe17 	ldw	r2,-8(fp)
    926c:	e0fffb0b 	ldhu	r3,-20(fp)
    9270:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
    9274:	e0bffe17 	ldw	r2,-8(fp)
    9278:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
    927c:	e0bffe17 	ldw	r2,-8(fp)
    9280:	00c00fc4 	movi	r3,63
    9284:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
    9288:	e0bffe17 	ldw	r2,-8(fp)
    928c:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
    9290:	e13ffe17 	ldw	r4,-8(fp)
    9294:	00053800 	call	5380 <OS_EventWaitListInit>
    }
    return (pevent);
    9298:	e0bffe17 	ldw	r2,-8(fp)
}
    929c:	e037883a 	mov	sp,fp
    92a0:	dfc00117 	ldw	ra,4(sp)
    92a4:	df000017 	ldw	fp,0(sp)
    92a8:	dec00204 	addi	sp,sp,8
    92ac:	f800283a 	ret

000092b0 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    92b0:	defff304 	addi	sp,sp,-52
    92b4:	dfc00c15 	stw	ra,48(sp)
    92b8:	df000b15 	stw	fp,44(sp)
    92bc:	df000b04 	addi	fp,sp,44
    92c0:	e13ff715 	stw	r4,-36(fp)
    92c4:	2805883a 	mov	r2,r5
    92c8:	e1bff515 	stw	r6,-44(fp)
    92cc:	e0bff605 	stb	r2,-40(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    92d0:	e03ffd15 	stw	zero,-12(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    92d4:	e0bff517 	ldw	r2,-44(fp)
    92d8:	1000021e 	bne	r2,zero,92e4 <OSSemDel+0x34>
        return (pevent);
    92dc:	e0bff717 	ldw	r2,-36(fp)
    92e0:	00008206 	br	94ec <OSSemDel+0x23c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    92e4:	e0bff717 	ldw	r2,-36(fp)
    92e8:	1000051e 	bne	r2,zero,9300 <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    92ec:	e0bff517 	ldw	r2,-44(fp)
    92f0:	00c00104 	movi	r3,4
    92f4:	10c00005 	stb	r3,0(r2)
        return (pevent);
    92f8:	e0bff717 	ldw	r2,-36(fp)
    92fc:	00007b06 	br	94ec <OSSemDel+0x23c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
    9300:	e0bff717 	ldw	r2,-36(fp)
    9304:	10800003 	ldbu	r2,0(r2)
    9308:	10803fcc 	andi	r2,r2,255
    930c:	108000e0 	cmpeqi	r2,r2,3
    9310:	1000051e 	bne	r2,zero,9328 <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    9314:	e0bff517 	ldw	r2,-44(fp)
    9318:	00c00044 	movi	r3,1
    931c:	10c00005 	stb	r3,0(r2)
        return (pevent);
    9320:	e0bff717 	ldw	r2,-36(fp)
    9324:	00007106 	br	94ec <OSSemDel+0x23c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    9328:	d0a7bf43 	ldbu	r2,-24835(gp)
    932c:	10803fcc 	andi	r2,r2,255
    9330:	10000526 	beq	r2,zero,9348 <OSSemDel+0x98>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
    9334:	e0bff517 	ldw	r2,-44(fp)
    9338:	00c003c4 	movi	r3,15
    933c:	10c00005 	stb	r3,0(r2)
        return (pevent);
    9340:	e0bff717 	ldw	r2,-36(fp)
    9344:	00006906 	br	94ec <OSSemDel+0x23c>
  NIOS2_READ_STATUS (context);
    9348:	0005303a 	rdctl	r2,status
    934c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9350:	e0fffc17 	ldw	r3,-16(fp)
    9354:	00bfff84 	movi	r2,-2
    9358:	1884703a 	and	r2,r3,r2
    935c:	1001703a 	wrctl	status,r2
  return context;
    9360:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    9364:	e0bffd15 	stw	r2,-12(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
    9368:	e0bff717 	ldw	r2,-36(fp)
    936c:	10800283 	ldbu	r2,10(r2)
    9370:	10803fcc 	andi	r2,r2,255
    9374:	10000326 	beq	r2,zero,9384 <OSSemDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    9378:	00800044 	movi	r2,1
    937c:	e0bfffc5 	stb	r2,-1(fp)
    9380:	00000106 	br	9388 <OSSemDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    9384:	e03fffc5 	stb	zero,-1(fp)
    }
    switch (opt) {
    9388:	e0bff603 	ldbu	r2,-40(fp)
    938c:	10000326 	beq	r2,zero,939c <OSSemDel+0xec>
    9390:	10800060 	cmpeqi	r2,r2,1
    9394:	10002a1e 	bne	r2,zero,9440 <OSSemDel+0x190>
    9398:	00004806 	br	94bc <OSSemDel+0x20c>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
    939c:	e0bfffc3 	ldbu	r2,-1(fp)
    93a0:	1000171e 	bne	r2,zero,9400 <OSSemDel+0x150>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
    93a4:	e0bff717 	ldw	r2,-36(fp)
    93a8:	00c00fc4 	movi	r3,63
    93ac:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
    93b0:	e0bff717 	ldw	r2,-36(fp)
    93b4:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    93b8:	e0bff717 	ldw	r2,-36(fp)
    93bc:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
    93c0:	d0e7ba17 	ldw	r3,-24856(gp)
    93c4:	e0bff717 	ldw	r2,-36(fp)
    93c8:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
    93cc:	e0bff717 	ldw	r2,-36(fp)
    93d0:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
    93d4:	e0bff717 	ldw	r2,-36(fp)
    93d8:	d0a7ba15 	stw	r2,-24856(gp)
    93dc:	e0bffd17 	ldw	r2,-12(fp)
    93e0:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    93e4:	e0bffb17 	ldw	r2,-20(fp)
    93e8:	1001703a 	wrctl	status,r2
}
    93ec:	0001883a 	nop
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
    93f0:	e0bff517 	ldw	r2,-44(fp)
    93f4:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
    93f8:	e03ffe15 	stw	zero,-8(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
    93fc:	00003a06 	br	94e8 <OSSemDel+0x238>
    9400:	e0bffd17 	ldw	r2,-12(fp)
    9404:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
    9408:	e0bffa17 	ldw	r2,-24(fp)
    940c:	1001703a 	wrctl	status,r2
}
    9410:	0001883a 	nop
                 *perr                  = OS_ERR_TASK_WAITING;
    9414:	e0bff517 	ldw	r2,-44(fp)
    9418:	00c01244 	movi	r3,73
    941c:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
    9420:	e0bff717 	ldw	r2,-36(fp)
    9424:	e0bffe15 	stw	r2,-8(fp)
             break;
    9428:	00002f06 	br	94e8 <OSSemDel+0x238>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
    942c:	000f883a 	mov	r7,zero
    9430:	01800044 	movi	r6,1
    9434:	000b883a 	mov	r5,zero
    9438:	e13ff717 	ldw	r4,-36(fp)
    943c:	0004dfc0 	call	4dfc <OS_EventTaskRdy>
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
    9440:	e0bff717 	ldw	r2,-36(fp)
    9444:	10800283 	ldbu	r2,10(r2)
    9448:	10803fcc 	andi	r2,r2,255
    944c:	103ff71e 	bne	r2,zero,942c <OSSemDel+0x17c>
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
    9450:	e0bff717 	ldw	r2,-36(fp)
    9454:	00c00fc4 	movi	r3,63
    9458:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
    945c:	e0bff717 	ldw	r2,-36(fp)
    9460:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    9464:	e0bff717 	ldw	r2,-36(fp)
    9468:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
    946c:	d0e7ba17 	ldw	r3,-24856(gp)
    9470:	e0bff717 	ldw	r2,-36(fp)
    9474:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
    9478:	e0bff717 	ldw	r2,-36(fp)
    947c:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
    9480:	e0bff717 	ldw	r2,-36(fp)
    9484:	d0a7ba15 	stw	r2,-24856(gp)
    9488:	e0bffd17 	ldw	r2,-12(fp)
    948c:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
    9490:	e0bff917 	ldw	r2,-28(fp)
    9494:	1001703a 	wrctl	status,r2
}
    9498:	0001883a 	nop
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
    949c:	e0bfffc3 	ldbu	r2,-1(fp)
    94a0:	10800058 	cmpnei	r2,r2,1
    94a4:	1000011e 	bne	r2,zero,94ac <OSSemDel+0x1fc>
                 OS_Sched();                               /* Find highest priority task ready to run  */
    94a8:	00058300 	call	5830 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
    94ac:	e0bff517 	ldw	r2,-44(fp)
    94b0:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
    94b4:	e03ffe15 	stw	zero,-8(fp)
             break;
    94b8:	00000b06 	br	94e8 <OSSemDel+0x238>
    94bc:	e0bffd17 	ldw	r2,-12(fp)
    94c0:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
    94c4:	e0bff817 	ldw	r2,-32(fp)
    94c8:	1001703a 	wrctl	status,r2
}
    94cc:	0001883a 	nop

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
    94d0:	e0bff517 	ldw	r2,-44(fp)
    94d4:	00c001c4 	movi	r3,7
    94d8:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
    94dc:	e0bff717 	ldw	r2,-36(fp)
    94e0:	e0bffe15 	stw	r2,-8(fp)
             break;
    94e4:	0001883a 	nop
    }
    return (pevent_return);
    94e8:	e0bffe17 	ldw	r2,-8(fp)
}
    94ec:	e037883a 	mov	sp,fp
    94f0:	dfc00117 	ldw	ra,4(sp)
    94f4:	df000017 	ldw	fp,0(sp)
    94f8:	dec00204 	addi	sp,sp,8
    94fc:	f800283a 	ret

00009500 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
    9500:	defff504 	addi	sp,sp,-44
    9504:	dfc00a15 	stw	ra,40(sp)
    9508:	df000915 	stw	fp,36(sp)
    950c:	df000904 	addi	fp,sp,36
    9510:	e13ff915 	stw	r4,-28(fp)
    9514:	2805883a 	mov	r2,r5
    9518:	e1bff715 	stw	r6,-36(fp)
    951c:	e0bff80d 	sth	r2,-32(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    9520:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    9524:	e0bff717 	ldw	r2,-36(fp)
    9528:	10007426 	beq	r2,zero,96fc <OSSemPend+0x1fc>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    952c:	e0bff917 	ldw	r2,-28(fp)
    9530:	1000041e 	bne	r2,zero,9544 <OSSemPend+0x44>
        *perr = OS_ERR_PEVENT_NULL;
    9534:	e0bff717 	ldw	r2,-36(fp)
    9538:	00c00104 	movi	r3,4
    953c:	10c00005 	stb	r3,0(r2)
        return;
    9540:	00006f06 	br	9700 <OSSemPend+0x200>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    9544:	e0bff917 	ldw	r2,-28(fp)
    9548:	10800003 	ldbu	r2,0(r2)
    954c:	10803fcc 	andi	r2,r2,255
    9550:	108000e0 	cmpeqi	r2,r2,3
    9554:	1000041e 	bne	r2,zero,9568 <OSSemPend+0x68>
        *perr = OS_ERR_EVENT_TYPE;
    9558:	e0bff717 	ldw	r2,-36(fp)
    955c:	00c00044 	movi	r3,1
    9560:	10c00005 	stb	r3,0(r2)
        return;
    9564:	00006606 	br	9700 <OSSemPend+0x200>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
    9568:	d0a7bf43 	ldbu	r2,-24835(gp)
    956c:	10803fcc 	andi	r2,r2,255
    9570:	10000426 	beq	r2,zero,9584 <OSSemPend+0x84>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
    9574:	e0bff717 	ldw	r2,-36(fp)
    9578:	00c00084 	movi	r3,2
    957c:	10c00005 	stb	r3,0(r2)
        return;
    9580:	00005f06 	br	9700 <OSSemPend+0x200>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
    9584:	d0a7bf83 	ldbu	r2,-24834(gp)
    9588:	10803fcc 	andi	r2,r2,255
    958c:	10000426 	beq	r2,zero,95a0 <OSSemPend+0xa0>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
    9590:	e0bff717 	ldw	r2,-36(fp)
    9594:	00c00344 	movi	r3,13
    9598:	10c00005 	stb	r3,0(r2)
        return;
    959c:	00005806 	br	9700 <OSSemPend+0x200>
  NIOS2_READ_STATUS (context);
    95a0:	0005303a 	rdctl	r2,status
    95a4:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    95a8:	e0fffe17 	ldw	r3,-8(fp)
    95ac:	00bfff84 	movi	r2,-2
    95b0:	1884703a 	and	r2,r3,r2
    95b4:	1001703a 	wrctl	status,r2
  return context;
    95b8:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
    95bc:	e0bfff15 	stw	r2,-4(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
    95c0:	e0bff917 	ldw	r2,-28(fp)
    95c4:	1080020b 	ldhu	r2,8(r2)
    95c8:	10bfffcc 	andi	r2,r2,65535
    95cc:	10000e26 	beq	r2,zero,9608 <OSSemPend+0x108>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
    95d0:	e0bff917 	ldw	r2,-28(fp)
    95d4:	1080020b 	ldhu	r2,8(r2)
    95d8:	10bfffc4 	addi	r2,r2,-1
    95dc:	1007883a 	mov	r3,r2
    95e0:	e0bff917 	ldw	r2,-28(fp)
    95e4:	10c0020d 	sth	r3,8(r2)
    95e8:	e0bfff17 	ldw	r2,-4(fp)
    95ec:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
    95f0:	e0bffd17 	ldw	r2,-12(fp)
    95f4:	1001703a 	wrctl	status,r2
}
    95f8:	0001883a 	nop
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
    95fc:	e0bff717 	ldw	r2,-36(fp)
    9600:	10000005 	stb	zero,0(r2)
        return;
    9604:	00003e06 	br	9700 <OSSemPend+0x200>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
    9608:	d0a7c317 	ldw	r2,-24820(gp)
    960c:	10c00c03 	ldbu	r3,48(r2)
    9610:	d0a7c317 	ldw	r2,-24820(gp)
    9614:	18c00054 	ori	r3,r3,1
    9618:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    961c:	d0a7c317 	ldw	r2,-24820(gp)
    9620:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
    9624:	d0a7c317 	ldw	r2,-24820(gp)
    9628:	e0fff80b 	ldhu	r3,-32(fp)
    962c:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
    9630:	e13ff917 	ldw	r4,-28(fp)
    9634:	0004f840 	call	4f84 <OS_EventTaskWait>
    9638:	e0bfff17 	ldw	r2,-4(fp)
    963c:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    9640:	e0bffb17 	ldw	r2,-20(fp)
    9644:	1001703a 	wrctl	status,r2
}
    9648:	0001883a 	nop
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
    964c:	00058300 	call	5830 <OS_Sched>
  NIOS2_READ_STATUS (context);
    9650:	0005303a 	rdctl	r2,status
    9654:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9658:	e0fffc17 	ldw	r3,-16(fp)
    965c:	00bfff84 	movi	r2,-2
    9660:	1884703a 	and	r2,r3,r2
    9664:	1001703a 	wrctl	status,r2
  return context;
    9668:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
    966c:	e0bfff15 	stw	r2,-4(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
    9670:	d0a7c317 	ldw	r2,-24820(gp)
    9674:	10800c43 	ldbu	r2,49(r2)
    9678:	10803fcc 	andi	r2,r2,255
    967c:	10000326 	beq	r2,zero,968c <OSSemPend+0x18c>
    9680:	108000a0 	cmpeqi	r2,r2,2
    9684:	1000041e 	bne	r2,zero,9698 <OSSemPend+0x198>
    9688:	00000706 	br	96a8 <OSSemPend+0x1a8>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
    968c:	e0bff717 	ldw	r2,-36(fp)
    9690:	10000005 	stb	zero,0(r2)
             break;
    9694:	00000c06 	br	96c8 <OSSemPend+0x1c8>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
    9698:	e0bff717 	ldw	r2,-36(fp)
    969c:	00c00384 	movi	r3,14
    96a0:	10c00005 	stb	r3,0(r2)
             break;
    96a4:	00000806 	br	96c8 <OSSemPend+0x1c8>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
    96a8:	d0a7c317 	ldw	r2,-24820(gp)
    96ac:	e17ff917 	ldw	r5,-28(fp)
    96b0:	1009883a 	mov	r4,r2
    96b4:	00051d40 	call	51d4 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
    96b8:	e0bff717 	ldw	r2,-36(fp)
    96bc:	00c00284 	movi	r3,10
    96c0:	10c00005 	stb	r3,0(r2)
             break;
    96c4:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
    96c8:	d0a7c317 	ldw	r2,-24820(gp)
    96cc:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
    96d0:	d0a7c317 	ldw	r2,-24820(gp)
    96d4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
    96d8:	d0a7c317 	ldw	r2,-24820(gp)
    96dc:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    96e0:	d0a7c317 	ldw	r2,-24820(gp)
    96e4:	10000815 	stw	zero,32(r2)
    96e8:	e0bfff17 	ldw	r2,-4(fp)
    96ec:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
    96f0:	e0bffa17 	ldw	r2,-24(fp)
    96f4:	1001703a 	wrctl	status,r2
}
    96f8:	00000106 	br	9700 <OSSemPend+0x200>
        return;
    96fc:	0001883a 	nop
#endif
    OS_EXIT_CRITICAL();
}
    9700:	e037883a 	mov	sp,fp
    9704:	dfc00117 	ldw	ra,4(sp)
    9708:	df000017 	ldw	fp,0(sp)
    970c:	dec00204 	addi	sp,sp,8
    9710:	f800283a 	ret

00009714 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    9714:	defff604 	addi	sp,sp,-40
    9718:	dfc00915 	stw	ra,36(sp)
    971c:	df000815 	stw	fp,32(sp)
    9720:	df000804 	addi	fp,sp,32
    9724:	e13ffa15 	stw	r4,-24(fp)
    9728:	2805883a 	mov	r2,r5
    972c:	e1bff815 	stw	r6,-32(fp)
    9730:	e0bff905 	stb	r2,-28(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    9734:	e03ffe15 	stw	zero,-8(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    9738:	e0bff817 	ldw	r2,-32(fp)
    973c:	1000021e 	bne	r2,zero,9748 <OSSemPendAbort+0x34>
        return (0);
    9740:	0005883a 	mov	r2,zero
    9744:	00004b06 	br	9874 <OSSemPendAbort+0x160>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    9748:	e0bffa17 	ldw	r2,-24(fp)
    974c:	1000051e 	bne	r2,zero,9764 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    9750:	e0bff817 	ldw	r2,-32(fp)
    9754:	00c00104 	movi	r3,4
    9758:	10c00005 	stb	r3,0(r2)
        return (0);
    975c:	0005883a 	mov	r2,zero
    9760:	00004406 	br	9874 <OSSemPendAbort+0x160>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    9764:	e0bffa17 	ldw	r2,-24(fp)
    9768:	10800003 	ldbu	r2,0(r2)
    976c:	10803fcc 	andi	r2,r2,255
    9770:	108000e0 	cmpeqi	r2,r2,3
    9774:	1000051e 	bne	r2,zero,978c <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    9778:	e0bff817 	ldw	r2,-32(fp)
    977c:	00c00044 	movi	r3,1
    9780:	10c00005 	stb	r3,0(r2)
        return (0);
    9784:	0005883a 	mov	r2,zero
    9788:	00003a06 	br	9874 <OSSemPendAbort+0x160>
  NIOS2_READ_STATUS (context);
    978c:	0005303a 	rdctl	r2,status
    9790:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9794:	e0fffd17 	ldw	r3,-12(fp)
    9798:	00bfff84 	movi	r2,-2
    979c:	1884703a 	and	r2,r3,r2
    97a0:	1001703a 	wrctl	status,r2
  return context;
    97a4:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    97a8:	e0bffe15 	stw	r2,-8(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
    97ac:	e0bffa17 	ldw	r2,-24(fp)
    97b0:	10800283 	ldbu	r2,10(r2)
    97b4:	10803fcc 	andi	r2,r2,255
    97b8:	10002626 	beq	r2,zero,9854 <OSSemPendAbort+0x140>
        nbr_tasks = 0;
    97bc:	e03fffc5 	stb	zero,-1(fp)
        switch (opt) {
    97c0:	e0bff903 	ldbu	r2,-28(fp)
    97c4:	10800058 	cmpnei	r2,r2,1
    97c8:	10000e1e 	bne	r2,zero,9804 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
    97cc:	00000806 	br	97f0 <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
    97d0:	01c00084 	movi	r7,2
    97d4:	01800044 	movi	r6,1
    97d8:	000b883a 	mov	r5,zero
    97dc:	e13ffa17 	ldw	r4,-24(fp)
    97e0:	0004dfc0 	call	4dfc <OS_EventTaskRdy>
                     nbr_tasks++;
    97e4:	e0bfffc3 	ldbu	r2,-1(fp)
    97e8:	10800044 	addi	r2,r2,1
    97ec:	e0bfffc5 	stb	r2,-1(fp)
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
    97f0:	e0bffa17 	ldw	r2,-24(fp)
    97f4:	10800283 	ldbu	r2,10(r2)
    97f8:	10803fcc 	andi	r2,r2,255
    97fc:	103ff41e 	bne	r2,zero,97d0 <OSSemPendAbort+0xbc>
                 }
                 break;
    9800:	00000906 	br	9828 <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
    9804:	01c00084 	movi	r7,2
    9808:	01800044 	movi	r6,1
    980c:	000b883a 	mov	r5,zero
    9810:	e13ffa17 	ldw	r4,-24(fp)
    9814:	0004dfc0 	call	4dfc <OS_EventTaskRdy>
                 nbr_tasks++;
    9818:	e0bfffc3 	ldbu	r2,-1(fp)
    981c:	10800044 	addi	r2,r2,1
    9820:	e0bfffc5 	stb	r2,-1(fp)
                 break;
    9824:	0001883a 	nop
    9828:	e0bffe17 	ldw	r2,-8(fp)
    982c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    9830:	e0bffc17 	ldw	r2,-16(fp)
    9834:	1001703a 	wrctl	status,r2
}
    9838:	0001883a 	nop
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
    983c:	00058300 	call	5830 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
    9840:	e0bff817 	ldw	r2,-32(fp)
    9844:	00c00384 	movi	r3,14
    9848:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
    984c:	e0bfffc3 	ldbu	r2,-1(fp)
    9850:	00000806 	br	9874 <OSSemPendAbort+0x160>
    9854:	e0bffe17 	ldw	r2,-8(fp)
    9858:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    985c:	e0bffb17 	ldw	r2,-20(fp)
    9860:	1001703a 	wrctl	status,r2
}
    9864:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    9868:	e0bff817 	ldw	r2,-32(fp)
    986c:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
    9870:	0005883a 	mov	r2,zero
}
    9874:	e037883a 	mov	sp,fp
    9878:	dfc00117 	ldw	ra,4(sp)
    987c:	df000017 	ldw	fp,0(sp)
    9880:	dec00204 	addi	sp,sp,8
    9884:	f800283a 	ret

00009888 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
    9888:	defff804 	addi	sp,sp,-32
    988c:	dfc00715 	stw	ra,28(sp)
    9890:	df000615 	stw	fp,24(sp)
    9894:	df000604 	addi	fp,sp,24
    9898:	e13ffa15 	stw	r4,-24(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    989c:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    98a0:	e0bffa17 	ldw	r2,-24(fp)
    98a4:	1000021e 	bne	r2,zero,98b0 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
    98a8:	00800104 	movi	r2,4
    98ac:	00003806 	br	9990 <OSSemPost+0x108>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    98b0:	e0bffa17 	ldw	r2,-24(fp)
    98b4:	10800003 	ldbu	r2,0(r2)
    98b8:	10803fcc 	andi	r2,r2,255
    98bc:	108000e0 	cmpeqi	r2,r2,3
    98c0:	1000021e 	bne	r2,zero,98cc <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
    98c4:	00800044 	movi	r2,1
    98c8:	00003106 	br	9990 <OSSemPost+0x108>
  NIOS2_READ_STATUS (context);
    98cc:	0005303a 	rdctl	r2,status
    98d0:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    98d4:	e0fffe17 	ldw	r3,-8(fp)
    98d8:	00bfff84 	movi	r2,-2
    98dc:	1884703a 	and	r2,r3,r2
    98e0:	1001703a 	wrctl	status,r2
  return context;
    98e4:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
    98e8:	e0bfff15 	stw	r2,-4(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
    98ec:	e0bffa17 	ldw	r2,-24(fp)
    98f0:	10800283 	ldbu	r2,10(r2)
    98f4:	10803fcc 	andi	r2,r2,255
    98f8:	10000d26 	beq	r2,zero,9930 <OSSemPost+0xa8>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
    98fc:	000f883a 	mov	r7,zero
    9900:	01800044 	movi	r6,1
    9904:	000b883a 	mov	r5,zero
    9908:	e13ffa17 	ldw	r4,-24(fp)
    990c:	0004dfc0 	call	4dfc <OS_EventTaskRdy>
    9910:	e0bfff17 	ldw	r2,-4(fp)
    9914:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
    9918:	e0bffd17 	ldw	r2,-12(fp)
    991c:	1001703a 	wrctl	status,r2
}
    9920:	0001883a 	nop
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
    9924:	00058300 	call	5830 <OS_Sched>
        return (OS_ERR_NONE);
    9928:	0005883a 	mov	r2,zero
    992c:	00001806 	br	9990 <OSSemPost+0x108>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
    9930:	e0bffa17 	ldw	r2,-24(fp)
    9934:	1080020b 	ldhu	r2,8(r2)
    9938:	10ffffcc 	andi	r3,r2,65535
    993c:	00bfffd4 	movui	r2,65535
    9940:	18800d26 	beq	r3,r2,9978 <OSSemPost+0xf0>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
    9944:	e0bffa17 	ldw	r2,-24(fp)
    9948:	1080020b 	ldhu	r2,8(r2)
    994c:	10800044 	addi	r2,r2,1
    9950:	1007883a 	mov	r3,r2
    9954:	e0bffa17 	ldw	r2,-24(fp)
    9958:	10c0020d 	sth	r3,8(r2)
    995c:	e0bfff17 	ldw	r2,-4(fp)
    9960:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    9964:	e0bffc17 	ldw	r2,-16(fp)
    9968:	1001703a 	wrctl	status,r2
}
    996c:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
    9970:	0005883a 	mov	r2,zero
    9974:	00000606 	br	9990 <OSSemPost+0x108>
    9978:	e0bfff17 	ldw	r2,-4(fp)
    997c:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    9980:	e0bffb17 	ldw	r2,-20(fp)
    9984:	1001703a 	wrctl	status,r2
}
    9988:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
    998c:	00800c84 	movi	r2,50
}
    9990:	e037883a 	mov	sp,fp
    9994:	dfc00117 	ldw	ra,4(sp)
    9998:	df000017 	ldw	fp,0(sp)
    999c:	dec00204 	addi	sp,sp,8
    99a0:	f800283a 	ret

000099a4 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
    99a4:	defff704 	addi	sp,sp,-36
    99a8:	df000815 	stw	fp,32(sp)
    99ac:	df000804 	addi	fp,sp,32
    99b0:	e13ff915 	stw	r4,-28(fp)
    99b4:	e17ff815 	stw	r5,-32(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    99b8:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    99bc:	e0bff917 	ldw	r2,-28(fp)
    99c0:	1000021e 	bne	r2,zero,99cc <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
    99c4:	00800104 	movi	r2,4
    99c8:	00003706 	br	9aa8 <OSSemQuery+0x104>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
    99cc:	e0bff817 	ldw	r2,-32(fp)
    99d0:	1000021e 	bne	r2,zero,99dc <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
    99d4:	00800244 	movi	r2,9
    99d8:	00003306 	br	9aa8 <OSSemQuery+0x104>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
    99dc:	e0bff917 	ldw	r2,-28(fp)
    99e0:	10800003 	ldbu	r2,0(r2)
    99e4:	10803fcc 	andi	r2,r2,255
    99e8:	108000e0 	cmpeqi	r2,r2,3
    99ec:	1000021e 	bne	r2,zero,99f8 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
    99f0:	00800044 	movi	r2,1
    99f4:	00002c06 	br	9aa8 <OSSemQuery+0x104>
  NIOS2_READ_STATUS (context);
    99f8:	0005303a 	rdctl	r2,status
    99fc:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9a00:	e0fffb17 	ldw	r3,-20(fp)
    9a04:	00bfff84 	movi	r2,-2
    9a08:	1884703a 	and	r2,r3,r2
    9a0c:	1001703a 	wrctl	status,r2
  return context;
    9a10:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
    9a14:	e0bffc15 	stw	r2,-16(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    9a18:	e0bff917 	ldw	r2,-28(fp)
    9a1c:	10c00283 	ldbu	r3,10(r2)
    9a20:	e0bff817 	ldw	r2,-32(fp)
    9a24:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
    9a28:	e0bff917 	ldw	r2,-28(fp)
    9a2c:	108002c4 	addi	r2,r2,11
    9a30:	e0bfff15 	stw	r2,-4(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
    9a34:	e0bff817 	ldw	r2,-32(fp)
    9a38:	10800084 	addi	r2,r2,2
    9a3c:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    9a40:	e03ffdc5 	stb	zero,-9(fp)
    9a44:	00000b06 	br	9a74 <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
    9a48:	e0ffff17 	ldw	r3,-4(fp)
    9a4c:	18800044 	addi	r2,r3,1
    9a50:	e0bfff15 	stw	r2,-4(fp)
    9a54:	e0bffe17 	ldw	r2,-8(fp)
    9a58:	11000044 	addi	r4,r2,1
    9a5c:	e13ffe15 	stw	r4,-8(fp)
    9a60:	18c00003 	ldbu	r3,0(r3)
    9a64:	10c00005 	stb	r3,0(r2)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    9a68:	e0bffdc3 	ldbu	r2,-9(fp)
    9a6c:	10800044 	addi	r2,r2,1
    9a70:	e0bffdc5 	stb	r2,-9(fp)
    9a74:	e0bffdc3 	ldbu	r2,-9(fp)
    9a78:	108000f0 	cmpltui	r2,r2,3
    9a7c:	103ff21e 	bne	r2,zero,9a48 <OSSemQuery+0xa4>
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
    9a80:	e0bff917 	ldw	r2,-28(fp)
    9a84:	10c0020b 	ldhu	r3,8(r2)
    9a88:	e0bff817 	ldw	r2,-32(fp)
    9a8c:	10c0000d 	sth	r3,0(r2)
    9a90:	e0bffc17 	ldw	r2,-16(fp)
    9a94:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
    9a98:	e0bffa17 	ldw	r2,-24(fp)
    9a9c:	1001703a 	wrctl	status,r2
}
    9aa0:	0001883a 	nop
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    9aa4:	0005883a 	mov	r2,zero
}
    9aa8:	e037883a 	mov	sp,fp
    9aac:	df000017 	ldw	fp,0(sp)
    9ab0:	dec00104 	addi	sp,sp,4
    9ab4:	f800283a 	ret

00009ab8 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
    9ab8:	defff904 	addi	sp,sp,-28
    9abc:	df000615 	stw	fp,24(sp)
    9ac0:	df000604 	addi	fp,sp,24
    9ac4:	e13ffc15 	stw	r4,-16(fp)
    9ac8:	2805883a 	mov	r2,r5
    9acc:	e1bffa15 	stw	r6,-24(fp)
    9ad0:	e0bffb0d 	sth	r2,-20(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    9ad4:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    9ad8:	e0bffa17 	ldw	r2,-24(fp)
    9adc:	10003126 	beq	r2,zero,9ba4 <OSSemSet+0xec>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    9ae0:	e0bffc17 	ldw	r2,-16(fp)
    9ae4:	1000041e 	bne	r2,zero,9af8 <OSSemSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
    9ae8:	e0bffa17 	ldw	r2,-24(fp)
    9aec:	00c00104 	movi	r3,4
    9af0:	10c00005 	stb	r3,0(r2)
        return;
    9af4:	00002c06 	br	9ba8 <OSSemSet+0xf0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    9af8:	e0bffc17 	ldw	r2,-16(fp)
    9afc:	10800003 	ldbu	r2,0(r2)
    9b00:	10803fcc 	andi	r2,r2,255
    9b04:	108000e0 	cmpeqi	r2,r2,3
    9b08:	1000041e 	bne	r2,zero,9b1c <OSSemSet+0x64>
        *perr = OS_ERR_EVENT_TYPE;
    9b0c:	e0bffa17 	ldw	r2,-24(fp)
    9b10:	00c00044 	movi	r3,1
    9b14:	10c00005 	stb	r3,0(r2)
        return;
    9b18:	00002306 	br	9ba8 <OSSemSet+0xf0>
  NIOS2_READ_STATUS (context);
    9b1c:	0005303a 	rdctl	r2,status
    9b20:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9b24:	e0fffe17 	ldw	r3,-8(fp)
    9b28:	00bfff84 	movi	r2,-2
    9b2c:	1884703a 	and	r2,r3,r2
    9b30:	1001703a 	wrctl	status,r2
  return context;
    9b34:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
    9b38:	e0bfff15 	stw	r2,-4(fp)
    *perr = OS_ERR_NONE;
    9b3c:	e0bffa17 	ldw	r2,-24(fp)
    9b40:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
    9b44:	e0bffc17 	ldw	r2,-16(fp)
    9b48:	1080020b 	ldhu	r2,8(r2)
    9b4c:	10bfffcc 	andi	r2,r2,65535
    9b50:	10000426 	beq	r2,zero,9b64 <OSSemSet+0xac>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
    9b54:	e0bffc17 	ldw	r2,-16(fp)
    9b58:	e0fffb0b 	ldhu	r3,-20(fp)
    9b5c:	10c0020d 	sth	r3,8(r2)
    9b60:	00000b06 	br	9b90 <OSSemSet+0xd8>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
    9b64:	e0bffc17 	ldw	r2,-16(fp)
    9b68:	10800283 	ldbu	r2,10(r2)
    9b6c:	10803fcc 	andi	r2,r2,255
    9b70:	1000041e 	bne	r2,zero,9b84 <OSSemSet+0xcc>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
    9b74:	e0bffc17 	ldw	r2,-16(fp)
    9b78:	e0fffb0b 	ldhu	r3,-20(fp)
    9b7c:	10c0020d 	sth	r3,8(r2)
    9b80:	00000306 	br	9b90 <OSSemSet+0xd8>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
    9b84:	e0bffa17 	ldw	r2,-24(fp)
    9b88:	00c01244 	movi	r3,73
    9b8c:	10c00005 	stb	r3,0(r2)
    9b90:	e0bfff17 	ldw	r2,-4(fp)
    9b94:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
    9b98:	e0bffd17 	ldw	r2,-12(fp)
    9b9c:	1001703a 	wrctl	status,r2
}
    9ba0:	00000106 	br	9ba8 <OSSemSet+0xf0>
        return;
    9ba4:	0001883a 	nop
        }
    }
    OS_EXIT_CRITICAL();
}
    9ba8:	e037883a 	mov	sp,fp
    9bac:	df000017 	ldw	fp,0(sp)
    9bb0:	dec00104 	addi	sp,sp,4
    9bb4:	f800283a 	ret

00009bb8 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
    9bb8:	defff104 	addi	sp,sp,-60
    9bbc:	dfc00e15 	stw	ra,56(sp)
    9bc0:	df000d15 	stw	fp,52(sp)
    9bc4:	df000d04 	addi	fp,sp,52
    9bc8:	2005883a 	mov	r2,r4
    9bcc:	2807883a 	mov	r3,r5
    9bd0:	e0bff405 	stb	r2,-48(fp)
    9bd4:	1805883a 	mov	r2,r3
    9bd8:	e0bff305 	stb	r2,-52(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
    9bdc:	e03ffd15 	stw	zero,-12(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
    9be0:	e0bff403 	ldbu	r2,-48(fp)
    9be4:	10800530 	cmpltui	r2,r2,20
    9be8:	1000051e 	bne	r2,zero,9c00 <OSTaskChangePrio+0x48>
        if (oldprio != OS_PRIO_SELF) {
    9bec:	e0bff403 	ldbu	r2,-48(fp)
    9bf0:	10803fe0 	cmpeqi	r2,r2,255
    9bf4:	1000021e 	bne	r2,zero,9c00 <OSTaskChangePrio+0x48>
            return (OS_ERR_PRIO_INVALID);
    9bf8:	00800a84 	movi	r2,42
    9bfc:	00011a06 	br	a068 <OSTaskChangePrio+0x4b0>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
    9c00:	e0bff303 	ldbu	r2,-52(fp)
    9c04:	10800530 	cmpltui	r2,r2,20
    9c08:	1000021e 	bne	r2,zero,9c14 <OSTaskChangePrio+0x5c>
        return (OS_ERR_PRIO_INVALID);
    9c0c:	00800a84 	movi	r2,42
    9c10:	00011506 	br	a068 <OSTaskChangePrio+0x4b0>
  NIOS2_READ_STATUS (context);
    9c14:	0005303a 	rdctl	r2,status
    9c18:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9c1c:	e0fff917 	ldw	r3,-28(fp)
    9c20:	00bfff84 	movi	r2,-2
    9c24:	1884703a 	and	r2,r3,r2
    9c28:	1001703a 	wrctl	status,r2
  return context;
    9c2c:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    9c30:	e0bffd15 	stw	r2,-12(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
    9c34:	e0bff303 	ldbu	r2,-52(fp)
    9c38:	100690ba 	slli	r3,r2,2
    9c3c:	008000b4 	movhi	r2,2
    9c40:	1885883a 	add	r2,r3,r2
    9c44:	10a57d17 	ldw	r2,-27148(r2)
    9c48:	10000726 	beq	r2,zero,9c68 <OSTaskChangePrio+0xb0>
    9c4c:	e0bffd17 	ldw	r2,-12(fp)
    9c50:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
    9c54:	e0bff817 	ldw	r2,-32(fp)
    9c58:	1001703a 	wrctl	status,r2
}
    9c5c:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
    9c60:	00800a04 	movi	r2,40
    9c64:	00010006 	br	a068 <OSTaskChangePrio+0x4b0>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
    9c68:	e0bff403 	ldbu	r2,-48(fp)
    9c6c:	10803fd8 	cmpnei	r2,r2,255
    9c70:	1000031e 	bne	r2,zero,9c80 <OSTaskChangePrio+0xc8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
    9c74:	d0a7c317 	ldw	r2,-24820(gp)
    9c78:	10800c83 	ldbu	r2,50(r2)
    9c7c:	e0bff405 	stb	r2,-48(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
    9c80:	e0bff403 	ldbu	r2,-48(fp)
    9c84:	100690ba 	slli	r3,r2,2
    9c88:	008000b4 	movhi	r2,2
    9c8c:	1885883a 	add	r2,r3,r2
    9c90:	10a57d17 	ldw	r2,-27148(r2)
    9c94:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
    9c98:	e0bffc17 	ldw	r2,-16(fp)
    9c9c:	1000071e 	bne	r2,zero,9cbc <OSTaskChangePrio+0x104>
    9ca0:	e0bffd17 	ldw	r2,-12(fp)
    9ca4:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context);
    9ca8:	e0bff717 	ldw	r2,-36(fp)
    9cac:	1001703a 	wrctl	status,r2
}
    9cb0:	0001883a 	nop
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
    9cb4:	00800a44 	movi	r2,41
    9cb8:	0000eb06 	br	a068 <OSTaskChangePrio+0x4b0>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
    9cbc:	e0bffc17 	ldw	r2,-16(fp)
    9cc0:	10800058 	cmpnei	r2,r2,1
    9cc4:	1000071e 	bne	r2,zero,9ce4 <OSTaskChangePrio+0x12c>
    9cc8:	e0bffd17 	ldw	r2,-12(fp)
    9ccc:	e0bff615 	stw	r2,-40(fp)
  NIOS2_WRITE_STATUS (context);
    9cd0:	e0bff617 	ldw	r2,-40(fp)
    9cd4:	1001703a 	wrctl	status,r2
}
    9cd8:	0001883a 	nop
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
    9cdc:	008010c4 	movi	r2,67
    9ce0:	0000e106 	br	a068 <OSTaskChangePrio+0x4b0>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
    9ce4:	e0bff303 	ldbu	r2,-52(fp)
    9ce8:	1004d0fa 	srli	r2,r2,3
    9cec:	e0bffbc5 	stb	r2,-17(fp)
    x_new                 = (INT8U)(newprio & 0x07);
    9cf0:	e0bff303 	ldbu	r2,-52(fp)
    9cf4:	108001cc 	andi	r2,r2,7
    9cf8:	e0bffb85 	stb	r2,-18(fp)
    bity_new              = (INT8U)(1 << y_new);
    9cfc:	e0bffbc3 	ldbu	r2,-17(fp)
    9d00:	00c00044 	movi	r3,1
    9d04:	1884983a 	sll	r2,r3,r2
    9d08:	e0bffb45 	stb	r2,-19(fp)
    bitx_new              = (INT8U)(1 << x_new);
    9d0c:	e0bffb83 	ldbu	r2,-18(fp)
    9d10:	00c00044 	movi	r3,1
    9d14:	1884983a 	sll	r2,r3,r2
    9d18:	e0bffb05 	stb	r2,-20(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
    9d1c:	e0bff403 	ldbu	r2,-48(fp)
    9d20:	100690ba 	slli	r3,r2,2
    9d24:	008000b4 	movhi	r2,2
    9d28:	1885883a 	add	r2,r3,r2
    9d2c:	10257d15 	stw	zero,-27148(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
    9d30:	e0bff303 	ldbu	r2,-52(fp)
    9d34:	100890ba 	slli	r4,r2,2
    9d38:	e0fffc17 	ldw	r3,-16(fp)
    9d3c:	008000b4 	movhi	r2,2
    9d40:	2085883a 	add	r2,r4,r2
    9d44:	10e57d15 	stw	r3,-27148(r2)
    y_old                 =  ptcb->OSTCBY;
    9d48:	e0bffc17 	ldw	r2,-16(fp)
    9d4c:	10800d03 	ldbu	r2,52(r2)
    9d50:	e0bffac5 	stb	r2,-21(fp)
    bity_old              =  ptcb->OSTCBBitY;
    9d54:	e0bffc17 	ldw	r2,-16(fp)
    9d58:	10800d83 	ldbu	r2,54(r2)
    9d5c:	e0bffa85 	stb	r2,-22(fp)
    bitx_old              =  ptcb->OSTCBBitX;
    9d60:	e0bffc17 	ldw	r2,-16(fp)
    9d64:	10800d43 	ldbu	r2,53(r2)
    9d68:	e0bffa45 	stb	r2,-23(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
    9d6c:	e0fffac3 	ldbu	r3,-21(fp)
    9d70:	d0a7c084 	addi	r2,gp,-24830
    9d74:	1885883a 	add	r2,r3,r2
    9d78:	10800003 	ldbu	r2,0(r2)
    9d7c:	e0fffa43 	ldbu	r3,-23(fp)
    9d80:	1884703a 	and	r2,r3,r2
    9d84:	10803fcc 	andi	r2,r2,255
    9d88:	10002826 	beq	r2,zero,9e2c <OSTaskChangePrio+0x274>
         OSRdyTbl[y_old] &= ~bitx_old;
    9d8c:	e0fffac3 	ldbu	r3,-21(fp)
    9d90:	d0a7c084 	addi	r2,gp,-24830
    9d94:	1885883a 	add	r2,r3,r2
    9d98:	10800003 	ldbu	r2,0(r2)
    9d9c:	1007883a 	mov	r3,r2
    9da0:	e0bffa43 	ldbu	r2,-23(fp)
    9da4:	0084303a 	nor	r2,zero,r2
    9da8:	1884703a 	and	r2,r3,r2
    9dac:	e0fffac3 	ldbu	r3,-21(fp)
    9db0:	1009883a 	mov	r4,r2
    9db4:	d0a7c084 	addi	r2,gp,-24830
    9db8:	1885883a 	add	r2,r3,r2
    9dbc:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
    9dc0:	e0fffac3 	ldbu	r3,-21(fp)
    9dc4:	d0a7c084 	addi	r2,gp,-24830
    9dc8:	1885883a 	add	r2,r3,r2
    9dcc:	10800003 	ldbu	r2,0(r2)
    9dd0:	10803fcc 	andi	r2,r2,255
    9dd4:	1000061e 	bne	r2,zero,9df0 <OSTaskChangePrio+0x238>
             OSRdyGrp &= ~bity_old;
    9dd8:	e0bffa83 	ldbu	r2,-22(fp)
    9ddc:	0084303a 	nor	r2,zero,r2
    9de0:	1007883a 	mov	r3,r2
    9de4:	d0a7c043 	ldbu	r2,-24831(gp)
    9de8:	1884703a 	and	r2,r3,r2
    9dec:	d0a7c045 	stb	r2,-24831(gp)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
    9df0:	d0a7c043 	ldbu	r2,-24831(gp)
    9df4:	e0fffb43 	ldbu	r3,-19(fp)
    9df8:	1884b03a 	or	r2,r3,r2
    9dfc:	d0a7c045 	stb	r2,-24831(gp)
         OSRdyTbl[y_new] |= bitx_new;
    9e00:	e0fffbc3 	ldbu	r3,-17(fp)
    9e04:	d0a7c084 	addi	r2,gp,-24830
    9e08:	1885883a 	add	r2,r3,r2
    9e0c:	10800003 	ldbu	r2,0(r2)
    9e10:	e0fffbc3 	ldbu	r3,-17(fp)
    9e14:	e13ffb03 	ldbu	r4,-20(fp)
    9e18:	2084b03a 	or	r2,r4,r2
    9e1c:	1009883a 	mov	r4,r2
    9e20:	d0a7c084 	addi	r2,gp,-24830
    9e24:	1885883a 	add	r2,r3,r2
    9e28:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
    9e2c:	e0bffc17 	ldw	r2,-16(fp)
    9e30:	10800717 	ldw	r2,28(r2)
    9e34:	e0bfff15 	stw	r2,-4(fp)
    if (pevent != (OS_EVENT *)0) {
    9e38:	e0bfff17 	ldw	r2,-4(fp)
    9e3c:	10002f26 	beq	r2,zero,9efc <OSTaskChangePrio+0x344>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
    9e40:	e0bffac3 	ldbu	r2,-21(fp)
    9e44:	e0ffff17 	ldw	r3,-4(fp)
    9e48:	1885883a 	add	r2,r3,r2
    9e4c:	108002c3 	ldbu	r2,11(r2)
    9e50:	1007883a 	mov	r3,r2
    9e54:	e0bffa43 	ldbu	r2,-23(fp)
    9e58:	0084303a 	nor	r2,zero,r2
    9e5c:	1884703a 	and	r2,r3,r2
    9e60:	1007883a 	mov	r3,r2
    9e64:	e0bffac3 	ldbu	r2,-21(fp)
    9e68:	1809883a 	mov	r4,r3
    9e6c:	e0ffff17 	ldw	r3,-4(fp)
    9e70:	1885883a 	add	r2,r3,r2
    9e74:	110002c5 	stb	r4,11(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
    9e78:	e0bffac3 	ldbu	r2,-21(fp)
    9e7c:	e0ffff17 	ldw	r3,-4(fp)
    9e80:	1885883a 	add	r2,r3,r2
    9e84:	108002c3 	ldbu	r2,11(r2)
    9e88:	10803fcc 	andi	r2,r2,255
    9e8c:	1000091e 	bne	r2,zero,9eb4 <OSTaskChangePrio+0x2fc>
            pevent->OSEventGrp    &= ~bity_old;
    9e90:	e0bfff17 	ldw	r2,-4(fp)
    9e94:	10800283 	ldbu	r2,10(r2)
    9e98:	1007883a 	mov	r3,r2
    9e9c:	e0bffa83 	ldbu	r2,-22(fp)
    9ea0:	0084303a 	nor	r2,zero,r2
    9ea4:	1884703a 	and	r2,r3,r2
    9ea8:	1007883a 	mov	r3,r2
    9eac:	e0bfff17 	ldw	r2,-4(fp)
    9eb0:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
    9eb4:	e0bfff17 	ldw	r2,-4(fp)
    9eb8:	10800283 	ldbu	r2,10(r2)
    9ebc:	e0fffb43 	ldbu	r3,-19(fp)
    9ec0:	1884b03a 	or	r2,r3,r2
    9ec4:	1007883a 	mov	r3,r2
    9ec8:	e0bfff17 	ldw	r2,-4(fp)
    9ecc:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
    9ed0:	e0bffbc3 	ldbu	r2,-17(fp)
    9ed4:	e0ffff17 	ldw	r3,-4(fp)
    9ed8:	1885883a 	add	r2,r3,r2
    9edc:	10c002c3 	ldbu	r3,11(r2)
    9ee0:	e0bffbc3 	ldbu	r2,-17(fp)
    9ee4:	e13ffb03 	ldbu	r4,-20(fp)
    9ee8:	20c6b03a 	or	r3,r4,r3
    9eec:	1809883a 	mov	r4,r3
    9ef0:	e0ffff17 	ldw	r3,-4(fp)
    9ef4:	1885883a 	add	r2,r3,r2
    9ef8:	110002c5 	stb	r4,11(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
    9efc:	e0bffc17 	ldw	r2,-16(fp)
    9f00:	10800817 	ldw	r2,32(r2)
    9f04:	10003e26 	beq	r2,zero,a000 <OSTaskChangePrio+0x448>
        pevents =  ptcb->OSTCBEventMultiPtr;
    9f08:	e0bffc17 	ldw	r2,-16(fp)
    9f0c:	10800817 	ldw	r2,32(r2)
    9f10:	e0bffe15 	stw	r2,-8(fp)
        pevent  = *pevents;
    9f14:	e0bffe17 	ldw	r2,-8(fp)
    9f18:	10800017 	ldw	r2,0(r2)
    9f1c:	e0bfff15 	stw	r2,-4(fp)
        while (pevent != (OS_EVENT *)0) {
    9f20:	00003506 	br	9ff8 <OSTaskChangePrio+0x440>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
    9f24:	e0bffac3 	ldbu	r2,-21(fp)
    9f28:	e0ffff17 	ldw	r3,-4(fp)
    9f2c:	1885883a 	add	r2,r3,r2
    9f30:	108002c3 	ldbu	r2,11(r2)
    9f34:	1007883a 	mov	r3,r2
    9f38:	e0bffa43 	ldbu	r2,-23(fp)
    9f3c:	0084303a 	nor	r2,zero,r2
    9f40:	1884703a 	and	r2,r3,r2
    9f44:	1007883a 	mov	r3,r2
    9f48:	e0bffac3 	ldbu	r2,-21(fp)
    9f4c:	1809883a 	mov	r4,r3
    9f50:	e0ffff17 	ldw	r3,-4(fp)
    9f54:	1885883a 	add	r2,r3,r2
    9f58:	110002c5 	stb	r4,11(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
    9f5c:	e0bffac3 	ldbu	r2,-21(fp)
    9f60:	e0ffff17 	ldw	r3,-4(fp)
    9f64:	1885883a 	add	r2,r3,r2
    9f68:	108002c3 	ldbu	r2,11(r2)
    9f6c:	10803fcc 	andi	r2,r2,255
    9f70:	1000091e 	bne	r2,zero,9f98 <OSTaskChangePrio+0x3e0>
                pevent->OSEventGrp    &= ~bity_old;
    9f74:	e0bfff17 	ldw	r2,-4(fp)
    9f78:	10800283 	ldbu	r2,10(r2)
    9f7c:	1007883a 	mov	r3,r2
    9f80:	e0bffa83 	ldbu	r2,-22(fp)
    9f84:	0084303a 	nor	r2,zero,r2
    9f88:	1884703a 	and	r2,r3,r2
    9f8c:	1007883a 	mov	r3,r2
    9f90:	e0bfff17 	ldw	r2,-4(fp)
    9f94:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
    9f98:	e0bfff17 	ldw	r2,-4(fp)
    9f9c:	10800283 	ldbu	r2,10(r2)
    9fa0:	e0fffb43 	ldbu	r3,-19(fp)
    9fa4:	1884b03a 	or	r2,r3,r2
    9fa8:	1007883a 	mov	r3,r2
    9fac:	e0bfff17 	ldw	r2,-4(fp)
    9fb0:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
    9fb4:	e0bffbc3 	ldbu	r2,-17(fp)
    9fb8:	e0ffff17 	ldw	r3,-4(fp)
    9fbc:	1885883a 	add	r2,r3,r2
    9fc0:	10c002c3 	ldbu	r3,11(r2)
    9fc4:	e0bffbc3 	ldbu	r2,-17(fp)
    9fc8:	e13ffb03 	ldbu	r4,-20(fp)
    9fcc:	20c6b03a 	or	r3,r4,r3
    9fd0:	1809883a 	mov	r4,r3
    9fd4:	e0ffff17 	ldw	r3,-4(fp)
    9fd8:	1885883a 	add	r2,r3,r2
    9fdc:	110002c5 	stb	r4,11(r2)
            pevents++;
    9fe0:	e0bffe17 	ldw	r2,-8(fp)
    9fe4:	10800104 	addi	r2,r2,4
    9fe8:	e0bffe15 	stw	r2,-8(fp)
            pevent                     = *pevents;
    9fec:	e0bffe17 	ldw	r2,-8(fp)
    9ff0:	10800017 	ldw	r2,0(r2)
    9ff4:	e0bfff15 	stw	r2,-4(fp)
        while (pevent != (OS_EVENT *)0) {
    9ff8:	e0bfff17 	ldw	r2,-4(fp)
    9ffc:	103fc91e 	bne	r2,zero,9f24 <OSTaskChangePrio+0x36c>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
    a000:	e0bffc17 	ldw	r2,-16(fp)
    a004:	e0fff303 	ldbu	r3,-52(fp)
    a008:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
    a00c:	e0bffc17 	ldw	r2,-16(fp)
    a010:	e0fffbc3 	ldbu	r3,-17(fp)
    a014:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
    a018:	e0bffc17 	ldw	r2,-16(fp)
    a01c:	e0fffb83 	ldbu	r3,-18(fp)
    a020:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
    a024:	e0bffc17 	ldw	r2,-16(fp)
    a028:	e0fffb43 	ldbu	r3,-19(fp)
    a02c:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
    a030:	e0bffc17 	ldw	r2,-16(fp)
    a034:	e0fffb03 	ldbu	r3,-20(fp)
    a038:	10c00d45 	stb	r3,53(r2)
    a03c:	e0bffd17 	ldw	r2,-12(fp)
    a040:	e0bff515 	stw	r2,-44(fp)
  NIOS2_WRITE_STATUS (context);
    a044:	e0bff517 	ldw	r2,-44(fp)
    a048:	1001703a 	wrctl	status,r2
}
    a04c:	0001883a 	nop
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
    a050:	d0a7c143 	ldbu	r2,-24827(gp)
    a054:	10803fcc 	andi	r2,r2,255
    a058:	10800058 	cmpnei	r2,r2,1
    a05c:	1000011e 	bne	r2,zero,a064 <OSTaskChangePrio+0x4ac>
        OS_Sched();                                         /* Find new highest priority task          */
    a060:	00058300 	call	5830 <OS_Sched>
    }
    return (OS_ERR_NONE);
    a064:	0005883a 	mov	r2,zero
}
    a068:	e037883a 	mov	sp,fp
    a06c:	dfc00117 	ldw	ra,4(sp)
    a070:	df000017 	ldw	fp,0(sp)
    a074:	dec00204 	addi	sp,sp,8
    a078:	f800283a 	ret

0000a07c <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
    a07c:	deffee04 	addi	sp,sp,-72
    a080:	dfc01115 	stw	ra,68(sp)
    a084:	df001015 	stw	fp,64(sp)
    a088:	df001004 	addi	fp,sp,64
    a08c:	e13ff615 	stw	r4,-40(fp)
    a090:	e17ff515 	stw	r5,-44(fp)
    a094:	e1bff415 	stw	r6,-48(fp)
    a098:	3805883a 	mov	r2,r7
    a09c:	e0bff305 	stb	r2,-52(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
    a0a0:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
    a0a4:	e0bff303 	ldbu	r2,-52(fp)
    a0a8:	10800570 	cmpltui	r2,r2,21
    a0ac:	1000021e 	bne	r2,zero,a0b8 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
    a0b0:	00800a84 	movi	r2,42
    a0b4:	00005506 	br	a20c <OSTaskCreate+0x190>
  NIOS2_READ_STATUS (context);
    a0b8:	0005303a 	rdctl	r2,status
    a0bc:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a0c0:	e0fffc17 	ldw	r3,-16(fp)
    a0c4:	00bfff84 	movi	r2,-2
    a0c8:	1884703a 	and	r2,r3,r2
    a0cc:	1001703a 	wrctl	status,r2
  return context;
    a0d0:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    a0d4:	e0bfff15 	stw	r2,-4(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
    a0d8:	d0a7bf43 	ldbu	r2,-24835(gp)
    a0dc:	10803fcc 	andi	r2,r2,255
    a0e0:	10000726 	beq	r2,zero,a100 <OSTaskCreate+0x84>
    a0e4:	e0bfff17 	ldw	r2,-4(fp)
    a0e8:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    a0ec:	e0bffb17 	ldw	r2,-20(fp)
    a0f0:	1001703a 	wrctl	status,r2
}
    a0f4:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
    a0f8:	00800f04 	movi	r2,60
    a0fc:	00004306 	br	a20c <OSTaskCreate+0x190>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
    a100:	e0bff303 	ldbu	r2,-52(fp)
    a104:	100690ba 	slli	r3,r2,2
    a108:	008000b4 	movhi	r2,2
    a10c:	1885883a 	add	r2,r3,r2
    a110:	10a57d17 	ldw	r2,-27148(r2)
    a114:	1000371e 	bne	r2,zero,a1f4 <OSTaskCreate+0x178>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
    a118:	e0bff303 	ldbu	r2,-52(fp)
    a11c:	100890ba 	slli	r4,r2,2
    a120:	00c00044 	movi	r3,1
    a124:	008000b4 	movhi	r2,2
    a128:	2085883a 	add	r2,r4,r2
    a12c:	10e57d15 	stw	r3,-27148(r2)
    a130:	e0bfff17 	ldw	r2,-4(fp)
    a134:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
    a138:	e0bffa17 	ldw	r2,-24(fp)
    a13c:	1001703a 	wrctl	status,r2
}
    a140:	0001883a 	nop
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
    a144:	000f883a 	mov	r7,zero
    a148:	e1bff417 	ldw	r6,-48(fp)
    a14c:	e17ff517 	ldw	r5,-44(fp)
    a150:	e13ff617 	ldw	r4,-40(fp)
    a154:	000ecc40 	call	ecc4 <OSTaskStkInit>
    a158:	e0bffe15 	stw	r2,-8(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
    a15c:	e0bff303 	ldbu	r2,-52(fp)
    a160:	d8000215 	stw	zero,8(sp)
    a164:	d8000115 	stw	zero,4(sp)
    a168:	d8000015 	stw	zero,0(sp)
    a16c:	000f883a 	mov	r7,zero
    a170:	000d883a 	mov	r6,zero
    a174:	e17ffe17 	ldw	r5,-8(fp)
    a178:	1009883a 	mov	r4,r2
    a17c:	0005c180 	call	5c18 <OS_TCBInit>
    a180:	e0bffdc5 	stb	r2,-9(fp)
        if (err == OS_ERR_NONE) {
    a184:	e0bffdc3 	ldbu	r2,-9(fp)
    a188:	1000061e 	bne	r2,zero,a1a4 <OSTaskCreate+0x128>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
    a18c:	d0a7c143 	ldbu	r2,-24827(gp)
    a190:	10803fcc 	andi	r2,r2,255
    a194:	10800058 	cmpnei	r2,r2,1
    a198:	1000141e 	bne	r2,zero,a1ec <OSTaskCreate+0x170>
                OS_Sched();
    a19c:	00058300 	call	5830 <OS_Sched>
    a1a0:	00001206 	br	a1ec <OSTaskCreate+0x170>
  NIOS2_READ_STATUS (context);
    a1a4:	0005303a 	rdctl	r2,status
    a1a8:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a1ac:	e0fff817 	ldw	r3,-32(fp)
    a1b0:	00bfff84 	movi	r2,-2
    a1b4:	1884703a 	and	r2,r3,r2
    a1b8:	1001703a 	wrctl	status,r2
  return context;
    a1bc:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
    a1c0:	e0bfff15 	stw	r2,-4(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
    a1c4:	e0bff303 	ldbu	r2,-52(fp)
    a1c8:	100690ba 	slli	r3,r2,2
    a1cc:	008000b4 	movhi	r2,2
    a1d0:	1885883a 	add	r2,r3,r2
    a1d4:	10257d15 	stw	zero,-27148(r2)
    a1d8:	e0bfff17 	ldw	r2,-4(fp)
    a1dc:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
    a1e0:	e0bff917 	ldw	r2,-28(fp)
    a1e4:	1001703a 	wrctl	status,r2
}
    a1e8:	0001883a 	nop
            OS_EXIT_CRITICAL();
        }
        return (err);
    a1ec:	e0bffdc3 	ldbu	r2,-9(fp)
    a1f0:	00000606 	br	a20c <OSTaskCreate+0x190>
    a1f4:	e0bfff17 	ldw	r2,-4(fp)
    a1f8:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context);
    a1fc:	e0bff717 	ldw	r2,-36(fp)
    a200:	1001703a 	wrctl	status,r2
}
    a204:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
    a208:	00800a04 	movi	r2,40
}
    a20c:	e037883a 	mov	sp,fp
    a210:	dfc00117 	ldw	ra,4(sp)
    a214:	df000017 	ldw	fp,0(sp)
    a218:	dec00204 	addi	sp,sp,8
    a21c:	f800283a 	ret

0000a220 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
    a220:	deffec04 	addi	sp,sp,-80
    a224:	dfc01315 	stw	ra,76(sp)
    a228:	df001215 	stw	fp,72(sp)
    a22c:	df001204 	addi	fp,sp,72
    a230:	e13ff615 	stw	r4,-40(fp)
    a234:	e17ff515 	stw	r5,-44(fp)
    a238:	e1bff415 	stw	r6,-48(fp)
    a23c:	3809883a 	mov	r4,r7
    a240:	e0c00217 	ldw	r3,8(fp)
    a244:	e0800617 	ldw	r2,24(fp)
    a248:	e13ff305 	stb	r4,-52(fp)
    a24c:	e0fff20d 	sth	r3,-56(fp)
    a250:	e0bff10d 	sth	r2,-60(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
    a254:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
    a258:	e0bff303 	ldbu	r2,-52(fp)
    a25c:	10800570 	cmpltui	r2,r2,21
    a260:	1000021e 	bne	r2,zero,a26c <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
    a264:	00800a84 	movi	r2,42
    a268:	00005f06 	br	a3e8 <OSTaskCreateExt+0x1c8>
  NIOS2_READ_STATUS (context);
    a26c:	0005303a 	rdctl	r2,status
    a270:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a274:	e0fffc17 	ldw	r3,-16(fp)
    a278:	00bfff84 	movi	r2,-2
    a27c:	1884703a 	and	r2,r3,r2
    a280:	1001703a 	wrctl	status,r2
  return context;
    a284:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    a288:	e0bfff15 	stw	r2,-4(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
    a28c:	d0a7bf43 	ldbu	r2,-24835(gp)
    a290:	10803fcc 	andi	r2,r2,255
    a294:	10000726 	beq	r2,zero,a2b4 <OSTaskCreateExt+0x94>
    a298:	e0bfff17 	ldw	r2,-4(fp)
    a29c:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    a2a0:	e0bffb17 	ldw	r2,-20(fp)
    a2a4:	1001703a 	wrctl	status,r2
}
    a2a8:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
    a2ac:	00800f04 	movi	r2,60
    a2b0:	00004d06 	br	a3e8 <OSTaskCreateExt+0x1c8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
    a2b4:	e0bff303 	ldbu	r2,-52(fp)
    a2b8:	100690ba 	slli	r3,r2,2
    a2bc:	008000b4 	movhi	r2,2
    a2c0:	1885883a 	add	r2,r3,r2
    a2c4:	10a57d17 	ldw	r2,-27148(r2)
    a2c8:	1000411e 	bne	r2,zero,a3d0 <OSTaskCreateExt+0x1b0>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
    a2cc:	e0bff303 	ldbu	r2,-52(fp)
    a2d0:	100890ba 	slli	r4,r2,2
    a2d4:	00c00044 	movi	r3,1
    a2d8:	008000b4 	movhi	r2,2
    a2dc:	2085883a 	add	r2,r4,r2
    a2e0:	10e57d15 	stw	r3,-27148(r2)
    a2e4:	e0bfff17 	ldw	r2,-4(fp)
    a2e8:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
    a2ec:	e0bffa17 	ldw	r2,-24(fp)
    a2f0:	1001703a 	wrctl	status,r2
}
    a2f4:	0001883a 	nop
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
    a2f8:	e0bff10b 	ldhu	r2,-60(fp)
    a2fc:	100d883a 	mov	r6,r2
    a300:	e1400417 	ldw	r5,16(fp)
    a304:	e1000317 	ldw	r4,12(fp)
    a308:	000b2980 	call	b298 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
    a30c:	e0bff10b 	ldhu	r2,-60(fp)
    a310:	100f883a 	mov	r7,r2
    a314:	e1bff417 	ldw	r6,-48(fp)
    a318:	e17ff517 	ldw	r5,-44(fp)
    a31c:	e13ff617 	ldw	r4,-40(fp)
    a320:	000ecc40 	call	ecc4 <OSTaskStkInit>
    a324:	e0bffe15 	stw	r2,-8(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
    a328:	e0fff303 	ldbu	r3,-52(fp)
    a32c:	e13ff20b 	ldhu	r4,-56(fp)
    a330:	e0bff10b 	ldhu	r2,-60(fp)
    a334:	d8800215 	stw	r2,8(sp)
    a338:	e0800517 	ldw	r2,20(fp)
    a33c:	d8800115 	stw	r2,4(sp)
    a340:	e0800417 	ldw	r2,16(fp)
    a344:	d8800015 	stw	r2,0(sp)
    a348:	200f883a 	mov	r7,r4
    a34c:	e1800317 	ldw	r6,12(fp)
    a350:	e17ffe17 	ldw	r5,-8(fp)
    a354:	1809883a 	mov	r4,r3
    a358:	0005c180 	call	5c18 <OS_TCBInit>
    a35c:	e0bffdc5 	stb	r2,-9(fp)
        if (err == OS_ERR_NONE) {
    a360:	e0bffdc3 	ldbu	r2,-9(fp)
    a364:	1000061e 	bne	r2,zero,a380 <OSTaskCreateExt+0x160>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
    a368:	d0a7c143 	ldbu	r2,-24827(gp)
    a36c:	10803fcc 	andi	r2,r2,255
    a370:	10800058 	cmpnei	r2,r2,1
    a374:	1000141e 	bne	r2,zero,a3c8 <OSTaskCreateExt+0x1a8>
                OS_Sched();
    a378:	00058300 	call	5830 <OS_Sched>
    a37c:	00001206 	br	a3c8 <OSTaskCreateExt+0x1a8>
  NIOS2_READ_STATUS (context);
    a380:	0005303a 	rdctl	r2,status
    a384:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a388:	e0fff817 	ldw	r3,-32(fp)
    a38c:	00bfff84 	movi	r2,-2
    a390:	1884703a 	and	r2,r3,r2
    a394:	1001703a 	wrctl	status,r2
  return context;
    a398:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
    a39c:	e0bfff15 	stw	r2,-4(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
    a3a0:	e0bff303 	ldbu	r2,-52(fp)
    a3a4:	100690ba 	slli	r3,r2,2
    a3a8:	008000b4 	movhi	r2,2
    a3ac:	1885883a 	add	r2,r3,r2
    a3b0:	10257d15 	stw	zero,-27148(r2)
    a3b4:	e0bfff17 	ldw	r2,-4(fp)
    a3b8:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
    a3bc:	e0bff917 	ldw	r2,-28(fp)
    a3c0:	1001703a 	wrctl	status,r2
}
    a3c4:	0001883a 	nop
            OS_EXIT_CRITICAL();
        }
        return (err);
    a3c8:	e0bffdc3 	ldbu	r2,-9(fp)
    a3cc:	00000606 	br	a3e8 <OSTaskCreateExt+0x1c8>
    a3d0:	e0bfff17 	ldw	r2,-4(fp)
    a3d4:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context);
    a3d8:	e0bff717 	ldw	r2,-36(fp)
    a3dc:	1001703a 	wrctl	status,r2
}
    a3e0:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
    a3e4:	00800a04 	movi	r2,40
}
    a3e8:	e037883a 	mov	sp,fp
    a3ec:	dfc00117 	ldw	ra,4(sp)
    a3f0:	df000017 	ldw	fp,0(sp)
    a3f4:	dec00204 	addi	sp,sp,8
    a3f8:	f800283a 	ret

0000a3fc <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
    a3fc:	defff404 	addi	sp,sp,-48
    a400:	dfc00b15 	stw	ra,44(sp)
    a404:	df000a15 	stw	fp,40(sp)
    a408:	df000a04 	addi	fp,sp,40
    a40c:	2005883a 	mov	r2,r4
    a410:	e0bff605 	stb	r2,-40(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
    a414:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
    a418:	d0a7bf43 	ldbu	r2,-24835(gp)
    a41c:	10803fcc 	andi	r2,r2,255
    a420:	10000226 	beq	r2,zero,a42c <OSTaskDel+0x30>
        return (OS_ERR_TASK_DEL_ISR);
    a424:	00801004 	movi	r2,64
    a428:	0000c006 	br	a72c <OSTaskDel+0x330>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
    a42c:	e0bff603 	ldbu	r2,-40(fp)
    a430:	10800518 	cmpnei	r2,r2,20
    a434:	1000021e 	bne	r2,zero,a440 <OSTaskDel+0x44>
        return (OS_ERR_TASK_DEL_IDLE);
    a438:	00800f84 	movi	r2,62
    a43c:	0000bb06 	br	a72c <OSTaskDel+0x330>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
    a440:	e0bff603 	ldbu	r2,-40(fp)
    a444:	10800530 	cmpltui	r2,r2,20
    a448:	1000051e 	bne	r2,zero,a460 <OSTaskDel+0x64>
        if (prio != OS_PRIO_SELF) {
    a44c:	e0bff603 	ldbu	r2,-40(fp)
    a450:	10803fe0 	cmpeqi	r2,r2,255
    a454:	1000021e 	bne	r2,zero,a460 <OSTaskDel+0x64>
            return (OS_ERR_PRIO_INVALID);
    a458:	00800a84 	movi	r2,42
    a45c:	0000b306 	br	a72c <OSTaskDel+0x330>
  NIOS2_READ_STATUS (context);
    a460:	0005303a 	rdctl	r2,status
    a464:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a468:	e0fffc17 	ldw	r3,-16(fp)
    a46c:	00bfff84 	movi	r2,-2
    a470:	1884703a 	and	r2,r3,r2
    a474:	1001703a 	wrctl	status,r2
  return context;
    a478:	e0bffc17 	ldw	r2,-16(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
    a47c:	e0bfff15 	stw	r2,-4(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
    a480:	e0bff603 	ldbu	r2,-40(fp)
    a484:	10803fd8 	cmpnei	r2,r2,255
    a488:	1000031e 	bne	r2,zero,a498 <OSTaskDel+0x9c>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
    a48c:	d0a7c317 	ldw	r2,-24820(gp)
    a490:	10800c83 	ldbu	r2,50(r2)
    a494:	e0bff605 	stb	r2,-40(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    a498:	e0bff603 	ldbu	r2,-40(fp)
    a49c:	100690ba 	slli	r3,r2,2
    a4a0:	008000b4 	movhi	r2,2
    a4a4:	1885883a 	add	r2,r3,r2
    a4a8:	10a57d17 	ldw	r2,-27148(r2)
    a4ac:	e0bffe15 	stw	r2,-8(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
    a4b0:	e0bffe17 	ldw	r2,-8(fp)
    a4b4:	1000071e 	bne	r2,zero,a4d4 <OSTaskDel+0xd8>
    a4b8:	e0bfff17 	ldw	r2,-4(fp)
    a4bc:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    a4c0:	e0bffb17 	ldw	r2,-20(fp)
    a4c4:	1001703a 	wrctl	status,r2
}
    a4c8:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    a4cc:	008010c4 	movi	r2,67
    a4d0:	00009606 	br	a72c <OSTaskDel+0x330>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
    a4d4:	e0bffe17 	ldw	r2,-8(fp)
    a4d8:	10800058 	cmpnei	r2,r2,1
    a4dc:	1000071e 	bne	r2,zero,a4fc <OSTaskDel+0x100>
    a4e0:	e0bfff17 	ldw	r2,-4(fp)
    a4e4:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
    a4e8:	e0bffa17 	ldw	r2,-24(fp)
    a4ec:	1001703a 	wrctl	status,r2
}
    a4f0:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
    a4f4:	00800f44 	movi	r2,61
    a4f8:	00008c06 	br	a72c <OSTaskDel+0x330>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
    a4fc:	e0bffe17 	ldw	r2,-8(fp)
    a500:	10800d03 	ldbu	r2,52(r2)
    a504:	10c03fcc 	andi	r3,r2,255
    a508:	d0a7c084 	addi	r2,gp,-24830
    a50c:	1885883a 	add	r2,r3,r2
    a510:	10800003 	ldbu	r2,0(r2)
    a514:	1007883a 	mov	r3,r2
    a518:	e0bffe17 	ldw	r2,-8(fp)
    a51c:	10800d43 	ldbu	r2,53(r2)
    a520:	0084303a 	nor	r2,zero,r2
    a524:	1884703a 	and	r2,r3,r2
    a528:	1009883a 	mov	r4,r2
    a52c:	e0bffe17 	ldw	r2,-8(fp)
    a530:	10800d03 	ldbu	r2,52(r2)
    a534:	10c03fcc 	andi	r3,r2,255
    a538:	d0a7c084 	addi	r2,gp,-24830
    a53c:	1885883a 	add	r2,r3,r2
    a540:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
    a544:	e0bffe17 	ldw	r2,-8(fp)
    a548:	10800d03 	ldbu	r2,52(r2)
    a54c:	10c03fcc 	andi	r3,r2,255
    a550:	d0a7c084 	addi	r2,gp,-24830
    a554:	1885883a 	add	r2,r3,r2
    a558:	10800003 	ldbu	r2,0(r2)
    a55c:	10803fcc 	andi	r2,r2,255
    a560:	1000071e 	bne	r2,zero,a580 <OSTaskDel+0x184>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
    a564:	e0bffe17 	ldw	r2,-8(fp)
    a568:	10800d83 	ldbu	r2,54(r2)
    a56c:	0084303a 	nor	r2,zero,r2
    a570:	1007883a 	mov	r3,r2
    a574:	d0a7c043 	ldbu	r2,-24831(gp)
    a578:	1884703a 	and	r2,r3,r2
    a57c:	d0a7c045 	stb	r2,-24831(gp)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
    a580:	e0bffe17 	ldw	r2,-8(fp)
    a584:	10800717 	ldw	r2,28(r2)
    a588:	10000526 	beq	r2,zero,a5a0 <OSTaskDel+0x1a4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
    a58c:	e0bffe17 	ldw	r2,-8(fp)
    a590:	10800717 	ldw	r2,28(r2)
    a594:	100b883a 	mov	r5,r2
    a598:	e13ffe17 	ldw	r4,-8(fp)
    a59c:	00051d40 	call	51d4 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
    a5a0:	e0bffe17 	ldw	r2,-8(fp)
    a5a4:	10800817 	ldw	r2,32(r2)
    a5a8:	10000526 	beq	r2,zero,a5c0 <OSTaskDel+0x1c4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
    a5ac:	e0bffe17 	ldw	r2,-8(fp)
    a5b0:	10800817 	ldw	r2,32(r2)
    a5b4:	100b883a 	mov	r5,r2
    a5b8:	e13ffe17 	ldw	r4,-8(fp)
    a5bc:	00052840 	call	5284 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
    a5c0:	e0bffe17 	ldw	r2,-8(fp)
    a5c4:	10800a17 	ldw	r2,40(r2)
    a5c8:	e0bffd15 	stw	r2,-12(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
    a5cc:	e0bffd17 	ldw	r2,-12(fp)
    a5d0:	10000226 	beq	r2,zero,a5dc <OSTaskDel+0x1e0>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
    a5d4:	e13ffd17 	ldw	r4,-12(fp)
    a5d8:	00077a80 	call	77a8 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
    a5dc:	e0bffe17 	ldw	r2,-8(fp)
    a5e0:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
    a5e4:	e0bffe17 	ldw	r2,-8(fp)
    a5e8:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
    a5ec:	e0bffe17 	ldw	r2,-8(fp)
    a5f0:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
    a5f4:	d0a7bf83 	ldbu	r2,-24834(gp)
    a5f8:	10803fcc 	andi	r2,r2,255
    a5fc:	10803fe0 	cmpeqi	r2,r2,255
    a600:	1000031e 	bne	r2,zero,a610 <OSTaskDel+0x214>
        OSLockNesting++;
    a604:	d0a7bf83 	ldbu	r2,-24834(gp)
    a608:	10800044 	addi	r2,r2,1
    a60c:	d0a7bf85 	stb	r2,-24834(gp)
    a610:	e0bfff17 	ldw	r2,-4(fp)
    a614:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
    a618:	e0bff817 	ldw	r2,-32(fp)
    a61c:	1001703a 	wrctl	status,r2
}
    a620:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
    a624:	0004ddc0 	call	4ddc <OS_Dummy>
  NIOS2_READ_STATUS (context);
    a628:	0005303a 	rdctl	r2,status
    a62c:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a630:	e0fff917 	ldw	r3,-28(fp)
    a634:	00bfff84 	movi	r2,-2
    a638:	1884703a 	and	r2,r3,r2
    a63c:	1001703a 	wrctl	status,r2
  return context;
    a640:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
    a644:	e0bfff15 	stw	r2,-4(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
    a648:	d0a7bf83 	ldbu	r2,-24834(gp)
    a64c:	10803fcc 	andi	r2,r2,255
    a650:	10000326 	beq	r2,zero,a660 <OSTaskDel+0x264>
        OSLockNesting--;
    a654:	d0a7bf83 	ldbu	r2,-24834(gp)
    a658:	10bfffc4 	addi	r2,r2,-1
    a65c:	d0a7bf85 	stb	r2,-24834(gp)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
    a660:	e13ffe17 	ldw	r4,-8(fp)
    a664:	000ee340 	call	ee34 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
    a668:	d0a7c183 	ldbu	r2,-24826(gp)
    a66c:	10bfffc4 	addi	r2,r2,-1
    a670:	d0a7c185 	stb	r2,-24826(gp)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
    a674:	e0bff603 	ldbu	r2,-40(fp)
    a678:	100690ba 	slli	r3,r2,2
    a67c:	008000b4 	movhi	r2,2
    a680:	1885883a 	add	r2,r3,r2
    a684:	10257d15 	stw	zero,-27148(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
    a688:	e0bffe17 	ldw	r2,-8(fp)
    a68c:	10800617 	ldw	r2,24(r2)
    a690:	1000071e 	bne	r2,zero,a6b0 <OSTaskDel+0x2b4>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
    a694:	e0bffe17 	ldw	r2,-8(fp)
    a698:	10800517 	ldw	r2,20(r2)
    a69c:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
    a6a0:	e0bffe17 	ldw	r2,-8(fp)
    a6a4:	10800517 	ldw	r2,20(r2)
    a6a8:	d0a7c615 	stw	r2,-24808(gp)
    a6ac:	00000a06 	br	a6d8 <OSTaskDel+0x2dc>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
    a6b0:	e0bffe17 	ldw	r2,-8(fp)
    a6b4:	10800617 	ldw	r2,24(r2)
    a6b8:	e0fffe17 	ldw	r3,-8(fp)
    a6bc:	18c00517 	ldw	r3,20(r3)
    a6c0:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
    a6c4:	e0bffe17 	ldw	r2,-8(fp)
    a6c8:	10800517 	ldw	r2,20(r2)
    a6cc:	e0fffe17 	ldw	r3,-8(fp)
    a6d0:	18c00617 	ldw	r3,24(r3)
    a6d4:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
    a6d8:	d0e7c417 	ldw	r3,-24816(gp)
    a6dc:	e0bffe17 	ldw	r2,-8(fp)
    a6e0:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
    a6e4:	e0bffe17 	ldw	r2,-8(fp)
    a6e8:	d0a7c415 	stw	r2,-24816(gp)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
    a6ec:	e0bffe17 	ldw	r2,-8(fp)
    a6f0:	00c00fc4 	movi	r3,63
    a6f4:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
    a6f8:	e0bffe17 	ldw	r2,-8(fp)
    a6fc:	10001345 	stb	zero,77(r2)
    a700:	e0bfff17 	ldw	r2,-4(fp)
    a704:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context);
    a708:	e0bff717 	ldw	r2,-36(fp)
    a70c:	1001703a 	wrctl	status,r2
}
    a710:	0001883a 	nop
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
    a714:	d0a7c143 	ldbu	r2,-24827(gp)
    a718:	10803fcc 	andi	r2,r2,255
    a71c:	10800058 	cmpnei	r2,r2,1
    a720:	1000011e 	bne	r2,zero,a728 <OSTaskDel+0x32c>
        OS_Sched();                                     /* Find new highest priority task              */
    a724:	00058300 	call	5830 <OS_Sched>
    }
    return (OS_ERR_NONE);
    a728:	0005883a 	mov	r2,zero
}
    a72c:	e037883a 	mov	sp,fp
    a730:	dfc00117 	ldw	ra,4(sp)
    a734:	df000017 	ldw	fp,0(sp)
    a738:	dec00204 	addi	sp,sp,8
    a73c:	f800283a 	ret

0000a740 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
    a740:	defff504 	addi	sp,sp,-44
    a744:	df000a15 	stw	fp,40(sp)
    a748:	df000a04 	addi	fp,sp,40
    a74c:	2005883a 	mov	r2,r4
    a750:	e0bff605 	stb	r2,-40(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    a754:	e03fff15 	stw	zero,-4(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
    a758:	e0bff603 	ldbu	r2,-40(fp)
    a75c:	10800518 	cmpnei	r2,r2,20
    a760:	1000021e 	bne	r2,zero,a76c <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
    a764:	00800f84 	movi	r2,62
    a768:	00004706 	br	a888 <OSTaskDelReq+0x148>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
    a76c:	e0bff603 	ldbu	r2,-40(fp)
    a770:	10800530 	cmpltui	r2,r2,20
    a774:	1000051e 	bne	r2,zero,a78c <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
    a778:	e0bff603 	ldbu	r2,-40(fp)
    a77c:	10803fe0 	cmpeqi	r2,r2,255
    a780:	1000021e 	bne	r2,zero,a78c <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
    a784:	00800a84 	movi	r2,42
    a788:	00003f06 	br	a888 <OSTaskDelReq+0x148>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
    a78c:	e0bff603 	ldbu	r2,-40(fp)
    a790:	10803fd8 	cmpnei	r2,r2,255
    a794:	1000121e 	bne	r2,zero,a7e0 <OSTaskDelReq+0xa0>
  NIOS2_READ_STATUS (context);
    a798:	0005303a 	rdctl	r2,status
    a79c:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a7a0:	e0fffb17 	ldw	r3,-20(fp)
    a7a4:	00bfff84 	movi	r2,-2
    a7a8:	1884703a 	and	r2,r3,r2
    a7ac:	1001703a 	wrctl	status,r2
  return context;
    a7b0:	e0bffb17 	ldw	r2,-20(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
    a7b4:	e0bfff15 	stw	r2,-4(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
    a7b8:	d0a7c317 	ldw	r2,-24820(gp)
    a7bc:	10800dc3 	ldbu	r2,55(r2)
    a7c0:	e0bffdc5 	stb	r2,-9(fp)
    a7c4:	e0bfff17 	ldw	r2,-4(fp)
    a7c8:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    a7cc:	e0bffc17 	ldw	r2,-16(fp)
    a7d0:	1001703a 	wrctl	status,r2
}
    a7d4:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (stat);
    a7d8:	e0bffdc3 	ldbu	r2,-9(fp)
    a7dc:	00002a06 	br	a888 <OSTaskDelReq+0x148>
  NIOS2_READ_STATUS (context);
    a7e0:	0005303a 	rdctl	r2,status
    a7e4:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a7e8:	e0fffa17 	ldw	r3,-24(fp)
    a7ec:	00bfff84 	movi	r2,-2
    a7f0:	1884703a 	and	r2,r3,r2
    a7f4:	1001703a 	wrctl	status,r2
  return context;
    a7f8:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    a7fc:	e0bfff15 	stw	r2,-4(fp)
    ptcb = OSTCBPrioTbl[prio];
    a800:	e0bff603 	ldbu	r2,-40(fp)
    a804:	100690ba 	slli	r3,r2,2
    a808:	008000b4 	movhi	r2,2
    a80c:	1885883a 	add	r2,r3,r2
    a810:	10a57d17 	ldw	r2,-27148(r2)
    a814:	e0bffe15 	stw	r2,-8(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
    a818:	e0bffe17 	ldw	r2,-8(fp)
    a81c:	1000071e 	bne	r2,zero,a83c <OSTaskDelReq+0xfc>
    a820:	e0bfff17 	ldw	r2,-4(fp)
    a824:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
    a828:	e0bff917 	ldw	r2,-28(fp)
    a82c:	1001703a 	wrctl	status,r2
}
    a830:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
    a834:	008010c4 	movi	r2,67
    a838:	00001306 	br	a888 <OSTaskDelReq+0x148>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
    a83c:	e0bffe17 	ldw	r2,-8(fp)
    a840:	10800058 	cmpnei	r2,r2,1
    a844:	1000071e 	bne	r2,zero,a864 <OSTaskDelReq+0x124>
    a848:	e0bfff17 	ldw	r2,-4(fp)
    a84c:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
    a850:	e0bff817 	ldw	r2,-32(fp)
    a854:	1001703a 	wrctl	status,r2
}
    a858:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
    a85c:	00800f44 	movi	r2,61
    a860:	00000906 	br	a888 <OSTaskDelReq+0x148>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
    a864:	e0bffe17 	ldw	r2,-8(fp)
    a868:	00c00fc4 	movi	r3,63
    a86c:	10c00dc5 	stb	r3,55(r2)
    a870:	e0bfff17 	ldw	r2,-4(fp)
    a874:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context);
    a878:	e0bff717 	ldw	r2,-36(fp)
    a87c:	1001703a 	wrctl	status,r2
}
    a880:	0001883a 	nop
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    a884:	0005883a 	mov	r2,zero
}
    a888:	e037883a 	mov	sp,fp
    a88c:	df000017 	ldw	fp,0(sp)
    a890:	dec00104 	addi	sp,sp,4
    a894:	f800283a 	ret

0000a898 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
    a898:	defff404 	addi	sp,sp,-48
    a89c:	dfc00b15 	stw	ra,44(sp)
    a8a0:	df000a15 	stw	fp,40(sp)
    a8a4:	df000a04 	addi	fp,sp,40
    a8a8:	2005883a 	mov	r2,r4
    a8ac:	e17ff715 	stw	r5,-36(fp)
    a8b0:	e1bff615 	stw	r6,-40(fp)
    a8b4:	e0bff805 	stb	r2,-32(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
    a8b8:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
    a8bc:	e0bff617 	ldw	r2,-40(fp)
    a8c0:	1000021e 	bne	r2,zero,a8cc <OSTaskNameGet+0x34>
        return (0);
    a8c4:	0005883a 	mov	r2,zero
    a8c8:	00005506 	br	aa20 <OSTaskNameGet+0x188>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
    a8cc:	e0bff803 	ldbu	r2,-32(fp)
    a8d0:	10800570 	cmpltui	r2,r2,21
    a8d4:	1000081e 	bne	r2,zero,a8f8 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
    a8d8:	e0bff803 	ldbu	r2,-32(fp)
    a8dc:	10803fe0 	cmpeqi	r2,r2,255
    a8e0:	1000051e 	bne	r2,zero,a8f8 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
    a8e4:	e0bff617 	ldw	r2,-40(fp)
    a8e8:	00c00a84 	movi	r3,42
    a8ec:	10c00005 	stb	r3,0(r2)
            return (0);
    a8f0:	0005883a 	mov	r2,zero
    a8f4:	00004a06 	br	aa20 <OSTaskNameGet+0x188>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
    a8f8:	e0bff717 	ldw	r2,-36(fp)
    a8fc:	1000051e 	bne	r2,zero,a914 <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
    a900:	e0bff617 	ldw	r2,-40(fp)
    a904:	00c00304 	movi	r3,12
    a908:	10c00005 	stb	r3,0(r2)
        return (0);
    a90c:	0005883a 	mov	r2,zero
    a910:	00004306 	br	aa20 <OSTaskNameGet+0x188>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
    a914:	d0a7bf43 	ldbu	r2,-24835(gp)
    a918:	10803fcc 	andi	r2,r2,255
    a91c:	10000526 	beq	r2,zero,a934 <OSTaskNameGet+0x9c>
        *perr = OS_ERR_NAME_GET_ISR;
    a920:	e0bff617 	ldw	r2,-40(fp)
    a924:	00c00444 	movi	r3,17
    a928:	10c00005 	stb	r3,0(r2)
        return (0);
    a92c:	0005883a 	mov	r2,zero
    a930:	00003b06 	br	aa20 <OSTaskNameGet+0x188>
  NIOS2_READ_STATUS (context);
    a934:	0005303a 	rdctl	r2,status
    a938:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a93c:	e0fffc17 	ldw	r3,-16(fp)
    a940:	00bfff84 	movi	r2,-2
    a944:	1884703a 	and	r2,r3,r2
    a948:	1001703a 	wrctl	status,r2
  return context;
    a94c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    a950:	e0bfff15 	stw	r2,-4(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
    a954:	e0bff803 	ldbu	r2,-32(fp)
    a958:	10803fd8 	cmpnei	r2,r2,255
    a95c:	1000031e 	bne	r2,zero,a96c <OSTaskNameGet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
    a960:	d0a7c317 	ldw	r2,-24820(gp)
    a964:	10800c83 	ldbu	r2,50(r2)
    a968:	e0bff805 	stb	r2,-32(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    a96c:	e0bff803 	ldbu	r2,-32(fp)
    a970:	100690ba 	slli	r3,r2,2
    a974:	008000b4 	movhi	r2,2
    a978:	1885883a 	add	r2,r3,r2
    a97c:	10a57d17 	ldw	r2,-27148(r2)
    a980:	e0bffe15 	stw	r2,-8(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
    a984:	e0bffe17 	ldw	r2,-8(fp)
    a988:	10000a1e 	bne	r2,zero,a9b4 <OSTaskNameGet+0x11c>
    a98c:	e0bfff17 	ldw	r2,-4(fp)
    a990:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    a994:	e0bffb17 	ldw	r2,-20(fp)
    a998:	1001703a 	wrctl	status,r2
}
    a99c:	0001883a 	nop
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
    a9a0:	e0bff617 	ldw	r2,-40(fp)
    a9a4:	00c010c4 	movi	r3,67
    a9a8:	10c00005 	stb	r3,0(r2)
        return (0);
    a9ac:	0005883a 	mov	r2,zero
    a9b0:	00001b06 	br	aa20 <OSTaskNameGet+0x188>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
    a9b4:	e0bffe17 	ldw	r2,-8(fp)
    a9b8:	10800058 	cmpnei	r2,r2,1
    a9bc:	10000a1e 	bne	r2,zero,a9e8 <OSTaskNameGet+0x150>
    a9c0:	e0bfff17 	ldw	r2,-4(fp)
    a9c4:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
    a9c8:	e0bffa17 	ldw	r2,-24(fp)
    a9cc:	1001703a 	wrctl	status,r2
}
    a9d0:	0001883a 	nop
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
    a9d4:	e0bff617 	ldw	r2,-40(fp)
    a9d8:	00c010c4 	movi	r3,67
    a9dc:	10c00005 	stb	r3,0(r2)
        return (0);
    a9e0:	0005883a 	mov	r2,zero
    a9e4:	00000e06 	br	aa20 <OSTaskNameGet+0x188>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
    a9e8:	e0bffe17 	ldw	r2,-8(fp)
    a9ec:	10801304 	addi	r2,r2,76
    a9f0:	100b883a 	mov	r5,r2
    a9f4:	e13ff717 	ldw	r4,-36(fp)
    a9f8:	00059680 	call	5968 <OS_StrCopy>
    a9fc:	e0bffdc5 	stb	r2,-9(fp)
    aa00:	e0bfff17 	ldw	r2,-4(fp)
    aa04:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
    aa08:	e0bff917 	ldw	r2,-28(fp)
    aa0c:	1001703a 	wrctl	status,r2
}
    aa10:	0001883a 	nop
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    aa14:	e0bff617 	ldw	r2,-40(fp)
    aa18:	10000005 	stb	zero,0(r2)
    return (len);
    aa1c:	e0bffdc3 	ldbu	r2,-9(fp)
}
    aa20:	e037883a 	mov	sp,fp
    aa24:	dfc00117 	ldw	ra,4(sp)
    aa28:	df000017 	ldw	fp,0(sp)
    aa2c:	dec00204 	addi	sp,sp,8
    aa30:	f800283a 	ret

0000aa34 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
    aa34:	defff304 	addi	sp,sp,-52
    aa38:	dfc00c15 	stw	ra,48(sp)
    aa3c:	df000b15 	stw	fp,44(sp)
    aa40:	df000b04 	addi	fp,sp,44
    aa44:	2005883a 	mov	r2,r4
    aa48:	e17ff615 	stw	r5,-40(fp)
    aa4c:	e1bff515 	stw	r6,-44(fp)
    aa50:	e0bff705 	stb	r2,-36(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
    aa54:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
    aa58:	e0bff517 	ldw	r2,-44(fp)
    aa5c:	10005e26 	beq	r2,zero,abd8 <OSTaskNameSet+0x1a4>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
    aa60:	e0bff703 	ldbu	r2,-36(fp)
    aa64:	10800570 	cmpltui	r2,r2,21
    aa68:	1000071e 	bne	r2,zero,aa88 <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
    aa6c:	e0bff703 	ldbu	r2,-36(fp)
    aa70:	10803fe0 	cmpeqi	r2,r2,255
    aa74:	1000041e 	bne	r2,zero,aa88 <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
    aa78:	e0bff517 	ldw	r2,-44(fp)
    aa7c:	00c00a84 	movi	r3,42
    aa80:	10c00005 	stb	r3,0(r2)
            return;
    aa84:	00005506 	br	abdc <OSTaskNameSet+0x1a8>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
    aa88:	e0bff617 	ldw	r2,-40(fp)
    aa8c:	1000041e 	bne	r2,zero,aaa0 <OSTaskNameSet+0x6c>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
    aa90:	e0bff517 	ldw	r2,-44(fp)
    aa94:	00c00304 	movi	r3,12
    aa98:	10c00005 	stb	r3,0(r2)
        return;
    aa9c:	00004f06 	br	abdc <OSTaskNameSet+0x1a8>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
    aaa0:	d0a7bf43 	ldbu	r2,-24835(gp)
    aaa4:	10803fcc 	andi	r2,r2,255
    aaa8:	10000426 	beq	r2,zero,aabc <OSTaskNameSet+0x88>
        *perr = OS_ERR_NAME_SET_ISR;
    aaac:	e0bff517 	ldw	r2,-44(fp)
    aab0:	00c00484 	movi	r3,18
    aab4:	10c00005 	stb	r3,0(r2)
        return;
    aab8:	00004806 	br	abdc <OSTaskNameSet+0x1a8>
  NIOS2_READ_STATUS (context);
    aabc:	0005303a 	rdctl	r2,status
    aac0:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    aac4:	e0fffc17 	ldw	r3,-16(fp)
    aac8:	00bfff84 	movi	r2,-2
    aacc:	1884703a 	and	r2,r3,r2
    aad0:	1001703a 	wrctl	status,r2
  return context;
    aad4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    aad8:	e0bfff15 	stw	r2,-4(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
    aadc:	e0bff703 	ldbu	r2,-36(fp)
    aae0:	10803fd8 	cmpnei	r2,r2,255
    aae4:	1000031e 	bne	r2,zero,aaf4 <OSTaskNameSet+0xc0>
        prio = OSTCBCur->OSTCBPrio;
    aae8:	d0a7c317 	ldw	r2,-24820(gp)
    aaec:	10800c83 	ldbu	r2,50(r2)
    aaf0:	e0bff705 	stb	r2,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    aaf4:	e0bff703 	ldbu	r2,-36(fp)
    aaf8:	100690ba 	slli	r3,r2,2
    aafc:	008000b4 	movhi	r2,2
    ab00:	1885883a 	add	r2,r3,r2
    ab04:	10a57d17 	ldw	r2,-27148(r2)
    ab08:	e0bffe15 	stw	r2,-8(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
    ab0c:	e0bffe17 	ldw	r2,-8(fp)
    ab10:	1000091e 	bne	r2,zero,ab38 <OSTaskNameSet+0x104>
    ab14:	e0bfff17 	ldw	r2,-4(fp)
    ab18:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    ab1c:	e0bffb17 	ldw	r2,-20(fp)
    ab20:	1001703a 	wrctl	status,r2
}
    ab24:	0001883a 	nop
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
    ab28:	e0bff517 	ldw	r2,-44(fp)
    ab2c:	00c010c4 	movi	r3,67
    ab30:	10c00005 	stb	r3,0(r2)
        return;
    ab34:	00002906 	br	abdc <OSTaskNameSet+0x1a8>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
    ab38:	e0bffe17 	ldw	r2,-8(fp)
    ab3c:	10800058 	cmpnei	r2,r2,1
    ab40:	1000091e 	bne	r2,zero,ab68 <OSTaskNameSet+0x134>
    ab44:	e0bfff17 	ldw	r2,-4(fp)
    ab48:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
    ab4c:	e0bffa17 	ldw	r2,-24(fp)
    ab50:	1001703a 	wrctl	status,r2
}
    ab54:	0001883a 	nop
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
    ab58:	e0bff517 	ldw	r2,-44(fp)
    ab5c:	00c010c4 	movi	r3,67
    ab60:	10c00005 	stb	r3,0(r2)
        return;
    ab64:	00001d06 	br	abdc <OSTaskNameSet+0x1a8>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
    ab68:	e13ff617 	ldw	r4,-40(fp)
    ab6c:	00059dc0 	call	59dc <OS_StrLen>
    ab70:	e0bffdc5 	stb	r2,-9(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
    ab74:	e0bffdc3 	ldbu	r2,-9(fp)
    ab78:	10800830 	cmpltui	r2,r2,32
    ab7c:	1000091e 	bne	r2,zero,aba4 <OSTaskNameSet+0x170>
    ab80:	e0bfff17 	ldw	r2,-4(fp)
    ab84:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
    ab88:	e0bff917 	ldw	r2,-28(fp)
    ab8c:	1001703a 	wrctl	status,r2
}
    ab90:	0001883a 	nop
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
    ab94:	e0bff517 	ldw	r2,-44(fp)
    ab98:	00c01044 	movi	r3,65
    ab9c:	10c00005 	stb	r3,0(r2)
        return;
    aba0:	00000e06 	br	abdc <OSTaskNameSet+0x1a8>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    aba4:	e0bffe17 	ldw	r2,-8(fp)
    aba8:	10801304 	addi	r2,r2,76
    abac:	e17ff617 	ldw	r5,-40(fp)
    abb0:	1009883a 	mov	r4,r2
    abb4:	00059680 	call	5968 <OS_StrCopy>
    abb8:	e0bfff17 	ldw	r2,-4(fp)
    abbc:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
    abc0:	e0bff817 	ldw	r2,-32(fp)
    abc4:	1001703a 	wrctl	status,r2
}
    abc8:	0001883a 	nop
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    abcc:	e0bff517 	ldw	r2,-44(fp)
    abd0:	10000005 	stb	zero,0(r2)
    abd4:	00000106 	br	abdc <OSTaskNameSet+0x1a8>
        return;
    abd8:	0001883a 	nop
}
    abdc:	e037883a 	mov	sp,fp
    abe0:	dfc00117 	ldw	ra,4(sp)
    abe4:	df000017 	ldw	fp,0(sp)
    abe8:	dec00204 	addi	sp,sp,8
    abec:	f800283a 	ret

0000abf0 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
    abf0:	defff404 	addi	sp,sp,-48
    abf4:	dfc00b15 	stw	ra,44(sp)
    abf8:	df000a15 	stw	fp,40(sp)
    abfc:	df000a04 	addi	fp,sp,40
    ac00:	2005883a 	mov	r2,r4
    ac04:	e0bff605 	stb	r2,-40(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
    ac08:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
    ac0c:	e0bff603 	ldbu	r2,-40(fp)
    ac10:	10800530 	cmpltui	r2,r2,20
    ac14:	1000021e 	bne	r2,zero,ac20 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
    ac18:	00800a84 	movi	r2,42
    ac1c:	00006706 	br	adbc <OSTaskResume+0x1cc>
  NIOS2_READ_STATUS (context);
    ac20:	0005303a 	rdctl	r2,status
    ac24:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ac28:	e0fffd17 	ldw	r3,-12(fp)
    ac2c:	00bfff84 	movi	r2,-2
    ac30:	1884703a 	and	r2,r3,r2
    ac34:	1001703a 	wrctl	status,r2
  return context;
    ac38:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    ac3c:	e0bfff15 	stw	r2,-4(fp)
    ptcb = OSTCBPrioTbl[prio];
    ac40:	e0bff603 	ldbu	r2,-40(fp)
    ac44:	100690ba 	slli	r3,r2,2
    ac48:	008000b4 	movhi	r2,2
    ac4c:	1885883a 	add	r2,r3,r2
    ac50:	10a57d17 	ldw	r2,-27148(r2)
    ac54:	e0bffe15 	stw	r2,-8(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
    ac58:	e0bffe17 	ldw	r2,-8(fp)
    ac5c:	1000071e 	bne	r2,zero,ac7c <OSTaskResume+0x8c>
    ac60:	e0bfff17 	ldw	r2,-4(fp)
    ac64:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    ac68:	e0bffc17 	ldw	r2,-16(fp)
    ac6c:	1001703a 	wrctl	status,r2
}
    ac70:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
    ac74:	00801184 	movi	r2,70
    ac78:	00005006 	br	adbc <OSTaskResume+0x1cc>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
    ac7c:	e0bffe17 	ldw	r2,-8(fp)
    ac80:	10800058 	cmpnei	r2,r2,1
    ac84:	1000071e 	bne	r2,zero,aca4 <OSTaskResume+0xb4>
    ac88:	e0bfff17 	ldw	r2,-4(fp)
    ac8c:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    ac90:	e0bffb17 	ldw	r2,-20(fp)
    ac94:	1001703a 	wrctl	status,r2
}
    ac98:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    ac9c:	008010c4 	movi	r2,67
    aca0:	00004606 	br	adbc <OSTaskResume+0x1cc>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
    aca4:	e0bffe17 	ldw	r2,-8(fp)
    aca8:	10800c03 	ldbu	r2,48(r2)
    acac:	10803fcc 	andi	r2,r2,255
    acb0:	1080020c 	andi	r2,r2,8
    acb4:	10003b26 	beq	r2,zero,ada4 <OSTaskResume+0x1b4>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
    acb8:	e0bffe17 	ldw	r2,-8(fp)
    acbc:	10c00c03 	ldbu	r3,48(r2)
    acc0:	00bffdc4 	movi	r2,-9
    acc4:	1884703a 	and	r2,r3,r2
    acc8:	1007883a 	mov	r3,r2
    accc:	e0bffe17 	ldw	r2,-8(fp)
    acd0:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
    acd4:	e0bffe17 	ldw	r2,-8(fp)
    acd8:	10800c03 	ldbu	r2,48(r2)
    acdc:	10803fcc 	andi	r2,r2,255
    ace0:	1000291e 	bne	r2,zero,ad88 <OSTaskResume+0x198>
            if (ptcb->OSTCBDly == 0) {
    ace4:	e0bffe17 	ldw	r2,-8(fp)
    ace8:	10800b8b 	ldhu	r2,46(r2)
    acec:	10bfffcc 	andi	r2,r2,65535
    acf0:	1000201e 	bne	r2,zero,ad74 <OSTaskResume+0x184>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
    acf4:	e0bffe17 	ldw	r2,-8(fp)
    acf8:	10c00d83 	ldbu	r3,54(r2)
    acfc:	d0a7c043 	ldbu	r2,-24831(gp)
    ad00:	1884b03a 	or	r2,r3,r2
    ad04:	d0a7c045 	stb	r2,-24831(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    ad08:	e0bffe17 	ldw	r2,-8(fp)
    ad0c:	10800d03 	ldbu	r2,52(r2)
    ad10:	10c03fcc 	andi	r3,r2,255
    ad14:	d0a7c084 	addi	r2,gp,-24830
    ad18:	1885883a 	add	r2,r3,r2
    ad1c:	11000003 	ldbu	r4,0(r2)
    ad20:	e0bffe17 	ldw	r2,-8(fp)
    ad24:	10800d43 	ldbu	r2,53(r2)
    ad28:	e0fffe17 	ldw	r3,-8(fp)
    ad2c:	18c00d03 	ldbu	r3,52(r3)
    ad30:	18c03fcc 	andi	r3,r3,255
    ad34:	2084b03a 	or	r2,r4,r2
    ad38:	1009883a 	mov	r4,r2
    ad3c:	d0a7c084 	addi	r2,gp,-24830
    ad40:	1885883a 	add	r2,r3,r2
    ad44:	11000005 	stb	r4,0(r2)
    ad48:	e0bfff17 	ldw	r2,-4(fp)
    ad4c:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
    ad50:	e0bffa17 	ldw	r2,-24(fp)
    ad54:	1001703a 	wrctl	status,r2
}
    ad58:	0001883a 	nop
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
    ad5c:	d0a7c143 	ldbu	r2,-24827(gp)
    ad60:	10803fcc 	andi	r2,r2,255
    ad64:	10800058 	cmpnei	r2,r2,1
    ad68:	10000c1e 	bne	r2,zero,ad9c <OSTaskResume+0x1ac>
                    OS_Sched();                               /* Find new highest priority task        */
    ad6c:	00058300 	call	5830 <OS_Sched>
    ad70:	00000a06 	br	ad9c <OSTaskResume+0x1ac>
    ad74:	e0bfff17 	ldw	r2,-4(fp)
    ad78:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
    ad7c:	e0bff917 	ldw	r2,-28(fp)
    ad80:	1001703a 	wrctl	status,r2
}
    ad84:	00000506 	br	ad9c <OSTaskResume+0x1ac>
    ad88:	e0bfff17 	ldw	r2,-4(fp)
    ad8c:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
    ad90:	e0bff817 	ldw	r2,-32(fp)
    ad94:	1001703a 	wrctl	status,r2
}
    ad98:	0001883a 	nop
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
    ad9c:	0005883a 	mov	r2,zero
    ada0:	00000606 	br	adbc <OSTaskResume+0x1cc>
    ada4:	e0bfff17 	ldw	r2,-4(fp)
    ada8:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context);
    adac:	e0bff717 	ldw	r2,-36(fp)
    adb0:	1001703a 	wrctl	status,r2
}
    adb4:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
    adb8:	00801104 	movi	r2,68
}
    adbc:	e037883a 	mov	sp,fp
    adc0:	dfc00117 	ldw	ra,4(sp)
    adc4:	df000017 	ldw	fp,0(sp)
    adc8:	dec00204 	addi	sp,sp,8
    adcc:	f800283a 	ret

0000add0 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
    add0:	defff304 	addi	sp,sp,-52
    add4:	df000c15 	stw	fp,48(sp)
    add8:	df000c04 	addi	fp,sp,48
    addc:	2005883a 	mov	r2,r4
    ade0:	e17ff415 	stw	r5,-48(fp)
    ade4:	e0bff505 	stb	r2,-44(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    ade8:	e03ffd15 	stw	zero,-12(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
    adec:	e0bff503 	ldbu	r2,-44(fp)
    adf0:	10800570 	cmpltui	r2,r2,21
    adf4:	1000051e 	bne	r2,zero,ae0c <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
    adf8:	e0bff503 	ldbu	r2,-44(fp)
    adfc:	10803fe0 	cmpeqi	r2,r2,255
    ae00:	1000021e 	bne	r2,zero,ae0c <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
    ae04:	00800a84 	movi	r2,42
    ae08:	00005b06 	br	af78 <OSTaskStkChk+0x1a8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
    ae0c:	e0bff417 	ldw	r2,-48(fp)
    ae10:	1000021e 	bne	r2,zero,ae1c <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
    ae14:	00800244 	movi	r2,9
    ae18:	00005706 	br	af78 <OSTaskStkChk+0x1a8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
    ae1c:	e0bff417 	ldw	r2,-48(fp)
    ae20:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
    ae24:	e0bff417 	ldw	r2,-48(fp)
    ae28:	10000115 	stw	zero,4(r2)
  NIOS2_READ_STATUS (context);
    ae2c:	0005303a 	rdctl	r2,status
    ae30:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ae34:	e0fffa17 	ldw	r3,-24(fp)
    ae38:	00bfff84 	movi	r2,-2
    ae3c:	1884703a 	and	r2,r3,r2
    ae40:	1001703a 	wrctl	status,r2
  return context;
    ae44:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();
    ae48:	e0bffd15 	stw	r2,-12(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
    ae4c:	e0bff503 	ldbu	r2,-44(fp)
    ae50:	10803fd8 	cmpnei	r2,r2,255
    ae54:	1000031e 	bne	r2,zero,ae64 <OSTaskStkChk+0x94>
        prio = OSTCBCur->OSTCBPrio;
    ae58:	d0a7c317 	ldw	r2,-24820(gp)
    ae5c:	10800c83 	ldbu	r2,50(r2)
    ae60:	e0bff505 	stb	r2,-44(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    ae64:	e0bff503 	ldbu	r2,-44(fp)
    ae68:	100690ba 	slli	r3,r2,2
    ae6c:	008000b4 	movhi	r2,2
    ae70:	1885883a 	add	r2,r3,r2
    ae74:	10a57d17 	ldw	r2,-27148(r2)
    ae78:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
    ae7c:	e0bffc17 	ldw	r2,-16(fp)
    ae80:	1000071e 	bne	r2,zero,aea0 <OSTaskStkChk+0xd0>
    ae84:	e0bffd17 	ldw	r2,-12(fp)
    ae88:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
    ae8c:	e0bff917 	ldw	r2,-28(fp)
    ae90:	1001703a 	wrctl	status,r2
}
    ae94:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    ae98:	008010c4 	movi	r2,67
    ae9c:	00003606 	br	af78 <OSTaskStkChk+0x1a8>
    }
    if (ptcb == OS_TCB_RESERVED) {
    aea0:	e0bffc17 	ldw	r2,-16(fp)
    aea4:	10800058 	cmpnei	r2,r2,1
    aea8:	1000071e 	bne	r2,zero,aec8 <OSTaskStkChk+0xf8>
    aeac:	e0bffd17 	ldw	r2,-12(fp)
    aeb0:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
    aeb4:	e0bff817 	ldw	r2,-32(fp)
    aeb8:	1001703a 	wrctl	status,r2
}
    aebc:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    aec0:	008010c4 	movi	r2,67
    aec4:	00002c06 	br	af78 <OSTaskStkChk+0x1a8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
    aec8:	e0bffc17 	ldw	r2,-16(fp)
    aecc:	1080040b 	ldhu	r2,16(r2)
    aed0:	10bfffcc 	andi	r2,r2,65535
    aed4:	1080004c 	andi	r2,r2,1
    aed8:	1000071e 	bne	r2,zero,aef8 <OSTaskStkChk+0x128>
    aedc:	e0bffd17 	ldw	r2,-12(fp)
    aee0:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context);
    aee4:	e0bff717 	ldw	r2,-36(fp)
    aee8:	1001703a 	wrctl	status,r2
}
    aeec:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
    aef0:	00801144 	movi	r2,69
    aef4:	00002006 	br	af78 <OSTaskStkChk+0x1a8>
    }
    nfree = 0;
    aef8:	e03ffe15 	stw	zero,-8(fp)
    size  = ptcb->OSTCBStkSize;
    aefc:	e0bffc17 	ldw	r2,-16(fp)
    af00:	10800317 	ldw	r2,12(r2)
    af04:	e0bffb15 	stw	r2,-20(fp)
    pchk  = ptcb->OSTCBStkBottom;
    af08:	e0bffc17 	ldw	r2,-16(fp)
    af0c:	10800217 	ldw	r2,8(r2)
    af10:	e0bfff15 	stw	r2,-4(fp)
    af14:	e0bffd17 	ldw	r2,-12(fp)
    af18:	e0bff615 	stw	r2,-40(fp)
  NIOS2_WRITE_STATUS (context);
    af1c:	e0bff617 	ldw	r2,-40(fp)
    af20:	1001703a 	wrctl	status,r2
}
    af24:	0001883a 	nop
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
    af28:	00000306 	br	af38 <OSTaskStkChk+0x168>
        nfree++;
    af2c:	e0bffe17 	ldw	r2,-8(fp)
    af30:	10800044 	addi	r2,r2,1
    af34:	e0bffe15 	stw	r2,-8(fp)
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
    af38:	e0bfff17 	ldw	r2,-4(fp)
    af3c:	10c00104 	addi	r3,r2,4
    af40:	e0ffff15 	stw	r3,-4(fp)
    af44:	10800017 	ldw	r2,0(r2)
    af48:	103ff826 	beq	r2,zero,af2c <OSTaskStkChk+0x15c>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
    af4c:	e0bffe17 	ldw	r2,-8(fp)
    af50:	100690ba 	slli	r3,r2,2
    af54:	e0bff417 	ldw	r2,-48(fp)
    af58:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
    af5c:	e0fffb17 	ldw	r3,-20(fp)
    af60:	e0bffe17 	ldw	r2,-8(fp)
    af64:	1885c83a 	sub	r2,r3,r2
    af68:	100690ba 	slli	r3,r2,2
    af6c:	e0bff417 	ldw	r2,-48(fp)
    af70:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
    af74:	0005883a 	mov	r2,zero
}
    af78:	e037883a 	mov	sp,fp
    af7c:	df000017 	ldw	fp,0(sp)
    af80:	dec00104 	addi	sp,sp,4
    af84:	f800283a 	ret

0000af88 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
    af88:	defff504 	addi	sp,sp,-44
    af8c:	dfc00a15 	stw	ra,40(sp)
    af90:	df000915 	stw	fp,36(sp)
    af94:	df000904 	addi	fp,sp,36
    af98:	2005883a 	mov	r2,r4
    af9c:	e0bff705 	stb	r2,-36(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    afa0:	e03ffe15 	stw	zero,-8(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
    afa4:	e0bff703 	ldbu	r2,-36(fp)
    afa8:	10800518 	cmpnei	r2,r2,20
    afac:	1000021e 	bne	r2,zero,afb8 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
    afb0:	008011c4 	movi	r2,71
    afb4:	00006906 	br	b15c <OSTaskSuspend+0x1d4>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
    afb8:	e0bff703 	ldbu	r2,-36(fp)
    afbc:	10800530 	cmpltui	r2,r2,20
    afc0:	1000051e 	bne	r2,zero,afd8 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
    afc4:	e0bff703 	ldbu	r2,-36(fp)
    afc8:	10803fe0 	cmpeqi	r2,r2,255
    afcc:	1000021e 	bne	r2,zero,afd8 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
    afd0:	00800a84 	movi	r2,42
    afd4:	00006106 	br	b15c <OSTaskSuspend+0x1d4>
  NIOS2_READ_STATUS (context);
    afd8:	0005303a 	rdctl	r2,status
    afdc:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    afe0:	e0fffb17 	ldw	r3,-20(fp)
    afe4:	00bfff84 	movi	r2,-2
    afe8:	1884703a 	and	r2,r3,r2
    afec:	1001703a 	wrctl	status,r2
  return context;
    aff0:	e0bffb17 	ldw	r2,-20(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
    aff4:	e0bffe15 	stw	r2,-8(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
    aff8:	e0bff703 	ldbu	r2,-36(fp)
    affc:	10803fd8 	cmpnei	r2,r2,255
    b000:	1000061e 	bne	r2,zero,b01c <OSTaskSuspend+0x94>
        prio = OSTCBCur->OSTCBPrio;
    b004:	d0a7c317 	ldw	r2,-24820(gp)
    b008:	10800c83 	ldbu	r2,50(r2)
    b00c:	e0bff705 	stb	r2,-36(fp)
        self = OS_TRUE;
    b010:	00800044 	movi	r2,1
    b014:	e0bfffc5 	stb	r2,-1(fp)
    b018:	00000906 	br	b040 <OSTaskSuspend+0xb8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
    b01c:	d0a7c317 	ldw	r2,-24820(gp)
    b020:	10800c83 	ldbu	r2,50(r2)
    b024:	e0fff703 	ldbu	r3,-36(fp)
    b028:	10803fcc 	andi	r2,r2,255
    b02c:	1880031e 	bne	r3,r2,b03c <OSTaskSuspend+0xb4>
        self = OS_TRUE;
    b030:	00800044 	movi	r2,1
    b034:	e0bfffc5 	stb	r2,-1(fp)
    b038:	00000106 	br	b040 <OSTaskSuspend+0xb8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
    b03c:	e03fffc5 	stb	zero,-1(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    b040:	e0bff703 	ldbu	r2,-36(fp)
    b044:	100690ba 	slli	r3,r2,2
    b048:	008000b4 	movhi	r2,2
    b04c:	1885883a 	add	r2,r3,r2
    b050:	10a57d17 	ldw	r2,-27148(r2)
    b054:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
    b058:	e0bffd17 	ldw	r2,-12(fp)
    b05c:	1000071e 	bne	r2,zero,b07c <OSTaskSuspend+0xf4>
    b060:	e0bffe17 	ldw	r2,-8(fp)
    b064:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
    b068:	e0bffa17 	ldw	r2,-24(fp)
    b06c:	1001703a 	wrctl	status,r2
}
    b070:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
    b074:	00801204 	movi	r2,72
    b078:	00003806 	br	b15c <OSTaskSuspend+0x1d4>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
    b07c:	e0bffd17 	ldw	r2,-12(fp)
    b080:	10800058 	cmpnei	r2,r2,1
    b084:	1000071e 	bne	r2,zero,b0a4 <OSTaskSuspend+0x11c>
    b088:	e0bffe17 	ldw	r2,-8(fp)
    b08c:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
    b090:	e0bff917 	ldw	r2,-28(fp)
    b094:	1001703a 	wrctl	status,r2
}
    b098:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    b09c:	008010c4 	movi	r2,67
    b0a0:	00002e06 	br	b15c <OSTaskSuspend+0x1d4>
    }
    y            = ptcb->OSTCBY;
    b0a4:	e0bffd17 	ldw	r2,-12(fp)
    b0a8:	10800d03 	ldbu	r2,52(r2)
    b0ac:	e0bffcc5 	stb	r2,-13(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
    b0b0:	e0fffcc3 	ldbu	r3,-13(fp)
    b0b4:	d0a7c084 	addi	r2,gp,-24830
    b0b8:	1885883a 	add	r2,r3,r2
    b0bc:	10800003 	ldbu	r2,0(r2)
    b0c0:	1007883a 	mov	r3,r2
    b0c4:	e0bffd17 	ldw	r2,-12(fp)
    b0c8:	10800d43 	ldbu	r2,53(r2)
    b0cc:	0084303a 	nor	r2,zero,r2
    b0d0:	1884703a 	and	r2,r3,r2
    b0d4:	e0fffcc3 	ldbu	r3,-13(fp)
    b0d8:	1009883a 	mov	r4,r2
    b0dc:	d0a7c084 	addi	r2,gp,-24830
    b0e0:	1885883a 	add	r2,r3,r2
    b0e4:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
    b0e8:	e0fffcc3 	ldbu	r3,-13(fp)
    b0ec:	d0a7c084 	addi	r2,gp,-24830
    b0f0:	1885883a 	add	r2,r3,r2
    b0f4:	10800003 	ldbu	r2,0(r2)
    b0f8:	10803fcc 	andi	r2,r2,255
    b0fc:	1000071e 	bne	r2,zero,b11c <OSTaskSuspend+0x194>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
    b100:	e0bffd17 	ldw	r2,-12(fp)
    b104:	10800d83 	ldbu	r2,54(r2)
    b108:	0084303a 	nor	r2,zero,r2
    b10c:	1007883a 	mov	r3,r2
    b110:	d0a7c043 	ldbu	r2,-24831(gp)
    b114:	1884703a 	and	r2,r3,r2
    b118:	d0a7c045 	stb	r2,-24831(gp)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
    b11c:	e0bffd17 	ldw	r2,-12(fp)
    b120:	10800c03 	ldbu	r2,48(r2)
    b124:	10800214 	ori	r2,r2,8
    b128:	1007883a 	mov	r3,r2
    b12c:	e0bffd17 	ldw	r2,-12(fp)
    b130:	10c00c05 	stb	r3,48(r2)
    b134:	e0bffe17 	ldw	r2,-8(fp)
    b138:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
    b13c:	e0bff817 	ldw	r2,-32(fp)
    b140:	1001703a 	wrctl	status,r2
}
    b144:	0001883a 	nop
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
    b148:	e0bfffc3 	ldbu	r2,-1(fp)
    b14c:	10800058 	cmpnei	r2,r2,1
    b150:	1000011e 	bne	r2,zero,b158 <OSTaskSuspend+0x1d0>
        OS_Sched();                                             /* Find new highest priority task      */
    b154:	00058300 	call	5830 <OS_Sched>
    }
    return (OS_ERR_NONE);
    b158:	0005883a 	mov	r2,zero
}
    b15c:	e037883a 	mov	sp,fp
    b160:	dfc00117 	ldw	ra,4(sp)
    b164:	df000017 	ldw	fp,0(sp)
    b168:	dec00204 	addi	sp,sp,8
    b16c:	f800283a 	ret

0000b170 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
    b170:	defff604 	addi	sp,sp,-40
    b174:	dfc00915 	stw	ra,36(sp)
    b178:	df000815 	stw	fp,32(sp)
    b17c:	df000804 	addi	fp,sp,32
    b180:	2005883a 	mov	r2,r4
    b184:	e17ff815 	stw	r5,-32(fp)
    b188:	e0bff905 	stb	r2,-28(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    b18c:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
    b190:	e0bff903 	ldbu	r2,-28(fp)
    b194:	10800570 	cmpltui	r2,r2,21
    b198:	1000051e 	bne	r2,zero,b1b0 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
    b19c:	e0bff903 	ldbu	r2,-28(fp)
    b1a0:	10803fe0 	cmpeqi	r2,r2,255
    b1a4:	1000021e 	bne	r2,zero,b1b0 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
    b1a8:	00800a84 	movi	r2,42
    b1ac:	00003506 	br	b284 <OSTaskQuery+0x114>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
    b1b0:	e0bff817 	ldw	r2,-32(fp)
    b1b4:	1000021e 	bne	r2,zero,b1c0 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
    b1b8:	00800244 	movi	r2,9
    b1bc:	00003106 	br	b284 <OSTaskQuery+0x114>
  NIOS2_READ_STATUS (context);
    b1c0:	0005303a 	rdctl	r2,status
    b1c4:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b1c8:	e0fffd17 	ldw	r3,-12(fp)
    b1cc:	00bfff84 	movi	r2,-2
    b1d0:	1884703a 	and	r2,r3,r2
    b1d4:	1001703a 	wrctl	status,r2
  return context;
    b1d8:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    b1dc:	e0bfff15 	stw	r2,-4(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
    b1e0:	e0bff903 	ldbu	r2,-28(fp)
    b1e4:	10803fd8 	cmpnei	r2,r2,255
    b1e8:	1000031e 	bne	r2,zero,b1f8 <OSTaskQuery+0x88>
        prio = OSTCBCur->OSTCBPrio;
    b1ec:	d0a7c317 	ldw	r2,-24820(gp)
    b1f0:	10800c83 	ldbu	r2,50(r2)
    b1f4:	e0bff905 	stb	r2,-28(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    b1f8:	e0bff903 	ldbu	r2,-28(fp)
    b1fc:	100690ba 	slli	r3,r2,2
    b200:	008000b4 	movhi	r2,2
    b204:	1885883a 	add	r2,r3,r2
    b208:	10a57d17 	ldw	r2,-27148(r2)
    b20c:	e0bffe15 	stw	r2,-8(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
    b210:	e0bffe17 	ldw	r2,-8(fp)
    b214:	1000071e 	bne	r2,zero,b234 <OSTaskQuery+0xc4>
    b218:	e0bfff17 	ldw	r2,-4(fp)
    b21c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    b220:	e0bffc17 	ldw	r2,-16(fp)
    b224:	1001703a 	wrctl	status,r2
}
    b228:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
    b22c:	00800a44 	movi	r2,41
    b230:	00001406 	br	b284 <OSTaskQuery+0x114>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
    b234:	e0bffe17 	ldw	r2,-8(fp)
    b238:	10800058 	cmpnei	r2,r2,1
    b23c:	1000071e 	bne	r2,zero,b25c <OSTaskQuery+0xec>
    b240:	e0bfff17 	ldw	r2,-4(fp)
    b244:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    b248:	e0bffb17 	ldw	r2,-20(fp)
    b24c:	1001703a 	wrctl	status,r2
}
    b250:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    b254:	008010c4 	movi	r2,67
    b258:	00000a06 	br	b284 <OSTaskQuery+0x114>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
    b25c:	01801b04 	movi	r6,108
    b260:	e17ffe17 	ldw	r5,-8(fp)
    b264:	e13ff817 	ldw	r4,-32(fp)
    b268:	00057c40 	call	57c4 <OS_MemCopy>
    b26c:	e0bfff17 	ldw	r2,-4(fp)
    b270:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
    b274:	e0bffa17 	ldw	r2,-24(fp)
    b278:	1001703a 	wrctl	status,r2
}
    b27c:	0001883a 	nop
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    b280:	0005883a 	mov	r2,zero
}
    b284:	e037883a 	mov	sp,fp
    b288:	dfc00117 	ldw	ra,4(sp)
    b28c:	df000017 	ldw	fp,0(sp)
    b290:	dec00204 	addi	sp,sp,8
    b294:	f800283a 	ret

0000b298 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    b298:	defffc04 	addi	sp,sp,-16
    b29c:	df000315 	stw	fp,12(sp)
    b2a0:	df000304 	addi	fp,sp,12
    b2a4:	e13fff15 	stw	r4,-4(fp)
    b2a8:	e17ffe15 	stw	r5,-8(fp)
    b2ac:	3005883a 	mov	r2,r6
    b2b0:	e0bffd0d 	sth	r2,-12(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
    b2b4:	e0bffd0b 	ldhu	r2,-12(fp)
    b2b8:	1080004c 	andi	r2,r2,1
    b2bc:	10000d26 	beq	r2,zero,b2f4 <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
    b2c0:	e0bffd0b 	ldhu	r2,-12(fp)
    b2c4:	1080008c 	andi	r2,r2,2
    b2c8:	10000a26 	beq	r2,zero,b2f4 <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
    b2cc:	00000706 	br	b2ec <OS_TaskStkClr+0x54>
                size--;
    b2d0:	e0bffe17 	ldw	r2,-8(fp)
    b2d4:	10bfffc4 	addi	r2,r2,-1
    b2d8:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
    b2dc:	e0bfff17 	ldw	r2,-4(fp)
    b2e0:	10c00104 	addi	r3,r2,4
    b2e4:	e0ffff15 	stw	r3,-4(fp)
    b2e8:	10000015 	stw	zero,0(r2)
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
    b2ec:	e0bffe17 	ldw	r2,-8(fp)
    b2f0:	103ff71e 	bne	r2,zero,b2d0 <OS_TaskStkClr+0x38>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
    b2f4:	0001883a 	nop
    b2f8:	e037883a 	mov	sp,fp
    b2fc:	df000017 	ldw	fp,0(sp)
    b300:	dec00104 	addi	sp,sp,4
    b304:	f800283a 	ret

0000b308 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
    b308:	defff904 	addi	sp,sp,-28
    b30c:	dfc00615 	stw	ra,24(sp)
    b310:	df000515 	stw	fp,20(sp)
    b314:	df000504 	addi	fp,sp,20
    b318:	2005883a 	mov	r2,r4
    b31c:	e0bffb0d 	sth	r2,-20(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    b320:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    b324:	d0a7bf43 	ldbu	r2,-24835(gp)
    b328:	10803fcc 	andi	r2,r2,255
    b32c:	1000321e 	bne	r2,zero,b3f8 <OSTimeDly+0xf0>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
    b330:	e0bffb0b 	ldhu	r2,-20(fp)
    b334:	10003126 	beq	r2,zero,b3fc <OSTimeDly+0xf4>
  NIOS2_READ_STATUS (context);
    b338:	0005303a 	rdctl	r2,status
    b33c:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b340:	e0fffd17 	ldw	r3,-12(fp)
    b344:	00bfff84 	movi	r2,-2
    b348:	1884703a 	and	r2,r3,r2
    b34c:	1001703a 	wrctl	status,r2
  return context;
    b350:	e0bffd17 	ldw	r2,-12(fp)
        OS_ENTER_CRITICAL();
    b354:	e0bfff15 	stw	r2,-4(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
    b358:	d0a7c317 	ldw	r2,-24820(gp)
    b35c:	10800d03 	ldbu	r2,52(r2)
    b360:	e0bffec5 	stb	r2,-5(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
    b364:	e0fffec3 	ldbu	r3,-5(fp)
    b368:	d0a7c084 	addi	r2,gp,-24830
    b36c:	1885883a 	add	r2,r3,r2
    b370:	10800003 	ldbu	r2,0(r2)
    b374:	1007883a 	mov	r3,r2
    b378:	d0a7c317 	ldw	r2,-24820(gp)
    b37c:	10800d43 	ldbu	r2,53(r2)
    b380:	0084303a 	nor	r2,zero,r2
    b384:	1884703a 	and	r2,r3,r2
    b388:	e0fffec3 	ldbu	r3,-5(fp)
    b38c:	1009883a 	mov	r4,r2
    b390:	d0a7c084 	addi	r2,gp,-24830
    b394:	1885883a 	add	r2,r3,r2
    b398:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
    b39c:	e0fffec3 	ldbu	r3,-5(fp)
    b3a0:	d0a7c084 	addi	r2,gp,-24830
    b3a4:	1885883a 	add	r2,r3,r2
    b3a8:	10800003 	ldbu	r2,0(r2)
    b3ac:	10803fcc 	andi	r2,r2,255
    b3b0:	1000071e 	bne	r2,zero,b3d0 <OSTimeDly+0xc8>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
    b3b4:	d0a7c317 	ldw	r2,-24820(gp)
    b3b8:	10800d83 	ldbu	r2,54(r2)
    b3bc:	0084303a 	nor	r2,zero,r2
    b3c0:	1007883a 	mov	r3,r2
    b3c4:	d0a7c043 	ldbu	r2,-24831(gp)
    b3c8:	1884703a 	and	r2,r3,r2
    b3cc:	d0a7c045 	stb	r2,-24831(gp)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
    b3d0:	d0a7c317 	ldw	r2,-24820(gp)
    b3d4:	e0fffb0b 	ldhu	r3,-20(fp)
    b3d8:	10c00b8d 	sth	r3,46(r2)
    b3dc:	e0bfff17 	ldw	r2,-4(fp)
    b3e0:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    b3e4:	e0bffc17 	ldw	r2,-16(fp)
    b3e8:	1001703a 	wrctl	status,r2
}
    b3ec:	0001883a 	nop
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    b3f0:	00058300 	call	5830 <OS_Sched>
    b3f4:	00000106 	br	b3fc <OSTimeDly+0xf4>
        return;
    b3f8:	0001883a 	nop
    }
}
    b3fc:	e037883a 	mov	sp,fp
    b400:	dfc00117 	ldw	ra,4(sp)
    b404:	df000017 	ldw	fp,0(sp)
    b408:	dec00204 	addi	sp,sp,8
    b40c:	f800283a 	ret

0000b410 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
    b410:	defff804 	addi	sp,sp,-32
    b414:	dfc00715 	stw	ra,28(sp)
    b418:	df000615 	stw	fp,24(sp)
    b41c:	df000604 	addi	fp,sp,24
    b420:	2005883a 	mov	r2,r4
    b424:	3009883a 	mov	r4,r6
    b428:	3807883a 	mov	r3,r7
    b42c:	e0bffd05 	stb	r2,-12(fp)
    b430:	2805883a 	mov	r2,r5
    b434:	e0bffc05 	stb	r2,-16(fp)
    b438:	2005883a 	mov	r2,r4
    b43c:	e0bffb05 	stb	r2,-20(fp)
    b440:	1805883a 	mov	r2,r3
    b444:	e0bffa0d 	sth	r2,-24(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    b448:	d0a7bf43 	ldbu	r2,-24835(gp)
    b44c:	10803fcc 	andi	r2,r2,255
    b450:	10000226 	beq	r2,zero,b45c <OSTimeDlyHMSM+0x4c>
        return (OS_ERR_TIME_DLY_ISR);
    b454:	00801544 	movi	r2,85
    b458:	00003d06 	br	b550 <OSTimeDlyHMSM+0x140>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
    b45c:	e0bffd03 	ldbu	r2,-12(fp)
    b460:	1000081e 	bne	r2,zero,b484 <OSTimeDlyHMSM+0x74>
        if (minutes == 0) {
    b464:	e0bffc03 	ldbu	r2,-16(fp)
    b468:	1000061e 	bne	r2,zero,b484 <OSTimeDlyHMSM+0x74>
            if (seconds == 0) {
    b46c:	e0bffb03 	ldbu	r2,-20(fp)
    b470:	1000041e 	bne	r2,zero,b484 <OSTimeDlyHMSM+0x74>
                if (ms == 0) {
    b474:	e0bffa0b 	ldhu	r2,-24(fp)
    b478:	1000021e 	bne	r2,zero,b484 <OSTimeDlyHMSM+0x74>
                    return (OS_ERR_TIME_ZERO_DLY);
    b47c:	00801504 	movi	r2,84
    b480:	00003306 	br	b550 <OSTimeDlyHMSM+0x140>
                }
            }
        }
    }
    if (minutes > 59) {
    b484:	e0bffc03 	ldbu	r2,-16(fp)
    b488:	10800f30 	cmpltui	r2,r2,60
    b48c:	1000021e 	bne	r2,zero,b498 <OSTimeDlyHMSM+0x88>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
    b490:	00801444 	movi	r2,81
    b494:	00002e06 	br	b550 <OSTimeDlyHMSM+0x140>
    }
    if (seconds > 59) {
    b498:	e0bffb03 	ldbu	r2,-20(fp)
    b49c:	10800f30 	cmpltui	r2,r2,60
    b4a0:	1000021e 	bne	r2,zero,b4ac <OSTimeDlyHMSM+0x9c>
        return (OS_ERR_TIME_INVALID_SECONDS);
    b4a4:	00801484 	movi	r2,82
    b4a8:	00002906 	br	b550 <OSTimeDlyHMSM+0x140>
    }
    if (ms > 999) {
    b4ac:	e0bffa0b 	ldhu	r2,-24(fp)
    b4b0:	1080fa30 	cmpltui	r2,r2,1000
    b4b4:	1000021e 	bne	r2,zero,b4c0 <OSTimeDlyHMSM+0xb0>
        return (OS_ERR_TIME_INVALID_MS);
    b4b8:	008014c4 	movi	r2,83
    b4bc:	00002406 	br	b550 <OSTimeDlyHMSM+0x140>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
    b4c0:	e0bffd03 	ldbu	r2,-12(fp)
    b4c4:	10c38424 	muli	r3,r2,3600
    b4c8:	e0bffc03 	ldbu	r2,-16(fp)
    b4cc:	10800f24 	muli	r2,r2,60
    b4d0:	1887883a 	add	r3,r3,r2
    b4d4:	e0bffb03 	ldbu	r2,-20(fp)
    b4d8:	1885883a 	add	r2,r3,r2
    b4dc:	100690fa 	slli	r3,r2,3
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    b4e0:	e0bffa0b 	ldhu	r2,-24(fp)
    b4e4:	10800f84 	addi	r2,r2,62
    b4e8:	100890fa 	slli	r4,r2,3
    b4ec:	0080fa04 	movi	r2,1000
    b4f0:	2085203a 	divu	r2,r4,r2
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
    b4f4:	1885883a 	add	r2,r3,r2
    b4f8:	e0bffe15 	stw	r2,-8(fp)
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    b4fc:	e0bffe17 	ldw	r2,-8(fp)
    b500:	1004d43a 	srli	r2,r2,16
    b504:	e0bfff8d 	sth	r2,-2(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    b508:	e0bffe17 	ldw	r2,-8(fp)
    b50c:	10bfffcc 	andi	r2,r2,65535
    b510:	e0bffe15 	stw	r2,-8(fp)
    OSTimeDly((INT16U)ticks);
    b514:	e0bffe17 	ldw	r2,-8(fp)
    b518:	10bfffcc 	andi	r2,r2,65535
    b51c:	1009883a 	mov	r4,r2
    b520:	000b3080 	call	b308 <OSTimeDly>
    while (loops > 0) {
    b524:	00000706 	br	b544 <OSTimeDlyHMSM+0x134>
        OSTimeDly((INT16U)32768u);
    b528:	01200014 	movui	r4,32768
    b52c:	000b3080 	call	b308 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
    b530:	01200014 	movui	r4,32768
    b534:	000b3080 	call	b308 <OSTimeDly>
        loops--;
    b538:	e0bfff8b 	ldhu	r2,-2(fp)
    b53c:	10bfffc4 	addi	r2,r2,-1
    b540:	e0bfff8d 	sth	r2,-2(fp)
    while (loops > 0) {
    b544:	e0bfff8b 	ldhu	r2,-2(fp)
    b548:	103ff71e 	bne	r2,zero,b528 <OSTimeDlyHMSM+0x118>
    }
    return (OS_ERR_NONE);
    b54c:	0005883a 	mov	r2,zero
}
    b550:	e037883a 	mov	sp,fp
    b554:	dfc00117 	ldw	ra,4(sp)
    b558:	df000017 	ldw	fp,0(sp)
    b55c:	dec00204 	addi	sp,sp,8
    b560:	f800283a 	ret

0000b564 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
    b564:	defff504 	addi	sp,sp,-44
    b568:	dfc00a15 	stw	ra,40(sp)
    b56c:	df000915 	stw	fp,36(sp)
    b570:	df000904 	addi	fp,sp,36
    b574:	2005883a 	mov	r2,r4
    b578:	e0bff705 	stb	r2,-36(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    b57c:	e03fff15 	stw	zero,-4(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
    b580:	e0bff703 	ldbu	r2,-36(fp)
    b584:	10800530 	cmpltui	r2,r2,20
    b588:	1000021e 	bne	r2,zero,b594 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
    b58c:	00800a84 	movi	r2,42
    b590:	00006706 	br	b730 <OSTimeDlyResume+0x1cc>
  NIOS2_READ_STATUS (context);
    b594:	0005303a 	rdctl	r2,status
    b598:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b59c:	e0fffd17 	ldw	r3,-12(fp)
    b5a0:	00bfff84 	movi	r2,-2
    b5a4:	1884703a 	and	r2,r3,r2
    b5a8:	1001703a 	wrctl	status,r2
  return context;
    b5ac:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    b5b0:	e0bfff15 	stw	r2,-4(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
    b5b4:	e0bff703 	ldbu	r2,-36(fp)
    b5b8:	100690ba 	slli	r3,r2,2
    b5bc:	008000b4 	movhi	r2,2
    b5c0:	1885883a 	add	r2,r3,r2
    b5c4:	10a57d17 	ldw	r2,-27148(r2)
    b5c8:	e0bffe15 	stw	r2,-8(fp)
    if (ptcb == (OS_TCB *)0) {
    b5cc:	e0bffe17 	ldw	r2,-8(fp)
    b5d0:	1000071e 	bne	r2,zero,b5f0 <OSTimeDlyResume+0x8c>
    b5d4:	e0bfff17 	ldw	r2,-4(fp)
    b5d8:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    b5dc:	e0bffc17 	ldw	r2,-16(fp)
    b5e0:	1001703a 	wrctl	status,r2
}
    b5e4:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
    b5e8:	008010c4 	movi	r2,67
    b5ec:	00005006 	br	b730 <OSTimeDlyResume+0x1cc>
    }
    if (ptcb == OS_TCB_RESERVED) {
    b5f0:	e0bffe17 	ldw	r2,-8(fp)
    b5f4:	10800058 	cmpnei	r2,r2,1
    b5f8:	1000071e 	bne	r2,zero,b618 <OSTimeDlyResume+0xb4>
    b5fc:	e0bfff17 	ldw	r2,-4(fp)
    b600:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    b604:	e0bffb17 	ldw	r2,-20(fp)
    b608:	1001703a 	wrctl	status,r2
}
    b60c:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
    b610:	008010c4 	movi	r2,67
    b614:	00004606 	br	b730 <OSTimeDlyResume+0x1cc>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
    b618:	e0bffe17 	ldw	r2,-8(fp)
    b61c:	10800b8b 	ldhu	r2,46(r2)
    b620:	10bfffcc 	andi	r2,r2,65535
    b624:	1000071e 	bne	r2,zero,b644 <OSTimeDlyResume+0xe0>
    b628:	e0bfff17 	ldw	r2,-4(fp)
    b62c:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
    b630:	e0bffa17 	ldw	r2,-24(fp)
    b634:	1001703a 	wrctl	status,r2
}
    b638:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
    b63c:	00801404 	movi	r2,80
    b640:	00003b06 	br	b730 <OSTimeDlyResume+0x1cc>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
    b644:	e0bffe17 	ldw	r2,-8(fp)
    b648:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
    b64c:	e0bffe17 	ldw	r2,-8(fp)
    b650:	10800c03 	ldbu	r2,48(r2)
    b654:	10803fcc 	andi	r2,r2,255
    b658:	10800dcc 	andi	r2,r2,55
    b65c:	10000b26 	beq	r2,zero,b68c <OSTimeDlyResume+0x128>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
    b660:	e0bffe17 	ldw	r2,-8(fp)
    b664:	10c00c03 	ldbu	r3,48(r2)
    b668:	00bff204 	movi	r2,-56
    b66c:	1884703a 	and	r2,r3,r2
    b670:	1007883a 	mov	r3,r2
    b674:	e0bffe17 	ldw	r2,-8(fp)
    b678:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
    b67c:	e0bffe17 	ldw	r2,-8(fp)
    b680:	00c00044 	movi	r3,1
    b684:	10c00c45 	stb	r3,49(r2)
    b688:	00000206 	br	b694 <OSTimeDlyResume+0x130>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
    b68c:	e0bffe17 	ldw	r2,-8(fp)
    b690:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
    b694:	e0bffe17 	ldw	r2,-8(fp)
    b698:	10800c03 	ldbu	r2,48(r2)
    b69c:	10803fcc 	andi	r2,r2,255
    b6a0:	1080020c 	andi	r2,r2,8
    b6a4:	10001c1e 	bne	r2,zero,b718 <OSTimeDlyResume+0x1b4>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
    b6a8:	e0bffe17 	ldw	r2,-8(fp)
    b6ac:	10c00d83 	ldbu	r3,54(r2)
    b6b0:	d0a7c043 	ldbu	r2,-24831(gp)
    b6b4:	1884b03a 	or	r2,r3,r2
    b6b8:	d0a7c045 	stb	r2,-24831(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    b6bc:	e0bffe17 	ldw	r2,-8(fp)
    b6c0:	10800d03 	ldbu	r2,52(r2)
    b6c4:	10c03fcc 	andi	r3,r2,255
    b6c8:	d0a7c084 	addi	r2,gp,-24830
    b6cc:	1885883a 	add	r2,r3,r2
    b6d0:	11000003 	ldbu	r4,0(r2)
    b6d4:	e0bffe17 	ldw	r2,-8(fp)
    b6d8:	10800d43 	ldbu	r2,53(r2)
    b6dc:	e0fffe17 	ldw	r3,-8(fp)
    b6e0:	18c00d03 	ldbu	r3,52(r3)
    b6e4:	18c03fcc 	andi	r3,r3,255
    b6e8:	2084b03a 	or	r2,r4,r2
    b6ec:	1009883a 	mov	r4,r2
    b6f0:	d0a7c084 	addi	r2,gp,-24830
    b6f4:	1885883a 	add	r2,r3,r2
    b6f8:	11000005 	stb	r4,0(r2)
    b6fc:	e0bfff17 	ldw	r2,-4(fp)
    b700:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
    b704:	e0bff917 	ldw	r2,-28(fp)
    b708:	1001703a 	wrctl	status,r2
}
    b70c:	0001883a 	nop
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
    b710:	00058300 	call	5830 <OS_Sched>
    b714:	00000506 	br	b72c <OSTimeDlyResume+0x1c8>
    b718:	e0bfff17 	ldw	r2,-4(fp)
    b71c:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
    b720:	e0bff817 	ldw	r2,-32(fp)
    b724:	1001703a 	wrctl	status,r2
}
    b728:	0001883a 	nop
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
    b72c:	0005883a 	mov	r2,zero
}
    b730:	e037883a 	mov	sp,fp
    b734:	dfc00117 	ldw	ra,4(sp)
    b738:	df000017 	ldw	fp,0(sp)
    b73c:	dec00204 	addi	sp,sp,8
    b740:	f800283a 	ret

0000b744 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
    b744:	defffb04 	addi	sp,sp,-20
    b748:	df000415 	stw	fp,16(sp)
    b74c:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    b750:	e03fff15 	stw	zero,-4(fp)
  NIOS2_READ_STATUS (context);
    b754:	0005303a 	rdctl	r2,status
    b758:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b75c:	e0fffc17 	ldw	r3,-16(fp)
    b760:	00bfff84 	movi	r2,-2
    b764:	1884703a 	and	r2,r3,r2
    b768:	1001703a 	wrctl	status,r2
  return context;
    b76c:	e0bffc17 	ldw	r2,-16(fp)
#endif



    OS_ENTER_CRITICAL();
    b770:	e0bfff15 	stw	r2,-4(fp)
    ticks = OSTime;
    b774:	d0a7ca17 	ldw	r2,-24792(gp)
    b778:	e0bffe15 	stw	r2,-8(fp)
    b77c:	e0bfff17 	ldw	r2,-4(fp)
    b780:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
    b784:	e0bffd17 	ldw	r2,-12(fp)
    b788:	1001703a 	wrctl	status,r2
}
    b78c:	0001883a 	nop
    OS_EXIT_CRITICAL();
    return (ticks);
    b790:	e0bffe17 	ldw	r2,-8(fp)
}
    b794:	e037883a 	mov	sp,fp
    b798:	df000017 	ldw	fp,0(sp)
    b79c:	dec00104 	addi	sp,sp,4
    b7a0:	f800283a 	ret

0000b7a4 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
    b7a4:	defffb04 	addi	sp,sp,-20
    b7a8:	df000415 	stw	fp,16(sp)
    b7ac:	df000404 	addi	fp,sp,16
    b7b0:	e13ffc15 	stw	r4,-16(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    b7b4:	e03fff15 	stw	zero,-4(fp)
  NIOS2_READ_STATUS (context);
    b7b8:	0005303a 	rdctl	r2,status
    b7bc:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b7c0:	e0fffd17 	ldw	r3,-12(fp)
    b7c4:	00bfff84 	movi	r2,-2
    b7c8:	1884703a 	and	r2,r3,r2
    b7cc:	1001703a 	wrctl	status,r2
  return context;
    b7d0:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
    b7d4:	e0bfff15 	stw	r2,-4(fp)
    OSTime = ticks;
    b7d8:	e0bffc17 	ldw	r2,-16(fp)
    b7dc:	d0a7ca15 	stw	r2,-24792(gp)
    b7e0:	e0bfff17 	ldw	r2,-4(fp)
    b7e4:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
    b7e8:	e0bffe17 	ldw	r2,-8(fp)
    b7ec:	1001703a 	wrctl	status,r2
}
    b7f0:	0001883a 	nop
    OS_EXIT_CRITICAL();
}
    b7f4:	0001883a 	nop
    b7f8:	e037883a 	mov	sp,fp
    b7fc:	df000017 	ldw	fp,0(sp)
    b800:	dec00104 	addi	sp,sp,4
    b804:	f800283a 	ret

0000b808 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    b808:	defffd04 	addi	sp,sp,-12
    b80c:	dfc00215 	stw	ra,8(sp)
    b810:	df000115 	stw	fp,4(sp)
    b814:	df000104 	addi	fp,sp,4
    b818:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    b81c:	d1600604 	addi	r5,gp,-32744
    b820:	e13fff17 	ldw	r4,-4(fp)
    b824:	000e2fc0 	call	e2fc <alt_dev_llist_insert>
}
    b828:	e037883a 	mov	sp,fp
    b82c:	dfc00117 	ldw	ra,4(sp)
    b830:	df000017 	ldw	fp,0(sp)
    b834:	dec00204 	addi	sp,sp,8
    b838:	f800283a 	ret

0000b83c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    b83c:	defffd04 	addi	sp,sp,-12
    b840:	dfc00215 	stw	ra,8(sp)
    b844:	df000115 	stw	fp,4(sp)
    b848:	df000104 	addi	fp,sp,4
    b84c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, Nios2);
    b850:	000ebd00 	call	ebd0 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    b854:	00800044 	movi	r2,1
    b858:	1001703a 	wrctl	status,r2
}
    b85c:	0001883a 	nop
    alt_irq_cpu_enable_interrupts();
}
    b860:	0001883a 	nop
    b864:	e037883a 	mov	sp,fp
    b868:	dfc00117 	ldw	ra,4(sp)
    b86c:	df000017 	ldw	fp,0(sp)
    b870:	dec00204 	addi	sp,sp,8
    b874:	f800283a 	ret

0000b878 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    b878:	defffb04 	addi	sp,sp,-20
    b87c:	dfc00415 	stw	ra,16(sp)
    b880:	df000315 	stw	fp,12(sp)
    b884:	df000304 	addi	fp,sp,12
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
    b888:	01c00204 	movi	r7,8
    b88c:	000d883a 	mov	r6,zero
    b890:	000b883a 	mov	r5,zero
    b894:	013fc834 	movhi	r4,65312
    b898:	21080004 	addi	r4,r4,8192
    b89c:	000ce240 	call	ce24 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER_2, Interval_Timer_2);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
    b8a0:	01800204 	movi	r6,8
    b8a4:	000b883a 	mov	r5,zero
    b8a8:	01000074 	movhi	r4,1
    b8ac:	21012404 	addi	r4,r4,1168
    b8b0:	000c1b00 	call	c1b0 <altera_avalon_jtag_uart_init>
    b8b4:	01000074 	movhi	r4,1
    b8b8:	21011a04 	addi	r4,r4,1128
    b8bc:	000b8080 	call	b808 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, SysID);
    b8c0:	0001883a 	nop
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, AV_Config);
    b8c4:	01000074 	movhi	r4,1
    b8c8:	21053504 	addi	r4,r4,5332
    b8cc:	000b8080 	call	b808 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_SUBSYSTEM_AUDIO, Audio_Subsystem_Audio);
    b8d0:	01000074 	movhi	r4,1
    b8d4:	21054104 	addi	r4,r4,5380
    b8d8:	000b8080 	call	b808 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHAR_LCD_16X2, Char_LCD_16x2);
    b8dc:	01000074 	movhi	r4,1
    b8e0:	21054d04 	addi	r4,r4,5428
    b8e4:	000cf540 	call	cf54 <alt_up_character_lcd_init>
    b8e8:	01000074 	movhi	r4,1
    b8ec:	21054d04 	addi	r4,r4,5428
    b8f0:	000b8080 	call	b808 <alt_dev_reg>
    ALTERA_UP_AVALON_IRDA_INIT ( IRDA, IrDA);
    b8f4:	01000074 	movhi	r4,1
    b8f8:	21055804 	addi	r4,r4,5472
    b8fc:	000b8080 	call	b808 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT, PS2_Port);
    b900:	01000074 	movhi	r4,1
    b904:	21056304 	addi	r4,r4,5516
    b908:	000d8500 	call	d850 <alt_up_ps2_init>
    b90c:	01000074 	movhi	r4,1
    b910:	21056304 	addi	r4,r4,5516
    b914:	000b8080 	call	b808 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT_DUAL, PS2_Port_Dual);
    b918:	01000074 	movhi	r4,1
    b91c:	21057104 	addi	r4,r4,5572
    b920:	000d8500 	call	d850 <alt_up_ps2_init>
    b924:	01000074 	movhi	r4,1
    b928:	21057104 	addi	r4,r4,5572
    b92c:	000b8080 	call	b808 <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
    b930:	01000074 	movhi	r4,1
    b934:	21057f04 	addi	r4,r4,5628
    b938:	000b8080 	call	b808 <alt_dev_reg>
    ALTERA_UP_AVALON_USB_INIT ( USB, USB);
    b93c:	01000074 	movhi	r4,1
    b940:	21058a04 	addi	r4,r4,5672
    b944:	000b8080 	call	b808 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_DMA_CONTROLLER_INIT ( VGA_SUBSYSTEM_CHAR_BUF_SUBSYSTEM_CHAR_BUF_DMA, VGA_Subsystem_Char_Buf_Subsystem_Char_Buf_DMA);
    b948:	00800074 	movhi	r2,1
    b94c:	1085a117 	ldw	r2,5764(r2)
    b950:	10800017 	ldw	r2,0(r2)
    b954:	1007883a 	mov	r3,r2
    b958:	00800074 	movhi	r2,1
    b95c:	10c5a215 	stw	r3,5768(r2)
    b960:	00800074 	movhi	r2,1
    b964:	1085a117 	ldw	r2,5764(r2)
    b968:	10800104 	addi	r2,r2,4
    b96c:	10800017 	ldw	r2,0(r2)
    b970:	1007883a 	mov	r3,r2
    b974:	00800074 	movhi	r2,1
    b978:	10c5a315 	stw	r3,5772(r2)
    b97c:	00800074 	movhi	r2,1
    b980:	1085a117 	ldw	r2,5764(r2)
    b984:	10800204 	addi	r2,r2,8
    b988:	10800017 	ldw	r2,0(r2)
    b98c:	10ffffcc 	andi	r3,r2,65535
    b990:	00800074 	movhi	r2,1
    b994:	10c5a815 	stw	r3,5792(r2)
    b998:	00800074 	movhi	r2,1
    b99c:	1085a117 	ldw	r2,5764(r2)
    b9a0:	10800204 	addi	r2,r2,8
    b9a4:	10800017 	ldw	r2,0(r2)
    b9a8:	1006d43a 	srli	r3,r2,16
    b9ac:	00800074 	movhi	r2,1
    b9b0:	10c5a915 	stw	r3,5796(r2)
    b9b4:	00800074 	movhi	r2,1
    b9b8:	1085a117 	ldw	r2,5764(r2)
    b9bc:	10800304 	addi	r2,r2,12
    b9c0:	10800017 	ldw	r2,0(r2)
    b9c4:	1005d07a 	srai	r2,r2,1
    b9c8:	10c0004c 	andi	r3,r2,1
    b9cc:	00800074 	movhi	r2,1
    b9d0:	10c5a415 	stw	r3,5776(r2)
    b9d4:	00800074 	movhi	r2,1
    b9d8:	1085a117 	ldw	r2,5764(r2)
    b9dc:	10800304 	addi	r2,r2,12
    b9e0:	10800017 	ldw	r2,0(r2)
    b9e4:	1005d23a 	srai	r2,r2,8
    b9e8:	108003cc 	andi	r2,r2,15
    b9ec:	10800044 	addi	r2,r2,1
    b9f0:	1007883a 	mov	r3,r2
    b9f4:	00800074 	movhi	r2,1
    b9f8:	10c5a515 	stw	r3,5780(r2)
    b9fc:	00800074 	movhi	r2,1
    ba00:	1085a117 	ldw	r2,5764(r2)
    ba04:	10800304 	addi	r2,r2,12
    ba08:	10800017 	ldw	r2,0(r2)
    ba0c:	1005d1ba 	srai	r2,r2,6
    ba10:	108000cc 	andi	r2,r2,3
    ba14:	10800044 	addi	r2,r2,1
    ba18:	1007883a 	mov	r3,r2
    ba1c:	00800074 	movhi	r2,1
    ba20:	10c5a615 	stw	r3,5784(r2)
    ba24:	00800074 	movhi	r2,1
    ba28:	1085a517 	ldw	r2,5780(r2)
    ba2c:	1007883a 	mov	r3,r2
    ba30:	00800074 	movhi	r2,1
    ba34:	1085a617 	ldw	r2,5784(r2)
    ba38:	1885383a 	mul	r2,r3,r2
    ba3c:	e0bfffc5 	stb	r2,-1(fp)
    ba40:	e0bfffc3 	ldbu	r2,-1(fp)
    ba44:	10800268 	cmpgeui	r2,r2,9
    ba48:	1000041e 	bne	r2,zero,ba5c <alt_sys_init+0x1e4>
    ba4c:	00c00044 	movi	r3,1
    ba50:	00800074 	movhi	r2,1
    ba54:	10c5a715 	stw	r3,5788(r2)
    ba58:	00000a06 	br	ba84 <alt_sys_init+0x20c>
    ba5c:	e0bfffc3 	ldbu	r2,-1(fp)
    ba60:	10800468 	cmpgeui	r2,r2,17
    ba64:	1000041e 	bne	r2,zero,ba78 <alt_sys_init+0x200>
    ba68:	00c00084 	movi	r3,2
    ba6c:	00800074 	movhi	r2,1
    ba70:	10c5a715 	stw	r3,5788(r2)
    ba74:	00000306 	br	ba84 <alt_sys_init+0x20c>
    ba78:	00c00104 	movi	r3,4
    ba7c:	00800074 	movhi	r2,1
    ba80:	10c5a715 	stw	r3,5788(r2)
    ba84:	00800074 	movhi	r2,1
    ba88:	1085a117 	ldw	r2,5764(r2)
    ba8c:	10800304 	addi	r2,r2,12
    ba90:	10800017 	ldw	r2,0(r2)
    ba94:	1005d43a 	srai	r2,r2,16
    ba98:	e0bfff85 	stb	r2,-2(fp)
    ba9c:	00800074 	movhi	r2,1
    baa0:	1085a117 	ldw	r2,5764(r2)
    baa4:	10800304 	addi	r2,r2,12
    baa8:	10800017 	ldw	r2,0(r2)
    baac:	1004d63a 	srli	r2,r2,24
    bab0:	e0bfff45 	stb	r2,-3(fp)
    bab4:	00800074 	movhi	r2,1
    bab8:	1085a717 	ldw	r2,5788(r2)
    babc:	10800058 	cmpnei	r2,r2,1
    bac0:	1000031e 	bne	r2,zero,bad0 <alt_sys_init+0x258>
    bac4:	00800074 	movhi	r2,1
    bac8:	1005aa15 	stw	zero,5800(r2)
    bacc:	00000b06 	br	bafc <alt_sys_init+0x284>
    bad0:	00800074 	movhi	r2,1
    bad4:	1085a717 	ldw	r2,5788(r2)
    bad8:	10800098 	cmpnei	r2,r2,2
    badc:	1000041e 	bne	r2,zero,baf0 <alt_sys_init+0x278>
    bae0:	00c00044 	movi	r3,1
    bae4:	00800074 	movhi	r2,1
    bae8:	10c5aa15 	stw	r3,5800(r2)
    baec:	00000306 	br	bafc <alt_sys_init+0x284>
    baf0:	00c00084 	movi	r3,2
    baf4:	00800074 	movhi	r2,1
    baf8:	10c5aa15 	stw	r3,5800(r2)
    bafc:	e0bfff83 	ldbu	r2,-2(fp)
    bb00:	00c00804 	movi	r3,32
    bb04:	1885c83a 	sub	r2,r3,r2
    bb08:	00ffffc4 	movi	r3,-1
    bb0c:	1886d83a 	srl	r3,r3,r2
    bb10:	00800074 	movhi	r2,1
    bb14:	10c5ab15 	stw	r3,5804(r2)
    bb18:	e0ffff83 	ldbu	r3,-2(fp)
    bb1c:	00800074 	movhi	r2,1
    bb20:	1085aa17 	ldw	r2,5800(r2)
    bb24:	1887883a 	add	r3,r3,r2
    bb28:	00800074 	movhi	r2,1
    bb2c:	10c5ac15 	stw	r3,5808(r2)
    bb30:	e0bfff43 	ldbu	r2,-3(fp)
    bb34:	00c00804 	movi	r3,32
    bb38:	1885c83a 	sub	r2,r3,r2
    bb3c:	00ffffc4 	movi	r3,-1
    bb40:	1886d83a 	srl	r3,r3,r2
    bb44:	00800074 	movhi	r2,1
    bb48:	10c5ad15 	stw	r3,5812(r2)
    bb4c:	01000074 	movhi	r4,1
    bb50:	21059704 	addi	r4,r4,5724
    bb54:	000b8080 	call	b808 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_DMA_CONTROLLER_INIT ( VGA_SUBSYSTEM_VGA_PIXEL_DMA, VGA_Subsystem_VGA_Pixel_DMA);
    bb58:	00800074 	movhi	r2,1
    bb5c:	1085b817 	ldw	r2,5856(r2)
    bb60:	10800017 	ldw	r2,0(r2)
    bb64:	1007883a 	mov	r3,r2
    bb68:	00800074 	movhi	r2,1
    bb6c:	10c5b915 	stw	r3,5860(r2)
    bb70:	00800074 	movhi	r2,1
    bb74:	1085b817 	ldw	r2,5856(r2)
    bb78:	10800104 	addi	r2,r2,4
    bb7c:	10800017 	ldw	r2,0(r2)
    bb80:	1007883a 	mov	r3,r2
    bb84:	00800074 	movhi	r2,1
    bb88:	10c5ba15 	stw	r3,5864(r2)
    bb8c:	00800074 	movhi	r2,1
    bb90:	1085b817 	ldw	r2,5856(r2)
    bb94:	10800204 	addi	r2,r2,8
    bb98:	10800017 	ldw	r2,0(r2)
    bb9c:	10ffffcc 	andi	r3,r2,65535
    bba0:	00800074 	movhi	r2,1
    bba4:	10c5bf15 	stw	r3,5884(r2)
    bba8:	00800074 	movhi	r2,1
    bbac:	1085b817 	ldw	r2,5856(r2)
    bbb0:	10800204 	addi	r2,r2,8
    bbb4:	10800017 	ldw	r2,0(r2)
    bbb8:	1006d43a 	srli	r3,r2,16
    bbbc:	00800074 	movhi	r2,1
    bbc0:	10c5c015 	stw	r3,5888(r2)
    bbc4:	00800074 	movhi	r2,1
    bbc8:	1085b817 	ldw	r2,5856(r2)
    bbcc:	10800304 	addi	r2,r2,12
    bbd0:	10800017 	ldw	r2,0(r2)
    bbd4:	1005d07a 	srai	r2,r2,1
    bbd8:	10c0004c 	andi	r3,r2,1
    bbdc:	00800074 	movhi	r2,1
    bbe0:	10c5bb15 	stw	r3,5868(r2)
    bbe4:	00800074 	movhi	r2,1
    bbe8:	1085b817 	ldw	r2,5856(r2)
    bbec:	10800304 	addi	r2,r2,12
    bbf0:	10800017 	ldw	r2,0(r2)
    bbf4:	1005d23a 	srai	r2,r2,8
    bbf8:	108003cc 	andi	r2,r2,15
    bbfc:	10800044 	addi	r2,r2,1
    bc00:	1007883a 	mov	r3,r2
    bc04:	00800074 	movhi	r2,1
    bc08:	10c5bc15 	stw	r3,5872(r2)
    bc0c:	00800074 	movhi	r2,1
    bc10:	1085b817 	ldw	r2,5856(r2)
    bc14:	10800304 	addi	r2,r2,12
    bc18:	10800017 	ldw	r2,0(r2)
    bc1c:	1005d1ba 	srai	r2,r2,6
    bc20:	108000cc 	andi	r2,r2,3
    bc24:	10800044 	addi	r2,r2,1
    bc28:	1007883a 	mov	r3,r2
    bc2c:	00800074 	movhi	r2,1
    bc30:	10c5bd15 	stw	r3,5876(r2)
    bc34:	00800074 	movhi	r2,1
    bc38:	1085bc17 	ldw	r2,5872(r2)
    bc3c:	1007883a 	mov	r3,r2
    bc40:	00800074 	movhi	r2,1
    bc44:	1085bd17 	ldw	r2,5876(r2)
    bc48:	1885383a 	mul	r2,r3,r2
    bc4c:	e0bfff05 	stb	r2,-4(fp)
    bc50:	e0bfff03 	ldbu	r2,-4(fp)
    bc54:	10800268 	cmpgeui	r2,r2,9
    bc58:	1000041e 	bne	r2,zero,bc6c <alt_sys_init+0x3f4>
    bc5c:	00c00044 	movi	r3,1
    bc60:	00800074 	movhi	r2,1
    bc64:	10c5be15 	stw	r3,5880(r2)
    bc68:	00000a06 	br	bc94 <alt_sys_init+0x41c>
    bc6c:	e0bfff03 	ldbu	r2,-4(fp)
    bc70:	10800468 	cmpgeui	r2,r2,17
    bc74:	1000041e 	bne	r2,zero,bc88 <alt_sys_init+0x410>
    bc78:	00c00084 	movi	r3,2
    bc7c:	00800074 	movhi	r2,1
    bc80:	10c5be15 	stw	r3,5880(r2)
    bc84:	00000306 	br	bc94 <alt_sys_init+0x41c>
    bc88:	00c00104 	movi	r3,4
    bc8c:	00800074 	movhi	r2,1
    bc90:	10c5be15 	stw	r3,5880(r2)
    bc94:	00800074 	movhi	r2,1
    bc98:	1085b817 	ldw	r2,5856(r2)
    bc9c:	10800304 	addi	r2,r2,12
    bca0:	10800017 	ldw	r2,0(r2)
    bca4:	1005d43a 	srai	r2,r2,16
    bca8:	e0bffec5 	stb	r2,-5(fp)
    bcac:	00800074 	movhi	r2,1
    bcb0:	1085b817 	ldw	r2,5856(r2)
    bcb4:	10800304 	addi	r2,r2,12
    bcb8:	10800017 	ldw	r2,0(r2)
    bcbc:	1004d63a 	srli	r2,r2,24
    bcc0:	e0bffe85 	stb	r2,-6(fp)
    bcc4:	00800074 	movhi	r2,1
    bcc8:	1085be17 	ldw	r2,5880(r2)
    bccc:	10800058 	cmpnei	r2,r2,1
    bcd0:	1000031e 	bne	r2,zero,bce0 <alt_sys_init+0x468>
    bcd4:	00800074 	movhi	r2,1
    bcd8:	1005c115 	stw	zero,5892(r2)
    bcdc:	00000b06 	br	bd0c <alt_sys_init+0x494>
    bce0:	00800074 	movhi	r2,1
    bce4:	1085be17 	ldw	r2,5880(r2)
    bce8:	10800098 	cmpnei	r2,r2,2
    bcec:	1000041e 	bne	r2,zero,bd00 <alt_sys_init+0x488>
    bcf0:	00c00044 	movi	r3,1
    bcf4:	00800074 	movhi	r2,1
    bcf8:	10c5c115 	stw	r3,5892(r2)
    bcfc:	00000306 	br	bd0c <alt_sys_init+0x494>
    bd00:	00c00084 	movi	r3,2
    bd04:	00800074 	movhi	r2,1
    bd08:	10c5c115 	stw	r3,5892(r2)
    bd0c:	e0bffec3 	ldbu	r2,-5(fp)
    bd10:	00c00804 	movi	r3,32
    bd14:	1885c83a 	sub	r2,r3,r2
    bd18:	00ffffc4 	movi	r3,-1
    bd1c:	1886d83a 	srl	r3,r3,r2
    bd20:	00800074 	movhi	r2,1
    bd24:	10c5c215 	stw	r3,5896(r2)
    bd28:	e0fffec3 	ldbu	r3,-5(fp)
    bd2c:	00800074 	movhi	r2,1
    bd30:	1085c117 	ldw	r2,5892(r2)
    bd34:	1887883a 	add	r3,r3,r2
    bd38:	00800074 	movhi	r2,1
    bd3c:	10c5c315 	stw	r3,5900(r2)
    bd40:	e0bffe83 	ldbu	r2,-6(fp)
    bd44:	00c00804 	movi	r3,32
    bd48:	1885c83a 	sub	r2,r3,r2
    bd4c:	00ffffc4 	movi	r3,-1
    bd50:	1886d83a 	srl	r3,r3,r2
    bd54:	00800074 	movhi	r2,1
    bd58:	10c5c415 	stw	r3,5904(r2)
    bd5c:	01000074 	movhi	r4,1
    bd60:	2105ae04 	addi	r4,r4,5816
    bd64:	000b8080 	call	b808 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_DMA_CONTROLLER_INIT ( VIDEO_IN_SUBSYSTEM_VIDEO_IN_DMA, Video_In_Subsystem_Video_In_DMA);
    bd68:	00800074 	movhi	r2,1
    bd6c:	1085cf17 	ldw	r2,5948(r2)
    bd70:	10800017 	ldw	r2,0(r2)
    bd74:	1007883a 	mov	r3,r2
    bd78:	00800074 	movhi	r2,1
    bd7c:	10c5d015 	stw	r3,5952(r2)
    bd80:	00800074 	movhi	r2,1
    bd84:	1085cf17 	ldw	r2,5948(r2)
    bd88:	10800104 	addi	r2,r2,4
    bd8c:	10800017 	ldw	r2,0(r2)
    bd90:	1007883a 	mov	r3,r2
    bd94:	00800074 	movhi	r2,1
    bd98:	10c5d115 	stw	r3,5956(r2)
    bd9c:	00800074 	movhi	r2,1
    bda0:	1085cf17 	ldw	r2,5948(r2)
    bda4:	10800204 	addi	r2,r2,8
    bda8:	10800017 	ldw	r2,0(r2)
    bdac:	10ffffcc 	andi	r3,r2,65535
    bdb0:	00800074 	movhi	r2,1
    bdb4:	10c5d615 	stw	r3,5976(r2)
    bdb8:	00800074 	movhi	r2,1
    bdbc:	1085cf17 	ldw	r2,5948(r2)
    bdc0:	10800204 	addi	r2,r2,8
    bdc4:	10800017 	ldw	r2,0(r2)
    bdc8:	1006d43a 	srli	r3,r2,16
    bdcc:	00800074 	movhi	r2,1
    bdd0:	10c5d715 	stw	r3,5980(r2)
    bdd4:	00800074 	movhi	r2,1
    bdd8:	1085cf17 	ldw	r2,5948(r2)
    bddc:	10800304 	addi	r2,r2,12
    bde0:	10800017 	ldw	r2,0(r2)
    bde4:	1005d07a 	srai	r2,r2,1
    bde8:	10c0004c 	andi	r3,r2,1
    bdec:	00800074 	movhi	r2,1
    bdf0:	10c5d215 	stw	r3,5960(r2)
    bdf4:	00800074 	movhi	r2,1
    bdf8:	1085cf17 	ldw	r2,5948(r2)
    bdfc:	10800304 	addi	r2,r2,12
    be00:	10800017 	ldw	r2,0(r2)
    be04:	1005d23a 	srai	r2,r2,8
    be08:	108003cc 	andi	r2,r2,15
    be0c:	10800044 	addi	r2,r2,1
    be10:	1007883a 	mov	r3,r2
    be14:	00800074 	movhi	r2,1
    be18:	10c5d315 	stw	r3,5964(r2)
    be1c:	00800074 	movhi	r2,1
    be20:	1085cf17 	ldw	r2,5948(r2)
    be24:	10800304 	addi	r2,r2,12
    be28:	10800017 	ldw	r2,0(r2)
    be2c:	1005d1ba 	srai	r2,r2,6
    be30:	108000cc 	andi	r2,r2,3
    be34:	10800044 	addi	r2,r2,1
    be38:	1007883a 	mov	r3,r2
    be3c:	00800074 	movhi	r2,1
    be40:	10c5d415 	stw	r3,5968(r2)
    be44:	00800074 	movhi	r2,1
    be48:	1085d317 	ldw	r2,5964(r2)
    be4c:	1007883a 	mov	r3,r2
    be50:	00800074 	movhi	r2,1
    be54:	1085d417 	ldw	r2,5968(r2)
    be58:	1885383a 	mul	r2,r3,r2
    be5c:	e0bffe45 	stb	r2,-7(fp)
    be60:	e0bffe43 	ldbu	r2,-7(fp)
    be64:	10800268 	cmpgeui	r2,r2,9
    be68:	1000041e 	bne	r2,zero,be7c <alt_sys_init+0x604>
    be6c:	00c00044 	movi	r3,1
    be70:	00800074 	movhi	r2,1
    be74:	10c5d515 	stw	r3,5972(r2)
    be78:	00000a06 	br	bea4 <alt_sys_init+0x62c>
    be7c:	e0bffe43 	ldbu	r2,-7(fp)
    be80:	10800468 	cmpgeui	r2,r2,17
    be84:	1000041e 	bne	r2,zero,be98 <alt_sys_init+0x620>
    be88:	00c00084 	movi	r3,2
    be8c:	00800074 	movhi	r2,1
    be90:	10c5d515 	stw	r3,5972(r2)
    be94:	00000306 	br	bea4 <alt_sys_init+0x62c>
    be98:	00c00104 	movi	r3,4
    be9c:	00800074 	movhi	r2,1
    bea0:	10c5d515 	stw	r3,5972(r2)
    bea4:	00800074 	movhi	r2,1
    bea8:	1085cf17 	ldw	r2,5948(r2)
    beac:	10800304 	addi	r2,r2,12
    beb0:	10800017 	ldw	r2,0(r2)
    beb4:	1005d43a 	srai	r2,r2,16
    beb8:	e0bffe05 	stb	r2,-8(fp)
    bebc:	00800074 	movhi	r2,1
    bec0:	1085cf17 	ldw	r2,5948(r2)
    bec4:	10800304 	addi	r2,r2,12
    bec8:	10800017 	ldw	r2,0(r2)
    becc:	1004d63a 	srli	r2,r2,24
    bed0:	e0bffdc5 	stb	r2,-9(fp)
    bed4:	00800074 	movhi	r2,1
    bed8:	1085d517 	ldw	r2,5972(r2)
    bedc:	10800058 	cmpnei	r2,r2,1
    bee0:	1000031e 	bne	r2,zero,bef0 <alt_sys_init+0x678>
    bee4:	00800074 	movhi	r2,1
    bee8:	1005d815 	stw	zero,5984(r2)
    beec:	00000b06 	br	bf1c <alt_sys_init+0x6a4>
    bef0:	00800074 	movhi	r2,1
    bef4:	1085d517 	ldw	r2,5972(r2)
    bef8:	10800098 	cmpnei	r2,r2,2
    befc:	1000041e 	bne	r2,zero,bf10 <alt_sys_init+0x698>
    bf00:	00c00044 	movi	r3,1
    bf04:	00800074 	movhi	r2,1
    bf08:	10c5d815 	stw	r3,5984(r2)
    bf0c:	00000306 	br	bf1c <alt_sys_init+0x6a4>
    bf10:	00c00084 	movi	r3,2
    bf14:	00800074 	movhi	r2,1
    bf18:	10c5d815 	stw	r3,5984(r2)
    bf1c:	e0bffe03 	ldbu	r2,-8(fp)
    bf20:	00c00804 	movi	r3,32
    bf24:	1885c83a 	sub	r2,r3,r2
    bf28:	00ffffc4 	movi	r3,-1
    bf2c:	1886d83a 	srl	r3,r3,r2
    bf30:	00800074 	movhi	r2,1
    bf34:	10c5d915 	stw	r3,5988(r2)
    bf38:	e0fffe03 	ldbu	r3,-8(fp)
    bf3c:	00800074 	movhi	r2,1
    bf40:	1085d817 	ldw	r2,5984(r2)
    bf44:	1887883a 	add	r3,r3,r2
    bf48:	00800074 	movhi	r2,1
    bf4c:	10c5da15 	stw	r3,5992(r2)
    bf50:	e0bffdc3 	ldbu	r2,-9(fp)
    bf54:	00c00804 	movi	r3,32
    bf58:	1885c83a 	sub	r2,r3,r2
    bf5c:	00ffffc4 	movi	r3,-1
    bf60:	1886d83a 	srl	r3,r3,r2
    bf64:	00800074 	movhi	r2,1
    bf68:	10c5db15 	stw	r3,5996(r2)
    bf6c:	01000074 	movhi	r4,1
    bf70:	2105c504 	addi	r4,r4,5908
    bf74:	000b8080 	call	b808 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_RGB_RESAMPLER_INIT ( VGA_SUBSYSTEM_VGA_PIXEL_RGB_RESAMPLER, VGA_Subsystem_VGA_Pixel_RGB_Resampler);
    bf78:	00800074 	movhi	r2,1
    bf7c:	1085e617 	ldw	r2,6040(r2)
    bf80:	10800017 	ldw	r2,0(r2)
    bf84:	10c003cc 	andi	r3,r2,15
    bf88:	00800074 	movhi	r2,1
    bf8c:	10c5e715 	stw	r3,6044(r2)
    bf90:	00800074 	movhi	r2,1
    bf94:	1085e617 	ldw	r2,6040(r2)
    bf98:	10800017 	ldw	r2,0(r2)
    bf9c:	1005d13a 	srai	r2,r2,4
    bfa0:	10c0004c 	andi	r3,r2,1
    bfa4:	00800074 	movhi	r2,1
    bfa8:	10c5e815 	stw	r3,6048(r2)
    bfac:	00800074 	movhi	r2,1
    bfb0:	1085e617 	ldw	r2,6040(r2)
    bfb4:	10800017 	ldw	r2,0(r2)
    bfb8:	1005d17a 	srai	r2,r2,5
    bfbc:	10c0004c 	andi	r3,r2,1
    bfc0:	00800074 	movhi	r2,1
    bfc4:	10c5e915 	stw	r3,6052(r2)
    bfc8:	00800074 	movhi	r2,1
    bfcc:	1085e617 	ldw	r2,6040(r2)
    bfd0:	10800017 	ldw	r2,0(r2)
    bfd4:	1005d43a 	srai	r2,r2,16
    bfd8:	10c003cc 	andi	r3,r2,15
    bfdc:	00800074 	movhi	r2,1
    bfe0:	10c5ea15 	stw	r3,6056(r2)
    bfe4:	00800074 	movhi	r2,1
    bfe8:	1085e617 	ldw	r2,6040(r2)
    bfec:	10800017 	ldw	r2,0(r2)
    bff0:	1005d53a 	srai	r2,r2,20
    bff4:	10c0004c 	andi	r3,r2,1
    bff8:	00800074 	movhi	r2,1
    bffc:	10c5eb15 	stw	r3,6060(r2)
    c000:	00800074 	movhi	r2,1
    c004:	1085e617 	ldw	r2,6040(r2)
    c008:	10800017 	ldw	r2,0(r2)
    c00c:	1005d57a 	srai	r2,r2,21
    c010:	10c0004c 	andi	r3,r2,1
    c014:	00800074 	movhi	r2,1
    c018:	10c5ec15 	stw	r3,6064(r2)
    c01c:	01000074 	movhi	r4,1
    c020:	2105dc04 	addi	r4,r4,6000
    c024:	000b8080 	call	b808 <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD, SD_Card);
    c028:	01000074 	movhi	r4,1
    c02c:	2105ed04 	addi	r4,r4,6068
    c030:	000b8080 	call	b808 <alt_dev_reg>
}
    c034:	0001883a 	nop
    c038:	e037883a 	mov	sp,fp
    c03c:	dfc00117 	ldw	ra,4(sp)
    c040:	df000017 	ldw	fp,0(sp)
    c044:	dec00204 	addi	sp,sp,8
    c048:	f800283a 	ret

0000c04c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    c04c:	defffa04 	addi	sp,sp,-24
    c050:	dfc00515 	stw	ra,20(sp)
    c054:	df000415 	stw	fp,16(sp)
    c058:	df000404 	addi	fp,sp,16
    c05c:	e13ffe15 	stw	r4,-8(fp)
    c060:	e17ffd15 	stw	r5,-12(fp)
    c064:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    c068:	e0bffe17 	ldw	r2,-8(fp)
    c06c:	10800017 	ldw	r2,0(r2)
    c070:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    c074:	e0bfff17 	ldw	r2,-4(fp)
    c078:	10c00a04 	addi	r3,r2,40
    c07c:	e0bffe17 	ldw	r2,-8(fp)
    c080:	10800217 	ldw	r2,8(r2)
    c084:	100f883a 	mov	r7,r2
    c088:	e1bffc17 	ldw	r6,-16(fp)
    c08c:	e17ffd17 	ldw	r5,-12(fp)
    c090:	1809883a 	mov	r4,r3
    c094:	000c80c0 	call	c80c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    c098:	e037883a 	mov	sp,fp
    c09c:	dfc00117 	ldw	ra,4(sp)
    c0a0:	df000017 	ldw	fp,0(sp)
    c0a4:	dec00204 	addi	sp,sp,8
    c0a8:	f800283a 	ret

0000c0ac <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    c0ac:	defffa04 	addi	sp,sp,-24
    c0b0:	dfc00515 	stw	ra,20(sp)
    c0b4:	df000415 	stw	fp,16(sp)
    c0b8:	df000404 	addi	fp,sp,16
    c0bc:	e13ffe15 	stw	r4,-8(fp)
    c0c0:	e17ffd15 	stw	r5,-12(fp)
    c0c4:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    c0c8:	e0bffe17 	ldw	r2,-8(fp)
    c0cc:	10800017 	ldw	r2,0(r2)
    c0d0:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    c0d4:	e0bfff17 	ldw	r2,-4(fp)
    c0d8:	10c00a04 	addi	r3,r2,40
    c0dc:	e0bffe17 	ldw	r2,-8(fp)
    c0e0:	10800217 	ldw	r2,8(r2)
    c0e4:	100f883a 	mov	r7,r2
    c0e8:	e1bffc17 	ldw	r6,-16(fp)
    c0ec:	e17ffd17 	ldw	r5,-12(fp)
    c0f0:	1809883a 	mov	r4,r3
    c0f4:	000cad40 	call	cad4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    c0f8:	e037883a 	mov	sp,fp
    c0fc:	dfc00117 	ldw	ra,4(sp)
    c100:	df000017 	ldw	fp,0(sp)
    c104:	dec00204 	addi	sp,sp,8
    c108:	f800283a 	ret

0000c10c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    c10c:	defffc04 	addi	sp,sp,-16
    c110:	dfc00315 	stw	ra,12(sp)
    c114:	df000215 	stw	fp,8(sp)
    c118:	df000204 	addi	fp,sp,8
    c11c:	e13ffe15 	stw	r4,-8(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    c120:	e0bffe17 	ldw	r2,-8(fp)
    c124:	10800017 	ldw	r2,0(r2)
    c128:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    c12c:	e0bfff17 	ldw	r2,-4(fp)
    c130:	10c00a04 	addi	r3,r2,40
    c134:	e0bffe17 	ldw	r2,-8(fp)
    c138:	10800217 	ldw	r2,8(r2)
    c13c:	100b883a 	mov	r5,r2
    c140:	1809883a 	mov	r4,r3
    c144:	000c6b00 	call	c6b0 <altera_avalon_jtag_uart_close>
}
    c148:	e037883a 	mov	sp,fp
    c14c:	dfc00117 	ldw	ra,4(sp)
    c150:	df000017 	ldw	fp,0(sp)
    c154:	dec00204 	addi	sp,sp,8
    c158:	f800283a 	ret

0000c15c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    c15c:	defffa04 	addi	sp,sp,-24
    c160:	dfc00515 	stw	ra,20(sp)
    c164:	df000415 	stw	fp,16(sp)
    c168:	df000404 	addi	fp,sp,16
    c16c:	e13ffe15 	stw	r4,-8(fp)
    c170:	e17ffd15 	stw	r5,-12(fp)
    c174:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    c178:	e0bffe17 	ldw	r2,-8(fp)
    c17c:	10800017 	ldw	r2,0(r2)
    c180:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    c184:	e0bfff17 	ldw	r2,-4(fp)
    c188:	10800a04 	addi	r2,r2,40
    c18c:	e1bffc17 	ldw	r6,-16(fp)
    c190:	e17ffd17 	ldw	r5,-12(fp)
    c194:	1009883a 	mov	r4,r2
    c198:	000c7180 	call	c718 <altera_avalon_jtag_uart_ioctl>
}
    c19c:	e037883a 	mov	sp,fp
    c1a0:	dfc00117 	ldw	ra,4(sp)
    c1a4:	df000017 	ldw	fp,0(sp)
    c1a8:	dec00204 	addi	sp,sp,8
    c1ac:	f800283a 	ret

0000c1b0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    c1b0:	defff504 	addi	sp,sp,-44
    c1b4:	dfc00a15 	stw	ra,40(sp)
    c1b8:	df000915 	stw	fp,36(sp)
    c1bc:	df000904 	addi	fp,sp,36
    c1c0:	e13ff915 	stw	r4,-28(fp)
    c1c4:	e17ff815 	stw	r5,-32(fp)
    c1c8:	e1bff715 	stw	r6,-36(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
    c1cc:	e0bff917 	ldw	r2,-28(fp)
    c1d0:	10800c04 	addi	r2,r2,48
    c1d4:	e0bffb15 	stw	r2,-20(fp)
    c1d8:	e03ffa8d 	sth	zero,-22(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
    c1dc:	e0bffa8b 	ldhu	r2,-22(fp)
    c1e0:	e0fffa44 	addi	r3,fp,-23
    c1e4:	180b883a 	mov	r5,r3
    c1e8:	1009883a 	mov	r4,r2
    c1ec:	00063ac0 	call	63ac <OSFlagCreate>
    c1f0:	1007883a 	mov	r3,r2
    c1f4:	e0bffb17 	ldw	r2,-20(fp)
    c1f8:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
    c1fc:	e0bff917 	ldw	r2,-28(fp)
    c200:	10800a04 	addi	r2,r2,40
    c204:	e0bffd15 	stw	r2,-12(fp)
    c208:	00800044 	movi	r2,1
    c20c:	e0bffc8d 	sth	r2,-14(fp)
  *sem = OSSemCreate (value);
    c210:	e0bffc8b 	ldhu	r2,-14(fp)
    c214:	1009883a 	mov	r4,r2
    c218:	00091d40 	call	91d4 <OSSemCreate>
    c21c:	1007883a 	mov	r3,r2
    c220:	e0bffd17 	ldw	r2,-12(fp)
    c224:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
    c228:	0001883a 	nop
  ALT_SEM_CREATE(&sp->write_lock, 1);
    c22c:	e0bff917 	ldw	r2,-28(fp)
    c230:	10800b04 	addi	r2,r2,44
    c234:	e0bfff15 	stw	r2,-4(fp)
    c238:	00800044 	movi	r2,1
    c23c:	e0bffe8d 	sth	r2,-6(fp)
  *sem = OSSemCreate (value);
    c240:	e0bffe8b 	ldhu	r2,-6(fp)
    c244:	1009883a 	mov	r4,r2
    c248:	00091d40 	call	91d4 <OSSemCreate>
    c24c:	1007883a 	mov	r3,r2
    c250:	e0bfff17 	ldw	r2,-4(fp)
    c254:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
    c258:	0001883a 	nop

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    c25c:	e0bff917 	ldw	r2,-28(fp)
    c260:	00c00044 	movi	r3,1
    c264:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    c268:	e0bff917 	ldw	r2,-28(fp)
    c26c:	10800017 	ldw	r2,0(r2)
    c270:	10800104 	addi	r2,r2,4
    c274:	1007883a 	mov	r3,r2
    c278:	e0bff917 	ldw	r2,-28(fp)
    c27c:	10800817 	ldw	r2,32(r2)
    c280:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
    c284:	e0bff717 	ldw	r2,-36(fp)
    c288:	01800074 	movhi	r6,1
    c28c:	31b0bd04 	addi	r6,r6,-15628
    c290:	e17ff917 	ldw	r5,-28(fp)
    c294:	1009883a 	mov	r4,r2
    c298:	000e65c0 	call	e65c <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    c29c:	e0bff917 	ldw	r2,-28(fp)
    c2a0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    c2a4:	e0bff917 	ldw	r2,-28(fp)
    c2a8:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    c2ac:	d0e7cc17 	ldw	r3,-24784(gp)
    c2b0:	e1fff917 	ldw	r7,-28(fp)
    c2b4:	01800074 	movhi	r6,1
    c2b8:	31b16904 	addi	r6,r6,-14940
    c2bc:	180b883a 	mov	r5,r3
    c2c0:	1009883a 	mov	r4,r2
    c2c4:	000e16c0 	call	e16c <alt_alarm_start>
    c2c8:	1000040e 	bge	r2,zero,c2dc <altera_avalon_jtag_uart_init+0x12c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    c2cc:	e0fff917 	ldw	r3,-28(fp)
    c2d0:	00a00034 	movhi	r2,32768
    c2d4:	10bfffc4 	addi	r2,r2,-1
    c2d8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    c2dc:	0001883a 	nop
    c2e0:	e037883a 	mov	sp,fp
    c2e4:	dfc00117 	ldw	ra,4(sp)
    c2e8:	df000017 	ldw	fp,0(sp)
    c2ec:	dec00204 	addi	sp,sp,8
    c2f0:	f800283a 	ret

0000c2f4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    c2f4:	defff104 	addi	sp,sp,-60
    c2f8:	dfc00e15 	stw	ra,56(sp)
    c2fc:	df000d15 	stw	fp,52(sp)
    c300:	df000d04 	addi	fp,sp,52
    c304:	e13ff415 	stw	r4,-48(fp)
    c308:	e17ff315 	stw	r5,-52(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    c30c:	e0bff417 	ldw	r2,-48(fp)
    c310:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
    c314:	e0bffd17 	ldw	r2,-12(fp)
    c318:	10800017 	ldw	r2,0(r2)
    c31c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    c320:	e0bffc17 	ldw	r2,-16(fp)
    c324:	10800104 	addi	r2,r2,4
    c328:	10800037 	ldwio	r2,0(r2)
    c32c:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    c330:	e0bffb17 	ldw	r2,-20(fp)
    c334:	1080c00c 	andi	r2,r2,768
    c338:	10009326 	beq	r2,zero,c588 <altera_avalon_jtag_uart_irq+0x294>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    c33c:	e0bffb17 	ldw	r2,-20(fp)
    c340:	1080400c 	andi	r2,r2,256
    c344:	10004826 	beq	r2,zero,c468 <altera_avalon_jtag_uart_irq+0x174>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    c348:	00800074 	movhi	r2,1
    c34c:	e0bfff15 	stw	r2,-4(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c350:	e0bffd17 	ldw	r2,-12(fp)
    c354:	10800d17 	ldw	r2,52(r2)
    c358:	10800044 	addi	r2,r2,1
    c35c:	1081ffcc 	andi	r2,r2,2047
    c360:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
    c364:	e0bffd17 	ldw	r2,-12(fp)
    c368:	10800e17 	ldw	r2,56(r2)
    c36c:	e0fffa17 	ldw	r3,-24(fp)
    c370:	18802826 	beq	r3,r2,c414 <altera_avalon_jtag_uart_irq+0x120>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    c374:	e0bffc17 	ldw	r2,-16(fp)
    c378:	10800037 	ldwio	r2,0(r2)
    c37c:	e0bfff15 	stw	r2,-4(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    c380:	e0bfff17 	ldw	r2,-4(fp)
    c384:	10a0000c 	andi	r2,r2,32768
    c388:	10002426 	beq	r2,zero,c41c <altera_avalon_jtag_uart_irq+0x128>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    c38c:	e0bffd17 	ldw	r2,-12(fp)
    c390:	10800d17 	ldw	r2,52(r2)
    c394:	e0ffff17 	ldw	r3,-4(fp)
    c398:	1809883a 	mov	r4,r3
    c39c:	e0fffd17 	ldw	r3,-12(fp)
    c3a0:	1885883a 	add	r2,r3,r2
    c3a4:	11001105 	stb	r4,68(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c3a8:	e0bffd17 	ldw	r2,-12(fp)
    c3ac:	10800d17 	ldw	r2,52(r2)
    c3b0:	10800044 	addi	r2,r2,1
    c3b4:	10c1ffcc 	andi	r3,r2,2047
    c3b8:	e0bffd17 	ldw	r2,-12(fp)
    c3bc:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
    c3c0:	e0bffd17 	ldw	r2,-12(fp)
    c3c4:	10800c17 	ldw	r2,48(r2)
    c3c8:	e0bff915 	stw	r2,-28(fp)
    c3cc:	00800044 	movi	r2,1
    c3d0:	e0bff88d 	sth	r2,-30(fp)
    c3d4:	00800044 	movi	r2,1
    c3d8:	e0bff845 	stb	r2,-31(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
    c3dc:	d0a7c143 	ldbu	r2,-24827(gp)
    c3e0:	10803fcc 	andi	r2,r2,255
    c3e4:	10000926 	beq	r2,zero,c40c <altera_avalon_jtag_uart_irq+0x118>
  {
    OSFlagPost (group, flags, opt, &err);
    c3e8:	e0bff88b 	ldhu	r2,-30(fp)
    c3ec:	e0fff843 	ldbu	r3,-31(fp)
    c3f0:	e13ff604 	addi	r4,fp,-40
    c3f4:	200f883a 	mov	r7,r4
    c3f8:	180d883a 	mov	r6,r3
    c3fc:	100b883a 	mov	r5,r2
    c400:	e13ff917 	ldw	r4,-28(fp)
    c404:	0006ffc0 	call	6ffc <OSFlagPost>
    return err;
    c408:	00000106 	br	c410 <altera_avalon_jtag_uart_irq+0x11c>
  }
  return OS_ERR_PEND_ISR;
    c40c:	0001883a 	nop
      {
    c410:	003fcf06 	br	c350 <altera_avalon_jtag_uart_irq+0x5c>
          break;
    c414:	0001883a 	nop
    c418:	00000106 	br	c420 <altera_avalon_jtag_uart_irq+0x12c>
          break;
    c41c:	0001883a 	nop
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    c420:	e0bfff17 	ldw	r2,-4(fp)
    c424:	10bfffec 	andhi	r2,r2,65535
    c428:	10000f26 	beq	r2,zero,c468 <altera_avalon_jtag_uart_irq+0x174>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    c42c:	e0bffd17 	ldw	r2,-12(fp)
    c430:	10c00817 	ldw	r3,32(r2)
    c434:	00bfff84 	movi	r2,-2
    c438:	1886703a 	and	r3,r3,r2
    c43c:	e0bffd17 	ldw	r2,-12(fp)
    c440:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    c444:	e0bffc17 	ldw	r2,-16(fp)
    c448:	10800104 	addi	r2,r2,4
    c44c:	1007883a 	mov	r3,r2
    c450:	e0bffd17 	ldw	r2,-12(fp)
    c454:	10800817 	ldw	r2,32(r2)
    c458:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    c45c:	e0bffc17 	ldw	r2,-16(fp)
    c460:	10800104 	addi	r2,r2,4
    c464:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    c468:	e0bffb17 	ldw	r2,-20(fp)
    c46c:	1080800c 	andi	r2,r2,512
    c470:	103fab26 	beq	r2,zero,c320 <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    c474:	e0bffb17 	ldw	r2,-20(fp)
    c478:	1004d43a 	srli	r2,r2,16
    c47c:	e0bffe15 	stw	r2,-8(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    c480:	00002706 	br	c520 <altera_avalon_jtag_uart_irq+0x22c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    c484:	e0bffc17 	ldw	r2,-16(fp)
    c488:	e0fffd17 	ldw	r3,-12(fp)
    c48c:	18c01017 	ldw	r3,64(r3)
    c490:	e13ffd17 	ldw	r4,-12(fp)
    c494:	20c7883a 	add	r3,r4,r3
    c498:	18c21103 	ldbu	r3,2116(r3)
    c49c:	18c03fcc 	andi	r3,r3,255
    c4a0:	18c0201c 	xori	r3,r3,128
    c4a4:	18ffe004 	addi	r3,r3,-128
    c4a8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c4ac:	e0bffd17 	ldw	r2,-12(fp)
    c4b0:	10801017 	ldw	r2,64(r2)
    c4b4:	10800044 	addi	r2,r2,1
    c4b8:	10c1ffcc 	andi	r3,r2,2047
    c4bc:	e0bffd17 	ldw	r2,-12(fp)
    c4c0:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
    c4c4:	e0bffd17 	ldw	r2,-12(fp)
    c4c8:	10800c17 	ldw	r2,48(r2)
    c4cc:	e0bff715 	stw	r2,-36(fp)
    c4d0:	00800084 	movi	r2,2
    c4d4:	e0bff68d 	sth	r2,-38(fp)
    c4d8:	00800044 	movi	r2,1
    c4dc:	e0bff645 	stb	r2,-39(fp)
  if (OSRunning)
    c4e0:	d0a7c143 	ldbu	r2,-24827(gp)
    c4e4:	10803fcc 	andi	r2,r2,255
    c4e8:	10000926 	beq	r2,zero,c510 <altera_avalon_jtag_uart_irq+0x21c>
    OSFlagPost (group, flags, opt, &err);
    c4ec:	e0bff68b 	ldhu	r2,-38(fp)
    c4f0:	e0fff643 	ldbu	r3,-39(fp)
    c4f4:	e13ff5c4 	addi	r4,fp,-41
    c4f8:	200f883a 	mov	r7,r4
    c4fc:	180d883a 	mov	r6,r3
    c500:	100b883a 	mov	r5,r2
    c504:	e13ff717 	ldw	r4,-36(fp)
    c508:	0006ffc0 	call	6ffc <OSFlagPost>
    return err;
    c50c:	00000106 	br	c514 <altera_avalon_jtag_uart_irq+0x220>
  return OS_ERR_PEND_ISR;
    c510:	0001883a 	nop

        space--;
    c514:	e0bffe17 	ldw	r2,-8(fp)
    c518:	10bfffc4 	addi	r2,r2,-1
    c51c:	e0bffe15 	stw	r2,-8(fp)
      while (space > 0 && sp->tx_out != sp->tx_in)
    c520:	e0bffe17 	ldw	r2,-8(fp)
    c524:	10000526 	beq	r2,zero,c53c <altera_avalon_jtag_uart_irq+0x248>
    c528:	e0bffd17 	ldw	r2,-12(fp)
    c52c:	10c01017 	ldw	r3,64(r2)
    c530:	e0bffd17 	ldw	r2,-12(fp)
    c534:	10800f17 	ldw	r2,60(r2)
    c538:	18bfd21e 	bne	r3,r2,c484 <altera_avalon_jtag_uart_irq+0x190>
      }

      if (space > 0)
    c53c:	e0bffe17 	ldw	r2,-8(fp)
    c540:	103f7726 	beq	r2,zero,c320 <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    c544:	e0bffd17 	ldw	r2,-12(fp)
    c548:	10c00817 	ldw	r3,32(r2)
    c54c:	00bfff44 	movi	r2,-3
    c550:	1886703a 	and	r3,r3,r2
    c554:	e0bffd17 	ldw	r2,-12(fp)
    c558:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    c55c:	e0bffd17 	ldw	r2,-12(fp)
    c560:	10800017 	ldw	r2,0(r2)
    c564:	10800104 	addi	r2,r2,4
    c568:	1007883a 	mov	r3,r2
    c56c:	e0bffd17 	ldw	r2,-12(fp)
    c570:	10800817 	ldw	r2,32(r2)
    c574:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    c578:	e0bffc17 	ldw	r2,-16(fp)
    c57c:	10800104 	addi	r2,r2,4
    c580:	10800037 	ldwio	r2,0(r2)
  {
    c584:	003f6606 	br	c320 <altera_avalon_jtag_uart_irq+0x2c>
      break;
    c588:	0001883a 	nop
      }
    }
  }
}
    c58c:	0001883a 	nop
    c590:	e037883a 	mov	sp,fp
    c594:	dfc00117 	ldw	ra,4(sp)
    c598:	df000017 	ldw	fp,0(sp)
    c59c:	dec00204 	addi	sp,sp,8
    c5a0:	f800283a 	ret

0000c5a4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    c5a4:	defff904 	addi	sp,sp,-28
    c5a8:	dfc00615 	stw	ra,24(sp)
    c5ac:	df000515 	stw	fp,20(sp)
    c5b0:	df000504 	addi	fp,sp,20
    c5b4:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    c5b8:	e0bffb17 	ldw	r2,-20(fp)
    c5bc:	e0bfff15 	stw	r2,-4(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    c5c0:	e0bfff17 	ldw	r2,-4(fp)
    c5c4:	10800017 	ldw	r2,0(r2)
    c5c8:	10800104 	addi	r2,r2,4
    c5cc:	10800037 	ldwio	r2,0(r2)
    c5d0:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    c5d4:	e0bffe17 	ldw	r2,-8(fp)
    c5d8:	1081000c 	andi	r2,r2,1024
    c5dc:	10000b26 	beq	r2,zero,c60c <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    c5e0:	e0bfff17 	ldw	r2,-4(fp)
    c5e4:	10800017 	ldw	r2,0(r2)
    c5e8:	10800104 	addi	r2,r2,4
    c5ec:	1007883a 	mov	r3,r2
    c5f0:	e0bfff17 	ldw	r2,-4(fp)
    c5f4:	10800817 	ldw	r2,32(r2)
    c5f8:	10810014 	ori	r2,r2,1024
    c5fc:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    c600:	e0bfff17 	ldw	r2,-4(fp)
    c604:	10000915 	stw	zero,36(r2)
    c608:	00002306 	br	c698 <altera_avalon_jtag_uart_timeout+0xf4>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    c60c:	e0bfff17 	ldw	r2,-4(fp)
    c610:	10c00917 	ldw	r3,36(r2)
    c614:	00a00034 	movhi	r2,32768
    c618:	10bfff04 	addi	r2,r2,-4
    c61c:	10c01e36 	bltu	r2,r3,c698 <altera_avalon_jtag_uart_timeout+0xf4>
    sp->host_inactive++;
    c620:	e0bfff17 	ldw	r2,-4(fp)
    c624:	10800917 	ldw	r2,36(r2)
    c628:	10c00044 	addi	r3,r2,1
    c62c:	e0bfff17 	ldw	r2,-4(fp)
    c630:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
    c634:	e0bfff17 	ldw	r2,-4(fp)
    c638:	10c00917 	ldw	r3,36(r2)
    c63c:	e0bfff17 	ldw	r2,-4(fp)
    c640:	10800117 	ldw	r2,4(r2)
    c644:	18801436 	bltu	r3,r2,c698 <altera_avalon_jtag_uart_timeout+0xf4>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    c648:	e0bfff17 	ldw	r2,-4(fp)
    c64c:	10800c17 	ldw	r2,48(r2)
    c650:	e0bffd15 	stw	r2,-12(fp)
    c654:	00800104 	movi	r2,4
    c658:	e0bffc8d 	sth	r2,-14(fp)
    c65c:	00800044 	movi	r2,1
    c660:	e0bffc45 	stb	r2,-15(fp)
  if (OSRunning)
    c664:	d0a7c143 	ldbu	r2,-24827(gp)
    c668:	10803fcc 	andi	r2,r2,255
    c66c:	10000926 	beq	r2,zero,c694 <altera_avalon_jtag_uart_timeout+0xf0>
    OSFlagPost (group, flags, opt, &err);
    c670:	e0bffc8b 	ldhu	r2,-14(fp)
    c674:	e0fffc43 	ldbu	r3,-15(fp)
    c678:	e13ffc04 	addi	r4,fp,-16
    c67c:	200f883a 	mov	r7,r4
    c680:	180d883a 	mov	r6,r3
    c684:	100b883a 	mov	r5,r2
    c688:	e13ffd17 	ldw	r4,-12(fp)
    c68c:	0006ffc0 	call	6ffc <OSFlagPost>
    return err;
    c690:	00000106 	br	c698 <altera_avalon_jtag_uart_timeout+0xf4>
  return OS_ERR_PEND_ISR;
    c694:	0001883a 	nop
    c698:	d0a7cc17 	ldw	r2,-24784(gp)
    }
  }

  return alt_ticks_per_second();
}
    c69c:	e037883a 	mov	sp,fp
    c6a0:	dfc00117 	ldw	ra,4(sp)
    c6a4:	df000017 	ldw	fp,0(sp)
    c6a8:	dec00204 	addi	sp,sp,8
    c6ac:	f800283a 	ret

0000c6b0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    c6b0:	defffd04 	addi	sp,sp,-12
    c6b4:	df000215 	stw	fp,8(sp)
    c6b8:	df000204 	addi	fp,sp,8
    c6bc:	e13fff15 	stw	r4,-4(fp)
    c6c0:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    c6c4:	00000506 	br	c6dc <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    c6c8:	e0bffe17 	ldw	r2,-8(fp)
    c6cc:	1090000c 	andi	r2,r2,16384
    c6d0:	10000226 	beq	r2,zero,c6dc <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    c6d4:	00bffd44 	movi	r2,-11
    c6d8:	00000b06 	br	c708 <altera_avalon_jtag_uart_close+0x58>
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    c6dc:	e0bfff17 	ldw	r2,-4(fp)
    c6e0:	10c01017 	ldw	r3,64(r2)
    c6e4:	e0bfff17 	ldw	r2,-4(fp)
    c6e8:	10800f17 	ldw	r2,60(r2)
    c6ec:	18800526 	beq	r3,r2,c704 <altera_avalon_jtag_uart_close+0x54>
    c6f0:	e0bfff17 	ldw	r2,-4(fp)
    c6f4:	10c00917 	ldw	r3,36(r2)
    c6f8:	e0bfff17 	ldw	r2,-4(fp)
    c6fc:	10800117 	ldw	r2,4(r2)
    c700:	18bff136 	bltu	r3,r2,c6c8 <altera_avalon_jtag_uart_close+0x18>
    }
  }

  return 0;
    c704:	0005883a 	mov	r2,zero
}
    c708:	e037883a 	mov	sp,fp
    c70c:	df000017 	ldw	fp,0(sp)
    c710:	dec00104 	addi	sp,sp,4
    c714:	f800283a 	ret

0000c718 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    c718:	defffa04 	addi	sp,sp,-24
    c71c:	df000515 	stw	fp,20(sp)
    c720:	df000504 	addi	fp,sp,20
    c724:	e13ffd15 	stw	r4,-12(fp)
    c728:	e17ffc15 	stw	r5,-16(fp)
    c72c:	e1bffb15 	stw	r6,-20(fp)
  int rc = -ENOTTY;
    c730:	00bff9c4 	movi	r2,-25
    c734:	e0bfff15 	stw	r2,-4(fp)

  switch (req)
    c738:	e0bffc17 	ldw	r2,-16(fp)
    c73c:	109a8060 	cmpeqi	r2,r2,27137
    c740:	1000041e 	bne	r2,zero,c754 <altera_avalon_jtag_uart_ioctl+0x3c>
    c744:	e0bffc17 	ldw	r2,-16(fp)
    c748:	109a80a0 	cmpeqi	r2,r2,27138
    c74c:	1000181e 	bne	r2,zero,c7b0 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
    c750:	00002906 	br	c7f8 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    c754:	e0bffd17 	ldw	r2,-12(fp)
    c758:	10c00117 	ldw	r3,4(r2)
    c75c:	00a00034 	movhi	r2,32768
    c760:	10bfffc4 	addi	r2,r2,-1
    c764:	18802126 	beq	r3,r2,c7ec <altera_avalon_jtag_uart_ioctl+0xd4>
      int timeout = *((int *)arg);
    c768:	e0bffb17 	ldw	r2,-20(fp)
    c76c:	10800017 	ldw	r2,0(r2)
    c770:	e0bffe15 	stw	r2,-8(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    c774:	e0bffe17 	ldw	r2,-8(fp)
    c778:	10800090 	cmplti	r2,r2,2
    c77c:	1000061e 	bne	r2,zero,c798 <altera_avalon_jtag_uart_ioctl+0x80>
    c780:	e0fffe17 	ldw	r3,-8(fp)
    c784:	00a00034 	movhi	r2,32768
    c788:	10bfffc4 	addi	r2,r2,-1
    c78c:	18800226 	beq	r3,r2,c798 <altera_avalon_jtag_uart_ioctl+0x80>
    c790:	e0bffe17 	ldw	r2,-8(fp)
    c794:	00000206 	br	c7a0 <altera_avalon_jtag_uart_ioctl+0x88>
    c798:	00a00034 	movhi	r2,32768
    c79c:	10bfff84 	addi	r2,r2,-2
    c7a0:	e0fffd17 	ldw	r3,-12(fp)
    c7a4:	18800115 	stw	r2,4(r3)
      rc = 0;
    c7a8:	e03fff15 	stw	zero,-4(fp)
    break;
    c7ac:	00000f06 	br	c7ec <altera_avalon_jtag_uart_ioctl+0xd4>
    if (sp->timeout != INT_MAX)
    c7b0:	e0bffd17 	ldw	r2,-12(fp)
    c7b4:	10c00117 	ldw	r3,4(r2)
    c7b8:	00a00034 	movhi	r2,32768
    c7bc:	10bfffc4 	addi	r2,r2,-1
    c7c0:	18800c26 	beq	r3,r2,c7f4 <altera_avalon_jtag_uart_ioctl+0xdc>
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    c7c4:	e0bffd17 	ldw	r2,-12(fp)
    c7c8:	10c00917 	ldw	r3,36(r2)
    c7cc:	e0bffd17 	ldw	r2,-12(fp)
    c7d0:	10800117 	ldw	r2,4(r2)
    c7d4:	1885803a 	cmpltu	r2,r3,r2
    c7d8:	10c03fcc 	andi	r3,r2,255
    c7dc:	e0bffb17 	ldw	r2,-20(fp)
    c7e0:	10c00015 	stw	r3,0(r2)
      rc = 0;
    c7e4:	e03fff15 	stw	zero,-4(fp)
    break;
    c7e8:	00000206 	br	c7f4 <altera_avalon_jtag_uart_ioctl+0xdc>
    break;
    c7ec:	0001883a 	nop
    c7f0:	00000106 	br	c7f8 <altera_avalon_jtag_uart_ioctl+0xe0>
    break;
    c7f4:	0001883a 	nop
  }

  return rc;
    c7f8:	e0bfff17 	ldw	r2,-4(fp)
}
    c7fc:	e037883a 	mov	sp,fp
    c800:	df000017 	ldw	fp,0(sp)
    c804:	dec00104 	addi	sp,sp,4
    c808:	f800283a 	ret

0000c80c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    c80c:	deffec04 	addi	sp,sp,-80
    c810:	dfc01315 	stw	ra,76(sp)
    c814:	df001215 	stw	fp,72(sp)
    c818:	df001204 	addi	fp,sp,72
    c81c:	e13ff215 	stw	r4,-56(fp)
    c820:	e17ff115 	stw	r5,-60(fp)
    c824:	e1bff015 	stw	r6,-64(fp)
    c828:	e1ffef15 	stw	r7,-68(fp)
  char * ptr = buffer;
    c82c:	e0bff117 	ldw	r2,-60(fp)
    c830:	e0bfff15 	stw	r2,-4(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
    c834:	e0bff217 	ldw	r2,-56(fp)
    c838:	10800a17 	ldw	r2,40(r2)
    c83c:	e0bffa15 	stw	r2,-24(fp)
    c840:	e03ff98d 	sth	zero,-26(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
    c844:	e0bff98b 	ldhu	r2,-26(fp)
    c848:	e0fff3c4 	addi	r3,fp,-49
    c84c:	180d883a 	mov	r6,r3
    c850:	100b883a 	mov	r5,r2
    c854:	e13ffa17 	ldw	r4,-24(fp)
    c858:	00095000 	call	9500 <OSSemPend>

  while (space > 0)
    c85c:	00006306 	br	c9ec <altera_avalon_jtag_uart_read+0x1e0>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    c860:	e0bff217 	ldw	r2,-56(fp)
    c864:	10800d17 	ldw	r2,52(r2)
    c868:	e0bffd15 	stw	r2,-12(fp)
      out = sp->rx_out;
    c86c:	e0bff217 	ldw	r2,-56(fp)
    c870:	10800e17 	ldw	r2,56(r2)
    c874:	e0bffc15 	stw	r2,-16(fp)

      if (in >= out)
    c878:	e0fffd17 	ldw	r3,-12(fp)
    c87c:	e0bffc17 	ldw	r2,-16(fp)
    c880:	18800536 	bltu	r3,r2,c898 <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
    c884:	e0fffd17 	ldw	r3,-12(fp)
    c888:	e0bffc17 	ldw	r2,-16(fp)
    c88c:	1885c83a 	sub	r2,r3,r2
    c890:	e0bffe15 	stw	r2,-8(fp)
    c894:	00000406 	br	c8a8 <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    c898:	00c20004 	movi	r3,2048
    c89c:	e0bffc17 	ldw	r2,-16(fp)
    c8a0:	1885c83a 	sub	r2,r3,r2
    c8a4:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
    c8a8:	e0bffe17 	ldw	r2,-8(fp)
    c8ac:	10001e26 	beq	r2,zero,c928 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
    c8b0:	e0fff017 	ldw	r3,-64(fp)
    c8b4:	e0bffe17 	ldw	r2,-8(fp)
    c8b8:	1880022e 	bgeu	r3,r2,c8c4 <altera_avalon_jtag_uart_read+0xb8>
        n = space;
    c8bc:	e0bff017 	ldw	r2,-64(fp)
    c8c0:	e0bffe15 	stw	r2,-8(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    c8c4:	e0bff217 	ldw	r2,-56(fp)
    c8c8:	10c01104 	addi	r3,r2,68
    c8cc:	e0bffc17 	ldw	r2,-16(fp)
    c8d0:	1885883a 	add	r2,r3,r2
    c8d4:	e1bffe17 	ldw	r6,-8(fp)
    c8d8:	100b883a 	mov	r5,r2
    c8dc:	e13fff17 	ldw	r4,-4(fp)
    c8e0:	00017e80 	call	17e8 <memcpy>
      ptr   += n;
    c8e4:	e0ffff17 	ldw	r3,-4(fp)
    c8e8:	e0bffe17 	ldw	r2,-8(fp)
    c8ec:	1885883a 	add	r2,r3,r2
    c8f0:	e0bfff15 	stw	r2,-4(fp)
      space -= n;
    c8f4:	e0fff017 	ldw	r3,-64(fp)
    c8f8:	e0bffe17 	ldw	r2,-8(fp)
    c8fc:	1885c83a 	sub	r2,r3,r2
    c900:	e0bff015 	stw	r2,-64(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c904:	e0fffc17 	ldw	r3,-16(fp)
    c908:	e0bffe17 	ldw	r2,-8(fp)
    c90c:	1885883a 	add	r2,r3,r2
    c910:	10c1ffcc 	andi	r3,r2,2047
    c914:	e0bff217 	ldw	r2,-56(fp)
    c918:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
    c91c:	e0bff017 	ldw	r2,-64(fp)
    c920:	00bfcf16 	blt	zero,r2,c860 <altera_avalon_jtag_uart_read+0x54>
    c924:	00000106 	br	c92c <altera_avalon_jtag_uart_read+0x120>
        break; /* No more data available */
    c928:	0001883a 	nop

    /* If we read any data then return it */
    if (ptr != buffer)
    c92c:	e0ffff17 	ldw	r3,-4(fp)
    c930:	e0bff117 	ldw	r2,-60(fp)
    c934:	1880301e 	bne	r3,r2,c9f8 <altera_avalon_jtag_uart_read+0x1ec>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    c938:	e0bfef17 	ldw	r2,-68(fp)
    c93c:	1090000c 	andi	r2,r2,16384
    c940:	10002f1e 	bne	r2,zero,ca00 <altera_avalon_jtag_uart_read+0x1f4>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
    c944:	d0a7c143 	ldbu	r2,-24827(gp)
    c948:	10803fcc 	andi	r2,r2,255
    c94c:	10800058 	cmpnei	r2,r2,1
    c950:	1000161e 	bne	r2,zero,c9ac <altera_avalon_jtag_uart_read+0x1a0>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
    c954:	e0bff217 	ldw	r2,-56(fp)
    c958:	10800c17 	ldw	r2,48(r2)
    c95c:	e0bff815 	stw	r2,-32(fp)
    c960:	00800144 	movi	r2,5
    c964:	e0bff78d 	sth	r2,-34(fp)
    c968:	00bfe0c4 	movi	r2,-125
    c96c:	e0bff745 	stb	r2,-35(fp)
    c970:	e03ff68d 	sth	zero,-38(fp)
  if (OSRunning)
    c974:	d0a7c143 	ldbu	r2,-24827(gp)
    c978:	10803fcc 	andi	r2,r2,255
    c97c:	10001626 	beq	r2,zero,c9d8 <altera_avalon_jtag_uart_read+0x1cc>
    OSFlagPend (group, flags, wait_type, timeout, &err);
    c980:	e0fff78b 	ldhu	r3,-34(fp)
    c984:	e13ff743 	ldbu	r4,-35(fp)
    c988:	e17ff68b 	ldhu	r5,-38(fp)
    c98c:	e0bff384 	addi	r2,fp,-50
    c990:	d8800015 	stw	r2,0(sp)
    c994:	280f883a 	mov	r7,r5
    c998:	200d883a 	mov	r6,r4
    c99c:	180b883a 	mov	r5,r3
    c9a0:	e13ff817 	ldw	r4,-32(fp)
    c9a4:	00069980 	call	6998 <OSFlagPend>
    return err;
    c9a8:	00000c06 	br	c9dc <altera_avalon_jtag_uart_read+0x1d0>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    c9ac:	0001883a 	nop
    c9b0:	e0bff217 	ldw	r2,-56(fp)
    c9b4:	10800d17 	ldw	r2,52(r2)
    c9b8:	e0fffd17 	ldw	r3,-12(fp)
    c9bc:	1880071e 	bne	r3,r2,c9dc <altera_avalon_jtag_uart_read+0x1d0>
    c9c0:	e0bff217 	ldw	r2,-56(fp)
    c9c4:	10c00917 	ldw	r3,36(r2)
    c9c8:	e0bff217 	ldw	r2,-56(fp)
    c9cc:	10800117 	ldw	r2,4(r2)
    c9d0:	18bff736 	bltu	r3,r2,c9b0 <altera_avalon_jtag_uart_read+0x1a4>
    c9d4:	00000106 	br	c9dc <altera_avalon_jtag_uart_read+0x1d0>
  return OS_ERR_PEND_ISR;
    c9d8:	0001883a 	nop
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    c9dc:	e0bff217 	ldw	r2,-56(fp)
    c9e0:	10800d17 	ldw	r2,52(r2)
    c9e4:	e0fffd17 	ldw	r3,-12(fp)
    c9e8:	18800726 	beq	r3,r2,ca08 <altera_avalon_jtag_uart_read+0x1fc>
  while (space > 0)
    c9ec:	e0bff017 	ldw	r2,-64(fp)
    c9f0:	00bf9b16 	blt	zero,r2,c860 <altera_avalon_jtag_uart_read+0x54>
    c9f4:	00000506 	br	ca0c <altera_avalon_jtag_uart_read+0x200>
      break;
    c9f8:	0001883a 	nop
    c9fc:	00000306 	br	ca0c <altera_avalon_jtag_uart_read+0x200>
      break;
    ca00:	0001883a 	nop
    ca04:	00000106 	br	ca0c <altera_avalon_jtag_uart_read+0x200>
      break;
    ca08:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
    ca0c:	e0bff217 	ldw	r2,-56(fp)
    ca10:	10800a17 	ldw	r2,40(r2)
    ca14:	1009883a 	mov	r4,r2
    ca18:	00098880 	call	9888 <OSSemPost>

  if (ptr != buffer)
    ca1c:	e0ffff17 	ldw	r3,-4(fp)
    ca20:	e0bff117 	ldw	r2,-60(fp)
    ca24:	18801926 	beq	r3,r2,ca8c <altera_avalon_jtag_uart_read+0x280>
  NIOS2_READ_STATUS (context);
    ca28:	0005303a 	rdctl	r2,status
    ca2c:	e0bff415 	stw	r2,-48(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ca30:	e0fff417 	ldw	r3,-48(fp)
    ca34:	00bfff84 	movi	r2,-2
    ca38:	1884703a 	and	r2,r3,r2
    ca3c:	1001703a 	wrctl	status,r2
  return context;
    ca40:	e0bff417 	ldw	r2,-48(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    ca44:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    ca48:	e0bff217 	ldw	r2,-56(fp)
    ca4c:	10800817 	ldw	r2,32(r2)
    ca50:	10c00054 	ori	r3,r2,1
    ca54:	e0bff217 	ldw	r2,-56(fp)
    ca58:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    ca5c:	e0bff217 	ldw	r2,-56(fp)
    ca60:	10800017 	ldw	r2,0(r2)
    ca64:	10800104 	addi	r2,r2,4
    ca68:	1007883a 	mov	r3,r2
    ca6c:	e0bff217 	ldw	r2,-56(fp)
    ca70:	10800817 	ldw	r2,32(r2)
    ca74:	18800035 	stwio	r2,0(r3)
    ca78:	e0bffb17 	ldw	r2,-20(fp)
    ca7c:	e0bff515 	stw	r2,-44(fp)
  NIOS2_WRITE_STATUS (context);
    ca80:	e0bff517 	ldw	r2,-44(fp)
    ca84:	1001703a 	wrctl	status,r2
}
    ca88:	0001883a 	nop
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    ca8c:	e0ffff17 	ldw	r3,-4(fp)
    ca90:	e0bff117 	ldw	r2,-60(fp)
    ca94:	18800426 	beq	r3,r2,caa8 <altera_avalon_jtag_uart_read+0x29c>
    return ptr - buffer;
    ca98:	e0ffff17 	ldw	r3,-4(fp)
    ca9c:	e0bff117 	ldw	r2,-60(fp)
    caa0:	1885c83a 	sub	r2,r3,r2
    caa4:	00000606 	br	cac0 <altera_avalon_jtag_uart_read+0x2b4>
  else if (flags & O_NONBLOCK)
    caa8:	e0bfef17 	ldw	r2,-68(fp)
    caac:	1090000c 	andi	r2,r2,16384
    cab0:	10000226 	beq	r2,zero,cabc <altera_avalon_jtag_uart_read+0x2b0>
    return -EWOULDBLOCK;
    cab4:	00bffd44 	movi	r2,-11
    cab8:	00000106 	br	cac0 <altera_avalon_jtag_uart_read+0x2b4>
  else
    return -EIO;
    cabc:	00bffec4 	movi	r2,-5
}
    cac0:	e037883a 	mov	sp,fp
    cac4:	dfc00117 	ldw	ra,4(sp)
    cac8:	df000017 	ldw	fp,0(sp)
    cacc:	dec00204 	addi	sp,sp,8
    cad0:	f800283a 	ret

0000cad4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    cad4:	deffed04 	addi	sp,sp,-76
    cad8:	dfc01215 	stw	ra,72(sp)
    cadc:	df001115 	stw	fp,68(sp)
    cae0:	df001104 	addi	fp,sp,68
    cae4:	e13ff315 	stw	r4,-52(fp)
    cae8:	e17ff215 	stw	r5,-56(fp)
    caec:	e1bff115 	stw	r6,-60(fp)
    caf0:	e1fff015 	stw	r7,-64(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    caf4:	e03fff15 	stw	zero,-4(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    caf8:	e0bff217 	ldw	r2,-56(fp)
    cafc:	e0bffd15 	stw	r2,-12(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
    cb00:	e0bff317 	ldw	r2,-52(fp)
    cb04:	10800b17 	ldw	r2,44(r2)
    cb08:	e0bffa15 	stw	r2,-24(fp)
    cb0c:	e03ff98d 	sth	zero,-26(fp)
    cb10:	e0bff98b 	ldhu	r2,-26(fp)
    cb14:	e0fff404 	addi	r3,fp,-48
    cb18:	180d883a 	mov	r6,r3
    cb1c:	100b883a 	mov	r5,r2
    cb20:	e13ffa17 	ldw	r4,-24(fp)
    cb24:	00095000 	call	9500 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    cb28:	00003706 	br	cc08 <altera_avalon_jtag_uart_write+0x134>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    cb2c:	e0bff317 	ldw	r2,-52(fp)
    cb30:	10800f17 	ldw	r2,60(r2)
    cb34:	e0bffc15 	stw	r2,-16(fp)
      out = sp->tx_out;
    cb38:	e0bff317 	ldw	r2,-52(fp)
    cb3c:	10801017 	ldw	r2,64(r2)
    cb40:	e0bfff15 	stw	r2,-4(fp)

      if (in < out)
    cb44:	e0fffc17 	ldw	r3,-16(fp)
    cb48:	e0bfff17 	ldw	r2,-4(fp)
    cb4c:	1880062e 	bgeu	r3,r2,cb68 <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
    cb50:	e0ffff17 	ldw	r3,-4(fp)
    cb54:	e0bffc17 	ldw	r2,-16(fp)
    cb58:	1885c83a 	sub	r2,r3,r2
    cb5c:	10bfffc4 	addi	r2,r2,-1
    cb60:	e0bffe15 	stw	r2,-8(fp)
    cb64:	00000b06 	br	cb94 <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
    cb68:	e0bfff17 	ldw	r2,-4(fp)
    cb6c:	10000526 	beq	r2,zero,cb84 <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    cb70:	00c20004 	movi	r3,2048
    cb74:	e0bffc17 	ldw	r2,-16(fp)
    cb78:	1885c83a 	sub	r2,r3,r2
    cb7c:	e0bffe15 	stw	r2,-8(fp)
    cb80:	00000406 	br	cb94 <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    cb84:	00c1ffc4 	movi	r3,2047
    cb88:	e0bffc17 	ldw	r2,-16(fp)
    cb8c:	1885c83a 	sub	r2,r3,r2
    cb90:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
    cb94:	e0bffe17 	ldw	r2,-8(fp)
    cb98:	10001e26 	beq	r2,zero,cc14 <altera_avalon_jtag_uart_write+0x140>
        break;

      if (n > count)
    cb9c:	e0fff117 	ldw	r3,-60(fp)
    cba0:	e0bffe17 	ldw	r2,-8(fp)
    cba4:	1880022e 	bgeu	r3,r2,cbb0 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
    cba8:	e0bff117 	ldw	r2,-60(fp)
    cbac:	e0bffe15 	stw	r2,-8(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    cbb0:	e0bff317 	ldw	r2,-52(fp)
    cbb4:	10c21104 	addi	r3,r2,2116
    cbb8:	e0bffc17 	ldw	r2,-16(fp)
    cbbc:	1885883a 	add	r2,r3,r2
    cbc0:	e1bffe17 	ldw	r6,-8(fp)
    cbc4:	e17ff217 	ldw	r5,-56(fp)
    cbc8:	1009883a 	mov	r4,r2
    cbcc:	00017e80 	call	17e8 <memcpy>
      ptr   += n;
    cbd0:	e0fff217 	ldw	r3,-56(fp)
    cbd4:	e0bffe17 	ldw	r2,-8(fp)
    cbd8:	1885883a 	add	r2,r3,r2
    cbdc:	e0bff215 	stw	r2,-56(fp)
      count -= n;
    cbe0:	e0fff117 	ldw	r3,-60(fp)
    cbe4:	e0bffe17 	ldw	r2,-8(fp)
    cbe8:	1885c83a 	sub	r2,r3,r2
    cbec:	e0bff115 	stw	r2,-60(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    cbf0:	e0fffc17 	ldw	r3,-16(fp)
    cbf4:	e0bffe17 	ldw	r2,-8(fp)
    cbf8:	1885883a 	add	r2,r3,r2
    cbfc:	10c1ffcc 	andi	r3,r2,2047
    cc00:	e0bff317 	ldw	r2,-52(fp)
    cc04:	10c00f15 	stw	r3,60(r2)
    while (count > 0)
    cc08:	e0bff117 	ldw	r2,-60(fp)
    cc0c:	00bfc716 	blt	zero,r2,cb2c <altera_avalon_jtag_uart_write+0x58>
    cc10:	00000106 	br	cc18 <altera_avalon_jtag_uart_write+0x144>
        break;
    cc14:	0001883a 	nop
  NIOS2_READ_STATUS (context);
    cc18:	0005303a 	rdctl	r2,status
    cc1c:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    cc20:	e0fff717 	ldw	r3,-36(fp)
    cc24:	00bfff84 	movi	r2,-2
    cc28:	1884703a 	and	r2,r3,r2
    cc2c:	1001703a 	wrctl	status,r2
  return context;
    cc30:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    cc34:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    cc38:	e0bff317 	ldw	r2,-52(fp)
    cc3c:	10800817 	ldw	r2,32(r2)
    cc40:	10c00094 	ori	r3,r2,2
    cc44:	e0bff317 	ldw	r2,-52(fp)
    cc48:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    cc4c:	e0bff317 	ldw	r2,-52(fp)
    cc50:	10800017 	ldw	r2,0(r2)
    cc54:	10800104 	addi	r2,r2,4
    cc58:	1007883a 	mov	r3,r2
    cc5c:	e0bff317 	ldw	r2,-52(fp)
    cc60:	10800817 	ldw	r2,32(r2)
    cc64:	18800035 	stwio	r2,0(r3)
    cc68:	e0bffb17 	ldw	r2,-20(fp)
    cc6c:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
    cc70:	e0bff817 	ldw	r2,-32(fp)
    cc74:	1001703a 	wrctl	status,r2
}
    cc78:	0001883a 	nop
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    cc7c:	e0bff117 	ldw	r2,-60(fp)
    cc80:	00802c0e 	bge	zero,r2,cd34 <altera_avalon_jtag_uart_write+0x260>
    {
      if (flags & O_NONBLOCK)
    cc84:	e0bff017 	ldw	r2,-64(fp)
    cc88:	1090000c 	andi	r2,r2,16384
    cc8c:	10002c1e 	bne	r2,zero,cd40 <altera_avalon_jtag_uart_write+0x26c>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
    cc90:	d0a7c143 	ldbu	r2,-24827(gp)
    cc94:	10803fcc 	andi	r2,r2,255
    cc98:	10800058 	cmpnei	r2,r2,1
    cc9c:	1000161e 	bne	r2,zero,ccf8 <altera_avalon_jtag_uart_write+0x224>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
    cca0:	e0bff317 	ldw	r2,-52(fp)
    cca4:	10800c17 	ldw	r2,48(r2)
    cca8:	e0bff615 	stw	r2,-40(fp)
    ccac:	00800184 	movi	r2,6
    ccb0:	e0bff58d 	sth	r2,-42(fp)
    ccb4:	00bfe0c4 	movi	r2,-125
    ccb8:	e0bff545 	stb	r2,-43(fp)
    ccbc:	e03ff48d 	sth	zero,-46(fp)
  if (OSRunning)
    ccc0:	d0a7c143 	ldbu	r2,-24827(gp)
    ccc4:	10803fcc 	andi	r2,r2,255
    ccc8:	10001626 	beq	r2,zero,cd24 <altera_avalon_jtag_uart_write+0x250>
    OSFlagPend (group, flags, wait_type, timeout, &err);
    cccc:	e0fff58b 	ldhu	r3,-42(fp)
    ccd0:	e13ff543 	ldbu	r4,-43(fp)
    ccd4:	e17ff48b 	ldhu	r5,-46(fp)
    ccd8:	e0bff444 	addi	r2,fp,-47
    ccdc:	d8800015 	stw	r2,0(sp)
    cce0:	280f883a 	mov	r7,r5
    cce4:	200d883a 	mov	r6,r4
    cce8:	180b883a 	mov	r5,r3
    ccec:	e13ff617 	ldw	r4,-40(fp)
    ccf0:	00069980 	call	6998 <OSFlagPend>
    return err;
    ccf4:	00000c06 	br	cd28 <altera_avalon_jtag_uart_write+0x254>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    ccf8:	0001883a 	nop
    ccfc:	e0bff317 	ldw	r2,-52(fp)
    cd00:	10801017 	ldw	r2,64(r2)
    cd04:	e0ffff17 	ldw	r3,-4(fp)
    cd08:	1880071e 	bne	r3,r2,cd28 <altera_avalon_jtag_uart_write+0x254>
    cd0c:	e0bff317 	ldw	r2,-52(fp)
    cd10:	10c00917 	ldw	r3,36(r2)
    cd14:	e0bff317 	ldw	r2,-52(fp)
    cd18:	10800117 	ldw	r2,4(r2)
    cd1c:	18bff736 	bltu	r3,r2,ccfc <altera_avalon_jtag_uart_write+0x228>
    cd20:	00000106 	br	cd28 <altera_avalon_jtag_uart_write+0x254>
  return OS_ERR_PEND_ISR;
    cd24:	0001883a 	nop
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    cd28:	e0bff317 	ldw	r2,-52(fp)
    cd2c:	10800917 	ldw	r2,36(r2)
    cd30:	1000051e 	bne	r2,zero,cd48 <altera_avalon_jtag_uart_write+0x274>
         break;
    }
  }
  while (count > 0);
    cd34:	e0bff117 	ldw	r2,-60(fp)
    cd38:	00bfb316 	blt	zero,r2,cc08 <altera_avalon_jtag_uart_write+0x134>
    cd3c:	00000306 	br	cd4c <altera_avalon_jtag_uart_write+0x278>
        break;
    cd40:	0001883a 	nop
    cd44:	00000106 	br	cd4c <altera_avalon_jtag_uart_write+0x278>
         break;
    cd48:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
    cd4c:	e0bff317 	ldw	r2,-52(fp)
    cd50:	10800b17 	ldw	r2,44(r2)
    cd54:	1009883a 	mov	r4,r2
    cd58:	00098880 	call	9888 <OSSemPost>

  if (ptr != start)
    cd5c:	e0fff217 	ldw	r3,-56(fp)
    cd60:	e0bffd17 	ldw	r2,-12(fp)
    cd64:	18800426 	beq	r3,r2,cd78 <altera_avalon_jtag_uart_write+0x2a4>
    return ptr - start;
    cd68:	e0fff217 	ldw	r3,-56(fp)
    cd6c:	e0bffd17 	ldw	r2,-12(fp)
    cd70:	1885c83a 	sub	r2,r3,r2
    cd74:	00000606 	br	cd90 <altera_avalon_jtag_uart_write+0x2bc>
  else if (flags & O_NONBLOCK)
    cd78:	e0bff017 	ldw	r2,-64(fp)
    cd7c:	1090000c 	andi	r2,r2,16384
    cd80:	10000226 	beq	r2,zero,cd8c <altera_avalon_jtag_uart_write+0x2b8>
    return -EWOULDBLOCK;
    cd84:	00bffd44 	movi	r2,-11
    cd88:	00000106 	br	cd90 <altera_avalon_jtag_uart_write+0x2bc>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    cd8c:	00bffec4 	movi	r2,-5
}
    cd90:	e037883a 	mov	sp,fp
    cd94:	dfc00117 	ldw	ra,4(sp)
    cd98:	df000017 	ldw	fp,0(sp)
    cd9c:	dec00204 	addi	sp,sp,8
    cda0:	f800283a 	ret

0000cda4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    cda4:	defff904 	addi	sp,sp,-28
    cda8:	dfc00615 	stw	ra,24(sp)
    cdac:	df000515 	stw	fp,20(sp)
    cdb0:	df000504 	addi	fp,sp,20
    cdb4:	e13ffc15 	stw	r4,-16(fp)
    cdb8:	e17ffb15 	stw	r5,-20(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    cdbc:	0007883a 	mov	r3,zero
    cdc0:	e0bffc17 	ldw	r2,-16(fp)
    cdc4:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    cdc8:	e0bffc17 	ldw	r2,-16(fp)
    cdcc:	10800104 	addi	r2,r2,4
    cdd0:	10800037 	ldwio	r2,0(r2)
  NIOS2_READ_STATUS (context);
    cdd4:	0005303a 	rdctl	r2,status
    cdd8:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    cddc:	e0fffd17 	ldw	r3,-12(fp)
    cde0:	00bfff84 	movi	r2,-2
    cde4:	1884703a 	and	r2,r3,r2
    cde8:	1001703a 	wrctl	status,r2
  return context;
    cdec:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    cdf0:	e0bfff15 	stw	r2,-4(fp)
  alt_tick ();
    cdf4:	000eac80 	call	eac8 <alt_tick>
    cdf8:	e0bfff17 	ldw	r2,-4(fp)
    cdfc:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
    ce00:	e0bffe17 	ldw	r2,-8(fp)
    ce04:	1001703a 	wrctl	status,r2
}
    ce08:	0001883a 	nop
  alt_irq_enable_all(cpu_sr);
}
    ce0c:	0001883a 	nop
    ce10:	e037883a 	mov	sp,fp
    ce14:	dfc00117 	ldw	ra,4(sp)
    ce18:	df000017 	ldw	fp,0(sp)
    ce1c:	dec00204 	addi	sp,sp,8
    ce20:	f800283a 	ret

0000ce24 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    ce24:	defff904 	addi	sp,sp,-28
    ce28:	dfc00615 	stw	ra,24(sp)
    ce2c:	df000515 	stw	fp,20(sp)
    ce30:	df000504 	addi	fp,sp,20
    ce34:	e13ffe15 	stw	r4,-8(fp)
    ce38:	e17ffd15 	stw	r5,-12(fp)
    ce3c:	e1bffc15 	stw	r6,-16(fp)
    ce40:	e1fffb15 	stw	r7,-20(fp)
    ce44:	e0bffb17 	ldw	r2,-20(fp)
    ce48:	e0bfff15 	stw	r2,-4(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    ce4c:	d0a7cc17 	ldw	r2,-24784(gp)
    ce50:	1000031e 	bne	r2,zero,ce60 <alt_avalon_timer_sc_init+0x3c>
  {
    _alt_tick_rate = nticks;
    ce54:	e0bfff17 	ldw	r2,-4(fp)
    ce58:	d0a7cc15 	stw	r2,-24784(gp)
    return 0;
    ce5c:	00000106 	br	ce64 <alt_avalon_timer_sc_init+0x40>
  }
  else
  {
    return -1;
    ce60:	0001883a 	nop
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    ce64:	e0bffe17 	ldw	r2,-8(fp)
    ce68:	10800104 	addi	r2,r2,4
    ce6c:	00c001c4 	movi	r3,7
    ce70:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
    ce74:	01800074 	movhi	r6,1
    ce78:	31b36904 	addi	r6,r6,-12892
    ce7c:	e17ffe17 	ldw	r5,-8(fp)
    ce80:	e13ffc17 	ldw	r4,-16(fp)
    ce84:	000e65c0 	call	e65c <alt_irq_register>
#endif  
}
    ce88:	0001883a 	nop
    ce8c:	e037883a 	mov	sp,fp
    ce90:	dfc00117 	ldw	ra,4(sp)
    ce94:	df000017 	ldw	fp,0(sp)
    ce98:	dec00204 	addi	sp,sp,8
    ce9c:	f800283a 	ret

0000cea0 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
    cea0:	defffc04 	addi	sp,sp,-16
    cea4:	df000315 	stw	fp,12(sp)
    cea8:	df000304 	addi	fp,sp,12
    ceac:	e13ffe15 	stw	r4,-8(fp)
    ceb0:	e17ffd15 	stw	r5,-12(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
    ceb4:	e03fffc5 	stb	zero,-1(fp)
	if (y_pos == 0)
    ceb8:	e0bffd17 	ldw	r2,-12(fp)
    cebc:	1000061e 	bne	r2,zero,ced8 <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
    cec0:	e0bffe17 	ldw	r2,-8(fp)
    cec4:	1007883a 	mov	r3,r2
    cec8:	e0bfffc3 	ldbu	r2,-1(fp)
    cecc:	10c4b03a 	or	r2,r2,r3
    ced0:	e0bfffc5 	stb	r2,-1(fp)
    ced4:	00000806 	br	cef8 <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
    ced8:	e0bffe17 	ldw	r2,-8(fp)
    cedc:	1007883a 	mov	r3,r2
    cee0:	e0bfffc3 	ldbu	r2,-1(fp)
    cee4:	10c4b03a 	or	r2,r2,r3
    cee8:	e0bfffc5 	stb	r2,-1(fp)
		addr |= 0x00000040;
    ceec:	e0bfffc3 	ldbu	r2,-1(fp)
    cef0:	10801014 	ori	r2,r2,64
    cef4:	e0bfffc5 	stb	r2,-1(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
    cef8:	e0ffffc3 	ldbu	r3,-1(fp)
    cefc:	00bfe004 	movi	r2,-128
    cf00:	1884b03a 	or	r2,r3,r2
}
    cf04:	e037883a 	mov	sp,fp
    cf08:	df000017 	ldw	fp,0(sp)
    cf0c:	dec00104 	addi	sp,sp,4
    cf10:	f800283a 	ret

0000cf14 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
    cf14:	defffd04 	addi	sp,sp,-12
    cf18:	df000215 	stw	fp,8(sp)
    cf1c:	df000204 	addi	fp,sp,8
    cf20:	e13fff15 	stw	r4,-4(fp)
    cf24:	2805883a 	mov	r2,r5
    cf28:	e0bffe05 	stb	r2,-8(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
    cf2c:	e0bfff17 	ldw	r2,-4(fp)
    cf30:	10800a17 	ldw	r2,40(r2)
    cf34:	1007883a 	mov	r3,r2
    cf38:	e0bffe03 	ldbu	r2,-8(fp)
    cf3c:	18800025 	stbio	r2,0(r3)
}
    cf40:	0001883a 	nop
    cf44:	e037883a 	mov	sp,fp
    cf48:	df000017 	ldw	fp,0(sp)
    cf4c:	dec00104 	addi	sp,sp,4
    cf50:	f800283a 	ret

0000cf54 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
    cf54:	defffe04 	addi	sp,sp,-8
    cf58:	df000115 	stw	fp,4(sp)
    cf5c:	df000104 	addi	fp,sp,4
    cf60:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
    cf64:	e0bfff17 	ldw	r2,-4(fp)
    cf68:	10800a17 	ldw	r2,40(r2)
    cf6c:	1007883a 	mov	r3,r2
    cf70:	00800044 	movi	r2,1
    cf74:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
    cf78:	0001883a 	nop
    cf7c:	e037883a 	mov	sp,fp
    cf80:	df000017 	ldw	fp,0(sp)
    cf84:	dec00104 	addi	sp,sp,4
    cf88:	f800283a 	ret

0000cf8c <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
    cf8c:	defffc04 	addi	sp,sp,-16
    cf90:	dfc00315 	stw	ra,12(sp)
    cf94:	df000215 	stw	fp,8(sp)
    cf98:	df000204 	addi	fp,sp,8
    cf9c:	e13ffe15 	stw	r4,-8(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
    cfa0:	d1600604 	addi	r5,gp,-32744
    cfa4:	e13ffe17 	ldw	r4,-8(fp)
    cfa8:	000e46c0 	call	e46c <alt_find_dev>
    cfac:	e0bfff15 	stw	r2,-4(fp)

  return dev;
    cfb0:	e0bfff17 	ldw	r2,-4(fp)
}
    cfb4:	e037883a 	mov	sp,fp
    cfb8:	dfc00117 	ldw	ra,4(sp)
    cfbc:	df000017 	ldw	fp,0(sp)
    cfc0:	dec00204 	addi	sp,sp,8
    cfc4:	f800283a 	ret

0000cfc8 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
    cfc8:	defffb04 	addi	sp,sp,-20
    cfcc:	df000415 	stw	fp,16(sp)
    cfd0:	df000404 	addi	fp,sp,16
    cfd4:	e13ffe15 	stw	r4,-8(fp)
    cfd8:	e17ffd15 	stw	r5,-12(fp)
    cfdc:	e1bffc15 	stw	r6,-16(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
    cfe0:	e03fff15 	stw	zero,-4(fp)
    cfe4:	00000f06 	br	d024 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
    cfe8:	e0bffe17 	ldw	r2,-8(fp)
    cfec:	10800a17 	ldw	r2,40(r2)
    cff0:	10800044 	addi	r2,r2,1
    cff4:	1009883a 	mov	r4,r2
    cff8:	e0fffd17 	ldw	r3,-12(fp)
    cffc:	e0bfff17 	ldw	r2,-4(fp)
    d000:	1885883a 	add	r2,r3,r2
    d004:	10800003 	ldbu	r2,0(r2)
    d008:	10803fcc 	andi	r2,r2,255
    d00c:	1080201c 	xori	r2,r2,128
    d010:	10bfe004 	addi	r2,r2,-128
    d014:	20800025 	stbio	r2,0(r4)
	for (i = 0; i < len; i++)
    d018:	e0bfff17 	ldw	r2,-4(fp)
    d01c:	10800044 	addi	r2,r2,1
    d020:	e0bfff15 	stw	r2,-4(fp)
    d024:	e0ffff17 	ldw	r3,-4(fp)
    d028:	e0bffc17 	ldw	r2,-16(fp)
    d02c:	18bfee36 	bltu	r3,r2,cfe8 <alt_up_character_lcd_write+0x20>
	}
}
    d030:	0001883a 	nop
    d034:	0001883a 	nop
    d038:	e037883a 	mov	sp,fp
    d03c:	df000017 	ldw	fp,0(sp)
    d040:	dec00104 	addi	sp,sp,4
    d044:	f800283a 	ret

0000d048 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
    d048:	defffd04 	addi	sp,sp,-12
    d04c:	df000215 	stw	fp,8(sp)
    d050:	df000204 	addi	fp,sp,8
    d054:	e13fff15 	stw	r4,-4(fp)
    d058:	e17ffe15 	stw	r5,-8(fp)
	while ( *ptr )
    d05c:	00000d06 	br	d094 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
    d060:	e0bfff17 	ldw	r2,-4(fp)
    d064:	10800a17 	ldw	r2,40(r2)
    d068:	10800044 	addi	r2,r2,1
    d06c:	1007883a 	mov	r3,r2
    d070:	e0bffe17 	ldw	r2,-8(fp)
    d074:	10800003 	ldbu	r2,0(r2)
    d078:	10803fcc 	andi	r2,r2,255
    d07c:	1080201c 	xori	r2,r2,128
    d080:	10bfe004 	addi	r2,r2,-128
    d084:	18800025 	stbio	r2,0(r3)
		++ptr;
    d088:	e0bffe17 	ldw	r2,-8(fp)
    d08c:	10800044 	addi	r2,r2,1
    d090:	e0bffe15 	stw	r2,-8(fp)
	while ( *ptr )
    d094:	e0bffe17 	ldw	r2,-8(fp)
    d098:	10800003 	ldbu	r2,0(r2)
    d09c:	10803fcc 	andi	r2,r2,255
    d0a0:	1080201c 	xori	r2,r2,128
    d0a4:	10bfe004 	addi	r2,r2,-128
    d0a8:	103fed1e 	bne	r2,zero,d060 <alt_up_character_lcd_string+0x18>
	}
}
    d0ac:	0001883a 	nop
    d0b0:	0001883a 	nop
    d0b4:	e037883a 	mov	sp,fp
    d0b8:	df000017 	ldw	fp,0(sp)
    d0bc:	dec00104 	addi	sp,sp,4
    d0c0:	f800283a 	ret

0000d0c4 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
    d0c4:	defffb04 	addi	sp,sp,-20
    d0c8:	dfc00415 	stw	ra,16(sp)
    d0cc:	df000315 	stw	fp,12(sp)
    d0d0:	df000304 	addi	fp,sp,12
    d0d4:	e13fff15 	stw	r4,-4(fp)
    d0d8:	e17ffe15 	stw	r5,-8(fp)
    d0dc:	e1bffd15 	stw	r6,-12(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
    d0e0:	e0bfff17 	ldw	r2,-4(fp)
    d0e4:	10800017 	ldw	r2,0(r2)
    d0e8:	e0fffd17 	ldw	r3,-12(fp)
    d0ec:	180d883a 	mov	r6,r3
    d0f0:	e17ffe17 	ldw	r5,-8(fp)
    d0f4:	1009883a 	mov	r4,r2
    d0f8:	000cfc80 	call	cfc8 <alt_up_character_lcd_write>
	return 0;
    d0fc:	0005883a 	mov	r2,zero
}
    d100:	e037883a 	mov	sp,fp
    d104:	dfc00117 	ldw	ra,4(sp)
    d108:	df000017 	ldw	fp,0(sp)
    d10c:	dec00204 	addi	sp,sp,8
    d110:	f800283a 	ret

0000d114 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
    d114:	defffa04 	addi	sp,sp,-24
    d118:	dfc00515 	stw	ra,20(sp)
    d11c:	df000415 	stw	fp,16(sp)
    d120:	df000404 	addi	fp,sp,16
    d124:	e13ffe15 	stw	r4,-8(fp)
    d128:	e17ffd15 	stw	r5,-12(fp)
    d12c:	e1bffc15 	stw	r6,-16(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
    d130:	e0bffd17 	ldw	r2,-12(fp)
    d134:	10800a28 	cmpgeui	r2,r2,40
    d138:	1000031e 	bne	r2,zero,d148 <alt_up_character_lcd_set_cursor_pos+0x34>
    d13c:	e0bffc17 	ldw	r2,-16(fp)
    d140:	108000b0 	cmpltui	r2,r2,2
    d144:	1000021e 	bne	r2,zero,d150 <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
    d148:	00bfffc4 	movi	r2,-1
    d14c:	00000906 	br	d174 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    d150:	e17ffc17 	ldw	r5,-16(fp)
    d154:	e13ffd17 	ldw	r4,-12(fp)
    d158:	000cea00 	call	cea0 <get_DDRAM_addr>
    d15c:	e0bfffc5 	stb	r2,-1(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
    d160:	e0bfffc3 	ldbu	r2,-1(fp)
    d164:	100b883a 	mov	r5,r2
    d168:	e13ffe17 	ldw	r4,-8(fp)
    d16c:	000cf140 	call	cf14 <alt_up_character_lcd_send_cmd>
	return 0;
    d170:	0005883a 	mov	r2,zero
}
    d174:	e037883a 	mov	sp,fp
    d178:	dfc00117 	ldw	ra,4(sp)
    d17c:	df000017 	ldw	fp,0(sp)
    d180:	dec00204 	addi	sp,sp,8
    d184:	f800283a 	ret

0000d188 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    d188:	defffb04 	addi	sp,sp,-20
    d18c:	dfc00415 	stw	ra,16(sp)
    d190:	df000315 	stw	fp,12(sp)
    d194:	df000304 	addi	fp,sp,12
    d198:	e13ffe15 	stw	r4,-8(fp)
    d19c:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
    d1a0:	e0bffd17 	ldw	r2,-12(fp)
    d1a4:	10001526 	beq	r2,zero,d1fc <alt_up_character_lcd_shift_cursor+0x74>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
    d1a8:	e0bffd17 	ldw	r2,-12(fp)
    d1ac:	0080020e 	bge	zero,r2,d1b8 <alt_up_character_lcd_shift_cursor+0x30>
    d1b0:	00800504 	movi	r2,20
    d1b4:	00000106 	br	d1bc <alt_up_character_lcd_shift_cursor+0x34>
    d1b8:	00800404 	movi	r2,16
    d1bc:	e0bfff85 	stb	r2,-2(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
    d1c0:	e0bffd17 	ldw	r2,-12(fp)
    d1c4:	1000010e 	bge	r2,zero,d1cc <alt_up_character_lcd_shift_cursor+0x44>
    d1c8:	0085c83a 	sub	r2,zero,r2
    d1cc:	e0bfffc5 	stb	r2,-1(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    d1d0:	00000406 	br	d1e4 <alt_up_character_lcd_shift_cursor+0x5c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    d1d4:	e0bfff83 	ldbu	r2,-2(fp)
    d1d8:	100b883a 	mov	r5,r2
    d1dc:	e13ffe17 	ldw	r4,-8(fp)
    d1e0:	000cf140 	call	cf14 <alt_up_character_lcd_send_cmd>
	while (num_offset-- > 0)
    d1e4:	e0bfffc3 	ldbu	r2,-1(fp)
    d1e8:	10ffffc4 	addi	r3,r2,-1
    d1ec:	e0ffffc5 	stb	r3,-1(fp)
    d1f0:	10803fcc 	andi	r2,r2,255
    d1f4:	103ff71e 	bne	r2,zero,d1d4 <alt_up_character_lcd_shift_cursor+0x4c>
    d1f8:	00000106 	br	d200 <alt_up_character_lcd_shift_cursor+0x78>
		return;
    d1fc:	0001883a 	nop
}
    d200:	e037883a 	mov	sp,fp
    d204:	dfc00117 	ldw	ra,4(sp)
    d208:	df000017 	ldw	fp,0(sp)
    d20c:	dec00204 	addi	sp,sp,8
    d210:	f800283a 	ret

0000d214 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    d214:	defffb04 	addi	sp,sp,-20
    d218:	dfc00415 	stw	ra,16(sp)
    d21c:	df000315 	stw	fp,12(sp)
    d220:	df000304 	addi	fp,sp,12
    d224:	e13ffe15 	stw	r4,-8(fp)
    d228:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
    d22c:	e0bffd17 	ldw	r2,-12(fp)
    d230:	10001526 	beq	r2,zero,d288 <alt_up_character_lcd_shift_display+0x74>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
    d234:	e0bffd17 	ldw	r2,-12(fp)
    d238:	0080020e 	bge	zero,r2,d244 <alt_up_character_lcd_shift_display+0x30>
    d23c:	00800704 	movi	r2,28
    d240:	00000106 	br	d248 <alt_up_character_lcd_shift_display+0x34>
    d244:	00800604 	movi	r2,24
    d248:	e0bfff85 	stb	r2,-2(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
    d24c:	e0bffd17 	ldw	r2,-12(fp)
    d250:	1000010e 	bge	r2,zero,d258 <alt_up_character_lcd_shift_display+0x44>
    d254:	0085c83a 	sub	r2,zero,r2
    d258:	e0bfffc5 	stb	r2,-1(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    d25c:	00000406 	br	d270 <alt_up_character_lcd_shift_display+0x5c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    d260:	e0bfff83 	ldbu	r2,-2(fp)
    d264:	100b883a 	mov	r5,r2
    d268:	e13ffe17 	ldw	r4,-8(fp)
    d26c:	000cf140 	call	cf14 <alt_up_character_lcd_send_cmd>
	while (num_offset-- > 0)
    d270:	e0bfffc3 	ldbu	r2,-1(fp)
    d274:	10ffffc4 	addi	r3,r2,-1
    d278:	e0ffffc5 	stb	r3,-1(fp)
    d27c:	10803fcc 	andi	r2,r2,255
    d280:	103ff71e 	bne	r2,zero,d260 <alt_up_character_lcd_shift_display+0x4c>
    d284:	00000106 	br	d28c <alt_up_character_lcd_shift_display+0x78>
		return;
    d288:	0001883a 	nop
}
    d28c:	e037883a 	mov	sp,fp
    d290:	dfc00117 	ldw	ra,4(sp)
    d294:	df000017 	ldw	fp,0(sp)
    d298:	dec00204 	addi	sp,sp,8
    d29c:	f800283a 	ret

0000d2a0 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
    d2a0:	defffa04 	addi	sp,sp,-24
    d2a4:	dfc00515 	stw	ra,20(sp)
    d2a8:	df000415 	stw	fp,16(sp)
    d2ac:	df000404 	addi	fp,sp,16
    d2b0:	e13ffe15 	stw	r4,-8(fp)
    d2b4:	e17ffd15 	stw	r5,-12(fp)
    d2b8:	e1bffc15 	stw	r6,-16(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
    d2bc:	e0bffd17 	ldw	r2,-12(fp)
    d2c0:	10800a28 	cmpgeui	r2,r2,40
    d2c4:	1000031e 	bne	r2,zero,d2d4 <alt_up_character_lcd_erase_pos+0x34>
    d2c8:	e0bffc17 	ldw	r2,-16(fp)
    d2cc:	108000b0 	cmpltui	r2,r2,2
    d2d0:	1000021e 	bne	r2,zero,d2dc <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
    d2d4:	00bfffc4 	movi	r2,-1
    d2d8:	00000f06 	br	d318 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    d2dc:	e17ffc17 	ldw	r5,-16(fp)
    d2e0:	e13ffd17 	ldw	r4,-12(fp)
    d2e4:	000cea00 	call	cea0 <get_DDRAM_addr>
    d2e8:	e0bfffc5 	stb	r2,-1(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
    d2ec:	e0bfffc3 	ldbu	r2,-1(fp)
    d2f0:	100b883a 	mov	r5,r2
    d2f4:	e13ffe17 	ldw	r4,-8(fp)
    d2f8:	000cf140 	call	cf14 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
    d2fc:	e0bffe17 	ldw	r2,-8(fp)
    d300:	10800a17 	ldw	r2,40(r2)
    d304:	10800044 	addi	r2,r2,1
    d308:	1007883a 	mov	r3,r2
    d30c:	00800084 	movi	r2,2
    d310:	18800025 	stbio	r2,0(r3)
	return 0;
    d314:	0005883a 	mov	r2,zero
}
    d318:	e037883a 	mov	sp,fp
    d31c:	dfc00117 	ldw	ra,4(sp)
    d320:	df000017 	ldw	fp,0(sp)
    d324:	dec00204 	addi	sp,sp,8
    d328:	f800283a 	ret

0000d32c <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
    d32c:	defffd04 	addi	sp,sp,-12
    d330:	dfc00215 	stw	ra,8(sp)
    d334:	df000115 	stw	fp,4(sp)
    d338:	df000104 	addi	fp,sp,4
    d33c:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
    d340:	01400304 	movi	r5,12
    d344:	e13fff17 	ldw	r4,-4(fp)
    d348:	000cf140 	call	cf14 <alt_up_character_lcd_send_cmd>
}
    d34c:	0001883a 	nop
    d350:	e037883a 	mov	sp,fp
    d354:	dfc00117 	ldw	ra,4(sp)
    d358:	df000017 	ldw	fp,0(sp)
    d35c:	dec00204 	addi	sp,sp,8
    d360:	f800283a 	ret

0000d364 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
    d364:	defffd04 	addi	sp,sp,-12
    d368:	dfc00215 	stw	ra,8(sp)
    d36c:	df000115 	stw	fp,4(sp)
    d370:	df000104 	addi	fp,sp,4
    d374:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
    d378:	014003c4 	movi	r5,15
    d37c:	e13fff17 	ldw	r4,-4(fp)
    d380:	000cf140 	call	cf14 <alt_up_character_lcd_send_cmd>
}
    d384:	0001883a 	nop
    d388:	e037883a 	mov	sp,fp
    d38c:	dfc00117 	ldw	ra,4(sp)
    d390:	df000017 	ldw	fp,0(sp)
    d394:	dec00204 	addi	sp,sp,8
    d398:	f800283a 	ret

0000d39c <alt_up_irda_enable_read_interrupt>:
#include "altera_up_avalon_irda.h"
#include "altera_up_avalon_irda_regs.h"


void alt_up_irda_enable_read_interrupt(alt_up_irda_dev *irda)
{
    d39c:	defffd04 	addi	sp,sp,-12
    d3a0:	df000215 	stw	fp,8(sp)
    d3a4:	df000204 	addi	fp,sp,8
    d3a8:	e13ffe15 	stw	r4,-8(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    d3ac:	e0bffe17 	ldw	r2,-8(fp)
    d3b0:	10800a17 	ldw	r2,40(r2)
    d3b4:	10800104 	addi	r2,r2,4
    d3b8:	10800037 	ldwio	r2,0(r2)
    d3bc:	e0bfff15 	stw	r2,-4(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_IRDA_CONTROL_RE_MSK;
    d3c0:	e0bfff17 	ldw	r2,-4(fp)
    d3c4:	10800054 	ori	r2,r2,1
    d3c8:	e0bfff15 	stw	r2,-4(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
    d3cc:	e0bffe17 	ldw	r2,-8(fp)
    d3d0:	10800a17 	ldw	r2,40(r2)
    d3d4:	10800104 	addi	r2,r2,4
    d3d8:	1007883a 	mov	r3,r2
    d3dc:	e0bfff17 	ldw	r2,-4(fp)
    d3e0:	18800035 	stwio	r2,0(r3)
}
    d3e4:	0001883a 	nop
    d3e8:	e037883a 	mov	sp,fp
    d3ec:	df000017 	ldw	fp,0(sp)
    d3f0:	dec00104 	addi	sp,sp,4
    d3f4:	f800283a 	ret

0000d3f8 <alt_up_irda_disable_read_interrupt>:

void alt_up_irda_disable_read_interrupt(alt_up_irda_dev *irda)
{
    d3f8:	defffd04 	addi	sp,sp,-12
    d3fc:	df000215 	stw	fp,8(sp)
    d400:	df000204 	addi	fp,sp,8
    d404:	e13ffe15 	stw	r4,-8(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    d408:	e0bffe17 	ldw	r2,-8(fp)
    d40c:	10800a17 	ldw	r2,40(r2)
    d410:	10800104 	addi	r2,r2,4
    d414:	10800037 	ldwio	r2,0(r2)
    d418:	e0bfff15 	stw	r2,-4(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_IRDA_CONTROL_RE_MSK;
    d41c:	e0ffff17 	ldw	r3,-4(fp)
    d420:	00bfff84 	movi	r2,-2
    d424:	1884703a 	and	r2,r3,r2
    d428:	e0bfff15 	stw	r2,-4(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
    d42c:	e0bffe17 	ldw	r2,-8(fp)
    d430:	10800a17 	ldw	r2,40(r2)
    d434:	10800104 	addi	r2,r2,4
    d438:	1007883a 	mov	r3,r2
    d43c:	e0bfff17 	ldw	r2,-4(fp)
    d440:	18800035 	stwio	r2,0(r3)
}
    d444:	0001883a 	nop
    d448:	e037883a 	mov	sp,fp
    d44c:	df000017 	ldw	fp,0(sp)
    d450:	dec00104 	addi	sp,sp,4
    d454:	f800283a 	ret

0000d458 <alt_up_irda_get_used_space_in_read_FIFO>:

unsigned alt_up_irda_get_used_space_in_read_FIFO(alt_up_irda_dev *irda)
{
    d458:	defffd04 	addi	sp,sp,-12
    d45c:	df000215 	stw	fp,8(sp)
    d460:	df000204 	addi	fp,sp,8
    d464:	e13ffe15 	stw	r4,-8(fp)
	alt_u16 ravail = 0;
    d468:	e03fff8d 	sth	zero,-2(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_IRDA_DATA(irda->base), 2); 
//	return ravail;
	ravail = IORD_ALT_UP_IRDA_RAVAIL(irda->base); 
    d46c:	e0bffe17 	ldw	r2,-8(fp)
    d470:	10800a17 	ldw	r2,40(r2)
    d474:	10800084 	addi	r2,r2,2
    d478:	1080002b 	ldhuio	r2,0(r2)
    d47c:	10bfffcc 	andi	r2,r2,65535
    d480:	e0bfff8d 	sth	r2,-2(fp)
	return (ravail & ALT_UP_IRDA_RAVAIL_MSK) >> ALT_UP_IRDA_RAVAIL_OFST;
    d484:	e0bfff8b 	ldhu	r2,-2(fp)
}
    d488:	e037883a 	mov	sp,fp
    d48c:	df000017 	ldw	fp,0(sp)
    d490:	dec00104 	addi	sp,sp,4
    d494:	f800283a 	ret

0000d498 <alt_up_irda_get_available_space_in_write_FIFO>:

unsigned alt_up_irda_get_available_space_in_write_FIFO(alt_up_irda_dev *irda)
{
    d498:	defffd04 	addi	sp,sp,-12
    d49c:	df000215 	stw	fp,8(sp)
    d4a0:	df000204 	addi	fp,sp,8
    d4a4:	e13ffe15 	stw	r4,-8(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    d4a8:	e0bffe17 	ldw	r2,-8(fp)
    d4ac:	10800a17 	ldw	r2,40(r2)
    d4b0:	10800104 	addi	r2,r2,4
    d4b4:	10800037 	ldwio	r2,0(r2)
    d4b8:	e0bfff15 	stw	r2,-4(fp)
	return (ctrl_reg & ALT_UP_IRDA_CONTROL_WSPACE_MSK) >> ALT_UP_IRDA_CONTROL_WSPACE_OFST;
    d4bc:	e0bfff17 	ldw	r2,-4(fp)
    d4c0:	1004d43a 	srli	r2,r2,16
}
    d4c4:	e037883a 	mov	sp,fp
    d4c8:	df000017 	ldw	fp,0(sp)
    d4cc:	dec00104 	addi	sp,sp,4
    d4d0:	f800283a 	ret

0000d4d4 <alt_up_irda_check_parity>:

int alt_up_irda_check_parity(alt_u32 data_reg)
{
    d4d4:	defffd04 	addi	sp,sp,-12
    d4d8:	df000215 	stw	fp,8(sp)
    d4dc:	df000204 	addi	fp,sp,8
    d4e0:	e13ffe15 	stw	r4,-8(fp)
	unsigned parity_error = (data_reg & ALT_UP_IRDA_DATA_PE_MSK) >> ALT_UP_IRDA_DATA_PE_OFST;
    d4e4:	e0bffe17 	ldw	r2,-8(fp)
    d4e8:	1004d27a 	srli	r2,r2,9
    d4ec:	1080004c 	andi	r2,r2,1
    d4f0:	e0bfff15 	stw	r2,-4(fp)
	return (parity_error ? -1 : 0);
    d4f4:	e0bfff17 	ldw	r2,-4(fp)
    d4f8:	10000226 	beq	r2,zero,d504 <alt_up_irda_check_parity+0x30>
    d4fc:	00bfffc4 	movi	r2,-1
    d500:	00000106 	br	d508 <alt_up_irda_check_parity+0x34>
    d504:	0005883a 	mov	r2,zero
}
    d508:	e037883a 	mov	sp,fp
    d50c:	df000017 	ldw	fp,0(sp)
    d510:	dec00104 	addi	sp,sp,4
    d514:	f800283a 	ret

0000d518 <alt_up_irda_write_data>:

int alt_up_irda_write_data(alt_up_irda_dev *irda, alt_u8 data)
{
    d518:	defffd04 	addi	sp,sp,-12
    d51c:	df000215 	stw	fp,8(sp)
    d520:	df000204 	addi	fp,sp,8
    d524:	e13fff15 	stw	r4,-4(fp)
    d528:	2805883a 	mov	r2,r5
    d52c:	e0bffe05 	stb	r2,-8(fp)
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    */

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_IRDA_DATA(irda->base, (data>>ALT_UP_IRDA_DATA_DATA_OFST) & ALT_UP_IRDA_DATA_DATA_MSK);
    d530:	e0bfff17 	ldw	r2,-4(fp)
    d534:	10800a17 	ldw	r2,40(r2)
    d538:	1007883a 	mov	r3,r2
    d53c:	e0bffe03 	ldbu	r2,-8(fp)
    d540:	18800035 	stwio	r2,0(r3)
	return 0;
    d544:	0005883a 	mov	r2,zero
}
    d548:	e037883a 	mov	sp,fp
    d54c:	df000017 	ldw	fp,0(sp)
    d550:	dec00104 	addi	sp,sp,4
    d554:	f800283a 	ret

0000d558 <alt_up_irda_read_data>:

int alt_up_irda_read_data(alt_up_irda_dev *irda, alt_u8 *data, alt_u8 *parity_error)
{
    d558:	defffa04 	addi	sp,sp,-24
    d55c:	dfc00515 	stw	ra,20(sp)
    d560:	df000415 	stw	fp,16(sp)
    d564:	df000404 	addi	fp,sp,16
    d568:	e13ffe15 	stw	r4,-8(fp)
    d56c:	e17ffd15 	stw	r5,-12(fp)
    d570:	e1bffc15 	stw	r6,-16(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    d574:	e0bffe17 	ldw	r2,-8(fp)
    d578:	10800a17 	ldw	r2,40(r2)
    d57c:	10800037 	ldwio	r2,0(r2)
    d580:	e0bfff15 	stw	r2,-4(fp)
	*data = (data_reg & ALT_UP_IRDA_DATA_DATA_MSK) >> ALT_UP_IRDA_DATA_DATA_OFST;
    d584:	e0bfff17 	ldw	r2,-4(fp)
    d588:	1007883a 	mov	r3,r2
    d58c:	e0bffd17 	ldw	r2,-12(fp)
    d590:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_irda_check_parity(data_reg);
    d594:	e13fff17 	ldw	r4,-4(fp)
    d598:	000d4d40 	call	d4d4 <alt_up_irda_check_parity>
    d59c:	1007883a 	mov	r3,r2
    d5a0:	e0bffc17 	ldw	r2,-16(fp)
    d5a4:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_IRDA_DATA_RVALID_MSK) >> ALT_UP_IRDA_DATA_RVALID_OFST) - 1);
    d5a8:	e0bfff17 	ldw	r2,-4(fp)
    d5ac:	1004d3fa 	srli	r2,r2,15
    d5b0:	1080004c 	andi	r2,r2,1
    d5b4:	10bfffc4 	addi	r2,r2,-1
}
    d5b8:	e037883a 	mov	sp,fp
    d5bc:	dfc00117 	ldw	ra,4(sp)
    d5c0:	df000017 	ldw	fp,0(sp)
    d5c4:	dec00204 	addi	sp,sp,8
    d5c8:	f800283a 	ret

0000d5cc <alt_up_irda_read_fd>:

int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
    d5cc:	defff804 	addi	sp,sp,-32
    d5d0:	dfc00715 	stw	ra,28(sp)
    d5d4:	df000615 	stw	fp,24(sp)
    d5d8:	df000604 	addi	fp,sp,24
    d5dc:	e13ffc15 	stw	r4,-16(fp)
    d5e0:	e17ffb15 	stw	r5,-20(fp)
    d5e4:	e1bffa15 	stw	r6,-24(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
    d5e8:	e0bffc17 	ldw	r2,-16(fp)
    d5ec:	10800017 	ldw	r2,0(r2)
    d5f0:	e0bffe15 	stw	r2,-8(fp)
	int count = 0;
    d5f4:	e03fff15 	stw	zero,-4(fp)
	alt_u8 parity_error;
	while(len--)
    d5f8:	00000c06 	br	d62c <alt_up_irda_read_fd+0x60>
	{
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
    d5fc:	e0bffb17 	ldw	r2,-20(fp)
    d600:	10c00044 	addi	r3,r2,1
    d604:	e0fffb15 	stw	r3,-20(fp)
    d608:	e0fffdc4 	addi	r3,fp,-9
    d60c:	180d883a 	mov	r6,r3
    d610:	100b883a 	mov	r5,r2
    d614:	e13ffe17 	ldw	r4,-8(fp)
    d618:	000d5580 	call	d558 <alt_up_irda_read_data>
    d61c:	1000081e 	bne	r2,zero,d640 <alt_up_irda_read_fd+0x74>
			count++;
    d620:	e0bfff17 	ldw	r2,-4(fp)
    d624:	10800044 	addi	r2,r2,1
    d628:	e0bfff15 	stw	r2,-4(fp)
	while(len--)
    d62c:	e0bffa17 	ldw	r2,-24(fp)
    d630:	10ffffc4 	addi	r3,r2,-1
    d634:	e0fffa15 	stw	r3,-24(fp)
    d638:	103ff01e 	bne	r2,zero,d5fc <alt_up_irda_read_fd+0x30>
    d63c:	00000106 	br	d644 <alt_up_irda_read_fd+0x78>
		else
			break;
    d640:	0001883a 	nop
	}
	return count;
    d644:	e0bfff17 	ldw	r2,-4(fp)
}
    d648:	e037883a 	mov	sp,fp
    d64c:	dfc00117 	ldw	ra,4(sp)
    d650:	df000017 	ldw	fp,0(sp)
    d654:	dec00204 	addi	sp,sp,8
    d658:	f800283a 	ret

0000d65c <alt_up_irda_write_fd>:

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
    d65c:	defff904 	addi	sp,sp,-28
    d660:	dfc00615 	stw	ra,24(sp)
    d664:	df000515 	stw	fp,20(sp)
    d668:	df000504 	addi	fp,sp,20
    d66c:	e13ffd15 	stw	r4,-12(fp)
    d670:	e17ffc15 	stw	r5,-16(fp)
    d674:	e1bffb15 	stw	r6,-20(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
    d678:	e0bffd17 	ldw	r2,-12(fp)
    d67c:	10800017 	ldw	r2,0(r2)
    d680:	e0bffe15 	stw	r2,-8(fp)
	int count = 0;
    d684:	e03fff15 	stw	zero,-4(fp)
	while(len--)
    d688:	00000c06 	br	d6bc <alt_up_irda_write_fd+0x60>
	{
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
    d68c:	e0bffc17 	ldw	r2,-16(fp)
    d690:	10c00044 	addi	r3,r2,1
    d694:	e0fffc15 	stw	r3,-16(fp)
    d698:	10800003 	ldbu	r2,0(r2)
    d69c:	10803fcc 	andi	r2,r2,255
    d6a0:	100b883a 	mov	r5,r2
    d6a4:	e13ffe17 	ldw	r4,-8(fp)
    d6a8:	000d5180 	call	d518 <alt_up_irda_write_data>
    d6ac:	1000081e 	bne	r2,zero,d6d0 <alt_up_irda_write_fd+0x74>
			count++;
    d6b0:	e0bfff17 	ldw	r2,-4(fp)
    d6b4:	10800044 	addi	r2,r2,1
    d6b8:	e0bfff15 	stw	r2,-4(fp)
	while(len--)
    d6bc:	e0bffb17 	ldw	r2,-20(fp)
    d6c0:	10ffffc4 	addi	r3,r2,-1
    d6c4:	e0fffb15 	stw	r3,-20(fp)
    d6c8:	103ff01e 	bne	r2,zero,d68c <alt_up_irda_write_fd+0x30>
    d6cc:	00000106 	br	d6d4 <alt_up_irda_write_fd+0x78>
		else
			break;
    d6d0:	0001883a 	nop
	}
	return count;
    d6d4:	e0bfff17 	ldw	r2,-4(fp)
}
    d6d8:	e037883a 	mov	sp,fp
    d6dc:	dfc00117 	ldw	ra,4(sp)
    d6e0:	df000017 	ldw	fp,0(sp)
    d6e4:	dec00204 	addi	sp,sp,8
    d6e8:	f800283a 	ret

0000d6ec <alt_up_irda_open_dev>:

alt_up_irda_dev* alt_up_irda_open_dev(const char* name)
{
    d6ec:	defffc04 	addi	sp,sp,-16
    d6f0:	dfc00315 	stw	ra,12(sp)
    d6f4:	df000215 	stw	fp,8(sp)
    d6f8:	df000204 	addi	fp,sp,8
    d6fc:	e13ffe15 	stw	r4,-8(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_irda_dev *dev = (alt_up_irda_dev*)alt_find_dev(name, &alt_dev_list);
    d700:	d1600604 	addi	r5,gp,-32744
    d704:	e13ffe17 	ldw	r4,-8(fp)
    d708:	000e46c0 	call	e46c <alt_find_dev>
    d70c:	e0bfff15 	stw	r2,-4(fp)

  return dev;
    d710:	e0bfff17 	ldw	r2,-4(fp)
}
    d714:	e037883a 	mov	sp,fp
    d718:	dfc00117 	ldw	ra,4(sp)
    d71c:	df000017 	ldw	fp,0(sp)
    d720:	dec00204 	addi	sp,sp,8
    d724:	f800283a 	ret

0000d728 <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
    d728:	defffd04 	addi	sp,sp,-12
    d72c:	df000215 	stw	fp,8(sp)
    d730:	df000204 	addi	fp,sp,8
    d734:	e13ffe15 	stw	r4,-8(fp)
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
    d738:	e0bffe17 	ldw	r2,-8(fp)
    d73c:	1004d23a 	srli	r2,r2,8
    d740:	1080004c 	andi	r2,r2,1
    d744:	e0bfffc5 	stb	r2,-1(fp)
	return ri;
    d748:	e0bfffc3 	ldbu	r2,-1(fp)
}
    d74c:	e037883a 	mov	sp,fp
    d750:	df000017 	ldw	fp,0(sp)
    d754:	dec00104 	addi	sp,sp,4
    d758:	f800283a 	ret

0000d75c <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
    d75c:	defffd04 	addi	sp,sp,-12
    d760:	df000215 	stw	fp,8(sp)
    d764:	df000204 	addi	fp,sp,8
    d768:	e13ffe15 	stw	r4,-8(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
    d76c:	e0bffe17 	ldw	r2,-8(fp)
    d770:	1080004c 	andi	r2,r2,1
    d774:	e0bfffc5 	stb	r2,-1(fp)
	return re;
    d778:	e0bfffc3 	ldbu	r2,-1(fp)
}
    d77c:	e037883a 	mov	sp,fp
    d780:	df000017 	ldw	fp,0(sp)
    d784:	dec00104 	addi	sp,sp,4
    d788:	f800283a 	ret

0000d78c <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
    d78c:	defffd04 	addi	sp,sp,-12
    d790:	df000215 	stw	fp,8(sp)
    d794:	df000204 	addi	fp,sp,8
    d798:	e13ffe15 	stw	r4,-8(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
    d79c:	e0bffe17 	ldw	r2,-8(fp)
    d7a0:	1004d2ba 	srli	r2,r2,10
    d7a4:	1080004c 	andi	r2,r2,1
    d7a8:	e0bfffc5 	stb	r2,-1(fp)
	return re;
    d7ac:	e0bfffc3 	ldbu	r2,-1(fp)
}
    d7b0:	e037883a 	mov	sp,fp
    d7b4:	df000017 	ldw	fp,0(sp)
    d7b8:	dec00104 	addi	sp,sp,4
    d7bc:	f800283a 	ret

0000d7c0 <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
    d7c0:	defffd04 	addi	sp,sp,-12
    d7c4:	df000215 	stw	fp,8(sp)
    d7c8:	df000204 	addi	fp,sp,8
    d7cc:	e13ffe15 	stw	r4,-8(fp)
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
    d7d0:	e0bffe17 	ldw	r2,-8(fp)
    d7d4:	1004d43a 	srli	r2,r2,16
    d7d8:	e0bfff8d 	sth	r2,-2(fp)
	return ravail;
    d7dc:	e0bfff8b 	ldhu	r2,-2(fp)
}
    d7e0:	e037883a 	mov	sp,fp
    d7e4:	df000017 	ldw	fp,0(sp)
    d7e8:	dec00104 	addi	sp,sp,4
    d7ec:	f800283a 	ret

0000d7f0 <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
    d7f0:	defffd04 	addi	sp,sp,-12
    d7f4:	df000215 	stw	fp,8(sp)
    d7f8:	df000204 	addi	fp,sp,8
    d7fc:	e13ffe15 	stw	r4,-8(fp)
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
    d800:	e0bffe17 	ldw	r2,-8(fp)
    d804:	1004d3fa 	srli	r2,r2,15
    d808:	1080004c 	andi	r2,r2,1
    d80c:	e0bfffc5 	stb	r2,-1(fp)
	return rvalid;
    d810:	e0bfffc3 	ldbu	r2,-1(fp)
}
    d814:	e037883a 	mov	sp,fp
    d818:	df000017 	ldw	fp,0(sp)
    d81c:	dec00104 	addi	sp,sp,4
    d820:	f800283a 	ret

0000d824 <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
    d824:	defffd04 	addi	sp,sp,-12
    d828:	df000215 	stw	fp,8(sp)
    d82c:	df000204 	addi	fp,sp,8
    d830:	e13ffe15 	stw	r4,-8(fp)
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
    d834:	e0bffe17 	ldw	r2,-8(fp)
    d838:	e0bfffc5 	stb	r2,-1(fp)
	return data;
    d83c:	e0bfffc3 	ldbu	r2,-1(fp)
}
    d840:	e037883a 	mov	sp,fp
    d844:	df000017 	ldw	fp,0(sp)
    d848:	dec00104 	addi	sp,sp,4
    d84c:	f800283a 	ret

0000d850 <alt_up_ps2_init>:

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
    d850:	defffb04 	addi	sp,sp,-20
    d854:	dfc00415 	stw	ra,16(sp)
    d858:	df000315 	stw	fp,12(sp)
    d85c:	df000304 	addi	fp,sp,12
    d860:	e13ffd15 	stw	r4,-12(fp)
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
    d864:	01403fc4 	movi	r5,255
    d868:	e13ffd17 	ldw	r4,-12(fp)
    d86c:	000dab00 	call	dab0 <alt_up_ps2_write_data_byte_with_ack>
    d870:	e0bfff15 	stw	r2,-4(fp)
	if (status == 0)
    d874:	e0bfff17 	ldw	r2,-4(fp)
    d878:	1000211e 	bne	r2,zero,d900 <alt_up_ps2_init+0xb0>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    d87c:	e0bffec4 	addi	r2,fp,-5
    d880:	100b883a 	mov	r5,r2
    d884:	e13ffd17 	ldw	r4,-12(fp)
    d888:	000db140 	call	db14 <alt_up_ps2_read_data_byte_timeout>
    d88c:	e0bfff15 	stw	r2,-4(fp)
		if (status == 0 && byte == 0xAA)
    d890:	e0bfff17 	ldw	r2,-4(fp)
    d894:	10001a1e 	bne	r2,zero,d900 <alt_up_ps2_init+0xb0>
    d898:	e0bffec3 	ldbu	r2,-5(fp)
    d89c:	10803fcc 	andi	r2,r2,255
    d8a0:	10802a98 	cmpnei	r2,r2,170
    d8a4:	1000161e 	bne	r2,zero,d900 <alt_up_ps2_init+0xb0>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    d8a8:	e0bffec4 	addi	r2,fp,-5
    d8ac:	100b883a 	mov	r5,r2
    d8b0:	e13ffd17 	ldw	r4,-12(fp)
    d8b4:	000db140 	call	db14 <alt_up_ps2_read_data_byte_timeout>
    d8b8:	e0bfff15 	stw	r2,-4(fp)
			if (status == -ETIMEDOUT)
    d8bc:	e0bfff17 	ldw	r2,-4(fp)
    d8c0:	10bfe318 	cmpnei	r2,r2,-116
    d8c4:	1000041e 	bne	r2,zero,d8d8 <alt_up_ps2_init+0x88>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
    d8c8:	e0bffd17 	ldw	r2,-12(fp)
    d8cc:	00c00044 	movi	r3,1
    d8d0:	10c00d15 	stw	r3,52(r2)
				ps2->device_type = PS2_MOUSE;
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
			}
		}
	}
}
    d8d4:	00000a06 	br	d900 <alt_up_ps2_init+0xb0>
			else if (status == 0 && byte == 0x00)
    d8d8:	e0bfff17 	ldw	r2,-4(fp)
    d8dc:	1000081e 	bne	r2,zero,d900 <alt_up_ps2_init+0xb0>
    d8e0:	e0bffec3 	ldbu	r2,-5(fp)
    d8e4:	10803fcc 	andi	r2,r2,255
    d8e8:	1000051e 	bne	r2,zero,d900 <alt_up_ps2_init+0xb0>
				ps2->device_type = PS2_MOUSE;
    d8ec:	e0bffd17 	ldw	r2,-12(fp)
    d8f0:	10000d15 	stw	zero,52(r2)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
    d8f4:	01403d04 	movi	r5,244
    d8f8:	e13ffd17 	ldw	r4,-12(fp)
    d8fc:	000d9d40 	call	d9d4 <alt_up_ps2_write_data_byte>
}
    d900:	0001883a 	nop
    d904:	e037883a 	mov	sp,fp
    d908:	dfc00117 	ldw	ra,4(sp)
    d90c:	df000017 	ldw	fp,0(sp)
    d910:	dec00204 	addi	sp,sp,8
    d914:	f800283a 	ret

0000d918 <alt_up_ps2_enable_read_interrupt>:

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
    d918:	defffd04 	addi	sp,sp,-12
    d91c:	df000215 	stw	fp,8(sp)
    d920:	df000204 	addi	fp,sp,8
    d924:	e13ffe15 	stw	r4,-8(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    d928:	e0bffe17 	ldw	r2,-8(fp)
    d92c:	10800a17 	ldw	r2,40(r2)
    d930:	10800104 	addi	r2,r2,4
    d934:	10800037 	ldwio	r2,0(r2)
    d938:	e0bfff15 	stw	r2,-4(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
    d93c:	e0bfff17 	ldw	r2,-4(fp)
    d940:	10800054 	ori	r2,r2,1
    d944:	e0bfff15 	stw	r2,-4(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    d948:	e0bffe17 	ldw	r2,-8(fp)
    d94c:	10800a17 	ldw	r2,40(r2)
    d950:	10800104 	addi	r2,r2,4
    d954:	1007883a 	mov	r3,r2
    d958:	e0bfff17 	ldw	r2,-4(fp)
    d95c:	18800035 	stwio	r2,0(r3)
}
    d960:	0001883a 	nop
    d964:	e037883a 	mov	sp,fp
    d968:	df000017 	ldw	fp,0(sp)
    d96c:	dec00104 	addi	sp,sp,4
    d970:	f800283a 	ret

0000d974 <alt_up_ps2_disable_read_interrupt>:

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
    d974:	defffd04 	addi	sp,sp,-12
    d978:	df000215 	stw	fp,8(sp)
    d97c:	df000204 	addi	fp,sp,8
    d980:	e13ffe15 	stw	r4,-8(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    d984:	e0bffe17 	ldw	r2,-8(fp)
    d988:	10800a17 	ldw	r2,40(r2)
    d98c:	10800104 	addi	r2,r2,4
    d990:	10800037 	ldwio	r2,0(r2)
    d994:	e0bfff15 	stw	r2,-4(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
    d998:	e0ffff17 	ldw	r3,-4(fp)
    d99c:	00bfff84 	movi	r2,-2
    d9a0:	1884703a 	and	r2,r3,r2
    d9a4:	e0bfff15 	stw	r2,-4(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    d9a8:	e0bffe17 	ldw	r2,-8(fp)
    d9ac:	10800a17 	ldw	r2,40(r2)
    d9b0:	10800104 	addi	r2,r2,4
    d9b4:	1007883a 	mov	r3,r2
    d9b8:	e0bfff17 	ldw	r2,-4(fp)
    d9bc:	18800035 	stwio	r2,0(r3)
}
    d9c0:	0001883a 	nop
    d9c4:	e037883a 	mov	sp,fp
    d9c8:	df000017 	ldw	fp,0(sp)
    d9cc:	dec00104 	addi	sp,sp,4
    d9d0:	f800283a 	ret

0000d9d4 <alt_up_ps2_write_data_byte>:

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
    d9d4:	defffb04 	addi	sp,sp,-20
    d9d8:	dfc00415 	stw	ra,16(sp)
    d9dc:	df000315 	stw	fp,12(sp)
    d9e0:	df000304 	addi	fp,sp,12
    d9e4:	e13ffe15 	stw	r4,-8(fp)
    d9e8:	2805883a 	mov	r2,r5
    d9ec:	e0bffd05 	stb	r2,-12(fp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
    d9f0:	e0bffe17 	ldw	r2,-8(fp)
    d9f4:	10800a17 	ldw	r2,40(r2)
    d9f8:	1007883a 	mov	r3,r2
    d9fc:	e0bffd03 	ldbu	r2,-12(fp)
    da00:	18800025 	stbio	r2,0(r3)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
    da04:	e0bffe17 	ldw	r2,-8(fp)
    da08:	10800a17 	ldw	r2,40(r2)
    da0c:	10800104 	addi	r2,r2,4
    da10:	10800037 	ldwio	r2,0(r2)
    da14:	e0bfff15 	stw	r2,-4(fp)
	if (read_CE_bit(ctrl_reg))
    da18:	e13fff17 	ldw	r4,-4(fp)
    da1c:	000d78c0 	call	d78c <read_CE_bit>
    da20:	10803fcc 	andi	r2,r2,255
    da24:	10000226 	beq	r2,zero,da30 <alt_up_ps2_write_data_byte+0x5c>
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
    da28:	00bffec4 	movi	r2,-5
    da2c:	00000106 	br	da34 <alt_up_ps2_write_data_byte+0x60>
	}
	return 0;
    da30:	0005883a 	mov	r2,zero
}
    da34:	e037883a 	mov	sp,fp
    da38:	dfc00117 	ldw	ra,4(sp)
    da3c:	df000017 	ldw	fp,0(sp)
    da40:	dec00204 	addi	sp,sp,8
    da44:	f800283a 	ret

0000da48 <alt_up_ps2_wait_for_ack>:

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
    da48:	defffc04 	addi	sp,sp,-16
    da4c:	dfc00315 	stw	ra,12(sp)
    da50:	df000215 	stw	fp,8(sp)
    da54:	df000204 	addi	fp,sp,8
    da58:	e13ffe15 	stw	r4,-8(fp)
	unsigned char data = 0;
    da5c:	e03fff85 	stb	zero,-2(fp)
	unsigned char status = 0;
    da60:	e03fffc5 	stb	zero,-1(fp)
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
    da64:	e0bfff84 	addi	r2,fp,-2
    da68:	100b883a 	mov	r5,r2
    da6c:	e13ffe17 	ldw	r4,-8(fp)
    da70:	000db140 	call	db14 <alt_up_ps2_read_data_byte_timeout>
    da74:	e0bfffc5 	stb	r2,-1(fp)
		if ( status == 0)
    da78:	e0bfffc3 	ldbu	r2,-1(fp)
    da7c:	1000061e 	bne	r2,zero,da98 <alt_up_ps2_wait_for_ack+0x50>
		{
			if (data == PS2_ACK)
    da80:	e0bfff83 	ldbu	r2,-2(fp)
    da84:	10803fcc 	andi	r2,r2,255
    da88:	10803e98 	cmpnei	r2,r2,250
    da8c:	103ff51e 	bne	r2,zero,da64 <alt_up_ps2_wait_for_ack+0x1c>
				return 0;
    da90:	0005883a 	mov	r2,zero
    da94:	00000106 	br	da9c <alt_up_ps2_wait_for_ack+0x54>
		}
		else 
		{
			return status;
    da98:	e0bfffc3 	ldbu	r2,-1(fp)
		}
	} while(1);
	return -ETIMEDOUT;
}
    da9c:	e037883a 	mov	sp,fp
    daa0:	dfc00117 	ldw	ra,4(sp)
    daa4:	df000017 	ldw	fp,0(sp)
    daa8:	dec00204 	addi	sp,sp,8
    daac:	f800283a 	ret

0000dab0 <alt_up_ps2_write_data_byte_with_ack>:

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
    dab0:	defffa04 	addi	sp,sp,-24
    dab4:	dfc00515 	stw	ra,20(sp)
    dab8:	df000415 	stw	fp,16(sp)
    dabc:	df000404 	addi	fp,sp,16
    dac0:	e13ffd15 	stw	r4,-12(fp)
    dac4:	2805883a 	mov	r2,r5
    dac8:	e0bffc05 	stb	r2,-16(fp)
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
    dacc:	e0bffc03 	ldbu	r2,-16(fp)
    dad0:	100b883a 	mov	r5,r2
    dad4:	e13ffd17 	ldw	r4,-12(fp)
    dad8:	000d9d40 	call	d9d4 <alt_up_ps2_write_data_byte>
    dadc:	e0bfff15 	stw	r2,-4(fp)
	if ( send_status != 0)
    dae0:	e0bfff17 	ldw	r2,-4(fp)
    dae4:	10000226 	beq	r2,zero,daf0 <alt_up_ps2_write_data_byte_with_ack+0x40>
		// return on sending error
		return send_status;
    dae8:	e0bfff17 	ldw	r2,-4(fp)
    daec:	00000406 	br	db00 <alt_up_ps2_write_data_byte_with_ack+0x50>

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
    daf0:	e13ffd17 	ldw	r4,-12(fp)
    daf4:	000da480 	call	da48 <alt_up_ps2_wait_for_ack>
    daf8:	e0bffe15 	stw	r2,-8(fp)
	return ack_status;
    dafc:	e0bffe17 	ldw	r2,-8(fp)
}
    db00:	e037883a 	mov	sp,fp
    db04:	dfc00117 	ldw	ra,4(sp)
    db08:	df000017 	ldw	fp,0(sp)
    db0c:	dec00204 	addi	sp,sp,8
    db10:	f800283a 	ret

0000db14 <alt_up_ps2_read_data_byte_timeout>:

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    db14:	defffa04 	addi	sp,sp,-24
    db18:	dfc00515 	stw	ra,20(sp)
    db1c:	df000415 	stw	fp,16(sp)
    db20:	df000404 	addi	fp,sp,16
    db24:	e13ffd15 	stw	r4,-12(fp)
    db28:	e17ffc15 	stw	r5,-16(fp)
	unsigned int data_reg = 0; 
    db2c:	e03ffe15 	stw	zero,-8(fp)
	unsigned int count = 0;
    db30:	e03fff15 	stw	zero,-4(fp)
	do {
		count++;
    db34:	e0bfff17 	ldw	r2,-4(fp)
    db38:	10800044 	addi	r2,r2,1
    db3c:	e0bfff15 	stw	r2,-4(fp)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    db40:	e0bffd17 	ldw	r2,-12(fp)
    db44:	10800a17 	ldw	r2,40(r2)
    db48:	10800037 	ldwio	r2,0(r2)
    db4c:	e0bffe15 	stw	r2,-8(fp)
		if (read_data_valid(data_reg))
    db50:	e13ffe17 	ldw	r4,-8(fp)
    db54:	000d7f00 	call	d7f0 <read_data_valid>
    db58:	10803fcc 	andi	r2,r2,255
    db5c:	10000726 	beq	r2,zero,db7c <alt_up_ps2_read_data_byte_timeout+0x68>
		{
			*byte = read_data_byte(data_reg);
    db60:	e13ffe17 	ldw	r4,-8(fp)
    db64:	000d8240 	call	d824 <read_data_byte>
    db68:	1007883a 	mov	r3,r2
    db6c:	e0bffc17 	ldw	r2,-16(fp)
    db70:	10c00005 	stb	r3,0(r2)
			return 0;
    db74:	0005883a 	mov	r2,zero
    db78:	00000806 	br	db9c <alt_up_ps2_read_data_byte_timeout+0x88>
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
    db7c:	e0bffd17 	ldw	r2,-12(fp)
    db80:	10800c17 	ldw	r2,48(r2)
    db84:	103feb26 	beq	r2,zero,db34 <alt_up_ps2_read_data_byte_timeout+0x20>
    db88:	e0bffd17 	ldw	r2,-12(fp)
    db8c:	10c00c17 	ldw	r3,48(r2)
    db90:	e0bfff17 	ldw	r2,-4(fp)
    db94:	18bfe72e 	bgeu	r3,r2,db34 <alt_up_ps2_read_data_byte_timeout+0x20>
		{
			return -ETIMEDOUT;
    db98:	00bfe304 	movi	r2,-116
		}
	} while (1);
}
    db9c:	e037883a 	mov	sp,fp
    dba0:	dfc00117 	ldw	ra,4(sp)
    dba4:	df000017 	ldw	fp,0(sp)
    dba8:	dec00204 	addi	sp,sp,8
    dbac:	f800283a 	ret

0000dbb0 <alt_up_ps2_read_data_byte>:

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    dbb0:	defffb04 	addi	sp,sp,-20
    dbb4:	dfc00415 	stw	ra,16(sp)
    dbb8:	df000315 	stw	fp,12(sp)
    dbbc:	df000304 	addi	fp,sp,12
    dbc0:	e13ffe15 	stw	r4,-8(fp)
    dbc4:	e17ffd15 	stw	r5,-12(fp)
	unsigned int data_reg = 0; 
    dbc8:	e03fff15 	stw	zero,-4(fp)
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    dbcc:	e0bffe17 	ldw	r2,-8(fp)
    dbd0:	10800a17 	ldw	r2,40(r2)
    dbd4:	10800037 	ldwio	r2,0(r2)
    dbd8:	e0bfff15 	stw	r2,-4(fp)
	if (read_data_valid(data_reg))
    dbdc:	e13fff17 	ldw	r4,-4(fp)
    dbe0:	000d7f00 	call	d7f0 <read_data_valid>
    dbe4:	10803fcc 	andi	r2,r2,255
    dbe8:	10000726 	beq	r2,zero,dc08 <alt_up_ps2_read_data_byte+0x58>
	{
		*byte = read_data_byte(data_reg);
    dbec:	e13fff17 	ldw	r4,-4(fp)
    dbf0:	000d8240 	call	d824 <read_data_byte>
    dbf4:	1007883a 	mov	r3,r2
    dbf8:	e0bffd17 	ldw	r2,-12(fp)
    dbfc:	10c00005 	stb	r3,0(r2)
		return 0;
    dc00:	0005883a 	mov	r2,zero
    dc04:	00000106 	br	dc0c <alt_up_ps2_read_data_byte+0x5c>
	}
	return -1;
    dc08:	00bfffc4 	movi	r2,-1
}
    dc0c:	e037883a 	mov	sp,fp
    dc10:	dfc00117 	ldw	ra,4(sp)
    dc14:	df000017 	ldw	fp,0(sp)
    dc18:	dec00204 	addi	sp,sp,8
    dc1c:	f800283a 	ret

0000dc20 <alt_up_ps2_clear_fifo>:

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
    dc20:	defffb04 	addi	sp,sp,-20
    dc24:	dfc00415 	stw	ra,16(sp)
    dc28:	df000315 	stw	fp,12(sp)
    dc2c:	df000304 	addi	fp,sp,12
    dc30:	e13ffd15 	stw	r4,-12(fp)
	// The DATA byte of the data register will be automatically cleared after a read
	// So we simply keep reading it until there are no available bytes
	alt_u16 num = 0;
    dc34:	e03fff8d 	sth	zero,-2(fp)
	unsigned int data_reg = 0;
    dc38:	e03ffe15 	stw	zero,-8(fp)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    dc3c:	e0bffd17 	ldw	r2,-12(fp)
    dc40:	10800a17 	ldw	r2,40(r2)
    dc44:	10800037 	ldwio	r2,0(r2)
    dc48:	e0bffe15 	stw	r2,-8(fp)
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
    dc4c:	e13ffe17 	ldw	r4,-8(fp)
    dc50:	000d7c00 	call	d7c0 <read_num_bytes_available>
    dc54:	e0bfff8d 	sth	r2,-2(fp)
	} while (num > 0);
    dc58:	e0bfff8b 	ldhu	r2,-2(fp)
    dc5c:	103ff71e 	bne	r2,zero,dc3c <alt_up_ps2_clear_fifo+0x1c>
}
    dc60:	0001883a 	nop
    dc64:	0001883a 	nop
    dc68:	e037883a 	mov	sp,fp
    dc6c:	dfc00117 	ldw	ra,4(sp)
    dc70:	df000017 	ldw	fp,0(sp)
    dc74:	dec00204 	addi	sp,sp,8
    dc78:	f800283a 	ret

0000dc7c <alt_up_ps2_read_fd>:

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
    dc7c:	defff804 	addi	sp,sp,-32
    dc80:	dfc00715 	stw	ra,28(sp)
    dc84:	df000615 	stw	fp,24(sp)
    dc88:	df000604 	addi	fp,sp,24
    dc8c:	e13ffc15 	stw	r4,-16(fp)
    dc90:	e17ffb15 	stw	r5,-20(fp)
    dc94:	e1bffa15 	stw	r6,-24(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    dc98:	e0bffc17 	ldw	r2,-16(fp)
    dc9c:	10800017 	ldw	r2,0(r2)
    dca0:	e0bfff15 	stw	r2,-4(fp)
	int status = 0;
    dca4:	e03ffe15 	stw	zero,-8(fp)
	int count = 0;
    dca8:	e03ffd15 	stw	zero,-12(fp)
	while (count < len);
    dcac:	e0fffd17 	ldw	r3,-12(fp)
    dcb0:	e0bffa17 	ldw	r2,-24(fp)
    dcb4:	18bffd16 	blt	r3,r2,dcac <alt_up_ps2_read_fd+0x30>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, (unsigned char *)ptr++);
    dcb8:	e0bffb17 	ldw	r2,-20(fp)
    dcbc:	10c00044 	addi	r3,r2,1
    dcc0:	e0fffb15 	stw	r3,-20(fp)
    dcc4:	100b883a 	mov	r5,r2
    dcc8:	e13fff17 	ldw	r4,-4(fp)
    dccc:	000db140 	call	db14 <alt_up_ps2_read_data_byte_timeout>
    dcd0:	e0bffe15 	stw	r2,-8(fp)
		if (status!=0)
    dcd4:	e0bffe17 	ldw	r2,-8(fp)
    dcd8:	10000226 	beq	r2,zero,dce4 <alt_up_ps2_read_fd+0x68>
			return count;
    dcdc:	e0bffd17 	ldw	r2,-12(fp)
    dce0:	00000406 	br	dcf4 <alt_up_ps2_read_fd+0x78>
		count++;
    dce4:	e0bffd17 	ldw	r2,-12(fp)
    dce8:	10800044 	addi	r2,r2,1
    dcec:	e0bffd15 	stw	r2,-12(fp)
	} 
	return count;
    dcf0:	e0bffd17 	ldw	r2,-12(fp)
}
    dcf4:	e037883a 	mov	sp,fp
    dcf8:	dfc00117 	ldw	ra,4(sp)
    dcfc:	df000017 	ldw	fp,0(sp)
    dd00:	dec00204 	addi	sp,sp,8
    dd04:	f800283a 	ret

0000dd08 <alt_up_ps2_write_fd>:

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
    dd08:	defff804 	addi	sp,sp,-32
    dd0c:	dfc00715 	stw	ra,28(sp)
    dd10:	df000615 	stw	fp,24(sp)
    dd14:	df000604 	addi	fp,sp,24
    dd18:	e13ffc15 	stw	r4,-16(fp)
    dd1c:	e17ffb15 	stw	r5,-20(fp)
    dd20:	e1bffa15 	stw	r6,-24(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    dd24:	e0bffc17 	ldw	r2,-16(fp)
    dd28:	10800017 	ldw	r2,0(r2)
    dd2c:	e0bffe15 	stw	r2,-8(fp)
	int status = 0;
    dd30:	e03ffd15 	stw	zero,-12(fp)
	int count = 0;
    dd34:	e03fff15 	stw	zero,-4(fp)
	while (count < len)
    dd38:	00001006 	br	dd7c <alt_up_ps2_write_fd+0x74>
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
    dd3c:	e0bffb17 	ldw	r2,-20(fp)
    dd40:	10c00044 	addi	r3,r2,1
    dd44:	e0fffb15 	stw	r3,-20(fp)
    dd48:	10800003 	ldbu	r2,0(r2)
    dd4c:	10803fcc 	andi	r2,r2,255
    dd50:	100b883a 	mov	r5,r2
    dd54:	e13ffe17 	ldw	r4,-8(fp)
    dd58:	000d9d40 	call	d9d4 <alt_up_ps2_write_data_byte>
    dd5c:	e0bffd15 	stw	r2,-12(fp)
		if (status!=0)
    dd60:	e0bffd17 	ldw	r2,-12(fp)
    dd64:	10000226 	beq	r2,zero,dd70 <alt_up_ps2_write_fd+0x68>
			return count;
    dd68:	e0bfff17 	ldw	r2,-4(fp)
    dd6c:	00000706 	br	dd8c <alt_up_ps2_write_fd+0x84>
		count++;
    dd70:	e0bfff17 	ldw	r2,-4(fp)
    dd74:	10800044 	addi	r2,r2,1
    dd78:	e0bfff15 	stw	r2,-4(fp)
	while (count < len)
    dd7c:	e0ffff17 	ldw	r3,-4(fp)
    dd80:	e0bffa17 	ldw	r2,-24(fp)
    dd84:	18bfed16 	blt	r3,r2,dd3c <alt_up_ps2_write_fd+0x34>
	}
	return count;
    dd88:	e0bfff17 	ldw	r2,-4(fp)
}
    dd8c:	e037883a 	mov	sp,fp
    dd90:	dfc00117 	ldw	ra,4(sp)
    dd94:	df000017 	ldw	fp,0(sp)
    dd98:	dec00204 	addi	sp,sp,8
    dd9c:	f800283a 	ret

0000dda0 <alt_up_ps2_open_dev>:

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
    dda0:	defffc04 	addi	sp,sp,-16
    dda4:	dfc00315 	stw	ra,12(sp)
    dda8:	df000215 	stw	fp,8(sp)
    ddac:	df000204 	addi	fp,sp,8
    ddb0:	e13ffe15 	stw	r4,-8(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
    ddb4:	d1600604 	addi	r5,gp,-32744
    ddb8:	e13ffe17 	ldw	r4,-8(fp)
    ddbc:	000e46c0 	call	e46c <alt_find_dev>
    ddc0:	e0bfff15 	stw	r2,-4(fp)

  return dev;
    ddc4:	e0bfff17 	ldw	r2,-4(fp)
}
    ddc8:	e037883a 	mov	sp,fp
    ddcc:	dfc00117 	ldw	ra,4(sp)
    ddd0:	df000017 	ldw	fp,0(sp)
    ddd4:	dec00204 	addi	sp,sp,8
    ddd8:	f800283a 	ret

0000dddc <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
    dddc:	defffd04 	addi	sp,sp,-12
    dde0:	df000215 	stw	fp,8(sp)
    dde4:	df000204 	addi	fp,sp,8
    dde8:	e13ffe15 	stw	r4,-8(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    ddec:	e0bffe17 	ldw	r2,-8(fp)
    ddf0:	10800a17 	ldw	r2,40(r2)
    ddf4:	10800104 	addi	r2,r2,4
    ddf8:	10800037 	ldwio	r2,0(r2)
    ddfc:	e0bfff15 	stw	r2,-4(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
    de00:	e0bfff17 	ldw	r2,-4(fp)
    de04:	10800054 	ori	r2,r2,1
    de08:	e0bfff15 	stw	r2,-4(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    de0c:	e0bffe17 	ldw	r2,-8(fp)
    de10:	10800a17 	ldw	r2,40(r2)
    de14:	10800104 	addi	r2,r2,4
    de18:	1007883a 	mov	r3,r2
    de1c:	e0bfff17 	ldw	r2,-4(fp)
    de20:	18800035 	stwio	r2,0(r3)
}
    de24:	0001883a 	nop
    de28:	e037883a 	mov	sp,fp
    de2c:	df000017 	ldw	fp,0(sp)
    de30:	dec00104 	addi	sp,sp,4
    de34:	f800283a 	ret

0000de38 <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
    de38:	defffd04 	addi	sp,sp,-12
    de3c:	df000215 	stw	fp,8(sp)
    de40:	df000204 	addi	fp,sp,8
    de44:	e13ffe15 	stw	r4,-8(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    de48:	e0bffe17 	ldw	r2,-8(fp)
    de4c:	10800a17 	ldw	r2,40(r2)
    de50:	10800104 	addi	r2,r2,4
    de54:	10800037 	ldwio	r2,0(r2)
    de58:	e0bfff15 	stw	r2,-4(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
    de5c:	e0ffff17 	ldw	r3,-4(fp)
    de60:	00bfff84 	movi	r2,-2
    de64:	1884703a 	and	r2,r3,r2
    de68:	e0bfff15 	stw	r2,-4(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    de6c:	e0bffe17 	ldw	r2,-8(fp)
    de70:	10800a17 	ldw	r2,40(r2)
    de74:	10800104 	addi	r2,r2,4
    de78:	1007883a 	mov	r3,r2
    de7c:	e0bfff17 	ldw	r2,-4(fp)
    de80:	18800035 	stwio	r2,0(r3)
}
    de84:	0001883a 	nop
    de88:	e037883a 	mov	sp,fp
    de8c:	df000017 	ldw	fp,0(sp)
    de90:	dec00104 	addi	sp,sp,4
    de94:	f800283a 	ret

0000de98 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
    de98:	defffd04 	addi	sp,sp,-12
    de9c:	df000215 	stw	fp,8(sp)
    dea0:	df000204 	addi	fp,sp,8
    dea4:	e13ffe15 	stw	r4,-8(fp)
	alt_u16 ravail = 0;
    dea8:	e03fff8d 	sth	zero,-2(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
    deac:	e0bffe17 	ldw	r2,-8(fp)
    deb0:	10800a17 	ldw	r2,40(r2)
    deb4:	10800084 	addi	r2,r2,2
    deb8:	1080002b 	ldhuio	r2,0(r2)
    debc:	10bfffcc 	andi	r2,r2,65535
    dec0:	e0bfff8d 	sth	r2,-2(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
    dec4:	e0bfff8b 	ldhu	r2,-2(fp)
}
    dec8:	e037883a 	mov	sp,fp
    decc:	df000017 	ldw	fp,0(sp)
    ded0:	dec00104 	addi	sp,sp,4
    ded4:	f800283a 	ret

0000ded8 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
    ded8:	defffd04 	addi	sp,sp,-12
    dedc:	df000215 	stw	fp,8(sp)
    dee0:	df000204 	addi	fp,sp,8
    dee4:	e13ffe15 	stw	r4,-8(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    dee8:	e0bffe17 	ldw	r2,-8(fp)
    deec:	10800a17 	ldw	r2,40(r2)
    def0:	10800104 	addi	r2,r2,4
    def4:	10800037 	ldwio	r2,0(r2)
    def8:	e0bfff15 	stw	r2,-4(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
    defc:	e0bfff17 	ldw	r2,-4(fp)
    df00:	1004d43a 	srli	r2,r2,16
}
    df04:	e037883a 	mov	sp,fp
    df08:	df000017 	ldw	fp,0(sp)
    df0c:	dec00104 	addi	sp,sp,4
    df10:	f800283a 	ret

0000df14 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
    df14:	defffd04 	addi	sp,sp,-12
    df18:	df000215 	stw	fp,8(sp)
    df1c:	df000204 	addi	fp,sp,8
    df20:	e13ffe15 	stw	r4,-8(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
    df24:	e0bffe17 	ldw	r2,-8(fp)
    df28:	1004d27a 	srli	r2,r2,9
    df2c:	1080004c 	andi	r2,r2,1
    df30:	e0bfff15 	stw	r2,-4(fp)
	return (parity_error ? -1 : 0);
    df34:	e0bfff17 	ldw	r2,-4(fp)
    df38:	10000226 	beq	r2,zero,df44 <alt_up_rs232_check_parity+0x30>
    df3c:	00bfffc4 	movi	r2,-1
    df40:	00000106 	br	df48 <alt_up_rs232_check_parity+0x34>
    df44:	0005883a 	mov	r2,zero
}
    df48:	e037883a 	mov	sp,fp
    df4c:	df000017 	ldw	fp,0(sp)
    df50:	dec00104 	addi	sp,sp,4
    df54:	f800283a 	ret

0000df58 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
    df58:	defffd04 	addi	sp,sp,-12
    df5c:	df000215 	stw	fp,8(sp)
    df60:	df000204 	addi	fp,sp,8
    df64:	e13fff15 	stw	r4,-4(fp)
    df68:	2805883a 	mov	r2,r5
    df6c:	e0bffe05 	stb	r2,-8(fp)
	/*alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);*/
    
	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
    df70:	e0bfff17 	ldw	r2,-4(fp)
    df74:	10800a17 	ldw	r2,40(r2)
    df78:	1007883a 	mov	r3,r2
    df7c:	e0bffe03 	ldbu	r2,-8(fp)
    df80:	18800035 	stwio	r2,0(r3)
	return 0;
    df84:	0005883a 	mov	r2,zero
}
    df88:	e037883a 	mov	sp,fp
    df8c:	df000017 	ldw	fp,0(sp)
    df90:	dec00104 	addi	sp,sp,4
    df94:	f800283a 	ret

0000df98 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
    df98:	defffa04 	addi	sp,sp,-24
    df9c:	dfc00515 	stw	ra,20(sp)
    dfa0:	df000415 	stw	fp,16(sp)
    dfa4:	df000404 	addi	fp,sp,16
    dfa8:	e13ffe15 	stw	r4,-8(fp)
    dfac:	e17ffd15 	stw	r5,-12(fp)
    dfb0:	e1bffc15 	stw	r6,-16(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
    dfb4:	e0bffe17 	ldw	r2,-8(fp)
    dfb8:	10800a17 	ldw	r2,40(r2)
    dfbc:	10800037 	ldwio	r2,0(r2)
    dfc0:	e0bfff15 	stw	r2,-4(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
    dfc4:	e0bfff17 	ldw	r2,-4(fp)
    dfc8:	1007883a 	mov	r3,r2
    dfcc:	e0bffd17 	ldw	r2,-12(fp)
    dfd0:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
    dfd4:	e13fff17 	ldw	r4,-4(fp)
    dfd8:	000df140 	call	df14 <alt_up_rs232_check_parity>
    dfdc:	1007883a 	mov	r3,r2
    dfe0:	e0bffc17 	ldw	r2,-16(fp)
    dfe4:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
    dfe8:	e0bfff17 	ldw	r2,-4(fp)
    dfec:	1004d3fa 	srli	r2,r2,15
    dff0:	1080004c 	andi	r2,r2,1
    dff4:	10bfffc4 	addi	r2,r2,-1
}
    dff8:	e037883a 	mov	sp,fp
    dffc:	dfc00117 	ldw	ra,4(sp)
    e000:	df000017 	ldw	fp,0(sp)
    e004:	dec00204 	addi	sp,sp,8
    e008:	f800283a 	ret

0000e00c <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
    e00c:	defff804 	addi	sp,sp,-32
    e010:	dfc00715 	stw	ra,28(sp)
    e014:	df000615 	stw	fp,24(sp)
    e018:	df000604 	addi	fp,sp,24
    e01c:	e13ffc15 	stw	r4,-16(fp)
    e020:	e17ffb15 	stw	r5,-20(fp)
    e024:	e1bffa15 	stw	r6,-24(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    e028:	e0bffc17 	ldw	r2,-16(fp)
    e02c:	10800017 	ldw	r2,0(r2)
    e030:	e0bffe15 	stw	r2,-8(fp)
	int count = 0;
    e034:	e03fff15 	stw	zero,-4(fp)
	alt_u8 parity_error;
	while(len--)
    e038:	00000c06 	br	e06c <alt_up_rs232_read_fd+0x60>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
    e03c:	e0bffb17 	ldw	r2,-20(fp)
    e040:	10c00044 	addi	r3,r2,1
    e044:	e0fffb15 	stw	r3,-20(fp)
    e048:	e0fffdc4 	addi	r3,fp,-9
    e04c:	180d883a 	mov	r6,r3
    e050:	100b883a 	mov	r5,r2
    e054:	e13ffe17 	ldw	r4,-8(fp)
    e058:	000df980 	call	df98 <alt_up_rs232_read_data>
    e05c:	1000081e 	bne	r2,zero,e080 <alt_up_rs232_read_fd+0x74>
			count++;
    e060:	e0bfff17 	ldw	r2,-4(fp)
    e064:	10800044 	addi	r2,r2,1
    e068:	e0bfff15 	stw	r2,-4(fp)
	while(len--)
    e06c:	e0bffa17 	ldw	r2,-24(fp)
    e070:	10ffffc4 	addi	r3,r2,-1
    e074:	e0fffa15 	stw	r3,-24(fp)
    e078:	103ff01e 	bne	r2,zero,e03c <alt_up_rs232_read_fd+0x30>
    e07c:	00000106 	br	e084 <alt_up_rs232_read_fd+0x78>
		else
			break;
    e080:	0001883a 	nop
	}
	return count;
    e084:	e0bfff17 	ldw	r2,-4(fp)
}
    e088:	e037883a 	mov	sp,fp
    e08c:	dfc00117 	ldw	ra,4(sp)
    e090:	df000017 	ldw	fp,0(sp)
    e094:	dec00204 	addi	sp,sp,8
    e098:	f800283a 	ret

0000e09c <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
    e09c:	defff904 	addi	sp,sp,-28
    e0a0:	dfc00615 	stw	ra,24(sp)
    e0a4:	df000515 	stw	fp,20(sp)
    e0a8:	df000504 	addi	fp,sp,20
    e0ac:	e13ffd15 	stw	r4,-12(fp)
    e0b0:	e17ffc15 	stw	r5,-16(fp)
    e0b4:	e1bffb15 	stw	r6,-20(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    e0b8:	e0bffd17 	ldw	r2,-12(fp)
    e0bc:	10800017 	ldw	r2,0(r2)
    e0c0:	e0bffe15 	stw	r2,-8(fp)
	int count = 0;
    e0c4:	e03fff15 	stw	zero,-4(fp)
	while(len--)
    e0c8:	00000d06 	br	e100 <alt_up_rs232_write_fd+0x64>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
    e0cc:	e0bffc17 	ldw	r2,-16(fp)
    e0d0:	10800003 	ldbu	r2,0(r2)
    e0d4:	10803fcc 	andi	r2,r2,255
    e0d8:	100b883a 	mov	r5,r2
    e0dc:	e13ffe17 	ldw	r4,-8(fp)
    e0e0:	000df580 	call	df58 <alt_up_rs232_write_data>
    e0e4:	10000b1e 	bne	r2,zero,e114 <alt_up_rs232_write_fd+0x78>
		{
			count++;
    e0e8:	e0bfff17 	ldw	r2,-4(fp)
    e0ec:	10800044 	addi	r2,r2,1
    e0f0:	e0bfff15 	stw	r2,-4(fp)
			ptr++;
    e0f4:	e0bffc17 	ldw	r2,-16(fp)
    e0f8:	10800044 	addi	r2,r2,1
    e0fc:	e0bffc15 	stw	r2,-16(fp)
	while(len--)
    e100:	e0bffb17 	ldw	r2,-20(fp)
    e104:	10ffffc4 	addi	r3,r2,-1
    e108:	e0fffb15 	stw	r3,-20(fp)
    e10c:	103fef1e 	bne	r2,zero,e0cc <alt_up_rs232_write_fd+0x30>
    e110:	00000106 	br	e118 <alt_up_rs232_write_fd+0x7c>
		}
		else
			break;
    e114:	0001883a 	nop
	}
	return count;
    e118:	e0bfff17 	ldw	r2,-4(fp)
}
    e11c:	e037883a 	mov	sp,fp
    e120:	dfc00117 	ldw	ra,4(sp)
    e124:	df000017 	ldw	fp,0(sp)
    e128:	dec00204 	addi	sp,sp,8
    e12c:	f800283a 	ret

0000e130 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
    e130:	defffc04 	addi	sp,sp,-16
    e134:	dfc00315 	stw	ra,12(sp)
    e138:	df000215 	stw	fp,8(sp)
    e13c:	df000204 	addi	fp,sp,8
    e140:	e13ffe15 	stw	r4,-8(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
    e144:	d1600604 	addi	r5,gp,-32744
    e148:	e13ffe17 	ldw	r4,-8(fp)
    e14c:	000e46c0 	call	e46c <alt_find_dev>
    e150:	e0bfff15 	stw	r2,-4(fp)

  return dev;
    e154:	e0bfff17 	ldw	r2,-4(fp)
}
    e158:	e037883a 	mov	sp,fp
    e15c:	dfc00117 	ldw	ra,4(sp)
    e160:	df000017 	ldw	fp,0(sp)
    e164:	dec00204 	addi	sp,sp,8
    e168:	f800283a 	ret

0000e16c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    e16c:	defff504 	addi	sp,sp,-44
    e170:	df000a15 	stw	fp,40(sp)
    e174:	df000a04 	addi	fp,sp,40
    e178:	e13ff915 	stw	r4,-28(fp)
    e17c:	e17ff815 	stw	r5,-32(fp)
    e180:	e1bff715 	stw	r6,-36(fp)
    e184:	e1fff615 	stw	r7,-40(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    e188:	e03fff15 	stw	zero,-4(fp)
  return _alt_tick_rate;
    e18c:	d0a7cc17 	ldw	r2,-24784(gp)
  
  if (alt_ticks_per_second ())
    e190:	10003e26 	beq	r2,zero,e28c <alt_alarm_start+0x120>
  {
    if (alarm)
    e194:	e0bff917 	ldw	r2,-28(fp)
    e198:	10003a26 	beq	r2,zero,e284 <alt_alarm_start+0x118>
    {
      alarm->callback = callback;
    e19c:	e0bff917 	ldw	r2,-28(fp)
    e1a0:	e0fff717 	ldw	r3,-36(fp)
    e1a4:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    e1a8:	e0bff917 	ldw	r2,-28(fp)
    e1ac:	e0fff617 	ldw	r3,-40(fp)
    e1b0:	10c00515 	stw	r3,20(r2)
  NIOS2_READ_STATUS (context);
    e1b4:	0005303a 	rdctl	r2,status
    e1b8:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e1bc:	e0fffd17 	ldw	r3,-12(fp)
    e1c0:	00bfff84 	movi	r2,-2
    e1c4:	1884703a 	and	r2,r3,r2
    e1c8:	1001703a 	wrctl	status,r2
  return context;
    e1cc:	e0bffd17 	ldw	r2,-12(fp)
 
      irq_context = alt_irq_disable_all ();
    e1d0:	e0bffe15 	stw	r2,-8(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    e1d4:	d0a7cd17 	ldw	r2,-24780(gp)
      
      current_nticks = alt_nticks();
    e1d8:	e0bfff15 	stw	r2,-4(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    e1dc:	e0fff817 	ldw	r3,-32(fp)
    e1e0:	e0bfff17 	ldw	r2,-4(fp)
    e1e4:	1885883a 	add	r2,r3,r2
    e1e8:	10c00044 	addi	r3,r2,1
    e1ec:	e0bff917 	ldw	r2,-28(fp)
    e1f0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    e1f4:	e0bff917 	ldw	r2,-28(fp)
    e1f8:	10c00217 	ldw	r3,8(r2)
    e1fc:	e0bfff17 	ldw	r2,-4(fp)
    e200:	1880042e 	bgeu	r3,r2,e214 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
    e204:	e0bff917 	ldw	r2,-28(fp)
    e208:	00c00044 	movi	r3,1
    e20c:	10c00405 	stb	r3,16(r2)
    e210:	00000206 	br	e21c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
    e214:	e0bff917 	ldw	r2,-28(fp)
    e218:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    e21c:	e0bff917 	ldw	r2,-28(fp)
    e220:	d0e02b04 	addi	r3,gp,-32596
    e224:	e0fffb15 	stw	r3,-20(fp)
    e228:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    e22c:	e0bffa17 	ldw	r2,-24(fp)
    e230:	e0fffb17 	ldw	r3,-20(fp)
    e234:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    e238:	e0bffb17 	ldw	r2,-20(fp)
    e23c:	10c00017 	ldw	r3,0(r2)
    e240:	e0bffa17 	ldw	r2,-24(fp)
    e244:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    e248:	e0bffb17 	ldw	r2,-20(fp)
    e24c:	10800017 	ldw	r2,0(r2)
    e250:	e0fffa17 	ldw	r3,-24(fp)
    e254:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    e258:	e0bffb17 	ldw	r2,-20(fp)
    e25c:	e0fffa17 	ldw	r3,-24(fp)
    e260:	10c00015 	stw	r3,0(r2)
}
    e264:	0001883a 	nop
    e268:	e0bffe17 	ldw	r2,-8(fp)
    e26c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    e270:	e0bffc17 	ldw	r2,-16(fp)
    e274:	1001703a 	wrctl	status,r2
}
    e278:	0001883a 	nop
      alt_irq_enable_all (irq_context);

      return 0;
    e27c:	0005883a 	mov	r2,zero
    e280:	00000306 	br	e290 <alt_alarm_start+0x124>
    }
    else
    {
      return -EINVAL;
    e284:	00bffa84 	movi	r2,-22
    e288:	00000106 	br	e290 <alt_alarm_start+0x124>
    }
  }
  else
  {
    return -ENOTSUP;
    e28c:	00bfde84 	movi	r2,-134
  }
}
    e290:	e037883a 	mov	sp,fp
    e294:	df000017 	ldw	fp,0(sp)
    e298:	dec00104 	addi	sp,sp,4
    e29c:	f800283a 	ret

0000e2a0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    e2a0:	deffff04 	addi	sp,sp,-4
    e2a4:	df000015 	stw	fp,0(sp)
    e2a8:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    e2ac:	0001883a 	nop
    e2b0:	e037883a 	mov	sp,fp
    e2b4:	df000017 	ldw	fp,0(sp)
    e2b8:	dec00104 	addi	sp,sp,4
    e2bc:	f800283a 	ret

0000e2c0 <alt_get_errno>:
{
    e2c0:	defffe04 	addi	sp,sp,-8
    e2c4:	dfc00115 	stw	ra,4(sp)
    e2c8:	df000015 	stw	fp,0(sp)
    e2cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e2d0:	d0a00917 	ldw	r2,-32732(gp)
    e2d4:	10000326 	beq	r2,zero,e2e4 <alt_get_errno+0x24>
    e2d8:	d0a00917 	ldw	r2,-32732(gp)
    e2dc:	103ee83a 	callr	r2
    e2e0:	00000106 	br	e2e8 <alt_get_errno+0x28>
    e2e4:	d0a7b004 	addi	r2,gp,-24896
}
    e2e8:	e037883a 	mov	sp,fp
    e2ec:	dfc00117 	ldw	ra,4(sp)
    e2f0:	df000017 	ldw	fp,0(sp)
    e2f4:	dec00204 	addi	sp,sp,8
    e2f8:	f800283a 	ret

0000e2fc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    e2fc:	defffa04 	addi	sp,sp,-24
    e300:	dfc00515 	stw	ra,20(sp)
    e304:	df000415 	stw	fp,16(sp)
    e308:	df000404 	addi	fp,sp,16
    e30c:	e13ffd15 	stw	r4,-12(fp)
    e310:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    e314:	e0bffd17 	ldw	r2,-12(fp)
    e318:	10000326 	beq	r2,zero,e328 <alt_dev_llist_insert+0x2c>
    e31c:	e0bffd17 	ldw	r2,-12(fp)
    e320:	10800217 	ldw	r2,8(r2)
    e324:	1000061e 	bne	r2,zero,e340 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    e328:	000e2c00 	call	e2c0 <alt_get_errno>
    e32c:	1007883a 	mov	r3,r2
    e330:	00800584 	movi	r2,22
    e334:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    e338:	00bffa84 	movi	r2,-22
    e33c:	00001406 	br	e390 <alt_dev_llist_insert+0x94>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    e340:	e0bffd17 	ldw	r2,-12(fp)
    e344:	e0fffc17 	ldw	r3,-16(fp)
    e348:	e0ffff15 	stw	r3,-4(fp)
    e34c:	e0bffe15 	stw	r2,-8(fp)
  entry->previous = list;
    e350:	e0bffe17 	ldw	r2,-8(fp)
    e354:	e0ffff17 	ldw	r3,-4(fp)
    e358:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    e35c:	e0bfff17 	ldw	r2,-4(fp)
    e360:	10c00017 	ldw	r3,0(r2)
    e364:	e0bffe17 	ldw	r2,-8(fp)
    e368:	10c00015 	stw	r3,0(r2)
  list->next->previous = entry;
    e36c:	e0bfff17 	ldw	r2,-4(fp)
    e370:	10800017 	ldw	r2,0(r2)
    e374:	e0fffe17 	ldw	r3,-8(fp)
    e378:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    e37c:	e0bfff17 	ldw	r2,-4(fp)
    e380:	e0fffe17 	ldw	r3,-8(fp)
    e384:	10c00015 	stw	r3,0(r2)
}
    e388:	0001883a 	nop

  return 0;  
    e38c:	0005883a 	mov	r2,zero
}
    e390:	e037883a 	mov	sp,fp
    e394:	dfc00117 	ldw	ra,4(sp)
    e398:	df000017 	ldw	fp,0(sp)
    e39c:	dec00204 	addi	sp,sp,8
    e3a0:	f800283a 	ret

0000e3a4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    e3a4:	defffd04 	addi	sp,sp,-12
    e3a8:	dfc00215 	stw	ra,8(sp)
    e3ac:	df000115 	stw	fp,4(sp)
    e3b0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    e3b4:	00800074 	movhi	r2,1
    e3b8:	10bd3a04 	addi	r2,r2,-2840
    e3bc:	e0bfff15 	stw	r2,-4(fp)
    e3c0:	00000606 	br	e3dc <_do_ctors+0x38>
        (*ctor) (); 
    e3c4:	e0bfff17 	ldw	r2,-4(fp)
    e3c8:	10800017 	ldw	r2,0(r2)
    e3cc:	103ee83a 	callr	r2
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    e3d0:	e0bfff17 	ldw	r2,-4(fp)
    e3d4:	10bfff04 	addi	r2,r2,-4
    e3d8:	e0bfff15 	stw	r2,-4(fp)
    e3dc:	e0ffff17 	ldw	r3,-4(fp)
    e3e0:	00800074 	movhi	r2,1
    e3e4:	10bd3b04 	addi	r2,r2,-2836
    e3e8:	18bff62e 	bgeu	r3,r2,e3c4 <_do_ctors+0x20>
}
    e3ec:	0001883a 	nop
    e3f0:	0001883a 	nop
    e3f4:	e037883a 	mov	sp,fp
    e3f8:	dfc00117 	ldw	ra,4(sp)
    e3fc:	df000017 	ldw	fp,0(sp)
    e400:	dec00204 	addi	sp,sp,8
    e404:	f800283a 	ret

0000e408 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    e408:	defffd04 	addi	sp,sp,-12
    e40c:	dfc00215 	stw	ra,8(sp)
    e410:	df000115 	stw	fp,4(sp)
    e414:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    e418:	00800074 	movhi	r2,1
    e41c:	10bd3a04 	addi	r2,r2,-2840
    e420:	e0bfff15 	stw	r2,-4(fp)
    e424:	00000606 	br	e440 <_do_dtors+0x38>
        (*dtor) (); 
    e428:	e0bfff17 	ldw	r2,-4(fp)
    e42c:	10800017 	ldw	r2,0(r2)
    e430:	103ee83a 	callr	r2
  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    e434:	e0bfff17 	ldw	r2,-4(fp)
    e438:	10bfff04 	addi	r2,r2,-4
    e43c:	e0bfff15 	stw	r2,-4(fp)
    e440:	e0ffff17 	ldw	r3,-4(fp)
    e444:	00800074 	movhi	r2,1
    e448:	10bd3b04 	addi	r2,r2,-2836
    e44c:	18bff62e 	bgeu	r3,r2,e428 <_do_dtors+0x20>
}
    e450:	0001883a 	nop
    e454:	0001883a 	nop
    e458:	e037883a 	mov	sp,fp
    e45c:	dfc00117 	ldw	ra,4(sp)
    e460:	df000017 	ldw	fp,0(sp)
    e464:	dec00204 	addi	sp,sp,8
    e468:	f800283a 	ret

0000e46c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    e46c:	defffa04 	addi	sp,sp,-24
    e470:	dfc00515 	stw	ra,20(sp)
    e474:	df000415 	stw	fp,16(sp)
    e478:	df000404 	addi	fp,sp,16
    e47c:	e13ffd15 	stw	r4,-12(fp)
    e480:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
    e484:	e0bffc17 	ldw	r2,-16(fp)
    e488:	10800017 	ldw	r2,0(r2)
    e48c:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    e490:	e13ffd17 	ldw	r4,-12(fp)
    e494:	000050c0 	call	50c <strlen>
    e498:	10800044 	addi	r2,r2,1
    e49c:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    e4a0:	00000d06 	br	e4d8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    e4a4:	e0bfff17 	ldw	r2,-4(fp)
    e4a8:	10800217 	ldw	r2,8(r2)
    e4ac:	e0fffe17 	ldw	r3,-8(fp)
    e4b0:	180d883a 	mov	r6,r3
    e4b4:	e17ffd17 	ldw	r5,-12(fp)
    e4b8:	1009883a 	mov	r4,r2
    e4bc:	000f28c0 	call	f28c <memcmp>
    e4c0:	1000021e 	bne	r2,zero,e4cc <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    e4c4:	e0bfff17 	ldw	r2,-4(fp)
    e4c8:	00000706 	br	e4e8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    e4cc:	e0bfff17 	ldw	r2,-4(fp)
    e4d0:	10800017 	ldw	r2,0(r2)
    e4d4:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
    e4d8:	e0ffff17 	ldw	r3,-4(fp)
    e4dc:	e0bffc17 	ldw	r2,-16(fp)
    e4e0:	18bff01e 	bne	r3,r2,e4a4 <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
    e4e4:	0005883a 	mov	r2,zero
}
    e4e8:	e037883a 	mov	sp,fp
    e4ec:	dfc00117 	ldw	ra,4(sp)
    e4f0:	df000017 	ldw	fp,0(sp)
    e4f4:	dec00204 	addi	sp,sp,8
    e4f8:	f800283a 	ret

0000e4fc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    e4fc:	defffe04 	addi	sp,sp,-8
    e500:	dfc00115 	stw	ra,4(sp)
    e504:	df000015 	stw	fp,0(sp)
    e508:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    e50c:	01440004 	movi	r5,4096
    e510:	0009883a 	mov	r4,zero
    e514:	000f11c0 	call	f11c <alt_icache_flush>
#endif
}
    e518:	0001883a 	nop
    e51c:	e037883a 	mov	sp,fp
    e520:	dfc00117 	ldw	ra,4(sp)
    e524:	df000017 	ldw	fp,0(sp)
    e528:	dec00204 	addi	sp,sp,8
    e52c:	f800283a 	ret

0000e530 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    e530:	defff904 	addi	sp,sp,-28
    e534:	dfc00615 	stw	ra,24(sp)
    e538:	df000515 	stw	fp,20(sp)
    e53c:	df000504 	addi	fp,sp,20
    e540:	e13ffe15 	stw	r4,-8(fp)
    e544:	e17ffd15 	stw	r5,-12(fp)
    e548:	e1bffc15 	stw	r6,-16(fp)
    e54c:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
    e550:	e1bffb17 	ldw	r6,-20(fp)
    e554:	e17ffc17 	ldw	r5,-16(fp)
    e558:	e13ffd17 	ldw	r4,-12(fp)
    e55c:	000e8d00 	call	e8d0 <open>
    e560:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
    e564:	e0bfff17 	ldw	r2,-4(fp)
    e568:	10001716 	blt	r2,zero,e5c8 <alt_open_fd+0x98>
  {
    fd->dev      = alt_fd_list[old].dev;
    e56c:	e0bfff17 	ldw	r2,-4(fp)
    e570:	10c00324 	muli	r3,r2,12
    e574:	00800074 	movhi	r2,1
    e578:	1885883a 	add	r2,r3,r2
    e57c:	10c0ba17 	ldw	r3,744(r2)
    e580:	e0bffe17 	ldw	r2,-8(fp)
    e584:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    e588:	e0bfff17 	ldw	r2,-4(fp)
    e58c:	10c00324 	muli	r3,r2,12
    e590:	00800074 	movhi	r2,1
    e594:	1885883a 	add	r2,r3,r2
    e598:	10c0bb17 	ldw	r3,748(r2)
    e59c:	e0bffe17 	ldw	r2,-8(fp)
    e5a0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    e5a4:	e0bfff17 	ldw	r2,-4(fp)
    e5a8:	10c00324 	muli	r3,r2,12
    e5ac:	00800074 	movhi	r2,1
    e5b0:	1885883a 	add	r2,r3,r2
    e5b4:	10c0bc17 	ldw	r3,752(r2)
    e5b8:	e0bffe17 	ldw	r2,-8(fp)
    e5bc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    e5c0:	e13fff17 	ldw	r4,-4(fp)
    e5c4:	00039580 	call	3958 <alt_release_fd>
  }
} 
    e5c8:	0001883a 	nop
    e5cc:	e037883a 	mov	sp,fp
    e5d0:	dfc00117 	ldw	ra,4(sp)
    e5d4:	df000017 	ldw	fp,0(sp)
    e5d8:	dec00204 	addi	sp,sp,8
    e5dc:	f800283a 	ret

0000e5e0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    e5e0:	defffb04 	addi	sp,sp,-20
    e5e4:	dfc00415 	stw	ra,16(sp)
    e5e8:	df000315 	stw	fp,12(sp)
    e5ec:	df000304 	addi	fp,sp,12
    e5f0:	e13fff15 	stw	r4,-4(fp)
    e5f4:	e17ffe15 	stw	r5,-8(fp)
    e5f8:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    e5fc:	01c07fc4 	movi	r7,511
    e600:	01800044 	movi	r6,1
    e604:	e17fff17 	ldw	r5,-4(fp)
    e608:	01000074 	movhi	r4,1
    e60c:	2100bd04 	addi	r4,r4,756
    e610:	000e5300 	call	e530 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    e614:	01c07fc4 	movi	r7,511
    e618:	000d883a 	mov	r6,zero
    e61c:	e17ffe17 	ldw	r5,-8(fp)
    e620:	01000074 	movhi	r4,1
    e624:	2100ba04 	addi	r4,r4,744
    e628:	000e5300 	call	e530 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    e62c:	01c07fc4 	movi	r7,511
    e630:	01800044 	movi	r6,1
    e634:	e17ffd17 	ldw	r5,-12(fp)
    e638:	01000074 	movhi	r4,1
    e63c:	2100c004 	addi	r4,r4,768
    e640:	000e5300 	call	e530 <alt_open_fd>
}  
    e644:	0001883a 	nop
    e648:	e037883a 	mov	sp,fp
    e64c:	dfc00117 	ldw	ra,4(sp)
    e650:	df000017 	ldw	fp,0(sp)
    e654:	dec00204 	addi	sp,sp,8
    e658:	f800283a 	ret

0000e65c <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
    e65c:	defff004 	addi	sp,sp,-64
    e660:	df000f15 	stw	fp,60(sp)
    e664:	df000f04 	addi	fp,sp,60
    e668:	e13ff315 	stw	r4,-52(fp)
    e66c:	e17ff215 	stw	r5,-56(fp)
    e670:	e1bff115 	stw	r6,-60(fp)
  int rc = -EINVAL;  
    e674:	00bffa84 	movi	r2,-22
    e678:	e0bfff15 	stw	r2,-4(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    e67c:	e0bff317 	ldw	r2,-52(fp)
    e680:	10800828 	cmpgeui	r2,r2,32
    e684:	1000501e 	bne	r2,zero,e7c8 <alt_irq_register+0x16c>
  NIOS2_READ_STATUS (context);
    e688:	0005303a 	rdctl	r2,status
    e68c:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e690:	e0fffd17 	ldw	r3,-12(fp)
    e694:	00bfff84 	movi	r2,-2
    e698:	1884703a 	and	r2,r3,r2
    e69c:	1001703a 	wrctl	status,r2
  return context;
    e6a0:	e0bffd17 	ldw	r2,-12(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
    e6a4:	e0bffe15 	stw	r2,-8(fp)

    alt_irq[id].handler = handler;
    e6a8:	e0bff317 	ldw	r2,-52(fp)
    e6ac:	100890fa 	slli	r4,r2,3
    e6b0:	e0fff117 	ldw	r3,-60(fp)
    e6b4:	008000b4 	movhi	r2,2
    e6b8:	2085883a 	add	r2,r4,r2
    e6bc:	10ea5a15 	stw	r3,-22168(r2)
    alt_irq[id].context = context;
    e6c0:	e0bff317 	ldw	r2,-52(fp)
    e6c4:	100890fa 	slli	r4,r2,3
    e6c8:	e0fff217 	ldw	r3,-56(fp)
    e6cc:	008000b4 	movhi	r2,2
    e6d0:	2085883a 	add	r2,r4,r2
    e6d4:	10ea5b15 	stw	r3,-22164(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    e6d8:	e0bff117 	ldw	r2,-60(fp)
    e6dc:	10001a26 	beq	r2,zero,e748 <alt_irq_register+0xec>
    e6e0:	e0bff317 	ldw	r2,-52(fp)
    e6e4:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_READ_STATUS (context);
    e6e8:	0005303a 	rdctl	r2,status
    e6ec:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e6f0:	e0fffb17 	ldw	r3,-20(fp)
    e6f4:	00bfff84 	movi	r2,-2
    e6f8:	1884703a 	and	r2,r3,r2
    e6fc:	1001703a 	wrctl	status,r2
  return context;
    e700:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    e704:	e0bffa15 	stw	r2,-24(fp)

  alt_irq_active |= (1 << id);
    e708:	00c00044 	movi	r3,1
    e70c:	e0bffc17 	ldw	r2,-16(fp)
    e710:	1884983a 	sll	r2,r3,r2
    e714:	1007883a 	mov	r3,r2
    e718:	d0a7cb17 	ldw	r2,-24788(gp)
    e71c:	1884b03a 	or	r2,r3,r2
    e720:	d0a7cb15 	stw	r2,-24788(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    e724:	d0a7cb17 	ldw	r2,-24788(gp)
    e728:	100170fa 	wrctl	ienable,r2
    e72c:	e0bffa17 	ldw	r2,-24(fp)
    e730:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
    e734:	e0bff917 	ldw	r2,-28(fp)
    e738:	1001703a 	wrctl	status,r2
}
    e73c:	0001883a 	nop

  alt_irq_enable_all(status);

  return 0;
    e740:	0005883a 	mov	r2,zero
    e744:	00001a06 	br	e7b0 <alt_irq_register+0x154>
    e748:	e0bff317 	ldw	r2,-52(fp)
    e74c:	e0bff815 	stw	r2,-32(fp)
  NIOS2_READ_STATUS (context);
    e750:	0005303a 	rdctl	r2,status
    e754:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e758:	e0fff717 	ldw	r3,-36(fp)
    e75c:	00bfff84 	movi	r2,-2
    e760:	1884703a 	and	r2,r3,r2
    e764:	1001703a 	wrctl	status,r2
  return context;
    e768:	e0bff717 	ldw	r2,-36(fp)
  status = alt_irq_disable_all ();
    e76c:	e0bff615 	stw	r2,-40(fp)
  alt_irq_active &= ~(1 << id);
    e770:	00c00044 	movi	r3,1
    e774:	e0bff817 	ldw	r2,-32(fp)
    e778:	1884983a 	sll	r2,r3,r2
    e77c:	0084303a 	nor	r2,zero,r2
    e780:	1007883a 	mov	r3,r2
    e784:	d0a7cb17 	ldw	r2,-24788(gp)
    e788:	1884703a 	and	r2,r3,r2
    e78c:	d0a7cb15 	stw	r2,-24788(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    e790:	d0a7cb17 	ldw	r2,-24788(gp)
    e794:	100170fa 	wrctl	ienable,r2
    e798:	e0bff617 	ldw	r2,-40(fp)
    e79c:	e0bff515 	stw	r2,-44(fp)
  NIOS2_WRITE_STATUS (context);
    e7a0:	e0bff517 	ldw	r2,-44(fp)
    e7a4:	1001703a 	wrctl	status,r2
}
    e7a8:	0001883a 	nop
  return 0;
    e7ac:	0005883a 	mov	r2,zero
    e7b0:	e0bfff15 	stw	r2,-4(fp)
    e7b4:	e0bffe17 	ldw	r2,-8(fp)
    e7b8:	e0bff415 	stw	r2,-48(fp)
  NIOS2_WRITE_STATUS (context);
    e7bc:	e0bff417 	ldw	r2,-48(fp)
    e7c0:	1001703a 	wrctl	status,r2
}
    e7c4:	0001883a 	nop

    alt_irq_enable_all(status);
  }
  return rc; 
    e7c8:	e0bfff17 	ldw	r2,-4(fp)
}
    e7cc:	e037883a 	mov	sp,fp
    e7d0:	df000017 	ldw	fp,0(sp)
    e7d4:	dec00104 	addi	sp,sp,4
    e7d8:	f800283a 	ret

0000e7dc <alt_get_errno>:
{
    e7dc:	defffe04 	addi	sp,sp,-8
    e7e0:	dfc00115 	stw	ra,4(sp)
    e7e4:	df000015 	stw	fp,0(sp)
    e7e8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e7ec:	d0a00917 	ldw	r2,-32732(gp)
    e7f0:	10000326 	beq	r2,zero,e800 <alt_get_errno+0x24>
    e7f4:	d0a00917 	ldw	r2,-32732(gp)
    e7f8:	103ee83a 	callr	r2
    e7fc:	00000106 	br	e804 <alt_get_errno+0x28>
    e800:	d0a7b004 	addi	r2,gp,-24896
}
    e804:	e037883a 	mov	sp,fp
    e808:	dfc00117 	ldw	ra,4(sp)
    e80c:	df000017 	ldw	fp,0(sp)
    e810:	dec00204 	addi	sp,sp,8
    e814:	f800283a 	ret

0000e818 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    e818:	defffd04 	addi	sp,sp,-12
    e81c:	df000215 	stw	fp,8(sp)
    e820:	df000204 	addi	fp,sp,8
    e824:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    e828:	e0bffe17 	ldw	r2,-8(fp)
    e82c:	10800217 	ldw	r2,8(r2)
    e830:	10d00034 	orhi	r3,r2,16384
    e834:	e0bffe17 	ldw	r2,-8(fp)
    e838:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    e83c:	e03fff15 	stw	zero,-4(fp)
    e840:	00001a06 	br	e8ac <alt_file_locked+0x94>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    e844:	e0bfff17 	ldw	r2,-4(fp)
    e848:	10c00324 	muli	r3,r2,12
    e84c:	00800074 	movhi	r2,1
    e850:	1885883a 	add	r2,r3,r2
    e854:	10c0ba17 	ldw	r3,744(r2)
    e858:	e0bffe17 	ldw	r2,-8(fp)
    e85c:	10800017 	ldw	r2,0(r2)
    e860:	18800f1e 	bne	r3,r2,e8a0 <alt_file_locked+0x88>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    e864:	e0bfff17 	ldw	r2,-4(fp)
    e868:	10c00324 	muli	r3,r2,12
    e86c:	00800074 	movhi	r2,1
    e870:	1885883a 	add	r2,r3,r2
    e874:	1080bc17 	ldw	r2,752(r2)
    if ((alt_fd_list[i].dev == fd->dev) &&
    e878:	1000090e 	bge	r2,zero,e8a0 <alt_file_locked+0x88>
        (&alt_fd_list[i] != fd))
    e87c:	e0bfff17 	ldw	r2,-4(fp)
    e880:	10c00324 	muli	r3,r2,12
    e884:	00800074 	movhi	r2,1
    e888:	1080ba04 	addi	r2,r2,744
    e88c:	1885883a 	add	r2,r3,r2
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    e890:	e0fffe17 	ldw	r3,-8(fp)
    e894:	18800226 	beq	r3,r2,e8a0 <alt_file_locked+0x88>
    {
      return -EACCES;
    e898:	00bffcc4 	movi	r2,-13
    e89c:	00000806 	br	e8c0 <alt_file_locked+0xa8>
  for (i = 0; i <= alt_max_fd; i++)
    e8a0:	e0bfff17 	ldw	r2,-4(fp)
    e8a4:	10800044 	addi	r2,r2,1
    e8a8:	e0bfff15 	stw	r2,-4(fp)
    e8ac:	d0a00817 	ldw	r2,-32736(gp)
    e8b0:	1007883a 	mov	r3,r2
    e8b4:	e0bfff17 	ldw	r2,-4(fp)
    e8b8:	18bfe22e 	bgeu	r3,r2,e844 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    e8bc:	0005883a 	mov	r2,zero
}
    e8c0:	e037883a 	mov	sp,fp
    e8c4:	df000017 	ldw	fp,0(sp)
    e8c8:	dec00104 	addi	sp,sp,4
    e8cc:	f800283a 	ret

0000e8d0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    e8d0:	defff604 	addi	sp,sp,-40
    e8d4:	dfc00915 	stw	ra,36(sp)
    e8d8:	df000815 	stw	fp,32(sp)
    e8dc:	df000804 	addi	fp,sp,32
    e8e0:	e13ffa15 	stw	r4,-24(fp)
    e8e4:	e17ff915 	stw	r5,-28(fp)
    e8e8:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    e8ec:	00bfffc4 	movi	r2,-1
    e8f0:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
    e8f4:	00bffb44 	movi	r2,-19
    e8f8:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
    e8fc:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    e900:	d1600604 	addi	r5,gp,-32744
    e904:	e13ffa17 	ldw	r4,-24(fp)
    e908:	000e46c0 	call	e46c <alt_find_dev>
    e90c:	e0bfff15 	stw	r2,-4(fp)
    e910:	e0bfff17 	ldw	r2,-4(fp)
    e914:	1000051e 	bne	r2,zero,e92c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    e918:	e13ffa17 	ldw	r4,-24(fp)
    e91c:	000ef3c0 	call	ef3c <alt_find_file>
    e920:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
    e924:	00800044 	movi	r2,1
    e928:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    e92c:	e0bfff17 	ldw	r2,-4(fp)
    e930:	10002926 	beq	r2,zero,e9d8 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
    e934:	e13fff17 	ldw	r4,-4(fp)
    e938:	000f0440 	call	f044 <alt_get_fd>
    e93c:	e0bffe15 	stw	r2,-8(fp)
    e940:	e0bffe17 	ldw	r2,-8(fp)
    e944:	1000030e 	bge	r2,zero,e954 <open+0x84>
    {
      status = index;
    e948:	e0bffe17 	ldw	r2,-8(fp)
    e94c:	e0bffd15 	stw	r2,-12(fp)
    e950:	00002306 	br	e9e0 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
    e954:	e0bffe17 	ldw	r2,-8(fp)
    e958:	10c00324 	muli	r3,r2,12
    e95c:	00800074 	movhi	r2,1
    e960:	1080ba04 	addi	r2,r2,744
    e964:	1885883a 	add	r2,r3,r2
    e968:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    e96c:	e0fff917 	ldw	r3,-28(fp)
    e970:	00900034 	movhi	r2,16384
    e974:	10bfffc4 	addi	r2,r2,-1
    e978:	1886703a 	and	r3,r3,r2
    e97c:	e0bffb17 	ldw	r2,-20(fp)
    e980:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    e984:	e0bffc17 	ldw	r2,-16(fp)
    e988:	1000051e 	bne	r2,zero,e9a0 <open+0xd0>
    e98c:	e13ffb17 	ldw	r4,-20(fp)
    e990:	000e8180 	call	e818 <alt_file_locked>
    e994:	e0bffd15 	stw	r2,-12(fp)
    e998:	e0bffd17 	ldw	r2,-12(fp)
    e99c:	10001016 	blt	r2,zero,e9e0 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    e9a0:	e0bfff17 	ldw	r2,-4(fp)
    e9a4:	10800317 	ldw	r2,12(r2)
    e9a8:	10000826 	beq	r2,zero,e9cc <open+0xfc>
    e9ac:	e0bfff17 	ldw	r2,-4(fp)
    e9b0:	10800317 	ldw	r2,12(r2)
    e9b4:	e1fff817 	ldw	r7,-32(fp)
    e9b8:	e1bff917 	ldw	r6,-28(fp)
    e9bc:	e17ffa17 	ldw	r5,-24(fp)
    e9c0:	e13ffb17 	ldw	r4,-20(fp)
    e9c4:	103ee83a 	callr	r2
    e9c8:	00000106 	br	e9d0 <open+0x100>
    e9cc:	0005883a 	mov	r2,zero
    e9d0:	e0bffd15 	stw	r2,-12(fp)
    e9d4:	00000206 	br	e9e0 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
    e9d8:	00bffb44 	movi	r2,-19
    e9dc:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    e9e0:	e0bffd17 	ldw	r2,-12(fp)
    e9e4:	1000090e 	bge	r2,zero,ea0c <open+0x13c>
  {
    alt_release_fd (index);  
    e9e8:	e13ffe17 	ldw	r4,-8(fp)
    e9ec:	00039580 	call	3958 <alt_release_fd>
    ALT_ERRNO = -status;
    e9f0:	000e7dc0 	call	e7dc <alt_get_errno>
    e9f4:	1007883a 	mov	r3,r2
    e9f8:	e0bffd17 	ldw	r2,-12(fp)
    e9fc:	0085c83a 	sub	r2,zero,r2
    ea00:	18800015 	stw	r2,0(r3)
    return -1;
    ea04:	00bfffc4 	movi	r2,-1
    ea08:	00000106 	br	ea10 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
    ea0c:	e0bffe17 	ldw	r2,-8(fp)
}
    ea10:	e037883a 	mov	sp,fp
    ea14:	dfc00117 	ldw	ra,4(sp)
    ea18:	df000017 	ldw	fp,0(sp)
    ea1c:	dec00204 	addi	sp,sp,8
    ea20:	f800283a 	ret

0000ea24 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    ea24:	defffa04 	addi	sp,sp,-24
    ea28:	df000515 	stw	fp,20(sp)
    ea2c:	df000504 	addi	fp,sp,20
    ea30:	e13ffb15 	stw	r4,-20(fp)
  NIOS2_READ_STATUS (context);
    ea34:	0005303a 	rdctl	r2,status
    ea38:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ea3c:	e0fffc17 	ldw	r3,-16(fp)
    ea40:	00bfff84 	movi	r2,-2
    ea44:	1884703a 	and	r2,r3,r2
    ea48:	1001703a 	wrctl	status,r2
  return context;
    ea4c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    ea50:	e0bfff15 	stw	r2,-4(fp)
  alt_llist_remove (&alarm->llist);
    ea54:	e0bffb17 	ldw	r2,-20(fp)
    ea58:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    ea5c:	e0bffd17 	ldw	r2,-12(fp)
    ea60:	10800017 	ldw	r2,0(r2)
    ea64:	e0fffd17 	ldw	r3,-12(fp)
    ea68:	18c00117 	ldw	r3,4(r3)
    ea6c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    ea70:	e0bffd17 	ldw	r2,-12(fp)
    ea74:	10800117 	ldw	r2,4(r2)
    ea78:	e0fffd17 	ldw	r3,-12(fp)
    ea7c:	18c00017 	ldw	r3,0(r3)
    ea80:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    ea84:	e0bffd17 	ldw	r2,-12(fp)
    ea88:	e0fffd17 	ldw	r3,-12(fp)
    ea8c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    ea90:	e0bffd17 	ldw	r2,-12(fp)
    ea94:	e0fffd17 	ldw	r3,-12(fp)
    ea98:	10c00015 	stw	r3,0(r2)
} 
    ea9c:	0001883a 	nop
    eaa0:	e0bfff17 	ldw	r2,-4(fp)
    eaa4:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
    eaa8:	e0bffe17 	ldw	r2,-8(fp)
    eaac:	1001703a 	wrctl	status,r2
}
    eab0:	0001883a 	nop
  alt_irq_enable_all (irq_context);
}
    eab4:	0001883a 	nop
    eab8:	e037883a 	mov	sp,fp
    eabc:	df000017 	ldw	fp,0(sp)
    eac0:	dec00104 	addi	sp,sp,4
    eac4:	f800283a 	ret

0000eac8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    eac8:	defffb04 	addi	sp,sp,-20
    eacc:	dfc00415 	stw	ra,16(sp)
    ead0:	df000315 	stw	fp,12(sp)
    ead4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    ead8:	d0a02b17 	ldw	r2,-32596(gp)
    eadc:	e0bfff15 	stw	r2,-4(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    eae0:	d0a7cd17 	ldw	r2,-24780(gp)
    eae4:	10800044 	addi	r2,r2,1
    eae8:	d0a7cd15 	stw	r2,-24780(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    eaec:	00002e06 	br	eba8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    eaf0:	e0bfff17 	ldw	r2,-4(fp)
    eaf4:	10800017 	ldw	r2,0(r2)
    eaf8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    eafc:	e0bfff17 	ldw	r2,-4(fp)
    eb00:	10800403 	ldbu	r2,16(r2)
    eb04:	10803fcc 	andi	r2,r2,255
    eb08:	10000426 	beq	r2,zero,eb1c <alt_tick+0x54>
    eb0c:	d0a7cd17 	ldw	r2,-24780(gp)
    eb10:	1000021e 	bne	r2,zero,eb1c <alt_tick+0x54>
    {
      alarm->rollover = 0;
    eb14:	e0bfff17 	ldw	r2,-4(fp)
    eb18:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    eb1c:	e0bfff17 	ldw	r2,-4(fp)
    eb20:	10800217 	ldw	r2,8(r2)
    eb24:	d0e7cd17 	ldw	r3,-24780(gp)
    eb28:	18801d36 	bltu	r3,r2,eba0 <alt_tick+0xd8>
    eb2c:	e0bfff17 	ldw	r2,-4(fp)
    eb30:	10800403 	ldbu	r2,16(r2)
    eb34:	10803fcc 	andi	r2,r2,255
    eb38:	1000191e 	bne	r2,zero,eba0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    eb3c:	e0bfff17 	ldw	r2,-4(fp)
    eb40:	10800317 	ldw	r2,12(r2)
    eb44:	e0ffff17 	ldw	r3,-4(fp)
    eb48:	18c00517 	ldw	r3,20(r3)
    eb4c:	1809883a 	mov	r4,r3
    eb50:	103ee83a 	callr	r2
    eb54:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    eb58:	e0bffd17 	ldw	r2,-12(fp)
    eb5c:	1000031e 	bne	r2,zero,eb6c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    eb60:	e13fff17 	ldw	r4,-4(fp)
    eb64:	000ea240 	call	ea24 <alt_alarm_stop>
    eb68:	00000d06 	br	eba0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    eb6c:	e0bfff17 	ldw	r2,-4(fp)
    eb70:	10c00217 	ldw	r3,8(r2)
    eb74:	e0bffd17 	ldw	r2,-12(fp)
    eb78:	1887883a 	add	r3,r3,r2
    eb7c:	e0bfff17 	ldw	r2,-4(fp)
    eb80:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    eb84:	e0bfff17 	ldw	r2,-4(fp)
    eb88:	10c00217 	ldw	r3,8(r2)
    eb8c:	d0a7cd17 	ldw	r2,-24780(gp)
    eb90:	1880032e 	bgeu	r3,r2,eba0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    eb94:	e0bfff17 	ldw	r2,-4(fp)
    eb98:	00c00044 	movi	r3,1
    eb9c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    eba0:	e0bffe17 	ldw	r2,-8(fp)
    eba4:	e0bfff15 	stw	r2,-4(fp)
  while (alarm != (alt_alarm*) &alt_alarm_list)
    eba8:	e0ffff17 	ldw	r3,-4(fp)
    ebac:	d0a02b04 	addi	r2,gp,-32596
    ebb0:	18bfcf1e 	bne	r3,r2,eaf0 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    ebb4:	0004b880 	call	4b88 <OSTimeTick>
}
    ebb8:	0001883a 	nop
    ebbc:	e037883a 	mov	sp,fp
    ebc0:	dfc00117 	ldw	ra,4(sp)
    ebc4:	df000017 	ldw	fp,0(sp)
    ebc8:	dec00204 	addi	sp,sp,8
    ebcc:	f800283a 	ret

0000ebd0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    ebd0:	deffff04 	addi	sp,sp,-4
    ebd4:	df000015 	stw	fp,0(sp)
    ebd8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    ebdc:	000170fa 	wrctl	ienable,zero
}
    ebe0:	0001883a 	nop
    ebe4:	e037883a 	mov	sp,fp
    ebe8:	df000017 	ldw	fp,0(sp)
    ebec:	dec00104 	addi	sp,sp,4
    ebf0:	f800283a 	ret

0000ebf4 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
    ebf4:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
    ebf8:	d0e00117 	ldw	r3,-32764(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
    ebfc:	d127c317 	ldw	r4,-24820(gp)

      stw ra,  0(sp)
    ec00:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
    ec04:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
    ec08:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
    ec0c:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
    ec10:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
    ec14:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
    ec18:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
    ec1c:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
    ec20:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
    ec24:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
    ec28:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
    ec2c:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
    ec30:	000ee580 	call	ee58 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
    ec34:	d127c517 	ldw	r4,-24812(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
    ec38:	d167c007 	ldb	r5,-24832(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
    ec3c:	d127c315 	stw	r4,-24820(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
    ec40:	d167bfc5 	stb	r5,-24833(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
    ec44:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
    ec48:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
    ec4c:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
    ec50:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
    ec54:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
    ec58:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
    ec5c:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
    ec60:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
    ec64:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
    ec68:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
    ec6c:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
    ec70:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
    ec74:	d0e00115 	stw	r3,-32764(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
    ec78:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
    ec7c:	f800283a 	ret

0000ec80 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
    ec80:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
    ec84:	047fff84 	movi	r17,-2
      and   r18, r18, r17
    ec88:	9464703a 	and	r18,r18,r17
      wrctl status, r18
    ec8c:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
    ec90:	000ee580 	call	ee58 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
    ec94:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
    ec98:	d4a7c145 	stb	r18,-24827(gp)

      /*
       * start execution of the new task.
       */

      br 9b
    ec9c:	003fe506 	br	ec34 <OSCtxSw+0x40>

0000eca0 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
    eca0:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
    eca4:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
    eca8:	10800054 	ori	r2,r2,1
      wrctl status, r2
    ecac:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
    ecb0:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
    ecb4:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
    ecb8:	dec00204 	addi	sp,sp,8

      callr r2
    ecbc:	103ee83a 	callr	r2

      nop
    ecc0:	0001883a 	nop

0000ecc4 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
    ecc4:	defff704 	addi	sp,sp,-36
    ecc8:	dfc00815 	stw	ra,32(sp)
    eccc:	df000715 	stw	fp,28(sp)
    ecd0:	df000704 	addi	fp,sp,28
    ecd4:	e13ffc15 	stw	r4,-16(fp)
    ecd8:	e17ffb15 	stw	r5,-20(fp)
    ecdc:	e1bffa15 	stw	r6,-24(fp)
    ece0:	3805883a 	mov	r2,r7
    ece4:	e0bff90d 	sth	r2,-28(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
    ece8:	e0fffa17 	ldw	r3,-24(fp)
    ecec:	00bfff04 	movi	r2,-4
    ecf0:	1884703a 	and	r2,r3,r2
    ecf4:	10bef704 	addi	r2,r2,-1060
    ecf8:	e0bfff15 	stw	r2,-4(fp)

   _REENT_INIT_PTR (local_impure_ptr);
    ecfc:	01810904 	movi	r6,1060
    ed00:	000b883a 	mov	r5,zero
    ed04:	e13fff17 	ldw	r4,-4(fp)
    ed08:	0001a140 	call	1a14 <memset>
    ed0c:	e0bfff17 	ldw	r2,-4(fp)
    ed10:	10c0bb04 	addi	r3,r2,748
    ed14:	e0bfff17 	ldw	r2,-4(fp)
    ed18:	10c00115 	stw	r3,4(r2)
    ed1c:	e0bfff17 	ldw	r2,-4(fp)
    ed20:	10c0d504 	addi	r3,r2,852
    ed24:	e0bfff17 	ldw	r2,-4(fp)
    ed28:	10c00215 	stw	r3,8(r2)
    ed2c:	e0bfff17 	ldw	r2,-4(fp)
    ed30:	10c0ef04 	addi	r3,r2,956
    ed34:	e0bfff17 	ldw	r2,-4(fp)
    ed38:	10c00315 	stw	r3,12(r2)
    ed3c:	e0bfff17 	ldw	r2,-4(fp)
    ed40:	00c00044 	movi	r3,1
    ed44:	10c02915 	stw	r3,164(r2)
    ed48:	10002a15 	stw	zero,168(r2)
    ed4c:	e0bfff17 	ldw	r2,-4(fp)
    ed50:	00ccc384 	movi	r3,13070
    ed54:	10c02b0d 	sth	r3,172(r2)
    ed58:	e0bfff17 	ldw	r2,-4(fp)
    ed5c:	00eaf344 	movi	r3,-21555
    ed60:	10c02b8d 	sth	r3,174(r2)
    ed64:	e0bfff17 	ldw	r2,-4(fp)
    ed68:	00c48d04 	movi	r3,4660
    ed6c:	10c02c0d 	sth	r3,176(r2)
    ed70:	e0bfff17 	ldw	r2,-4(fp)
    ed74:	00f99b44 	movi	r3,-6547
    ed78:	10c02c8d 	sth	r3,178(r2)
    ed7c:	e0bfff17 	ldw	r2,-4(fp)
    ed80:	00f7bb04 	movi	r3,-8468
    ed84:	10c02d0d 	sth	r3,180(r2)
    ed88:	e0bfff17 	ldw	r2,-4(fp)
    ed8c:	00c00144 	movi	r3,5
    ed90:	10c02d8d 	sth	r3,182(r2)
    ed94:	e0bfff17 	ldw	r2,-4(fp)
    ed98:	00c002c4 	movi	r3,11
    ed9c:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
    eda0:	e0bfff17 	ldw	r2,-4(fp)
    eda4:	e0bffe15 	stw	r2,-8(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
    eda8:	e0bffe17 	ldw	r2,-8(fp)
    edac:	10bff304 	addi	r2,r2,-52
    edb0:	e0bffd15 	stw	r2,-12(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
    edb4:	e0bffd17 	ldw	r2,-12(fp)
    edb8:	10800c04 	addi	r2,r2,48
    edbc:	e0fffc17 	ldw	r3,-16(fp)
    edc0:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
    edc4:	e0bffd17 	ldw	r2,-12(fp)
    edc8:	10800b04 	addi	r2,r2,44
    edcc:	e0fffb17 	ldw	r3,-20(fp)
    edd0:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
    edd4:	e0bffd17 	ldw	r2,-12(fp)
    edd8:	10800a04 	addi	r2,r2,40
    eddc:	e0ffff17 	ldw	r3,-4(fp)
    ede0:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
    ede4:	00800074 	movhi	r2,1
    ede8:	10bb2804 	addi	r2,r2,-4960
    edec:	10c00104 	addi	r3,r2,4
    edf0:	e0bffd17 	ldw	r2,-12(fp)
    edf4:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
    edf8:	e0bffd17 	ldw	r2,-12(fp)
}
    edfc:	e037883a 	mov	sp,fp
    ee00:	dfc00117 	ldw	ra,4(sp)
    ee04:	df000017 	ldw	fp,0(sp)
    ee08:	dec00204 	addi	sp,sp,8
    ee0c:	f800283a 	ret

0000ee10 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
    ee10:	defffe04 	addi	sp,sp,-8
    ee14:	df000115 	stw	fp,4(sp)
    ee18:	df000104 	addi	fp,sp,4
    ee1c:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
    ee20:	0001883a 	nop
    ee24:	e037883a 	mov	sp,fp
    ee28:	df000017 	ldw	fp,0(sp)
    ee2c:	dec00104 	addi	sp,sp,4
    ee30:	f800283a 	ret

0000ee34 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
    ee34:	defffe04 	addi	sp,sp,-8
    ee38:	df000115 	stw	fp,4(sp)
    ee3c:	df000104 	addi	fp,sp,4
    ee40:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
    ee44:	0001883a 	nop
    ee48:	e037883a 	mov	sp,fp
    ee4c:	df000017 	ldw	fp,0(sp)
    ee50:	dec00104 	addi	sp,sp,4
    ee54:	f800283a 	ret

0000ee58 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
    ee58:	deffff04 	addi	sp,sp,-4
    ee5c:	df000015 	stw	fp,0(sp)
    ee60:	d839883a 	mov	fp,sp
}
    ee64:	0001883a 	nop
    ee68:	e037883a 	mov	sp,fp
    ee6c:	df000017 	ldw	fp,0(sp)
    ee70:	dec00104 	addi	sp,sp,4
    ee74:	f800283a 	ret

0000ee78 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
    ee78:	deffff04 	addi	sp,sp,-4
    ee7c:	df000015 	stw	fp,0(sp)
    ee80:	d839883a 	mov	fp,sp
}
    ee84:	0001883a 	nop
    ee88:	e037883a 	mov	sp,fp
    ee8c:	df000017 	ldw	fp,0(sp)
    ee90:	dec00104 	addi	sp,sp,4
    ee94:	f800283a 	ret

0000ee98 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
    ee98:	deffff04 	addi	sp,sp,-4
    ee9c:	df000015 	stw	fp,0(sp)
    eea0:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
    eea4:	0001883a 	nop
    eea8:	e037883a 	mov	sp,fp
    eeac:	df000017 	ldw	fp,0(sp)
    eeb0:	dec00104 	addi	sp,sp,4
    eeb4:	f800283a 	ret

0000eeb8 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
    eeb8:	deffff04 	addi	sp,sp,-4
    eebc:	df000015 	stw	fp,0(sp)
    eec0:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
    eec4:	0001883a 	nop
    eec8:	e037883a 	mov	sp,fp
    eecc:	df000017 	ldw	fp,0(sp)
    eed0:	dec00104 	addi	sp,sp,4
    eed4:	f800283a 	ret

0000eed8 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
    eed8:	deffff04 	addi	sp,sp,-4
    eedc:	df000015 	stw	fp,0(sp)
    eee0:	d839883a 	mov	fp,sp
}
    eee4:	0001883a 	nop
    eee8:	e037883a 	mov	sp,fp
    eeec:	df000017 	ldw	fp,0(sp)
    eef0:	dec00104 	addi	sp,sp,4
    eef4:	f800283a 	ret

0000eef8 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
    eef8:	deffff04 	addi	sp,sp,-4
    eefc:	df000015 	stw	fp,0(sp)
    ef00:	d839883a 	mov	fp,sp
}
    ef04:	0001883a 	nop
    ef08:	e037883a 	mov	sp,fp
    ef0c:	df000017 	ldw	fp,0(sp)
    ef10:	dec00104 	addi	sp,sp,4
    ef14:	f800283a 	ret

0000ef18 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
    ef18:	defffe04 	addi	sp,sp,-8
    ef1c:	df000115 	stw	fp,4(sp)
    ef20:	df000104 	addi	fp,sp,4
    ef24:	e13fff15 	stw	r4,-4(fp)
}
    ef28:	0001883a 	nop
    ef2c:	e037883a 	mov	sp,fp
    ef30:	df000017 	ldw	fp,0(sp)
    ef34:	dec00104 	addi	sp,sp,4
    ef38:	f800283a 	ret

0000ef3c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    ef3c:	defffb04 	addi	sp,sp,-20
    ef40:	dfc00415 	stw	ra,16(sp)
    ef44:	df000315 	stw	fp,12(sp)
    ef48:	df000304 	addi	fp,sp,12
    ef4c:	e13ffd15 	stw	r4,-12(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    ef50:	d0a00417 	ldw	r2,-32752(gp)
    ef54:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    ef58:	00003106 	br	f020 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    ef5c:	e0bfff17 	ldw	r2,-4(fp)
    ef60:	10800217 	ldw	r2,8(r2)
    ef64:	1009883a 	mov	r4,r2
    ef68:	000050c0 	call	50c <strlen>
    ef6c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    ef70:	e0bfff17 	ldw	r2,-4(fp)
    ef74:	10c00217 	ldw	r3,8(r2)
    ef78:	e0bffe17 	ldw	r2,-8(fp)
    ef7c:	10bfffc4 	addi	r2,r2,-1
    ef80:	1885883a 	add	r2,r3,r2
    ef84:	10800003 	ldbu	r2,0(r2)
    ef88:	10803fcc 	andi	r2,r2,255
    ef8c:	1080201c 	xori	r2,r2,128
    ef90:	10bfe004 	addi	r2,r2,-128
    ef94:	10800bd8 	cmpnei	r2,r2,47
    ef98:	1000031e 	bne	r2,zero,efa8 <alt_find_file+0x6c>
    {
      len -= 1;
    ef9c:	e0bffe17 	ldw	r2,-8(fp)
    efa0:	10bfffc4 	addi	r2,r2,-1
    efa4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    efa8:	e0bffe17 	ldw	r2,-8(fp)
    efac:	e0fffd17 	ldw	r3,-12(fp)
    efb0:	1885883a 	add	r2,r3,r2
    efb4:	10800003 	ldbu	r2,0(r2)
    efb8:	10803fcc 	andi	r2,r2,255
    efbc:	1080201c 	xori	r2,r2,128
    efc0:	10bfe004 	addi	r2,r2,-128
    efc4:	10800be0 	cmpeqi	r2,r2,47
    efc8:	1000081e 	bne	r2,zero,efec <alt_find_file+0xb0>
    efcc:	e0bffe17 	ldw	r2,-8(fp)
    efd0:	e0fffd17 	ldw	r3,-12(fp)
    efd4:	1885883a 	add	r2,r3,r2
    efd8:	10800003 	ldbu	r2,0(r2)
    efdc:	10803fcc 	andi	r2,r2,255
    efe0:	1080201c 	xori	r2,r2,128
    efe4:	10bfe004 	addi	r2,r2,-128
    efe8:	10000a1e 	bne	r2,zero,f014 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    efec:	e0bfff17 	ldw	r2,-4(fp)
    eff0:	10800217 	ldw	r2,8(r2)
    eff4:	e0fffe17 	ldw	r3,-8(fp)
    eff8:	180d883a 	mov	r6,r3
    effc:	e17ffd17 	ldw	r5,-12(fp)
    f000:	1009883a 	mov	r4,r2
    f004:	000f28c0 	call	f28c <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
    f008:	1000021e 	bne	r2,zero,f014 <alt_find_file+0xd8>
    {
      /* match found */

      return next;
    f00c:	e0bfff17 	ldw	r2,-4(fp)
    f010:	00000706 	br	f030 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    f014:	e0bfff17 	ldw	r2,-4(fp)
    f018:	10800017 	ldw	r2,0(r2)
    f01c:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) &alt_fs_list)
    f020:	e0ffff17 	ldw	r3,-4(fp)
    f024:	d0a00404 	addi	r2,gp,-32752
    f028:	18bfcc1e 	bne	r3,r2,ef5c <alt_find_file+0x20>
  }
  
  /* No match found */
  
  return NULL;     
    f02c:	0005883a 	mov	r2,zero
}
    f030:	e037883a 	mov	sp,fp
    f034:	dfc00117 	ldw	ra,4(sp)
    f038:	df000017 	ldw	fp,0(sp)
    f03c:	dec00204 	addi	sp,sp,8
    f040:	f800283a 	ret

0000f044 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    f044:	defff904 	addi	sp,sp,-28
    f048:	dfc00615 	stw	ra,24(sp)
    f04c:	df000515 	stw	fp,20(sp)
    f050:	df000504 	addi	fp,sp,20
    f054:	e13ffb15 	stw	r4,-20(fp)
  alt_32 i;
  int rc = -EMFILE;
    f058:	00bffa04 	movi	r2,-24
    f05c:	e0bffe15 	stw	r2,-8(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
    f060:	d0a7b117 	ldw	r2,-24892(gp)
    f064:	e0bffd15 	stw	r2,-12(fp)
    f068:	e03ffc8d 	sth	zero,-14(fp)
    f06c:	e0bffc8b 	ldhu	r2,-14(fp)
    f070:	e0fffc44 	addi	r3,fp,-15
    f074:	180d883a 	mov	r6,r3
    f078:	100b883a 	mov	r5,r2
    f07c:	e13ffd17 	ldw	r4,-12(fp)
    f080:	00095000 	call	9500 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    f084:	e03fff15 	stw	zero,-4(fp)
    f088:	00001706 	br	f0e8 <alt_get_fd+0xa4>
  {
    if (!alt_fd_list[i].dev)
    f08c:	e0bfff17 	ldw	r2,-4(fp)
    f090:	10c00324 	muli	r3,r2,12
    f094:	00800074 	movhi	r2,1
    f098:	1885883a 	add	r2,r3,r2
    f09c:	1080ba17 	ldw	r2,744(r2)
    f0a0:	10000e1e 	bne	r2,zero,f0dc <alt_get_fd+0x98>
    {
      alt_fd_list[i].dev = dev;
    f0a4:	e0bfff17 	ldw	r2,-4(fp)
    f0a8:	11000324 	muli	r4,r2,12
    f0ac:	e0fffb17 	ldw	r3,-20(fp)
    f0b0:	00800074 	movhi	r2,1
    f0b4:	2085883a 	add	r2,r4,r2
    f0b8:	10c0ba15 	stw	r3,744(r2)
      if (i > alt_max_fd)
    f0bc:	d0e00817 	ldw	r3,-32736(gp)
    f0c0:	e0bfff17 	ldw	r2,-4(fp)
    f0c4:	1880020e 	bge	r3,r2,f0d0 <alt_get_fd+0x8c>
      {
        alt_max_fd = i;
    f0c8:	e0bfff17 	ldw	r2,-4(fp)
    f0cc:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
    f0d0:	e0bfff17 	ldw	r2,-4(fp)
    f0d4:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
    f0d8:	00000706 	br	f0f8 <alt_get_fd+0xb4>
  for (i = 0; i < ALT_MAX_FD; i++)
    f0dc:	e0bfff17 	ldw	r2,-4(fp)
    f0e0:	10800044 	addi	r2,r2,1
    f0e4:	e0bfff15 	stw	r2,-4(fp)
    f0e8:	e0bfff17 	ldw	r2,-4(fp)
    f0ec:	10800810 	cmplti	r2,r2,32
    f0f0:	103fe61e 	bne	r2,zero,f08c <alt_get_fd+0x48>
    }
  }

 alt_get_fd_exit:
    f0f4:	0001883a 	nop
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
    f0f8:	d0a7b117 	ldw	r2,-24892(gp)
    f0fc:	1009883a 	mov	r4,r2
    f100:	00098880 	call	9888 <OSSemPost>

  return rc;
    f104:	e0bffe17 	ldw	r2,-8(fp)
}
    f108:	e037883a 	mov	sp,fp
    f10c:	dfc00117 	ldw	ra,4(sp)
    f110:	df000017 	ldw	fp,0(sp)
    f114:	dec00204 	addi	sp,sp,8
    f118:	f800283a 	ret

0000f11c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    f11c:	defffb04 	addi	sp,sp,-20
    f120:	df000415 	stw	fp,16(sp)
    f124:	df000404 	addi	fp,sp,16
    f128:	e13ffd15 	stw	r4,-12(fp)
    f12c:	e17ffc15 	stw	r5,-16(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    f130:	e0bffc17 	ldw	r2,-16(fp)
    f134:	10840070 	cmpltui	r2,r2,4097
    f138:	1000021e 	bne	r2,zero,f144 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    f13c:	00840004 	movi	r2,4096
    f140:	e0bffc15 	stw	r2,-16(fp)
  }

  end = ((char*) start) + len;
    f144:	e0fffd17 	ldw	r3,-12(fp)
    f148:	e0bffc17 	ldw	r2,-16(fp)
    f14c:	1885883a 	add	r2,r3,r2
    f150:	e0bffe15 	stw	r2,-8(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    f154:	e0bffd17 	ldw	r2,-12(fp)
    f158:	e0bfff15 	stw	r2,-4(fp)
    f15c:	00000506 	br	f174 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    f160:	e0bfff17 	ldw	r2,-4(fp)
    f164:	1000603a 	flushi	r2
  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    f168:	e0bfff17 	ldw	r2,-4(fp)
    f16c:	10800804 	addi	r2,r2,32
    f170:	e0bfff15 	stw	r2,-4(fp)
    f174:	e0ffff17 	ldw	r3,-4(fp)
    f178:	e0bffe17 	ldw	r2,-8(fp)
    f17c:	18bff836 	bltu	r3,r2,f160 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    f180:	e0bffd17 	ldw	r2,-12(fp)
    f184:	108007cc 	andi	r2,r2,31
    f188:	10000226 	beq	r2,zero,f194 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    f18c:	e0bfff17 	ldw	r2,-4(fp)
    f190:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    f194:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    f198:	0001883a 	nop
    f19c:	e037883a 	mov	sp,fp
    f1a0:	df000017 	ldw	fp,0(sp)
    f1a4:	dec00104 	addi	sp,sp,4
    f1a8:	f800283a 	ret

0000f1ac <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    f1ac:	defffe04 	addi	sp,sp,-8
    f1b0:	df000115 	stw	fp,4(sp)
    f1b4:	df000104 	addi	fp,sp,4
    f1b8:	e13fff15 	stw	r4,-4(fp)
    f1bc:	e0bfff17 	ldw	r2,-4(fp)
    f1c0:	10bffe84 	addi	r2,r2,-6
    f1c4:	10c00428 	cmpgeui	r3,r2,16
    f1c8:	1800191e 	bne	r3,zero,f230 <alt_exception_cause_generated_bad_addr+0x84>
    f1cc:	100690ba 	slli	r3,r2,2
    f1d0:	00800074 	movhi	r2,1
    f1d4:	1885883a 	add	r2,r3,r2
    f1d8:	10bc7817 	ldw	r2,-3616(r2)
    f1dc:	1000683a 	jmp	r2
    f1e0:	0000f220 	cmpeqi	zero,zero,968
    f1e4:	0000f220 	cmpeqi	zero,zero,968
    f1e8:	0000f230 	cmpltui	zero,zero,968
    f1ec:	0000f230 	cmpltui	zero,zero,968
    f1f0:	0000f230 	cmpltui	zero,zero,968
    f1f4:	0000f220 	cmpeqi	zero,zero,968
    f1f8:	0000f228 	cmpgeui	zero,zero,968
    f1fc:	0000f230 	cmpltui	zero,zero,968
    f200:	0000f220 	cmpeqi	zero,zero,968
    f204:	0000f220 	cmpeqi	zero,zero,968
    f208:	0000f230 	cmpltui	zero,zero,968
    f20c:	0000f220 	cmpeqi	zero,zero,968
    f210:	0000f228 	cmpgeui	zero,zero,968
    f214:	0000f230 	cmpltui	zero,zero,968
    f218:	0000f230 	cmpltui	zero,zero,968
    f21c:	0000f220 	cmpeqi	zero,zero,968
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    f220:	00800044 	movi	r2,1
    f224:	00000306 	br	f234 <alt_exception_cause_generated_bad_addr+0x88>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    f228:	0005883a 	mov	r2,zero
    f22c:	00000106 	br	f234 <alt_exception_cause_generated_bad_addr+0x88>

  default:
    return 0;
    f230:	0005883a 	mov	r2,zero
  }
}
    f234:	e037883a 	mov	sp,fp
    f238:	df000017 	ldw	fp,0(sp)
    f23c:	dec00104 	addi	sp,sp,4
    f240:	f800283a 	ret

0000f244 <atexit>:
    f244:	200b883a 	mov	r5,r4
    f248:	000f883a 	mov	r7,zero
    f24c:	000d883a 	mov	r6,zero
    f250:	0009883a 	mov	r4,zero
    f254:	000f3041 	jmpi	f304 <__register_exitproc>

0000f258 <exit>:
    f258:	defffe04 	addi	sp,sp,-8
    f25c:	000b883a 	mov	r5,zero
    f260:	dc000015 	stw	r16,0(sp)
    f264:	dfc00115 	stw	ra,4(sp)
    f268:	2021883a 	mov	r16,r4
    f26c:	000f3940 	call	f394 <__call_exitprocs>
    f270:	00800074 	movhi	r2,1
    f274:	1105f817 	ldw	r4,6112(r2)
    f278:	20800f17 	ldw	r2,60(r4)
    f27c:	10000126 	beq	r2,zero,f284 <exit+0x2c>
    f280:	103ee83a 	callr	r2
    f284:	8009883a 	mov	r4,r16
    f288:	000f4b40 	call	f4b4 <_exit>

0000f28c <memcmp>:
    f28c:	30800130 	cmpltui	r2,r6,4
    f290:	10000b1e 	bne	r2,zero,f2c0 <memcmp+0x34>
    f294:	2144b03a 	or	r2,r4,r5
    f298:	108000cc 	andi	r2,r2,3
    f29c:	1000171e 	bne	r2,zero,f2fc <memcmp+0x70>
    f2a0:	20c00017 	ldw	r3,0(r4)
    f2a4:	28800017 	ldw	r2,0(r5)
    f2a8:	1880141e 	bne	r3,r2,f2fc <memcmp+0x70>
    f2ac:	31bfff04 	addi	r6,r6,-4
    f2b0:	30800128 	cmpgeui	r2,r6,4
    f2b4:	21000104 	addi	r4,r4,4
    f2b8:	29400104 	addi	r5,r5,4
    f2bc:	103ff81e 	bne	r2,zero,f2a0 <memcmp+0x14>
    f2c0:	30bfffc4 	addi	r2,r6,-1
    f2c4:	30000b26 	beq	r6,zero,f2f4 <memcmp+0x68>
    f2c8:	11800044 	addi	r6,r2,1
    f2cc:	218d883a 	add	r6,r4,r6
    f2d0:	00000106 	br	f2d8 <memcmp+0x4c>
    f2d4:	21800726 	beq	r4,r6,f2f4 <memcmp+0x68>
    f2d8:	20800003 	ldbu	r2,0(r4)
    f2dc:	28c00003 	ldbu	r3,0(r5)
    f2e0:	21000044 	addi	r4,r4,1
    f2e4:	29400044 	addi	r5,r5,1
    f2e8:	10fffa26 	beq	r2,r3,f2d4 <memcmp+0x48>
    f2ec:	10c5c83a 	sub	r2,r2,r3
    f2f0:	f800283a 	ret
    f2f4:	0005883a 	mov	r2,zero
    f2f8:	f800283a 	ret
    f2fc:	30bfffc4 	addi	r2,r6,-1
    f300:	003ff106 	br	f2c8 <memcmp+0x3c>

0000f304 <__register_exitproc>:
    f304:	00800074 	movhi	r2,1
    f308:	10c5f817 	ldw	r3,6112(r2)
    f30c:	18805217 	ldw	r2,328(r3)
    f310:	10001726 	beq	r2,zero,f370 <__register_exitproc+0x6c>
    f314:	10c00117 	ldw	r3,4(r2)
    f318:	1a000808 	cmpgei	r8,r3,32
    f31c:	40001b1e 	bne	r8,zero,f38c <__register_exitproc+0x88>
    f320:	20000b26 	beq	r4,zero,f350 <__register_exitproc+0x4c>
    f324:	181090ba 	slli	r8,r3,2
    f328:	02400044 	movi	r9,1
    f32c:	48d2983a 	sll	r9,r9,r3
    f330:	1211883a 	add	r8,r2,r8
    f334:	41802215 	stw	r6,136(r8)
    f338:	11806217 	ldw	r6,392(r2)
    f33c:	21000098 	cmpnei	r4,r4,2
    f340:	324cb03a 	or	r6,r6,r9
    f344:	11806215 	stw	r6,392(r2)
    f348:	41c04215 	stw	r7,264(r8)
    f34c:	20000b26 	beq	r4,zero,f37c <__register_exitproc+0x78>
    f350:	19000084 	addi	r4,r3,2
    f354:	200890ba 	slli	r4,r4,2
    f358:	18c00044 	addi	r3,r3,1
    f35c:	10c00115 	stw	r3,4(r2)
    f360:	1105883a 	add	r2,r2,r4
    f364:	11400015 	stw	r5,0(r2)
    f368:	0005883a 	mov	r2,zero
    f36c:	f800283a 	ret
    f370:	18805304 	addi	r2,r3,332
    f374:	18805215 	stw	r2,328(r3)
    f378:	003fe606 	br	f314 <__register_exitproc+0x10>
    f37c:	11006317 	ldw	r4,396(r2)
    f380:	2252b03a 	or	r9,r4,r9
    f384:	12406315 	stw	r9,396(r2)
    f388:	003ff106 	br	f350 <__register_exitproc+0x4c>
    f38c:	00bfffc4 	movi	r2,-1
    f390:	f800283a 	ret

0000f394 <__call_exitprocs>:
    f394:	defff704 	addi	sp,sp,-36
    f398:	00800074 	movhi	r2,1
    f39c:	dcc00315 	stw	r19,12(sp)
    f3a0:	14c5f817 	ldw	r19,6112(r2)
    f3a4:	dc800215 	stw	r18,8(sp)
    f3a8:	dfc00815 	stw	ra,32(sp)
    f3ac:	9c805217 	ldw	r18,328(r19)
    f3b0:	ddc00715 	stw	r23,28(sp)
    f3b4:	dd800615 	stw	r22,24(sp)
    f3b8:	dd400515 	stw	r21,20(sp)
    f3bc:	dd000415 	stw	r20,16(sp)
    f3c0:	dc400115 	stw	r17,4(sp)
    f3c4:	dc000015 	stw	r16,0(sp)
    f3c8:	90001026 	beq	r18,zero,f40c <__call_exitprocs+0x78>
    f3cc:	202b883a 	mov	r21,r4
    f3d0:	282d883a 	mov	r22,r5
    f3d4:	05000044 	movi	r20,1
    f3d8:	94000117 	ldw	r16,4(r18)
    f3dc:	847fffc4 	addi	r17,r16,-1
    f3e0:	88000a16 	blt	r17,zero,f40c <__call_exitprocs+0x78>
    f3e4:	84000044 	addi	r16,r16,1
    f3e8:	802090ba 	slli	r16,r16,2
    f3ec:	9421883a 	add	r16,r18,r16
    f3f0:	b0001126 	beq	r22,zero,f438 <__call_exitprocs+0xa4>
    f3f4:	80804017 	ldw	r2,256(r16)
    f3f8:	15800f26 	beq	r2,r22,f438 <__call_exitprocs+0xa4>
    f3fc:	8c7fffc4 	addi	r17,r17,-1
    f400:	88bfffd8 	cmpnei	r2,r17,-1
    f404:	843fff04 	addi	r16,r16,-4
    f408:	103ff91e 	bne	r2,zero,f3f0 <__call_exitprocs+0x5c>
    f40c:	dfc00817 	ldw	ra,32(sp)
    f410:	ddc00717 	ldw	r23,28(sp)
    f414:	dd800617 	ldw	r22,24(sp)
    f418:	dd400517 	ldw	r21,20(sp)
    f41c:	dd000417 	ldw	r20,16(sp)
    f420:	dcc00317 	ldw	r19,12(sp)
    f424:	dc800217 	ldw	r18,8(sp)
    f428:	dc400117 	ldw	r17,4(sp)
    f42c:	dc000017 	ldw	r16,0(sp)
    f430:	dec00904 	addi	sp,sp,36
    f434:	f800283a 	ret
    f438:	90800117 	ldw	r2,4(r18)
    f43c:	81800017 	ldw	r6,0(r16)
    f440:	10bfffc4 	addi	r2,r2,-1
    f444:	14401726 	beq	r2,r17,f4a4 <__call_exitprocs+0x110>
    f448:	80000015 	stw	zero,0(r16)
    f44c:	303feb26 	beq	r6,zero,f3fc <__call_exitprocs+0x68>
    f450:	a446983a 	sll	r3,r20,r17
    f454:	90806217 	ldw	r2,392(r18)
    f458:	95c00117 	ldw	r23,4(r18)
    f45c:	1884703a 	and	r2,r3,r2
    f460:	1000081e 	bne	r2,zero,f484 <__call_exitprocs+0xf0>
    f464:	303ee83a 	callr	r6
    f468:	90c00117 	ldw	r3,4(r18)
    f46c:	98805217 	ldw	r2,328(r19)
    f470:	1dc0011e 	bne	r3,r23,f478 <__call_exitprocs+0xe4>
    f474:	90bfe126 	beq	r18,r2,f3fc <__call_exitprocs+0x68>
    f478:	103fe426 	beq	r2,zero,f40c <__call_exitprocs+0x78>
    f47c:	1025883a 	mov	r18,r2
    f480:	003fd506 	br	f3d8 <__call_exitprocs+0x44>
    f484:	90806317 	ldw	r2,396(r18)
    f488:	81002017 	ldw	r4,128(r16)
    f48c:	1886703a 	and	r3,r3,r2
    f490:	1800061e 	bne	r3,zero,f4ac <__call_exitprocs+0x118>
    f494:	200b883a 	mov	r5,r4
    f498:	a809883a 	mov	r4,r21
    f49c:	303ee83a 	callr	r6
    f4a0:	003ff106 	br	f468 <__call_exitprocs+0xd4>
    f4a4:	94400115 	stw	r17,4(r18)
    f4a8:	003fe806 	br	f44c <__call_exitprocs+0xb8>
    f4ac:	303ee83a 	callr	r6
    f4b0:	003fed06 	br	f468 <__call_exitprocs+0xd4>

0000f4b4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    f4b4:	defffd04 	addi	sp,sp,-12
    f4b8:	df000215 	stw	fp,8(sp)
    f4bc:	df000204 	addi	fp,sp,8
    f4c0:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    f4c4:	d027c145 	stb	zero,-24827(gp)
    f4c8:	e0bffe17 	ldw	r2,-8(fp)
    f4cc:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    f4d0:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    f4d4:	10000226 	beq	r2,zero,f4e0 <_exit+0x2c>
    ALT_SIM_FAIL();
    f4d8:	002af070 	cmpltui	zero,zero,43969
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
    f4dc:	00000106 	br	f4e4 <_exit+0x30>
    ALT_SIM_PASS();
    f4e0:	002af0b0 	cmpltui	zero,zero,43970
}
    f4e4:	0001883a 	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    f4e8:	003fff06 	br	f4e8 <_exit+0x34>
